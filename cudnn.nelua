global cudaRoundMode: type <cimport,nodecl,using,ctypedef'cudaRoundMode'> = @enum(cint){
  cudaRoundNearest = 0,
  cudaRoundZero = 1,
  cudaRoundPosInf = 2,
  cudaRoundMinInf = 3
}
global cuComplex: type <cimport,nodecl> = @record{
  x: float32,
  y: float32
}
global cuDoubleComplex: type <cimport,nodecl> = @record{
  x: float64,
  y: float64
}
global dim3: type <cimport,nodecl> = @record{
  x: cuint,
  y: cuint,
  z: cuint
}
global cudaError_t: type <cimport,nodecl,using> = @enum(cint){
  cudaSuccess = 0,
  cudaErrorInvalidValue = 1,
  cudaErrorMemoryAllocation = 2,
  cudaErrorInitializationError = 3,
  cudaErrorCudartUnloading = 4,
  cudaErrorProfilerDisabled = 5,
  cudaErrorProfilerNotInitialized = 6,
  cudaErrorProfilerAlreadyStarted = 7,
  cudaErrorProfilerAlreadyStopped = 8,
  cudaErrorInvalidConfiguration = 9,
  cudaErrorInvalidPitchValue = 12,
  cudaErrorInvalidSymbol = 13,
  cudaErrorInvalidHostPointer = 16,
  cudaErrorInvalidDevicePointer = 17,
  cudaErrorInvalidTexture = 18,
  cudaErrorInvalidTextureBinding = 19,
  cudaErrorInvalidChannelDescriptor = 20,
  cudaErrorInvalidMemcpyDirection = 21,
  cudaErrorAddressOfConstant = 22,
  cudaErrorTextureFetchFailed = 23,
  cudaErrorTextureNotBound = 24,
  cudaErrorSynchronizationError = 25,
  cudaErrorInvalidFilterSetting = 26,
  cudaErrorInvalidNormSetting = 27,
  cudaErrorMixedDeviceExecution = 28,
  cudaErrorNotYetImplemented = 31,
  cudaErrorMemoryValueTooLarge = 32,
  cudaErrorStubLibrary = 34,
  cudaErrorInsufficientDriver = 35,
  cudaErrorCallRequiresNewerDriver = 36,
  cudaErrorInvalidSurface = 37,
  cudaErrorDuplicateVariableName = 43,
  cudaErrorDuplicateTextureName = 44,
  cudaErrorDuplicateSurfaceName = 45,
  cudaErrorDevicesUnavailable = 46,
  cudaErrorIncompatibleDriverContext = 49,
  cudaErrorMissingConfiguration = 52,
  cudaErrorPriorLaunchFailure = 53,
  cudaErrorLaunchMaxDepthExceeded = 65,
  cudaErrorLaunchFileScopedTex = 66,
  cudaErrorLaunchFileScopedSurf = 67,
  cudaErrorSyncDepthExceeded = 68,
  cudaErrorLaunchPendingCountExceeded = 69,
  cudaErrorInvalidDeviceFunction = 98,
  cudaErrorNoDevice = 100,
  cudaErrorInvalidDevice = 101,
  cudaErrorDeviceNotLicensed = 102,
  cudaErrorSoftwareValidityNotEstablished = 103,
  cudaErrorStartupFailure = 127,
  cudaErrorInvalidKernelImage = 200,
  cudaErrorDeviceUninitialized = 201,
  cudaErrorMapBufferObjectFailed = 205,
  cudaErrorUnmapBufferObjectFailed = 206,
  cudaErrorArrayIsMapped = 207,
  cudaErrorAlreadyMapped = 208,
  cudaErrorNoKernelImageForDevice = 209,
  cudaErrorAlreadyAcquired = 210,
  cudaErrorNotMapped = 211,
  cudaErrorNotMappedAsArray = 212,
  cudaErrorNotMappedAsPointer = 213,
  cudaErrorECCUncorrectable = 214,
  cudaErrorUnsupportedLimit = 215,
  cudaErrorDeviceAlreadyInUse = 216,
  cudaErrorPeerAccessUnsupported = 217,
  cudaErrorInvalidPtx = 218,
  cudaErrorInvalidGraphicsContext = 219,
  cudaErrorNvlinkUncorrectable = 220,
  cudaErrorJitCompilerNotFound = 221,
  cudaErrorUnsupportedPtxVersion = 222,
  cudaErrorJitCompilationDisabled = 223,
  cudaErrorUnsupportedExecAffinity = 224,
  cudaErrorUnsupportedDevSideSync = 225,
  cudaErrorInvalidSource = 300,
  cudaErrorFileNotFound = 301,
  cudaErrorSharedObjectSymbolNotFound = 302,
  cudaErrorSharedObjectInitFailed = 303,
  cudaErrorOperatingSystem = 304,
  cudaErrorInvalidResourceHandle = 400,
  cudaErrorIllegalState = 401,
  cudaErrorSymbolNotFound = 500,
  cudaErrorNotReady = 600,
  cudaErrorIllegalAddress = 700,
  cudaErrorLaunchOutOfResources = 701,
  cudaErrorLaunchTimeout = 702,
  cudaErrorLaunchIncompatibleTexturing = 703,
  cudaErrorPeerAccessAlreadyEnabled = 704,
  cudaErrorPeerAccessNotEnabled = 705,
  cudaErrorSetOnActiveProcess = 708,
  cudaErrorContextIsDestroyed = 709,
  cudaErrorAssert = 710,
  cudaErrorTooManyPeers = 711,
  cudaErrorHostMemoryAlreadyRegistered = 712,
  cudaErrorHostMemoryNotRegistered = 713,
  cudaErrorHardwareStackError = 714,
  cudaErrorIllegalInstruction = 715,
  cudaErrorMisalignedAddress = 716,
  cudaErrorInvalidAddressSpace = 717,
  cudaErrorInvalidPc = 718,
  cudaErrorLaunchFailure = 719,
  cudaErrorCooperativeLaunchTooLarge = 720,
  cudaErrorNotPermitted = 800,
  cudaErrorNotSupported = 801,
  cudaErrorSystemNotReady = 802,
  cudaErrorSystemDriverMismatch = 803,
  cudaErrorCompatNotSupportedOnDevice = 804,
  cudaErrorMpsConnectionFailed = 805,
  cudaErrorMpsRpcFailure = 806,
  cudaErrorMpsServerNotReady = 807,
  cudaErrorMpsMaxClientsReached = 808,
  cudaErrorMpsMaxConnectionsReached = 809,
  cudaErrorMpsClientTerminated = 810,
  cudaErrorCdpNotSupported = 811,
  cudaErrorCdpVersionMismatch = 812,
  cudaErrorStreamCaptureUnsupported = 900,
  cudaErrorStreamCaptureInvalidated = 901,
  cudaErrorStreamCaptureMerge = 902,
  cudaErrorStreamCaptureUnmatched = 903,
  cudaErrorStreamCaptureUnjoined = 904,
  cudaErrorStreamCaptureIsolation = 905,
  cudaErrorStreamCaptureImplicit = 906,
  cudaErrorCapturedEvent = 907,
  cudaErrorStreamCaptureWrongThread = 908,
  cudaErrorTimeout = 909,
  cudaErrorGraphExecUpdateFailure = 910,
  cudaErrorExternalDevice = 911,
  cudaErrorInvalidClusterSize = 912,
  cudaErrorUnknown = 999,
  cudaErrorApiFailureBase = 10000
}
global cudaChannelFormatKind: type <cimport,nodecl,using,ctypedef'cudaChannelFormatKind'> = @enum(cint){
  cudaChannelFormatKindSigned = 0,
  cudaChannelFormatKindUnsigned = 1,
  cudaChannelFormatKindFloat = 2,
  cudaChannelFormatKindNone = 3,
  cudaChannelFormatKindNV12 = 4,
  cudaChannelFormatKindUnsignedNormalized8X1 = 5,
  cudaChannelFormatKindUnsignedNormalized8X2 = 6,
  cudaChannelFormatKindUnsignedNormalized8X4 = 7,
  cudaChannelFormatKindUnsignedNormalized16X1 = 8,
  cudaChannelFormatKindUnsignedNormalized16X2 = 9,
  cudaChannelFormatKindUnsignedNormalized16X4 = 10,
  cudaChannelFormatKindSignedNormalized8X1 = 11,
  cudaChannelFormatKindSignedNormalized8X2 = 12,
  cudaChannelFormatKindSignedNormalized8X4 = 13,
  cudaChannelFormatKindSignedNormalized16X1 = 14,
  cudaChannelFormatKindSignedNormalized16X2 = 15,
  cudaChannelFormatKindSignedNormalized16X4 = 16,
  cudaChannelFormatKindUnsignedBlockCompressed1 = 17,
  cudaChannelFormatKindUnsignedBlockCompressed1SRGB = 18,
  cudaChannelFormatKindUnsignedBlockCompressed2 = 19,
  cudaChannelFormatKindUnsignedBlockCompressed2SRGB = 20,
  cudaChannelFormatKindUnsignedBlockCompressed3 = 21,
  cudaChannelFormatKindUnsignedBlockCompressed3SRGB = 22,
  cudaChannelFormatKindUnsignedBlockCompressed4 = 23,
  cudaChannelFormatKindSignedBlockCompressed4 = 24,
  cudaChannelFormatKindUnsignedBlockCompressed5 = 25,
  cudaChannelFormatKindSignedBlockCompressed5 = 26,
  cudaChannelFormatKindUnsignedBlockCompressed6H = 27,
  cudaChannelFormatKindSignedBlockCompressed6H = 28,
  cudaChannelFormatKindUnsignedBlockCompressed7 = 29,
  cudaChannelFormatKindUnsignedBlockCompressed7SRGB = 30
}
global cudaChannelFormatDesc: type <cimport,nodecl,ctypedef'cudaChannelFormatDesc'> = @record{
  x: cint,
  y: cint,
  z: cint,
  w: cint,
  f: cudaChannelFormatKind
}
global cudaArray: type <cimport,nodecl,ctypedef'cudaArray',forwarddecl> = @record{}
global cudaArray_t: type <cimport,nodecl> = @*cudaArray
global cudaArray_const_t: type <cimport,nodecl> = @*cudaArray
global cudaMipmappedArray: type <cimport,nodecl,ctypedef'cudaMipmappedArray',forwarddecl> = @record{}
global cudaMipmappedArray_t: type <cimport,nodecl> = @*cudaMipmappedArray
global cudaMipmappedArray_const_t: type <cimport,nodecl> = @*cudaMipmappedArray
global cudaArraySparseProperties: type <cimport,nodecl,ctypedef'cudaArraySparseProperties'> = @record{
  tileExtent: record{
    width: cuint,
    height: cuint,
    depth: cuint
  },
  miptailFirstLevel: cuint,
  miptailSize: culonglong,
  flags: cuint,
  reserved: [4]cuint
}
global cudaArrayMemoryRequirements: type <cimport,nodecl,ctypedef'cudaArrayMemoryRequirements'> = @record{
  size: csize,
  alignment: csize,
  reserved: [4]cuint
}
global cudaMemoryType: type <cimport,nodecl,using,ctypedef'cudaMemoryType'> = @enum(cint){
  cudaMemoryTypeUnregistered = 0,
  cudaMemoryTypeHost = 1,
  cudaMemoryTypeDevice = 2,
  cudaMemoryTypeManaged = 3
}
global cudaMemcpyKind: type <cimport,nodecl,using,ctypedef'cudaMemcpyKind'> = @enum(cint){
  cudaMemcpyHostToHost = 0,
  cudaMemcpyHostToDevice = 1,
  cudaMemcpyDeviceToHost = 2,
  cudaMemcpyDeviceToDevice = 3,
  cudaMemcpyDefault = 4
}
global cudaPitchedPtr: type <cimport,nodecl,ctypedef'cudaPitchedPtr'> = @record{
  ptr: pointer,
  pitch: csize,
  xsize: csize,
  ysize: csize
}
global cudaExtent: type <cimport,nodecl,ctypedef'cudaExtent'> = @record{
  width: csize,
  height: csize,
  depth: csize
}
global cudaPos: type <cimport,nodecl,ctypedef'cudaPos'> = @record{
  x: csize,
  y: csize,
  z: csize
}
global cudaMemcpy3DParms: type <cimport,nodecl,ctypedef'cudaMemcpy3DParms'> = @record{
  srcArray: cudaArray_t,
  srcPos: cudaPos,
  srcPtr: cudaPitchedPtr,
  dstArray: cudaArray_t,
  dstPos: cudaPos,
  dstPtr: cudaPitchedPtr,
  extent: cudaExtent,
  kind: cudaMemcpyKind
}
global cudaMemcpy3DPeerParms: type <cimport,nodecl,ctypedef'cudaMemcpy3DPeerParms'> = @record{
  srcArray: cudaArray_t,
  srcPos: cudaPos,
  srcPtr: cudaPitchedPtr,
  srcDevice: cint,
  dstArray: cudaArray_t,
  dstPos: cudaPos,
  dstPtr: cudaPitchedPtr,
  dstDevice: cint,
  extent: cudaExtent
}
global cudaMemsetParams: type <cimport,nodecl,ctypedef'cudaMemsetParams'> = @record{
  dst: pointer,
  pitch: csize,
  value: cuint,
  elementSize: cuint,
  width: csize,
  height: csize
}
global cudaAccessProperty: type <cimport,nodecl,using,ctypedef'cudaAccessProperty'> = @enum(cint){
  cudaAccessPropertyNormal = 0,
  cudaAccessPropertyStreaming = 1,
  cudaAccessPropertyPersisting = 2
}
global cudaAccessPolicyWindow: type <cimport,nodecl,ctypedef'cudaAccessPolicyWindow'> = @record{
  base_ptr: pointer,
  num_bytes: csize,
  hitRatio: float32,
  hitProp: cudaAccessProperty,
  missProp: cudaAccessProperty
}
global cudaHostFn_t: type <cimport,nodecl> = @function(userData: pointer): void
global cudaHostNodeParams: type <cimport,nodecl,ctypedef'cudaHostNodeParams'> = @record{
  fn: cudaHostFn_t,
  userData: pointer
}
global cudaStreamCaptureStatus: type <cimport,nodecl,using,ctypedef'cudaStreamCaptureStatus'> = @enum(cint){
  cudaStreamCaptureStatusNone = 0,
  cudaStreamCaptureStatusActive = 1,
  cudaStreamCaptureStatusInvalidated = 2
}
global cudaStreamCaptureMode: type <cimport,nodecl,using,ctypedef'cudaStreamCaptureMode'> = @enum(cint){
  cudaStreamCaptureModeGlobal = 0,
  cudaStreamCaptureModeThreadLocal = 1,
  cudaStreamCaptureModeRelaxed = 2
}
global cudaSynchronizationPolicy: type <cimport,nodecl,using,ctypedef'cudaSynchronizationPolicy'> = @enum(cint){
  cudaSyncPolicyAuto = 1,
  cudaSyncPolicySpin = 2,
  cudaSyncPolicyYield = 3,
  cudaSyncPolicyBlockingSync = 4
}
global cudaClusterSchedulingPolicy: type <cimport,nodecl,using,ctypedef'cudaClusterSchedulingPolicy'> = @enum(cint){
  cudaClusterSchedulingPolicyDefault = 0,
  cudaClusterSchedulingPolicySpread = 1,
  cudaClusterSchedulingPolicyLoadBalancing = 2
}
global cudaStreamUpdateCaptureDependenciesFlags: type <cimport,nodecl,using,ctypedef'cudaStreamUpdateCaptureDependenciesFlags'> = @enum(cint){
  cudaStreamAddCaptureDependencies = 0,
  cudaStreamSetCaptureDependencies = 1
}
global cudaUserObjectFlags: type <cimport,nodecl,using,ctypedef'cudaUserObjectFlags'> = @enum(cint){
  cudaUserObjectNoDestructorSync = 1
}
global cudaUserObjectRetainFlags: type <cimport,nodecl,using,ctypedef'cudaUserObjectRetainFlags'> = @enum(cint){
  cudaGraphUserObjectMove = 1
}
global cudaGraphicsResource: type <cimport,nodecl,ctypedef'cudaGraphicsResource',forwarddecl> = @record{}
global cudaGraphicsRegisterFlags: type <cimport,nodecl,using,ctypedef'cudaGraphicsRegisterFlags'> = @enum(cint){
  cudaGraphicsRegisterFlagsNone = 0,
  cudaGraphicsRegisterFlagsReadOnly = 1,
  cudaGraphicsRegisterFlagsWriteDiscard = 2,
  cudaGraphicsRegisterFlagsSurfaceLoadStore = 4,
  cudaGraphicsRegisterFlagsTextureGather = 8
}
global cudaGraphicsMapFlags: type <cimport,nodecl,using,ctypedef'cudaGraphicsMapFlags'> = @enum(cint){
  cudaGraphicsMapFlagsNone = 0,
  cudaGraphicsMapFlagsReadOnly = 1,
  cudaGraphicsMapFlagsWriteDiscard = 2
}
global cudaGraphicsCubeFace: type <cimport,nodecl,using,ctypedef'cudaGraphicsCubeFace'> = @enum(cint){
  cudaGraphicsCubeFacePositiveX = 0,
  cudaGraphicsCubeFaceNegativeX = 1,
  cudaGraphicsCubeFacePositiveY = 2,
  cudaGraphicsCubeFaceNegativeY = 3,
  cudaGraphicsCubeFacePositiveZ = 4,
  cudaGraphicsCubeFaceNegativeZ = 5
}
global cudaResourceType: type <cimport,nodecl,using,ctypedef'cudaResourceType'> = @enum(cint){
  cudaResourceTypeArray = 0,
  cudaResourceTypeMipmappedArray = 1,
  cudaResourceTypeLinear = 2,
  cudaResourceTypePitch2D = 3
}
global cudaResourceViewFormat: type <cimport,nodecl,using,ctypedef'cudaResourceViewFormat'> = @enum(cint){
  cudaResViewFormatNone = 0,
  cudaResViewFormatUnsignedChar1 = 1,
  cudaResViewFormatUnsignedChar2 = 2,
  cudaResViewFormatUnsignedChar4 = 3,
  cudaResViewFormatSignedChar1 = 4,
  cudaResViewFormatSignedChar2 = 5,
  cudaResViewFormatSignedChar4 = 6,
  cudaResViewFormatUnsignedShort1 = 7,
  cudaResViewFormatUnsignedShort2 = 8,
  cudaResViewFormatUnsignedShort4 = 9,
  cudaResViewFormatSignedShort1 = 10,
  cudaResViewFormatSignedShort2 = 11,
  cudaResViewFormatSignedShort4 = 12,
  cudaResViewFormatUnsignedInt1 = 13,
  cudaResViewFormatUnsignedInt2 = 14,
  cudaResViewFormatUnsignedInt4 = 15,
  cudaResViewFormatSignedInt1 = 16,
  cudaResViewFormatSignedInt2 = 17,
  cudaResViewFormatSignedInt4 = 18,
  cudaResViewFormatHalf1 = 19,
  cudaResViewFormatHalf2 = 20,
  cudaResViewFormatHalf4 = 21,
  cudaResViewFormatFloat1 = 22,
  cudaResViewFormatFloat2 = 23,
  cudaResViewFormatFloat4 = 24,
  cudaResViewFormatUnsignedBlockCompressed1 = 25,
  cudaResViewFormatUnsignedBlockCompressed2 = 26,
  cudaResViewFormatUnsignedBlockCompressed3 = 27,
  cudaResViewFormatUnsignedBlockCompressed4 = 28,
  cudaResViewFormatSignedBlockCompressed4 = 29,
  cudaResViewFormatUnsignedBlockCompressed5 = 30,
  cudaResViewFormatSignedBlockCompressed5 = 31,
  cudaResViewFormatUnsignedBlockCompressed6H = 32,
  cudaResViewFormatSignedBlockCompressed6H = 33,
  cudaResViewFormatUnsignedBlockCompressed7 = 34
}
global cudaResourceDesc: type <cimport,nodecl,ctypedef'cudaResourceDesc'> = @record{
  resType: cudaResourceType,
  res: union{
    array: record{
      array: cudaArray_t
    },
    mipmap: record{
      mipmap: cudaMipmappedArray_t
    },
    linear: record{
      devPtr: pointer,
      desc: cudaChannelFormatDesc,
      sizeInBytes: csize
    },
    pitch2D: record{
      devPtr: pointer,
      desc: cudaChannelFormatDesc,
      width: csize,
      height: csize,
      pitchInBytes: csize
    }
  }
}
global cudaResourceViewDesc: type <cimport,nodecl,ctypedef'cudaResourceViewDesc'> = @record{
  format: cudaResourceViewFormat,
  width: csize,
  height: csize,
  depth: csize,
  firstMipmapLevel: cuint,
  lastMipmapLevel: cuint,
  firstLayer: cuint,
  lastLayer: cuint
}
global cudaPointerAttributes: type <cimport,nodecl,ctypedef'cudaPointerAttributes'> = @record{
  type: cudaMemoryType,
  device: cint,
  devicePointer: pointer,
  hostPointer: pointer
}
global cudaFuncAttributes: type <cimport,nodecl,ctypedef'cudaFuncAttributes'> = @record{
  sharedSizeBytes: csize,
  constSizeBytes: csize,
  localSizeBytes: csize,
  maxThreadsPerBlock: cint,
  numRegs: cint,
  ptxVersion: cint,
  binaryVersion: cint,
  cacheModeCA: cint,
  maxDynamicSharedSizeBytes: cint,
  preferredShmemCarveout: cint,
  clusterDimMustBeSet: cint,
  requiredClusterWidth: cint,
  requiredClusterHeight: cint,
  requiredClusterDepth: cint,
  clusterSchedulingPolicyPreference: cint,
  nonPortableClusterSizeAllowed: cint,
  reserved: [16]cint
}
global cudaFuncAttribute: type <cimport,nodecl,using,ctypedef'cudaFuncAttribute'> = @enum(cint){
  cudaFuncAttributeMaxDynamicSharedMemorySize = 8,
  cudaFuncAttributePreferredSharedMemoryCarveout = 9,
  cudaFuncAttributeClusterDimMustBeSet = 10,
  cudaFuncAttributeRequiredClusterWidth = 11,
  cudaFuncAttributeRequiredClusterHeight = 12,
  cudaFuncAttributeRequiredClusterDepth = 13,
  cudaFuncAttributeNonPortableClusterSizeAllowed = 14,
  cudaFuncAttributeClusterSchedulingPolicyPreference = 15,
  cudaFuncAttributeMax = 16
}
global cudaFuncCache: type <cimport,nodecl,using,ctypedef'cudaFuncCache'> = @enum(cint){
  cudaFuncCachePreferNone = 0,
  cudaFuncCachePreferShared = 1,
  cudaFuncCachePreferL1 = 2,
  cudaFuncCachePreferEqual = 3
}
global cudaSharedMemConfig: type <cimport,nodecl,using,ctypedef'cudaSharedMemConfig'> = @enum(cint){
  cudaSharedMemBankSizeDefault = 0,
  cudaSharedMemBankSizeFourByte = 1,
  cudaSharedMemBankSizeEightByte = 2
}
global cudaSharedCarveout: type <cimport,nodecl,using,ctypedef'cudaSharedCarveout'> = @enum(cint){
  cudaSharedmemCarveoutDefault = -1,
  cudaSharedmemCarveoutMaxShared = 100,
  cudaSharedmemCarveoutMaxL1 = 0
}
global cudaComputeMode: type <cimport,nodecl,using,ctypedef'cudaComputeMode'> = @enum(cint){
  cudaComputeModeDefault = 0,
  cudaComputeModeExclusive = 1,
  cudaComputeModeProhibited = 2,
  cudaComputeModeExclusiveProcess = 3
}
global cudaLimit: type <cimport,nodecl,using,ctypedef'cudaLimit'> = @enum(cint){
  cudaLimitStackSize = 0,
  cudaLimitPrintfFifoSize = 1,
  cudaLimitMallocHeapSize = 2,
  cudaLimitDevRuntimeSyncDepth = 3,
  cudaLimitDevRuntimePendingLaunchCount = 4,
  cudaLimitMaxL2FetchGranularity = 5,
  cudaLimitPersistingL2CacheSize = 6
}
global cudaMemoryAdvise: type <cimport,nodecl,using,ctypedef'cudaMemoryAdvise'> = @enum(cint){
  cudaMemAdviseSetReadMostly = 1,
  cudaMemAdviseUnsetReadMostly = 2,
  cudaMemAdviseSetPreferredLocation = 3,
  cudaMemAdviseUnsetPreferredLocation = 4,
  cudaMemAdviseSetAccessedBy = 5,
  cudaMemAdviseUnsetAccessedBy = 6
}
global cudaMemRangeAttribute: type <cimport,nodecl,using,ctypedef'cudaMemRangeAttribute'> = @enum(cint){
  cudaMemRangeAttributeReadMostly = 1,
  cudaMemRangeAttributePreferredLocation = 2,
  cudaMemRangeAttributeAccessedBy = 3,
  cudaMemRangeAttributeLastPrefetchLocation = 4
}
global cudaFlushGPUDirectRDMAWritesOptions: type <cimport,nodecl,using,ctypedef'cudaFlushGPUDirectRDMAWritesOptions'> = @enum(cint){
  cudaFlushGPUDirectRDMAWritesOptionHost = 1,
  cudaFlushGPUDirectRDMAWritesOptionMemOps = 2
}
global cudaGPUDirectRDMAWritesOrdering: type <cimport,nodecl,using,ctypedef'cudaGPUDirectRDMAWritesOrdering'> = @enum(cint){
  cudaGPUDirectRDMAWritesOrderingNone = 0,
  cudaGPUDirectRDMAWritesOrderingOwner = 100,
  cudaGPUDirectRDMAWritesOrderingAllDevices = 200
}
global cudaFlushGPUDirectRDMAWritesScope: type <cimport,nodecl,using,ctypedef'cudaFlushGPUDirectRDMAWritesScope'> = @enum(cint){
  cudaFlushGPUDirectRDMAWritesToOwner = 100,
  cudaFlushGPUDirectRDMAWritesToAllDevices = 200
}
global cudaFlushGPUDirectRDMAWritesTarget: type <cimport,nodecl,using,ctypedef'cudaFlushGPUDirectRDMAWritesTarget'> = @enum(cint){
  cudaFlushGPUDirectRDMAWritesTargetCurrentDevice = 0
}
global cudaDeviceAttr: type <cimport,nodecl,using,ctypedef'cudaDeviceAttr'> = @enum(cint){
  cudaDevAttrMaxThreadsPerBlock = 1,
  cudaDevAttrMaxBlockDimX = 2,
  cudaDevAttrMaxBlockDimY = 3,
  cudaDevAttrMaxBlockDimZ = 4,
  cudaDevAttrMaxGridDimX = 5,
  cudaDevAttrMaxGridDimY = 6,
  cudaDevAttrMaxGridDimZ = 7,
  cudaDevAttrMaxSharedMemoryPerBlock = 8,
  cudaDevAttrTotalConstantMemory = 9,
  cudaDevAttrWarpSize = 10,
  cudaDevAttrMaxPitch = 11,
  cudaDevAttrMaxRegistersPerBlock = 12,
  cudaDevAttrClockRate = 13,
  cudaDevAttrTextureAlignment = 14,
  cudaDevAttrGpuOverlap = 15,
  cudaDevAttrMultiProcessorCount = 16,
  cudaDevAttrKernelExecTimeout = 17,
  cudaDevAttrIntegrated = 18,
  cudaDevAttrCanMapHostMemory = 19,
  cudaDevAttrComputeMode = 20,
  cudaDevAttrMaxTexture1DWidth = 21,
  cudaDevAttrMaxTexture2DWidth = 22,
  cudaDevAttrMaxTexture2DHeight = 23,
  cudaDevAttrMaxTexture3DWidth = 24,
  cudaDevAttrMaxTexture3DHeight = 25,
  cudaDevAttrMaxTexture3DDepth = 26,
  cudaDevAttrMaxTexture2DLayeredWidth = 27,
  cudaDevAttrMaxTexture2DLayeredHeight = 28,
  cudaDevAttrMaxTexture2DLayeredLayers = 29,
  cudaDevAttrSurfaceAlignment = 30,
  cudaDevAttrConcurrentKernels = 31,
  cudaDevAttrEccEnabled = 32,
  cudaDevAttrPciBusId = 33,
  cudaDevAttrPciDeviceId = 34,
  cudaDevAttrTccDriver = 35,
  cudaDevAttrMemoryClockRate = 36,
  cudaDevAttrGlobalMemoryBusWidth = 37,
  cudaDevAttrL2CacheSize = 38,
  cudaDevAttrMaxThreadsPerMultiProcessor = 39,
  cudaDevAttrAsyncEngineCount = 40,
  cudaDevAttrUnifiedAddressing = 41,
  cudaDevAttrMaxTexture1DLayeredWidth = 42,
  cudaDevAttrMaxTexture1DLayeredLayers = 43,
  cudaDevAttrMaxTexture2DGatherWidth = 45,
  cudaDevAttrMaxTexture2DGatherHeight = 46,
  cudaDevAttrMaxTexture3DWidthAlt = 47,
  cudaDevAttrMaxTexture3DHeightAlt = 48,
  cudaDevAttrMaxTexture3DDepthAlt = 49,
  cudaDevAttrPciDomainId = 50,
  cudaDevAttrTexturePitchAlignment = 51,
  cudaDevAttrMaxTextureCubemapWidth = 52,
  cudaDevAttrMaxTextureCubemapLayeredWidth = 53,
  cudaDevAttrMaxTextureCubemapLayeredLayers = 54,
  cudaDevAttrMaxSurface1DWidth = 55,
  cudaDevAttrMaxSurface2DWidth = 56,
  cudaDevAttrMaxSurface2DHeight = 57,
  cudaDevAttrMaxSurface3DWidth = 58,
  cudaDevAttrMaxSurface3DHeight = 59,
  cudaDevAttrMaxSurface3DDepth = 60,
  cudaDevAttrMaxSurface1DLayeredWidth = 61,
  cudaDevAttrMaxSurface1DLayeredLayers = 62,
  cudaDevAttrMaxSurface2DLayeredWidth = 63,
  cudaDevAttrMaxSurface2DLayeredHeight = 64,
  cudaDevAttrMaxSurface2DLayeredLayers = 65,
  cudaDevAttrMaxSurfaceCubemapWidth = 66,
  cudaDevAttrMaxSurfaceCubemapLayeredWidth = 67,
  cudaDevAttrMaxSurfaceCubemapLayeredLayers = 68,
  cudaDevAttrMaxTexture1DLinearWidth = 69,
  cudaDevAttrMaxTexture2DLinearWidth = 70,
  cudaDevAttrMaxTexture2DLinearHeight = 71,
  cudaDevAttrMaxTexture2DLinearPitch = 72,
  cudaDevAttrMaxTexture2DMipmappedWidth = 73,
  cudaDevAttrMaxTexture2DMipmappedHeight = 74,
  cudaDevAttrComputeCapabilityMajor = 75,
  cudaDevAttrComputeCapabilityMinor = 76,
  cudaDevAttrMaxTexture1DMipmappedWidth = 77,
  cudaDevAttrStreamPrioritiesSupported = 78,
  cudaDevAttrGlobalL1CacheSupported = 79,
  cudaDevAttrLocalL1CacheSupported = 80,
  cudaDevAttrMaxSharedMemoryPerMultiprocessor = 81,
  cudaDevAttrMaxRegistersPerMultiprocessor = 82,
  cudaDevAttrManagedMemory = 83,
  cudaDevAttrIsMultiGpuBoard = 84,
  cudaDevAttrMultiGpuBoardGroupID = 85,
  cudaDevAttrHostNativeAtomicSupported = 86,
  cudaDevAttrSingleToDoublePrecisionPerfRatio = 87,
  cudaDevAttrPageableMemoryAccess = 88,
  cudaDevAttrConcurrentManagedAccess = 89,
  cudaDevAttrComputePreemptionSupported = 90,
  cudaDevAttrCanUseHostPointerForRegisteredMem = 91,
  cudaDevAttrReserved92 = 92,
  cudaDevAttrReserved93 = 93,
  cudaDevAttrReserved94 = 94,
  cudaDevAttrCooperativeLaunch = 95,
  cudaDevAttrCooperativeMultiDeviceLaunch = 96,
  cudaDevAttrMaxSharedMemoryPerBlockOptin = 97,
  cudaDevAttrCanFlushRemoteWrites = 98,
  cudaDevAttrHostRegisterSupported = 99,
  cudaDevAttrPageableMemoryAccessUsesHostPageTables = 100,
  cudaDevAttrDirectManagedMemAccessFromHost = 101,
  cudaDevAttrMaxBlocksPerMultiprocessor = 106,
  cudaDevAttrMaxPersistingL2CacheSize = 108,
  cudaDevAttrMaxAccessPolicyWindowSize = 109,
  cudaDevAttrReservedSharedMemoryPerBlock = 111,
  cudaDevAttrSparseCudaArraySupported = 112,
  cudaDevAttrHostRegisterReadOnlySupported = 113,
  cudaDevAttrTimelineSemaphoreInteropSupported = 114,
  cudaDevAttrMaxTimelineSemaphoreInteropSupported = 114,
  cudaDevAttrMemoryPoolsSupported = 115,
  cudaDevAttrGPUDirectRDMASupported = 116,
  cudaDevAttrGPUDirectRDMAFlushWritesOptions = 117,
  cudaDevAttrGPUDirectRDMAWritesOrdering = 118,
  cudaDevAttrMemoryPoolSupportedHandleTypes = 119,
  cudaDevAttrClusterLaunch = 120,
  cudaDevAttrDeferredMappingCudaArraySupported = 121,
  cudaDevAttrReserved122 = 122,
  cudaDevAttrReserved123 = 123,
  cudaDevAttrReserved124 = 124,
  cudaDevAttrIpcEventSupport = 125,
  cudaDevAttrMemSyncDomainCount = 126,
  cudaDevAttrReserved127 = 127,
  cudaDevAttrReserved128 = 128,
  cudaDevAttrReserved129 = 129,
  cudaDevAttrReserved132 = 132,
  cudaDevAttrMax = 133
}
global cudaMemPoolAttr: type <cimport,nodecl,using,ctypedef'cudaMemPoolAttr'> = @enum(cint){
  cudaMemPoolReuseFollowEventDependencies = 1,
  cudaMemPoolReuseAllowOpportunistic = 2,
  cudaMemPoolReuseAllowInternalDependencies = 3,
  cudaMemPoolAttrReleaseThreshold = 4,
  cudaMemPoolAttrReservedMemCurrent = 5,
  cudaMemPoolAttrReservedMemHigh = 6,
  cudaMemPoolAttrUsedMemCurrent = 7,
  cudaMemPoolAttrUsedMemHigh = 8
}
global cudaMemLocationType: type <cimport,nodecl,using,ctypedef'cudaMemLocationType'> = @enum(cint){
  cudaMemLocationTypeInvalid = 0,
  cudaMemLocationTypeDevice = 1
}
global cudaMemLocation: type <cimport,nodecl,ctypedef'cudaMemLocation'> = @record{
  type: cudaMemLocationType,
  id: cint
}
global cudaMemAccessFlags: type <cimport,nodecl,using,ctypedef'cudaMemAccessFlags'> = @enum(cint){
  cudaMemAccessFlagsProtNone = 0,
  cudaMemAccessFlagsProtRead = 1,
  cudaMemAccessFlagsProtReadWrite = 3
}
global cudaMemAccessDesc: type <cimport,nodecl,ctypedef'cudaMemAccessDesc'> = @record{
  location: cudaMemLocation,
  flags: cudaMemAccessFlags
}
global cudaMemAllocationType: type <cimport,nodecl,using,ctypedef'cudaMemAllocationType'> = @enum(cint){
  cudaMemAllocationTypeInvalid = 0,
  cudaMemAllocationTypePinned = 1,
  cudaMemAllocationTypeMax = 2147483647
}
global cudaMemAllocationHandleType: type <cimport,nodecl,using,ctypedef'cudaMemAllocationHandleType'> = @enum(cint){
  cudaMemHandleTypeNone = 0,
  cudaMemHandleTypePosixFileDescriptor = 1,
  cudaMemHandleTypeWin32 = 2,
  cudaMemHandleTypeWin32Kmt = 4
}
global cudaMemPoolProps: type <cimport,nodecl,ctypedef'cudaMemPoolProps'> = @record{
  allocType: cudaMemAllocationType,
  handleTypes: cudaMemAllocationHandleType,
  location: cudaMemLocation,
  win32SecurityAttributes: pointer,
  reserved: [64]cuchar
}
global cudaMemPoolPtrExportData: type <cimport,nodecl,ctypedef'cudaMemPoolPtrExportData'> = @record{
  reserved: [64]cuchar
}
global cudaMemAllocNodeParams: type <cimport,nodecl,ctypedef'cudaMemAllocNodeParams'> = @record{
  poolProps: cudaMemPoolProps,
  accessDescs: *cudaMemAccessDesc,
  accessDescCount: csize,
  bytesize: csize,
  dptr: pointer
}
global cudaGraphMemAttributeType: type <cimport,nodecl,using,ctypedef'cudaGraphMemAttributeType'> = @enum(cint){
  cudaGraphMemAttrUsedMemCurrent = 0,
  cudaGraphMemAttrUsedMemHigh = 1,
  cudaGraphMemAttrReservedMemCurrent = 2,
  cudaGraphMemAttrReservedMemHigh = 3
}
global cudaDeviceP2PAttr: type <cimport,nodecl,using,ctypedef'cudaDeviceP2PAttr'> = @enum(cint){
  cudaDevP2PAttrPerformanceRank = 1,
  cudaDevP2PAttrAccessSupported = 2,
  cudaDevP2PAttrNativeAtomicSupported = 3,
  cudaDevP2PAttrCudaArrayAccessSupported = 4
}
global cudaUUID_t: type <cimport,nodecl> = @record{
  bytes: [16]cchar
}
global cudaDeviceProp: type <cimport,nodecl,ctypedef'cudaDeviceProp'> = @record{
  name: [256]cchar,
  uuid: cudaUUID_t,
  luid: [8]cchar,
  luidDeviceNodeMask: cuint,
  totalGlobalMem: csize,
  sharedMemPerBlock: csize,
  regsPerBlock: cint,
  warpSize: cint,
  memPitch: csize,
  maxThreadsPerBlock: cint,
  maxThreadsDim: [3]cint,
  maxGridSize: [3]cint,
  clockRate: cint,
  totalConstMem: csize,
  major: cint,
  minor: cint,
  textureAlignment: csize,
  texturePitchAlignment: csize,
  deviceOverlap: cint,
  multiProcessorCount: cint,
  kernelExecTimeoutEnabled: cint,
  integrated: cint,
  canMapHostMemory: cint,
  computeMode: cint,
  maxTexture1D: cint,
  maxTexture1DMipmap: cint,
  maxTexture1DLinear: cint,
  maxTexture2D: [2]cint,
  maxTexture2DMipmap: [2]cint,
  maxTexture2DLinear: [3]cint,
  maxTexture2DGather: [2]cint,
  maxTexture3D: [3]cint,
  maxTexture3DAlt: [3]cint,
  maxTextureCubemap: cint,
  maxTexture1DLayered: [2]cint,
  maxTexture2DLayered: [3]cint,
  maxTextureCubemapLayered: [2]cint,
  maxSurface1D: cint,
  maxSurface2D: [2]cint,
  maxSurface3D: [3]cint,
  maxSurface1DLayered: [2]cint,
  maxSurface2DLayered: [3]cint,
  maxSurfaceCubemap: cint,
  maxSurfaceCubemapLayered: [2]cint,
  surfaceAlignment: csize,
  concurrentKernels: cint,
  ECCEnabled: cint,
  pciBusID: cint,
  pciDeviceID: cint,
  pciDomainID: cint,
  tccDriver: cint,
  asyncEngineCount: cint,
  unifiedAddressing: cint,
  memoryClockRate: cint,
  memoryBusWidth: cint,
  l2CacheSize: cint,
  persistingL2CacheMaxSize: cint,
  maxThreadsPerMultiProcessor: cint,
  streamPrioritiesSupported: cint,
  globalL1CacheSupported: cint,
  localL1CacheSupported: cint,
  sharedMemPerMultiprocessor: csize,
  regsPerMultiprocessor: cint,
  managedMemory: cint,
  isMultiGpuBoard: cint,
  multiGpuBoardGroupID: cint,
  hostNativeAtomicSupported: cint,
  singleToDoublePrecisionPerfRatio: cint,
  pageableMemoryAccess: cint,
  concurrentManagedAccess: cint,
  computePreemptionSupported: cint,
  canUseHostPointerForRegisteredMem: cint,
  cooperativeLaunch: cint,
  cooperativeMultiDeviceLaunch: cint,
  sharedMemPerBlockOptin: csize,
  pageableMemoryAccessUsesHostPageTables: cint,
  directManagedMemAccessFromHost: cint,
  maxBlocksPerMultiProcessor: cint,
  accessPolicyMaxWindowSize: cint,
  reservedSharedMemPerBlock: csize,
  hostRegisterSupported: cint,
  sparseCudaArraySupported: cint,
  hostRegisterReadOnlySupported: cint,
  timelineSemaphoreInteropSupported: cint,
  memoryPoolsSupported: cint,
  gpuDirectRDMASupported: cint,
  gpuDirectRDMAFlushWritesOptions: cuint,
  gpuDirectRDMAWritesOrdering: cint,
  memoryPoolSupportedHandleTypes: cuint,
  deferredMappingCudaArraySupported: cint,
  ipcEventSupported: cint,
  clusterLaunch: cint,
  unifiedFunctionPointers: cint,
  reserved2: [2]cint,
  reserved: [61]cint
}
global cudaIpcEventHandle_t: type <cimport,nodecl> = @record{
  reserved: [64]cchar
}
global cudaIpcMemHandle_t: type <cimport,nodecl> = @record{
  reserved: [64]cchar
}
global cudaExternalMemoryHandleType: type <cimport,nodecl,using,ctypedef'cudaExternalMemoryHandleType'> = @enum(cint){
  cudaExternalMemoryHandleTypeOpaqueFd = 1,
  cudaExternalMemoryHandleTypeOpaqueWin32 = 2,
  cudaExternalMemoryHandleTypeOpaqueWin32Kmt = 3,
  cudaExternalMemoryHandleTypeD3D12Heap = 4,
  cudaExternalMemoryHandleTypeD3D12Resource = 5,
  cudaExternalMemoryHandleTypeD3D11Resource = 6,
  cudaExternalMemoryHandleTypeD3D11ResourceKmt = 7,
  cudaExternalMemoryHandleTypeNvSciBuf = 8
}
global cudaExternalMemoryHandleDesc: type <cimport,nodecl,ctypedef'cudaExternalMemoryHandleDesc'> = @record{
  type: cudaExternalMemoryHandleType,
  handle: union{
    fd: cint,
    win32: record{
      handle: pointer,
      name: pointer
    },
    nvSciBufObject: pointer
  },
  size: culonglong,
  flags: cuint
}
global cudaExternalMemoryBufferDesc: type <cimport,nodecl,ctypedef'cudaExternalMemoryBufferDesc'> = @record{
  offset: culonglong,
  size: culonglong,
  flags: cuint
}
global cudaExternalMemoryMipmappedArrayDesc: type <cimport,nodecl,ctypedef'cudaExternalMemoryMipmappedArrayDesc'> = @record{
  offset: culonglong,
  formatDesc: cudaChannelFormatDesc,
  extent: cudaExtent,
  flags: cuint,
  numLevels: cuint
}
global cudaExternalSemaphoreHandleType: type <cimport,nodecl,using,ctypedef'cudaExternalSemaphoreHandleType'> = @enum(cint){
  cudaExternalSemaphoreHandleTypeOpaqueFd = 1,
  cudaExternalSemaphoreHandleTypeOpaqueWin32 = 2,
  cudaExternalSemaphoreHandleTypeOpaqueWin32Kmt = 3,
  cudaExternalSemaphoreHandleTypeD3D12Fence = 4,
  cudaExternalSemaphoreHandleTypeD3D11Fence = 5,
  cudaExternalSemaphoreHandleTypeNvSciSync = 6,
  cudaExternalSemaphoreHandleTypeKeyedMutex = 7,
  cudaExternalSemaphoreHandleTypeKeyedMutexKmt = 8,
  cudaExternalSemaphoreHandleTypeTimelineSemaphoreFd = 9,
  cudaExternalSemaphoreHandleTypeTimelineSemaphoreWin32 = 10
}
global cudaExternalSemaphoreHandleDesc: type <cimport,nodecl,ctypedef'cudaExternalSemaphoreHandleDesc'> = @record{
  type: cudaExternalSemaphoreHandleType,
  handle: union{
    fd: cint,
    win32: record{
      handle: pointer,
      name: pointer
    },
    nvSciSyncObj: pointer
  },
  flags: cuint
}
global cudaExternalSemaphoreSignalParams_v1: type <cimport,nodecl,ctypedef'cudaExternalSemaphoreSignalParams_v1'> = @record{
  params: record{
    fence: record{
      value: culonglong
    },
    nvSciSync: union{
      fence: pointer,
      reserved: culonglong
    },
    keyedMutex: record{
      key: culonglong
    }
  },
  flags: cuint
}
global cudaExternalSemaphoreWaitParams_v1: type <cimport,nodecl,ctypedef'cudaExternalSemaphoreWaitParams_v1'> = @record{
  params: record{
    fence: record{
      value: culonglong
    },
    nvSciSync: union{
      fence: pointer,
      reserved: culonglong
    },
    keyedMutex: record{
      key: culonglong,
      timeoutMs: cuint
    }
  },
  flags: cuint
}
global cudaExternalSemaphoreSignalParams: type <cimport,nodecl,ctypedef'cudaExternalSemaphoreSignalParams'> = @record{
  params: record{
    fence: record{
      value: culonglong
    },
    nvSciSync: union{
      fence: pointer,
      reserved: culonglong
    },
    keyedMutex: record{
      key: culonglong
    },
    reserved: [12]cuint
  },
  flags: cuint,
  reserved: [16]cuint
}
global cudaExternalSemaphoreWaitParams: type <cimport,nodecl,ctypedef'cudaExternalSemaphoreWaitParams'> = @record{
  params: record{
    fence: record{
      value: culonglong
    },
    nvSciSync: union{
      fence: pointer,
      reserved: culonglong
    },
    keyedMutex: record{
      key: culonglong,
      timeoutMs: cuint
    },
    reserved: [10]cuint
  },
  flags: cuint,
  reserved: [16]cuint
}
global CUstream_st: type <cimport,nodecl,ctypedef'CUstream_st',forwarddecl> = @record{}
global cudaStream_t: type <cimport,nodecl> = @*CUstream_st
global CUevent_st: type <cimport,nodecl,ctypedef'CUevent_st',forwarddecl> = @record{}
global cudaEvent_t: type <cimport,nodecl> = @*CUevent_st
global cudaGraphicsResource_t: type <cimport,nodecl> = @*cudaGraphicsResource
global CUexternalMemory_st: type <cimport,nodecl,ctypedef'CUexternalMemory_st',forwarddecl> = @record{}
global cudaExternalMemory_t: type <cimport,nodecl> = @*CUexternalMemory_st
global CUexternalSemaphore_st: type <cimport,nodecl,ctypedef'CUexternalSemaphore_st',forwarddecl> = @record{}
global cudaExternalSemaphore_t: type <cimport,nodecl> = @*CUexternalSemaphore_st
global CUgraph_st: type <cimport,nodecl,ctypedef'CUgraph_st',forwarddecl> = @record{}
global cudaGraph_t: type <cimport,nodecl> = @*CUgraph_st
global CUgraphNode_st: type <cimport,nodecl,ctypedef'CUgraphNode_st',forwarddecl> = @record{}
global cudaGraphNode_t: type <cimport,nodecl> = @*CUgraphNode_st
global CUuserObject_st: type <cimport,nodecl,ctypedef'CUuserObject_st',forwarddecl> = @record{}
global cudaUserObject_t: type <cimport,nodecl> = @*CUuserObject_st
global CUfunc_st: type <cimport,nodecl,ctypedef'CUfunc_st',forwarddecl> = @record{}
global cudaFunction_t: type <cimport,nodecl> = @*CUfunc_st
global CUkern_st: type <cimport,nodecl,ctypedef'CUkern_st',forwarddecl> = @record{}
global cudaKernel_t: type <cimport,nodecl> = @*CUkern_st
global CUmemPoolHandle_st: type <cimport,nodecl,ctypedef'CUmemPoolHandle_st',forwarddecl> = @record{}
global cudaMemPool_t: type <cimport,nodecl> = @*CUmemPoolHandle_st
global cudaCGScope: type <cimport,nodecl,using,ctypedef'cudaCGScope'> = @enum(cint){
  cudaCGScopeInvalid = 0,
  cudaCGScopeGrid = 1,
  cudaCGScopeMultiGrid = 2
}
global cudaLaunchParams: type <cimport,nodecl,ctypedef'cudaLaunchParams'> = @record{
  func: pointer,
  gridDim: dim3,
  blockDim: dim3,
  args: *pointer,
  sharedMem: csize,
  stream: cudaStream_t
}
global cudaKernelNodeParams: type <cimport,nodecl,ctypedef'cudaKernelNodeParams'> = @record{
  func: pointer,
  gridDim: dim3,
  blockDim: dim3,
  sharedMemBytes: cuint,
  kernelParams: *pointer,
  extra: *pointer
}
global cudaExternalSemaphoreSignalNodeParams: type <cimport,nodecl,ctypedef'cudaExternalSemaphoreSignalNodeParams'> = @record{
  extSemArray: *cudaExternalSemaphore_t,
  paramsArray: *cudaExternalSemaphoreSignalParams,
  numExtSems: cuint
}
global cudaExternalSemaphoreWaitNodeParams: type <cimport,nodecl,ctypedef'cudaExternalSemaphoreWaitNodeParams'> = @record{
  extSemArray: *cudaExternalSemaphore_t,
  paramsArray: *cudaExternalSemaphoreWaitParams,
  numExtSems: cuint
}
global cudaGraphNodeType: type <cimport,nodecl,using,ctypedef'cudaGraphNodeType'> = @enum(cint){
  cudaGraphNodeTypeKernel = 0,
  cudaGraphNodeTypeMemcpy = 1,
  cudaGraphNodeTypeMemset = 2,
  cudaGraphNodeTypeHost = 3,
  cudaGraphNodeTypeGraph = 4,
  cudaGraphNodeTypeEmpty = 5,
  cudaGraphNodeTypeWaitEvent = 6,
  cudaGraphNodeTypeEventRecord = 7,
  cudaGraphNodeTypeExtSemaphoreSignal = 8,
  cudaGraphNodeTypeExtSemaphoreWait = 9,
  cudaGraphNodeTypeMemAlloc = 10,
  cudaGraphNodeTypeMemFree = 11,
  cudaGraphNodeTypeCount = 12
}
global CUgraphExec_st: type <cimport,nodecl,ctypedef'CUgraphExec_st',forwarddecl> = @record{}
global cudaGraphExec_t: type <cimport,nodecl> = @*CUgraphExec_st
global cudaGraphExecUpdateResult: type <cimport,nodecl,using,ctypedef'cudaGraphExecUpdateResult'> = @enum(cint){
  cudaGraphExecUpdateSuccess = 0,
  cudaGraphExecUpdateError = 1,
  cudaGraphExecUpdateErrorTopologyChanged = 2,
  cudaGraphExecUpdateErrorNodeTypeChanged = 3,
  cudaGraphExecUpdateErrorFunctionChanged = 4,
  cudaGraphExecUpdateErrorParametersChanged = 5,
  cudaGraphExecUpdateErrorNotSupported = 6,
  cudaGraphExecUpdateErrorUnsupportedFunctionChange = 7,
  cudaGraphExecUpdateErrorAttributesChanged = 8
}
global cudaGraphInstantiateResult: type <cimport,nodecl,using> = @enum(cint){
  cudaGraphInstantiateSuccess = 0,
  cudaGraphInstantiateError = 1,
  cudaGraphInstantiateInvalidStructure = 2,
  cudaGraphInstantiateNodeOperationNotSupported = 3,
  cudaGraphInstantiateMultipleDevicesNotSupported = 4
}
global cudaGraphInstantiateParams: type <cimport,nodecl> = @record{
  flags: culonglong,
  uploadStream: cudaStream_t,
  errNode_out: cudaGraphNode_t,
  result_out: cudaGraphInstantiateResult
}
global cudaGraphExecUpdateResultInfo: type <cimport,nodecl> = @record{
  result: cudaGraphExecUpdateResult,
  errorNode: cudaGraphNode_t,
  errorFromNode: cudaGraphNode_t
}
global cudaGetDriverEntryPointFlags: type <cimport,nodecl,using,ctypedef'cudaGetDriverEntryPointFlags'> = @enum(cint){
  cudaEnableDefault = 0,
  cudaEnableLegacyStream = 1,
  cudaEnablePerThreadDefaultStream = 2
}
global cudaDriverEntryPointQueryResult: type <cimport,nodecl,using,ctypedef'cudaDriverEntryPointQueryResult'> = @enum(cint){
  cudaDriverEntryPointSuccess = 0,
  cudaDriverEntryPointSymbolNotFound = 1,
  cudaDriverEntryPointVersionNotSufficent = 2
}
global cudaGraphDebugDotFlags: type <cimport,nodecl,using,ctypedef'cudaGraphDebugDotFlags'> = @enum(cint){
  cudaGraphDebugDotFlagsVerbose = 1,
  cudaGraphDebugDotFlagsKernelNodeParams = 4,
  cudaGraphDebugDotFlagsMemcpyNodeParams = 8,
  cudaGraphDebugDotFlagsMemsetNodeParams = 16,
  cudaGraphDebugDotFlagsHostNodeParams = 32,
  cudaGraphDebugDotFlagsEventNodeParams = 64,
  cudaGraphDebugDotFlagsExtSemasSignalNodeParams = 128,
  cudaGraphDebugDotFlagsExtSemasWaitNodeParams = 256,
  cudaGraphDebugDotFlagsKernelNodeAttributes = 512,
  cudaGraphDebugDotFlagsHandles = 1024
}
global cudaGraphInstantiateFlags: type <cimport,nodecl,using,ctypedef'cudaGraphInstantiateFlags'> = @enum(cint){
  cudaGraphInstantiateFlagAutoFreeOnLaunch = 1,
  cudaGraphInstantiateFlagUpload = 2,
  cudaGraphInstantiateFlagDeviceLaunch = 4,
  cudaGraphInstantiateFlagUseNodePriority = 8
}
global cudaLaunchMemSyncDomain: type <cimport,nodecl,using> = @enum(cint){
  cudaLaunchMemSyncDomainDefault = 0,
  cudaLaunchMemSyncDomainRemote = 1
}
global cudaLaunchMemSyncDomainMap: type <cimport,nodecl> = @record{
  default_: cuchar,
  remote: cuchar
}
global cudaLaunchAttributeID: type <cimport,nodecl,using> = @enum(cint){
  cudaLaunchAttributeIgnore = 0,
  cudaLaunchAttributeAccessPolicyWindow = 1,
  cudaLaunchAttributeCooperative = 2,
  cudaLaunchAttributeSynchronizationPolicy = 3,
  cudaLaunchAttributeClusterDimension = 4,
  cudaLaunchAttributeClusterSchedulingPolicyPreference = 5,
  cudaLaunchAttributeProgrammaticStreamSerialization = 6,
  cudaLaunchAttributeProgrammaticEvent = 7,
  cudaLaunchAttributePriority = 8,
  cudaLaunchAttributeMemSyncDomainMap = 9,
  cudaLaunchAttributeMemSyncDomain = 10
}
global cudaLaunchAttributeValue: type <cimport,nodecl> = @union{
  pad: [64]cchar,
  accessPolicyWindow: cudaAccessPolicyWindow,
  cooperative: cint,
  syncPolicy: cudaSynchronizationPolicy,
  clusterDim: record{
    x: cuint,
    y: cuint,
    z: cuint
  },
  clusterSchedulingPolicyPreference: cudaClusterSchedulingPolicy,
  programmaticStreamSerializationAllowed: cint,
  programmaticEvent: record{
    event: cudaEvent_t,
    flags: cint,
    triggerAtBlockStart: cint
  },
  priority: cint,
  memSyncDomainMap: cudaLaunchMemSyncDomainMap,
  memSyncDomain: cudaLaunchMemSyncDomain
}
global cudaLaunchAttribute: type <cimport,nodecl> = @record{
  id: cudaLaunchAttributeID,
  pad: [0]cchar,
  val: cudaLaunchAttributeValue
}
global cudaLaunchConfig_t: type <cimport,nodecl> = @record{
  gridDim: dim3,
  blockDim: dim3,
  dynamicSmemBytes: csize,
  stream: cudaStream_t,
  attrs: *cudaLaunchAttribute,
  numAttrs: cuint
}
global cudaSurfaceBoundaryMode: type <cimport,nodecl,using,ctypedef'cudaSurfaceBoundaryMode'> = @enum(cint){
  cudaBoundaryModeZero = 0,
  cudaBoundaryModeClamp = 1,
  cudaBoundaryModeTrap = 2
}
global cudaSurfaceFormatMode: type <cimport,nodecl,using,ctypedef'cudaSurfaceFormatMode'> = @enum(cint){
  cudaFormatModeForced = 0,
  cudaFormatModeAuto = 1
}
global cudaSurfaceObject_t: type <cimport,nodecl> = @culonglong
global cudaTextureAddressMode: type <cimport,nodecl,using,ctypedef'cudaTextureAddressMode'> = @enum(cint){
  cudaAddressModeWrap = 0,
  cudaAddressModeClamp = 1,
  cudaAddressModeMirror = 2,
  cudaAddressModeBorder = 3
}
global cudaTextureFilterMode: type <cimport,nodecl,using,ctypedef'cudaTextureFilterMode'> = @enum(cint){
  cudaFilterModePoint = 0,
  cudaFilterModeLinear = 1
}
global cudaTextureReadMode: type <cimport,nodecl,using,ctypedef'cudaTextureReadMode'> = @enum(cint){
  cudaReadModeElementType = 0,
  cudaReadModeNormalizedFloat = 1
}
global cudaTextureDesc: type <cimport,nodecl,ctypedef'cudaTextureDesc'> = @record{
  addressMode: [3]cudaTextureAddressMode,
  filterMode: cudaTextureFilterMode,
  readMode: cudaTextureReadMode,
  sRGB: cint,
  borderColor: [4]float32,
  normalizedCoords: cint,
  maxAnisotropy: cuint,
  mipmapFilterMode: cudaTextureFilterMode,
  mipmapLevelBias: float32,
  minMipmapLevelClamp: float32,
  maxMipmapLevelClamp: float32,
  disableTrilinearOptimization: cint,
  seamlessCubemap: cint
}
global cudaTextureObject_t: type <cimport,nodecl> = @culonglong
global cudaDataType: type <cimport,nodecl,using> = @enum(cint){
  CUDA_R_16F = 2,
  CUDA_C_16F = 6,
  CUDA_R_16BF = 14,
  CUDA_C_16BF = 15,
  CUDA_R_32F = 0,
  CUDA_C_32F = 4,
  CUDA_R_64F = 1,
  CUDA_C_64F = 5,
  CUDA_R_4I = 16,
  CUDA_C_4I = 17,
  CUDA_R_4U = 18,
  CUDA_C_4U = 19,
  CUDA_R_8I = 3,
  CUDA_C_8I = 7,
  CUDA_R_8U = 8,
  CUDA_C_8U = 9,
  CUDA_R_16I = 20,
  CUDA_C_16I = 21,
  CUDA_R_16U = 22,
  CUDA_C_16U = 23,
  CUDA_R_32I = 10,
  CUDA_C_32I = 11,
  CUDA_R_32U = 12,
  CUDA_C_32U = 13,
  CUDA_R_64I = 24,
  CUDA_C_64I = 25,
  CUDA_R_64U = 26,
  CUDA_C_64U = 27,
  CUDA_R_8F_E4M3 = 28,
  CUDA_R_8F_E5M2 = 29
}
global libraryPropertyType_t: type <cimport,nodecl,using> = @enum(cint){
  MAJOR_VERSION = 0,
  MINOR_VERSION = 1,
  PATCH_LEVEL = 2
}
global cudaDataType_t: type <cimport,nodecl> = @cudaDataType
global cudaStreamCallback_t: type <cimport,nodecl> = @function(stream: cudaStream_t, status: cudaError_t, userData: pointer): void
global cublasStatus_t: type <cimport,nodecl,using> = @enum(cint){
  CUBLAS_STATUS_SUCCESS = 0,
  CUBLAS_STATUS_NOT_INITIALIZED = 1,
  CUBLAS_STATUS_ALLOC_FAILED = 3,
  CUBLAS_STATUS_INVALID_VALUE = 7,
  CUBLAS_STATUS_ARCH_MISMATCH = 8,
  CUBLAS_STATUS_MAPPING_ERROR = 11,
  CUBLAS_STATUS_EXECUTION_FAILED = 13,
  CUBLAS_STATUS_INTERNAL_ERROR = 14,
  CUBLAS_STATUS_NOT_SUPPORTED = 15,
  CUBLAS_STATUS_LICENSE_ERROR = 16
}
global cublasFillMode_t: type <cimport,nodecl,using> = @enum(cint){
  CUBLAS_FILL_MODE_LOWER = 0,
  CUBLAS_FILL_MODE_UPPER = 1,
  CUBLAS_FILL_MODE_FULL = 2
}
global cublasDiagType_t: type <cimport,nodecl,using> = @enum(cint){
  CUBLAS_DIAG_NON_UNIT = 0,
  CUBLAS_DIAG_UNIT = 1
}
global cublasSideMode_t: type <cimport,nodecl,using> = @enum(cint){
  CUBLAS_SIDE_LEFT = 0,
  CUBLAS_SIDE_RIGHT = 1
}
global cublasOperation_t: type <cimport,nodecl,using> = @enum(cint){
  CUBLAS_OP_N = 0,
  CUBLAS_OP_T = 1,
  CUBLAS_OP_C = 2,
  CUBLAS_OP_HERMITAN = 2,
  CUBLAS_OP_CONJG = 3
}
global cublasPointerMode_t: type <cimport,nodecl,using> = @enum(cint){
  CUBLAS_POINTER_MODE_HOST = 0,
  CUBLAS_POINTER_MODE_DEVICE = 1
}
global cublasAtomicsMode_t: type <cimport,nodecl,using> = @enum(cint){
  CUBLAS_ATOMICS_NOT_ALLOWED = 0,
  CUBLAS_ATOMICS_ALLOWED = 1
}
global cublasGemmAlgo_t: type <cimport,nodecl,using> = @enum(cint){
  CUBLAS_GEMM_DFALT = -1,
  CUBLAS_GEMM_DEFAULT = -1,
  CUBLAS_GEMM_ALGO0 = 0,
  CUBLAS_GEMM_ALGO1 = 1,
  CUBLAS_GEMM_ALGO2 = 2,
  CUBLAS_GEMM_ALGO3 = 3,
  CUBLAS_GEMM_ALGO4 = 4,
  CUBLAS_GEMM_ALGO5 = 5,
  CUBLAS_GEMM_ALGO6 = 6,
  CUBLAS_GEMM_ALGO7 = 7,
  CUBLAS_GEMM_ALGO8 = 8,
  CUBLAS_GEMM_ALGO9 = 9,
  CUBLAS_GEMM_ALGO10 = 10,
  CUBLAS_GEMM_ALGO11 = 11,
  CUBLAS_GEMM_ALGO12 = 12,
  CUBLAS_GEMM_ALGO13 = 13,
  CUBLAS_GEMM_ALGO14 = 14,
  CUBLAS_GEMM_ALGO15 = 15,
  CUBLAS_GEMM_ALGO16 = 16,
  CUBLAS_GEMM_ALGO17 = 17,
  CUBLAS_GEMM_ALGO18 = 18,
  CUBLAS_GEMM_ALGO19 = 19,
  CUBLAS_GEMM_ALGO20 = 20,
  CUBLAS_GEMM_ALGO21 = 21,
  CUBLAS_GEMM_ALGO22 = 22,
  CUBLAS_GEMM_ALGO23 = 23,
  CUBLAS_GEMM_DEFAULT_TENSOR_OP = 99,
  CUBLAS_GEMM_DFALT_TENSOR_OP = 99,
  CUBLAS_GEMM_ALGO0_TENSOR_OP = 100,
  CUBLAS_GEMM_ALGO1_TENSOR_OP = 101,
  CUBLAS_GEMM_ALGO2_TENSOR_OP = 102,
  CUBLAS_GEMM_ALGO3_TENSOR_OP = 103,
  CUBLAS_GEMM_ALGO4_TENSOR_OP = 104,
  CUBLAS_GEMM_ALGO5_TENSOR_OP = 105,
  CUBLAS_GEMM_ALGO6_TENSOR_OP = 106,
  CUBLAS_GEMM_ALGO7_TENSOR_OP = 107,
  CUBLAS_GEMM_ALGO8_TENSOR_OP = 108,
  CUBLAS_GEMM_ALGO9_TENSOR_OP = 109,
  CUBLAS_GEMM_ALGO10_TENSOR_OP = 110,
  CUBLAS_GEMM_ALGO11_TENSOR_OP = 111,
  CUBLAS_GEMM_ALGO12_TENSOR_OP = 112,
  CUBLAS_GEMM_ALGO13_TENSOR_OP = 113,
  CUBLAS_GEMM_ALGO14_TENSOR_OP = 114,
  CUBLAS_GEMM_ALGO15_TENSOR_OP = 115
}
global cublasMath_t: type <cimport,nodecl,using> = @enum(cint){
  CUBLAS_DEFAULT_MATH = 0,
  CUBLAS_TENSOR_OP_MATH = 1,
  CUBLAS_PEDANTIC_MATH = 2,
  CUBLAS_TF32_TENSOR_OP_MATH = 3,
  CUBLAS_MATH_DISALLOW_REDUCED_PRECISION_REDUCTION = 16
}
global cublasDataType_t: type <cimport,nodecl> = @cudaDataType
global cublasComputeType_t: type <cimport,nodecl,using> = @enum(cint){
  CUBLAS_COMPUTE_16F = 64,
  CUBLAS_COMPUTE_16F_PEDANTIC = 65,
  CUBLAS_COMPUTE_32F = 68,
  CUBLAS_COMPUTE_32F_PEDANTIC = 69,
  CUBLAS_COMPUTE_32F_FAST_16F = 74,
  CUBLAS_COMPUTE_32F_FAST_16BF = 75,
  CUBLAS_COMPUTE_32F_FAST_TF32 = 77,
  CUBLAS_COMPUTE_64F = 70,
  CUBLAS_COMPUTE_64F_PEDANTIC = 71,
  CUBLAS_COMPUTE_32I = 72,
  CUBLAS_COMPUTE_32I_PEDANTIC = 73
}
global cublasContext: type <cimport,nodecl,ctypedef'cublasContext',forwarddecl> = @record{}
global cublasHandle_t: type <cimport,nodecl> = @*cublasContext
global cublasLogCallback: type <cimport,nodecl> = @function(msg: cstring): void
global cudnnContext: type <cimport,nodecl,ctypedef'cudnnContext',forwarddecl> = @record{}
global cudnnHandle_t: type <cimport,nodecl> = @*cudnnContext
global cudnnStatus_t: type <cimport,nodecl,using> = @enum(cint){
  CUDNN_STATUS_SUCCESS = 0,
  CUDNN_STATUS_NOT_INITIALIZED = 1,
  CUDNN_STATUS_ALLOC_FAILED = 2,
  CUDNN_STATUS_BAD_PARAM = 3,
  CUDNN_STATUS_INTERNAL_ERROR = 4,
  CUDNN_STATUS_INVALID_VALUE = 5,
  CUDNN_STATUS_ARCH_MISMATCH = 6,
  CUDNN_STATUS_MAPPING_ERROR = 7,
  CUDNN_STATUS_EXECUTION_FAILED = 8,
  CUDNN_STATUS_NOT_SUPPORTED = 9,
  CUDNN_STATUS_LICENSE_ERROR = 10,
  CUDNN_STATUS_RUNTIME_PREREQUISITE_MISSING = 11,
  CUDNN_STATUS_RUNTIME_IN_PROGRESS = 12,
  CUDNN_STATUS_RUNTIME_FP_OVERFLOW = 13,
  CUDNN_STATUS_VERSION_MISMATCH = 14
}
global cudnnRuntimeTag_t: type <cimport,nodecl,forwarddecl> = @record{}
global cudnnErrQueryMode_t: type <cimport,nodecl,using> = @enum(cint){
  CUDNN_ERRQUERY_RAWCODE = 0,
  CUDNN_ERRQUERY_NONBLOCKING = 1,
  CUDNN_ERRQUERY_BLOCKING = 2
}
global cudnnTensorStruct: type <cimport,nodecl,ctypedef'cudnnTensorStruct',forwarddecl> = @record{}
global cudnnTensorDescriptor_t: type <cimport,nodecl> = @*cudnnTensorStruct
global cudnnPoolingStruct: type <cimport,nodecl,ctypedef'cudnnPoolingStruct',forwarddecl> = @record{}
global cudnnPoolingDescriptor_t: type <cimport,nodecl> = @*cudnnPoolingStruct
global cudnnFilterStruct: type <cimport,nodecl,ctypedef'cudnnFilterStruct',forwarddecl> = @record{}
global cudnnFilterDescriptor_t: type <cimport,nodecl> = @*cudnnFilterStruct
global cudnnLRNStruct: type <cimport,nodecl,ctypedef'cudnnLRNStruct',forwarddecl> = @record{}
global cudnnLRNDescriptor_t: type <cimport,nodecl> = @*cudnnLRNStruct
global cudnnActivationStruct: type <cimport,nodecl,ctypedef'cudnnActivationStruct',forwarddecl> = @record{}
global cudnnActivationDescriptor_t: type <cimport,nodecl> = @*cudnnActivationStruct
global cudnnSpatialTransformerStruct: type <cimport,nodecl,ctypedef'cudnnSpatialTransformerStruct',forwarddecl> = @record{}
global cudnnSpatialTransformerDescriptor_t: type <cimport,nodecl> = @*cudnnSpatialTransformerStruct
global cudnnOpTensorStruct: type <cimport,nodecl,ctypedef'cudnnOpTensorStruct',forwarddecl> = @record{}
global cudnnOpTensorDescriptor_t: type <cimport,nodecl> = @*cudnnOpTensorStruct
global cudnnReduceTensorStruct: type <cimport,nodecl,ctypedef'cudnnReduceTensorStruct',forwarddecl> = @record{}
global cudnnReduceTensorDescriptor_t: type <cimport,nodecl> = @*cudnnReduceTensorStruct
global cudnnCTCLossStruct: type <cimport,nodecl,ctypedef'cudnnCTCLossStruct',forwarddecl> = @record{}
global cudnnCTCLossDescriptor_t: type <cimport,nodecl> = @*cudnnCTCLossStruct
global cudnnTensorTransformStruct: type <cimport,nodecl,ctypedef'cudnnTensorTransformStruct',forwarddecl> = @record{}
global cudnnTensorTransformDescriptor_t: type <cimport,nodecl> = @*cudnnTensorTransformStruct
global cudnnDataType_t: type <cimport,nodecl,using> = @enum(cint){
  CUDNN_DATA_FLOAT = 0,
  CUDNN_DATA_DOUBLE = 1,
  CUDNN_DATA_HALF = 2,
  CUDNN_DATA_INT8 = 3,
  CUDNN_DATA_INT32 = 4,
  CUDNN_DATA_INT8x4 = 5,
  CUDNN_DATA_UINT8 = 6,
  CUDNN_DATA_UINT8x4 = 7,
  CUDNN_DATA_INT8x32 = 8,
  CUDNN_DATA_BFLOAT16 = 9,
  CUDNN_DATA_INT64 = 10,
  CUDNN_DATA_BOOLEAN = 11,
  CUDNN_DATA_FP8_E4M3 = 12,
  CUDNN_DATA_FP8_E5M2 = 13,
  CUDNN_DATA_FAST_FLOAT_FOR_FP8 = 14
}
global cudnnMathType_t: type <cimport,nodecl,using> = @enum(cint){
  CUDNN_DEFAULT_MATH = 0,
  CUDNN_TENSOR_OP_MATH = 1,
  CUDNN_TENSOR_OP_MATH_ALLOW_CONVERSION = 2,
  CUDNN_FMA_MATH = 3
}
global cudnnNanPropagation_t: type <cimport,nodecl,using> = @enum(cint){
  CUDNN_NOT_PROPAGATE_NAN = 0,
  CUDNN_PROPAGATE_NAN = 1
}
global cudnnDeterminism_t: type <cimport,nodecl,using> = @enum(cint){
  CUDNN_NON_DETERMINISTIC = 0,
  CUDNN_DETERMINISTIC = 1
}
global cudnnTensorFormat_t: type <cimport,nodecl,using> = @enum(cint){
  CUDNN_TENSOR_NCHW = 0,
  CUDNN_TENSOR_NHWC = 1,
  CUDNN_TENSOR_NCHW_VECT_C = 2
}
global cudnnFoldingDirection_t: type <cimport,nodecl,using> = @enum(cint){
  CUDNN_TRANSFORM_FOLD = 0,
  CUDNN_TRANSFORM_UNFOLD = 1
}
global cudnnOpTensorOp_t: type <cimport,nodecl,using> = @enum(cint){
  CUDNN_OP_TENSOR_ADD = 0,
  CUDNN_OP_TENSOR_MUL = 1,
  CUDNN_OP_TENSOR_MIN = 2,
  CUDNN_OP_TENSOR_MAX = 3,
  CUDNN_OP_TENSOR_SQRT = 4,
  CUDNN_OP_TENSOR_NOT = 5
}
global cudnnReduceTensorOp_t: type <cimport,nodecl,using> = @enum(cint){
  CUDNN_REDUCE_TENSOR_ADD = 0,
  CUDNN_REDUCE_TENSOR_MUL = 1,
  CUDNN_REDUCE_TENSOR_MIN = 2,
  CUDNN_REDUCE_TENSOR_MAX = 3,
  CUDNN_REDUCE_TENSOR_AMAX = 4,
  CUDNN_REDUCE_TENSOR_AVG = 5,
  CUDNN_REDUCE_TENSOR_NORM1 = 6,
  CUDNN_REDUCE_TENSOR_NORM2 = 7,
  CUDNN_REDUCE_TENSOR_MUL_NO_ZEROS = 8
}
global cudnnReduceTensorIndices_t: type <cimport,nodecl,using> = @enum(cint){
  CUDNN_REDUCE_TENSOR_NO_INDICES = 0,
  CUDNN_REDUCE_TENSOR_FLATTENED_INDICES = 1
}
global cudnnIndicesType_t: type <cimport,nodecl,using> = @enum(cint){
  CUDNN_32BIT_INDICES = 0,
  CUDNN_64BIT_INDICES = 1,
  CUDNN_16BIT_INDICES = 2,
  CUDNN_8BIT_INDICES = 3
}
global cudnnSoftmaxAlgorithm_t: type <cimport,nodecl,using> = @enum(cint){
  CUDNN_SOFTMAX_FAST = 0,
  CUDNN_SOFTMAX_ACCURATE = 1,
  CUDNN_SOFTMAX_LOG = 2
}
global cudnnSoftmaxMode_t: type <cimport,nodecl,using> = @enum(cint){
  CUDNN_SOFTMAX_MODE_INSTANCE = 0,
  CUDNN_SOFTMAX_MODE_CHANNEL = 1
}
global cudnnPoolingMode_t: type <cimport,nodecl,using> = @enum(cint){
  CUDNN_POOLING_MAX = 0,
  CUDNN_POOLING_AVERAGE_COUNT_INCLUDE_PADDING = 1,
  CUDNN_POOLING_AVERAGE_COUNT_EXCLUDE_PADDING = 2,
  CUDNN_POOLING_MAX_DETERMINISTIC = 3
}
global cudnnActivationMode_t: type <cimport,nodecl,using> = @enum(cint){
  CUDNN_ACTIVATION_SIGMOID = 0,
  CUDNN_ACTIVATION_RELU = 1,
  CUDNN_ACTIVATION_TANH = 2,
  CUDNN_ACTIVATION_CLIPPED_RELU = 3,
  CUDNN_ACTIVATION_ELU = 4,
  CUDNN_ACTIVATION_IDENTITY = 5,
  CUDNN_ACTIVATION_SWISH = 6
}
global cudnnLRNMode_t: type <cimport,nodecl,using> = @enum(cint){
  CUDNN_LRN_CROSS_CHANNEL_DIM1 = 0
}
global cudnnDivNormMode_t: type <cimport,nodecl,using> = @enum(cint){
  CUDNN_DIVNORM_PRECOMPUTED_MEANS = 0
}
global cudnnBatchNormMode_t: type <cimport,nodecl,using> = @enum(cint){
  CUDNN_BATCHNORM_PER_ACTIVATION = 0,
  CUDNN_BATCHNORM_SPATIAL = 1,
  CUDNN_BATCHNORM_SPATIAL_PERSISTENT = 2
}
global cudnnBatchNormOps_t: type <cimport,nodecl,using> = @enum(cint){
  CUDNN_BATCHNORM_OPS_BN = 0,
  CUDNN_BATCHNORM_OPS_BN_ACTIVATION = 1,
  CUDNN_BATCHNORM_OPS_BN_ADD_ACTIVATION = 2
}
global cudnnNormMode_t: type <cimport,nodecl,using> = @enum(cint){
  CUDNN_NORM_PER_ACTIVATION = 0,
  CUDNN_NORM_PER_CHANNEL = 1
}
global cudnnNormAlgo_t: type <cimport,nodecl,using> = @enum(cint){
  CUDNN_NORM_ALGO_STANDARD = 0,
  CUDNN_NORM_ALGO_PERSIST = 1
}
global cudnnNormOps_t: type <cimport,nodecl,using> = @enum(cint){
  CUDNN_NORM_OPS_NORM = 0,
  CUDNN_NORM_OPS_NORM_ACTIVATION = 1,
  CUDNN_NORM_OPS_NORM_ADD_ACTIVATION = 2
}
global cudnnSamplerType_t: type <cimport,nodecl,using> = @enum(cint){
  CUDNN_SAMPLER_BILINEAR = 0
}
global cudnnDropoutStruct: type <cimport,nodecl,ctypedef'cudnnDropoutStruct',forwarddecl> = @record{}
global cudnnDropoutDescriptor_t: type <cimport,nodecl> = @*cudnnDropoutStruct
global cudnnAlgorithmStruct: type <cimport,nodecl,ctypedef'cudnnAlgorithmStruct',forwarddecl> = @record{}
global cudnnAlgorithmDescriptor_t: type <cimport,nodecl> = @*cudnnAlgorithmStruct
global cudnnAlgorithmPerformanceStruct: type <cimport,nodecl,ctypedef'cudnnAlgorithmPerformanceStruct',forwarddecl> = @record{}
global cudnnAlgorithmPerformance_t: type <cimport,nodecl> = @*cudnnAlgorithmPerformanceStruct
global cudnnConvolutionFwdAlgo_t: type <cimport,nodecl,using> = @enum(cint){
  CUDNN_CONVOLUTION_FWD_ALGO_IMPLICIT_GEMM = 0,
  CUDNN_CONVOLUTION_FWD_ALGO_IMPLICIT_PRECOMP_GEMM = 1,
  CUDNN_CONVOLUTION_FWD_ALGO_GEMM = 2,
  CUDNN_CONVOLUTION_FWD_ALGO_DIRECT = 3,
  CUDNN_CONVOLUTION_FWD_ALGO_FFT = 4,
  CUDNN_CONVOLUTION_FWD_ALGO_FFT_TILING = 5,
  CUDNN_CONVOLUTION_FWD_ALGO_WINOGRAD = 6,
  CUDNN_CONVOLUTION_FWD_ALGO_WINOGRAD_NONFUSED = 7,
  CUDNN_CONVOLUTION_FWD_ALGO_COUNT = 8
}
global cudnnConvolutionBwdFilterAlgo_t: type <cimport,nodecl,using> = @enum(cint){
  CUDNN_CONVOLUTION_BWD_FILTER_ALGO_0 = 0,
  CUDNN_CONVOLUTION_BWD_FILTER_ALGO_1 = 1,
  CUDNN_CONVOLUTION_BWD_FILTER_ALGO_FFT = 2,
  CUDNN_CONVOLUTION_BWD_FILTER_ALGO_3 = 3,
  CUDNN_CONVOLUTION_BWD_FILTER_ALGO_WINOGRAD = 4,
  CUDNN_CONVOLUTION_BWD_FILTER_ALGO_WINOGRAD_NONFUSED = 5,
  CUDNN_CONVOLUTION_BWD_FILTER_ALGO_FFT_TILING = 6,
  CUDNN_CONVOLUTION_BWD_FILTER_ALGO_COUNT = 7
}
global cudnnConvolutionBwdDataAlgo_t: type <cimport,nodecl,using> = @enum(cint){
  CUDNN_CONVOLUTION_BWD_DATA_ALGO_0 = 0,
  CUDNN_CONVOLUTION_BWD_DATA_ALGO_1 = 1,
  CUDNN_CONVOLUTION_BWD_DATA_ALGO_FFT = 2,
  CUDNN_CONVOLUTION_BWD_DATA_ALGO_FFT_TILING = 3,
  CUDNN_CONVOLUTION_BWD_DATA_ALGO_WINOGRAD = 4,
  CUDNN_CONVOLUTION_BWD_DATA_ALGO_WINOGRAD_NONFUSED = 5,
  CUDNN_CONVOLUTION_BWD_DATA_ALGO_COUNT = 6
}
global cudnnRNNAlgo_t: type <cimport,nodecl,using> = @enum(cint){
  CUDNN_RNN_ALGO_STANDARD = 0,
  CUDNN_RNN_ALGO_PERSIST_STATIC = 1,
  CUDNN_RNN_ALGO_PERSIST_DYNAMIC = 2,
  CUDNN_RNN_ALGO_PERSIST_STATIC_SMALL_H = 3,
  CUDNN_RNN_ALGO_COUNT = 4
}
global cudnnCTCLossAlgo_t: type <cimport,nodecl,using> = @enum(cint){
  CUDNN_CTC_LOSS_ALGO_DETERMINISTIC = 0,
  CUDNN_CTC_LOSS_ALGO_NON_DETERMINISTIC = 1
}
global Algorithm: type <cimport,nodecl,ctypedef'Algorithm'> = @union{
  convFwdAlgo: cudnnConvolutionFwdAlgo_t,
  convBwdFilterAlgo: cudnnConvolutionBwdFilterAlgo_t,
  convBwdDataAlgo: cudnnConvolutionBwdDataAlgo_t,
  RNNAlgo: cudnnRNNAlgo_t,
  CTCLossAlgo: cudnnCTCLossAlgo_t
}
global cudnnAlgorithm_t: type <cimport,nodecl> = @record{
  algo: Algorithm
}
global cudnnSeverity_t: type <cimport,nodecl,using> = @enum(cint){
  CUDNN_SEV_FATAL = 0,
  CUDNN_SEV_ERROR = 1,
  CUDNN_SEV_WARNING = 2,
  CUDNN_SEV_INFO = 3
}
global cudnnDebug_t: type <cimport,nodecl> = @record{
  cudnn_version: cuint,
  cudnnStatus: cudnnStatus_t,
  time_sec: cuint,
  time_usec: cuint,
  time_delta: cuint,
  handle: cudnnHandle_t,
  stream: cudaStream_t,
  pid: culonglong,
  tid: culonglong,
  cudaDeviceId: cint,
  reserved: [15]cint
}
global cudnnCallback_t: type <cimport,nodecl> = @function(sev: cudnnSeverity_t, udata: pointer, dbg: *cudnnDebug_t, msg: cstring): void
global cudnnConvolutionStruct: type <cimport,nodecl,ctypedef'cudnnConvolutionStruct',forwarddecl> = @record{}
global cudnnConvolutionDescriptor_t: type <cimport,nodecl> = @*cudnnConvolutionStruct
global cudnnConvolutionMode_t: type <cimport,nodecl,using> = @enum(cint){
  CUDNN_CONVOLUTION = 0,
  CUDNN_CROSS_CORRELATION = 1
}
global cudnnReorderType_t: type <cimport,nodecl,using> = @enum(cint){
  CUDNN_DEFAULT_REORDER = 0,
  CUDNN_NO_REORDER = 1
}
global cudnnConvolutionFwdAlgoPerf_t: type <cimport,nodecl> = @record{
  algo: cudnnConvolutionFwdAlgo_t,
  status: cudnnStatus_t,
  time: float32,
  memory: csize,
  determinism: cudnnDeterminism_t,
  mathType: cudnnMathType_t,
  reserved: [3]cint
}
global cudnnConvolutionBwdDataAlgoPerf_t: type <cimport,nodecl> = @record{
  algo: cudnnConvolutionBwdDataAlgo_t,
  status: cudnnStatus_t,
  time: float32,
  memory: csize,
  determinism: cudnnDeterminism_t,
  mathType: cudnnMathType_t,
  reserved: [3]cint
}
global cudnnFusedOpsConstParamStruct: type <cimport,nodecl,ctypedef'cudnnFusedOpsConstParamStruct',forwarddecl> = @record{}
global cudnnFusedOpsConstParamPack_t: type <cimport,nodecl> = @*cudnnFusedOpsConstParamStruct
global cudnnFusedOpsVariantParamStruct: type <cimport,nodecl,ctypedef'cudnnFusedOpsVariantParamStruct',forwarddecl> = @record{}
global cudnnFusedOpsVariantParamPack_t: type <cimport,nodecl> = @*cudnnFusedOpsVariantParamStruct
global cudnnFusedOpsPlanStruct: type <cimport,nodecl,ctypedef'cudnnFusedOpsPlanStruct',forwarddecl> = @record{}
global cudnnFusedOpsPlan_t: type <cimport,nodecl> = @*cudnnFusedOpsPlanStruct
global cudnnFusedOps_t: type <cimport,nodecl,using> = @enum(cint){
  CUDNN_FUSED_SCALE_BIAS_ACTIVATION_CONV_BNSTATS = 0,
  CUDNN_FUSED_SCALE_BIAS_ACTIVATION_WGRAD = 1,
  CUDNN_FUSED_BN_FINALIZE_STATISTICS_TRAINING = 2,
  CUDNN_FUSED_BN_FINALIZE_STATISTICS_INFERENCE = 3,
  CUDNN_FUSED_CONV_SCALE_BIAS_ADD_ACTIVATION = 4,
  CUDNN_FUSED_SCALE_BIAS_ADD_ACTIVATION_GEN_BITMASK = 5,
  CUDNN_FUSED_DACTIVATION_FORK_DBATCHNORM = 6
}
global cudnnFusedOpsConstParamLabel_t: type <cimport,nodecl,using> = @enum(cint){
  CUDNN_PARAM_XDESC = 0,
  CUDNN_PARAM_XDATA_PLACEHOLDER = 1,
  CUDNN_PARAM_BN_MODE = 2,
  CUDNN_PARAM_BN_EQSCALEBIAS_DESC = 3,
  CUDNN_PARAM_BN_EQSCALE_PLACEHOLDER = 4,
  CUDNN_PARAM_BN_EQBIAS_PLACEHOLDER = 5,
  CUDNN_PARAM_ACTIVATION_DESC = 6,
  CUDNN_PARAM_CONV_DESC = 7,
  CUDNN_PARAM_WDESC = 8,
  CUDNN_PARAM_WDATA_PLACEHOLDER = 9,
  CUDNN_PARAM_DWDESC = 10,
  CUDNN_PARAM_DWDATA_PLACEHOLDER = 11,
  CUDNN_PARAM_YDESC = 12,
  CUDNN_PARAM_YDATA_PLACEHOLDER = 13,
  CUDNN_PARAM_DYDESC = 14,
  CUDNN_PARAM_DYDATA_PLACEHOLDER = 15,
  CUDNN_PARAM_YSTATS_DESC = 16,
  CUDNN_PARAM_YSUM_PLACEHOLDER = 17,
  CUDNN_PARAM_YSQSUM_PLACEHOLDER = 18,
  CUDNN_PARAM_BN_SCALEBIAS_MEANVAR_DESC = 19,
  CUDNN_PARAM_BN_SCALE_PLACEHOLDER = 20,
  CUDNN_PARAM_BN_BIAS_PLACEHOLDER = 21,
  CUDNN_PARAM_BN_SAVED_MEAN_PLACEHOLDER = 22,
  CUDNN_PARAM_BN_SAVED_INVSTD_PLACEHOLDER = 23,
  CUDNN_PARAM_BN_RUNNING_MEAN_PLACEHOLDER = 24,
  CUDNN_PARAM_BN_RUNNING_VAR_PLACEHOLDER = 25,
  CUDNN_PARAM_ZDESC = 26,
  CUDNN_PARAM_ZDATA_PLACEHOLDER = 27,
  CUDNN_PARAM_BN_Z_EQSCALEBIAS_DESC = 28,
  CUDNN_PARAM_BN_Z_EQSCALE_PLACEHOLDER = 29,
  CUDNN_PARAM_BN_Z_EQBIAS_PLACEHOLDER = 30,
  CUDNN_PARAM_ACTIVATION_BITMASK_DESC = 31,
  CUDNN_PARAM_ACTIVATION_BITMASK_PLACEHOLDER = 32,
  CUDNN_PARAM_DXDESC = 33,
  CUDNN_PARAM_DXDATA_PLACEHOLDER = 34,
  CUDNN_PARAM_DZDESC = 35,
  CUDNN_PARAM_DZDATA_PLACEHOLDER = 36,
  CUDNN_PARAM_BN_DSCALE_PLACEHOLDER = 37,
  CUDNN_PARAM_BN_DBIAS_PLACEHOLDER = 38
}
global cudnnFusedOpsPointerPlaceHolder_t: type <cimport,nodecl,using> = @enum(cint){
  CUDNN_PTR_NULL = 0,
  CUDNN_PTR_ELEM_ALIGNED = 1,
  CUDNN_PTR_16B_ALIGNED = 2
}
global cudnnFusedOpsVariantParamLabel_t: type <cimport,nodecl,using> = @enum(cint){
  CUDNN_PTR_XDATA = 0,
  CUDNN_PTR_BN_EQSCALE = 1,
  CUDNN_PTR_BN_EQBIAS = 2,
  CUDNN_PTR_WDATA = 3,
  CUDNN_PTR_DWDATA = 4,
  CUDNN_PTR_YDATA = 5,
  CUDNN_PTR_DYDATA = 6,
  CUDNN_PTR_YSUM = 7,
  CUDNN_PTR_YSQSUM = 8,
  CUDNN_PTR_WORKSPACE = 9,
  CUDNN_PTR_BN_SCALE = 10,
  CUDNN_PTR_BN_BIAS = 11,
  CUDNN_PTR_BN_SAVED_MEAN = 12,
  CUDNN_PTR_BN_SAVED_INVSTD = 13,
  CUDNN_PTR_BN_RUNNING_MEAN = 14,
  CUDNN_PTR_BN_RUNNING_VAR = 15,
  CUDNN_PTR_ZDATA = 16,
  CUDNN_PTR_BN_Z_EQSCALE = 17,
  CUDNN_PTR_BN_Z_EQBIAS = 18,
  CUDNN_PTR_ACTIVATION_BITMASK = 19,
  CUDNN_PTR_DXDATA = 20,
  CUDNN_PTR_DZDATA = 21,
  CUDNN_PTR_BN_DSCALE = 22,
  CUDNN_PTR_BN_DBIAS = 23,
  CUDNN_SCALAR_SIZE_T_WORKSPACE_SIZE_IN_BYTES = 100,
  CUDNN_SCALAR_INT64_T_BN_ACCUMULATION_COUNT = 101,
  CUDNN_SCALAR_DOUBLE_BN_EXP_AVG_FACTOR = 102,
  CUDNN_SCALAR_DOUBLE_BN_EPSILON = 103
}
global cudnnBackendDescriptor_t: type <cimport,nodecl> = @pointer
global cudnnFraction_t: type <cimport,nodecl> = @record{
  numerator: int64,
  denominator: int64
}
global cudnnPointwiseMode_t: type <cimport,nodecl,using> = @enum(cint){
  CUDNN_POINTWISE_ADD = 0,
  CUDNN_POINTWISE_ADD_SQUARE = 5,
  CUDNN_POINTWISE_DIV = 6,
  CUDNN_POINTWISE_MAX = 3,
  CUDNN_POINTWISE_MIN = 2,
  CUDNN_POINTWISE_MOD = 7,
  CUDNN_POINTWISE_MUL = 1,
  CUDNN_POINTWISE_POW = 8,
  CUDNN_POINTWISE_SUB = 9,
  CUDNN_POINTWISE_ABS = 10,
  CUDNN_POINTWISE_CEIL = 11,
  CUDNN_POINTWISE_COS = 12,
  CUDNN_POINTWISE_EXP = 13,
  CUDNN_POINTWISE_FLOOR = 14,
  CUDNN_POINTWISE_LOG = 15,
  CUDNN_POINTWISE_NEG = 16,
  CUDNN_POINTWISE_RSQRT = 17,
  CUDNN_POINTWISE_SIN = 18,
  CUDNN_POINTWISE_SQRT = 4,
  CUDNN_POINTWISE_TAN = 19,
  CUDNN_POINTWISE_ERF = 20,
  CUDNN_POINTWISE_IDENTITY = 21,
  CUDNN_POINTWISE_RELU_FWD = 100,
  CUDNN_POINTWISE_TANH_FWD = 101,
  CUDNN_POINTWISE_SIGMOID_FWD = 102,
  CUDNN_POINTWISE_ELU_FWD = 103,
  CUDNN_POINTWISE_GELU_FWD = 104,
  CUDNN_POINTWISE_SOFTPLUS_FWD = 105,
  CUDNN_POINTWISE_SWISH_FWD = 106,
  CUDNN_POINTWISE_GELU_APPROX_TANH_FWD = 107,
  CUDNN_POINTWISE_RELU_BWD = 200,
  CUDNN_POINTWISE_TANH_BWD = 201,
  CUDNN_POINTWISE_SIGMOID_BWD = 202,
  CUDNN_POINTWISE_ELU_BWD = 203,
  CUDNN_POINTWISE_GELU_BWD = 204,
  CUDNN_POINTWISE_SOFTPLUS_BWD = 205,
  CUDNN_POINTWISE_SWISH_BWD = 206,
  CUDNN_POINTWISE_GELU_APPROX_TANH_BWD = 207,
  CUDNN_POINTWISE_CMP_EQ = 300,
  CUDNN_POINTWISE_CMP_NEQ = 301,
  CUDNN_POINTWISE_CMP_GT = 302,
  CUDNN_POINTWISE_CMP_GE = 303,
  CUDNN_POINTWISE_CMP_LT = 304,
  CUDNN_POINTWISE_CMP_LE = 305,
  CUDNN_POINTWISE_LOGICAL_AND = 400,
  CUDNN_POINTWISE_LOGICAL_OR = 401,
  CUDNN_POINTWISE_LOGICAL_NOT = 402,
  CUDNN_POINTWISE_GEN_INDEX = 501,
  CUDNN_POINTWISE_BINARY_SELECT = 601
}
global cudnnResampleMode_t: type <cimport,nodecl,using> = @enum(cint){
  CUDNN_RESAMPLE_NEAREST = 0,
  CUDNN_RESAMPLE_BILINEAR = 1,
  CUDNN_RESAMPLE_AVGPOOL = 2,
  CUDNN_RESAMPLE_AVGPOOL_INCLUDE_PADDING = 2,
  CUDNN_RESAMPLE_AVGPOOL_EXCLUDE_PADDING = 4,
  CUDNN_RESAMPLE_MAXPOOL = 3
}
global cudnnSignalMode_t: type <cimport,nodecl,using> = @enum(cint){
  CUDNN_SIGNAL_SET = 0,
  CUDNN_SIGNAL_WAIT = 1
}
global cudnnGenStatsMode_t: type <cimport,nodecl,using> = @enum(cint){
  CUDNN_GENSTATS_SUM_SQSUM = 0
}
global cudnnBnFinalizeStatsMode_t: type <cimport,nodecl,using> = @enum(cint){
  CUDNN_BN_FINALIZE_STATISTICS_TRAINING = 0,
  CUDNN_BN_FINALIZE_STATISTICS_INFERENCE = 1
}
global cudnnRngDistribution_t: type <cimport,nodecl,using> = @enum(cint){
  CUDNN_RNG_DISTRIBUTION_BERNOULLI = 0,
  CUDNN_RNG_DISTRIBUTION_UNIFORM = 1,
  CUDNN_RNG_DISTRIBUTION_NORMAL = 2
}
global cudnnBackendAttributeName_t: type <cimport,nodecl,using> = @enum(cint){
  CUDNN_ATTR_POINTWISE_MODE = 0,
  CUDNN_ATTR_POINTWISE_MATH_PREC = 1,
  CUDNN_ATTR_POINTWISE_NAN_PROPAGATION = 2,
  CUDNN_ATTR_POINTWISE_RELU_LOWER_CLIP = 3,
  CUDNN_ATTR_POINTWISE_RELU_UPPER_CLIP = 4,
  CUDNN_ATTR_POINTWISE_RELU_LOWER_CLIP_SLOPE = 5,
  CUDNN_ATTR_POINTWISE_ELU_ALPHA = 6,
  CUDNN_ATTR_POINTWISE_SOFTPLUS_BETA = 7,
  CUDNN_ATTR_POINTWISE_SWISH_BETA = 8,
  CUDNN_ATTR_POINTWISE_AXIS = 9,
  CUDNN_ATTR_CONVOLUTION_COMP_TYPE = 100,
  CUDNN_ATTR_CONVOLUTION_CONV_MODE = 101,
  CUDNN_ATTR_CONVOLUTION_DILATIONS = 102,
  CUDNN_ATTR_CONVOLUTION_FILTER_STRIDES = 103,
  CUDNN_ATTR_CONVOLUTION_POST_PADDINGS = 104,
  CUDNN_ATTR_CONVOLUTION_PRE_PADDINGS = 105,
  CUDNN_ATTR_CONVOLUTION_SPATIAL_DIMS = 106,
  CUDNN_ATTR_ENGINEHEUR_MODE = 200,
  CUDNN_ATTR_ENGINEHEUR_OPERATION_GRAPH = 201,
  CUDNN_ATTR_ENGINEHEUR_RESULTS = 202,
  CUDNN_ATTR_ENGINECFG_ENGINE = 300,
  CUDNN_ATTR_ENGINECFG_INTERMEDIATE_INFO = 301,
  CUDNN_ATTR_ENGINECFG_KNOB_CHOICES = 302,
  CUDNN_ATTR_EXECUTION_PLAN_HANDLE = 400,
  CUDNN_ATTR_EXECUTION_PLAN_ENGINE_CONFIG = 401,
  CUDNN_ATTR_EXECUTION_PLAN_WORKSPACE_SIZE = 402,
  CUDNN_ATTR_EXECUTION_PLAN_COMPUTED_INTERMEDIATE_UIDS = 403,
  CUDNN_ATTR_EXECUTION_PLAN_RUN_ONLY_INTERMEDIATE_UIDS = 404,
  CUDNN_ATTR_EXECUTION_PLAN_JSON_REPRESENTATION = 405,
  CUDNN_ATTR_INTERMEDIATE_INFO_UNIQUE_ID = 500,
  CUDNN_ATTR_INTERMEDIATE_INFO_SIZE = 501,
  CUDNN_ATTR_INTERMEDIATE_INFO_DEPENDENT_DATA_UIDS = 502,
  CUDNN_ATTR_INTERMEDIATE_INFO_DEPENDENT_ATTRIBUTES = 503,
  CUDNN_ATTR_KNOB_CHOICE_KNOB_TYPE = 600,
  CUDNN_ATTR_KNOB_CHOICE_KNOB_VALUE = 601,
  CUDNN_ATTR_OPERATION_CONVOLUTION_FORWARD_ALPHA = 700,
  CUDNN_ATTR_OPERATION_CONVOLUTION_FORWARD_BETA = 701,
  CUDNN_ATTR_OPERATION_CONVOLUTION_FORWARD_CONV_DESC = 702,
  CUDNN_ATTR_OPERATION_CONVOLUTION_FORWARD_W = 703,
  CUDNN_ATTR_OPERATION_CONVOLUTION_FORWARD_X = 704,
  CUDNN_ATTR_OPERATION_CONVOLUTION_FORWARD_Y = 705,
  CUDNN_ATTR_OPERATION_CONVOLUTION_BWD_DATA_ALPHA = 706,
  CUDNN_ATTR_OPERATION_CONVOLUTION_BWD_DATA_BETA = 707,
  CUDNN_ATTR_OPERATION_CONVOLUTION_BWD_DATA_CONV_DESC = 708,
  CUDNN_ATTR_OPERATION_CONVOLUTION_BWD_DATA_W = 709,
  CUDNN_ATTR_OPERATION_CONVOLUTION_BWD_DATA_DX = 710,
  CUDNN_ATTR_OPERATION_CONVOLUTION_BWD_DATA_DY = 711,
  CUDNN_ATTR_OPERATION_CONVOLUTION_BWD_FILTER_ALPHA = 712,
  CUDNN_ATTR_OPERATION_CONVOLUTION_BWD_FILTER_BETA = 713,
  CUDNN_ATTR_OPERATION_CONVOLUTION_BWD_FILTER_CONV_DESC = 714,
  CUDNN_ATTR_OPERATION_CONVOLUTION_BWD_FILTER_DW = 715,
  CUDNN_ATTR_OPERATION_CONVOLUTION_BWD_FILTER_X = 716,
  CUDNN_ATTR_OPERATION_CONVOLUTION_BWD_FILTER_DY = 717,
  CUDNN_ATTR_OPERATION_POINTWISE_PW_DESCRIPTOR = 750,
  CUDNN_ATTR_OPERATION_POINTWISE_XDESC = 751,
  CUDNN_ATTR_OPERATION_POINTWISE_BDESC = 752,
  CUDNN_ATTR_OPERATION_POINTWISE_YDESC = 753,
  CUDNN_ATTR_OPERATION_POINTWISE_ALPHA1 = 754,
  CUDNN_ATTR_OPERATION_POINTWISE_ALPHA2 = 755,
  CUDNN_ATTR_OPERATION_POINTWISE_DXDESC = 756,
  CUDNN_ATTR_OPERATION_POINTWISE_DYDESC = 757,
  CUDNN_ATTR_OPERATION_POINTWISE_TDESC = 758,
  CUDNN_ATTR_OPERATION_GENSTATS_MODE = 770,
  CUDNN_ATTR_OPERATION_GENSTATS_MATH_PREC = 771,
  CUDNN_ATTR_OPERATION_GENSTATS_XDESC = 772,
  CUDNN_ATTR_OPERATION_GENSTATS_SUMDESC = 773,
  CUDNN_ATTR_OPERATION_GENSTATS_SQSUMDESC = 774,
  CUDNN_ATTR_OPERATION_BN_FINALIZE_STATS_MODE = 780,
  CUDNN_ATTR_OPERATION_BN_FINALIZE_MATH_PREC = 781,
  CUDNN_ATTR_OPERATION_BN_FINALIZE_Y_SUM_DESC = 782,
  CUDNN_ATTR_OPERATION_BN_FINALIZE_Y_SQ_SUM_DESC = 783,
  CUDNN_ATTR_OPERATION_BN_FINALIZE_SCALE_DESC = 784,
  CUDNN_ATTR_OPERATION_BN_FINALIZE_BIAS_DESC = 785,
  CUDNN_ATTR_OPERATION_BN_FINALIZE_PREV_RUNNING_MEAN_DESC = 786,
  CUDNN_ATTR_OPERATION_BN_FINALIZE_PREV_RUNNING_VAR_DESC = 787,
  CUDNN_ATTR_OPERATION_BN_FINALIZE_UPDATED_RUNNING_MEAN_DESC = 788,
  CUDNN_ATTR_OPERATION_BN_FINALIZE_UPDATED_RUNNING_VAR_DESC = 789,
  CUDNN_ATTR_OPERATION_BN_FINALIZE_SAVED_MEAN_DESC = 790,
  CUDNN_ATTR_OPERATION_BN_FINALIZE_SAVED_INV_STD_DESC = 791,
  CUDNN_ATTR_OPERATION_BN_FINALIZE_EQ_SCALE_DESC = 792,
  CUDNN_ATTR_OPERATION_BN_FINALIZE_EQ_BIAS_DESC = 793,
  CUDNN_ATTR_OPERATION_BN_FINALIZE_ACCUM_COUNT_DESC = 794,
  CUDNN_ATTR_OPERATION_BN_FINALIZE_EPSILON_DESC = 795,
  CUDNN_ATTR_OPERATION_BN_FINALIZE_EXP_AVERATE_FACTOR_DESC = 796,
  CUDNN_ATTR_OPERATIONGRAPH_HANDLE = 800,
  CUDNN_ATTR_OPERATIONGRAPH_OPS = 801,
  CUDNN_ATTR_OPERATIONGRAPH_ENGINE_GLOBAL_COUNT = 802,
  CUDNN_ATTR_TENSOR_BYTE_ALIGNMENT = 900,
  CUDNN_ATTR_TENSOR_DATA_TYPE = 901,
  CUDNN_ATTR_TENSOR_DIMENSIONS = 902,
  CUDNN_ATTR_TENSOR_STRIDES = 903,
  CUDNN_ATTR_TENSOR_VECTOR_COUNT = 904,
  CUDNN_ATTR_TENSOR_VECTORIZED_DIMENSION = 905,
  CUDNN_ATTR_TENSOR_UNIQUE_ID = 906,
  CUDNN_ATTR_TENSOR_IS_VIRTUAL = 907,
  CUDNN_ATTR_TENSOR_IS_BY_VALUE = 908,
  CUDNN_ATTR_TENSOR_REORDERING_MODE = 909,
  CUDNN_ATTR_VARIANT_PACK_UNIQUE_IDS = 1000,
  CUDNN_ATTR_VARIANT_PACK_DATA_POINTERS = 1001,
  CUDNN_ATTR_VARIANT_PACK_INTERMEDIATES = 1002,
  CUDNN_ATTR_VARIANT_PACK_WORKSPACE = 1003,
  CUDNN_ATTR_LAYOUT_INFO_TENSOR_UID = 1100,
  CUDNN_ATTR_LAYOUT_INFO_TYPES = 1101,
  CUDNN_ATTR_KNOB_INFO_TYPE = 1200,
  CUDNN_ATTR_KNOB_INFO_MAXIMUM_VALUE = 1201,
  CUDNN_ATTR_KNOB_INFO_MINIMUM_VALUE = 1202,
  CUDNN_ATTR_KNOB_INFO_STRIDE = 1203,
  CUDNN_ATTR_ENGINE_OPERATION_GRAPH = 1300,
  CUDNN_ATTR_ENGINE_GLOBAL_INDEX = 1301,
  CUDNN_ATTR_ENGINE_KNOB_INFO = 1302,
  CUDNN_ATTR_ENGINE_NUMERICAL_NOTE = 1303,
  CUDNN_ATTR_ENGINE_LAYOUT_INFO = 1304,
  CUDNN_ATTR_ENGINE_BEHAVIOR_NOTE = 1305,
  CUDNN_ATTR_MATMUL_COMP_TYPE = 1500,
  CUDNN_ATTR_OPERATION_MATMUL_ADESC = 1520,
  CUDNN_ATTR_OPERATION_MATMUL_BDESC = 1521,
  CUDNN_ATTR_OPERATION_MATMUL_CDESC = 1522,
  CUDNN_ATTR_OPERATION_MATMUL_DESC = 1523,
  CUDNN_ATTR_OPERATION_MATMUL_IRREGULARLY_STRIDED_BATCH_COUNT = 1524,
  CUDNN_ATTR_OPERATION_MATMUL_GEMM_M_OVERRIDE_DESC = 1525,
  CUDNN_ATTR_OPERATION_MATMUL_GEMM_N_OVERRIDE_DESC = 1526,
  CUDNN_ATTR_OPERATION_MATMUL_GEMM_K_OVERRIDE_DESC = 1527,
  CUDNN_ATTR_REDUCTION_OPERATOR = 1600,
  CUDNN_ATTR_REDUCTION_COMP_TYPE = 1601,
  CUDNN_ATTR_OPERATION_REDUCTION_XDESC = 1610,
  CUDNN_ATTR_OPERATION_REDUCTION_YDESC = 1611,
  CUDNN_ATTR_OPERATION_REDUCTION_DESC = 1612,
  CUDNN_ATTR_OPERATION_BN_BWD_WEIGHTS_MATH_PREC = 1620,
  CUDNN_ATTR_OPERATION_BN_BWD_WEIGHTS_MEAN_DESC = 1621,
  CUDNN_ATTR_OPERATION_BN_BWD_WEIGHTS_INVSTD_DESC = 1622,
  CUDNN_ATTR_OPERATION_BN_BWD_WEIGHTS_BN_SCALE_DESC = 1623,
  CUDNN_ATTR_OPERATION_BN_BWD_WEIGHTS_X_DESC = 1624,
  CUDNN_ATTR_OPERATION_BN_BWD_WEIGHTS_DY_DESC = 1625,
  CUDNN_ATTR_OPERATION_BN_BWD_WEIGHTS_DBN_SCALE_DESC = 1626,
  CUDNN_ATTR_OPERATION_BN_BWD_WEIGHTS_DBN_BIAS_DESC = 1627,
  CUDNN_ATTR_OPERATION_BN_BWD_WEIGHTS_EQ_DY_SCALE_DESC = 1628,
  CUDNN_ATTR_OPERATION_BN_BWD_WEIGHTS_EQ_X_SCALE_DESC = 1629,
  CUDNN_ATTR_OPERATION_BN_BWD_WEIGHTS_EQ_BIAS = 1630,
  CUDNN_ATTR_RESAMPLE_MODE = 1700,
  CUDNN_ATTR_RESAMPLE_COMP_TYPE = 1701,
  CUDNN_ATTR_RESAMPLE_SPATIAL_DIMS = 1702,
  CUDNN_ATTR_RESAMPLE_POST_PADDINGS = 1703,
  CUDNN_ATTR_RESAMPLE_PRE_PADDINGS = 1704,
  CUDNN_ATTR_RESAMPLE_STRIDES = 1705,
  CUDNN_ATTR_RESAMPLE_WINDOW_DIMS = 1706,
  CUDNN_ATTR_RESAMPLE_NAN_PROPAGATION = 1707,
  CUDNN_ATTR_RESAMPLE_PADDING_MODE = 1708,
  CUDNN_ATTR_OPERATION_RESAMPLE_FWD_XDESC = 1710,
  CUDNN_ATTR_OPERATION_RESAMPLE_FWD_YDESC = 1711,
  CUDNN_ATTR_OPERATION_RESAMPLE_FWD_IDXDESC = 1712,
  CUDNN_ATTR_OPERATION_RESAMPLE_FWD_ALPHA = 1713,
  CUDNN_ATTR_OPERATION_RESAMPLE_FWD_BETA = 1714,
  CUDNN_ATTR_OPERATION_RESAMPLE_FWD_DESC = 1716,
  CUDNN_ATTR_OPERATION_RESAMPLE_BWD_DXDESC = 1720,
  CUDNN_ATTR_OPERATION_RESAMPLE_BWD_DYDESC = 1721,
  CUDNN_ATTR_OPERATION_RESAMPLE_BWD_IDXDESC = 1722,
  CUDNN_ATTR_OPERATION_RESAMPLE_BWD_ALPHA = 1723,
  CUDNN_ATTR_OPERATION_RESAMPLE_BWD_BETA = 1724,
  CUDNN_ATTR_OPERATION_RESAMPLE_BWD_DESC = 1725,
  CUDNN_ATTR_OPERATION_RESAMPLE_BWD_XDESC = 1726,
  CUDNN_ATTR_OPERATION_RESAMPLE_BWD_YDESC = 1727,
  CUDNN_ATTR_OPERATION_CONCAT_AXIS = 1800,
  CUDNN_ATTR_OPERATION_CONCAT_INPUT_DESCS = 1801,
  CUDNN_ATTR_OPERATION_CONCAT_INPLACE_INDEX = 1802,
  CUDNN_ATTR_OPERATION_CONCAT_OUTPUT_DESC = 1803,
  CUDNN_ATTR_OPERATION_SIGNAL_MODE = 1900,
  CUDNN_ATTR_OPERATION_SIGNAL_FLAGDESC = 1901,
  CUDNN_ATTR_OPERATION_SIGNAL_VALUE = 1902,
  CUDNN_ATTR_OPERATION_SIGNAL_XDESC = 1903,
  CUDNN_ATTR_OPERATION_SIGNAL_YDESC = 1904,
  CUDNN_ATTR_OPERATION_NORM_FWD_MODE = 2000,
  CUDNN_ATTR_OPERATION_NORM_FWD_PHASE = 2001,
  CUDNN_ATTR_OPERATION_NORM_FWD_XDESC = 2002,
  CUDNN_ATTR_OPERATION_NORM_FWD_MEAN_DESC = 2003,
  CUDNN_ATTR_OPERATION_NORM_FWD_INV_VARIANCE_DESC = 2004,
  CUDNN_ATTR_OPERATION_NORM_FWD_SCALE_DESC = 2005,
  CUDNN_ATTR_OPERATION_NORM_FWD_BIAS_DESC = 2006,
  CUDNN_ATTR_OPERATION_NORM_FWD_EPSILON_DESC = 2007,
  CUDNN_ATTR_OPERATION_NORM_FWD_EXP_AVG_FACTOR_DESC = 2008,
  CUDNN_ATTR_OPERATION_NORM_FWD_INPUT_RUNNING_MEAN_DESC = 2009,
  CUDNN_ATTR_OPERATION_NORM_FWD_INPUT_RUNNING_VAR_DESC = 2010,
  CUDNN_ATTR_OPERATION_NORM_FWD_OUTPUT_RUNNING_MEAN_DESC = 2011,
  CUDNN_ATTR_OPERATION_NORM_FWD_OUTPUT_RUNNING_VAR_DESC = 2012,
  CUDNN_ATTR_OPERATION_NORM_FWD_YDESC = 2013,
  CUDNN_ATTR_OPERATION_NORM_FWD_PEER_STAT_DESCS = 2014,
  CUDNN_ATTR_OPERATION_NORM_BWD_MODE = 2100,
  CUDNN_ATTR_OPERATION_NORM_BWD_XDESC = 2101,
  CUDNN_ATTR_OPERATION_NORM_BWD_MEAN_DESC = 2102,
  CUDNN_ATTR_OPERATION_NORM_BWD_INV_VARIANCE_DESC = 2103,
  CUDNN_ATTR_OPERATION_NORM_BWD_DYDESC = 2104,
  CUDNN_ATTR_OPERATION_NORM_BWD_SCALE_DESC = 2105,
  CUDNN_ATTR_OPERATION_NORM_BWD_EPSILON_DESC = 2106,
  CUDNN_ATTR_OPERATION_NORM_BWD_DSCALE_DESC = 2107,
  CUDNN_ATTR_OPERATION_NORM_BWD_DBIAS_DESC = 2108,
  CUDNN_ATTR_OPERATION_NORM_BWD_DXDESC = 2109,
  CUDNN_ATTR_OPERATION_NORM_BWD_PEER_STAT_DESCS = 2110,
  CUDNN_ATTR_OPERATION_RESHAPE_XDESC = 2200,
  CUDNN_ATTR_OPERATION_RESHAPE_YDESC = 2201,
  CUDNN_ATTR_RNG_DISTRIBUTION = 2300,
  CUDNN_ATTR_RNG_NORMAL_DIST_MEAN = 2301,
  CUDNN_ATTR_RNG_NORMAL_DIST_STANDARD_DEVIATION = 2302,
  CUDNN_ATTR_RNG_UNIFORM_DIST_MAXIMUM = 2303,
  CUDNN_ATTR_RNG_UNIFORM_DIST_MINIMUM = 2304,
  CUDNN_ATTR_RNG_BERNOULLI_DIST_PROBABILITY = 2305,
  CUDNN_ATTR_OPERATION_RNG_YDESC = 2310,
  CUDNN_ATTR_OPERATION_RNG_SEED = 2311,
  CUDNN_ATTR_OPERATION_RNG_DESC = 2312,
  CUDNN_ATTR_OPERATION_RNG_OFFSET_DESC = 2313
}
global cudnnBackendAttributeType_t: type <cimport,nodecl,using> = @enum(cint){
  CUDNN_TYPE_HANDLE = 0,
  CUDNN_TYPE_DATA_TYPE = 1,
  CUDNN_TYPE_BOOLEAN = 2,
  CUDNN_TYPE_INT64 = 3,
  CUDNN_TYPE_FLOAT = 4,
  CUDNN_TYPE_DOUBLE = 5,
  CUDNN_TYPE_VOID_PTR = 6,
  CUDNN_TYPE_CONVOLUTION_MODE = 7,
  CUDNN_TYPE_HEUR_MODE = 8,
  CUDNN_TYPE_KNOB_TYPE = 9,
  CUDNN_TYPE_NAN_PROPOGATION = 10,
  CUDNN_TYPE_NUMERICAL_NOTE = 11,
  CUDNN_TYPE_LAYOUT_TYPE = 12,
  CUDNN_TYPE_ATTRIB_NAME = 13,
  CUDNN_TYPE_POINTWISE_MODE = 14,
  CUDNN_TYPE_BACKEND_DESCRIPTOR = 15,
  CUDNN_TYPE_GENSTATS_MODE = 16,
  CUDNN_TYPE_BN_FINALIZE_STATS_MODE = 17,
  CUDNN_TYPE_REDUCTION_OPERATOR_TYPE = 18,
  CUDNN_TYPE_BEHAVIOR_NOTE = 19,
  CUDNN_TYPE_TENSOR_REORDERING_MODE = 20,
  CUDNN_TYPE_RESAMPLE_MODE = 21,
  CUDNN_TYPE_PADDING_MODE = 22,
  CUDNN_TYPE_INT32 = 23,
  CUDNN_TYPE_CHAR = 24,
  CUDNN_TYPE_SIGNAL_MODE = 25,
  CUDNN_TYPE_FRACTION = 26,
  CUDNN_TYPE_NORM_MODE = 27,
  CUDNN_TYPE_NORM_FWD_PHASE = 28,
  CUDNN_TYPE_RNG_DISTRIBUTION = 29
}
global cudnnBackendDescriptorType_t: type <cimport,nodecl,using> = @enum(cint){
  CUDNN_BACKEND_POINTWISE_DESCRIPTOR = 0,
  CUDNN_BACKEND_CONVOLUTION_DESCRIPTOR = 1,
  CUDNN_BACKEND_ENGINE_DESCRIPTOR = 2,
  CUDNN_BACKEND_ENGINECFG_DESCRIPTOR = 3,
  CUDNN_BACKEND_ENGINEHEUR_DESCRIPTOR = 4,
  CUDNN_BACKEND_EXECUTION_PLAN_DESCRIPTOR = 5,
  CUDNN_BACKEND_INTERMEDIATE_INFO_DESCRIPTOR = 6,
  CUDNN_BACKEND_KNOB_CHOICE_DESCRIPTOR = 7,
  CUDNN_BACKEND_KNOB_INFO_DESCRIPTOR = 8,
  CUDNN_BACKEND_LAYOUT_INFO_DESCRIPTOR = 9,
  CUDNN_BACKEND_OPERATION_CONVOLUTION_FORWARD_DESCRIPTOR = 10,
  CUDNN_BACKEND_OPERATION_CONVOLUTION_BACKWARD_FILTER_DESCRIPTOR = 11,
  CUDNN_BACKEND_OPERATION_CONVOLUTION_BACKWARD_DATA_DESCRIPTOR = 12,
  CUDNN_BACKEND_OPERATION_POINTWISE_DESCRIPTOR = 13,
  CUDNN_BACKEND_OPERATION_GEN_STATS_DESCRIPTOR = 14,
  CUDNN_BACKEND_OPERATIONGRAPH_DESCRIPTOR = 15,
  CUDNN_BACKEND_VARIANT_PACK_DESCRIPTOR = 16,
  CUDNN_BACKEND_TENSOR_DESCRIPTOR = 17,
  CUDNN_BACKEND_MATMUL_DESCRIPTOR = 18,
  CUDNN_BACKEND_OPERATION_MATMUL_DESCRIPTOR = 19,
  CUDNN_BACKEND_OPERATION_BN_FINALIZE_STATISTICS_DESCRIPTOR = 20,
  CUDNN_BACKEND_REDUCTION_DESCRIPTOR = 21,
  CUDNN_BACKEND_OPERATION_REDUCTION_DESCRIPTOR = 22,
  CUDNN_BACKEND_OPERATION_BN_BWD_WEIGHTS_DESCRIPTOR = 23,
  CUDNN_BACKEND_RESAMPLE_DESCRIPTOR = 24,
  CUDNN_BACKEND_OPERATION_RESAMPLE_FWD_DESCRIPTOR = 25,
  CUDNN_BACKEND_OPERATION_RESAMPLE_BWD_DESCRIPTOR = 26,
  CUDNN_BACKEND_OPERATION_CONCAT_DESCRIPTOR = 27,
  CUDNN_BACKEND_OPERATION_SIGNAL_DESCRIPTOR = 28,
  CUDNN_BACKEND_OPERATION_NORM_FORWARD_DESCRIPTOR = 29,
  CUDNN_BACKEND_OPERATION_NORM_BACKWARD_DESCRIPTOR = 30,
  CUDNN_BACKEND_OPERATION_RESHAPE_DESCRIPTOR = 31,
  CUDNN_BACKEND_RNG_DESCRIPTOR = 32,
  CUDNN_BACKEND_OPERATION_RNG_DESCRIPTOR = 33
}
global cudnnBackendNumericalNote_t: type <cimport,nodecl,using> = @enum(cint){
  CUDNN_NUMERICAL_NOTE_TENSOR_CORE = 0,
  CUDNN_NUMERICAL_NOTE_DOWN_CONVERT_INPUTS = 1,
  CUDNN_NUMERICAL_NOTE_REDUCED_PRECISION_REDUCTION = 2,
  CUDNN_NUMERICAL_NOTE_FFT = 3,
  CUDNN_NUMERICAL_NOTE_NONDETERMINISTIC = 4,
  CUDNN_NUMERICAL_NOTE_WINOGRAD = 5,
  CUDNN_NUMERICAL_NOTE_WINOGRAD_TILE_4x4 = 6,
  CUDNN_NUMERICAL_NOTE_WINOGRAD_TILE_6x6 = 7,
  CUDNN_NUMERICAL_NOTE_WINOGRAD_TILE_13x13 = 8,
  CUDNN_NUMERICAL_NOTE_TYPE_COUNT = 9
}
global cudnnBackendBehaviorNote_t: type <cimport,nodecl,using> = @enum(cint){
  CUDNN_BEHAVIOR_NOTE_RUNTIME_COMPILATION = 0,
  CUDNN_BEHAVIOR_NOTE_REQUIRES_FILTER_INT8x32_REORDER = 1,
  CUDNN_BEHAVIOR_NOTE_REQUIRES_BIAS_INT8x32_REORDER = 2,
  CUDNN_BEHAVIOR_NOTE_TYPE_COUNT = 3
}
global cudnnBackendKnobType_t: type <cimport,nodecl,using> = @enum(cint){
  CUDNN_KNOB_TYPE_SPLIT_K = 0,
  CUDNN_KNOB_TYPE_SWIZZLE = 1,
  CUDNN_KNOB_TYPE_TILE_SIZE = 2,
  CUDNN_KNOB_TYPE_USE_TEX = 3,
  CUDNN_KNOB_TYPE_EDGE = 4,
  CUDNN_KNOB_TYPE_KBLOCK = 5,
  CUDNN_KNOB_TYPE_LDGA = 6,
  CUDNN_KNOB_TYPE_LDGB = 7,
  CUDNN_KNOB_TYPE_CHUNK_K = 8,
  CUDNN_KNOB_TYPE_SPLIT_H = 9,
  CUDNN_KNOB_TYPE_WINO_TILE = 10,
  CUDNN_KNOB_TYPE_MULTIPLY = 11,
  CUDNN_KNOB_TYPE_SPLIT_K_BUF = 12,
  CUDNN_KNOB_TYPE_TILEK = 13,
  CUDNN_KNOB_TYPE_STAGES = 14,
  CUDNN_KNOB_TYPE_REDUCTION_MODE = 15,
  CUDNN_KNOB_TYPE_CTA_SPLIT_K_MODE = 16,
  CUDNN_KNOB_TYPE_SPLIT_K_SLC = 17,
  CUDNN_KNOB_TYPE_IDX_MODE = 18,
  CUDNN_KNOB_TYPE_SLICED = 19,
  CUDNN_KNOB_TYPE_SPLIT_RS = 20,
  CUDNN_KNOB_TYPE_SINGLEBUFFER = 21,
  CUDNN_KNOB_TYPE_LDGC = 22,
  CUDNN_KNOB_TYPE_SPECFILT = 23,
  CUDNN_KNOB_TYPE_KERNEL_CFG = 24,
  CUDNN_KNOB_TYPE_WORKSPACE = 25,
  CUDNN_KNOB_TYPE_TILE_CGA = 26,
  CUDNN_KNOB_TYPE_TILE_CGA_M = 27,
  CUDNN_KNOB_TYPE_TILE_CGA_N = 28,
  CUDNN_KNOB_TYPE_BLOCK_SIZE = 29,
  CUDNN_KNOB_TYPE_COUNTS = 30
}
global cudnnBackendLayoutType_t: type <cimport,nodecl,using> = @enum(cint){
  CUDNN_LAYOUT_TYPE_PREFERRED_NCHW = 0,
  CUDNN_LAYOUT_TYPE_PREFERRED_NHWC = 1,
  CUDNN_LAYOUT_TYPE_PREFERRED_PAD4CK = 2,
  CUDNN_LAYOUT_TYPE_PREFERRED_PAD8CK = 3,
  CUDNN_LAYOUT_TYPE_COUNT = 4
}
global cudnnBackendHeurMode_t: type <cimport,nodecl,using> = @enum(cint){
  CUDNN_HEUR_MODE_INSTANT = 0,
  CUDNN_HEUR_MODE_B = 1,
  CUDNN_HEUR_MODE_FALLBACK = 2,
  CUDNN_HEUR_MODE_A = 3,
  CUDNN_HEUR_MODES_COUNT = 4
}
global cudnnBackendTensorReordering_t: type <cimport,nodecl,using> = @enum(cint){
  CUDNN_TENSOR_REORDERING_NONE = 0,
  CUDNN_TENSOR_REORDERING_INT8x32 = 1,
  CUDNN_TENSOR_REORDERING_F16x16 = 2
}
global cudnnPaddingMode_t: type <cimport,nodecl,using> = @enum(cint){
  CUDNN_ZERO_PAD = 0,
  CUDNN_NEG_INF_PAD = 1,
  CUDNN_EDGE_VAL_PAD = 2
}
global cudnnBackendNormMode_t: type <cimport,nodecl,using> = @enum(cint){
  CUDNN_LAYER_NORM = 0,
  CUDNN_INSTANCE_NORM = 1,
  CUDNN_BATCH_NORM = 2,
  CUDNN_GROUP_NORM = 3
}
global cudnnBackendNormFwdPhase_t: type <cimport,nodecl,using> = @enum(cint){
  CUDNN_NORM_FWD_INFERENCE = 0,
  CUDNN_NORM_FWD_TRAINING = 1
}
global function cudaDeviceReset(): cudaError_t <cimport,nodecl> end
global function cudaDeviceSynchronize(): cudaError_t <cimport,nodecl> end
global function cudaDeviceSetLimit(limit: cudaLimit, value: csize): cudaError_t <cimport,nodecl> end
global function cudaDeviceGetLimit(pValue: *csize, limit: cudaLimit): cudaError_t <cimport,nodecl> end
global function cudaDeviceGetTexture1DLinearMaxWidth(maxWidthInElements: *csize, fmtDesc: *cudaChannelFormatDesc, device: cint): cudaError_t <cimport,nodecl> end
global function cudaDeviceGetCacheConfig(pCacheConfig: *cudaFuncCache): cudaError_t <cimport,nodecl> end
global function cudaDeviceGetStreamPriorityRange(leastPriority: *cint, greatestPriority: *cint): cudaError_t <cimport,nodecl> end
global function cudaDeviceSetCacheConfig(cacheConfig: cudaFuncCache): cudaError_t <cimport,nodecl> end
global function cudaDeviceGetSharedMemConfig(pConfig: *cudaSharedMemConfig): cudaError_t <cimport,nodecl> end
global function cudaDeviceSetSharedMemConfig(config: cudaSharedMemConfig): cudaError_t <cimport,nodecl> end
global function cudaDeviceGetByPCIBusId(device: *cint, pciBusId: cstring): cudaError_t <cimport,nodecl> end
global function cudaDeviceGetPCIBusId(pciBusId: cstring, len: cint, device: cint): cudaError_t <cimport,nodecl> end
global function cudaIpcGetEventHandle(handle: *cudaIpcEventHandle_t, event: cudaEvent_t): cudaError_t <cimport,nodecl> end
global function cudaIpcOpenEventHandle(event: *cudaEvent_t, handle: cudaIpcEventHandle_t): cudaError_t <cimport,nodecl> end
global function cudaIpcGetMemHandle(handle: *cudaIpcMemHandle_t, devPtr: pointer): cudaError_t <cimport,nodecl> end
global function cudaIpcOpenMemHandle(devPtr: *pointer, handle: cudaIpcMemHandle_t, flags: cuint): cudaError_t <cimport,nodecl> end
global function cudaIpcCloseMemHandle(devPtr: pointer): cudaError_t <cimport,nodecl> end
global function cudaDeviceFlushGPUDirectRDMAWrites(target: cudaFlushGPUDirectRDMAWritesTarget, scope: cudaFlushGPUDirectRDMAWritesScope): cudaError_t <cimport,nodecl> end
global function cudaThreadExit(): cudaError_t <cimport,nodecl> end
global function cudaThreadSynchronize(): cudaError_t <cimport,nodecl> end
global function cudaThreadSetLimit(limit: cudaLimit, value: csize): cudaError_t <cimport,nodecl> end
global function cudaThreadGetLimit(pValue: *csize, limit: cudaLimit): cudaError_t <cimport,nodecl> end
global function cudaThreadGetCacheConfig(pCacheConfig: *cudaFuncCache): cudaError_t <cimport,nodecl> end
global function cudaThreadSetCacheConfig(cacheConfig: cudaFuncCache): cudaError_t <cimport,nodecl> end
global function cudaGetLastError(): cudaError_t <cimport,nodecl> end
global function cudaPeekAtLastError(): cudaError_t <cimport,nodecl> end
global function cudaGetErrorName(error: cudaError_t): cstring <cimport,nodecl> end
global function cudaGetErrorString(error: cudaError_t): cstring <cimport,nodecl> end
global function cudaGetDeviceCount(count: *cint): cudaError_t <cimport,nodecl> end
global function cudaGetDeviceProperties_v2(prop: *cudaDeviceProp, device: cint): cudaError_t <cimport,nodecl> end
global function cudaDeviceGetAttribute(value: *cint, attr: cudaDeviceAttr, device: cint): cudaError_t <cimport,nodecl> end
global function cudaDeviceGetDefaultMemPool(memPool: *cudaMemPool_t, device: cint): cudaError_t <cimport,nodecl> end
global function cudaDeviceSetMemPool(device: cint, memPool: cudaMemPool_t): cudaError_t <cimport,nodecl> end
global function cudaDeviceGetMemPool(memPool: *cudaMemPool_t, device: cint): cudaError_t <cimport,nodecl> end
global function cudaDeviceGetNvSciSyncAttributes(nvSciSyncAttrList: pointer, device: cint, flags: cint): cudaError_t <cimport,nodecl> end
global function cudaDeviceGetP2PAttribute(value: *cint, attr: cudaDeviceP2PAttr, srcDevice: cint, dstDevice: cint): cudaError_t <cimport,nodecl> end
global function cudaChooseDevice(device: *cint, prop: *cudaDeviceProp): cudaError_t <cimport,nodecl> end
global function cudaInitDevice(device: cint, deviceFlags: cuint, flags: cuint): cudaError_t <cimport,nodecl> end
global function cudaSetDevice(device: cint): cudaError_t <cimport,nodecl> end
global function cudaGetDevice(device: *cint): cudaError_t <cimport,nodecl> end
global function cudaSetValidDevices(device_arr: *cint, len: cint): cudaError_t <cimport,nodecl> end
global function cudaSetDeviceFlags(flags: cuint): cudaError_t <cimport,nodecl> end
global function cudaGetDeviceFlags(flags: *cuint): cudaError_t <cimport,nodecl> end
global function cudaStreamCreate(pStream: *cudaStream_t): cudaError_t <cimport,nodecl> end
global function cudaStreamCreateWithFlags(pStream: *cudaStream_t, flags: cuint): cudaError_t <cimport,nodecl> end
global function cudaStreamCreateWithPriority(pStream: *cudaStream_t, flags: cuint, priority: cint): cudaError_t <cimport,nodecl> end
global function cudaStreamGetPriority(hStream: cudaStream_t, priority: *cint): cudaError_t <cimport,nodecl> end
global function cudaStreamGetFlags(hStream: cudaStream_t, flags: *cuint): cudaError_t <cimport,nodecl> end
global function cudaStreamGetId(hStream: cudaStream_t, streamId: *culonglong): cudaError_t <cimport,nodecl> end
global function cudaCtxResetPersistingL2Cache(): cudaError_t <cimport,nodecl> end
global function cudaStreamCopyAttributes(dst: cudaStream_t, src: cudaStream_t): cudaError_t <cimport,nodecl> end
global function cudaStreamGetAttribute(hStream: cudaStream_t, attr: cudaLaunchAttributeID, value_out: *cudaLaunchAttributeValue): cudaError_t <cimport,nodecl> end
global function cudaStreamSetAttribute(hStream: cudaStream_t, attr: cudaLaunchAttributeID, value: *cudaLaunchAttributeValue): cudaError_t <cimport,nodecl> end
global function cudaStreamDestroy(stream: cudaStream_t): cudaError_t <cimport,nodecl> end
global function cudaStreamWaitEvent(stream: cudaStream_t, event: cudaEvent_t, flags: cuint): cudaError_t <cimport,nodecl> end
global function cudaStreamAddCallback(stream: cudaStream_t, callback: cudaStreamCallback_t, userData: pointer, flags: cuint): cudaError_t <cimport,nodecl> end
global function cudaStreamSynchronize(stream: cudaStream_t): cudaError_t <cimport,nodecl> end
global function cudaStreamQuery(stream: cudaStream_t): cudaError_t <cimport,nodecl> end
global function cudaStreamAttachMemAsync(stream: cudaStream_t, devPtr: pointer, length: csize, flags: cuint): cudaError_t <cimport,nodecl> end
global function cudaStreamBeginCapture(stream: cudaStream_t, mode: cudaStreamCaptureMode): cudaError_t <cimport,nodecl> end
global function cudaThreadExchangeStreamCaptureMode(mode: *cudaStreamCaptureMode): cudaError_t <cimport,nodecl> end
global function cudaStreamEndCapture(stream: cudaStream_t, pGraph: *cudaGraph_t): cudaError_t <cimport,nodecl> end
global function cudaStreamIsCapturing(stream: cudaStream_t, pCaptureStatus: *cudaStreamCaptureStatus): cudaError_t <cimport,nodecl> end
global function cudaStreamGetCaptureInfo_v2(stream: cudaStream_t, captureStatus_out: *cudaStreamCaptureStatus, id_out: *culonglong, graph_out: *cudaGraph_t, dependencies_out: **cudaGraphNode_t, numDependencies_out: *csize): cudaError_t <cimport,nodecl> end
global function cudaStreamUpdateCaptureDependencies(stream: cudaStream_t, dependencies: *cudaGraphNode_t, numDependencies: csize, flags: cuint): cudaError_t <cimport,nodecl> end
global function cudaEventCreate(event: *cudaEvent_t): cudaError_t <cimport,nodecl> end
global function cudaEventCreateWithFlags(event: *cudaEvent_t, flags: cuint): cudaError_t <cimport,nodecl> end
global function cudaEventRecord(event: cudaEvent_t, stream: cudaStream_t): cudaError_t <cimport,nodecl> end
global function cudaEventRecordWithFlags(event: cudaEvent_t, stream: cudaStream_t, flags: cuint): cudaError_t <cimport,nodecl> end
global function cudaEventQuery(event: cudaEvent_t): cudaError_t <cimport,nodecl> end
global function cudaEventSynchronize(event: cudaEvent_t): cudaError_t <cimport,nodecl> end
global function cudaEventDestroy(event: cudaEvent_t): cudaError_t <cimport,nodecl> end
global function cudaEventElapsedTime(ms: *float32, start: cudaEvent_t, end_: cudaEvent_t): cudaError_t <cimport,nodecl> end
global function cudaImportExternalMemory(extMem_out: *cudaExternalMemory_t, memHandleDesc: *cudaExternalMemoryHandleDesc): cudaError_t <cimport,nodecl> end
global function cudaExternalMemoryGetMappedBuffer(devPtr: *pointer, extMem: cudaExternalMemory_t, bufferDesc: *cudaExternalMemoryBufferDesc): cudaError_t <cimport,nodecl> end
global function cudaExternalMemoryGetMappedMipmappedArray(mipmap: *cudaMipmappedArray_t, extMem: cudaExternalMemory_t, mipmapDesc: *cudaExternalMemoryMipmappedArrayDesc): cudaError_t <cimport,nodecl> end
global function cudaDestroyExternalMemory(extMem: cudaExternalMemory_t): cudaError_t <cimport,nodecl> end
global function cudaImportExternalSemaphore(extSem_out: *cudaExternalSemaphore_t, semHandleDesc: *cudaExternalSemaphoreHandleDesc): cudaError_t <cimport,nodecl> end
global function cudaSignalExternalSemaphoresAsync_v2(extSemArray: *cudaExternalSemaphore_t, paramsArray: *cudaExternalSemaphoreSignalParams, numExtSems: cuint, stream: cudaStream_t): cudaError_t <cimport,nodecl> end
global function cudaWaitExternalSemaphoresAsync_v2(extSemArray: *cudaExternalSemaphore_t, paramsArray: *cudaExternalSemaphoreWaitParams, numExtSems: cuint, stream: cudaStream_t): cudaError_t <cimport,nodecl> end
global function cudaDestroyExternalSemaphore(extSem: cudaExternalSemaphore_t): cudaError_t <cimport,nodecl> end
global function cudaLaunchKernel(func: pointer, gridDim: dim3, blockDim: dim3, args: *pointer, sharedMem: csize, stream: cudaStream_t): cudaError_t <cimport,nodecl> end
global function cudaLaunchKernelExC(config: *cudaLaunchConfig_t, func: pointer, args: *pointer): cudaError_t <cimport,nodecl> end
global function cudaLaunchCooperativeKernel(func: pointer, gridDim: dim3, blockDim: dim3, args: *pointer, sharedMem: csize, stream: cudaStream_t): cudaError_t <cimport,nodecl> end
global function cudaLaunchCooperativeKernelMultiDevice(launchParamsList: *cudaLaunchParams, numDevices: cuint, flags: cuint): cudaError_t <cimport,nodecl> end
global function cudaFuncSetCacheConfig(func: pointer, cacheConfig: cudaFuncCache): cudaError_t <cimport,nodecl> end
global function cudaFuncSetSharedMemConfig(func: pointer, config: cudaSharedMemConfig): cudaError_t <cimport,nodecl> end
global function cudaFuncGetAttributes(attr: *cudaFuncAttributes, func: pointer): cudaError_t <cimport,nodecl> end
global function cudaFuncSetAttribute(func: pointer, attr: cudaFuncAttribute, value: cint): cudaError_t <cimport,nodecl> end
global function cudaSetDoubleForDevice(d: *float64): cudaError_t <cimport,nodecl> end
global function cudaSetDoubleForHost(d: *float64): cudaError_t <cimport,nodecl> end
global function cudaLaunchHostFunc(stream: cudaStream_t, fn: cudaHostFn_t, userData: pointer): cudaError_t <cimport,nodecl> end
global function cudaOccupancyMaxActiveBlocksPerMultiprocessor(numBlocks: *cint, func: pointer, blockSize: cint, dynamicSMemSize: csize): cudaError_t <cimport,nodecl> end
global function cudaOccupancyAvailableDynamicSMemPerBlock(dynamicSmemSize: *csize, func: pointer, numBlocks: cint, blockSize: cint): cudaError_t <cimport,nodecl> end
global function cudaOccupancyMaxActiveBlocksPerMultiprocessorWithFlags(numBlocks: *cint, func: pointer, blockSize: cint, dynamicSMemSize: csize, flags: cuint): cudaError_t <cimport,nodecl> end
global function cudaOccupancyMaxPotentialClusterSize(clusterSize: *cint, func: pointer, launchConfig: *cudaLaunchConfig_t): cudaError_t <cimport,nodecl> end
global function cudaOccupancyMaxActiveClusters(numClusters: *cint, func: pointer, launchConfig: *cudaLaunchConfig_t): cudaError_t <cimport,nodecl> end
global function cudaMallocManaged(devPtr: *pointer, size: csize, flags: cuint): cudaError_t <cimport,nodecl> end
global function cudaMalloc(devPtr: *pointer, size: csize): cudaError_t <cimport,nodecl> end
global function cudaMallocHost(ptr: *pointer, size: csize): cudaError_t <cimport,nodecl> end
global function cudaMallocPitch(devPtr: *pointer, pitch: *csize, width: csize, height: csize): cudaError_t <cimport,nodecl> end
global function cudaMallocArray(array: *cudaArray_t, desc: *cudaChannelFormatDesc, width: csize, height: csize, flags: cuint): cudaError_t <cimport,nodecl> end
global function cudaFree(devPtr: pointer): cudaError_t <cimport,nodecl> end
global function cudaFreeHost(ptr: pointer): cudaError_t <cimport,nodecl> end
global function cudaFreeArray(array: cudaArray_t): cudaError_t <cimport,nodecl> end
global function cudaFreeMipmappedArray(mipmappedArray: cudaMipmappedArray_t): cudaError_t <cimport,nodecl> end
global function cudaHostAlloc(pHost: *pointer, size: csize, flags: cuint): cudaError_t <cimport,nodecl> end
global function cudaHostRegister(ptr: pointer, size: csize, flags: cuint): cudaError_t <cimport,nodecl> end
global function cudaHostUnregister(ptr: pointer): cudaError_t <cimport,nodecl> end
global function cudaHostGetDevicePointer(pDevice: *pointer, pHost: pointer, flags: cuint): cudaError_t <cimport,nodecl> end
global function cudaHostGetFlags(pFlags: *cuint, pHost: pointer): cudaError_t <cimport,nodecl> end
global function cudaMalloc3D(pitchedDevPtr: *cudaPitchedPtr, extent: cudaExtent): cudaError_t <cimport,nodecl> end
global function cudaMalloc3DArray(array: *cudaArray_t, desc: *cudaChannelFormatDesc, extent: cudaExtent, flags: cuint): cudaError_t <cimport,nodecl> end
global function cudaMallocMipmappedArray(mipmappedArray: *cudaMipmappedArray_t, desc: *cudaChannelFormatDesc, extent: cudaExtent, numLevels: cuint, flags: cuint): cudaError_t <cimport,nodecl> end
global function cudaGetMipmappedArrayLevel(levelArray: *cudaArray_t, mipmappedArray: cudaMipmappedArray_const_t, level: cuint): cudaError_t <cimport,nodecl> end
global function cudaMemcpy3D(p: *cudaMemcpy3DParms): cudaError_t <cimport,nodecl> end
global function cudaMemcpy3DPeer(p: *cudaMemcpy3DPeerParms): cudaError_t <cimport,nodecl> end
global function cudaMemcpy3DAsync(p: *cudaMemcpy3DParms, stream: cudaStream_t): cudaError_t <cimport,nodecl> end
global function cudaMemcpy3DPeerAsync(p: *cudaMemcpy3DPeerParms, stream: cudaStream_t): cudaError_t <cimport,nodecl> end
global function cudaMemGetInfo(free: *csize, total: *csize): cudaError_t <cimport,nodecl> end
global function cudaArrayGetInfo(desc: *cudaChannelFormatDesc, extent: *cudaExtent, flags: *cuint, array: cudaArray_t): cudaError_t <cimport,nodecl> end
global function cudaArrayGetPlane(pPlaneArray: *cudaArray_t, hArray: cudaArray_t, planeIdx: cuint): cudaError_t <cimport,nodecl> end
global function cudaArrayGetMemoryRequirements(memoryRequirements: *cudaArrayMemoryRequirements, array: cudaArray_t, device: cint): cudaError_t <cimport,nodecl> end
global function cudaMipmappedArrayGetMemoryRequirements(memoryRequirements: *cudaArrayMemoryRequirements, mipmap: cudaMipmappedArray_t, device: cint): cudaError_t <cimport,nodecl> end
global function cudaArrayGetSparseProperties(sparseProperties: *cudaArraySparseProperties, array: cudaArray_t): cudaError_t <cimport,nodecl> end
global function cudaMipmappedArrayGetSparseProperties(sparseProperties: *cudaArraySparseProperties, mipmap: cudaMipmappedArray_t): cudaError_t <cimport,nodecl> end
global function cudaMemcpy(dst: pointer, src: pointer, count: csize, kind: cudaMemcpyKind): cudaError_t <cimport,nodecl> end
global function cudaMemcpyPeer(dst: pointer, dstDevice: cint, src: pointer, srcDevice: cint, count: csize): cudaError_t <cimport,nodecl> end
global function cudaMemcpy2D(dst: pointer, dpitch: csize, src: pointer, spitch: csize, width: csize, height: csize, kind: cudaMemcpyKind): cudaError_t <cimport,nodecl> end
global function cudaMemcpy2DToArray(dst: cudaArray_t, wOffset: csize, hOffset: csize, src: pointer, spitch: csize, width: csize, height: csize, kind: cudaMemcpyKind): cudaError_t <cimport,nodecl> end
global function cudaMemcpy2DFromArray(dst: pointer, dpitch: csize, src: cudaArray_const_t, wOffset: csize, hOffset: csize, width: csize, height: csize, kind: cudaMemcpyKind): cudaError_t <cimport,nodecl> end
global function cudaMemcpy2DArrayToArray(dst: cudaArray_t, wOffsetDst: csize, hOffsetDst: csize, src: cudaArray_const_t, wOffsetSrc: csize, hOffsetSrc: csize, width: csize, height: csize, kind: cudaMemcpyKind): cudaError_t <cimport,nodecl> end
global function cudaMemcpyToSymbol(symbol: pointer, src: pointer, count: csize, offset: csize, kind: cudaMemcpyKind): cudaError_t <cimport,nodecl> end
global function cudaMemcpyFromSymbol(dst: pointer, symbol: pointer, count: csize, offset: csize, kind: cudaMemcpyKind): cudaError_t <cimport,nodecl> end
global function cudaMemcpyAsync(dst: pointer, src: pointer, count: csize, kind: cudaMemcpyKind, stream: cudaStream_t): cudaError_t <cimport,nodecl> end
global function cudaMemcpyPeerAsync(dst: pointer, dstDevice: cint, src: pointer, srcDevice: cint, count: csize, stream: cudaStream_t): cudaError_t <cimport,nodecl> end
global function cudaMemcpy2DAsync(dst: pointer, dpitch: csize, src: pointer, spitch: csize, width: csize, height: csize, kind: cudaMemcpyKind, stream: cudaStream_t): cudaError_t <cimport,nodecl> end
global function cudaMemcpy2DToArrayAsync(dst: cudaArray_t, wOffset: csize, hOffset: csize, src: pointer, spitch: csize, width: csize, height: csize, kind: cudaMemcpyKind, stream: cudaStream_t): cudaError_t <cimport,nodecl> end
global function cudaMemcpy2DFromArrayAsync(dst: pointer, dpitch: csize, src: cudaArray_const_t, wOffset: csize, hOffset: csize, width: csize, height: csize, kind: cudaMemcpyKind, stream: cudaStream_t): cudaError_t <cimport,nodecl> end
global function cudaMemcpyToSymbolAsync(symbol: pointer, src: pointer, count: csize, offset: csize, kind: cudaMemcpyKind, stream: cudaStream_t): cudaError_t <cimport,nodecl> end
global function cudaMemcpyFromSymbolAsync(dst: pointer, symbol: pointer, count: csize, offset: csize, kind: cudaMemcpyKind, stream: cudaStream_t): cudaError_t <cimport,nodecl> end
global function cudaMemset(devPtr: pointer, value: cint, count: csize): cudaError_t <cimport,nodecl> end
global function cudaMemset2D(devPtr: pointer, pitch: csize, value: cint, width: csize, height: csize): cudaError_t <cimport,nodecl> end
global function cudaMemset3D(pitchedDevPtr: cudaPitchedPtr, value: cint, extent: cudaExtent): cudaError_t <cimport,nodecl> end
global function cudaMemsetAsync(devPtr: pointer, value: cint, count: csize, stream: cudaStream_t): cudaError_t <cimport,nodecl> end
global function cudaMemset2DAsync(devPtr: pointer, pitch: csize, value: cint, width: csize, height: csize, stream: cudaStream_t): cudaError_t <cimport,nodecl> end
global function cudaMemset3DAsync(pitchedDevPtr: cudaPitchedPtr, value: cint, extent: cudaExtent, stream: cudaStream_t): cudaError_t <cimport,nodecl> end
global function cudaGetSymbolAddress(devPtr: *pointer, symbol: pointer): cudaError_t <cimport,nodecl> end
global function cudaGetSymbolSize(size: *csize, symbol: pointer): cudaError_t <cimport,nodecl> end
global function cudaMemPrefetchAsync(devPtr: pointer, count: csize, dstDevice: cint, stream: cudaStream_t): cudaError_t <cimport,nodecl> end
global function cudaMemAdvise(devPtr: pointer, count: csize, advice: cudaMemoryAdvise, device: cint): cudaError_t <cimport,nodecl> end
global function cudaMemRangeGetAttribute(data: pointer, dataSize: csize, attribute: cudaMemRangeAttribute, devPtr: pointer, count: csize): cudaError_t <cimport,nodecl> end
global function cudaMemRangeGetAttributes(data: *pointer, dataSizes: *csize, attributes: *cudaMemRangeAttribute, numAttributes: csize, devPtr: pointer, count: csize): cudaError_t <cimport,nodecl> end
global function cudaMemcpyToArray(dst: cudaArray_t, wOffset: csize, hOffset: csize, src: pointer, count: csize, kind: cudaMemcpyKind): cudaError_t <cimport,nodecl> end
global function cudaMemcpyFromArray(dst: pointer, src: cudaArray_const_t, wOffset: csize, hOffset: csize, count: csize, kind: cudaMemcpyKind): cudaError_t <cimport,nodecl> end
global function cudaMemcpyArrayToArray(dst: cudaArray_t, wOffsetDst: csize, hOffsetDst: csize, src: cudaArray_const_t, wOffsetSrc: csize, hOffsetSrc: csize, count: csize, kind: cudaMemcpyKind): cudaError_t <cimport,nodecl> end
global function cudaMemcpyToArrayAsync(dst: cudaArray_t, wOffset: csize, hOffset: csize, src: pointer, count: csize, kind: cudaMemcpyKind, stream: cudaStream_t): cudaError_t <cimport,nodecl> end
global function cudaMemcpyFromArrayAsync(dst: pointer, src: cudaArray_const_t, wOffset: csize, hOffset: csize, count: csize, kind: cudaMemcpyKind, stream: cudaStream_t): cudaError_t <cimport,nodecl> end
global function cudaMallocAsync(devPtr: *pointer, size: csize, hStream: cudaStream_t): cudaError_t <cimport,nodecl> end
global function cudaFreeAsync(devPtr: pointer, hStream: cudaStream_t): cudaError_t <cimport,nodecl> end
global function cudaMemPoolTrimTo(memPool: cudaMemPool_t, minBytesToKeep: csize): cudaError_t <cimport,nodecl> end
global function cudaMemPoolSetAttribute(memPool: cudaMemPool_t, attr: cudaMemPoolAttr, value: pointer): cudaError_t <cimport,nodecl> end
global function cudaMemPoolGetAttribute(memPool: cudaMemPool_t, attr: cudaMemPoolAttr, value: pointer): cudaError_t <cimport,nodecl> end
global function cudaMemPoolSetAccess(memPool: cudaMemPool_t, descList: *cudaMemAccessDesc, count: csize): cudaError_t <cimport,nodecl> end
global function cudaMemPoolGetAccess(flags: *cudaMemAccessFlags, memPool: cudaMemPool_t, location: *cudaMemLocation): cudaError_t <cimport,nodecl> end
global function cudaMemPoolCreate(memPool: *cudaMemPool_t, poolProps: *cudaMemPoolProps): cudaError_t <cimport,nodecl> end
global function cudaMemPoolDestroy(memPool: cudaMemPool_t): cudaError_t <cimport,nodecl> end
global function cudaMallocFromPoolAsync(ptr: *pointer, size: csize, memPool: cudaMemPool_t, stream: cudaStream_t): cudaError_t <cimport,nodecl> end
global function cudaMemPoolExportToShareableHandle(shareableHandle: pointer, memPool: cudaMemPool_t, handleType: cudaMemAllocationHandleType, flags: cuint): cudaError_t <cimport,nodecl> end
global function cudaMemPoolImportFromShareableHandle(memPool: *cudaMemPool_t, shareableHandle: pointer, handleType: cudaMemAllocationHandleType, flags: cuint): cudaError_t <cimport,nodecl> end
global function cudaMemPoolExportPointer(exportData: *cudaMemPoolPtrExportData, ptr: pointer): cudaError_t <cimport,nodecl> end
global function cudaMemPoolImportPointer(ptr: *pointer, memPool: cudaMemPool_t, exportData: *cudaMemPoolPtrExportData): cudaError_t <cimport,nodecl> end
global function cudaPointerGetAttributes(attributes: *cudaPointerAttributes, ptr: pointer): cudaError_t <cimport,nodecl> end
global function cudaDeviceCanAccessPeer(canAccessPeer: *cint, device: cint, peerDevice: cint): cudaError_t <cimport,nodecl> end
global function cudaDeviceEnablePeerAccess(peerDevice: cint, flags: cuint): cudaError_t <cimport,nodecl> end
global function cudaDeviceDisablePeerAccess(peerDevice: cint): cudaError_t <cimport,nodecl> end
global function cudaGraphicsUnregisterResource(resource: cudaGraphicsResource_t): cudaError_t <cimport,nodecl> end
global function cudaGraphicsResourceSetMapFlags(resource: cudaGraphicsResource_t, flags: cuint): cudaError_t <cimport,nodecl> end
global function cudaGraphicsMapResources(count: cint, resources: *cudaGraphicsResource_t, stream: cudaStream_t): cudaError_t <cimport,nodecl> end
global function cudaGraphicsUnmapResources(count: cint, resources: *cudaGraphicsResource_t, stream: cudaStream_t): cudaError_t <cimport,nodecl> end
global function cudaGraphicsResourceGetMappedPointer(devPtr: *pointer, size: *csize, resource: cudaGraphicsResource_t): cudaError_t <cimport,nodecl> end
global function cudaGraphicsSubResourceGetMappedArray(array: *cudaArray_t, resource: cudaGraphicsResource_t, arrayIndex: cuint, mipLevel: cuint): cudaError_t <cimport,nodecl> end
global function cudaGraphicsResourceGetMappedMipmappedArray(mipmappedArray: *cudaMipmappedArray_t, resource: cudaGraphicsResource_t): cudaError_t <cimport,nodecl> end
global function cudaGetChannelDesc(desc: *cudaChannelFormatDesc, array: cudaArray_const_t): cudaError_t <cimport,nodecl> end
global function cudaCreateChannelDesc(x: cint, y: cint, z: cint, w: cint, f: cudaChannelFormatKind): cudaChannelFormatDesc <cimport,nodecl> end
global function cudaCreateTextureObject(pTexObject: *cudaTextureObject_t, pResDesc: *cudaResourceDesc, pTexDesc: *cudaTextureDesc, pResViewDesc: *cudaResourceViewDesc): cudaError_t <cimport,nodecl> end
global function cudaDestroyTextureObject(texObject: cudaTextureObject_t): cudaError_t <cimport,nodecl> end
global function cudaGetTextureObjectResourceDesc(pResDesc: *cudaResourceDesc, texObject: cudaTextureObject_t): cudaError_t <cimport,nodecl> end
global function cudaGetTextureObjectTextureDesc(pTexDesc: *cudaTextureDesc, texObject: cudaTextureObject_t): cudaError_t <cimport,nodecl> end
global function cudaGetTextureObjectResourceViewDesc(pResViewDesc: *cudaResourceViewDesc, texObject: cudaTextureObject_t): cudaError_t <cimport,nodecl> end
global function cudaCreateSurfaceObject(pSurfObject: *cudaSurfaceObject_t, pResDesc: *cudaResourceDesc): cudaError_t <cimport,nodecl> end
global function cudaDestroySurfaceObject(surfObject: cudaSurfaceObject_t): cudaError_t <cimport,nodecl> end
global function cudaGetSurfaceObjectResourceDesc(pResDesc: *cudaResourceDesc, surfObject: cudaSurfaceObject_t): cudaError_t <cimport,nodecl> end
global function cudaDriverGetVersion(driverVersion: *cint): cudaError_t <cimport,nodecl> end
global function cudaRuntimeGetVersion(runtimeVersion: *cint): cudaError_t <cimport,nodecl> end
global function cudaGraphCreate(pGraph: *cudaGraph_t, flags: cuint): cudaError_t <cimport,nodecl> end
global function cudaGraphAddKernelNode(pGraphNode: *cudaGraphNode_t, graph: cudaGraph_t, pDependencies: *cudaGraphNode_t, numDependencies: csize, pNodeParams: *cudaKernelNodeParams): cudaError_t <cimport,nodecl> end
global function cudaGraphKernelNodeGetParams(node: cudaGraphNode_t, pNodeParams: *cudaKernelNodeParams): cudaError_t <cimport,nodecl> end
global function cudaGraphKernelNodeSetParams(node: cudaGraphNode_t, pNodeParams: *cudaKernelNodeParams): cudaError_t <cimport,nodecl> end
global function cudaGraphKernelNodeCopyAttributes(hSrc: cudaGraphNode_t, hDst: cudaGraphNode_t): cudaError_t <cimport,nodecl> end
global function cudaGraphKernelNodeGetAttribute(hNode: cudaGraphNode_t, attr: cudaLaunchAttributeID, value_out: *cudaLaunchAttributeValue): cudaError_t <cimport,nodecl> end
global function cudaGraphKernelNodeSetAttribute(hNode: cudaGraphNode_t, attr: cudaLaunchAttributeID, value: *cudaLaunchAttributeValue): cudaError_t <cimport,nodecl> end
global function cudaGraphAddMemcpyNode(pGraphNode: *cudaGraphNode_t, graph: cudaGraph_t, pDependencies: *cudaGraphNode_t, numDependencies: csize, pCopyParams: *cudaMemcpy3DParms): cudaError_t <cimport,nodecl> end
global function cudaGraphAddMemcpyNodeToSymbol(pGraphNode: *cudaGraphNode_t, graph: cudaGraph_t, pDependencies: *cudaGraphNode_t, numDependencies: csize, symbol: pointer, src: pointer, count: csize, offset: csize, kind: cudaMemcpyKind): cudaError_t <cimport,nodecl> end
global function cudaGraphAddMemcpyNodeFromSymbol(pGraphNode: *cudaGraphNode_t, graph: cudaGraph_t, pDependencies: *cudaGraphNode_t, numDependencies: csize, dst: pointer, symbol: pointer, count: csize, offset: csize, kind: cudaMemcpyKind): cudaError_t <cimport,nodecl> end
global function cudaGraphAddMemcpyNode1D(pGraphNode: *cudaGraphNode_t, graph: cudaGraph_t, pDependencies: *cudaGraphNode_t, numDependencies: csize, dst: pointer, src: pointer, count: csize, kind: cudaMemcpyKind): cudaError_t <cimport,nodecl> end
global function cudaGraphMemcpyNodeGetParams(node: cudaGraphNode_t, pNodeParams: *cudaMemcpy3DParms): cudaError_t <cimport,nodecl> end
global function cudaGraphMemcpyNodeSetParams(node: cudaGraphNode_t, pNodeParams: *cudaMemcpy3DParms): cudaError_t <cimport,nodecl> end
global function cudaGraphMemcpyNodeSetParamsToSymbol(node: cudaGraphNode_t, symbol: pointer, src: pointer, count: csize, offset: csize, kind: cudaMemcpyKind): cudaError_t <cimport,nodecl> end
global function cudaGraphMemcpyNodeSetParamsFromSymbol(node: cudaGraphNode_t, dst: pointer, symbol: pointer, count: csize, offset: csize, kind: cudaMemcpyKind): cudaError_t <cimport,nodecl> end
global function cudaGraphMemcpyNodeSetParams1D(node: cudaGraphNode_t, dst: pointer, src: pointer, count: csize, kind: cudaMemcpyKind): cudaError_t <cimport,nodecl> end
global function cudaGraphAddMemsetNode(pGraphNode: *cudaGraphNode_t, graph: cudaGraph_t, pDependencies: *cudaGraphNode_t, numDependencies: csize, pMemsetParams: *cudaMemsetParams): cudaError_t <cimport,nodecl> end
global function cudaGraphMemsetNodeGetParams(node: cudaGraphNode_t, pNodeParams: *cudaMemsetParams): cudaError_t <cimport,nodecl> end
global function cudaGraphMemsetNodeSetParams(node: cudaGraphNode_t, pNodeParams: *cudaMemsetParams): cudaError_t <cimport,nodecl> end
global function cudaGraphAddHostNode(pGraphNode: *cudaGraphNode_t, graph: cudaGraph_t, pDependencies: *cudaGraphNode_t, numDependencies: csize, pNodeParams: *cudaHostNodeParams): cudaError_t <cimport,nodecl> end
global function cudaGraphHostNodeGetParams(node: cudaGraphNode_t, pNodeParams: *cudaHostNodeParams): cudaError_t <cimport,nodecl> end
global function cudaGraphHostNodeSetParams(node: cudaGraphNode_t, pNodeParams: *cudaHostNodeParams): cudaError_t <cimport,nodecl> end
global function cudaGraphAddChildGraphNode(pGraphNode: *cudaGraphNode_t, graph: cudaGraph_t, pDependencies: *cudaGraphNode_t, numDependencies: csize, childGraph: cudaGraph_t): cudaError_t <cimport,nodecl> end
global function cudaGraphChildGraphNodeGetGraph(node: cudaGraphNode_t, pGraph: *cudaGraph_t): cudaError_t <cimport,nodecl> end
global function cudaGraphAddEmptyNode(pGraphNode: *cudaGraphNode_t, graph: cudaGraph_t, pDependencies: *cudaGraphNode_t, numDependencies: csize): cudaError_t <cimport,nodecl> end
global function cudaGraphAddEventRecordNode(pGraphNode: *cudaGraphNode_t, graph: cudaGraph_t, pDependencies: *cudaGraphNode_t, numDependencies: csize, event: cudaEvent_t): cudaError_t <cimport,nodecl> end
global function cudaGraphEventRecordNodeGetEvent(node: cudaGraphNode_t, event_out: *cudaEvent_t): cudaError_t <cimport,nodecl> end
global function cudaGraphEventRecordNodeSetEvent(node: cudaGraphNode_t, event: cudaEvent_t): cudaError_t <cimport,nodecl> end
global function cudaGraphAddEventWaitNode(pGraphNode: *cudaGraphNode_t, graph: cudaGraph_t, pDependencies: *cudaGraphNode_t, numDependencies: csize, event: cudaEvent_t): cudaError_t <cimport,nodecl> end
global function cudaGraphEventWaitNodeGetEvent(node: cudaGraphNode_t, event_out: *cudaEvent_t): cudaError_t <cimport,nodecl> end
global function cudaGraphEventWaitNodeSetEvent(node: cudaGraphNode_t, event: cudaEvent_t): cudaError_t <cimport,nodecl> end
global function cudaGraphAddExternalSemaphoresSignalNode(pGraphNode: *cudaGraphNode_t, graph: cudaGraph_t, pDependencies: *cudaGraphNode_t, numDependencies: csize, nodeParams: *cudaExternalSemaphoreSignalNodeParams): cudaError_t <cimport,nodecl> end
global function cudaGraphExternalSemaphoresSignalNodeGetParams(hNode: cudaGraphNode_t, params_out: *cudaExternalSemaphoreSignalNodeParams): cudaError_t <cimport,nodecl> end
global function cudaGraphExternalSemaphoresSignalNodeSetParams(hNode: cudaGraphNode_t, nodeParams: *cudaExternalSemaphoreSignalNodeParams): cudaError_t <cimport,nodecl> end
global function cudaGraphAddExternalSemaphoresWaitNode(pGraphNode: *cudaGraphNode_t, graph: cudaGraph_t, pDependencies: *cudaGraphNode_t, numDependencies: csize, nodeParams: *cudaExternalSemaphoreWaitNodeParams): cudaError_t <cimport,nodecl> end
global function cudaGraphExternalSemaphoresWaitNodeGetParams(hNode: cudaGraphNode_t, params_out: *cudaExternalSemaphoreWaitNodeParams): cudaError_t <cimport,nodecl> end
global function cudaGraphExternalSemaphoresWaitNodeSetParams(hNode: cudaGraphNode_t, nodeParams: *cudaExternalSemaphoreWaitNodeParams): cudaError_t <cimport,nodecl> end
global function cudaGraphAddMemAllocNode(pGraphNode: *cudaGraphNode_t, graph: cudaGraph_t, pDependencies: *cudaGraphNode_t, numDependencies: csize, nodeParams: *cudaMemAllocNodeParams): cudaError_t <cimport,nodecl> end
global function cudaGraphMemAllocNodeGetParams(node: cudaGraphNode_t, params_out: *cudaMemAllocNodeParams): cudaError_t <cimport,nodecl> end
global function cudaGraphAddMemFreeNode(pGraphNode: *cudaGraphNode_t, graph: cudaGraph_t, pDependencies: *cudaGraphNode_t, numDependencies: csize, dptr: pointer): cudaError_t <cimport,nodecl> end
global function cudaGraphMemFreeNodeGetParams(node: cudaGraphNode_t, dptr_out: pointer): cudaError_t <cimport,nodecl> end
global function cudaDeviceGraphMemTrim(device: cint): cudaError_t <cimport,nodecl> end
global function cudaDeviceGetGraphMemAttribute(device: cint, attr: cudaGraphMemAttributeType, value: pointer): cudaError_t <cimport,nodecl> end
global function cudaDeviceSetGraphMemAttribute(device: cint, attr: cudaGraphMemAttributeType, value: pointer): cudaError_t <cimport,nodecl> end
global function cudaGraphClone(pGraphClone: *cudaGraph_t, originalGraph: cudaGraph_t): cudaError_t <cimport,nodecl> end
global function cudaGraphNodeFindInClone(pNode: *cudaGraphNode_t, originalNode: cudaGraphNode_t, clonedGraph: cudaGraph_t): cudaError_t <cimport,nodecl> end
global function cudaGraphNodeGetType(node: cudaGraphNode_t, pType: *cudaGraphNodeType): cudaError_t <cimport,nodecl> end
global function cudaGraphGetNodes(graph: cudaGraph_t, nodes: *cudaGraphNode_t, numNodes: *csize): cudaError_t <cimport,nodecl> end
global function cudaGraphGetRootNodes(graph: cudaGraph_t, pRootNodes: *cudaGraphNode_t, pNumRootNodes: *csize): cudaError_t <cimport,nodecl> end
global function cudaGraphGetEdges(graph: cudaGraph_t, from: *cudaGraphNode_t, to: *cudaGraphNode_t, numEdges: *csize): cudaError_t <cimport,nodecl> end
global function cudaGraphNodeGetDependencies(node: cudaGraphNode_t, pDependencies: *cudaGraphNode_t, pNumDependencies: *csize): cudaError_t <cimport,nodecl> end
global function cudaGraphNodeGetDependentNodes(node: cudaGraphNode_t, pDependentNodes: *cudaGraphNode_t, pNumDependentNodes: *csize): cudaError_t <cimport,nodecl> end
global function cudaGraphAddDependencies(graph: cudaGraph_t, from: *cudaGraphNode_t, to: *cudaGraphNode_t, numDependencies: csize): cudaError_t <cimport,nodecl> end
global function cudaGraphRemoveDependencies(graph: cudaGraph_t, from: *cudaGraphNode_t, to: *cudaGraphNode_t, numDependencies: csize): cudaError_t <cimport,nodecl> end
global function cudaGraphDestroyNode(node: cudaGraphNode_t): cudaError_t <cimport,nodecl> end
global function cudaGraphInstantiate(pGraphExec: *cudaGraphExec_t, graph: cudaGraph_t, flags: culonglong): cudaError_t <cimport,nodecl> end
global function cudaGraphInstantiateWithFlags(pGraphExec: *cudaGraphExec_t, graph: cudaGraph_t, flags: culonglong): cudaError_t <cimport,nodecl> end
global function cudaGraphInstantiateWithParams(pGraphExec: *cudaGraphExec_t, graph: cudaGraph_t, instantiateParams: *cudaGraphInstantiateParams): cudaError_t <cimport,nodecl> end
global function cudaGraphExecGetFlags(graphExec: cudaGraphExec_t, flags: *culonglong): cudaError_t <cimport,nodecl> end
global function cudaGraphExecKernelNodeSetParams(hGraphExec: cudaGraphExec_t, node: cudaGraphNode_t, pNodeParams: *cudaKernelNodeParams): cudaError_t <cimport,nodecl> end
global function cudaGraphExecMemcpyNodeSetParams(hGraphExec: cudaGraphExec_t, node: cudaGraphNode_t, pNodeParams: *cudaMemcpy3DParms): cudaError_t <cimport,nodecl> end
global function cudaGraphExecMemcpyNodeSetParamsToSymbol(hGraphExec: cudaGraphExec_t, node: cudaGraphNode_t, symbol: pointer, src: pointer, count: csize, offset: csize, kind: cudaMemcpyKind): cudaError_t <cimport,nodecl> end
global function cudaGraphExecMemcpyNodeSetParamsFromSymbol(hGraphExec: cudaGraphExec_t, node: cudaGraphNode_t, dst: pointer, symbol: pointer, count: csize, offset: csize, kind: cudaMemcpyKind): cudaError_t <cimport,nodecl> end
global function cudaGraphExecMemcpyNodeSetParams1D(hGraphExec: cudaGraphExec_t, node: cudaGraphNode_t, dst: pointer, src: pointer, count: csize, kind: cudaMemcpyKind): cudaError_t <cimport,nodecl> end
global function cudaGraphExecMemsetNodeSetParams(hGraphExec: cudaGraphExec_t, node: cudaGraphNode_t, pNodeParams: *cudaMemsetParams): cudaError_t <cimport,nodecl> end
global function cudaGraphExecHostNodeSetParams(hGraphExec: cudaGraphExec_t, node: cudaGraphNode_t, pNodeParams: *cudaHostNodeParams): cudaError_t <cimport,nodecl> end
global function cudaGraphExecChildGraphNodeSetParams(hGraphExec: cudaGraphExec_t, node: cudaGraphNode_t, childGraph: cudaGraph_t): cudaError_t <cimport,nodecl> end
global function cudaGraphExecEventRecordNodeSetEvent(hGraphExec: cudaGraphExec_t, hNode: cudaGraphNode_t, event: cudaEvent_t): cudaError_t <cimport,nodecl> end
global function cudaGraphExecEventWaitNodeSetEvent(hGraphExec: cudaGraphExec_t, hNode: cudaGraphNode_t, event: cudaEvent_t): cudaError_t <cimport,nodecl> end
global function cudaGraphExecExternalSemaphoresSignalNodeSetParams(hGraphExec: cudaGraphExec_t, hNode: cudaGraphNode_t, nodeParams: *cudaExternalSemaphoreSignalNodeParams): cudaError_t <cimport,nodecl> end
global function cudaGraphExecExternalSemaphoresWaitNodeSetParams(hGraphExec: cudaGraphExec_t, hNode: cudaGraphNode_t, nodeParams: *cudaExternalSemaphoreWaitNodeParams): cudaError_t <cimport,nodecl> end
global function cudaGraphNodeSetEnabled(hGraphExec: cudaGraphExec_t, hNode: cudaGraphNode_t, isEnabled: cuint): cudaError_t <cimport,nodecl> end
global function cudaGraphNodeGetEnabled(hGraphExec: cudaGraphExec_t, hNode: cudaGraphNode_t, isEnabled: *cuint): cudaError_t <cimport,nodecl> end
global function cudaGraphExecUpdate(hGraphExec: cudaGraphExec_t, hGraph: cudaGraph_t, resultInfo: *cudaGraphExecUpdateResultInfo): cudaError_t <cimport,nodecl> end
global function cudaGraphUpload(graphExec: cudaGraphExec_t, stream: cudaStream_t): cudaError_t <cimport,nodecl> end
global function cudaGraphLaunch(graphExec: cudaGraphExec_t, stream: cudaStream_t): cudaError_t <cimport,nodecl> end
global function cudaGraphExecDestroy(graphExec: cudaGraphExec_t): cudaError_t <cimport,nodecl> end
global function cudaGraphDestroy(graph: cudaGraph_t): cudaError_t <cimport,nodecl> end
global function cudaGraphDebugDotPrint(graph: cudaGraph_t, path: cstring, flags: cuint): cudaError_t <cimport,nodecl> end
global function cudaUserObjectCreate(object_out: *cudaUserObject_t, ptr: pointer, destroy: cudaHostFn_t, initialRefcount: cuint, flags: cuint): cudaError_t <cimport,nodecl> end
global function cudaUserObjectRetain(object: cudaUserObject_t, count: cuint): cudaError_t <cimport,nodecl> end
global function cudaUserObjectRelease(object: cudaUserObject_t, count: cuint): cudaError_t <cimport,nodecl> end
global function cudaGraphRetainUserObject(graph: cudaGraph_t, object: cudaUserObject_t, count: cuint, flags: cuint): cudaError_t <cimport,nodecl> end
global function cudaGraphReleaseUserObject(graph: cudaGraph_t, object: cudaUserObject_t, count: cuint): cudaError_t <cimport,nodecl> end
global function cudaGetDriverEntryPoint(symbol: cstring, funcPtr: *pointer, flags: culonglong, driverStatus: *cudaDriverEntryPointQueryResult): cudaError_t <cimport,nodecl> end
global function cudaGetExportTable(ppExportTable: *pointer, pExportTableId: *cudaUUID_t): cudaError_t <cimport,nodecl> end
global function cudaGetFuncBySymbol(functionPtr: *cudaFunction_t, symbolPtr: pointer): cudaError_t <cimport,nodecl> end
global function cudaGetKernel(kernelPtr: *cudaKernel_t, entryFuncAddr: pointer): cudaError_t <cimport,nodecl> end
global function cublasCreate_v2(handle: *cublasHandle_t): cublasStatus_t <cimport,nodecl> end
global function cublasDestroy_v2(handle: cublasHandle_t): cublasStatus_t <cimport,nodecl> end
global function cublasGetVersion_v2(handle: cublasHandle_t, version: *cint): cublasStatus_t <cimport,nodecl> end
global function cublasGetProperty(type: libraryPropertyType_t, value: *cint): cublasStatus_t <cimport,nodecl> end
global function cublasGetCudartVersion(): csize <cimport,nodecl> end
global function cublasSetWorkspace_v2(handle: cublasHandle_t, workspace: pointer, workspaceSizeInBytes: csize): cublasStatus_t <cimport,nodecl> end
global function cublasSetStream_v2(handle: cublasHandle_t, streamId: cudaStream_t): cublasStatus_t <cimport,nodecl> end
global function cublasGetStream_v2(handle: cublasHandle_t, streamId: *cudaStream_t): cublasStatus_t <cimport,nodecl> end
global function cublasGetPointerMode_v2(handle: cublasHandle_t, mode: *cublasPointerMode_t): cublasStatus_t <cimport,nodecl> end
global function cublasSetPointerMode_v2(handle: cublasHandle_t, mode: cublasPointerMode_t): cublasStatus_t <cimport,nodecl> end
global function cublasGetAtomicsMode(handle: cublasHandle_t, mode: *cublasAtomicsMode_t): cublasStatus_t <cimport,nodecl> end
global function cublasSetAtomicsMode(handle: cublasHandle_t, mode: cublasAtomicsMode_t): cublasStatus_t <cimport,nodecl> end
global function cublasGetMathMode(handle: cublasHandle_t, mode: *cublasMath_t): cublasStatus_t <cimport,nodecl> end
global function cublasSetMathMode(handle: cublasHandle_t, mode: cublasMath_t): cublasStatus_t <cimport,nodecl> end
global function cublasGetSmCountTarget(handle: cublasHandle_t, smCountTarget: *cint): cublasStatus_t <cimport,nodecl> end
global function cublasSetSmCountTarget(handle: cublasHandle_t, smCountTarget: cint): cublasStatus_t <cimport,nodecl> end
global function cublasGetStatusName(status: cublasStatus_t): cstring <cimport,nodecl> end
global function cublasGetStatusString(status: cublasStatus_t): cstring <cimport,nodecl> end
global function cublasLoggerConfigure(logIsOn: cint, logToStdOut: cint, logToStdErr: cint, logFileName: cstring): cublasStatus_t <cimport,nodecl> end
global function cublasSetLoggerCallback(userCallback: cublasLogCallback): cublasStatus_t <cimport,nodecl> end
global function cublasGetLoggerCallback(userCallback: *cublasLogCallback): cublasStatus_t <cimport,nodecl> end
global function cublasSetVector(n: cint, elemSize: cint, x: pointer, incx: cint, devicePtr: pointer, incy: cint): cublasStatus_t <cimport,nodecl> end
global function cublasSetVector_64(n: int64, elemSize: int64, x: pointer, incx: int64, devicePtr: pointer, incy: int64): cublasStatus_t <cimport,nodecl> end
global function cublasGetVector(n: cint, elemSize: cint, x: pointer, incx: cint, y: pointer, incy: cint): cublasStatus_t <cimport,nodecl> end
global function cublasGetVector_64(n: int64, elemSize: int64, x: pointer, incx: int64, y: pointer, incy: int64): cublasStatus_t <cimport,nodecl> end
global function cublasSetMatrix(rows: cint, cols: cint, elemSize: cint, A: pointer, lda: cint, B: pointer, ldb: cint): cublasStatus_t <cimport,nodecl> end
global function cublasSetMatrix_64(rows: int64, cols: int64, elemSize: int64, A: pointer, lda: int64, B: pointer, ldb: int64): cublasStatus_t <cimport,nodecl> end
global function cublasGetMatrix(rows: cint, cols: cint, elemSize: cint, A: pointer, lda: cint, B: pointer, ldb: cint): cublasStatus_t <cimport,nodecl> end
global function cublasGetMatrix_64(rows: int64, cols: int64, elemSize: int64, A: pointer, lda: int64, B: pointer, ldb: int64): cublasStatus_t <cimport,nodecl> end
global function cublasSetVectorAsync(n: cint, elemSize: cint, hostPtr: pointer, incx: cint, devicePtr: pointer, incy: cint, stream: cudaStream_t): cublasStatus_t <cimport,nodecl> end
global function cublasSetVectorAsync_64(n: int64, elemSize: int64, hostPtr: pointer, incx: int64, devicePtr: pointer, incy: int64, stream: cudaStream_t): cublasStatus_t <cimport,nodecl> end
global function cublasGetVectorAsync(n: cint, elemSize: cint, devicePtr: pointer, incx: cint, hostPtr: pointer, incy: cint, stream: cudaStream_t): cublasStatus_t <cimport,nodecl> end
global function cublasGetVectorAsync_64(n: int64, elemSize: int64, devicePtr: pointer, incx: int64, hostPtr: pointer, incy: int64, stream: cudaStream_t): cublasStatus_t <cimport,nodecl> end
global function cublasSetMatrixAsync(rows: cint, cols: cint, elemSize: cint, A: pointer, lda: cint, B: pointer, ldb: cint, stream: cudaStream_t): cublasStatus_t <cimport,nodecl> end
global function cublasSetMatrixAsync_64(rows: int64, cols: int64, elemSize: int64, A: pointer, lda: int64, B: pointer, ldb: int64, stream: cudaStream_t): cublasStatus_t <cimport,nodecl> end
global function cublasGetMatrixAsync(rows: cint, cols: cint, elemSize: cint, A: pointer, lda: cint, B: pointer, ldb: cint, stream: cudaStream_t): cublasStatus_t <cimport,nodecl> end
global function cublasGetMatrixAsync_64(rows: int64, cols: int64, elemSize: int64, A: pointer, lda: int64, B: pointer, ldb: int64, stream: cudaStream_t): cublasStatus_t <cimport,nodecl> end
global function cublasXerbla(srName: cstring, info: cint): void <cimport,nodecl> end
global function cublasNrm2Ex(handle: cublasHandle_t, n: cint, x: pointer, xType: cudaDataType, incx: cint, result: pointer, resultType: cudaDataType, executionType: cudaDataType): cublasStatus_t <cimport,nodecl> end
global function cublasNrm2Ex_64(handle: cublasHandle_t, n: int64, x: pointer, xType: cudaDataType, incx: int64, result: pointer, resultType: cudaDataType, executionType: cudaDataType): cublasStatus_t <cimport,nodecl> end
global function cublasSnrm2_v2(handle: cublasHandle_t, n: cint, x: *float32, incx: cint, result: *float32): cublasStatus_t <cimport,nodecl> end
global function cublasSnrm2_v2_64(handle: cublasHandle_t, n: int64, x: *float32, incx: int64, result: *float32): cublasStatus_t <cimport,nodecl> end
global function cublasDnrm2_v2(handle: cublasHandle_t, n: cint, x: *float64, incx: cint, result: *float64): cublasStatus_t <cimport,nodecl> end
global function cublasDnrm2_v2_64(handle: cublasHandle_t, n: int64, x: *float64, incx: int64, result: *float64): cublasStatus_t <cimport,nodecl> end
global function cublasScnrm2_v2(handle: cublasHandle_t, n: cint, x: *cuComplex, incx: cint, result: *float32): cublasStatus_t <cimport,nodecl> end
global function cublasScnrm2_v2_64(handle: cublasHandle_t, n: int64, x: *cuComplex, incx: int64, result: *float32): cublasStatus_t <cimport,nodecl> end
global function cublasDznrm2_v2(handle: cublasHandle_t, n: cint, x: *cuDoubleComplex, incx: cint, result: *float64): cublasStatus_t <cimport,nodecl> end
global function cublasDznrm2_v2_64(handle: cublasHandle_t, n: int64, x: *cuDoubleComplex, incx: int64, result: *float64): cublasStatus_t <cimport,nodecl> end
global function cublasDotEx(handle: cublasHandle_t, n: cint, x: pointer, xType: cudaDataType, incx: cint, y: pointer, yType: cudaDataType, incy: cint, result: pointer, resultType: cudaDataType, executionType: cudaDataType): cublasStatus_t <cimport,nodecl> end
global function cublasDotEx_64(handle: cublasHandle_t, n: int64, x: pointer, xType: cudaDataType, incx: int64, y: pointer, yType: cudaDataType, incy: int64, result: pointer, resultType: cudaDataType, executionType: cudaDataType): cublasStatus_t <cimport,nodecl> end
global function cublasDotcEx(handle: cublasHandle_t, n: cint, x: pointer, xType: cudaDataType, incx: cint, y: pointer, yType: cudaDataType, incy: cint, result: pointer, resultType: cudaDataType, executionType: cudaDataType): cublasStatus_t <cimport,nodecl> end
global function cublasDotcEx_64(handle: cublasHandle_t, n: int64, x: pointer, xType: cudaDataType, incx: int64, y: pointer, yType: cudaDataType, incy: int64, result: pointer, resultType: cudaDataType, executionType: cudaDataType): cublasStatus_t <cimport,nodecl> end
global function cublasSdot_v2(handle: cublasHandle_t, n: cint, x: *float32, incx: cint, y: *float32, incy: cint, result: *float32): cublasStatus_t <cimport,nodecl> end
global function cublasSdot_v2_64(handle: cublasHandle_t, n: int64, x: *float32, incx: int64, y: *float32, incy: int64, result: *float32): cublasStatus_t <cimport,nodecl> end
global function cublasDdot_v2(handle: cublasHandle_t, n: cint, x: *float64, incx: cint, y: *float64, incy: cint, result: *float64): cublasStatus_t <cimport,nodecl> end
global function cublasDdot_v2_64(handle: cublasHandle_t, n: int64, x: *float64, incx: int64, y: *float64, incy: int64, result: *float64): cublasStatus_t <cimport,nodecl> end
global function cublasCdotu_v2(handle: cublasHandle_t, n: cint, x: *cuComplex, incx: cint, y: *cuComplex, incy: cint, result: *cuComplex): cublasStatus_t <cimport,nodecl> end
global function cublasCdotu_v2_64(handle: cublasHandle_t, n: int64, x: *cuComplex, incx: int64, y: *cuComplex, incy: int64, result: *cuComplex): cublasStatus_t <cimport,nodecl> end
global function cublasCdotc_v2(handle: cublasHandle_t, n: cint, x: *cuComplex, incx: cint, y: *cuComplex, incy: cint, result: *cuComplex): cublasStatus_t <cimport,nodecl> end
global function cublasCdotc_v2_64(handle: cublasHandle_t, n: int64, x: *cuComplex, incx: int64, y: *cuComplex, incy: int64, result: *cuComplex): cublasStatus_t <cimport,nodecl> end
global function cublasZdotu_v2(handle: cublasHandle_t, n: cint, x: *cuDoubleComplex, incx: cint, y: *cuDoubleComplex, incy: cint, result: *cuDoubleComplex): cublasStatus_t <cimport,nodecl> end
global function cublasZdotu_v2_64(handle: cublasHandle_t, n: int64, x: *cuDoubleComplex, incx: int64, y: *cuDoubleComplex, incy: int64, result: *cuDoubleComplex): cublasStatus_t <cimport,nodecl> end
global function cublasZdotc_v2(handle: cublasHandle_t, n: cint, x: *cuDoubleComplex, incx: cint, y: *cuDoubleComplex, incy: cint, result: *cuDoubleComplex): cublasStatus_t <cimport,nodecl> end
global function cublasZdotc_v2_64(handle: cublasHandle_t, n: int64, x: *cuDoubleComplex, incx: int64, y: *cuDoubleComplex, incy: int64, result: *cuDoubleComplex): cublasStatus_t <cimport,nodecl> end
global function cublasScalEx(handle: cublasHandle_t, n: cint, alpha: pointer, alphaType: cudaDataType, x: pointer, xType: cudaDataType, incx: cint, executionType: cudaDataType): cublasStatus_t <cimport,nodecl> end
global function cublasScalEx_64(handle: cublasHandle_t, n: int64, alpha: pointer, alphaType: cudaDataType, x: pointer, xType: cudaDataType, incx: int64, executionType: cudaDataType): cublasStatus_t <cimport,nodecl> end
global function cublasSscal_v2(handle: cublasHandle_t, n: cint, alpha: *float32, x: *float32, incx: cint): cublasStatus_t <cimport,nodecl> end
global function cublasSscal_v2_64(handle: cublasHandle_t, n: int64, alpha: *float32, x: *float32, incx: int64): cublasStatus_t <cimport,nodecl> end
global function cublasDscal_v2(handle: cublasHandle_t, n: cint, alpha: *float64, x: *float64, incx: cint): cublasStatus_t <cimport,nodecl> end
global function cublasDscal_v2_64(handle: cublasHandle_t, n: int64, alpha: *float64, x: *float64, incx: int64): cublasStatus_t <cimport,nodecl> end
global function cublasCscal_v2(handle: cublasHandle_t, n: cint, alpha: *cuComplex, x: *cuComplex, incx: cint): cublasStatus_t <cimport,nodecl> end
global function cublasCscal_v2_64(handle: cublasHandle_t, n: int64, alpha: *cuComplex, x: *cuComplex, incx: int64): cublasStatus_t <cimport,nodecl> end
global function cublasCsscal_v2(handle: cublasHandle_t, n: cint, alpha: *float32, x: *cuComplex, incx: cint): cublasStatus_t <cimport,nodecl> end
global function cublasCsscal_v2_64(handle: cublasHandle_t, n: int64, alpha: *float32, x: *cuComplex, incx: int64): cublasStatus_t <cimport,nodecl> end
global function cublasZscal_v2(handle: cublasHandle_t, n: cint, alpha: *cuDoubleComplex, x: *cuDoubleComplex, incx: cint): cublasStatus_t <cimport,nodecl> end
global function cublasZscal_v2_64(handle: cublasHandle_t, n: int64, alpha: *cuDoubleComplex, x: *cuDoubleComplex, incx: int64): cublasStatus_t <cimport,nodecl> end
global function cublasZdscal_v2(handle: cublasHandle_t, n: cint, alpha: *float64, x: *cuDoubleComplex, incx: cint): cublasStatus_t <cimport,nodecl> end
global function cublasZdscal_v2_64(handle: cublasHandle_t, n: int64, alpha: *float64, x: *cuDoubleComplex, incx: int64): cublasStatus_t <cimport,nodecl> end
global function cublasAxpyEx(handle: cublasHandle_t, n: cint, alpha: pointer, alphaType: cudaDataType, x: pointer, xType: cudaDataType, incx: cint, y: pointer, yType: cudaDataType, incy: cint, executiontype: cudaDataType): cublasStatus_t <cimport,nodecl> end
global function cublasAxpyEx_64(handle: cublasHandle_t, n: int64, alpha: pointer, alphaType: cudaDataType, x: pointer, xType: cudaDataType, incx: int64, y: pointer, yType: cudaDataType, incy: int64, executiontype: cudaDataType): cublasStatus_t <cimport,nodecl> end
global function cublasSaxpy_v2(handle: cublasHandle_t, n: cint, alpha: *float32, x: *float32, incx: cint, y: *float32, incy: cint): cublasStatus_t <cimport,nodecl> end
global function cublasSaxpy_v2_64(handle: cublasHandle_t, n: int64, alpha: *float32, x: *float32, incx: int64, y: *float32, incy: int64): cublasStatus_t <cimport,nodecl> end
global function cublasDaxpy_v2(handle: cublasHandle_t, n: cint, alpha: *float64, x: *float64, incx: cint, y: *float64, incy: cint): cublasStatus_t <cimport,nodecl> end
global function cublasDaxpy_v2_64(handle: cublasHandle_t, n: int64, alpha: *float64, x: *float64, incx: int64, y: *float64, incy: int64): cublasStatus_t <cimport,nodecl> end
global function cublasCaxpy_v2(handle: cublasHandle_t, n: cint, alpha: *cuComplex, x: *cuComplex, incx: cint, y: *cuComplex, incy: cint): cublasStatus_t <cimport,nodecl> end
global function cublasCaxpy_v2_64(handle: cublasHandle_t, n: int64, alpha: *cuComplex, x: *cuComplex, incx: int64, y: *cuComplex, incy: int64): cublasStatus_t <cimport,nodecl> end
global function cublasZaxpy_v2(handle: cublasHandle_t, n: cint, alpha: *cuDoubleComplex, x: *cuDoubleComplex, incx: cint, y: *cuDoubleComplex, incy: cint): cublasStatus_t <cimport,nodecl> end
global function cublasZaxpy_v2_64(handle: cublasHandle_t, n: int64, alpha: *cuDoubleComplex, x: *cuDoubleComplex, incx: int64, y: *cuDoubleComplex, incy: int64): cublasStatus_t <cimport,nodecl> end
global function cublasCopyEx(handle: cublasHandle_t, n: cint, x: pointer, xType: cudaDataType, incx: cint, y: pointer, yType: cudaDataType, incy: cint): cublasStatus_t <cimport,nodecl> end
global function cublasCopyEx_64(handle: cublasHandle_t, n: int64, x: pointer, xType: cudaDataType, incx: int64, y: pointer, yType: cudaDataType, incy: int64): cublasStatus_t <cimport,nodecl> end
global function cublasScopy_v2(handle: cublasHandle_t, n: cint, x: *float32, incx: cint, y: *float32, incy: cint): cublasStatus_t <cimport,nodecl> end
global function cublasScopy_v2_64(handle: cublasHandle_t, n: int64, x: *float32, incx: int64, y: *float32, incy: int64): cublasStatus_t <cimport,nodecl> end
global function cublasDcopy_v2(handle: cublasHandle_t, n: cint, x: *float64, incx: cint, y: *float64, incy: cint): cublasStatus_t <cimport,nodecl> end
global function cublasDcopy_v2_64(handle: cublasHandle_t, n: int64, x: *float64, incx: int64, y: *float64, incy: int64): cublasStatus_t <cimport,nodecl> end
global function cublasCcopy_v2(handle: cublasHandle_t, n: cint, x: *cuComplex, incx: cint, y: *cuComplex, incy: cint): cublasStatus_t <cimport,nodecl> end
global function cublasCcopy_v2_64(handle: cublasHandle_t, n: int64, x: *cuComplex, incx: int64, y: *cuComplex, incy: int64): cublasStatus_t <cimport,nodecl> end
global function cublasZcopy_v2(handle: cublasHandle_t, n: cint, x: *cuDoubleComplex, incx: cint, y: *cuDoubleComplex, incy: cint): cublasStatus_t <cimport,nodecl> end
global function cublasZcopy_v2_64(handle: cublasHandle_t, n: int64, x: *cuDoubleComplex, incx: int64, y: *cuDoubleComplex, incy: int64): cublasStatus_t <cimport,nodecl> end
global function cublasSswap_v2(handle: cublasHandle_t, n: cint, x: *float32, incx: cint, y: *float32, incy: cint): cublasStatus_t <cimport,nodecl> end
global function cublasSswap_v2_64(handle: cublasHandle_t, n: int64, x: *float32, incx: int64, y: *float32, incy: int64): cublasStatus_t <cimport,nodecl> end
global function cublasDswap_v2(handle: cublasHandle_t, n: cint, x: *float64, incx: cint, y: *float64, incy: cint): cublasStatus_t <cimport,nodecl> end
global function cublasDswap_v2_64(handle: cublasHandle_t, n: int64, x: *float64, incx: int64, y: *float64, incy: int64): cublasStatus_t <cimport,nodecl> end
global function cublasCswap_v2(handle: cublasHandle_t, n: cint, x: *cuComplex, incx: cint, y: *cuComplex, incy: cint): cublasStatus_t <cimport,nodecl> end
global function cublasCswap_v2_64(handle: cublasHandle_t, n: int64, x: *cuComplex, incx: int64, y: *cuComplex, incy: int64): cublasStatus_t <cimport,nodecl> end
global function cublasZswap_v2(handle: cublasHandle_t, n: cint, x: *cuDoubleComplex, incx: cint, y: *cuDoubleComplex, incy: cint): cublasStatus_t <cimport,nodecl> end
global function cublasZswap_v2_64(handle: cublasHandle_t, n: int64, x: *cuDoubleComplex, incx: int64, y: *cuDoubleComplex, incy: int64): cublasStatus_t <cimport,nodecl> end
global function cublasSwapEx(handle: cublasHandle_t, n: cint, x: pointer, xType: cudaDataType, incx: cint, y: pointer, yType: cudaDataType, incy: cint): cublasStatus_t <cimport,nodecl> end
global function cublasSwapEx_64(handle: cublasHandle_t, n: int64, x: pointer, xType: cudaDataType, incx: int64, y: pointer, yType: cudaDataType, incy: int64): cublasStatus_t <cimport,nodecl> end
global function cublasIsamax_v2(handle: cublasHandle_t, n: cint, x: *float32, incx: cint, result: *cint): cublasStatus_t <cimport,nodecl> end
global function cublasIsamax_v2_64(handle: cublasHandle_t, n: int64, x: *float32, incx: int64, result: *int64): cublasStatus_t <cimport,nodecl> end
global function cublasIdamax_v2(handle: cublasHandle_t, n: cint, x: *float64, incx: cint, result: *cint): cublasStatus_t <cimport,nodecl> end
global function cublasIdamax_v2_64(handle: cublasHandle_t, n: int64, x: *float64, incx: int64, result: *int64): cublasStatus_t <cimport,nodecl> end
global function cublasIcamax_v2(handle: cublasHandle_t, n: cint, x: *cuComplex, incx: cint, result: *cint): cublasStatus_t <cimport,nodecl> end
global function cublasIcamax_v2_64(handle: cublasHandle_t, n: int64, x: *cuComplex, incx: int64, result: *int64): cublasStatus_t <cimport,nodecl> end
global function cublasIzamax_v2(handle: cublasHandle_t, n: cint, x: *cuDoubleComplex, incx: cint, result: *cint): cublasStatus_t <cimport,nodecl> end
global function cublasIzamax_v2_64(handle: cublasHandle_t, n: int64, x: *cuDoubleComplex, incx: int64, result: *int64): cublasStatus_t <cimport,nodecl> end
global function cublasIamaxEx(handle: cublasHandle_t, n: cint, x: pointer, xType: cudaDataType, incx: cint, result: *cint): cublasStatus_t <cimport,nodecl> end
global function cublasIamaxEx_64(handle: cublasHandle_t, n: int64, x: pointer, xType: cudaDataType, incx: int64, result: *int64): cublasStatus_t <cimport,nodecl> end
global function cublasIsamin_v2(handle: cublasHandle_t, n: cint, x: *float32, incx: cint, result: *cint): cublasStatus_t <cimport,nodecl> end
global function cublasIsamin_v2_64(handle: cublasHandle_t, n: int64, x: *float32, incx: int64, result: *int64): cublasStatus_t <cimport,nodecl> end
global function cublasIdamin_v2(handle: cublasHandle_t, n: cint, x: *float64, incx: cint, result: *cint): cublasStatus_t <cimport,nodecl> end
global function cublasIdamin_v2_64(handle: cublasHandle_t, n: int64, x: *float64, incx: int64, result: *int64): cublasStatus_t <cimport,nodecl> end
global function cublasIcamin_v2(handle: cublasHandle_t, n: cint, x: *cuComplex, incx: cint, result: *cint): cublasStatus_t <cimport,nodecl> end
global function cublasIcamin_v2_64(handle: cublasHandle_t, n: int64, x: *cuComplex, incx: int64, result: *int64): cublasStatus_t <cimport,nodecl> end
global function cublasIzamin_v2(handle: cublasHandle_t, n: cint, x: *cuDoubleComplex, incx: cint, result: *cint): cublasStatus_t <cimport,nodecl> end
global function cublasIzamin_v2_64(handle: cublasHandle_t, n: int64, x: *cuDoubleComplex, incx: int64, result: *int64): cublasStatus_t <cimport,nodecl> end
global function cublasIaminEx(handle: cublasHandle_t, n: cint, x: pointer, xType: cudaDataType, incx: cint, result: *cint): cublasStatus_t <cimport,nodecl> end
global function cublasIaminEx_64(handle: cublasHandle_t, n: int64, x: pointer, xType: cudaDataType, incx: int64, result: *int64): cublasStatus_t <cimport,nodecl> end
global function cublasAsumEx(handle: cublasHandle_t, n: cint, x: pointer, xType: cudaDataType, incx: cint, result: pointer, resultType: cudaDataType, executiontype: cudaDataType): cublasStatus_t <cimport,nodecl> end
global function cublasAsumEx_64(handle: cublasHandle_t, n: int64, x: pointer, xType: cudaDataType, incx: int64, result: pointer, resultType: cudaDataType, executiontype: cudaDataType): cublasStatus_t <cimport,nodecl> end
global function cublasSasum_v2(handle: cublasHandle_t, n: cint, x: *float32, incx: cint, result: *float32): cublasStatus_t <cimport,nodecl> end
global function cublasSasum_v2_64(handle: cublasHandle_t, n: int64, x: *float32, incx: int64, result: *float32): cublasStatus_t <cimport,nodecl> end
global function cublasDasum_v2(handle: cublasHandle_t, n: cint, x: *float64, incx: cint, result: *float64): cublasStatus_t <cimport,nodecl> end
global function cublasDasum_v2_64(handle: cublasHandle_t, n: int64, x: *float64, incx: int64, result: *float64): cublasStatus_t <cimport,nodecl> end
global function cublasScasum_v2(handle: cublasHandle_t, n: cint, x: *cuComplex, incx: cint, result: *float32): cublasStatus_t <cimport,nodecl> end
global function cublasScasum_v2_64(handle: cublasHandle_t, n: int64, x: *cuComplex, incx: int64, result: *float32): cublasStatus_t <cimport,nodecl> end
global function cublasDzasum_v2(handle: cublasHandle_t, n: cint, x: *cuDoubleComplex, incx: cint, result: *float64): cublasStatus_t <cimport,nodecl> end
global function cublasDzasum_v2_64(handle: cublasHandle_t, n: int64, x: *cuDoubleComplex, incx: int64, result: *float64): cublasStatus_t <cimport,nodecl> end
global function cublasSrot_v2(handle: cublasHandle_t, n: cint, x: *float32, incx: cint, y: *float32, incy: cint, c: *float32, s: *float32): cublasStatus_t <cimport,nodecl> end
global function cublasSrot_v2_64(handle: cublasHandle_t, n: int64, x: *float32, incx: int64, y: *float32, incy: int64, c: *float32, s: *float32): cublasStatus_t <cimport,nodecl> end
global function cublasDrot_v2(handle: cublasHandle_t, n: cint, x: *float64, incx: cint, y: *float64, incy: cint, c: *float64, s: *float64): cublasStatus_t <cimport,nodecl> end
global function cublasDrot_v2_64(handle: cublasHandle_t, n: int64, x: *float64, incx: int64, y: *float64, incy: int64, c: *float64, s: *float64): cublasStatus_t <cimport,nodecl> end
global function cublasCrot_v2(handle: cublasHandle_t, n: cint, x: *cuComplex, incx: cint, y: *cuComplex, incy: cint, c: *float32, s: *cuComplex): cublasStatus_t <cimport,nodecl> end
global function cublasCrot_v2_64(handle: cublasHandle_t, n: int64, x: *cuComplex, incx: int64, y: *cuComplex, incy: int64, c: *float32, s: *cuComplex): cublasStatus_t <cimport,nodecl> end
global function cublasCsrot_v2(handle: cublasHandle_t, n: cint, x: *cuComplex, incx: cint, y: *cuComplex, incy: cint, c: *float32, s: *float32): cublasStatus_t <cimport,nodecl> end
global function cublasCsrot_v2_64(handle: cublasHandle_t, n: int64, x: *cuComplex, incx: int64, y: *cuComplex, incy: int64, c: *float32, s: *float32): cublasStatus_t <cimport,nodecl> end
global function cublasZrot_v2(handle: cublasHandle_t, n: cint, x: *cuDoubleComplex, incx: cint, y: *cuDoubleComplex, incy: cint, c: *float64, s: *cuDoubleComplex): cublasStatus_t <cimport,nodecl> end
global function cublasZrot_v2_64(handle: cublasHandle_t, n: int64, x: *cuDoubleComplex, incx: int64, y: *cuDoubleComplex, incy: int64, c: *float64, s: *cuDoubleComplex): cublasStatus_t <cimport,nodecl> end
global function cublasZdrot_v2(handle: cublasHandle_t, n: cint, x: *cuDoubleComplex, incx: cint, y: *cuDoubleComplex, incy: cint, c: *float64, s: *float64): cublasStatus_t <cimport,nodecl> end
global function cublasZdrot_v2_64(handle: cublasHandle_t, n: int64, x: *cuDoubleComplex, incx: int64, y: *cuDoubleComplex, incy: int64, c: *float64, s: *float64): cublasStatus_t <cimport,nodecl> end
global function cublasRotEx(handle: cublasHandle_t, n: cint, x: pointer, xType: cudaDataType, incx: cint, y: pointer, yType: cudaDataType, incy: cint, c: pointer, s: pointer, csType: cudaDataType, executiontype: cudaDataType): cublasStatus_t <cimport,nodecl> end
global function cublasRotEx_64(handle: cublasHandle_t, n: int64, x: pointer, xType: cudaDataType, incx: int64, y: pointer, yType: cudaDataType, incy: int64, c: pointer, s: pointer, csType: cudaDataType, executiontype: cudaDataType): cublasStatus_t <cimport,nodecl> end
global function cublasSrotg_v2(handle: cublasHandle_t, a: *float32, b: *float32, c: *float32, s: *float32): cublasStatus_t <cimport,nodecl> end
global function cublasDrotg_v2(handle: cublasHandle_t, a: *float64, b: *float64, c: *float64, s: *float64): cublasStatus_t <cimport,nodecl> end
global function cublasCrotg_v2(handle: cublasHandle_t, a: *cuComplex, b: *cuComplex, c: *float32, s: *cuComplex): cublasStatus_t <cimport,nodecl> end
global function cublasZrotg_v2(handle: cublasHandle_t, a: *cuDoubleComplex, b: *cuDoubleComplex, c: *float64, s: *cuDoubleComplex): cublasStatus_t <cimport,nodecl> end
global function cublasRotgEx(handle: cublasHandle_t, a: pointer, b: pointer, abType: cudaDataType, c: pointer, s: pointer, csType: cudaDataType, executiontype: cudaDataType): cublasStatus_t <cimport,nodecl> end
global function cublasSrotm_v2(handle: cublasHandle_t, n: cint, x: *float32, incx: cint, y: *float32, incy: cint, param: *float32): cublasStatus_t <cimport,nodecl> end
global function cublasSrotm_v2_64(handle: cublasHandle_t, n: int64, x: *float32, incx: int64, y: *float32, incy: int64, param: *float32): cublasStatus_t <cimport,nodecl> end
global function cublasDrotm_v2(handle: cublasHandle_t, n: cint, x: *float64, incx: cint, y: *float64, incy: cint, param: *float64): cublasStatus_t <cimport,nodecl> end
global function cublasDrotm_v2_64(handle: cublasHandle_t, n: int64, x: *float64, incx: int64, y: *float64, incy: int64, param: *float64): cublasStatus_t <cimport,nodecl> end
global function cublasRotmEx(handle: cublasHandle_t, n: cint, x: pointer, xType: cudaDataType, incx: cint, y: pointer, yType: cudaDataType, incy: cint, param: pointer, paramType: cudaDataType, executiontype: cudaDataType): cublasStatus_t <cimport,nodecl> end
global function cublasRotmEx_64(handle: cublasHandle_t, n: int64, x: pointer, xType: cudaDataType, incx: int64, y: pointer, yType: cudaDataType, incy: int64, param: pointer, paramType: cudaDataType, executiontype: cudaDataType): cublasStatus_t <cimport,nodecl> end
global function cublasSrotmg_v2(handle: cublasHandle_t, d1: *float32, d2: *float32, x1: *float32, y1: *float32, param: *float32): cublasStatus_t <cimport,nodecl> end
global function cublasDrotmg_v2(handle: cublasHandle_t, d1: *float64, d2: *float64, x1: *float64, y1: *float64, param: *float64): cublasStatus_t <cimport,nodecl> end
global function cublasRotmgEx(handle: cublasHandle_t, d1: pointer, d1Type: cudaDataType, d2: pointer, d2Type: cudaDataType, x1: pointer, x1Type: cudaDataType, y1: pointer, y1Type: cudaDataType, param: pointer, paramType: cudaDataType, executiontype: cudaDataType): cublasStatus_t <cimport,nodecl> end
global function cublasSgemv_v2(handle: cublasHandle_t, trans: cublasOperation_t, m: cint, n: cint, alpha: *float32, A: *float32, lda: cint, x: *float32, incx: cint, beta: *float32, y: *float32, incy: cint): cublasStatus_t <cimport,nodecl> end
global function cublasSgemv_v2_64(handle: cublasHandle_t, trans: cublasOperation_t, m: int64, n: int64, alpha: *float32, A: *float32, lda: int64, x: *float32, incx: int64, beta: *float32, y: *float32, incy: int64): cublasStatus_t <cimport,nodecl> end
global function cublasDgemv_v2(handle: cublasHandle_t, trans: cublasOperation_t, m: cint, n: cint, alpha: *float64, A: *float64, lda: cint, x: *float64, incx: cint, beta: *float64, y: *float64, incy: cint): cublasStatus_t <cimport,nodecl> end
global function cublasDgemv_v2_64(handle: cublasHandle_t, trans: cublasOperation_t, m: int64, n: int64, alpha: *float64, A: *float64, lda: int64, x: *float64, incx: int64, beta: *float64, y: *float64, incy: int64): cublasStatus_t <cimport,nodecl> end
global function cublasCgemv_v2(handle: cublasHandle_t, trans: cublasOperation_t, m: cint, n: cint, alpha: *cuComplex, A: *cuComplex, lda: cint, x: *cuComplex, incx: cint, beta: *cuComplex, y: *cuComplex, incy: cint): cublasStatus_t <cimport,nodecl> end
global function cublasCgemv_v2_64(handle: cublasHandle_t, trans: cublasOperation_t, m: int64, n: int64, alpha: *cuComplex, A: *cuComplex, lda: int64, x: *cuComplex, incx: int64, beta: *cuComplex, y: *cuComplex, incy: int64): cublasStatus_t <cimport,nodecl> end
global function cublasZgemv_v2(handle: cublasHandle_t, trans: cublasOperation_t, m: cint, n: cint, alpha: *cuDoubleComplex, A: *cuDoubleComplex, lda: cint, x: *cuDoubleComplex, incx: cint, beta: *cuDoubleComplex, y: *cuDoubleComplex, incy: cint): cublasStatus_t <cimport,nodecl> end
global function cublasZgemv_v2_64(handle: cublasHandle_t, trans: cublasOperation_t, m: int64, n: int64, alpha: *cuDoubleComplex, A: *cuDoubleComplex, lda: int64, x: *cuDoubleComplex, incx: int64, beta: *cuDoubleComplex, y: *cuDoubleComplex, incy: int64): cublasStatus_t <cimport,nodecl> end
global function cublasSgbmv_v2(handle: cublasHandle_t, trans: cublasOperation_t, m: cint, n: cint, kl: cint, ku: cint, alpha: *float32, A: *float32, lda: cint, x: *float32, incx: cint, beta: *float32, y: *float32, incy: cint): cublasStatus_t <cimport,nodecl> end
global function cublasSgbmv_v2_64(handle: cublasHandle_t, trans: cublasOperation_t, m: int64, n: int64, kl: int64, ku: int64, alpha: *float32, A: *float32, lda: int64, x: *float32, incx: int64, beta: *float32, y: *float32, incy: int64): cublasStatus_t <cimport,nodecl> end
global function cublasDgbmv_v2(handle: cublasHandle_t, trans: cublasOperation_t, m: cint, n: cint, kl: cint, ku: cint, alpha: *float64, A: *float64, lda: cint, x: *float64, incx: cint, beta: *float64, y: *float64, incy: cint): cublasStatus_t <cimport,nodecl> end
global function cublasDgbmv_v2_64(handle: cublasHandle_t, trans: cublasOperation_t, m: int64, n: int64, kl: int64, ku: int64, alpha: *float64, A: *float64, lda: int64, x: *float64, incx: int64, beta: *float64, y: *float64, incy: int64): cublasStatus_t <cimport,nodecl> end
global function cublasCgbmv_v2(handle: cublasHandle_t, trans: cublasOperation_t, m: cint, n: cint, kl: cint, ku: cint, alpha: *cuComplex, A: *cuComplex, lda: cint, x: *cuComplex, incx: cint, beta: *cuComplex, y: *cuComplex, incy: cint): cublasStatus_t <cimport,nodecl> end
global function cublasCgbmv_v2_64(handle: cublasHandle_t, trans: cublasOperation_t, m: int64, n: int64, kl: int64, ku: int64, alpha: *cuComplex, A: *cuComplex, lda: int64, x: *cuComplex, incx: int64, beta: *cuComplex, y: *cuComplex, incy: int64): cublasStatus_t <cimport,nodecl> end
global function cublasZgbmv_v2(handle: cublasHandle_t, trans: cublasOperation_t, m: cint, n: cint, kl: cint, ku: cint, alpha: *cuDoubleComplex, A: *cuDoubleComplex, lda: cint, x: *cuDoubleComplex, incx: cint, beta: *cuDoubleComplex, y: *cuDoubleComplex, incy: cint): cublasStatus_t <cimport,nodecl> end
global function cublasZgbmv_v2_64(handle: cublasHandle_t, trans: cublasOperation_t, m: int64, n: int64, kl: int64, ku: int64, alpha: *cuDoubleComplex, A: *cuDoubleComplex, lda: int64, x: *cuDoubleComplex, incx: int64, beta: *cuDoubleComplex, y: *cuDoubleComplex, incy: int64): cublasStatus_t <cimport,nodecl> end
global function cublasStrmv_v2(handle: cublasHandle_t, uplo: cublasFillMode_t, trans: cublasOperation_t, diag: cublasDiagType_t, n: cint, A: *float32, lda: cint, x: *float32, incx: cint): cublasStatus_t <cimport,nodecl> end
global function cublasStrmv_v2_64(handle: cublasHandle_t, uplo: cublasFillMode_t, trans: cublasOperation_t, diag: cublasDiagType_t, n: int64, A: *float32, lda: int64, x: *float32, incx: int64): cublasStatus_t <cimport,nodecl> end
global function cublasDtrmv_v2(handle: cublasHandle_t, uplo: cublasFillMode_t, trans: cublasOperation_t, diag: cublasDiagType_t, n: cint, A: *float64, lda: cint, x: *float64, incx: cint): cublasStatus_t <cimport,nodecl> end
global function cublasDtrmv_v2_64(handle: cublasHandle_t, uplo: cublasFillMode_t, trans: cublasOperation_t, diag: cublasDiagType_t, n: int64, A: *float64, lda: int64, x: *float64, incx: int64): cublasStatus_t <cimport,nodecl> end
global function cublasCtrmv_v2(handle: cublasHandle_t, uplo: cublasFillMode_t, trans: cublasOperation_t, diag: cublasDiagType_t, n: cint, A: *cuComplex, lda: cint, x: *cuComplex, incx: cint): cublasStatus_t <cimport,nodecl> end
global function cublasCtrmv_v2_64(handle: cublasHandle_t, uplo: cublasFillMode_t, trans: cublasOperation_t, diag: cublasDiagType_t, n: int64, A: *cuComplex, lda: int64, x: *cuComplex, incx: int64): cublasStatus_t <cimport,nodecl> end
global function cublasZtrmv_v2(handle: cublasHandle_t, uplo: cublasFillMode_t, trans: cublasOperation_t, diag: cublasDiagType_t, n: cint, A: *cuDoubleComplex, lda: cint, x: *cuDoubleComplex, incx: cint): cublasStatus_t <cimport,nodecl> end
global function cublasZtrmv_v2_64(handle: cublasHandle_t, uplo: cublasFillMode_t, trans: cublasOperation_t, diag: cublasDiagType_t, n: int64, A: *cuDoubleComplex, lda: int64, x: *cuDoubleComplex, incx: int64): cublasStatus_t <cimport,nodecl> end
global function cublasStbmv_v2(handle: cublasHandle_t, uplo: cublasFillMode_t, trans: cublasOperation_t, diag: cublasDiagType_t, n: cint, k: cint, A: *float32, lda: cint, x: *float32, incx: cint): cublasStatus_t <cimport,nodecl> end
global function cublasStbmv_v2_64(handle: cublasHandle_t, uplo: cublasFillMode_t, trans: cublasOperation_t, diag: cublasDiagType_t, n: int64, k: int64, A: *float32, lda: int64, x: *float32, incx: int64): cublasStatus_t <cimport,nodecl> end
global function cublasDtbmv_v2(handle: cublasHandle_t, uplo: cublasFillMode_t, trans: cublasOperation_t, diag: cublasDiagType_t, n: cint, k: cint, A: *float64, lda: cint, x: *float64, incx: cint): cublasStatus_t <cimport,nodecl> end
global function cublasDtbmv_v2_64(handle: cublasHandle_t, uplo: cublasFillMode_t, trans: cublasOperation_t, diag: cublasDiagType_t, n: int64, k: int64, A: *float64, lda: int64, x: *float64, incx: int64): cublasStatus_t <cimport,nodecl> end
global function cublasCtbmv_v2(handle: cublasHandle_t, uplo: cublasFillMode_t, trans: cublasOperation_t, diag: cublasDiagType_t, n: cint, k: cint, A: *cuComplex, lda: cint, x: *cuComplex, incx: cint): cublasStatus_t <cimport,nodecl> end
global function cublasCtbmv_v2_64(handle: cublasHandle_t, uplo: cublasFillMode_t, trans: cublasOperation_t, diag: cublasDiagType_t, n: int64, k: int64, A: *cuComplex, lda: int64, x: *cuComplex, incx: int64): cublasStatus_t <cimport,nodecl> end
global function cublasZtbmv_v2(handle: cublasHandle_t, uplo: cublasFillMode_t, trans: cublasOperation_t, diag: cublasDiagType_t, n: cint, k: cint, A: *cuDoubleComplex, lda: cint, x: *cuDoubleComplex, incx: cint): cublasStatus_t <cimport,nodecl> end
global function cublasZtbmv_v2_64(handle: cublasHandle_t, uplo: cublasFillMode_t, trans: cublasOperation_t, diag: cublasDiagType_t, n: int64, k: int64, A: *cuDoubleComplex, lda: int64, x: *cuDoubleComplex, incx: int64): cublasStatus_t <cimport,nodecl> end
global function cublasStpmv_v2(handle: cublasHandle_t, uplo: cublasFillMode_t, trans: cublasOperation_t, diag: cublasDiagType_t, n: cint, AP: *float32, x: *float32, incx: cint): cublasStatus_t <cimport,nodecl> end
global function cublasStpmv_v2_64(handle: cublasHandle_t, uplo: cublasFillMode_t, trans: cublasOperation_t, diag: cublasDiagType_t, n: int64, AP: *float32, x: *float32, incx: int64): cublasStatus_t <cimport,nodecl> end
global function cublasDtpmv_v2(handle: cublasHandle_t, uplo: cublasFillMode_t, trans: cublasOperation_t, diag: cublasDiagType_t, n: cint, AP: *float64, x: *float64, incx: cint): cublasStatus_t <cimport,nodecl> end
global function cublasDtpmv_v2_64(handle: cublasHandle_t, uplo: cublasFillMode_t, trans: cublasOperation_t, diag: cublasDiagType_t, n: int64, AP: *float64, x: *float64, incx: int64): cublasStatus_t <cimport,nodecl> end
global function cublasCtpmv_v2(handle: cublasHandle_t, uplo: cublasFillMode_t, trans: cublasOperation_t, diag: cublasDiagType_t, n: cint, AP: *cuComplex, x: *cuComplex, incx: cint): cublasStatus_t <cimport,nodecl> end
global function cublasCtpmv_v2_64(handle: cublasHandle_t, uplo: cublasFillMode_t, trans: cublasOperation_t, diag: cublasDiagType_t, n: int64, AP: *cuComplex, x: *cuComplex, incx: int64): cublasStatus_t <cimport,nodecl> end
global function cublasZtpmv_v2(handle: cublasHandle_t, uplo: cublasFillMode_t, trans: cublasOperation_t, diag: cublasDiagType_t, n: cint, AP: *cuDoubleComplex, x: *cuDoubleComplex, incx: cint): cublasStatus_t <cimport,nodecl> end
global function cublasZtpmv_v2_64(handle: cublasHandle_t, uplo: cublasFillMode_t, trans: cublasOperation_t, diag: cublasDiagType_t, n: int64, AP: *cuDoubleComplex, x: *cuDoubleComplex, incx: int64): cublasStatus_t <cimport,nodecl> end
global function cublasStrsv_v2(handle: cublasHandle_t, uplo: cublasFillMode_t, trans: cublasOperation_t, diag: cublasDiagType_t, n: cint, A: *float32, lda: cint, x: *float32, incx: cint): cublasStatus_t <cimport,nodecl> end
global function cublasStrsv_v2_64(handle: cublasHandle_t, uplo: cublasFillMode_t, trans: cublasOperation_t, diag: cublasDiagType_t, n: int64, A: *float32, lda: int64, x: *float32, incx: int64): cublasStatus_t <cimport,nodecl> end
global function cublasDtrsv_v2(handle: cublasHandle_t, uplo: cublasFillMode_t, trans: cublasOperation_t, diag: cublasDiagType_t, n: cint, A: *float64, lda: cint, x: *float64, incx: cint): cublasStatus_t <cimport,nodecl> end
global function cublasDtrsv_v2_64(handle: cublasHandle_t, uplo: cublasFillMode_t, trans: cublasOperation_t, diag: cublasDiagType_t, n: int64, A: *float64, lda: int64, x: *float64, incx: int64): cublasStatus_t <cimport,nodecl> end
global function cublasCtrsv_v2(handle: cublasHandle_t, uplo: cublasFillMode_t, trans: cublasOperation_t, diag: cublasDiagType_t, n: cint, A: *cuComplex, lda: cint, x: *cuComplex, incx: cint): cublasStatus_t <cimport,nodecl> end
global function cublasCtrsv_v2_64(handle: cublasHandle_t, uplo: cublasFillMode_t, trans: cublasOperation_t, diag: cublasDiagType_t, n: int64, A: *cuComplex, lda: int64, x: *cuComplex, incx: int64): cublasStatus_t <cimport,nodecl> end
global function cublasZtrsv_v2(handle: cublasHandle_t, uplo: cublasFillMode_t, trans: cublasOperation_t, diag: cublasDiagType_t, n: cint, A: *cuDoubleComplex, lda: cint, x: *cuDoubleComplex, incx: cint): cublasStatus_t <cimport,nodecl> end
global function cublasZtrsv_v2_64(handle: cublasHandle_t, uplo: cublasFillMode_t, trans: cublasOperation_t, diag: cublasDiagType_t, n: int64, A: *cuDoubleComplex, lda: int64, x: *cuDoubleComplex, incx: int64): cublasStatus_t <cimport,nodecl> end
global function cublasStpsv_v2(handle: cublasHandle_t, uplo: cublasFillMode_t, trans: cublasOperation_t, diag: cublasDiagType_t, n: cint, AP: *float32, x: *float32, incx: cint): cublasStatus_t <cimport,nodecl> end
global function cublasStpsv_v2_64(handle: cublasHandle_t, uplo: cublasFillMode_t, trans: cublasOperation_t, diag: cublasDiagType_t, n: int64, AP: *float32, x: *float32, incx: int64): cublasStatus_t <cimport,nodecl> end
global function cublasDtpsv_v2(handle: cublasHandle_t, uplo: cublasFillMode_t, trans: cublasOperation_t, diag: cublasDiagType_t, n: cint, AP: *float64, x: *float64, incx: cint): cublasStatus_t <cimport,nodecl> end
global function cublasDtpsv_v2_64(handle: cublasHandle_t, uplo: cublasFillMode_t, trans: cublasOperation_t, diag: cublasDiagType_t, n: int64, AP: *float64, x: *float64, incx: int64): cublasStatus_t <cimport,nodecl> end
global function cublasCtpsv_v2(handle: cublasHandle_t, uplo: cublasFillMode_t, trans: cublasOperation_t, diag: cublasDiagType_t, n: cint, AP: *cuComplex, x: *cuComplex, incx: cint): cublasStatus_t <cimport,nodecl> end
global function cublasCtpsv_v2_64(handle: cublasHandle_t, uplo: cublasFillMode_t, trans: cublasOperation_t, diag: cublasDiagType_t, n: int64, AP: *cuComplex, x: *cuComplex, incx: int64): cublasStatus_t <cimport,nodecl> end
global function cublasZtpsv_v2(handle: cublasHandle_t, uplo: cublasFillMode_t, trans: cublasOperation_t, diag: cublasDiagType_t, n: cint, AP: *cuDoubleComplex, x: *cuDoubleComplex, incx: cint): cublasStatus_t <cimport,nodecl> end
global function cublasZtpsv_v2_64(handle: cublasHandle_t, uplo: cublasFillMode_t, trans: cublasOperation_t, diag: cublasDiagType_t, n: int64, AP: *cuDoubleComplex, x: *cuDoubleComplex, incx: int64): cublasStatus_t <cimport,nodecl> end
global function cublasStbsv_v2(handle: cublasHandle_t, uplo: cublasFillMode_t, trans: cublasOperation_t, diag: cublasDiagType_t, n: cint, k: cint, A: *float32, lda: cint, x: *float32, incx: cint): cublasStatus_t <cimport,nodecl> end
global function cublasStbsv_v2_64(handle: cublasHandle_t, uplo: cublasFillMode_t, trans: cublasOperation_t, diag: cublasDiagType_t, n: int64, k: int64, A: *float32, lda: int64, x: *float32, incx: int64): cublasStatus_t <cimport,nodecl> end
global function cublasDtbsv_v2(handle: cublasHandle_t, uplo: cublasFillMode_t, trans: cublasOperation_t, diag: cublasDiagType_t, n: cint, k: cint, A: *float64, lda: cint, x: *float64, incx: cint): cublasStatus_t <cimport,nodecl> end
global function cublasDtbsv_v2_64(handle: cublasHandle_t, uplo: cublasFillMode_t, trans: cublasOperation_t, diag: cublasDiagType_t, n: int64, k: int64, A: *float64, lda: int64, x: *float64, incx: int64): cublasStatus_t <cimport,nodecl> end
global function cublasCtbsv_v2(handle: cublasHandle_t, uplo: cublasFillMode_t, trans: cublasOperation_t, diag: cublasDiagType_t, n: cint, k: cint, A: *cuComplex, lda: cint, x: *cuComplex, incx: cint): cublasStatus_t <cimport,nodecl> end
global function cublasCtbsv_v2_64(handle: cublasHandle_t, uplo: cublasFillMode_t, trans: cublasOperation_t, diag: cublasDiagType_t, n: int64, k: int64, A: *cuComplex, lda: int64, x: *cuComplex, incx: int64): cublasStatus_t <cimport,nodecl> end
global function cublasZtbsv_v2(handle: cublasHandle_t, uplo: cublasFillMode_t, trans: cublasOperation_t, diag: cublasDiagType_t, n: cint, k: cint, A: *cuDoubleComplex, lda: cint, x: *cuDoubleComplex, incx: cint): cublasStatus_t <cimport,nodecl> end
global function cublasZtbsv_v2_64(handle: cublasHandle_t, uplo: cublasFillMode_t, trans: cublasOperation_t, diag: cublasDiagType_t, n: int64, k: int64, A: *cuDoubleComplex, lda: int64, x: *cuDoubleComplex, incx: int64): cublasStatus_t <cimport,nodecl> end
global function cublasSsymv_v2(handle: cublasHandle_t, uplo: cublasFillMode_t, n: cint, alpha: *float32, A: *float32, lda: cint, x: *float32, incx: cint, beta: *float32, y: *float32, incy: cint): cublasStatus_t <cimport,nodecl> end
global function cublasSsymv_v2_64(handle: cublasHandle_t, uplo: cublasFillMode_t, n: int64, alpha: *float32, A: *float32, lda: int64, x: *float32, incx: int64, beta: *float32, y: *float32, incy: int64): cublasStatus_t <cimport,nodecl> end
global function cublasDsymv_v2(handle: cublasHandle_t, uplo: cublasFillMode_t, n: cint, alpha: *float64, A: *float64, lda: cint, x: *float64, incx: cint, beta: *float64, y: *float64, incy: cint): cublasStatus_t <cimport,nodecl> end
global function cublasDsymv_v2_64(handle: cublasHandle_t, uplo: cublasFillMode_t, n: int64, alpha: *float64, A: *float64, lda: int64, x: *float64, incx: int64, beta: *float64, y: *float64, incy: int64): cublasStatus_t <cimport,nodecl> end
global function cublasCsymv_v2(handle: cublasHandle_t, uplo: cublasFillMode_t, n: cint, alpha: *cuComplex, A: *cuComplex, lda: cint, x: *cuComplex, incx: cint, beta: *cuComplex, y: *cuComplex, incy: cint): cublasStatus_t <cimport,nodecl> end
global function cublasCsymv_v2_64(handle: cublasHandle_t, uplo: cublasFillMode_t, n: int64, alpha: *cuComplex, A: *cuComplex, lda: int64, x: *cuComplex, incx: int64, beta: *cuComplex, y: *cuComplex, incy: int64): cublasStatus_t <cimport,nodecl> end
global function cublasZsymv_v2(handle: cublasHandle_t, uplo: cublasFillMode_t, n: cint, alpha: *cuDoubleComplex, A: *cuDoubleComplex, lda: cint, x: *cuDoubleComplex, incx: cint, beta: *cuDoubleComplex, y: *cuDoubleComplex, incy: cint): cublasStatus_t <cimport,nodecl> end
global function cublasZsymv_v2_64(handle: cublasHandle_t, uplo: cublasFillMode_t, n: int64, alpha: *cuDoubleComplex, A: *cuDoubleComplex, lda: int64, x: *cuDoubleComplex, incx: int64, beta: *cuDoubleComplex, y: *cuDoubleComplex, incy: int64): cublasStatus_t <cimport,nodecl> end
global function cublasChemv_v2(handle: cublasHandle_t, uplo: cublasFillMode_t, n: cint, alpha: *cuComplex, A: *cuComplex, lda: cint, x: *cuComplex, incx: cint, beta: *cuComplex, y: *cuComplex, incy: cint): cublasStatus_t <cimport,nodecl> end
global function cublasChemv_v2_64(handle: cublasHandle_t, uplo: cublasFillMode_t, n: int64, alpha: *cuComplex, A: *cuComplex, lda: int64, x: *cuComplex, incx: int64, beta: *cuComplex, y: *cuComplex, incy: int64): cublasStatus_t <cimport,nodecl> end
global function cublasZhemv_v2(handle: cublasHandle_t, uplo: cublasFillMode_t, n: cint, alpha: *cuDoubleComplex, A: *cuDoubleComplex, lda: cint, x: *cuDoubleComplex, incx: cint, beta: *cuDoubleComplex, y: *cuDoubleComplex, incy: cint): cublasStatus_t <cimport,nodecl> end
global function cublasZhemv_v2_64(handle: cublasHandle_t, uplo: cublasFillMode_t, n: int64, alpha: *cuDoubleComplex, A: *cuDoubleComplex, lda: int64, x: *cuDoubleComplex, incx: int64, beta: *cuDoubleComplex, y: *cuDoubleComplex, incy: int64): cublasStatus_t <cimport,nodecl> end
global function cublasSsbmv_v2(handle: cublasHandle_t, uplo: cublasFillMode_t, n: cint, k: cint, alpha: *float32, A: *float32, lda: cint, x: *float32, incx: cint, beta: *float32, y: *float32, incy: cint): cublasStatus_t <cimport,nodecl> end
global function cublasSsbmv_v2_64(handle: cublasHandle_t, uplo: cublasFillMode_t, n: int64, k: int64, alpha: *float32, A: *float32, lda: int64, x: *float32, incx: int64, beta: *float32, y: *float32, incy: int64): cublasStatus_t <cimport,nodecl> end
global function cublasDsbmv_v2(handle: cublasHandle_t, uplo: cublasFillMode_t, n: cint, k: cint, alpha: *float64, A: *float64, lda: cint, x: *float64, incx: cint, beta: *float64, y: *float64, incy: cint): cublasStatus_t <cimport,nodecl> end
global function cublasDsbmv_v2_64(handle: cublasHandle_t, uplo: cublasFillMode_t, n: int64, k: int64, alpha: *float64, A: *float64, lda: int64, x: *float64, incx: int64, beta: *float64, y: *float64, incy: int64): cublasStatus_t <cimport,nodecl> end
global function cublasChbmv_v2(handle: cublasHandle_t, uplo: cublasFillMode_t, n: cint, k: cint, alpha: *cuComplex, A: *cuComplex, lda: cint, x: *cuComplex, incx: cint, beta: *cuComplex, y: *cuComplex, incy: cint): cublasStatus_t <cimport,nodecl> end
global function cublasChbmv_v2_64(handle: cublasHandle_t, uplo: cublasFillMode_t, n: int64, k: int64, alpha: *cuComplex, A: *cuComplex, lda: int64, x: *cuComplex, incx: int64, beta: *cuComplex, y: *cuComplex, incy: int64): cublasStatus_t <cimport,nodecl> end
global function cublasZhbmv_v2(handle: cublasHandle_t, uplo: cublasFillMode_t, n: cint, k: cint, alpha: *cuDoubleComplex, A: *cuDoubleComplex, lda: cint, x: *cuDoubleComplex, incx: cint, beta: *cuDoubleComplex, y: *cuDoubleComplex, incy: cint): cublasStatus_t <cimport,nodecl> end
global function cublasZhbmv_v2_64(handle: cublasHandle_t, uplo: cublasFillMode_t, n: int64, k: int64, alpha: *cuDoubleComplex, A: *cuDoubleComplex, lda: int64, x: *cuDoubleComplex, incx: int64, beta: *cuDoubleComplex, y: *cuDoubleComplex, incy: int64): cublasStatus_t <cimport,nodecl> end
global function cublasSspmv_v2(handle: cublasHandle_t, uplo: cublasFillMode_t, n: cint, alpha: *float32, AP: *float32, x: *float32, incx: cint, beta: *float32, y: *float32, incy: cint): cublasStatus_t <cimport,nodecl> end
global function cublasSspmv_v2_64(handle: cublasHandle_t, uplo: cublasFillMode_t, n: int64, alpha: *float32, AP: *float32, x: *float32, incx: int64, beta: *float32, y: *float32, incy: int64): cublasStatus_t <cimport,nodecl> end
global function cublasDspmv_v2(handle: cublasHandle_t, uplo: cublasFillMode_t, n: cint, alpha: *float64, AP: *float64, x: *float64, incx: cint, beta: *float64, y: *float64, incy: cint): cublasStatus_t <cimport,nodecl> end
global function cublasDspmv_v2_64(handle: cublasHandle_t, uplo: cublasFillMode_t, n: int64, alpha: *float64, AP: *float64, x: *float64, incx: int64, beta: *float64, y: *float64, incy: int64): cublasStatus_t <cimport,nodecl> end
global function cublasChpmv_v2(handle: cublasHandle_t, uplo: cublasFillMode_t, n: cint, alpha: *cuComplex, AP: *cuComplex, x: *cuComplex, incx: cint, beta: *cuComplex, y: *cuComplex, incy: cint): cublasStatus_t <cimport,nodecl> end
global function cublasChpmv_v2_64(handle: cublasHandle_t, uplo: cublasFillMode_t, n: int64, alpha: *cuComplex, AP: *cuComplex, x: *cuComplex, incx: int64, beta: *cuComplex, y: *cuComplex, incy: int64): cublasStatus_t <cimport,nodecl> end
global function cublasZhpmv_v2(handle: cublasHandle_t, uplo: cublasFillMode_t, n: cint, alpha: *cuDoubleComplex, AP: *cuDoubleComplex, x: *cuDoubleComplex, incx: cint, beta: *cuDoubleComplex, y: *cuDoubleComplex, incy: cint): cublasStatus_t <cimport,nodecl> end
global function cublasZhpmv_v2_64(handle: cublasHandle_t, uplo: cublasFillMode_t, n: int64, alpha: *cuDoubleComplex, AP: *cuDoubleComplex, x: *cuDoubleComplex, incx: int64, beta: *cuDoubleComplex, y: *cuDoubleComplex, incy: int64): cublasStatus_t <cimport,nodecl> end
global function cublasSger_v2(handle: cublasHandle_t, m: cint, n: cint, alpha: *float32, x: *float32, incx: cint, y: *float32, incy: cint, A: *float32, lda: cint): cublasStatus_t <cimport,nodecl> end
global function cublasSger_v2_64(handle: cublasHandle_t, m: int64, n: int64, alpha: *float32, x: *float32, incx: int64, y: *float32, incy: int64, A: *float32, lda: int64): cublasStatus_t <cimport,nodecl> end
global function cublasDger_v2(handle: cublasHandle_t, m: cint, n: cint, alpha: *float64, x: *float64, incx: cint, y: *float64, incy: cint, A: *float64, lda: cint): cublasStatus_t <cimport,nodecl> end
global function cublasDger_v2_64(handle: cublasHandle_t, m: int64, n: int64, alpha: *float64, x: *float64, incx: int64, y: *float64, incy: int64, A: *float64, lda: int64): cublasStatus_t <cimport,nodecl> end
global function cublasCgeru_v2(handle: cublasHandle_t, m: cint, n: cint, alpha: *cuComplex, x: *cuComplex, incx: cint, y: *cuComplex, incy: cint, A: *cuComplex, lda: cint): cublasStatus_t <cimport,nodecl> end
global function cublasCgeru_v2_64(handle: cublasHandle_t, m: int64, n: int64, alpha: *cuComplex, x: *cuComplex, incx: int64, y: *cuComplex, incy: int64, A: *cuComplex, lda: int64): cublasStatus_t <cimport,nodecl> end
global function cublasCgerc_v2(handle: cublasHandle_t, m: cint, n: cint, alpha: *cuComplex, x: *cuComplex, incx: cint, y: *cuComplex, incy: cint, A: *cuComplex, lda: cint): cublasStatus_t <cimport,nodecl> end
global function cublasCgerc_v2_64(handle: cublasHandle_t, m: int64, n: int64, alpha: *cuComplex, x: *cuComplex, incx: int64, y: *cuComplex, incy: int64, A: *cuComplex, lda: int64): cublasStatus_t <cimport,nodecl> end
global function cublasZgeru_v2(handle: cublasHandle_t, m: cint, n: cint, alpha: *cuDoubleComplex, x: *cuDoubleComplex, incx: cint, y: *cuDoubleComplex, incy: cint, A: *cuDoubleComplex, lda: cint): cublasStatus_t <cimport,nodecl> end
global function cublasZgeru_v2_64(handle: cublasHandle_t, m: int64, n: int64, alpha: *cuDoubleComplex, x: *cuDoubleComplex, incx: int64, y: *cuDoubleComplex, incy: int64, A: *cuDoubleComplex, lda: int64): cublasStatus_t <cimport,nodecl> end
global function cublasZgerc_v2(handle: cublasHandle_t, m: cint, n: cint, alpha: *cuDoubleComplex, x: *cuDoubleComplex, incx: cint, y: *cuDoubleComplex, incy: cint, A: *cuDoubleComplex, lda: cint): cublasStatus_t <cimport,nodecl> end
global function cublasZgerc_v2_64(handle: cublasHandle_t, m: int64, n: int64, alpha: *cuDoubleComplex, x: *cuDoubleComplex, incx: int64, y: *cuDoubleComplex, incy: int64, A: *cuDoubleComplex, lda: int64): cublasStatus_t <cimport,nodecl> end
global function cublasSsyr_v2(handle: cublasHandle_t, uplo: cublasFillMode_t, n: cint, alpha: *float32, x: *float32, incx: cint, A: *float32, lda: cint): cublasStatus_t <cimport,nodecl> end
global function cublasSsyr_v2_64(handle: cublasHandle_t, uplo: cublasFillMode_t, n: int64, alpha: *float32, x: *float32, incx: int64, A: *float32, lda: int64): cublasStatus_t <cimport,nodecl> end
global function cublasDsyr_v2(handle: cublasHandle_t, uplo: cublasFillMode_t, n: cint, alpha: *float64, x: *float64, incx: cint, A: *float64, lda: cint): cublasStatus_t <cimport,nodecl> end
global function cublasDsyr_v2_64(handle: cublasHandle_t, uplo: cublasFillMode_t, n: int64, alpha: *float64, x: *float64, incx: int64, A: *float64, lda: int64): cublasStatus_t <cimport,nodecl> end
global function cublasCsyr_v2(handle: cublasHandle_t, uplo: cublasFillMode_t, n: cint, alpha: *cuComplex, x: *cuComplex, incx: cint, A: *cuComplex, lda: cint): cublasStatus_t <cimport,nodecl> end
global function cublasCsyr_v2_64(handle: cublasHandle_t, uplo: cublasFillMode_t, n: int64, alpha: *cuComplex, x: *cuComplex, incx: int64, A: *cuComplex, lda: int64): cublasStatus_t <cimport,nodecl> end
global function cublasZsyr_v2(handle: cublasHandle_t, uplo: cublasFillMode_t, n: cint, alpha: *cuDoubleComplex, x: *cuDoubleComplex, incx: cint, A: *cuDoubleComplex, lda: cint): cublasStatus_t <cimport,nodecl> end
global function cublasZsyr_v2_64(handle: cublasHandle_t, uplo: cublasFillMode_t, n: int64, alpha: *cuDoubleComplex, x: *cuDoubleComplex, incx: int64, A: *cuDoubleComplex, lda: int64): cublasStatus_t <cimport,nodecl> end
global function cublasCher_v2(handle: cublasHandle_t, uplo: cublasFillMode_t, n: cint, alpha: *float32, x: *cuComplex, incx: cint, A: *cuComplex, lda: cint): cublasStatus_t <cimport,nodecl> end
global function cublasCher_v2_64(handle: cublasHandle_t, uplo: cublasFillMode_t, n: int64, alpha: *float32, x: *cuComplex, incx: int64, A: *cuComplex, lda: int64): cublasStatus_t <cimport,nodecl> end
global function cublasZher_v2(handle: cublasHandle_t, uplo: cublasFillMode_t, n: cint, alpha: *float64, x: *cuDoubleComplex, incx: cint, A: *cuDoubleComplex, lda: cint): cublasStatus_t <cimport,nodecl> end
global function cublasZher_v2_64(handle: cublasHandle_t, uplo: cublasFillMode_t, n: int64, alpha: *float64, x: *cuDoubleComplex, incx: int64, A: *cuDoubleComplex, lda: int64): cublasStatus_t <cimport,nodecl> end
global function cublasSspr_v2(handle: cublasHandle_t, uplo: cublasFillMode_t, n: cint, alpha: *float32, x: *float32, incx: cint, AP: *float32): cublasStatus_t <cimport,nodecl> end
global function cublasSspr_v2_64(handle: cublasHandle_t, uplo: cublasFillMode_t, n: int64, alpha: *float32, x: *float32, incx: int64, AP: *float32): cublasStatus_t <cimport,nodecl> end
global function cublasDspr_v2(handle: cublasHandle_t, uplo: cublasFillMode_t, n: cint, alpha: *float64, x: *float64, incx: cint, AP: *float64): cublasStatus_t <cimport,nodecl> end
global function cublasDspr_v2_64(handle: cublasHandle_t, uplo: cublasFillMode_t, n: int64, alpha: *float64, x: *float64, incx: int64, AP: *float64): cublasStatus_t <cimport,nodecl> end
global function cublasChpr_v2(handle: cublasHandle_t, uplo: cublasFillMode_t, n: cint, alpha: *float32, x: *cuComplex, incx: cint, AP: *cuComplex): cublasStatus_t <cimport,nodecl> end
global function cublasChpr_v2_64(handle: cublasHandle_t, uplo: cublasFillMode_t, n: int64, alpha: *float32, x: *cuComplex, incx: int64, AP: *cuComplex): cublasStatus_t <cimport,nodecl> end
global function cublasZhpr_v2(handle: cublasHandle_t, uplo: cublasFillMode_t, n: cint, alpha: *float64, x: *cuDoubleComplex, incx: cint, AP: *cuDoubleComplex): cublasStatus_t <cimport,nodecl> end
global function cublasZhpr_v2_64(handle: cublasHandle_t, uplo: cublasFillMode_t, n: int64, alpha: *float64, x: *cuDoubleComplex, incx: int64, AP: *cuDoubleComplex): cublasStatus_t <cimport,nodecl> end
global function cublasSsyr2_v2(handle: cublasHandle_t, uplo: cublasFillMode_t, n: cint, alpha: *float32, x: *float32, incx: cint, y: *float32, incy: cint, A: *float32, lda: cint): cublasStatus_t <cimport,nodecl> end
global function cublasSsyr2_v2_64(handle: cublasHandle_t, uplo: cublasFillMode_t, n: int64, alpha: *float32, x: *float32, incx: int64, y: *float32, incy: int64, A: *float32, lda: int64): cublasStatus_t <cimport,nodecl> end
global function cublasDsyr2_v2(handle: cublasHandle_t, uplo: cublasFillMode_t, n: cint, alpha: *float64, x: *float64, incx: cint, y: *float64, incy: cint, A: *float64, lda: cint): cublasStatus_t <cimport,nodecl> end
global function cublasDsyr2_v2_64(handle: cublasHandle_t, uplo: cublasFillMode_t, n: int64, alpha: *float64, x: *float64, incx: int64, y: *float64, incy: int64, A: *float64, lda: int64): cublasStatus_t <cimport,nodecl> end
global function cublasCsyr2_v2(handle: cublasHandle_t, uplo: cublasFillMode_t, n: cint, alpha: *cuComplex, x: *cuComplex, incx: cint, y: *cuComplex, incy: cint, A: *cuComplex, lda: cint): cublasStatus_t <cimport,nodecl> end
global function cublasCsyr2_v2_64(handle: cublasHandle_t, uplo: cublasFillMode_t, n: int64, alpha: *cuComplex, x: *cuComplex, incx: int64, y: *cuComplex, incy: int64, A: *cuComplex, lda: int64): cublasStatus_t <cimport,nodecl> end
global function cublasZsyr2_v2(handle: cublasHandle_t, uplo: cublasFillMode_t, n: cint, alpha: *cuDoubleComplex, x: *cuDoubleComplex, incx: cint, y: *cuDoubleComplex, incy: cint, A: *cuDoubleComplex, lda: cint): cublasStatus_t <cimport,nodecl> end
global function cublasZsyr2_v2_64(handle: cublasHandle_t, uplo: cublasFillMode_t, n: int64, alpha: *cuDoubleComplex, x: *cuDoubleComplex, incx: int64, y: *cuDoubleComplex, incy: int64, A: *cuDoubleComplex, lda: int64): cublasStatus_t <cimport,nodecl> end
global function cublasCher2_v2(handle: cublasHandle_t, uplo: cublasFillMode_t, n: cint, alpha: *cuComplex, x: *cuComplex, incx: cint, y: *cuComplex, incy: cint, A: *cuComplex, lda: cint): cublasStatus_t <cimport,nodecl> end
global function cublasCher2_v2_64(handle: cublasHandle_t, uplo: cublasFillMode_t, n: int64, alpha: *cuComplex, x: *cuComplex, incx: int64, y: *cuComplex, incy: int64, A: *cuComplex, lda: int64): cublasStatus_t <cimport,nodecl> end
global function cublasZher2_v2(handle: cublasHandle_t, uplo: cublasFillMode_t, n: cint, alpha: *cuDoubleComplex, x: *cuDoubleComplex, incx: cint, y: *cuDoubleComplex, incy: cint, A: *cuDoubleComplex, lda: cint): cublasStatus_t <cimport,nodecl> end
global function cublasZher2_v2_64(handle: cublasHandle_t, uplo: cublasFillMode_t, n: int64, alpha: *cuDoubleComplex, x: *cuDoubleComplex, incx: int64, y: *cuDoubleComplex, incy: int64, A: *cuDoubleComplex, lda: int64): cublasStatus_t <cimport,nodecl> end
global function cublasSspr2_v2(handle: cublasHandle_t, uplo: cublasFillMode_t, n: cint, alpha: *float32, x: *float32, incx: cint, y: *float32, incy: cint, AP: *float32): cublasStatus_t <cimport,nodecl> end
global function cublasSspr2_v2_64(handle: cublasHandle_t, uplo: cublasFillMode_t, n: int64, alpha: *float32, x: *float32, incx: int64, y: *float32, incy: int64, AP: *float32): cublasStatus_t <cimport,nodecl> end
global function cublasDspr2_v2(handle: cublasHandle_t, uplo: cublasFillMode_t, n: cint, alpha: *float64, x: *float64, incx: cint, y: *float64, incy: cint, AP: *float64): cublasStatus_t <cimport,nodecl> end
global function cublasDspr2_v2_64(handle: cublasHandle_t, uplo: cublasFillMode_t, n: int64, alpha: *float64, x: *float64, incx: int64, y: *float64, incy: int64, AP: *float64): cublasStatus_t <cimport,nodecl> end
global function cublasChpr2_v2(handle: cublasHandle_t, uplo: cublasFillMode_t, n: cint, alpha: *cuComplex, x: *cuComplex, incx: cint, y: *cuComplex, incy: cint, AP: *cuComplex): cublasStatus_t <cimport,nodecl> end
global function cublasChpr2_v2_64(handle: cublasHandle_t, uplo: cublasFillMode_t, n: int64, alpha: *cuComplex, x: *cuComplex, incx: int64, y: *cuComplex, incy: int64, AP: *cuComplex): cublasStatus_t <cimport,nodecl> end
global function cublasZhpr2_v2(handle: cublasHandle_t, uplo: cublasFillMode_t, n: cint, alpha: *cuDoubleComplex, x: *cuDoubleComplex, incx: cint, y: *cuDoubleComplex, incy: cint, AP: *cuDoubleComplex): cublasStatus_t <cimport,nodecl> end
global function cublasZhpr2_v2_64(handle: cublasHandle_t, uplo: cublasFillMode_t, n: int64, alpha: *cuDoubleComplex, x: *cuDoubleComplex, incx: int64, y: *cuDoubleComplex, incy: int64, AP: *cuDoubleComplex): cublasStatus_t <cimport,nodecl> end
global function cublasSgemvBatched(handle: cublasHandle_t, trans: cublasOperation_t, m: cint, n: cint, alpha: *float32, Aarray: *[0]*float32, lda: cint, xarray: *[0]*float32, incx: cint, beta: *float32, yarray: *[0]*float32, incy: cint, batchCount: cint): cublasStatus_t <cimport,nodecl> end
global function cublasSgemvBatched_64(handle: cublasHandle_t, trans: cublasOperation_t, m: int64, n: int64, alpha: *float32, Aarray: *[0]*float32, lda: int64, xarray: *[0]*float32, incx: int64, beta: *float32, yarray: *[0]*float32, incy: int64, batchCount: int64): cublasStatus_t <cimport,nodecl> end
global function cublasDgemvBatched(handle: cublasHandle_t, trans: cublasOperation_t, m: cint, n: cint, alpha: *float64, Aarray: *[0]*float64, lda: cint, xarray: *[0]*float64, incx: cint, beta: *float64, yarray: *[0]*float64, incy: cint, batchCount: cint): cublasStatus_t <cimport,nodecl> end
global function cublasDgemvBatched_64(handle: cublasHandle_t, trans: cublasOperation_t, m: int64, n: int64, alpha: *float64, Aarray: *[0]*float64, lda: int64, xarray: *[0]*float64, incx: int64, beta: *float64, yarray: *[0]*float64, incy: int64, batchCount: int64): cublasStatus_t <cimport,nodecl> end
global function cublasCgemvBatched(handle: cublasHandle_t, trans: cublasOperation_t, m: cint, n: cint, alpha: *cuComplex, Aarray: *[0]*cuComplex, lda: cint, xarray: *[0]*cuComplex, incx: cint, beta: *cuComplex, yarray: *[0]*cuComplex, incy: cint, batchCount: cint): cublasStatus_t <cimport,nodecl> end
global function cublasCgemvBatched_64(handle: cublasHandle_t, trans: cublasOperation_t, m: int64, n: int64, alpha: *cuComplex, Aarray: *[0]*cuComplex, lda: int64, xarray: *[0]*cuComplex, incx: int64, beta: *cuComplex, yarray: *[0]*cuComplex, incy: int64, batchCount: int64): cublasStatus_t <cimport,nodecl> end
global function cublasZgemvBatched(handle: cublasHandle_t, trans: cublasOperation_t, m: cint, n: cint, alpha: *cuDoubleComplex, Aarray: *[0]*cuDoubleComplex, lda: cint, xarray: *[0]*cuDoubleComplex, incx: cint, beta: *cuDoubleComplex, yarray: *[0]*cuDoubleComplex, incy: cint, batchCount: cint): cublasStatus_t <cimport,nodecl> end
global function cublasZgemvBatched_64(handle: cublasHandle_t, trans: cublasOperation_t, m: int64, n: int64, alpha: *cuDoubleComplex, Aarray: *[0]*cuDoubleComplex, lda: int64, xarray: *[0]*cuDoubleComplex, incx: int64, beta: *cuDoubleComplex, yarray: *[0]*cuDoubleComplex, incy: int64, batchCount: int64): cublasStatus_t <cimport,nodecl> end
global function cublasSgemvStridedBatched(handle: cublasHandle_t, trans: cublasOperation_t, m: cint, n: cint, alpha: *float32, A: *float32, lda: cint, strideA: clonglong, x: *float32, incx: cint, stridex: clonglong, beta: *float32, y: *float32, incy: cint, stridey: clonglong, batchCount: cint): cublasStatus_t <cimport,nodecl> end
global function cublasSgemvStridedBatched_64(handle: cublasHandle_t, trans: cublasOperation_t, m: int64, n: int64, alpha: *float32, A: *float32, lda: int64, strideA: clonglong, x: *float32, incx: int64, stridex: clonglong, beta: *float32, y: *float32, incy: int64, stridey: clonglong, batchCount: int64): cublasStatus_t <cimport,nodecl> end
global function cublasDgemvStridedBatched(handle: cublasHandle_t, trans: cublasOperation_t, m: cint, n: cint, alpha: *float64, A: *float64, lda: cint, strideA: clonglong, x: *float64, incx: cint, stridex: clonglong, beta: *float64, y: *float64, incy: cint, stridey: clonglong, batchCount: cint): cublasStatus_t <cimport,nodecl> end
global function cublasDgemvStridedBatched_64(handle: cublasHandle_t, trans: cublasOperation_t, m: int64, n: int64, alpha: *float64, A: *float64, lda: int64, strideA: clonglong, x: *float64, incx: int64, stridex: clonglong, beta: *float64, y: *float64, incy: int64, stridey: clonglong, batchCount: int64): cublasStatus_t <cimport,nodecl> end
global function cublasCgemvStridedBatched(handle: cublasHandle_t, trans: cublasOperation_t, m: cint, n: cint, alpha: *cuComplex, A: *cuComplex, lda: cint, strideA: clonglong, x: *cuComplex, incx: cint, stridex: clonglong, beta: *cuComplex, y: *cuComplex, incy: cint, stridey: clonglong, batchCount: cint): cublasStatus_t <cimport,nodecl> end
global function cublasCgemvStridedBatched_64(handle: cublasHandle_t, trans: cublasOperation_t, m: int64, n: int64, alpha: *cuComplex, A: *cuComplex, lda: int64, strideA: clonglong, x: *cuComplex, incx: int64, stridex: clonglong, beta: *cuComplex, y: *cuComplex, incy: int64, stridey: clonglong, batchCount: int64): cublasStatus_t <cimport,nodecl> end
global function cublasZgemvStridedBatched(handle: cublasHandle_t, trans: cublasOperation_t, m: cint, n: cint, alpha: *cuDoubleComplex, A: *cuDoubleComplex, lda: cint, strideA: clonglong, x: *cuDoubleComplex, incx: cint, stridex: clonglong, beta: *cuDoubleComplex, y: *cuDoubleComplex, incy: cint, stridey: clonglong, batchCount: cint): cublasStatus_t <cimport,nodecl> end
global function cublasZgemvStridedBatched_64(handle: cublasHandle_t, trans: cublasOperation_t, m: int64, n: int64, alpha: *cuDoubleComplex, A: *cuDoubleComplex, lda: int64, strideA: clonglong, x: *cuDoubleComplex, incx: int64, stridex: clonglong, beta: *cuDoubleComplex, y: *cuDoubleComplex, incy: int64, stridey: clonglong, batchCount: int64): cublasStatus_t <cimport,nodecl> end
global function cublasSgemm_v2(handle: cublasHandle_t, transa: cublasOperation_t, transb: cublasOperation_t, m: cint, n: cint, k: cint, alpha: *float32, A: *float32, lda: cint, B: *float32, ldb: cint, beta: *float32, C: *float32, ldc: cint): cublasStatus_t <cimport,nodecl> end
global function cublasSgemm_v2_64(handle: cublasHandle_t, transa: cublasOperation_t, transb: cublasOperation_t, m: int64, n: int64, k: int64, alpha: *float32, A: *float32, lda: int64, B: *float32, ldb: int64, beta: *float32, C: *float32, ldc: int64): cublasStatus_t <cimport,nodecl> end
global function cublasDgemm_v2(handle: cublasHandle_t, transa: cublasOperation_t, transb: cublasOperation_t, m: cint, n: cint, k: cint, alpha: *float64, A: *float64, lda: cint, B: *float64, ldb: cint, beta: *float64, C: *float64, ldc: cint): cublasStatus_t <cimport,nodecl> end
global function cublasDgemm_v2_64(handle: cublasHandle_t, transa: cublasOperation_t, transb: cublasOperation_t, m: int64, n: int64, k: int64, alpha: *float64, A: *float64, lda: int64, B: *float64, ldb: int64, beta: *float64, C: *float64, ldc: int64): cublasStatus_t <cimport,nodecl> end
global function cublasCgemm_v2(handle: cublasHandle_t, transa: cublasOperation_t, transb: cublasOperation_t, m: cint, n: cint, k: cint, alpha: *cuComplex, A: *cuComplex, lda: cint, B: *cuComplex, ldb: cint, beta: *cuComplex, C: *cuComplex, ldc: cint): cublasStatus_t <cimport,nodecl> end
global function cublasCgemm_v2_64(handle: cublasHandle_t, transa: cublasOperation_t, transb: cublasOperation_t, m: int64, n: int64, k: int64, alpha: *cuComplex, A: *cuComplex, lda: int64, B: *cuComplex, ldb: int64, beta: *cuComplex, C: *cuComplex, ldc: int64): cublasStatus_t <cimport,nodecl> end
global function cublasCgemm3m(handle: cublasHandle_t, transa: cublasOperation_t, transb: cublasOperation_t, m: cint, n: cint, k: cint, alpha: *cuComplex, A: *cuComplex, lda: cint, B: *cuComplex, ldb: cint, beta: *cuComplex, C: *cuComplex, ldc: cint): cublasStatus_t <cimport,nodecl> end
global function cublasCgemm3m_64(handle: cublasHandle_t, transa: cublasOperation_t, transb: cublasOperation_t, m: int64, n: int64, k: int64, alpha: *cuComplex, A: *cuComplex, lda: int64, B: *cuComplex, ldb: int64, beta: *cuComplex, C: *cuComplex, ldc: int64): cublasStatus_t <cimport,nodecl> end
global function cublasCgemm3mEx(handle: cublasHandle_t, transa: cublasOperation_t, transb: cublasOperation_t, m: cint, n: cint, k: cint, alpha: *cuComplex, A: pointer, Atype: cudaDataType, lda: cint, B: pointer, Btype: cudaDataType, ldb: cint, beta: *cuComplex, C: pointer, Ctype: cudaDataType, ldc: cint): cublasStatus_t <cimport,nodecl> end
global function cublasCgemm3mEx_64(handle: cublasHandle_t, transa: cublasOperation_t, transb: cublasOperation_t, m: int64, n: int64, k: int64, alpha: *cuComplex, A: pointer, Atype: cudaDataType, lda: int64, B: pointer, Btype: cudaDataType, ldb: int64, beta: *cuComplex, C: pointer, Ctype: cudaDataType, ldc: int64): cublasStatus_t <cimport,nodecl> end
global function cublasZgemm_v2(handle: cublasHandle_t, transa: cublasOperation_t, transb: cublasOperation_t, m: cint, n: cint, k: cint, alpha: *cuDoubleComplex, A: *cuDoubleComplex, lda: cint, B: *cuDoubleComplex, ldb: cint, beta: *cuDoubleComplex, C: *cuDoubleComplex, ldc: cint): cublasStatus_t <cimport,nodecl> end
global function cublasZgemm_v2_64(handle: cublasHandle_t, transa: cublasOperation_t, transb: cublasOperation_t, m: int64, n: int64, k: int64, alpha: *cuDoubleComplex, A: *cuDoubleComplex, lda: int64, B: *cuDoubleComplex, ldb: int64, beta: *cuDoubleComplex, C: *cuDoubleComplex, ldc: int64): cublasStatus_t <cimport,nodecl> end
global function cublasZgemm3m(handle: cublasHandle_t, transa: cublasOperation_t, transb: cublasOperation_t, m: cint, n: cint, k: cint, alpha: *cuDoubleComplex, A: *cuDoubleComplex, lda: cint, B: *cuDoubleComplex, ldb: cint, beta: *cuDoubleComplex, C: *cuDoubleComplex, ldc: cint): cublasStatus_t <cimport,nodecl> end
global function cublasZgemm3m_64(handle: cublasHandle_t, transa: cublasOperation_t, transb: cublasOperation_t, m: int64, n: int64, k: int64, alpha: *cuDoubleComplex, A: *cuDoubleComplex, lda: int64, B: *cuDoubleComplex, ldb: int64, beta: *cuDoubleComplex, C: *cuDoubleComplex, ldc: int64): cublasStatus_t <cimport,nodecl> end
global function cublasSgemmEx(handle: cublasHandle_t, transa: cublasOperation_t, transb: cublasOperation_t, m: cint, n: cint, k: cint, alpha: *float32, A: pointer, Atype: cudaDataType, lda: cint, B: pointer, Btype: cudaDataType, ldb: cint, beta: *float32, C: pointer, Ctype: cudaDataType, ldc: cint): cublasStatus_t <cimport,nodecl> end
global function cublasSgemmEx_64(handle: cublasHandle_t, transa: cublasOperation_t, transb: cublasOperation_t, m: int64, n: int64, k: int64, alpha: *float32, A: pointer, Atype: cudaDataType, lda: int64, B: pointer, Btype: cudaDataType, ldb: int64, beta: *float32, C: pointer, Ctype: cudaDataType, ldc: int64): cublasStatus_t <cimport,nodecl> end
global function cublasGemmEx(handle: cublasHandle_t, transa: cublasOperation_t, transb: cublasOperation_t, m: cint, n: cint, k: cint, alpha: pointer, A: pointer, Atype: cudaDataType, lda: cint, B: pointer, Btype: cudaDataType, ldb: cint, beta: pointer, C: pointer, Ctype: cudaDataType, ldc: cint, computeType: cublasComputeType_t, algo: cublasGemmAlgo_t): cublasStatus_t <cimport,nodecl> end
global function cublasGemmEx_64(handle: cublasHandle_t, transa: cublasOperation_t, transb: cublasOperation_t, m: int64, n: int64, k: int64, alpha: pointer, A: pointer, Atype: cudaDataType, lda: int64, B: pointer, Btype: cudaDataType, ldb: int64, beta: pointer, C: pointer, Ctype: cudaDataType, ldc: int64, computeType: cublasComputeType_t, algo: cublasGemmAlgo_t): cublasStatus_t <cimport,nodecl> end
global function cublasCgemmEx(handle: cublasHandle_t, transa: cublasOperation_t, transb: cublasOperation_t, m: cint, n: cint, k: cint, alpha: *cuComplex, A: pointer, Atype: cudaDataType, lda: cint, B: pointer, Btype: cudaDataType, ldb: cint, beta: *cuComplex, C: pointer, Ctype: cudaDataType, ldc: cint): cublasStatus_t <cimport,nodecl> end
global function cublasCgemmEx_64(handle: cublasHandle_t, transa: cublasOperation_t, transb: cublasOperation_t, m: int64, n: int64, k: int64, alpha: *cuComplex, A: pointer, Atype: cudaDataType, lda: int64, B: pointer, Btype: cudaDataType, ldb: int64, beta: *cuComplex, C: pointer, Ctype: cudaDataType, ldc: int64): cublasStatus_t <cimport,nodecl> end
global function cublasSsyrk_v2(handle: cublasHandle_t, uplo: cublasFillMode_t, trans: cublasOperation_t, n: cint, k: cint, alpha: *float32, A: *float32, lda: cint, beta: *float32, C: *float32, ldc: cint): cublasStatus_t <cimport,nodecl> end
global function cublasSsyrk_v2_64(handle: cublasHandle_t, uplo: cublasFillMode_t, trans: cublasOperation_t, n: int64, k: int64, alpha: *float32, A: *float32, lda: int64, beta: *float32, C: *float32, ldc: int64): cublasStatus_t <cimport,nodecl> end
global function cublasDsyrk_v2(handle: cublasHandle_t, uplo: cublasFillMode_t, trans: cublasOperation_t, n: cint, k: cint, alpha: *float64, A: *float64, lda: cint, beta: *float64, C: *float64, ldc: cint): cublasStatus_t <cimport,nodecl> end
global function cublasDsyrk_v2_64(handle: cublasHandle_t, uplo: cublasFillMode_t, trans: cublasOperation_t, n: int64, k: int64, alpha: *float64, A: *float64, lda: int64, beta: *float64, C: *float64, ldc: int64): cublasStatus_t <cimport,nodecl> end
global function cublasCsyrk_v2(handle: cublasHandle_t, uplo: cublasFillMode_t, trans: cublasOperation_t, n: cint, k: cint, alpha: *cuComplex, A: *cuComplex, lda: cint, beta: *cuComplex, C: *cuComplex, ldc: cint): cublasStatus_t <cimport,nodecl> end
global function cublasCsyrk_v2_64(handle: cublasHandle_t, uplo: cublasFillMode_t, trans: cublasOperation_t, n: int64, k: int64, alpha: *cuComplex, A: *cuComplex, lda: int64, beta: *cuComplex, C: *cuComplex, ldc: int64): cublasStatus_t <cimport,nodecl> end
global function cublasZsyrk_v2(handle: cublasHandle_t, uplo: cublasFillMode_t, trans: cublasOperation_t, n: cint, k: cint, alpha: *cuDoubleComplex, A: *cuDoubleComplex, lda: cint, beta: *cuDoubleComplex, C: *cuDoubleComplex, ldc: cint): cublasStatus_t <cimport,nodecl> end
global function cublasZsyrk_v2_64(handle: cublasHandle_t, uplo: cublasFillMode_t, trans: cublasOperation_t, n: int64, k: int64, alpha: *cuDoubleComplex, A: *cuDoubleComplex, lda: int64, beta: *cuDoubleComplex, C: *cuDoubleComplex, ldc: int64): cublasStatus_t <cimport,nodecl> end
global function cublasCsyrkEx(handle: cublasHandle_t, uplo: cublasFillMode_t, trans: cublasOperation_t, n: cint, k: cint, alpha: *cuComplex, A: pointer, Atype: cudaDataType, lda: cint, beta: *cuComplex, C: pointer, Ctype: cudaDataType, ldc: cint): cublasStatus_t <cimport,nodecl> end
global function cublasCsyrkEx_64(handle: cublasHandle_t, uplo: cublasFillMode_t, trans: cublasOperation_t, n: int64, k: int64, alpha: *cuComplex, A: pointer, Atype: cudaDataType, lda: int64, beta: *cuComplex, C: pointer, Ctype: cudaDataType, ldc: int64): cublasStatus_t <cimport,nodecl> end
global function cublasCsyrk3mEx(handle: cublasHandle_t, uplo: cublasFillMode_t, trans: cublasOperation_t, n: cint, k: cint, alpha: *cuComplex, A: pointer, Atype: cudaDataType, lda: cint, beta: *cuComplex, C: pointer, Ctype: cudaDataType, ldc: cint): cublasStatus_t <cimport,nodecl> end
global function cublasCsyrk3mEx_64(handle: cublasHandle_t, uplo: cublasFillMode_t, trans: cublasOperation_t, n: int64, k: int64, alpha: *cuComplex, A: pointer, Atype: cudaDataType, lda: int64, beta: *cuComplex, C: pointer, Ctype: cudaDataType, ldc: int64): cublasStatus_t <cimport,nodecl> end
global function cublasCherk_v2(handle: cublasHandle_t, uplo: cublasFillMode_t, trans: cublasOperation_t, n: cint, k: cint, alpha: *float32, A: *cuComplex, lda: cint, beta: *float32, C: *cuComplex, ldc: cint): cublasStatus_t <cimport,nodecl> end
global function cublasCherk_v2_64(handle: cublasHandle_t, uplo: cublasFillMode_t, trans: cublasOperation_t, n: int64, k: int64, alpha: *float32, A: *cuComplex, lda: int64, beta: *float32, C: *cuComplex, ldc: int64): cublasStatus_t <cimport,nodecl> end
global function cublasZherk_v2(handle: cublasHandle_t, uplo: cublasFillMode_t, trans: cublasOperation_t, n: cint, k: cint, alpha: *float64, A: *cuDoubleComplex, lda: cint, beta: *float64, C: *cuDoubleComplex, ldc: cint): cublasStatus_t <cimport,nodecl> end
global function cublasZherk_v2_64(handle: cublasHandle_t, uplo: cublasFillMode_t, trans: cublasOperation_t, n: int64, k: int64, alpha: *float64, A: *cuDoubleComplex, lda: int64, beta: *float64, C: *cuDoubleComplex, ldc: int64): cublasStatus_t <cimport,nodecl> end
global function cublasCherkEx(handle: cublasHandle_t, uplo: cublasFillMode_t, trans: cublasOperation_t, n: cint, k: cint, alpha: *float32, A: pointer, Atype: cudaDataType, lda: cint, beta: *float32, C: pointer, Ctype: cudaDataType, ldc: cint): cublasStatus_t <cimport,nodecl> end
global function cublasCherkEx_64(handle: cublasHandle_t, uplo: cublasFillMode_t, trans: cublasOperation_t, n: int64, k: int64, alpha: *float32, A: pointer, Atype: cudaDataType, lda: int64, beta: *float32, C: pointer, Ctype: cudaDataType, ldc: int64): cublasStatus_t <cimport,nodecl> end
global function cublasCherk3mEx(handle: cublasHandle_t, uplo: cublasFillMode_t, trans: cublasOperation_t, n: cint, k: cint, alpha: *float32, A: pointer, Atype: cudaDataType, lda: cint, beta: *float32, C: pointer, Ctype: cudaDataType, ldc: cint): cublasStatus_t <cimport,nodecl> end
global function cublasCherk3mEx_64(handle: cublasHandle_t, uplo: cublasFillMode_t, trans: cublasOperation_t, n: int64, k: int64, alpha: *float32, A: pointer, Atype: cudaDataType, lda: int64, beta: *float32, C: pointer, Ctype: cudaDataType, ldc: int64): cublasStatus_t <cimport,nodecl> end
global function cublasSsyr2k_v2(handle: cublasHandle_t, uplo: cublasFillMode_t, trans: cublasOperation_t, n: cint, k: cint, alpha: *float32, A: *float32, lda: cint, B: *float32, ldb: cint, beta: *float32, C: *float32, ldc: cint): cublasStatus_t <cimport,nodecl> end
global function cublasSsyr2k_v2_64(handle: cublasHandle_t, uplo: cublasFillMode_t, trans: cublasOperation_t, n: int64, k: int64, alpha: *float32, A: *float32, lda: int64, B: *float32, ldb: int64, beta: *float32, C: *float32, ldc: int64): cublasStatus_t <cimport,nodecl> end
global function cublasDsyr2k_v2(handle: cublasHandle_t, uplo: cublasFillMode_t, trans: cublasOperation_t, n: cint, k: cint, alpha: *float64, A: *float64, lda: cint, B: *float64, ldb: cint, beta: *float64, C: *float64, ldc: cint): cublasStatus_t <cimport,nodecl> end
global function cublasDsyr2k_v2_64(handle: cublasHandle_t, uplo: cublasFillMode_t, trans: cublasOperation_t, n: int64, k: int64, alpha: *float64, A: *float64, lda: int64, B: *float64, ldb: int64, beta: *float64, C: *float64, ldc: int64): cublasStatus_t <cimport,nodecl> end
global function cublasCsyr2k_v2(handle: cublasHandle_t, uplo: cublasFillMode_t, trans: cublasOperation_t, n: cint, k: cint, alpha: *cuComplex, A: *cuComplex, lda: cint, B: *cuComplex, ldb: cint, beta: *cuComplex, C: *cuComplex, ldc: cint): cublasStatus_t <cimport,nodecl> end
global function cublasCsyr2k_v2_64(handle: cublasHandle_t, uplo: cublasFillMode_t, trans: cublasOperation_t, n: int64, k: int64, alpha: *cuComplex, A: *cuComplex, lda: int64, B: *cuComplex, ldb: int64, beta: *cuComplex, C: *cuComplex, ldc: int64): cublasStatus_t <cimport,nodecl> end
global function cublasZsyr2k_v2(handle: cublasHandle_t, uplo: cublasFillMode_t, trans: cublasOperation_t, n: cint, k: cint, alpha: *cuDoubleComplex, A: *cuDoubleComplex, lda: cint, B: *cuDoubleComplex, ldb: cint, beta: *cuDoubleComplex, C: *cuDoubleComplex, ldc: cint): cublasStatus_t <cimport,nodecl> end
global function cublasZsyr2k_v2_64(handle: cublasHandle_t, uplo: cublasFillMode_t, trans: cublasOperation_t, n: int64, k: int64, alpha: *cuDoubleComplex, A: *cuDoubleComplex, lda: int64, B: *cuDoubleComplex, ldb: int64, beta: *cuDoubleComplex, C: *cuDoubleComplex, ldc: int64): cublasStatus_t <cimport,nodecl> end
global function cublasCher2k_v2(handle: cublasHandle_t, uplo: cublasFillMode_t, trans: cublasOperation_t, n: cint, k: cint, alpha: *cuComplex, A: *cuComplex, lda: cint, B: *cuComplex, ldb: cint, beta: *float32, C: *cuComplex, ldc: cint): cublasStatus_t <cimport,nodecl> end
global function cublasCher2k_v2_64(handle: cublasHandle_t, uplo: cublasFillMode_t, trans: cublasOperation_t, n: int64, k: int64, alpha: *cuComplex, A: *cuComplex, lda: int64, B: *cuComplex, ldb: int64, beta: *float32, C: *cuComplex, ldc: int64): cublasStatus_t <cimport,nodecl> end
global function cublasZher2k_v2(handle: cublasHandle_t, uplo: cublasFillMode_t, trans: cublasOperation_t, n: cint, k: cint, alpha: *cuDoubleComplex, A: *cuDoubleComplex, lda: cint, B: *cuDoubleComplex, ldb: cint, beta: *float64, C: *cuDoubleComplex, ldc: cint): cublasStatus_t <cimport,nodecl> end
global function cublasZher2k_v2_64(handle: cublasHandle_t, uplo: cublasFillMode_t, trans: cublasOperation_t, n: int64, k: int64, alpha: *cuDoubleComplex, A: *cuDoubleComplex, lda: int64, B: *cuDoubleComplex, ldb: int64, beta: *float64, C: *cuDoubleComplex, ldc: int64): cublasStatus_t <cimport,nodecl> end
global function cublasSsyrkx(handle: cublasHandle_t, uplo: cublasFillMode_t, trans: cublasOperation_t, n: cint, k: cint, alpha: *float32, A: *float32, lda: cint, B: *float32, ldb: cint, beta: *float32, C: *float32, ldc: cint): cublasStatus_t <cimport,nodecl> end
global function cublasSsyrkx_64(handle: cublasHandle_t, uplo: cublasFillMode_t, trans: cublasOperation_t, n: int64, k: int64, alpha: *float32, A: *float32, lda: int64, B: *float32, ldb: int64, beta: *float32, C: *float32, ldc: int64): cublasStatus_t <cimport,nodecl> end
global function cublasDsyrkx(handle: cublasHandle_t, uplo: cublasFillMode_t, trans: cublasOperation_t, n: cint, k: cint, alpha: *float64, A: *float64, lda: cint, B: *float64, ldb: cint, beta: *float64, C: *float64, ldc: cint): cublasStatus_t <cimport,nodecl> end
global function cublasDsyrkx_64(handle: cublasHandle_t, uplo: cublasFillMode_t, trans: cublasOperation_t, n: int64, k: int64, alpha: *float64, A: *float64, lda: int64, B: *float64, ldb: int64, beta: *float64, C: *float64, ldc: int64): cublasStatus_t <cimport,nodecl> end
global function cublasCsyrkx(handle: cublasHandle_t, uplo: cublasFillMode_t, trans: cublasOperation_t, n: cint, k: cint, alpha: *cuComplex, A: *cuComplex, lda: cint, B: *cuComplex, ldb: cint, beta: *cuComplex, C: *cuComplex, ldc: cint): cublasStatus_t <cimport,nodecl> end
global function cublasCsyrkx_64(handle: cublasHandle_t, uplo: cublasFillMode_t, trans: cublasOperation_t, n: int64, k: int64, alpha: *cuComplex, A: *cuComplex, lda: int64, B: *cuComplex, ldb: int64, beta: *cuComplex, C: *cuComplex, ldc: int64): cublasStatus_t <cimport,nodecl> end
global function cublasZsyrkx(handle: cublasHandle_t, uplo: cublasFillMode_t, trans: cublasOperation_t, n: cint, k: cint, alpha: *cuDoubleComplex, A: *cuDoubleComplex, lda: cint, B: *cuDoubleComplex, ldb: cint, beta: *cuDoubleComplex, C: *cuDoubleComplex, ldc: cint): cublasStatus_t <cimport,nodecl> end
global function cublasZsyrkx_64(handle: cublasHandle_t, uplo: cublasFillMode_t, trans: cublasOperation_t, n: int64, k: int64, alpha: *cuDoubleComplex, A: *cuDoubleComplex, lda: int64, B: *cuDoubleComplex, ldb: int64, beta: *cuDoubleComplex, C: *cuDoubleComplex, ldc: int64): cublasStatus_t <cimport,nodecl> end
global function cublasCherkx(handle: cublasHandle_t, uplo: cublasFillMode_t, trans: cublasOperation_t, n: cint, k: cint, alpha: *cuComplex, A: *cuComplex, lda: cint, B: *cuComplex, ldb: cint, beta: *float32, C: *cuComplex, ldc: cint): cublasStatus_t <cimport,nodecl> end
global function cublasCherkx_64(handle: cublasHandle_t, uplo: cublasFillMode_t, trans: cublasOperation_t, n: int64, k: int64, alpha: *cuComplex, A: *cuComplex, lda: int64, B: *cuComplex, ldb: int64, beta: *float32, C: *cuComplex, ldc: int64): cublasStatus_t <cimport,nodecl> end
global function cublasZherkx(handle: cublasHandle_t, uplo: cublasFillMode_t, trans: cublasOperation_t, n: cint, k: cint, alpha: *cuDoubleComplex, A: *cuDoubleComplex, lda: cint, B: *cuDoubleComplex, ldb: cint, beta: *float64, C: *cuDoubleComplex, ldc: cint): cublasStatus_t <cimport,nodecl> end
global function cublasZherkx_64(handle: cublasHandle_t, uplo: cublasFillMode_t, trans: cublasOperation_t, n: int64, k: int64, alpha: *cuDoubleComplex, A: *cuDoubleComplex, lda: int64, B: *cuDoubleComplex, ldb: int64, beta: *float64, C: *cuDoubleComplex, ldc: int64): cublasStatus_t <cimport,nodecl> end
global function cublasSsymm_v2(handle: cublasHandle_t, side: cublasSideMode_t, uplo: cublasFillMode_t, m: cint, n: cint, alpha: *float32, A: *float32, lda: cint, B: *float32, ldb: cint, beta: *float32, C: *float32, ldc: cint): cublasStatus_t <cimport,nodecl> end
global function cublasSsymm_v2_64(handle: cublasHandle_t, side: cublasSideMode_t, uplo: cublasFillMode_t, m: int64, n: int64, alpha: *float32, A: *float32, lda: int64, B: *float32, ldb: int64, beta: *float32, C: *float32, ldc: int64): cublasStatus_t <cimport,nodecl> end
global function cublasDsymm_v2(handle: cublasHandle_t, side: cublasSideMode_t, uplo: cublasFillMode_t, m: cint, n: cint, alpha: *float64, A: *float64, lda: cint, B: *float64, ldb: cint, beta: *float64, C: *float64, ldc: cint): cublasStatus_t <cimport,nodecl> end
global function cublasDsymm_v2_64(handle: cublasHandle_t, side: cublasSideMode_t, uplo: cublasFillMode_t, m: int64, n: int64, alpha: *float64, A: *float64, lda: int64, B: *float64, ldb: int64, beta: *float64, C: *float64, ldc: int64): cublasStatus_t <cimport,nodecl> end
global function cublasCsymm_v2(handle: cublasHandle_t, side: cublasSideMode_t, uplo: cublasFillMode_t, m: cint, n: cint, alpha: *cuComplex, A: *cuComplex, lda: cint, B: *cuComplex, ldb: cint, beta: *cuComplex, C: *cuComplex, ldc: cint): cublasStatus_t <cimport,nodecl> end
global function cublasCsymm_v2_64(handle: cublasHandle_t, side: cublasSideMode_t, uplo: cublasFillMode_t, m: int64, n: int64, alpha: *cuComplex, A: *cuComplex, lda: int64, B: *cuComplex, ldb: int64, beta: *cuComplex, C: *cuComplex, ldc: int64): cublasStatus_t <cimport,nodecl> end
global function cublasZsymm_v2(handle: cublasHandle_t, side: cublasSideMode_t, uplo: cublasFillMode_t, m: cint, n: cint, alpha: *cuDoubleComplex, A: *cuDoubleComplex, lda: cint, B: *cuDoubleComplex, ldb: cint, beta: *cuDoubleComplex, C: *cuDoubleComplex, ldc: cint): cublasStatus_t <cimport,nodecl> end
global function cublasZsymm_v2_64(handle: cublasHandle_t, side: cublasSideMode_t, uplo: cublasFillMode_t, m: int64, n: int64, alpha: *cuDoubleComplex, A: *cuDoubleComplex, lda: int64, B: *cuDoubleComplex, ldb: int64, beta: *cuDoubleComplex, C: *cuDoubleComplex, ldc: int64): cublasStatus_t <cimport,nodecl> end
global function cublasChemm_v2(handle: cublasHandle_t, side: cublasSideMode_t, uplo: cublasFillMode_t, m: cint, n: cint, alpha: *cuComplex, A: *cuComplex, lda: cint, B: *cuComplex, ldb: cint, beta: *cuComplex, C: *cuComplex, ldc: cint): cublasStatus_t <cimport,nodecl> end
global function cublasChemm_v2_64(handle: cublasHandle_t, side: cublasSideMode_t, uplo: cublasFillMode_t, m: int64, n: int64, alpha: *cuComplex, A: *cuComplex, lda: int64, B: *cuComplex, ldb: int64, beta: *cuComplex, C: *cuComplex, ldc: int64): cublasStatus_t <cimport,nodecl> end
global function cublasZhemm_v2(handle: cublasHandle_t, side: cublasSideMode_t, uplo: cublasFillMode_t, m: cint, n: cint, alpha: *cuDoubleComplex, A: *cuDoubleComplex, lda: cint, B: *cuDoubleComplex, ldb: cint, beta: *cuDoubleComplex, C: *cuDoubleComplex, ldc: cint): cublasStatus_t <cimport,nodecl> end
global function cublasZhemm_v2_64(handle: cublasHandle_t, side: cublasSideMode_t, uplo: cublasFillMode_t, m: int64, n: int64, alpha: *cuDoubleComplex, A: *cuDoubleComplex, lda: int64, B: *cuDoubleComplex, ldb: int64, beta: *cuDoubleComplex, C: *cuDoubleComplex, ldc: int64): cublasStatus_t <cimport,nodecl> end
global function cublasStrsm_v2(handle: cublasHandle_t, side: cublasSideMode_t, uplo: cublasFillMode_t, trans: cublasOperation_t, diag: cublasDiagType_t, m: cint, n: cint, alpha: *float32, A: *float32, lda: cint, B: *float32, ldb: cint): cublasStatus_t <cimport,nodecl> end
global function cublasStrsm_v2_64(handle: cublasHandle_t, side: cublasSideMode_t, uplo: cublasFillMode_t, trans: cublasOperation_t, diag: cublasDiagType_t, m: int64, n: int64, alpha: *float32, A: *float32, lda: int64, B: *float32, ldb: int64): cublasStatus_t <cimport,nodecl> end
global function cublasDtrsm_v2(handle: cublasHandle_t, side: cublasSideMode_t, uplo: cublasFillMode_t, trans: cublasOperation_t, diag: cublasDiagType_t, m: cint, n: cint, alpha: *float64, A: *float64, lda: cint, B: *float64, ldb: cint): cublasStatus_t <cimport,nodecl> end
global function cublasDtrsm_v2_64(handle: cublasHandle_t, side: cublasSideMode_t, uplo: cublasFillMode_t, trans: cublasOperation_t, diag: cublasDiagType_t, m: int64, n: int64, alpha: *float64, A: *float64, lda: int64, B: *float64, ldb: int64): cublasStatus_t <cimport,nodecl> end
global function cublasCtrsm_v2(handle: cublasHandle_t, side: cublasSideMode_t, uplo: cublasFillMode_t, trans: cublasOperation_t, diag: cublasDiagType_t, m: cint, n: cint, alpha: *cuComplex, A: *cuComplex, lda: cint, B: *cuComplex, ldb: cint): cublasStatus_t <cimport,nodecl> end
global function cublasCtrsm_v2_64(handle: cublasHandle_t, side: cublasSideMode_t, uplo: cublasFillMode_t, trans: cublasOperation_t, diag: cublasDiagType_t, m: int64, n: int64, alpha: *cuComplex, A: *cuComplex, lda: int64, B: *cuComplex, ldb: int64): cublasStatus_t <cimport,nodecl> end
global function cublasZtrsm_v2(handle: cublasHandle_t, side: cublasSideMode_t, uplo: cublasFillMode_t, trans: cublasOperation_t, diag: cublasDiagType_t, m: cint, n: cint, alpha: *cuDoubleComplex, A: *cuDoubleComplex, lda: cint, B: *cuDoubleComplex, ldb: cint): cublasStatus_t <cimport,nodecl> end
global function cublasZtrsm_v2_64(handle: cublasHandle_t, side: cublasSideMode_t, uplo: cublasFillMode_t, trans: cublasOperation_t, diag: cublasDiagType_t, m: int64, n: int64, alpha: *cuDoubleComplex, A: *cuDoubleComplex, lda: int64, B: *cuDoubleComplex, ldb: int64): cublasStatus_t <cimport,nodecl> end
global function cublasStrmm_v2(handle: cublasHandle_t, side: cublasSideMode_t, uplo: cublasFillMode_t, trans: cublasOperation_t, diag: cublasDiagType_t, m: cint, n: cint, alpha: *float32, A: *float32, lda: cint, B: *float32, ldb: cint, C: *float32, ldc: cint): cublasStatus_t <cimport,nodecl> end
global function cublasStrmm_v2_64(handle: cublasHandle_t, side: cublasSideMode_t, uplo: cublasFillMode_t, trans: cublasOperation_t, diag: cublasDiagType_t, m: int64, n: int64, alpha: *float32, A: *float32, lda: int64, B: *float32, ldb: int64, C: *float32, ldc: int64): cublasStatus_t <cimport,nodecl> end
global function cublasDtrmm_v2(handle: cublasHandle_t, side: cublasSideMode_t, uplo: cublasFillMode_t, trans: cublasOperation_t, diag: cublasDiagType_t, m: cint, n: cint, alpha: *float64, A: *float64, lda: cint, B: *float64, ldb: cint, C: *float64, ldc: cint): cublasStatus_t <cimport,nodecl> end
global function cublasDtrmm_v2_64(handle: cublasHandle_t, side: cublasSideMode_t, uplo: cublasFillMode_t, trans: cublasOperation_t, diag: cublasDiagType_t, m: int64, n: int64, alpha: *float64, A: *float64, lda: int64, B: *float64, ldb: int64, C: *float64, ldc: int64): cublasStatus_t <cimport,nodecl> end
global function cublasCtrmm_v2(handle: cublasHandle_t, side: cublasSideMode_t, uplo: cublasFillMode_t, trans: cublasOperation_t, diag: cublasDiagType_t, m: cint, n: cint, alpha: *cuComplex, A: *cuComplex, lda: cint, B: *cuComplex, ldb: cint, C: *cuComplex, ldc: cint): cublasStatus_t <cimport,nodecl> end
global function cublasCtrmm_v2_64(handle: cublasHandle_t, side: cublasSideMode_t, uplo: cublasFillMode_t, trans: cublasOperation_t, diag: cublasDiagType_t, m: int64, n: int64, alpha: *cuComplex, A: *cuComplex, lda: int64, B: *cuComplex, ldb: int64, C: *cuComplex, ldc: int64): cublasStatus_t <cimport,nodecl> end
global function cublasZtrmm_v2(handle: cublasHandle_t, side: cublasSideMode_t, uplo: cublasFillMode_t, trans: cublasOperation_t, diag: cublasDiagType_t, m: cint, n: cint, alpha: *cuDoubleComplex, A: *cuDoubleComplex, lda: cint, B: *cuDoubleComplex, ldb: cint, C: *cuDoubleComplex, ldc: cint): cublasStatus_t <cimport,nodecl> end
global function cublasZtrmm_v2_64(handle: cublasHandle_t, side: cublasSideMode_t, uplo: cublasFillMode_t, trans: cublasOperation_t, diag: cublasDiagType_t, m: int64, n: int64, alpha: *cuDoubleComplex, A: *cuDoubleComplex, lda: int64, B: *cuDoubleComplex, ldb: int64, C: *cuDoubleComplex, ldc: int64): cublasStatus_t <cimport,nodecl> end
global function cublasSgemmBatched(handle: cublasHandle_t, transa: cublasOperation_t, transb: cublasOperation_t, m: cint, n: cint, k: cint, alpha: *float32, Aarray: *[0]*float32, lda: cint, Barray: *[0]*float32, ldb: cint, beta: *float32, Carray: *[0]*float32, ldc: cint, batchCount: cint): cublasStatus_t <cimport,nodecl> end
global function cublasSgemmBatched_64(handle: cublasHandle_t, transa: cublasOperation_t, transb: cublasOperation_t, m: int64, n: int64, k: int64, alpha: *float32, Aarray: *[0]*float32, lda: int64, Barray: *[0]*float32, ldb: int64, beta: *float32, Carray: *[0]*float32, ldc: int64, batchCount: int64): cublasStatus_t <cimport,nodecl> end
global function cublasDgemmBatched(handle: cublasHandle_t, transa: cublasOperation_t, transb: cublasOperation_t, m: cint, n: cint, k: cint, alpha: *float64, Aarray: *[0]*float64, lda: cint, Barray: *[0]*float64, ldb: cint, beta: *float64, Carray: *[0]*float64, ldc: cint, batchCount: cint): cublasStatus_t <cimport,nodecl> end
global function cublasDgemmBatched_64(handle: cublasHandle_t, transa: cublasOperation_t, transb: cublasOperation_t, m: int64, n: int64, k: int64, alpha: *float64, Aarray: *[0]*float64, lda: int64, Barray: *[0]*float64, ldb: int64, beta: *float64, Carray: *[0]*float64, ldc: int64, batchCount: int64): cublasStatus_t <cimport,nodecl> end
global function cublasCgemmBatched(handle: cublasHandle_t, transa: cublasOperation_t, transb: cublasOperation_t, m: cint, n: cint, k: cint, alpha: *cuComplex, Aarray: *[0]*cuComplex, lda: cint, Barray: *[0]*cuComplex, ldb: cint, beta: *cuComplex, Carray: *[0]*cuComplex, ldc: cint, batchCount: cint): cublasStatus_t <cimport,nodecl> end
global function cublasCgemmBatched_64(handle: cublasHandle_t, transa: cublasOperation_t, transb: cublasOperation_t, m: int64, n: int64, k: int64, alpha: *cuComplex, Aarray: *[0]*cuComplex, lda: int64, Barray: *[0]*cuComplex, ldb: int64, beta: *cuComplex, Carray: *[0]*cuComplex, ldc: int64, batchCount: int64): cublasStatus_t <cimport,nodecl> end
global function cublasCgemm3mBatched(handle: cublasHandle_t, transa: cublasOperation_t, transb: cublasOperation_t, m: cint, n: cint, k: cint, alpha: *cuComplex, Aarray: *[0]*cuComplex, lda: cint, Barray: *[0]*cuComplex, ldb: cint, beta: *cuComplex, Carray: *[0]*cuComplex, ldc: cint, batchCount: cint): cublasStatus_t <cimport,nodecl> end
global function cublasCgemm3mBatched_64(handle: cublasHandle_t, transa: cublasOperation_t, transb: cublasOperation_t, m: int64, n: int64, k: int64, alpha: *cuComplex, Aarray: *[0]*cuComplex, lda: int64, Barray: *[0]*cuComplex, ldb: int64, beta: *cuComplex, Carray: *[0]*cuComplex, ldc: int64, batchCount: int64): cublasStatus_t <cimport,nodecl> end
global function cublasZgemmBatched(handle: cublasHandle_t, transa: cublasOperation_t, transb: cublasOperation_t, m: cint, n: cint, k: cint, alpha: *cuDoubleComplex, Aarray: *[0]*cuDoubleComplex, lda: cint, Barray: *[0]*cuDoubleComplex, ldb: cint, beta: *cuDoubleComplex, Carray: *[0]*cuDoubleComplex, ldc: cint, batchCount: cint): cublasStatus_t <cimport,nodecl> end
global function cublasZgemmBatched_64(handle: cublasHandle_t, transa: cublasOperation_t, transb: cublasOperation_t, m: int64, n: int64, k: int64, alpha: *cuDoubleComplex, Aarray: *[0]*cuDoubleComplex, lda: int64, Barray: *[0]*cuDoubleComplex, ldb: int64, beta: *cuDoubleComplex, Carray: *[0]*cuDoubleComplex, ldc: int64, batchCount: int64): cublasStatus_t <cimport,nodecl> end
global function cublasSgemmStridedBatched(handle: cublasHandle_t, transa: cublasOperation_t, transb: cublasOperation_t, m: cint, n: cint, k: cint, alpha: *float32, A: *float32, lda: cint, strideA: clonglong, B: *float32, ldb: cint, strideB: clonglong, beta: *float32, C: *float32, ldc: cint, strideC: clonglong, batchCount: cint): cublasStatus_t <cimport,nodecl> end
global function cublasSgemmStridedBatched_64(handle: cublasHandle_t, transa: cublasOperation_t, transb: cublasOperation_t, m: int64, n: int64, k: int64, alpha: *float32, A: *float32, lda: int64, strideA: clonglong, B: *float32, ldb: int64, strideB: clonglong, beta: *float32, C: *float32, ldc: int64, strideC: clonglong, batchCount: int64): cublasStatus_t <cimport,nodecl> end
global function cublasDgemmStridedBatched(handle: cublasHandle_t, transa: cublasOperation_t, transb: cublasOperation_t, m: cint, n: cint, k: cint, alpha: *float64, A: *float64, lda: cint, strideA: clonglong, B: *float64, ldb: cint, strideB: clonglong, beta: *float64, C: *float64, ldc: cint, strideC: clonglong, batchCount: cint): cublasStatus_t <cimport,nodecl> end
global function cublasDgemmStridedBatched_64(handle: cublasHandle_t, transa: cublasOperation_t, transb: cublasOperation_t, m: int64, n: int64, k: int64, alpha: *float64, A: *float64, lda: int64, strideA: clonglong, B: *float64, ldb: int64, strideB: clonglong, beta: *float64, C: *float64, ldc: int64, strideC: clonglong, batchCount: int64): cublasStatus_t <cimport,nodecl> end
global function cublasCgemmStridedBatched(handle: cublasHandle_t, transa: cublasOperation_t, transb: cublasOperation_t, m: cint, n: cint, k: cint, alpha: *cuComplex, A: *cuComplex, lda: cint, strideA: clonglong, B: *cuComplex, ldb: cint, strideB: clonglong, beta: *cuComplex, C: *cuComplex, ldc: cint, strideC: clonglong, batchCount: cint): cublasStatus_t <cimport,nodecl> end
global function cublasCgemmStridedBatched_64(handle: cublasHandle_t, transa: cublasOperation_t, transb: cublasOperation_t, m: int64, n: int64, k: int64, alpha: *cuComplex, A: *cuComplex, lda: int64, strideA: clonglong, B: *cuComplex, ldb: int64, strideB: clonglong, beta: *cuComplex, C: *cuComplex, ldc: int64, strideC: clonglong, batchCount: int64): cublasStatus_t <cimport,nodecl> end
global function cublasCgemm3mStridedBatched(handle: cublasHandle_t, transa: cublasOperation_t, transb: cublasOperation_t, m: cint, n: cint, k: cint, alpha: *cuComplex, A: *cuComplex, lda: cint, strideA: clonglong, B: *cuComplex, ldb: cint, strideB: clonglong, beta: *cuComplex, C: *cuComplex, ldc: cint, strideC: clonglong, batchCount: cint): cublasStatus_t <cimport,nodecl> end
global function cublasCgemm3mStridedBatched_64(handle: cublasHandle_t, transa: cublasOperation_t, transb: cublasOperation_t, m: int64, n: int64, k: int64, alpha: *cuComplex, A: *cuComplex, lda: int64, strideA: clonglong, B: *cuComplex, ldb: int64, strideB: clonglong, beta: *cuComplex, C: *cuComplex, ldc: int64, strideC: clonglong, batchCount: int64): cublasStatus_t <cimport,nodecl> end
global function cublasZgemmStridedBatched(handle: cublasHandle_t, transa: cublasOperation_t, transb: cublasOperation_t, m: cint, n: cint, k: cint, alpha: *cuDoubleComplex, A: *cuDoubleComplex, lda: cint, strideA: clonglong, B: *cuDoubleComplex, ldb: cint, strideB: clonglong, beta: *cuDoubleComplex, C: *cuDoubleComplex, ldc: cint, strideC: clonglong, batchCount: cint): cublasStatus_t <cimport,nodecl> end
global function cublasZgemmStridedBatched_64(handle: cublasHandle_t, transa: cublasOperation_t, transb: cublasOperation_t, m: int64, n: int64, k: int64, alpha: *cuDoubleComplex, A: *cuDoubleComplex, lda: int64, strideA: clonglong, B: *cuDoubleComplex, ldb: int64, strideB: clonglong, beta: *cuDoubleComplex, C: *cuDoubleComplex, ldc: int64, strideC: clonglong, batchCount: int64): cublasStatus_t <cimport,nodecl> end
global function cublasGemmBatchedEx(handle: cublasHandle_t, transa: cublasOperation_t, transb: cublasOperation_t, m: cint, n: cint, k: cint, alpha: pointer, Aarray: *[0]pointer, Atype: cudaDataType, lda: cint, Barray: *[0]pointer, Btype: cudaDataType, ldb: cint, beta: pointer, Carray: *[0]pointer, Ctype: cudaDataType, ldc: cint, batchCount: cint, computeType: cublasComputeType_t, algo: cublasGemmAlgo_t): cublasStatus_t <cimport,nodecl> end
global function cublasGemmBatchedEx_64(handle: cublasHandle_t, transa: cublasOperation_t, transb: cublasOperation_t, m: int64, n: int64, k: int64, alpha: pointer, Aarray: *[0]pointer, Atype: cudaDataType, lda: int64, Barray: *[0]pointer, Btype: cudaDataType, ldb: int64, beta: pointer, Carray: *[0]pointer, Ctype: cudaDataType, ldc: int64, batchCount: int64, computeType: cublasComputeType_t, algo: cublasGemmAlgo_t): cublasStatus_t <cimport,nodecl> end
global function cublasGemmStridedBatchedEx(handle: cublasHandle_t, transa: cublasOperation_t, transb: cublasOperation_t, m: cint, n: cint, k: cint, alpha: pointer, A: pointer, Atype: cudaDataType, lda: cint, strideA: clonglong, B: pointer, Btype: cudaDataType, ldb: cint, strideB: clonglong, beta: pointer, C: pointer, Ctype: cudaDataType, ldc: cint, strideC: clonglong, batchCount: cint, computeType: cublasComputeType_t, algo: cublasGemmAlgo_t): cublasStatus_t <cimport,nodecl> end
global function cublasGemmStridedBatchedEx_64(handle: cublasHandle_t, transa: cublasOperation_t, transb: cublasOperation_t, m: int64, n: int64, k: int64, alpha: pointer, A: pointer, Atype: cudaDataType, lda: int64, strideA: clonglong, B: pointer, Btype: cudaDataType, ldb: int64, strideB: clonglong, beta: pointer, C: pointer, Ctype: cudaDataType, ldc: int64, strideC: clonglong, batchCount: int64, computeType: cublasComputeType_t, algo: cublasGemmAlgo_t): cublasStatus_t <cimport,nodecl> end
global function cublasSgeam(handle: cublasHandle_t, transa: cublasOperation_t, transb: cublasOperation_t, m: cint, n: cint, alpha: *float32, A: *float32, lda: cint, beta: *float32, B: *float32, ldb: cint, C: *float32, ldc: cint): cublasStatus_t <cimport,nodecl> end
global function cublasSgeam_64(handle: cublasHandle_t, transa: cublasOperation_t, transb: cublasOperation_t, m: int64, n: int64, alpha: *float32, A: *float32, lda: int64, beta: *float32, B: *float32, ldb: int64, C: *float32, ldc: int64): cublasStatus_t <cimport,nodecl> end
global function cublasDgeam(handle: cublasHandle_t, transa: cublasOperation_t, transb: cublasOperation_t, m: cint, n: cint, alpha: *float64, A: *float64, lda: cint, beta: *float64, B: *float64, ldb: cint, C: *float64, ldc: cint): cublasStatus_t <cimport,nodecl> end
global function cublasDgeam_64(handle: cublasHandle_t, transa: cublasOperation_t, transb: cublasOperation_t, m: int64, n: int64, alpha: *float64, A: *float64, lda: int64, beta: *float64, B: *float64, ldb: int64, C: *float64, ldc: int64): cublasStatus_t <cimport,nodecl> end
global function cublasCgeam(handle: cublasHandle_t, transa: cublasOperation_t, transb: cublasOperation_t, m: cint, n: cint, alpha: *cuComplex, A: *cuComplex, lda: cint, beta: *cuComplex, B: *cuComplex, ldb: cint, C: *cuComplex, ldc: cint): cublasStatus_t <cimport,nodecl> end
global function cublasCgeam_64(handle: cublasHandle_t, transa: cublasOperation_t, transb: cublasOperation_t, m: int64, n: int64, alpha: *cuComplex, A: *cuComplex, lda: int64, beta: *cuComplex, B: *cuComplex, ldb: int64, C: *cuComplex, ldc: int64): cublasStatus_t <cimport,nodecl> end
global function cublasZgeam(handle: cublasHandle_t, transa: cublasOperation_t, transb: cublasOperation_t, m: cint, n: cint, alpha: *cuDoubleComplex, A: *cuDoubleComplex, lda: cint, beta: *cuDoubleComplex, B: *cuDoubleComplex, ldb: cint, C: *cuDoubleComplex, ldc: cint): cublasStatus_t <cimport,nodecl> end
global function cublasZgeam_64(handle: cublasHandle_t, transa: cublasOperation_t, transb: cublasOperation_t, m: int64, n: int64, alpha: *cuDoubleComplex, A: *cuDoubleComplex, lda: int64, beta: *cuDoubleComplex, B: *cuDoubleComplex, ldb: int64, C: *cuDoubleComplex, ldc: int64): cublasStatus_t <cimport,nodecl> end
global function cublasStrsmBatched(handle: cublasHandle_t, side: cublasSideMode_t, uplo: cublasFillMode_t, trans: cublasOperation_t, diag: cublasDiagType_t, m: cint, n: cint, alpha: *float32, A: *[0]*float32, lda: cint, B: *[0]*float32, ldb: cint, batchCount: cint): cublasStatus_t <cimport,nodecl> end
global function cublasStrsmBatched_64(handle: cublasHandle_t, side: cublasSideMode_t, uplo: cublasFillMode_t, trans: cublasOperation_t, diag: cublasDiagType_t, m: int64, n: int64, alpha: *float32, A: *[0]*float32, lda: int64, B: *[0]*float32, ldb: int64, batchCount: int64): cublasStatus_t <cimport,nodecl> end
global function cublasDtrsmBatched(handle: cublasHandle_t, side: cublasSideMode_t, uplo: cublasFillMode_t, trans: cublasOperation_t, diag: cublasDiagType_t, m: cint, n: cint, alpha: *float64, A: *[0]*float64, lda: cint, B: *[0]*float64, ldb: cint, batchCount: cint): cublasStatus_t <cimport,nodecl> end
global function cublasDtrsmBatched_64(handle: cublasHandle_t, side: cublasSideMode_t, uplo: cublasFillMode_t, trans: cublasOperation_t, diag: cublasDiagType_t, m: int64, n: int64, alpha: *float64, A: *[0]*float64, lda: int64, B: *[0]*float64, ldb: int64, batchCount: int64): cublasStatus_t <cimport,nodecl> end
global function cublasCtrsmBatched(handle: cublasHandle_t, side: cublasSideMode_t, uplo: cublasFillMode_t, trans: cublasOperation_t, diag: cublasDiagType_t, m: cint, n: cint, alpha: *cuComplex, A: *[0]*cuComplex, lda: cint, B: *[0]*cuComplex, ldb: cint, batchCount: cint): cublasStatus_t <cimport,nodecl> end
global function cublasCtrsmBatched_64(handle: cublasHandle_t, side: cublasSideMode_t, uplo: cublasFillMode_t, trans: cublasOperation_t, diag: cublasDiagType_t, m: int64, n: int64, alpha: *cuComplex, A: *[0]*cuComplex, lda: int64, B: *[0]*cuComplex, ldb: int64, batchCount: int64): cublasStatus_t <cimport,nodecl> end
global function cublasZtrsmBatched(handle: cublasHandle_t, side: cublasSideMode_t, uplo: cublasFillMode_t, trans: cublasOperation_t, diag: cublasDiagType_t, m: cint, n: cint, alpha: *cuDoubleComplex, A: *[0]*cuDoubleComplex, lda: cint, B: *[0]*cuDoubleComplex, ldb: cint, batchCount: cint): cublasStatus_t <cimport,nodecl> end
global function cublasZtrsmBatched_64(handle: cublasHandle_t, side: cublasSideMode_t, uplo: cublasFillMode_t, trans: cublasOperation_t, diag: cublasDiagType_t, m: int64, n: int64, alpha: *cuDoubleComplex, A: *[0]*cuDoubleComplex, lda: int64, B: *[0]*cuDoubleComplex, ldb: int64, batchCount: int64): cublasStatus_t <cimport,nodecl> end
global function cublasSdgmm(handle: cublasHandle_t, mode: cublasSideMode_t, m: cint, n: cint, A: *float32, lda: cint, x: *float32, incx: cint, C: *float32, ldc: cint): cublasStatus_t <cimport,nodecl> end
global function cublasSdgmm_64(handle: cublasHandle_t, mode: cublasSideMode_t, m: int64, n: int64, A: *float32, lda: int64, x: *float32, incx: int64, C: *float32, ldc: int64): cublasStatus_t <cimport,nodecl> end
global function cublasDdgmm(handle: cublasHandle_t, mode: cublasSideMode_t, m: cint, n: cint, A: *float64, lda: cint, x: *float64, incx: cint, C: *float64, ldc: cint): cublasStatus_t <cimport,nodecl> end
global function cublasDdgmm_64(handle: cublasHandle_t, mode: cublasSideMode_t, m: int64, n: int64, A: *float64, lda: int64, x: *float64, incx: int64, C: *float64, ldc: int64): cublasStatus_t <cimport,nodecl> end
global function cublasCdgmm(handle: cublasHandle_t, mode: cublasSideMode_t, m: cint, n: cint, A: *cuComplex, lda: cint, x: *cuComplex, incx: cint, C: *cuComplex, ldc: cint): cublasStatus_t <cimport,nodecl> end
global function cublasCdgmm_64(handle: cublasHandle_t, mode: cublasSideMode_t, m: int64, n: int64, A: *cuComplex, lda: int64, x: *cuComplex, incx: int64, C: *cuComplex, ldc: int64): cublasStatus_t <cimport,nodecl> end
global function cublasZdgmm(handle: cublasHandle_t, mode: cublasSideMode_t, m: cint, n: cint, A: *cuDoubleComplex, lda: cint, x: *cuDoubleComplex, incx: cint, C: *cuDoubleComplex, ldc: cint): cublasStatus_t <cimport,nodecl> end
global function cublasZdgmm_64(handle: cublasHandle_t, mode: cublasSideMode_t, m: int64, n: int64, A: *cuDoubleComplex, lda: int64, x: *cuDoubleComplex, incx: int64, C: *cuDoubleComplex, ldc: int64): cublasStatus_t <cimport,nodecl> end
global function cublasSmatinvBatched(handle: cublasHandle_t, n: cint, A: *[0]*float32, lda: cint, Ainv: *[0]*float32, lda_inv: cint, info: *cint, batchSize: cint): cublasStatus_t <cimport,nodecl> end
global function cublasDmatinvBatched(handle: cublasHandle_t, n: cint, A: *[0]*float64, lda: cint, Ainv: *[0]*float64, lda_inv: cint, info: *cint, batchSize: cint): cublasStatus_t <cimport,nodecl> end
global function cublasCmatinvBatched(handle: cublasHandle_t, n: cint, A: *[0]*cuComplex, lda: cint, Ainv: *[0]*cuComplex, lda_inv: cint, info: *cint, batchSize: cint): cublasStatus_t <cimport,nodecl> end
global function cublasZmatinvBatched(handle: cublasHandle_t, n: cint, A: *[0]*cuDoubleComplex, lda: cint, Ainv: *[0]*cuDoubleComplex, lda_inv: cint, info: *cint, batchSize: cint): cublasStatus_t <cimport,nodecl> end
global function cublasSgeqrfBatched(handle: cublasHandle_t, m: cint, n: cint, Aarray: *[0]*float32, lda: cint, TauArray: *[0]*float32, info: *cint, batchSize: cint): cublasStatus_t <cimport,nodecl> end
global function cublasDgeqrfBatched(handle: cublasHandle_t, m: cint, n: cint, Aarray: *[0]*float64, lda: cint, TauArray: *[0]*float64, info: *cint, batchSize: cint): cublasStatus_t <cimport,nodecl> end
global function cublasCgeqrfBatched(handle: cublasHandle_t, m: cint, n: cint, Aarray: *[0]*cuComplex, lda: cint, TauArray: *[0]*cuComplex, info: *cint, batchSize: cint): cublasStatus_t <cimport,nodecl> end
global function cublasZgeqrfBatched(handle: cublasHandle_t, m: cint, n: cint, Aarray: *[0]*cuDoubleComplex, lda: cint, TauArray: *[0]*cuDoubleComplex, info: *cint, batchSize: cint): cublasStatus_t <cimport,nodecl> end
global function cublasSgelsBatched(handle: cublasHandle_t, trans: cublasOperation_t, m: cint, n: cint, nrhs: cint, Aarray: *[0]*float32, lda: cint, Carray: *[0]*float32, ldc: cint, info: *cint, devInfoArray: *cint, batchSize: cint): cublasStatus_t <cimport,nodecl> end
global function cublasDgelsBatched(handle: cublasHandle_t, trans: cublasOperation_t, m: cint, n: cint, nrhs: cint, Aarray: *[0]*float64, lda: cint, Carray: *[0]*float64, ldc: cint, info: *cint, devInfoArray: *cint, batchSize: cint): cublasStatus_t <cimport,nodecl> end
global function cublasCgelsBatched(handle: cublasHandle_t, trans: cublasOperation_t, m: cint, n: cint, nrhs: cint, Aarray: *[0]*cuComplex, lda: cint, Carray: *[0]*cuComplex, ldc: cint, info: *cint, devInfoArray: *cint, batchSize: cint): cublasStatus_t <cimport,nodecl> end
global function cublasZgelsBatched(handle: cublasHandle_t, trans: cublasOperation_t, m: cint, n: cint, nrhs: cint, Aarray: *[0]*cuDoubleComplex, lda: cint, Carray: *[0]*cuDoubleComplex, ldc: cint, info: *cint, devInfoArray: *cint, batchSize: cint): cublasStatus_t <cimport,nodecl> end
global function cublasStpttr(handle: cublasHandle_t, uplo: cublasFillMode_t, n: cint, AP: *float32, A: *float32, lda: cint): cublasStatus_t <cimport,nodecl> end
global function cublasDtpttr(handle: cublasHandle_t, uplo: cublasFillMode_t, n: cint, AP: *float64, A: *float64, lda: cint): cublasStatus_t <cimport,nodecl> end
global function cublasCtpttr(handle: cublasHandle_t, uplo: cublasFillMode_t, n: cint, AP: *cuComplex, A: *cuComplex, lda: cint): cublasStatus_t <cimport,nodecl> end
global function cublasZtpttr(handle: cublasHandle_t, uplo: cublasFillMode_t, n: cint, AP: *cuDoubleComplex, A: *cuDoubleComplex, lda: cint): cublasStatus_t <cimport,nodecl> end
global function cublasStrttp(handle: cublasHandle_t, uplo: cublasFillMode_t, n: cint, A: *float32, lda: cint, AP: *float32): cublasStatus_t <cimport,nodecl> end
global function cublasDtrttp(handle: cublasHandle_t, uplo: cublasFillMode_t, n: cint, A: *float64, lda: cint, AP: *float64): cublasStatus_t <cimport,nodecl> end
global function cublasCtrttp(handle: cublasHandle_t, uplo: cublasFillMode_t, n: cint, A: *cuComplex, lda: cint, AP: *cuComplex): cublasStatus_t <cimport,nodecl> end
global function cublasZtrttp(handle: cublasHandle_t, uplo: cublasFillMode_t, n: cint, A: *cuDoubleComplex, lda: cint, AP: *cuDoubleComplex): cublasStatus_t <cimport,nodecl> end
global function cublasSgetrfBatched(handle: cublasHandle_t, n: cint, A: *[0]*float32, lda: cint, P: *cint, info: *cint, batchSize: cint): cublasStatus_t <cimport,nodecl> end
global function cublasDgetrfBatched(handle: cublasHandle_t, n: cint, A: *[0]*float64, lda: cint, P: *cint, info: *cint, batchSize: cint): cublasStatus_t <cimport,nodecl> end
global function cublasCgetrfBatched(handle: cublasHandle_t, n: cint, A: *[0]*cuComplex, lda: cint, P: *cint, info: *cint, batchSize: cint): cublasStatus_t <cimport,nodecl> end
global function cublasZgetrfBatched(handle: cublasHandle_t, n: cint, A: *[0]*cuDoubleComplex, lda: cint, P: *cint, info: *cint, batchSize: cint): cublasStatus_t <cimport,nodecl> end
global function cublasSgetriBatched(handle: cublasHandle_t, n: cint, A: *[0]*float32, lda: cint, P: *cint, C: *[0]*float32, ldc: cint, info: *cint, batchSize: cint): cublasStatus_t <cimport,nodecl> end
global function cublasDgetriBatched(handle: cublasHandle_t, n: cint, A: *[0]*float64, lda: cint, P: *cint, C: *[0]*float64, ldc: cint, info: *cint, batchSize: cint): cublasStatus_t <cimport,nodecl> end
global function cublasCgetriBatched(handle: cublasHandle_t, n: cint, A: *[0]*cuComplex, lda: cint, P: *cint, C: *[0]*cuComplex, ldc: cint, info: *cint, batchSize: cint): cublasStatus_t <cimport,nodecl> end
global function cublasZgetriBatched(handle: cublasHandle_t, n: cint, A: *[0]*cuDoubleComplex, lda: cint, P: *cint, C: *[0]*cuDoubleComplex, ldc: cint, info: *cint, batchSize: cint): cublasStatus_t <cimport,nodecl> end
global function cublasSgetrsBatched(handle: cublasHandle_t, trans: cublasOperation_t, n: cint, nrhs: cint, Aarray: *[0]*float32, lda: cint, devIpiv: *cint, Barray: *[0]*float32, ldb: cint, info: *cint, batchSize: cint): cublasStatus_t <cimport,nodecl> end
global function cublasDgetrsBatched(handle: cublasHandle_t, trans: cublasOperation_t, n: cint, nrhs: cint, Aarray: *[0]*float64, lda: cint, devIpiv: *cint, Barray: *[0]*float64, ldb: cint, info: *cint, batchSize: cint): cublasStatus_t <cimport,nodecl> end
global function cublasCgetrsBatched(handle: cublasHandle_t, trans: cublasOperation_t, n: cint, nrhs: cint, Aarray: *[0]*cuComplex, lda: cint, devIpiv: *cint, Barray: *[0]*cuComplex, ldb: cint, info: *cint, batchSize: cint): cublasStatus_t <cimport,nodecl> end
global function cublasZgetrsBatched(handle: cublasHandle_t, trans: cublasOperation_t, n: cint, nrhs: cint, Aarray: *[0]*cuDoubleComplex, lda: cint, devIpiv: *cint, Barray: *[0]*cuDoubleComplex, ldb: cint, info: *cint, batchSize: cint): cublasStatus_t <cimport,nodecl> end
global function cublasUint8gemmBias(handle: cublasHandle_t, transa: cublasOperation_t, transb: cublasOperation_t, transc: cublasOperation_t, m: cint, n: cint, k: cint, A: *cuchar, A_bias: cint, lda: cint, B: *cuchar, B_bias: cint, ldb: cint, C: *cuchar, C_bias: cint, ldc: cint, C_mult: cint, C_shift: cint): cublasStatus_t <cimport,nodecl> end
global function cudnnGetVersion(): csize <cimport,nodecl> end
global function cudnnGetMaxDeviceVersion(): csize <cimport,nodecl> end
global function cudnnGetCudartVersion(): csize <cimport,nodecl> end
global function cudnnGetErrorString(status: cudnnStatus_t): cstring <cimport,nodecl> end
global function cudnnQueryRuntimeError(handle: cudnnHandle_t, rstatus: *cudnnStatus_t, mode: cudnnErrQueryMode_t, tag: *cudnnRuntimeTag_t): cudnnStatus_t <cimport,nodecl> end
global function cudnnGetProperty(type: libraryPropertyType_t, value: *cint): cudnnStatus_t <cimport,nodecl> end
global function cudnnCreate(handle: *cudnnHandle_t): cudnnStatus_t <cimport,nodecl> end
global function cudnnDestroy(handle: cudnnHandle_t): cudnnStatus_t <cimport,nodecl> end
global function cudnnSetStream(handle: cudnnHandle_t, streamId: cudaStream_t): cudnnStatus_t <cimport,nodecl> end
global function cudnnGetStream(handle: cudnnHandle_t, streamId: *cudaStream_t): cudnnStatus_t <cimport,nodecl> end
global function cudnnCreateTensorDescriptor(tensorDesc: *cudnnTensorDescriptor_t): cudnnStatus_t <cimport,nodecl> end
global function cudnnSetTensor4dDescriptor(tensorDesc: cudnnTensorDescriptor_t, format: cudnnTensorFormat_t, dataType: cudnnDataType_t, n: cint, c: cint, h: cint, w: cint): cudnnStatus_t <cimport,nodecl> end
global function cudnnSetTensor4dDescriptorEx(tensorDesc: cudnnTensorDescriptor_t, dataType: cudnnDataType_t, n: cint, c: cint, h: cint, w: cint, nStride: cint, cStride: cint, hStride: cint, wStride: cint): cudnnStatus_t <cimport,nodecl> end
global function cudnnGetTensor4dDescriptor(tensorDesc: cudnnTensorDescriptor_t, dataType: *cudnnDataType_t, n: *cint, c: *cint, h: *cint, w: *cint, nStride: *cint, cStride: *cint, hStride: *cint, wStride: *cint): cudnnStatus_t <cimport,nodecl> end
global function cudnnSetTensorNdDescriptor(tensorDesc: cudnnTensorDescriptor_t, dataType: cudnnDataType_t, nbDims: cint, dimA: *[0]cint, strideA: *[0]cint): cudnnStatus_t <cimport,nodecl> end
global function cudnnSetTensorNdDescriptorEx(tensorDesc: cudnnTensorDescriptor_t, format: cudnnTensorFormat_t, dataType: cudnnDataType_t, nbDims: cint, dimA: *[0]cint): cudnnStatus_t <cimport,nodecl> end
global function cudnnGetTensorNdDescriptor(tensorDesc: cudnnTensorDescriptor_t, nbDimsRequested: cint, dataType: *cudnnDataType_t, nbDims: *cint, dimA: *[0]cint, strideA: *[0]cint): cudnnStatus_t <cimport,nodecl> end
global function cudnnGetTensorSizeInBytes(tensorDesc: cudnnTensorDescriptor_t, size: *csize): cudnnStatus_t <cimport,nodecl> end
global function cudnnDestroyTensorDescriptor(tensorDesc: cudnnTensorDescriptor_t): cudnnStatus_t <cimport,nodecl> end
global function cudnnInitTransformDest(transformDesc: cudnnTensorTransformDescriptor_t, srcDesc: cudnnTensorDescriptor_t, destDesc: cudnnTensorDescriptor_t, destSizeInBytes: *csize): cudnnStatus_t <cimport,nodecl> end
global function cudnnCreateTensorTransformDescriptor(transformDesc: *cudnnTensorTransformDescriptor_t): cudnnStatus_t <cimport,nodecl> end
global function cudnnSetTensorTransformDescriptor(transformDesc: cudnnTensorTransformDescriptor_t, nbDims: uint32, destFormat: cudnnTensorFormat_t, padBeforeA: *[0]int32, padAfterA: *[0]int32, foldA: *[0]uint32, direction: cudnnFoldingDirection_t): cudnnStatus_t <cimport,nodecl> end
global function cudnnGetTensorTransformDescriptor(transformDesc: cudnnTensorTransformDescriptor_t, nbDimsRequested: uint32, destFormat: *cudnnTensorFormat_t, padBeforeA: *[0]int32, padAfterA: *[0]int32, foldA: *[0]uint32, direction: *cudnnFoldingDirection_t): cudnnStatus_t <cimport,nodecl> end
global function cudnnDestroyTensorTransformDescriptor(transformDesc: cudnnTensorTransformDescriptor_t): cudnnStatus_t <cimport,nodecl> end
global function cudnnTransformTensor(handle: cudnnHandle_t, alpha: pointer, xDesc: cudnnTensorDescriptor_t, x: pointer, beta: pointer, yDesc: cudnnTensorDescriptor_t, y: pointer): cudnnStatus_t <cimport,nodecl> end
global function cudnnTransformTensorEx(handle: cudnnHandle_t, transDesc: cudnnTensorTransformDescriptor_t, alpha: pointer, srcDesc: cudnnTensorDescriptor_t, srcData: pointer, beta: pointer, destDesc: cudnnTensorDescriptor_t, destData: pointer): cudnnStatus_t <cimport,nodecl> end
global function cudnnAddTensor(handle: cudnnHandle_t, alpha: pointer, aDesc: cudnnTensorDescriptor_t, A: pointer, beta: pointer, cDesc: cudnnTensorDescriptor_t, C: pointer): cudnnStatus_t <cimport,nodecl> end
global function cudnnCreateOpTensorDescriptor(opTensorDesc: *cudnnOpTensorDescriptor_t): cudnnStatus_t <cimport,nodecl> end
global function cudnnSetOpTensorDescriptor(opTensorDesc: cudnnOpTensorDescriptor_t, opTensorOp: cudnnOpTensorOp_t, opTensorCompType: cudnnDataType_t, opTensorNanOpt: cudnnNanPropagation_t): cudnnStatus_t <cimport,nodecl> end
global function cudnnGetOpTensorDescriptor(opTensorDesc: cudnnOpTensorDescriptor_t, opTensorOp: *cudnnOpTensorOp_t, opTensorCompType: *cudnnDataType_t, opTensorNanOpt: *cudnnNanPropagation_t): cudnnStatus_t <cimport,nodecl> end
global function cudnnDestroyOpTensorDescriptor(opTensorDesc: cudnnOpTensorDescriptor_t): cudnnStatus_t <cimport,nodecl> end
global function cudnnOpTensor(handle: cudnnHandle_t, opTensorDesc: cudnnOpTensorDescriptor_t, alpha1: pointer, aDesc: cudnnTensorDescriptor_t, A: pointer, alpha2: pointer, bDesc: cudnnTensorDescriptor_t, B: pointer, beta: pointer, cDesc: cudnnTensorDescriptor_t, C: pointer): cudnnStatus_t <cimport,nodecl> end
global function cudnnCreateReduceTensorDescriptor(reduceTensorDesc: *cudnnReduceTensorDescriptor_t): cudnnStatus_t <cimport,nodecl> end
global function cudnnSetReduceTensorDescriptor(reduceTensorDesc: cudnnReduceTensorDescriptor_t, reduceTensorOp: cudnnReduceTensorOp_t, reduceTensorCompType: cudnnDataType_t, reduceTensorNanOpt: cudnnNanPropagation_t, reduceTensorIndices: cudnnReduceTensorIndices_t, reduceTensorIndicesType: cudnnIndicesType_t): cudnnStatus_t <cimport,nodecl> end
global function cudnnGetReduceTensorDescriptor(reduceTensorDesc: cudnnReduceTensorDescriptor_t, reduceTensorOp: *cudnnReduceTensorOp_t, reduceTensorCompType: *cudnnDataType_t, reduceTensorNanOpt: *cudnnNanPropagation_t, reduceTensorIndices: *cudnnReduceTensorIndices_t, reduceTensorIndicesType: *cudnnIndicesType_t): cudnnStatus_t <cimport,nodecl> end
global function cudnnDestroyReduceTensorDescriptor(reduceTensorDesc: cudnnReduceTensorDescriptor_t): cudnnStatus_t <cimport,nodecl> end
global function cudnnGetReductionIndicesSize(handle: cudnnHandle_t, reduceTensorDesc: cudnnReduceTensorDescriptor_t, aDesc: cudnnTensorDescriptor_t, cDesc: cudnnTensorDescriptor_t, sizeInBytes: *csize): cudnnStatus_t <cimport,nodecl> end
global function cudnnGetReductionWorkspaceSize(handle: cudnnHandle_t, reduceTensorDesc: cudnnReduceTensorDescriptor_t, aDesc: cudnnTensorDescriptor_t, cDesc: cudnnTensorDescriptor_t, sizeInBytes: *csize): cudnnStatus_t <cimport,nodecl> end
global function cudnnReduceTensor(handle: cudnnHandle_t, reduceTensorDesc: cudnnReduceTensorDescriptor_t, indices: pointer, indicesSizeInBytes: csize, workspace: pointer, workspaceSizeInBytes: csize, alpha: pointer, aDesc: cudnnTensorDescriptor_t, A: pointer, beta: pointer, cDesc: cudnnTensorDescriptor_t, C: pointer): cudnnStatus_t <cimport,nodecl> end
global function cudnnSetTensor(handle: cudnnHandle_t, yDesc: cudnnTensorDescriptor_t, y: pointer, valuePtr: pointer): cudnnStatus_t <cimport,nodecl> end
global function cudnnScaleTensor(handle: cudnnHandle_t, yDesc: cudnnTensorDescriptor_t, y: pointer, alpha: pointer): cudnnStatus_t <cimport,nodecl> end
global function cudnnCreateFilterDescriptor(filterDesc: *cudnnFilterDescriptor_t): cudnnStatus_t <cimport,nodecl> end
global function cudnnSetFilter4dDescriptor(filterDesc: cudnnFilterDescriptor_t, dataType: cudnnDataType_t, format: cudnnTensorFormat_t, k: cint, c: cint, h: cint, w: cint): cudnnStatus_t <cimport,nodecl> end
global function cudnnGetFilter4dDescriptor(filterDesc: cudnnFilterDescriptor_t, dataType: *cudnnDataType_t, format: *cudnnTensorFormat_t, k: *cint, c: *cint, h: *cint, w: *cint): cudnnStatus_t <cimport,nodecl> end
global function cudnnSetFilterNdDescriptor(filterDesc: cudnnFilterDescriptor_t, dataType: cudnnDataType_t, format: cudnnTensorFormat_t, nbDims: cint, filterDimA: *[0]cint): cudnnStatus_t <cimport,nodecl> end
global function cudnnGetFilterNdDescriptor(filterDesc: cudnnFilterDescriptor_t, nbDimsRequested: cint, dataType: *cudnnDataType_t, format: *cudnnTensorFormat_t, nbDims: *cint, filterDimA: *[0]cint): cudnnStatus_t <cimport,nodecl> end
global function cudnnGetFilterSizeInBytes(filterDesc: cudnnFilterDescriptor_t, size: *csize): cudnnStatus_t <cimport,nodecl> end
global function cudnnTransformFilter(handle: cudnnHandle_t, transDesc: cudnnTensorTransformDescriptor_t, alpha: pointer, srcDesc: cudnnFilterDescriptor_t, srcData: pointer, beta: pointer, destDesc: cudnnFilterDescriptor_t, destData: pointer): cudnnStatus_t <cimport,nodecl> end
global function cudnnDestroyFilterDescriptor(filterDesc: cudnnFilterDescriptor_t): cudnnStatus_t <cimport,nodecl> end
global function cudnnSoftmaxForward(handle: cudnnHandle_t, algo: cudnnSoftmaxAlgorithm_t, mode: cudnnSoftmaxMode_t, alpha: pointer, xDesc: cudnnTensorDescriptor_t, x: pointer, beta: pointer, yDesc: cudnnTensorDescriptor_t, y: pointer): cudnnStatus_t <cimport,nodecl> end
global function cudnnCreatePoolingDescriptor(poolingDesc: *cudnnPoolingDescriptor_t): cudnnStatus_t <cimport,nodecl> end
global function cudnnSetPooling2dDescriptor(poolingDesc: cudnnPoolingDescriptor_t, mode: cudnnPoolingMode_t, maxpoolingNanOpt: cudnnNanPropagation_t, windowHeight: cint, windowWidth: cint, verticalPadding: cint, horizontalPadding: cint, verticalStride: cint, horizontalStride: cint): cudnnStatus_t <cimport,nodecl> end
global function cudnnGetPooling2dDescriptor(poolingDesc: cudnnPoolingDescriptor_t, mode: *cudnnPoolingMode_t, maxpoolingNanOpt: *cudnnNanPropagation_t, windowHeight: *cint, windowWidth: *cint, verticalPadding: *cint, horizontalPadding: *cint, verticalStride: *cint, horizontalStride: *cint): cudnnStatus_t <cimport,nodecl> end
global function cudnnSetPoolingNdDescriptor(poolingDesc: cudnnPoolingDescriptor_t, mode: cudnnPoolingMode_t, maxpoolingNanOpt: cudnnNanPropagation_t, nbDims: cint, windowDimA: *[0]cint, paddingA: *[0]cint, strideA: *[0]cint): cudnnStatus_t <cimport,nodecl> end
global function cudnnGetPoolingNdDescriptor(poolingDesc: cudnnPoolingDescriptor_t, nbDimsRequested: cint, mode: *cudnnPoolingMode_t, maxpoolingNanOpt: *cudnnNanPropagation_t, nbDims: *cint, windowDimA: *[0]cint, paddingA: *[0]cint, strideA: *[0]cint): cudnnStatus_t <cimport,nodecl> end
global function cudnnGetPoolingNdForwardOutputDim(poolingDesc: cudnnPoolingDescriptor_t, inputTensorDesc: cudnnTensorDescriptor_t, nbDims: cint, outputTensorDimA: *[0]cint): cudnnStatus_t <cimport,nodecl> end
global function cudnnGetPooling2dForwardOutputDim(poolingDesc: cudnnPoolingDescriptor_t, inputTensorDesc: cudnnTensorDescriptor_t, n: *cint, c: *cint, h: *cint, w: *cint): cudnnStatus_t <cimport,nodecl> end
global function cudnnDestroyPoolingDescriptor(poolingDesc: cudnnPoolingDescriptor_t): cudnnStatus_t <cimport,nodecl> end
global function cudnnPoolingForward(handle: cudnnHandle_t, poolingDesc: cudnnPoolingDescriptor_t, alpha: pointer, xDesc: cudnnTensorDescriptor_t, x: pointer, beta: pointer, yDesc: cudnnTensorDescriptor_t, y: pointer): cudnnStatus_t <cimport,nodecl> end
global function cudnnCreateActivationDescriptor(activationDesc: *cudnnActivationDescriptor_t): cudnnStatus_t <cimport,nodecl> end
global function cudnnSetActivationDescriptor(activationDesc: cudnnActivationDescriptor_t, mode: cudnnActivationMode_t, reluNanOpt: cudnnNanPropagation_t, coef: float64): cudnnStatus_t <cimport,nodecl> end
global function cudnnGetActivationDescriptor(activationDesc: cudnnActivationDescriptor_t, mode: *cudnnActivationMode_t, reluNanOpt: *cudnnNanPropagation_t, coef: *float64): cudnnStatus_t <cimport,nodecl> end
global function cudnnSetActivationDescriptorSwishBeta(activationDesc: cudnnActivationDescriptor_t, swish_beta: float64): cudnnStatus_t <cimport,nodecl> end
global function cudnnGetActivationDescriptorSwishBeta(activationDesc: cudnnActivationDescriptor_t, swish_beta: *float64): cudnnStatus_t <cimport,nodecl> end
global function cudnnDestroyActivationDescriptor(activationDesc: cudnnActivationDescriptor_t): cudnnStatus_t <cimport,nodecl> end
global function cudnnActivationForward(handle: cudnnHandle_t, activationDesc: cudnnActivationDescriptor_t, alpha: pointer, xDesc: cudnnTensorDescriptor_t, x: pointer, beta: pointer, yDesc: cudnnTensorDescriptor_t, y: pointer): cudnnStatus_t <cimport,nodecl> end
global function cudnnCreateLRNDescriptor(normDesc: *cudnnLRNDescriptor_t): cudnnStatus_t <cimport,nodecl> end
global function cudnnSetLRNDescriptor(normDesc: cudnnLRNDescriptor_t, lrnN: cuint, lrnAlpha: float64, lrnBeta: float64, lrnK: float64): cudnnStatus_t <cimport,nodecl> end
global function cudnnGetLRNDescriptor(normDesc: cudnnLRNDescriptor_t, lrnN: *cuint, lrnAlpha: *float64, lrnBeta: *float64, lrnK: *float64): cudnnStatus_t <cimport,nodecl> end
global function cudnnDestroyLRNDescriptor(lrnDesc: cudnnLRNDescriptor_t): cudnnStatus_t <cimport,nodecl> end
global function cudnnLRNCrossChannelForward(handle: cudnnHandle_t, normDesc: cudnnLRNDescriptor_t, lrnMode: cudnnLRNMode_t, alpha: pointer, xDesc: cudnnTensorDescriptor_t, x: pointer, beta: pointer, yDesc: cudnnTensorDescriptor_t, y: pointer): cudnnStatus_t <cimport,nodecl> end
global function cudnnDivisiveNormalizationForward(handle: cudnnHandle_t, normDesc: cudnnLRNDescriptor_t, mode: cudnnDivNormMode_t, alpha: pointer, xDesc: cudnnTensorDescriptor_t, x: pointer, means: pointer, temp: pointer, temp2: pointer, beta: pointer, yDesc: cudnnTensorDescriptor_t, y: pointer): cudnnStatus_t <cimport,nodecl> end
global function cudnnDeriveBNTensorDescriptor(derivedBnDesc: cudnnTensorDescriptor_t, xDesc: cudnnTensorDescriptor_t, mode: cudnnBatchNormMode_t): cudnnStatus_t <cimport,nodecl> end
global function cudnnBatchNormalizationForwardInference(handle: cudnnHandle_t, mode: cudnnBatchNormMode_t, alpha: pointer, beta: pointer, xDesc: cudnnTensorDescriptor_t, x: pointer, yDesc: cudnnTensorDescriptor_t, y: pointer, bnScaleBiasMeanVarDesc: cudnnTensorDescriptor_t, bnScale: pointer, bnBias: pointer, estimatedMean: pointer, estimatedVariance: pointer, epsilon: float64): cudnnStatus_t <cimport,nodecl> end
global function cudnnDeriveNormTensorDescriptor(derivedNormScaleBiasDesc: cudnnTensorDescriptor_t, derivedNormMeanVarDesc: cudnnTensorDescriptor_t, xDesc: cudnnTensorDescriptor_t, mode: cudnnNormMode_t, groupCnt: cint): cudnnStatus_t <cimport,nodecl> end
global function cudnnNormalizationForwardInference(handle: cudnnHandle_t, mode: cudnnNormMode_t, normOps: cudnnNormOps_t, algo: cudnnNormAlgo_t, alpha: pointer, beta: pointer, xDesc: cudnnTensorDescriptor_t, x: pointer, normScaleBiasDesc: cudnnTensorDescriptor_t, normScale: pointer, normBias: pointer, normMeanVarDesc: cudnnTensorDescriptor_t, estimatedMean: pointer, estimatedVariance: pointer, zDesc: cudnnTensorDescriptor_t, z: pointer, activationDesc: cudnnActivationDescriptor_t, yDesc: cudnnTensorDescriptor_t, y: pointer, epsilon: float64, groupCnt: cint): cudnnStatus_t <cimport,nodecl> end
global function cudnnCreateSpatialTransformerDescriptor(stDesc: *cudnnSpatialTransformerDescriptor_t): cudnnStatus_t <cimport,nodecl> end
global function cudnnSetSpatialTransformerNdDescriptor(stDesc: cudnnSpatialTransformerDescriptor_t, samplerType: cudnnSamplerType_t, dataType: cudnnDataType_t, nbDims: cint, dimA: *[0]cint): cudnnStatus_t <cimport,nodecl> end
global function cudnnDestroySpatialTransformerDescriptor(stDesc: cudnnSpatialTransformerDescriptor_t): cudnnStatus_t <cimport,nodecl> end
global function cudnnSpatialTfGridGeneratorForward(handle: cudnnHandle_t, stDesc: cudnnSpatialTransformerDescriptor_t, theta: pointer, grid: pointer): cudnnStatus_t <cimport,nodecl> end
global function cudnnSpatialTfSamplerForward(handle: cudnnHandle_t, stDesc: cudnnSpatialTransformerDescriptor_t, alpha: pointer, xDesc: cudnnTensorDescriptor_t, x: pointer, grid: pointer, beta: pointer, yDesc: cudnnTensorDescriptor_t, y: pointer): cudnnStatus_t <cimport,nodecl> end
global function cudnnCreateDropoutDescriptor(dropoutDesc: *cudnnDropoutDescriptor_t): cudnnStatus_t <cimport,nodecl> end
global function cudnnDestroyDropoutDescriptor(dropoutDesc: cudnnDropoutDescriptor_t): cudnnStatus_t <cimport,nodecl> end
global function cudnnDropoutGetStatesSize(handle: cudnnHandle_t, sizeInBytes: *csize): cudnnStatus_t <cimport,nodecl> end
global function cudnnDropoutGetReserveSpaceSize(xdesc: cudnnTensorDescriptor_t, sizeInBytes: *csize): cudnnStatus_t <cimport,nodecl> end
global function cudnnSetDropoutDescriptor(dropoutDesc: cudnnDropoutDescriptor_t, handle: cudnnHandle_t, dropout: float32, states: pointer, stateSizeInBytes: csize, seed: culonglong): cudnnStatus_t <cimport,nodecl> end
global function cudnnRestoreDropoutDescriptor(dropoutDesc: cudnnDropoutDescriptor_t, handle: cudnnHandle_t, dropout: float32, states: pointer, stateSizeInBytes: csize, seed: culonglong): cudnnStatus_t <cimport,nodecl> end
global function cudnnGetDropoutDescriptor(dropoutDesc: cudnnDropoutDescriptor_t, handle: cudnnHandle_t, dropout: *float32, states: *pointer, seed: *culonglong): cudnnStatus_t <cimport,nodecl> end
global function cudnnDropoutForward(handle: cudnnHandle_t, dropoutDesc: cudnnDropoutDescriptor_t, xdesc: cudnnTensorDescriptor_t, x: pointer, ydesc: cudnnTensorDescriptor_t, y: pointer, reserveSpace: pointer, reserveSpaceSizeInBytes: csize): cudnnStatus_t <cimport,nodecl> end
global function cudnnCreateAlgorithmDescriptor(algoDesc: *cudnnAlgorithmDescriptor_t): cudnnStatus_t <cimport,nodecl> end
global function cudnnSetAlgorithmDescriptor(algoDesc: cudnnAlgorithmDescriptor_t, algorithm: cudnnAlgorithm_t): cudnnStatus_t <cimport,nodecl> end
global function cudnnGetAlgorithmDescriptor(algoDesc: cudnnAlgorithmDescriptor_t, algorithm: *cudnnAlgorithm_t): cudnnStatus_t <cimport,nodecl> end
global function cudnnCopyAlgorithmDescriptor(src: cudnnAlgorithmDescriptor_t, dest: cudnnAlgorithmDescriptor_t): cudnnStatus_t <cimport,nodecl> end
global function cudnnDestroyAlgorithmDescriptor(algoDesc: cudnnAlgorithmDescriptor_t): cudnnStatus_t <cimport,nodecl> end
global function cudnnCreateAlgorithmPerformance(algoPerf: *cudnnAlgorithmPerformance_t, numberToCreate: cint): cudnnStatus_t <cimport,nodecl> end
global function cudnnSetAlgorithmPerformance(algoPerf: cudnnAlgorithmPerformance_t, algoDesc: cudnnAlgorithmDescriptor_t, status: cudnnStatus_t, time: float32, memory: csize): cudnnStatus_t <cimport,nodecl> end
global function cudnnGetAlgorithmPerformance(algoPerf: cudnnAlgorithmPerformance_t, algoDesc: *cudnnAlgorithmDescriptor_t, status: *cudnnStatus_t, time: *float32, memory: *csize): cudnnStatus_t <cimport,nodecl> end
global function cudnnDestroyAlgorithmPerformance(algoPerf: *cudnnAlgorithmPerformance_t, numberToDestroy: cint): cudnnStatus_t <cimport,nodecl> end
global function cudnnGetAlgorithmSpaceSize(handle: cudnnHandle_t, algoDesc: cudnnAlgorithmDescriptor_t, algoSpaceSizeInBytes: *csize): cudnnStatus_t <cimport,nodecl> end
global function cudnnSaveAlgorithm(handle: cudnnHandle_t, algoDesc: cudnnAlgorithmDescriptor_t, algoSpace: pointer, algoSpaceSizeInBytes: csize): cudnnStatus_t <cimport,nodecl> end
global function cudnnRestoreAlgorithm(handle: cudnnHandle_t, algoSpace: pointer, algoSpaceSizeInBytes: csize, algoDesc: cudnnAlgorithmDescriptor_t): cudnnStatus_t <cimport,nodecl> end
global function cudnnSetCallback(mask: cuint, udata: pointer, fptr: cudnnCallback_t): cudnnStatus_t <cimport,nodecl> end
global function cudnnGetCallback(mask: *cuint, udata: *pointer, fptr: *cudnnCallback_t): cudnnStatus_t <cimport,nodecl> end
global function cudnnOpsInferVersionCheck(): cudnnStatus_t <cimport,nodecl> end
global function cudnnCreateConvolutionDescriptor(convDesc: *cudnnConvolutionDescriptor_t): cudnnStatus_t <cimport,nodecl> end
global function cudnnDestroyConvolutionDescriptor(convDesc: cudnnConvolutionDescriptor_t): cudnnStatus_t <cimport,nodecl> end
global function cudnnSetConvolutionMathType(convDesc: cudnnConvolutionDescriptor_t, mathType: cudnnMathType_t): cudnnStatus_t <cimport,nodecl> end
global function cudnnGetConvolutionMathType(convDesc: cudnnConvolutionDescriptor_t, mathType: *cudnnMathType_t): cudnnStatus_t <cimport,nodecl> end
global function cudnnSetConvolutionGroupCount(convDesc: cudnnConvolutionDescriptor_t, groupCount: cint): cudnnStatus_t <cimport,nodecl> end
global function cudnnGetConvolutionGroupCount(convDesc: cudnnConvolutionDescriptor_t, groupCount: *cint): cudnnStatus_t <cimport,nodecl> end
global function cudnnSetConvolutionReorderType(convDesc: cudnnConvolutionDescriptor_t, reorderType: cudnnReorderType_t): cudnnStatus_t <cimport,nodecl> end
global function cudnnGetConvolutionReorderType(convDesc: cudnnConvolutionDescriptor_t, reorderType: *cudnnReorderType_t): cudnnStatus_t <cimport,nodecl> end
global function cudnnSetConvolution2dDescriptor(convDesc: cudnnConvolutionDescriptor_t, pad_h: cint, pad_w: cint, u: cint, v: cint, dilation_h: cint, dilation_w: cint, mode: cudnnConvolutionMode_t, computeType: cudnnDataType_t): cudnnStatus_t <cimport,nodecl> end
global function cudnnGetConvolution2dDescriptor(convDesc: cudnnConvolutionDescriptor_t, pad_h: *cint, pad_w: *cint, u: *cint, v: *cint, dilation_h: *cint, dilation_w: *cint, mode: *cudnnConvolutionMode_t, computeType: *cudnnDataType_t): cudnnStatus_t <cimport,nodecl> end
global function cudnnSetConvolutionNdDescriptor(convDesc: cudnnConvolutionDescriptor_t, arrayLength: cint, padA: *[0]cint, filterStrideA: *[0]cint, dilationA: *[0]cint, mode: cudnnConvolutionMode_t, computeType: cudnnDataType_t): cudnnStatus_t <cimport,nodecl> end
global function cudnnGetConvolutionNdDescriptor(convDesc: cudnnConvolutionDescriptor_t, arrayLengthRequested: cint, arrayLength: *cint, padA: *[0]cint, strideA: *[0]cint, dilationA: *[0]cint, mode: *cudnnConvolutionMode_t, computeType: *cudnnDataType_t): cudnnStatus_t <cimport,nodecl> end
global function cudnnGetConvolution2dForwardOutputDim(convDesc: cudnnConvolutionDescriptor_t, inputTensorDesc: cudnnTensorDescriptor_t, filterDesc: cudnnFilterDescriptor_t, n: *cint, c: *cint, h: *cint, w: *cint): cudnnStatus_t <cimport,nodecl> end
global function cudnnGetConvolutionNdForwardOutputDim(convDesc: cudnnConvolutionDescriptor_t, inputTensorDesc: cudnnTensorDescriptor_t, filterDesc: cudnnFilterDescriptor_t, nbDims: cint, tensorOuputDimA: *[0]cint): cudnnStatus_t <cimport,nodecl> end
global function cudnnGetConvolutionForwardAlgorithmMaxCount(handle: cudnnHandle_t, count: *cint): cudnnStatus_t <cimport,nodecl> end
global function cudnnGetConvolutionForwardAlgorithm_v7(handle: cudnnHandle_t, srcDesc: cudnnTensorDescriptor_t, filterDesc: cudnnFilterDescriptor_t, convDesc: cudnnConvolutionDescriptor_t, destDesc: cudnnTensorDescriptor_t, requestedAlgoCount: cint, returnedAlgoCount: *cint, perfResults: *cudnnConvolutionFwdAlgoPerf_t): cudnnStatus_t <cimport,nodecl> end
global function cudnnFindConvolutionForwardAlgorithm(handle: cudnnHandle_t, xDesc: cudnnTensorDescriptor_t, wDesc: cudnnFilterDescriptor_t, convDesc: cudnnConvolutionDescriptor_t, yDesc: cudnnTensorDescriptor_t, requestedAlgoCount: cint, returnedAlgoCount: *cint, perfResults: *cudnnConvolutionFwdAlgoPerf_t): cudnnStatus_t <cimport,nodecl> end
global function cudnnFindConvolutionForwardAlgorithmEx(handle: cudnnHandle_t, xDesc: cudnnTensorDescriptor_t, x: pointer, wDesc: cudnnFilterDescriptor_t, w: pointer, convDesc: cudnnConvolutionDescriptor_t, yDesc: cudnnTensorDescriptor_t, y: pointer, requestedAlgoCount: cint, returnedAlgoCount: *cint, perfResults: *cudnnConvolutionFwdAlgoPerf_t, workSpace: pointer, workSpaceSizeInBytes: csize): cudnnStatus_t <cimport,nodecl> end
global function cudnnIm2Col(handle: cudnnHandle_t, xDesc: cudnnTensorDescriptor_t, x: pointer, wDesc: cudnnFilterDescriptor_t, convDesc: cudnnConvolutionDescriptor_t, colBuffer: pointer): cudnnStatus_t <cimport,nodecl> end
global function cudnnReorderFilterAndBias(handle: cudnnHandle_t, filterDesc: cudnnFilterDescriptor_t, reorderType: cudnnReorderType_t, filterData: pointer, reorderedFilterData: pointer, reorderBias: cint, biasData: pointer, reorderedBiasData: pointer): cudnnStatus_t <cimport,nodecl> end
global function cudnnGetConvolutionForwardWorkspaceSize(handle: cudnnHandle_t, xDesc: cudnnTensorDescriptor_t, wDesc: cudnnFilterDescriptor_t, convDesc: cudnnConvolutionDescriptor_t, yDesc: cudnnTensorDescriptor_t, algo: cudnnConvolutionFwdAlgo_t, sizeInBytes: *csize): cudnnStatus_t <cimport,nodecl> end
global function cudnnConvolutionForward(handle: cudnnHandle_t, alpha: pointer, xDesc: cudnnTensorDescriptor_t, x: pointer, wDesc: cudnnFilterDescriptor_t, w: pointer, convDesc: cudnnConvolutionDescriptor_t, algo: cudnnConvolutionFwdAlgo_t, workSpace: pointer, workSpaceSizeInBytes: csize, beta: pointer, yDesc: cudnnTensorDescriptor_t, y: pointer): cudnnStatus_t <cimport,nodecl> end
global function cudnnConvolutionBiasActivationForward(handle: cudnnHandle_t, alpha1: pointer, xDesc: cudnnTensorDescriptor_t, x: pointer, wDesc: cudnnFilterDescriptor_t, w: pointer, convDesc: cudnnConvolutionDescriptor_t, algo: cudnnConvolutionFwdAlgo_t, workSpace: pointer, workSpaceSizeInBytes: csize, alpha2: pointer, zDesc: cudnnTensorDescriptor_t, z: pointer, biasDesc: cudnnTensorDescriptor_t, bias: pointer, activationDesc: cudnnActivationDescriptor_t, yDesc: cudnnTensorDescriptor_t, y: pointer): cudnnStatus_t <cimport,nodecl> end
global function cudnnGetConvolutionBackwardDataAlgorithmMaxCount(handle: cudnnHandle_t, count: *cint): cudnnStatus_t <cimport,nodecl> end
global function cudnnFindConvolutionBackwardDataAlgorithm(handle: cudnnHandle_t, wDesc: cudnnFilterDescriptor_t, dyDesc: cudnnTensorDescriptor_t, convDesc: cudnnConvolutionDescriptor_t, dxDesc: cudnnTensorDescriptor_t, requestedAlgoCount: cint, returnedAlgoCount: *cint, perfResults: *cudnnConvolutionBwdDataAlgoPerf_t): cudnnStatus_t <cimport,nodecl> end
global function cudnnFindConvolutionBackwardDataAlgorithmEx(handle: cudnnHandle_t, wDesc: cudnnFilterDescriptor_t, w: pointer, dyDesc: cudnnTensorDescriptor_t, dy: pointer, convDesc: cudnnConvolutionDescriptor_t, dxDesc: cudnnTensorDescriptor_t, dx: pointer, requestedAlgoCount: cint, returnedAlgoCount: *cint, perfResults: *cudnnConvolutionBwdDataAlgoPerf_t, workSpace: pointer, workSpaceSizeInBytes: csize): cudnnStatus_t <cimport,nodecl> end
global function cudnnGetConvolutionBackwardDataAlgorithm_v7(handle: cudnnHandle_t, filterDesc: cudnnFilterDescriptor_t, diffDesc: cudnnTensorDescriptor_t, convDesc: cudnnConvolutionDescriptor_t, gradDesc: cudnnTensorDescriptor_t, requestedAlgoCount: cint, returnedAlgoCount: *cint, perfResults: *cudnnConvolutionBwdDataAlgoPerf_t): cudnnStatus_t <cimport,nodecl> end
global function cudnnGetConvolutionBackwardDataWorkspaceSize(handle: cudnnHandle_t, wDesc: cudnnFilterDescriptor_t, dyDesc: cudnnTensorDescriptor_t, convDesc: cudnnConvolutionDescriptor_t, dxDesc: cudnnTensorDescriptor_t, algo: cudnnConvolutionBwdDataAlgo_t, sizeInBytes: *csize): cudnnStatus_t <cimport,nodecl> end
global function cudnnConvolutionBackwardData(handle: cudnnHandle_t, alpha: pointer, wDesc: cudnnFilterDescriptor_t, w: pointer, dyDesc: cudnnTensorDescriptor_t, dy: pointer, convDesc: cudnnConvolutionDescriptor_t, algo: cudnnConvolutionBwdDataAlgo_t, workSpace: pointer, workSpaceSizeInBytes: csize, beta: pointer, dxDesc: cudnnTensorDescriptor_t, dx: pointer): cudnnStatus_t <cimport,nodecl> end
global function cudnnGetFoldedConvBackwardDataDescriptors(handle: cudnnHandle_t, filterDesc: cudnnFilterDescriptor_t, diffDesc: cudnnTensorDescriptor_t, convDesc: cudnnConvolutionDescriptor_t, gradDesc: cudnnTensorDescriptor_t, transformFormat: cudnnTensorFormat_t, foldedFilterDesc: cudnnFilterDescriptor_t, paddedDiffDesc: cudnnTensorDescriptor_t, foldedConvDesc: cudnnConvolutionDescriptor_t, foldedGradDesc: cudnnTensorDescriptor_t, filterFoldTransDesc: cudnnTensorTransformDescriptor_t, diffPadTransDesc: cudnnTensorTransformDescriptor_t, gradFoldTransDesc: cudnnTensorTransformDescriptor_t, gradUnfoldTransDesc: cudnnTensorTransformDescriptor_t): cudnnStatus_t <cimport,nodecl> end
global function cudnnCnnInferVersionCheck(): cudnnStatus_t <cimport,nodecl> end
global function cudnnBackendCreateDescriptor(descriptorType: cudnnBackendDescriptorType_t, descriptor: *cudnnBackendDescriptor_t): cudnnStatus_t <cimport,nodecl> end
global function cudnnBackendDestroyDescriptor(descriptor: cudnnBackendDescriptor_t): cudnnStatus_t <cimport,nodecl> end
global function cudnnBackendInitialize(descriptor: cudnnBackendDescriptor_t): cudnnStatus_t <cimport,nodecl> end
global function cudnnBackendFinalize(descriptor: cudnnBackendDescriptor_t): cudnnStatus_t <cimport,nodecl> end
global function cudnnBackendSetAttribute(descriptor: cudnnBackendDescriptor_t, attributeName: cudnnBackendAttributeName_t, attributeType: cudnnBackendAttributeType_t, elementCount: int64, arrayOfElements: pointer): cudnnStatus_t <cimport,nodecl> end
global function cudnnBackendGetAttribute(descriptor: cudnnBackendDescriptor_t, attributeName: cudnnBackendAttributeName_t, attributeType: cudnnBackendAttributeType_t, requestedElementCount: int64, elementCount: *int64, arrayOfElements: pointer): cudnnStatus_t <cimport,nodecl> end
global function cudnnBackendExecute(handle: cudnnHandle_t, executionPlan: cudnnBackendDescriptor_t, variantPack: cudnnBackendDescriptor_t): cudnnStatus_t <cimport,nodecl> end
global cudaHostAllocDefault: cint <comptime> = 0
global cudaHostAllocPortable: cint <comptime> = 1
global cudaHostAllocMapped: cint <comptime> = 2
global cudaHostAllocWriteCombined: cint <comptime> = 4
global cudaHostRegisterDefault: cint <comptime> = 0
global cudaHostRegisterPortable: cint <comptime> = 1
global cudaHostRegisterMapped: cint <comptime> = 2
global cudaHostRegisterIoMemory: cint <comptime> = 4
global cudaHostRegisterReadOnly: cint <comptime> = 8
global cudaPeerAccessDefault: cint <comptime> = 0
global cudaStreamDefault: cint <comptime> = 0
global cudaStreamNonBlocking: cint <comptime> = 1
global cudaStreamLegacy: cudaStream_t <cimport,nodecl,const>
global cudaStreamPerThread: cudaStream_t <cimport,nodecl,const>
global cudaEventDefault: cint <comptime> = 0
global cudaEventBlockingSync: cint <comptime> = 1
global cudaEventDisableTiming: cint <comptime> = 2
global cudaEventInterprocess: cint <comptime> = 4
global cudaEventRecordDefault: cint <comptime> = 0
global cudaEventRecordExternal: cint <comptime> = 1
global cudaEventWaitDefault: cint <comptime> = 0
global cudaEventWaitExternal: cint <comptime> = 1
global cudaDeviceScheduleAuto: cint <comptime> = 0
global cudaDeviceScheduleSpin: cint <comptime> = 1
global cudaDeviceScheduleYield: cint <comptime> = 2
global cudaDeviceScheduleBlockingSync: cint <comptime> = 4
global cudaDeviceBlockingSync: cint <comptime> = 4
global cudaDeviceScheduleMask: cint <comptime> = 7
global cudaDeviceMapHost: cint <comptime> = 8
global cudaDeviceLmemResizeToMax: cint <comptime> = 16
global cudaDeviceSyncMemops: cint <comptime> = 128
global cudaDeviceMask: cint <comptime> = 255
global cudaArrayDefault: cint <comptime> = 0
global cudaArrayLayered: cint <comptime> = 1
global cudaArraySurfaceLoadStore: cint <comptime> = 2
global cudaArrayCubemap: cint <comptime> = 4
global cudaArrayTextureGather: cint <comptime> = 8
global cudaArrayColorAttachment: cint <comptime> = 32
global cudaArraySparse: cint <comptime> = 64
global cudaArrayDeferredMapping: cint <comptime> = 128
global cudaIpcMemLazyEnablePeerAccess: cint <comptime> = 1
global cudaMemAttachGlobal: cint <comptime> = 1
global cudaMemAttachHost: cint <comptime> = 2
global cudaMemAttachSingle: cint <comptime> = 4
global cudaOccupancyDefault: cint <comptime> = 0
global cudaOccupancyDisableCachingOverride: cint <comptime> = 1
global cudaCpuDeviceId: cint <comptime> = -1
global cudaInvalidDeviceId: cint <comptime> = -2
global cudaInitDeviceFlagsAreValid: cint <comptime> = 1
global cudaCooperativeLaunchMultiDeviceNoPreSync: cint <comptime> = 1
global cudaCooperativeLaunchMultiDeviceNoPostSync: cint <comptime> = 2
global cudaArraySparsePropertiesSingleMipTail: cint <comptime> = 1
global CUDA_IPC_HANDLE_SIZE: cint <comptime> = 64
global cudaExternalMemoryDedicated: cint <comptime> = 1
global cudaExternalSemaphoreSignalSkipNvSciBufMemSync: cint <comptime> = 1
global cudaExternalSemaphoreWaitSkipNvSciBufMemSync: cint <comptime> = 2
global cudaNvSciSyncAttrSignal: cint <comptime> = 1
global cudaNvSciSyncAttrWait: cint <comptime> = 2
global cudaStreamAttrID: type = cudaLaunchAttributeID
global cudaStreamAttributeAccessPolicyWindow: cint <comptime> = 1
global cudaStreamAttributeSynchronizationPolicy: cint <comptime> = 3
global cudaStreamAttributeMemSyncDomainMap: cint <comptime> = 9
global cudaStreamAttributeMemSyncDomain: cint <comptime> = 10
global cudaStreamAttributePriority: cint <comptime> = 8
global cudaStreamAttrValue: type = cudaLaunchAttributeValue
global cudaKernelNodeAttrID: type = cudaLaunchAttributeID
global cudaKernelNodeAttributeAccessPolicyWindow: cint <comptime> = 1
global cudaKernelNodeAttributeCooperative: cint <comptime> = 2
global cudaKernelNodeAttributePriority: cint <comptime> = 8
global cudaKernelNodeAttributeClusterDimension: cint <comptime> = 4
global cudaKernelNodeAttributeClusterSchedulingPolicyPreference: cint <comptime> = 5
global cudaKernelNodeAttributeMemSyncDomainMap: cint <comptime> = 9
global cudaKernelNodeAttributeMemSyncDomain: cint <comptime> = 10
global cudaKernelNodeAttrValue: type = cudaLaunchAttributeValue
global cudaSurfaceType1D: cint <comptime> = 1
global cudaSurfaceType2D: cint <comptime> = 2
global cudaSurfaceType3D: cint <comptime> = 3
global cudaSurfaceTypeCubemap: cint <comptime> = 12
global cudaSurfaceType1DLayered: cint <comptime> = 241
global cudaSurfaceType2DLayered: cint <comptime> = 242
global cudaSurfaceTypeCubemapLayered: cint <comptime> = 252
global cudaTextureType1D: cint <comptime> = 1
global cudaTextureType2D: cint <comptime> = 2
global cudaTextureType3D: cint <comptime> = 3
global cudaTextureTypeCubemap: cint <comptime> = 12
global cudaTextureType1DLayered: cint <comptime> = 241
global cudaTextureType2DLayered: cint <comptime> = 242
global cudaTextureTypeCubemapLayered: cint <comptime> = 252
global CUDART_VERSION: cint <comptime> = 12010
global function cudaGetDeviceProperties(prop: *cudaDeviceProp, device: cint): cudaError_t <cimport,nodecl> end
global CUBLAS_VER_MAJOR: cint <comptime> = 12
global CUBLAS_VER_MINOR: cint <comptime> = 1
global CUBLAS_VER_PATCH: cint <comptime> = 0
global CUBLAS_VER_BUILD: cint <comptime> = 26
global CUBLAS_VERSION: cint <comptime> = 120100
global function cublasCreate(handle: *cublasHandle_t): cublasStatus_t <cimport,nodecl> end
global function cublasDestroy(handle: cublasHandle_t): cublasStatus_t <cimport,nodecl> end
global function cublasGetVersion(handle: cublasHandle_t, version: *cint): cublasStatus_t <cimport,nodecl> end
global function cublasSetWorkspace(handle: cublasHandle_t, workspace: pointer, workspaceSizeInBytes: csize): cublasStatus_t <cimport,nodecl> end
global function cublasSetStream(handle: cublasHandle_t, streamId: cudaStream_t): cublasStatus_t <cimport,nodecl> end
global function cublasGetStream(handle: cublasHandle_t, streamId: *cudaStream_t): cublasStatus_t <cimport,nodecl> end
global function cublasGetPointerMode(handle: cublasHandle_t, mode: *cublasPointerMode_t): cublasStatus_t <cimport,nodecl> end
global function cublasSetPointerMode(handle: cublasHandle_t, mode: cublasPointerMode_t): cublasStatus_t <cimport,nodecl> end
global function cublasSnrm2(handle: cublasHandle_t, n: cint, x: *float32, incx: cint, result: *float32): cublasStatus_t <cimport,nodecl> end
global function cublasDnrm2(handle: cublasHandle_t, n: cint, x: *float64, incx: cint, result: *float64): cublasStatus_t <cimport,nodecl> end
global function cublasScnrm2(handle: cublasHandle_t, n: cint, x: *cuComplex, incx: cint, result: *float32): cublasStatus_t <cimport,nodecl> end
global function cublasDznrm2(handle: cublasHandle_t, n: cint, x: *cuDoubleComplex, incx: cint, result: *float64): cublasStatus_t <cimport,nodecl> end
global function cublasSdot(handle: cublasHandle_t, n: cint, x: *float32, incx: cint, y: *float32, incy: cint, result: *float32): cublasStatus_t <cimport,nodecl> end
global function cublasDdot(handle: cublasHandle_t, n: cint, x: *float64, incx: cint, y: *float64, incy: cint, result: *float64): cublasStatus_t <cimport,nodecl> end
global function cublasCdotu(handle: cublasHandle_t, n: cint, x: *cuComplex, incx: cint, y: *cuComplex, incy: cint, result: *cuComplex): cublasStatus_t <cimport,nodecl> end
global function cublasCdotc(handle: cublasHandle_t, n: cint, x: *cuComplex, incx: cint, y: *cuComplex, incy: cint, result: *cuComplex): cublasStatus_t <cimport,nodecl> end
global function cublasZdotu(handle: cublasHandle_t, n: cint, x: *cuDoubleComplex, incx: cint, y: *cuDoubleComplex, incy: cint, result: *cuDoubleComplex): cublasStatus_t <cimport,nodecl> end
global function cublasZdotc(handle: cublasHandle_t, n: cint, x: *cuDoubleComplex, incx: cint, y: *cuDoubleComplex, incy: cint, result: *cuDoubleComplex): cublasStatus_t <cimport,nodecl> end
global function cublasSscal(handle: cublasHandle_t, n: cint, alpha: *float32, x: *float32, incx: cint): cublasStatus_t <cimport,nodecl> end
global function cublasDscal(handle: cublasHandle_t, n: cint, alpha: *float64, x: *float64, incx: cint): cublasStatus_t <cimport,nodecl> end
global function cublasCscal(handle: cublasHandle_t, n: cint, alpha: *cuComplex, x: *cuComplex, incx: cint): cublasStatus_t <cimport,nodecl> end
global function cublasCsscal(handle: cublasHandle_t, n: cint, alpha: *float32, x: *cuComplex, incx: cint): cublasStatus_t <cimport,nodecl> end
global function cublasZscal(handle: cublasHandle_t, n: cint, alpha: *cuDoubleComplex, x: *cuDoubleComplex, incx: cint): cublasStatus_t <cimport,nodecl> end
global function cublasZdscal(handle: cublasHandle_t, n: cint, alpha: *float64, x: *cuDoubleComplex, incx: cint): cublasStatus_t <cimport,nodecl> end
global function cublasSaxpy(handle: cublasHandle_t, n: cint, alpha: *float32, x: *float32, incx: cint, y: *float32, incy: cint): cublasStatus_t <cimport,nodecl> end
global function cublasDaxpy(handle: cublasHandle_t, n: cint, alpha: *float64, x: *float64, incx: cint, y: *float64, incy: cint): cublasStatus_t <cimport,nodecl> end
global function cublasCaxpy(handle: cublasHandle_t, n: cint, alpha: *cuComplex, x: *cuComplex, incx: cint, y: *cuComplex, incy: cint): cublasStatus_t <cimport,nodecl> end
global function cublasZaxpy(handle: cublasHandle_t, n: cint, alpha: *cuDoubleComplex, x: *cuDoubleComplex, incx: cint, y: *cuDoubleComplex, incy: cint): cublasStatus_t <cimport,nodecl> end
global function cublasScopy(handle: cublasHandle_t, n: cint, x: *float32, incx: cint, y: *float32, incy: cint): cublasStatus_t <cimport,nodecl> end
global function cublasDcopy(handle: cublasHandle_t, n: cint, x: *float64, incx: cint, y: *float64, incy: cint): cublasStatus_t <cimport,nodecl> end
global function cublasCcopy(handle: cublasHandle_t, n: cint, x: *cuComplex, incx: cint, y: *cuComplex, incy: cint): cublasStatus_t <cimport,nodecl> end
global function cublasZcopy(handle: cublasHandle_t, n: cint, x: *cuDoubleComplex, incx: cint, y: *cuDoubleComplex, incy: cint): cublasStatus_t <cimport,nodecl> end
global function cublasSswap(handle: cublasHandle_t, n: cint, x: *float32, incx: cint, y: *float32, incy: cint): cublasStatus_t <cimport,nodecl> end
global function cublasDswap(handle: cublasHandle_t, n: cint, x: *float64, incx: cint, y: *float64, incy: cint): cublasStatus_t <cimport,nodecl> end
global function cublasCswap(handle: cublasHandle_t, n: cint, x: *cuComplex, incx: cint, y: *cuComplex, incy: cint): cublasStatus_t <cimport,nodecl> end
global function cublasZswap(handle: cublasHandle_t, n: cint, x: *cuDoubleComplex, incx: cint, y: *cuDoubleComplex, incy: cint): cublasStatus_t <cimport,nodecl> end
global function cublasIsamax(handle: cublasHandle_t, n: cint, x: *float32, incx: cint, result: *cint): cublasStatus_t <cimport,nodecl> end
global function cublasIdamax(handle: cublasHandle_t, n: cint, x: *float64, incx: cint, result: *cint): cublasStatus_t <cimport,nodecl> end
global function cublasIcamax(handle: cublasHandle_t, n: cint, x: *cuComplex, incx: cint, result: *cint): cublasStatus_t <cimport,nodecl> end
global function cublasIzamax(handle: cublasHandle_t, n: cint, x: *cuDoubleComplex, incx: cint, result: *cint): cublasStatus_t <cimport,nodecl> end
global function cublasIsamin(handle: cublasHandle_t, n: cint, x: *float32, incx: cint, result: *cint): cublasStatus_t <cimport,nodecl> end
global function cublasIdamin(handle: cublasHandle_t, n: cint, x: *float64, incx: cint, result: *cint): cublasStatus_t <cimport,nodecl> end
global function cublasIcamin(handle: cublasHandle_t, n: cint, x: *cuComplex, incx: cint, result: *cint): cublasStatus_t <cimport,nodecl> end
global function cublasIzamin(handle: cublasHandle_t, n: cint, x: *cuDoubleComplex, incx: cint, result: *cint): cublasStatus_t <cimport,nodecl> end
global function cublasSasum(handle: cublasHandle_t, n: cint, x: *float32, incx: cint, result: *float32): cublasStatus_t <cimport,nodecl> end
global function cublasDasum(handle: cublasHandle_t, n: cint, x: *float64, incx: cint, result: *float64): cublasStatus_t <cimport,nodecl> end
global function cublasScasum(handle: cublasHandle_t, n: cint, x: *cuComplex, incx: cint, result: *float32): cublasStatus_t <cimport,nodecl> end
global function cublasDzasum(handle: cublasHandle_t, n: cint, x: *cuDoubleComplex, incx: cint, result: *float64): cublasStatus_t <cimport,nodecl> end
global function cublasSrot(handle: cublasHandle_t, n: cint, x: *float32, incx: cint, y: *float32, incy: cint, c: *float32, s: *float32): cublasStatus_t <cimport,nodecl> end
global function cublasDrot(handle: cublasHandle_t, n: cint, x: *float64, incx: cint, y: *float64, incy: cint, c: *float64, s: *float64): cublasStatus_t <cimport,nodecl> end
global function cublasCrot(handle: cublasHandle_t, n: cint, x: *cuComplex, incx: cint, y: *cuComplex, incy: cint, c: *float32, s: *cuComplex): cublasStatus_t <cimport,nodecl> end
global function cublasCsrot(handle: cublasHandle_t, n: cint, x: *cuComplex, incx: cint, y: *cuComplex, incy: cint, c: *float32, s: *float32): cublasStatus_t <cimport,nodecl> end
global function cublasZrot(handle: cublasHandle_t, n: cint, x: *cuDoubleComplex, incx: cint, y: *cuDoubleComplex, incy: cint, c: *float64, s: *cuDoubleComplex): cublasStatus_t <cimport,nodecl> end
global function cublasZdrot(handle: cublasHandle_t, n: cint, x: *cuDoubleComplex, incx: cint, y: *cuDoubleComplex, incy: cint, c: *float64, s: *float64): cublasStatus_t <cimport,nodecl> end
global function cublasSrotg(handle: cublasHandle_t, a: *float32, b: *float32, c: *float32, s: *float32): cublasStatus_t <cimport,nodecl> end
global function cublasDrotg(handle: cublasHandle_t, a: *float64, b: *float64, c: *float64, s: *float64): cublasStatus_t <cimport,nodecl> end
global function cublasCrotg(handle: cublasHandle_t, a: *cuComplex, b: *cuComplex, c: *float32, s: *cuComplex): cublasStatus_t <cimport,nodecl> end
global function cublasZrotg(handle: cublasHandle_t, a: *cuDoubleComplex, b: *cuDoubleComplex, c: *float64, s: *cuDoubleComplex): cublasStatus_t <cimport,nodecl> end
global function cublasSrotm(handle: cublasHandle_t, n: cint, x: *float32, incx: cint, y: *float32, incy: cint, param: *float32): cublasStatus_t <cimport,nodecl> end
global function cublasDrotm(handle: cublasHandle_t, n: cint, x: *float64, incx: cint, y: *float64, incy: cint, param: *float64): cublasStatus_t <cimport,nodecl> end
global function cublasSrotmg(handle: cublasHandle_t, d1: *float32, d2: *float32, x1: *float32, y1: *float32, param: *float32): cublasStatus_t <cimport,nodecl> end
global function cublasDrotmg(handle: cublasHandle_t, d1: *float64, d2: *float64, x1: *float64, y1: *float64, param: *float64): cublasStatus_t <cimport,nodecl> end
global function cublasSgemv(handle: cublasHandle_t, trans: cublasOperation_t, m: cint, n: cint, alpha: *float32, A: *float32, lda: cint, x: *float32, incx: cint, beta: *float32, y: *float32, incy: cint): cublasStatus_t <cimport,nodecl> end
global function cublasDgemv(handle: cublasHandle_t, trans: cublasOperation_t, m: cint, n: cint, alpha: *float64, A: *float64, lda: cint, x: *float64, incx: cint, beta: *float64, y: *float64, incy: cint): cublasStatus_t <cimport,nodecl> end
global function cublasCgemv(handle: cublasHandle_t, trans: cublasOperation_t, m: cint, n: cint, alpha: *cuComplex, A: *cuComplex, lda: cint, x: *cuComplex, incx: cint, beta: *cuComplex, y: *cuComplex, incy: cint): cublasStatus_t <cimport,nodecl> end
global function cublasZgemv(handle: cublasHandle_t, trans: cublasOperation_t, m: cint, n: cint, alpha: *cuDoubleComplex, A: *cuDoubleComplex, lda: cint, x: *cuDoubleComplex, incx: cint, beta: *cuDoubleComplex, y: *cuDoubleComplex, incy: cint): cublasStatus_t <cimport,nodecl> end
global function cublasSgbmv(handle: cublasHandle_t, trans: cublasOperation_t, m: cint, n: cint, kl: cint, ku: cint, alpha: *float32, A: *float32, lda: cint, x: *float32, incx: cint, beta: *float32, y: *float32, incy: cint): cublasStatus_t <cimport,nodecl> end
global function cublasDgbmv(handle: cublasHandle_t, trans: cublasOperation_t, m: cint, n: cint, kl: cint, ku: cint, alpha: *float64, A: *float64, lda: cint, x: *float64, incx: cint, beta: *float64, y: *float64, incy: cint): cublasStatus_t <cimport,nodecl> end
global function cublasCgbmv(handle: cublasHandle_t, trans: cublasOperation_t, m: cint, n: cint, kl: cint, ku: cint, alpha: *cuComplex, A: *cuComplex, lda: cint, x: *cuComplex, incx: cint, beta: *cuComplex, y: *cuComplex, incy: cint): cublasStatus_t <cimport,nodecl> end
global function cublasZgbmv(handle: cublasHandle_t, trans: cublasOperation_t, m: cint, n: cint, kl: cint, ku: cint, alpha: *cuDoubleComplex, A: *cuDoubleComplex, lda: cint, x: *cuDoubleComplex, incx: cint, beta: *cuDoubleComplex, y: *cuDoubleComplex, incy: cint): cublasStatus_t <cimport,nodecl> end
global function cublasStrmv(handle: cublasHandle_t, uplo: cublasFillMode_t, trans: cublasOperation_t, diag: cublasDiagType_t, n: cint, A: *float32, lda: cint, x: *float32, incx: cint): cublasStatus_t <cimport,nodecl> end
global function cublasDtrmv(handle: cublasHandle_t, uplo: cublasFillMode_t, trans: cublasOperation_t, diag: cublasDiagType_t, n: cint, A: *float64, lda: cint, x: *float64, incx: cint): cublasStatus_t <cimport,nodecl> end
global function cublasCtrmv(handle: cublasHandle_t, uplo: cublasFillMode_t, trans: cublasOperation_t, diag: cublasDiagType_t, n: cint, A: *cuComplex, lda: cint, x: *cuComplex, incx: cint): cublasStatus_t <cimport,nodecl> end
global function cublasZtrmv(handle: cublasHandle_t, uplo: cublasFillMode_t, trans: cublasOperation_t, diag: cublasDiagType_t, n: cint, A: *cuDoubleComplex, lda: cint, x: *cuDoubleComplex, incx: cint): cublasStatus_t <cimport,nodecl> end
global function cublasStbmv(handle: cublasHandle_t, uplo: cublasFillMode_t, trans: cublasOperation_t, diag: cublasDiagType_t, n: cint, k: cint, A: *float32, lda: cint, x: *float32, incx: cint): cublasStatus_t <cimport,nodecl> end
global function cublasDtbmv(handle: cublasHandle_t, uplo: cublasFillMode_t, trans: cublasOperation_t, diag: cublasDiagType_t, n: cint, k: cint, A: *float64, lda: cint, x: *float64, incx: cint): cublasStatus_t <cimport,nodecl> end
global function cublasCtbmv(handle: cublasHandle_t, uplo: cublasFillMode_t, trans: cublasOperation_t, diag: cublasDiagType_t, n: cint, k: cint, A: *cuComplex, lda: cint, x: *cuComplex, incx: cint): cublasStatus_t <cimport,nodecl> end
global function cublasZtbmv(handle: cublasHandle_t, uplo: cublasFillMode_t, trans: cublasOperation_t, diag: cublasDiagType_t, n: cint, k: cint, A: *cuDoubleComplex, lda: cint, x: *cuDoubleComplex, incx: cint): cublasStatus_t <cimport,nodecl> end
global function cublasStpmv(handle: cublasHandle_t, uplo: cublasFillMode_t, trans: cublasOperation_t, diag: cublasDiagType_t, n: cint, AP: *float32, x: *float32, incx: cint): cublasStatus_t <cimport,nodecl> end
global function cublasDtpmv(handle: cublasHandle_t, uplo: cublasFillMode_t, trans: cublasOperation_t, diag: cublasDiagType_t, n: cint, AP: *float64, x: *float64, incx: cint): cublasStatus_t <cimport,nodecl> end
global function cublasCtpmv(handle: cublasHandle_t, uplo: cublasFillMode_t, trans: cublasOperation_t, diag: cublasDiagType_t, n: cint, AP: *cuComplex, x: *cuComplex, incx: cint): cublasStatus_t <cimport,nodecl> end
global function cublasZtpmv(handle: cublasHandle_t, uplo: cublasFillMode_t, trans: cublasOperation_t, diag: cublasDiagType_t, n: cint, AP: *cuDoubleComplex, x: *cuDoubleComplex, incx: cint): cublasStatus_t <cimport,nodecl> end
global function cublasStrsv(handle: cublasHandle_t, uplo: cublasFillMode_t, trans: cublasOperation_t, diag: cublasDiagType_t, n: cint, A: *float32, lda: cint, x: *float32, incx: cint): cublasStatus_t <cimport,nodecl> end
global function cublasDtrsv(handle: cublasHandle_t, uplo: cublasFillMode_t, trans: cublasOperation_t, diag: cublasDiagType_t, n: cint, A: *float64, lda: cint, x: *float64, incx: cint): cublasStatus_t <cimport,nodecl> end
global function cublasCtrsv(handle: cublasHandle_t, uplo: cublasFillMode_t, trans: cublasOperation_t, diag: cublasDiagType_t, n: cint, A: *cuComplex, lda: cint, x: *cuComplex, incx: cint): cublasStatus_t <cimport,nodecl> end
global function cublasZtrsv(handle: cublasHandle_t, uplo: cublasFillMode_t, trans: cublasOperation_t, diag: cublasDiagType_t, n: cint, A: *cuDoubleComplex, lda: cint, x: *cuDoubleComplex, incx: cint): cublasStatus_t <cimport,nodecl> end
global function cublasStpsv(handle: cublasHandle_t, uplo: cublasFillMode_t, trans: cublasOperation_t, diag: cublasDiagType_t, n: cint, AP: *float32, x: *float32, incx: cint): cublasStatus_t <cimport,nodecl> end
global function cublasDtpsv(handle: cublasHandle_t, uplo: cublasFillMode_t, trans: cublasOperation_t, diag: cublasDiagType_t, n: cint, AP: *float64, x: *float64, incx: cint): cublasStatus_t <cimport,nodecl> end
global function cublasCtpsv(handle: cublasHandle_t, uplo: cublasFillMode_t, trans: cublasOperation_t, diag: cublasDiagType_t, n: cint, AP: *cuComplex, x: *cuComplex, incx: cint): cublasStatus_t <cimport,nodecl> end
global function cublasZtpsv(handle: cublasHandle_t, uplo: cublasFillMode_t, trans: cublasOperation_t, diag: cublasDiagType_t, n: cint, AP: *cuDoubleComplex, x: *cuDoubleComplex, incx: cint): cublasStatus_t <cimport,nodecl> end
global function cublasStbsv(handle: cublasHandle_t, uplo: cublasFillMode_t, trans: cublasOperation_t, diag: cublasDiagType_t, n: cint, k: cint, A: *float32, lda: cint, x: *float32, incx: cint): cublasStatus_t <cimport,nodecl> end
global function cublasDtbsv(handle: cublasHandle_t, uplo: cublasFillMode_t, trans: cublasOperation_t, diag: cublasDiagType_t, n: cint, k: cint, A: *float64, lda: cint, x: *float64, incx: cint): cublasStatus_t <cimport,nodecl> end
global function cublasCtbsv(handle: cublasHandle_t, uplo: cublasFillMode_t, trans: cublasOperation_t, diag: cublasDiagType_t, n: cint, k: cint, A: *cuComplex, lda: cint, x: *cuComplex, incx: cint): cublasStatus_t <cimport,nodecl> end
global function cublasZtbsv(handle: cublasHandle_t, uplo: cublasFillMode_t, trans: cublasOperation_t, diag: cublasDiagType_t, n: cint, k: cint, A: *cuDoubleComplex, lda: cint, x: *cuDoubleComplex, incx: cint): cublasStatus_t <cimport,nodecl> end
global function cublasSsymv(handle: cublasHandle_t, uplo: cublasFillMode_t, n: cint, alpha: *float32, A: *float32, lda: cint, x: *float32, incx: cint, beta: *float32, y: *float32, incy: cint): cublasStatus_t <cimport,nodecl> end
global function cublasDsymv(handle: cublasHandle_t, uplo: cublasFillMode_t, n: cint, alpha: *float64, A: *float64, lda: cint, x: *float64, incx: cint, beta: *float64, y: *float64, incy: cint): cublasStatus_t <cimport,nodecl> end
global function cublasCsymv(handle: cublasHandle_t, uplo: cublasFillMode_t, n: cint, alpha: *cuComplex, A: *cuComplex, lda: cint, x: *cuComplex, incx: cint, beta: *cuComplex, y: *cuComplex, incy: cint): cublasStatus_t <cimport,nodecl> end
global function cublasZsymv(handle: cublasHandle_t, uplo: cublasFillMode_t, n: cint, alpha: *cuDoubleComplex, A: *cuDoubleComplex, lda: cint, x: *cuDoubleComplex, incx: cint, beta: *cuDoubleComplex, y: *cuDoubleComplex, incy: cint): cublasStatus_t <cimport,nodecl> end
global function cublasChemv(handle: cublasHandle_t, uplo: cublasFillMode_t, n: cint, alpha: *cuComplex, A: *cuComplex, lda: cint, x: *cuComplex, incx: cint, beta: *cuComplex, y: *cuComplex, incy: cint): cublasStatus_t <cimport,nodecl> end
global function cublasZhemv(handle: cublasHandle_t, uplo: cublasFillMode_t, n: cint, alpha: *cuDoubleComplex, A: *cuDoubleComplex, lda: cint, x: *cuDoubleComplex, incx: cint, beta: *cuDoubleComplex, y: *cuDoubleComplex, incy: cint): cublasStatus_t <cimport,nodecl> end
global function cublasSsbmv(handle: cublasHandle_t, uplo: cublasFillMode_t, n: cint, k: cint, alpha: *float32, A: *float32, lda: cint, x: *float32, incx: cint, beta: *float32, y: *float32, incy: cint): cublasStatus_t <cimport,nodecl> end
global function cublasDsbmv(handle: cublasHandle_t, uplo: cublasFillMode_t, n: cint, k: cint, alpha: *float64, A: *float64, lda: cint, x: *float64, incx: cint, beta: *float64, y: *float64, incy: cint): cublasStatus_t <cimport,nodecl> end
global function cublasChbmv(handle: cublasHandle_t, uplo: cublasFillMode_t, n: cint, k: cint, alpha: *cuComplex, A: *cuComplex, lda: cint, x: *cuComplex, incx: cint, beta: *cuComplex, y: *cuComplex, incy: cint): cublasStatus_t <cimport,nodecl> end
global function cublasZhbmv(handle: cublasHandle_t, uplo: cublasFillMode_t, n: cint, k: cint, alpha: *cuDoubleComplex, A: *cuDoubleComplex, lda: cint, x: *cuDoubleComplex, incx: cint, beta: *cuDoubleComplex, y: *cuDoubleComplex, incy: cint): cublasStatus_t <cimport,nodecl> end
global function cublasSspmv(handle: cublasHandle_t, uplo: cublasFillMode_t, n: cint, alpha: *float32, AP: *float32, x: *float32, incx: cint, beta: *float32, y: *float32, incy: cint): cublasStatus_t <cimport,nodecl> end
global function cublasDspmv(handle: cublasHandle_t, uplo: cublasFillMode_t, n: cint, alpha: *float64, AP: *float64, x: *float64, incx: cint, beta: *float64, y: *float64, incy: cint): cublasStatus_t <cimport,nodecl> end
global function cublasChpmv(handle: cublasHandle_t, uplo: cublasFillMode_t, n: cint, alpha: *cuComplex, AP: *cuComplex, x: *cuComplex, incx: cint, beta: *cuComplex, y: *cuComplex, incy: cint): cublasStatus_t <cimport,nodecl> end
global function cublasZhpmv(handle: cublasHandle_t, uplo: cublasFillMode_t, n: cint, alpha: *cuDoubleComplex, AP: *cuDoubleComplex, x: *cuDoubleComplex, incx: cint, beta: *cuDoubleComplex, y: *cuDoubleComplex, incy: cint): cublasStatus_t <cimport,nodecl> end
global function cublasSger(handle: cublasHandle_t, m: cint, n: cint, alpha: *float32, x: *float32, incx: cint, y: *float32, incy: cint, A: *float32, lda: cint): cublasStatus_t <cimport,nodecl> end
global function cublasDger(handle: cublasHandle_t, m: cint, n: cint, alpha: *float64, x: *float64, incx: cint, y: *float64, incy: cint, A: *float64, lda: cint): cublasStatus_t <cimport,nodecl> end
global function cublasCgeru(handle: cublasHandle_t, m: cint, n: cint, alpha: *cuComplex, x: *cuComplex, incx: cint, y: *cuComplex, incy: cint, A: *cuComplex, lda: cint): cublasStatus_t <cimport,nodecl> end
global function cublasCgerc(handle: cublasHandle_t, m: cint, n: cint, alpha: *cuComplex, x: *cuComplex, incx: cint, y: *cuComplex, incy: cint, A: *cuComplex, lda: cint): cublasStatus_t <cimport,nodecl> end
global function cublasZgeru(handle: cublasHandle_t, m: cint, n: cint, alpha: *cuDoubleComplex, x: *cuDoubleComplex, incx: cint, y: *cuDoubleComplex, incy: cint, A: *cuDoubleComplex, lda: cint): cublasStatus_t <cimport,nodecl> end
global function cublasZgerc(handle: cublasHandle_t, m: cint, n: cint, alpha: *cuDoubleComplex, x: *cuDoubleComplex, incx: cint, y: *cuDoubleComplex, incy: cint, A: *cuDoubleComplex, lda: cint): cublasStatus_t <cimport,nodecl> end
global function cublasSsyr(handle: cublasHandle_t, uplo: cublasFillMode_t, n: cint, alpha: *float32, x: *float32, incx: cint, A: *float32, lda: cint): cublasStatus_t <cimport,nodecl> end
global function cublasDsyr(handle: cublasHandle_t, uplo: cublasFillMode_t, n: cint, alpha: *float64, x: *float64, incx: cint, A: *float64, lda: cint): cublasStatus_t <cimport,nodecl> end
global function cublasCsyr(handle: cublasHandle_t, uplo: cublasFillMode_t, n: cint, alpha: *cuComplex, x: *cuComplex, incx: cint, A: *cuComplex, lda: cint): cublasStatus_t <cimport,nodecl> end
global function cublasZsyr(handle: cublasHandle_t, uplo: cublasFillMode_t, n: cint, alpha: *cuDoubleComplex, x: *cuDoubleComplex, incx: cint, A: *cuDoubleComplex, lda: cint): cublasStatus_t <cimport,nodecl> end
global function cublasCher(handle: cublasHandle_t, uplo: cublasFillMode_t, n: cint, alpha: *float32, x: *cuComplex, incx: cint, A: *cuComplex, lda: cint): cublasStatus_t <cimport,nodecl> end
global function cublasZher(handle: cublasHandle_t, uplo: cublasFillMode_t, n: cint, alpha: *float64, x: *cuDoubleComplex, incx: cint, A: *cuDoubleComplex, lda: cint): cublasStatus_t <cimport,nodecl> end
global function cublasSspr(handle: cublasHandle_t, uplo: cublasFillMode_t, n: cint, alpha: *float32, x: *float32, incx: cint, AP: *float32): cublasStatus_t <cimport,nodecl> end
global function cublasDspr(handle: cublasHandle_t, uplo: cublasFillMode_t, n: cint, alpha: *float64, x: *float64, incx: cint, AP: *float64): cublasStatus_t <cimport,nodecl> end
global function cublasChpr(handle: cublasHandle_t, uplo: cublasFillMode_t, n: cint, alpha: *float32, x: *cuComplex, incx: cint, AP: *cuComplex): cublasStatus_t <cimport,nodecl> end
global function cublasZhpr(handle: cublasHandle_t, uplo: cublasFillMode_t, n: cint, alpha: *float64, x: *cuDoubleComplex, incx: cint, AP: *cuDoubleComplex): cublasStatus_t <cimport,nodecl> end
global function cublasSsyr2(handle: cublasHandle_t, uplo: cublasFillMode_t, n: cint, alpha: *float32, x: *float32, incx: cint, y: *float32, incy: cint, A: *float32, lda: cint): cublasStatus_t <cimport,nodecl> end
global function cublasDsyr2(handle: cublasHandle_t, uplo: cublasFillMode_t, n: cint, alpha: *float64, x: *float64, incx: cint, y: *float64, incy: cint, A: *float64, lda: cint): cublasStatus_t <cimport,nodecl> end
global function cublasCsyr2(handle: cublasHandle_t, uplo: cublasFillMode_t, n: cint, alpha: *cuComplex, x: *cuComplex, incx: cint, y: *cuComplex, incy: cint, A: *cuComplex, lda: cint): cublasStatus_t <cimport,nodecl> end
global function cublasZsyr2(handle: cublasHandle_t, uplo: cublasFillMode_t, n: cint, alpha: *cuDoubleComplex, x: *cuDoubleComplex, incx: cint, y: *cuDoubleComplex, incy: cint, A: *cuDoubleComplex, lda: cint): cublasStatus_t <cimport,nodecl> end
global function cublasCher2(handle: cublasHandle_t, uplo: cublasFillMode_t, n: cint, alpha: *cuComplex, x: *cuComplex, incx: cint, y: *cuComplex, incy: cint, A: *cuComplex, lda: cint): cublasStatus_t <cimport,nodecl> end
global function cublasZher2(handle: cublasHandle_t, uplo: cublasFillMode_t, n: cint, alpha: *cuDoubleComplex, x: *cuDoubleComplex, incx: cint, y: *cuDoubleComplex, incy: cint, A: *cuDoubleComplex, lda: cint): cublasStatus_t <cimport,nodecl> end
global function cublasSspr2(handle: cublasHandle_t, uplo: cublasFillMode_t, n: cint, alpha: *float32, x: *float32, incx: cint, y: *float32, incy: cint, AP: *float32): cublasStatus_t <cimport,nodecl> end
global function cublasDspr2(handle: cublasHandle_t, uplo: cublasFillMode_t, n: cint, alpha: *float64, x: *float64, incx: cint, y: *float64, incy: cint, AP: *float64): cublasStatus_t <cimport,nodecl> end
global function cublasChpr2(handle: cublasHandle_t, uplo: cublasFillMode_t, n: cint, alpha: *cuComplex, x: *cuComplex, incx: cint, y: *cuComplex, incy: cint, AP: *cuComplex): cublasStatus_t <cimport,nodecl> end
global function cublasZhpr2(handle: cublasHandle_t, uplo: cublasFillMode_t, n: cint, alpha: *cuDoubleComplex, x: *cuDoubleComplex, incx: cint, y: *cuDoubleComplex, incy: cint, AP: *cuDoubleComplex): cublasStatus_t <cimport,nodecl> end
global function cublasSgemm(handle: cublasHandle_t, transa: cublasOperation_t, transb: cublasOperation_t, m: cint, n: cint, k: cint, alpha: *float32, A: *float32, lda: cint, B: *float32, ldb: cint, beta: *float32, C: *float32, ldc: cint): cublasStatus_t <cimport,nodecl> end
global function cublasDgemm(handle: cublasHandle_t, transa: cublasOperation_t, transb: cublasOperation_t, m: cint, n: cint, k: cint, alpha: *float64, A: *float64, lda: cint, B: *float64, ldb: cint, beta: *float64, C: *float64, ldc: cint): cublasStatus_t <cimport,nodecl> end
global function cublasCgemm(handle: cublasHandle_t, transa: cublasOperation_t, transb: cublasOperation_t, m: cint, n: cint, k: cint, alpha: *cuComplex, A: *cuComplex, lda: cint, B: *cuComplex, ldb: cint, beta: *cuComplex, C: *cuComplex, ldc: cint): cublasStatus_t <cimport,nodecl> end
global function cublasZgemm(handle: cublasHandle_t, transa: cublasOperation_t, transb: cublasOperation_t, m: cint, n: cint, k: cint, alpha: *cuDoubleComplex, A: *cuDoubleComplex, lda: cint, B: *cuDoubleComplex, ldb: cint, beta: *cuDoubleComplex, C: *cuDoubleComplex, ldc: cint): cublasStatus_t <cimport,nodecl> end
global function cublasSsyrk(handle: cublasHandle_t, uplo: cublasFillMode_t, trans: cublasOperation_t, n: cint, k: cint, alpha: *float32, A: *float32, lda: cint, beta: *float32, C: *float32, ldc: cint): cublasStatus_t <cimport,nodecl> end
global function cublasDsyrk(handle: cublasHandle_t, uplo: cublasFillMode_t, trans: cublasOperation_t, n: cint, k: cint, alpha: *float64, A: *float64, lda: cint, beta: *float64, C: *float64, ldc: cint): cublasStatus_t <cimport,nodecl> end
global function cublasCsyrk(handle: cublasHandle_t, uplo: cublasFillMode_t, trans: cublasOperation_t, n: cint, k: cint, alpha: *cuComplex, A: *cuComplex, lda: cint, beta: *cuComplex, C: *cuComplex, ldc: cint): cublasStatus_t <cimport,nodecl> end
global function cublasZsyrk(handle: cublasHandle_t, uplo: cublasFillMode_t, trans: cublasOperation_t, n: cint, k: cint, alpha: *cuDoubleComplex, A: *cuDoubleComplex, lda: cint, beta: *cuDoubleComplex, C: *cuDoubleComplex, ldc: cint): cublasStatus_t <cimport,nodecl> end
global function cublasCherk(handle: cublasHandle_t, uplo: cublasFillMode_t, trans: cublasOperation_t, n: cint, k: cint, alpha: *float32, A: *cuComplex, lda: cint, beta: *float32, C: *cuComplex, ldc: cint): cublasStatus_t <cimport,nodecl> end
global function cublasZherk(handle: cublasHandle_t, uplo: cublasFillMode_t, trans: cublasOperation_t, n: cint, k: cint, alpha: *float64, A: *cuDoubleComplex, lda: cint, beta: *float64, C: *cuDoubleComplex, ldc: cint): cublasStatus_t <cimport,nodecl> end
global function cublasSsyr2k(handle: cublasHandle_t, uplo: cublasFillMode_t, trans: cublasOperation_t, n: cint, k: cint, alpha: *float32, A: *float32, lda: cint, B: *float32, ldb: cint, beta: *float32, C: *float32, ldc: cint): cublasStatus_t <cimport,nodecl> end
global function cublasDsyr2k(handle: cublasHandle_t, uplo: cublasFillMode_t, trans: cublasOperation_t, n: cint, k: cint, alpha: *float64, A: *float64, lda: cint, B: *float64, ldb: cint, beta: *float64, C: *float64, ldc: cint): cublasStatus_t <cimport,nodecl> end
global function cublasCsyr2k(handle: cublasHandle_t, uplo: cublasFillMode_t, trans: cublasOperation_t, n: cint, k: cint, alpha: *cuComplex, A: *cuComplex, lda: cint, B: *cuComplex, ldb: cint, beta: *cuComplex, C: *cuComplex, ldc: cint): cublasStatus_t <cimport,nodecl> end
global function cublasZsyr2k(handle: cublasHandle_t, uplo: cublasFillMode_t, trans: cublasOperation_t, n: cint, k: cint, alpha: *cuDoubleComplex, A: *cuDoubleComplex, lda: cint, B: *cuDoubleComplex, ldb: cint, beta: *cuDoubleComplex, C: *cuDoubleComplex, ldc: cint): cublasStatus_t <cimport,nodecl> end
global function cublasCher2k(handle: cublasHandle_t, uplo: cublasFillMode_t, trans: cublasOperation_t, n: cint, k: cint, alpha: *cuComplex, A: *cuComplex, lda: cint, B: *cuComplex, ldb: cint, beta: *float32, C: *cuComplex, ldc: cint): cublasStatus_t <cimport,nodecl> end
global function cublasZher2k(handle: cublasHandle_t, uplo: cublasFillMode_t, trans: cublasOperation_t, n: cint, k: cint, alpha: *cuDoubleComplex, A: *cuDoubleComplex, lda: cint, B: *cuDoubleComplex, ldb: cint, beta: *float64, C: *cuDoubleComplex, ldc: cint): cublasStatus_t <cimport,nodecl> end
global function cublasSsymm(handle: cublasHandle_t, side: cublasSideMode_t, uplo: cublasFillMode_t, m: cint, n: cint, alpha: *float32, A: *float32, lda: cint, B: *float32, ldb: cint, beta: *float32, C: *float32, ldc: cint): cublasStatus_t <cimport,nodecl> end
global function cublasDsymm(handle: cublasHandle_t, side: cublasSideMode_t, uplo: cublasFillMode_t, m: cint, n: cint, alpha: *float64, A: *float64, lda: cint, B: *float64, ldb: cint, beta: *float64, C: *float64, ldc: cint): cublasStatus_t <cimport,nodecl> end
global function cublasCsymm(handle: cublasHandle_t, side: cublasSideMode_t, uplo: cublasFillMode_t, m: cint, n: cint, alpha: *cuComplex, A: *cuComplex, lda: cint, B: *cuComplex, ldb: cint, beta: *cuComplex, C: *cuComplex, ldc: cint): cublasStatus_t <cimport,nodecl> end
global function cublasZsymm(handle: cublasHandle_t, side: cublasSideMode_t, uplo: cublasFillMode_t, m: cint, n: cint, alpha: *cuDoubleComplex, A: *cuDoubleComplex, lda: cint, B: *cuDoubleComplex, ldb: cint, beta: *cuDoubleComplex, C: *cuDoubleComplex, ldc: cint): cublasStatus_t <cimport,nodecl> end
global function cublasChemm(handle: cublasHandle_t, side: cublasSideMode_t, uplo: cublasFillMode_t, m: cint, n: cint, alpha: *cuComplex, A: *cuComplex, lda: cint, B: *cuComplex, ldb: cint, beta: *cuComplex, C: *cuComplex, ldc: cint): cublasStatus_t <cimport,nodecl> end
global function cublasZhemm(handle: cublasHandle_t, side: cublasSideMode_t, uplo: cublasFillMode_t, m: cint, n: cint, alpha: *cuDoubleComplex, A: *cuDoubleComplex, lda: cint, B: *cuDoubleComplex, ldb: cint, beta: *cuDoubleComplex, C: *cuDoubleComplex, ldc: cint): cublasStatus_t <cimport,nodecl> end
global function cublasStrsm(handle: cublasHandle_t, side: cublasSideMode_t, uplo: cublasFillMode_t, trans: cublasOperation_t, diag: cublasDiagType_t, m: cint, n: cint, alpha: *float32, A: *float32, lda: cint, B: *float32, ldb: cint): cublasStatus_t <cimport,nodecl> end
global function cublasDtrsm(handle: cublasHandle_t, side: cublasSideMode_t, uplo: cublasFillMode_t, trans: cublasOperation_t, diag: cublasDiagType_t, m: cint, n: cint, alpha: *float64, A: *float64, lda: cint, B: *float64, ldb: cint): cublasStatus_t <cimport,nodecl> end
global function cublasCtrsm(handle: cublasHandle_t, side: cublasSideMode_t, uplo: cublasFillMode_t, trans: cublasOperation_t, diag: cublasDiagType_t, m: cint, n: cint, alpha: *cuComplex, A: *cuComplex, lda: cint, B: *cuComplex, ldb: cint): cublasStatus_t <cimport,nodecl> end
global function cublasZtrsm(handle: cublasHandle_t, side: cublasSideMode_t, uplo: cublasFillMode_t, trans: cublasOperation_t, diag: cublasDiagType_t, m: cint, n: cint, alpha: *cuDoubleComplex, A: *cuDoubleComplex, lda: cint, B: *cuDoubleComplex, ldb: cint): cublasStatus_t <cimport,nodecl> end
global function cublasStrmm(handle: cublasHandle_t, side: cublasSideMode_t, uplo: cublasFillMode_t, trans: cublasOperation_t, diag: cublasDiagType_t, m: cint, n: cint, alpha: *float32, A: *float32, lda: cint, B: *float32, ldb: cint, C: *float32, ldc: cint): cublasStatus_t <cimport,nodecl> end
global function cublasDtrmm(handle: cublasHandle_t, side: cublasSideMode_t, uplo: cublasFillMode_t, trans: cublasOperation_t, diag: cublasDiagType_t, m: cint, n: cint, alpha: *float64, A: *float64, lda: cint, B: *float64, ldb: cint, C: *float64, ldc: cint): cublasStatus_t <cimport,nodecl> end
global function cublasCtrmm(handle: cublasHandle_t, side: cublasSideMode_t, uplo: cublasFillMode_t, trans: cublasOperation_t, diag: cublasDiagType_t, m: cint, n: cint, alpha: *cuComplex, A: *cuComplex, lda: cint, B: *cuComplex, ldb: cint, C: *cuComplex, ldc: cint): cublasStatus_t <cimport,nodecl> end
global function cublasZtrmm(handle: cublasHandle_t, side: cublasSideMode_t, uplo: cublasFillMode_t, trans: cublasOperation_t, diag: cublasDiagType_t, m: cint, n: cint, alpha: *cuDoubleComplex, A: *cuDoubleComplex, lda: cint, B: *cuDoubleComplex, ldb: cint, C: *cuDoubleComplex, ldc: cint): cublasStatus_t <cimport,nodecl> end
global function cublasSnrm2_64(handle: cublasHandle_t, n: int64, x: *float32, incx: int64, result: *float32): cublasStatus_t <cimport,nodecl> end
global function cublasDnrm2_64(handle: cublasHandle_t, n: int64, x: *float64, incx: int64, result: *float64): cublasStatus_t <cimport,nodecl> end
global function cublasScnrm2_64(handle: cublasHandle_t, n: int64, x: *cuComplex, incx: int64, result: *float32): cublasStatus_t <cimport,nodecl> end
global function cublasDznrm2_64(handle: cublasHandle_t, n: int64, x: *cuDoubleComplex, incx: int64, result: *float64): cublasStatus_t <cimport,nodecl> end
global function cublasSdot_64(handle: cublasHandle_t, n: int64, x: *float32, incx: int64, y: *float32, incy: int64, result: *float32): cublasStatus_t <cimport,nodecl> end
global function cublasDdot_64(handle: cublasHandle_t, n: int64, x: *float64, incx: int64, y: *float64, incy: int64, result: *float64): cublasStatus_t <cimport,nodecl> end
global function cublasCdotu_64(handle: cublasHandle_t, n: int64, x: *cuComplex, incx: int64, y: *cuComplex, incy: int64, result: *cuComplex): cublasStatus_t <cimport,nodecl> end
global function cublasCdotc_64(handle: cublasHandle_t, n: int64, x: *cuComplex, incx: int64, y: *cuComplex, incy: int64, result: *cuComplex): cublasStatus_t <cimport,nodecl> end
global function cublasZdotu_64(handle: cublasHandle_t, n: int64, x: *cuDoubleComplex, incx: int64, y: *cuDoubleComplex, incy: int64, result: *cuDoubleComplex): cublasStatus_t <cimport,nodecl> end
global function cublasZdotc_64(handle: cublasHandle_t, n: int64, x: *cuDoubleComplex, incx: int64, y: *cuDoubleComplex, incy: int64, result: *cuDoubleComplex): cublasStatus_t <cimport,nodecl> end
global function cublasSscal_64(handle: cublasHandle_t, n: int64, alpha: *float32, x: *float32, incx: int64): cublasStatus_t <cimport,nodecl> end
global function cublasDscal_64(handle: cublasHandle_t, n: int64, alpha: *float64, x: *float64, incx: int64): cublasStatus_t <cimport,nodecl> end
global function cublasCscal_64(handle: cublasHandle_t, n: int64, alpha: *cuComplex, x: *cuComplex, incx: int64): cublasStatus_t <cimport,nodecl> end
global function cublasCsscal_64(handle: cublasHandle_t, n: int64, alpha: *float32, x: *cuComplex, incx: int64): cublasStatus_t <cimport,nodecl> end
global function cublasZscal_64(handle: cublasHandle_t, n: int64, alpha: *cuDoubleComplex, x: *cuDoubleComplex, incx: int64): cublasStatus_t <cimport,nodecl> end
global function cublasZdscal_64(handle: cublasHandle_t, n: int64, alpha: *float64, x: *cuDoubleComplex, incx: int64): cublasStatus_t <cimport,nodecl> end
global function cublasSaxpy_64(handle: cublasHandle_t, n: int64, alpha: *float32, x: *float32, incx: int64, y: *float32, incy: int64): cublasStatus_t <cimport,nodecl> end
global function cublasDaxpy_64(handle: cublasHandle_t, n: int64, alpha: *float64, x: *float64, incx: int64, y: *float64, incy: int64): cublasStatus_t <cimport,nodecl> end
global function cublasCaxpy_64(handle: cublasHandle_t, n: int64, alpha: *cuComplex, x: *cuComplex, incx: int64, y: *cuComplex, incy: int64): cublasStatus_t <cimport,nodecl> end
global function cublasZaxpy_64(handle: cublasHandle_t, n: int64, alpha: *cuDoubleComplex, x: *cuDoubleComplex, incx: int64, y: *cuDoubleComplex, incy: int64): cublasStatus_t <cimport,nodecl> end
global function cublasScopy_64(handle: cublasHandle_t, n: int64, x: *float32, incx: int64, y: *float32, incy: int64): cublasStatus_t <cimport,nodecl> end
global function cublasDcopy_64(handle: cublasHandle_t, n: int64, x: *float64, incx: int64, y: *float64, incy: int64): cublasStatus_t <cimport,nodecl> end
global function cublasCcopy_64(handle: cublasHandle_t, n: int64, x: *cuComplex, incx: int64, y: *cuComplex, incy: int64): cublasStatus_t <cimport,nodecl> end
global function cublasZcopy_64(handle: cublasHandle_t, n: int64, x: *cuDoubleComplex, incx: int64, y: *cuDoubleComplex, incy: int64): cublasStatus_t <cimport,nodecl> end
global function cublasSswap_64(handle: cublasHandle_t, n: int64, x: *float32, incx: int64, y: *float32, incy: int64): cublasStatus_t <cimport,nodecl> end
global function cublasDswap_64(handle: cublasHandle_t, n: int64, x: *float64, incx: int64, y: *float64, incy: int64): cublasStatus_t <cimport,nodecl> end
global function cublasCswap_64(handle: cublasHandle_t, n: int64, x: *cuComplex, incx: int64, y: *cuComplex, incy: int64): cublasStatus_t <cimport,nodecl> end
global function cublasZswap_64(handle: cublasHandle_t, n: int64, x: *cuDoubleComplex, incx: int64, y: *cuDoubleComplex, incy: int64): cublasStatus_t <cimport,nodecl> end
global function cublasIsamax_64(handle: cublasHandle_t, n: int64, x: *float32, incx: int64, result: *int64): cublasStatus_t <cimport,nodecl> end
global function cublasIdamax_64(handle: cublasHandle_t, n: int64, x: *float64, incx: int64, result: *int64): cublasStatus_t <cimport,nodecl> end
global function cublasIcamax_64(handle: cublasHandle_t, n: int64, x: *cuComplex, incx: int64, result: *int64): cublasStatus_t <cimport,nodecl> end
global function cublasIzamax_64(handle: cublasHandle_t, n: int64, x: *cuDoubleComplex, incx: int64, result: *int64): cublasStatus_t <cimport,nodecl> end
global function cublasIsamin_64(handle: cublasHandle_t, n: int64, x: *float32, incx: int64, result: *int64): cublasStatus_t <cimport,nodecl> end
global function cublasIdamin_64(handle: cublasHandle_t, n: int64, x: *float64, incx: int64, result: *int64): cublasStatus_t <cimport,nodecl> end
global function cublasIcamin_64(handle: cublasHandle_t, n: int64, x: *cuComplex, incx: int64, result: *int64): cublasStatus_t <cimport,nodecl> end
global function cublasIzamin_64(handle: cublasHandle_t, n: int64, x: *cuDoubleComplex, incx: int64, result: *int64): cublasStatus_t <cimport,nodecl> end
global function cublasSasum_64(handle: cublasHandle_t, n: int64, x: *float32, incx: int64, result: *float32): cublasStatus_t <cimport,nodecl> end
global function cublasDasum_64(handle: cublasHandle_t, n: int64, x: *float64, incx: int64, result: *float64): cublasStatus_t <cimport,nodecl> end
global function cublasScasum_64(handle: cublasHandle_t, n: int64, x: *cuComplex, incx: int64, result: *float32): cublasStatus_t <cimport,nodecl> end
global function cublasDzasum_64(handle: cublasHandle_t, n: int64, x: *cuDoubleComplex, incx: int64, result: *float64): cublasStatus_t <cimport,nodecl> end
global function cublasSrot_64(handle: cublasHandle_t, n: int64, x: *float32, incx: int64, y: *float32, incy: int64, c: *float32, s: *float32): cublasStatus_t <cimport,nodecl> end
global function cublasDrot_64(handle: cublasHandle_t, n: int64, x: *float64, incx: int64, y: *float64, incy: int64, c: *float64, s: *float64): cublasStatus_t <cimport,nodecl> end
global function cublasCrot_64(handle: cublasHandle_t, n: int64, x: *cuComplex, incx: int64, y: *cuComplex, incy: int64, c: *float32, s: *cuComplex): cublasStatus_t <cimport,nodecl> end
global function cublasCsrot_64(handle: cublasHandle_t, n: int64, x: *cuComplex, incx: int64, y: *cuComplex, incy: int64, c: *float32, s: *float32): cublasStatus_t <cimport,nodecl> end
global function cublasZrot_64(handle: cublasHandle_t, n: int64, x: *cuDoubleComplex, incx: int64, y: *cuDoubleComplex, incy: int64, c: *float64, s: *cuDoubleComplex): cublasStatus_t <cimport,nodecl> end
global function cublasZdrot_64(handle: cublasHandle_t, n: int64, x: *cuDoubleComplex, incx: int64, y: *cuDoubleComplex, incy: int64, c: *float64, s: *float64): cublasStatus_t <cimport,nodecl> end
global function cublasSrotm_64(handle: cublasHandle_t, n: int64, x: *float32, incx: int64, y: *float32, incy: int64, param: *float32): cublasStatus_t <cimport,nodecl> end
global function cublasDrotm_64(handle: cublasHandle_t, n: int64, x: *float64, incx: int64, y: *float64, incy: int64, param: *float64): cublasStatus_t <cimport,nodecl> end
global function cublasSgemv_64(handle: cublasHandle_t, trans: cublasOperation_t, m: int64, n: int64, alpha: *float32, A: *float32, lda: int64, x: *float32, incx: int64, beta: *float32, y: *float32, incy: int64): cublasStatus_t <cimport,nodecl> end
global function cublasDgemv_64(handle: cublasHandle_t, trans: cublasOperation_t, m: int64, n: int64, alpha: *float64, A: *float64, lda: int64, x: *float64, incx: int64, beta: *float64, y: *float64, incy: int64): cublasStatus_t <cimport,nodecl> end
global function cublasCgemv_64(handle: cublasHandle_t, trans: cublasOperation_t, m: int64, n: int64, alpha: *cuComplex, A: *cuComplex, lda: int64, x: *cuComplex, incx: int64, beta: *cuComplex, y: *cuComplex, incy: int64): cublasStatus_t <cimport,nodecl> end
global function cublasZgemv_64(handle: cublasHandle_t, trans: cublasOperation_t, m: int64, n: int64, alpha: *cuDoubleComplex, A: *cuDoubleComplex, lda: int64, x: *cuDoubleComplex, incx: int64, beta: *cuDoubleComplex, y: *cuDoubleComplex, incy: int64): cublasStatus_t <cimport,nodecl> end
global function cublasSgbmv_64(handle: cublasHandle_t, trans: cublasOperation_t, m: int64, n: int64, kl: int64, ku: int64, alpha: *float32, A: *float32, lda: int64, x: *float32, incx: int64, beta: *float32, y: *float32, incy: int64): cublasStatus_t <cimport,nodecl> end
global function cublasDgbmv_64(handle: cublasHandle_t, trans: cublasOperation_t, m: int64, n: int64, kl: int64, ku: int64, alpha: *float64, A: *float64, lda: int64, x: *float64, incx: int64, beta: *float64, y: *float64, incy: int64): cublasStatus_t <cimport,nodecl> end
global function cublasCgbmv_64(handle: cublasHandle_t, trans: cublasOperation_t, m: int64, n: int64, kl: int64, ku: int64, alpha: *cuComplex, A: *cuComplex, lda: int64, x: *cuComplex, incx: int64, beta: *cuComplex, y: *cuComplex, incy: int64): cublasStatus_t <cimport,nodecl> end
global function cublasZgbmv_64(handle: cublasHandle_t, trans: cublasOperation_t, m: int64, n: int64, kl: int64, ku: int64, alpha: *cuDoubleComplex, A: *cuDoubleComplex, lda: int64, x: *cuDoubleComplex, incx: int64, beta: *cuDoubleComplex, y: *cuDoubleComplex, incy: int64): cublasStatus_t <cimport,nodecl> end
global function cublasStrmv_64(handle: cublasHandle_t, uplo: cublasFillMode_t, trans: cublasOperation_t, diag: cublasDiagType_t, n: int64, A: *float32, lda: int64, x: *float32, incx: int64): cublasStatus_t <cimport,nodecl> end
global function cublasDtrmv_64(handle: cublasHandle_t, uplo: cublasFillMode_t, trans: cublasOperation_t, diag: cublasDiagType_t, n: int64, A: *float64, lda: int64, x: *float64, incx: int64): cublasStatus_t <cimport,nodecl> end
global function cublasCtrmv_64(handle: cublasHandle_t, uplo: cublasFillMode_t, trans: cublasOperation_t, diag: cublasDiagType_t, n: int64, A: *cuComplex, lda: int64, x: *cuComplex, incx: int64): cublasStatus_t <cimport,nodecl> end
global function cublasZtrmv_64(handle: cublasHandle_t, uplo: cublasFillMode_t, trans: cublasOperation_t, diag: cublasDiagType_t, n: int64, A: *cuDoubleComplex, lda: int64, x: *cuDoubleComplex, incx: int64): cublasStatus_t <cimport,nodecl> end
global function cublasStbmv_64(handle: cublasHandle_t, uplo: cublasFillMode_t, trans: cublasOperation_t, diag: cublasDiagType_t, n: int64, k: int64, A: *float32, lda: int64, x: *float32, incx: int64): cublasStatus_t <cimport,nodecl> end
global function cublasDtbmv_64(handle: cublasHandle_t, uplo: cublasFillMode_t, trans: cublasOperation_t, diag: cublasDiagType_t, n: int64, k: int64, A: *float64, lda: int64, x: *float64, incx: int64): cublasStatus_t <cimport,nodecl> end
global function cublasCtbmv_64(handle: cublasHandle_t, uplo: cublasFillMode_t, trans: cublasOperation_t, diag: cublasDiagType_t, n: int64, k: int64, A: *cuComplex, lda: int64, x: *cuComplex, incx: int64): cublasStatus_t <cimport,nodecl> end
global function cublasZtbmv_64(handle: cublasHandle_t, uplo: cublasFillMode_t, trans: cublasOperation_t, diag: cublasDiagType_t, n: int64, k: int64, A: *cuDoubleComplex, lda: int64, x: *cuDoubleComplex, incx: int64): cublasStatus_t <cimport,nodecl> end
global function cublasStpmv_64(handle: cublasHandle_t, uplo: cublasFillMode_t, trans: cublasOperation_t, diag: cublasDiagType_t, n: int64, AP: *float32, x: *float32, incx: int64): cublasStatus_t <cimport,nodecl> end
global function cublasDtpmv_64(handle: cublasHandle_t, uplo: cublasFillMode_t, trans: cublasOperation_t, diag: cublasDiagType_t, n: int64, AP: *float64, x: *float64, incx: int64): cublasStatus_t <cimport,nodecl> end
global function cublasCtpmv_64(handle: cublasHandle_t, uplo: cublasFillMode_t, trans: cublasOperation_t, diag: cublasDiagType_t, n: int64, AP: *cuComplex, x: *cuComplex, incx: int64): cublasStatus_t <cimport,nodecl> end
global function cublasZtpmv_64(handle: cublasHandle_t, uplo: cublasFillMode_t, trans: cublasOperation_t, diag: cublasDiagType_t, n: int64, AP: *cuDoubleComplex, x: *cuDoubleComplex, incx: int64): cublasStatus_t <cimport,nodecl> end
global function cublasStrsv_64(handle: cublasHandle_t, uplo: cublasFillMode_t, trans: cublasOperation_t, diag: cublasDiagType_t, n: int64, A: *float32, lda: int64, x: *float32, incx: int64): cublasStatus_t <cimport,nodecl> end
global function cublasDtrsv_64(handle: cublasHandle_t, uplo: cublasFillMode_t, trans: cublasOperation_t, diag: cublasDiagType_t, n: int64, A: *float64, lda: int64, x: *float64, incx: int64): cublasStatus_t <cimport,nodecl> end
global function cublasCtrsv_64(handle: cublasHandle_t, uplo: cublasFillMode_t, trans: cublasOperation_t, diag: cublasDiagType_t, n: int64, A: *cuComplex, lda: int64, x: *cuComplex, incx: int64): cublasStatus_t <cimport,nodecl> end
global function cublasZtrsv_64(handle: cublasHandle_t, uplo: cublasFillMode_t, trans: cublasOperation_t, diag: cublasDiagType_t, n: int64, A: *cuDoubleComplex, lda: int64, x: *cuDoubleComplex, incx: int64): cublasStatus_t <cimport,nodecl> end
global function cublasStpsv_64(handle: cublasHandle_t, uplo: cublasFillMode_t, trans: cublasOperation_t, diag: cublasDiagType_t, n: int64, AP: *float32, x: *float32, incx: int64): cublasStatus_t <cimport,nodecl> end
global function cublasDtpsv_64(handle: cublasHandle_t, uplo: cublasFillMode_t, trans: cublasOperation_t, diag: cublasDiagType_t, n: int64, AP: *float64, x: *float64, incx: int64): cublasStatus_t <cimport,nodecl> end
global function cublasCtpsv_64(handle: cublasHandle_t, uplo: cublasFillMode_t, trans: cublasOperation_t, diag: cublasDiagType_t, n: int64, AP: *cuComplex, x: *cuComplex, incx: int64): cublasStatus_t <cimport,nodecl> end
global function cublasZtpsv_64(handle: cublasHandle_t, uplo: cublasFillMode_t, trans: cublasOperation_t, diag: cublasDiagType_t, n: int64, AP: *cuDoubleComplex, x: *cuDoubleComplex, incx: int64): cublasStatus_t <cimport,nodecl> end
global function cublasStbsv_64(handle: cublasHandle_t, uplo: cublasFillMode_t, trans: cublasOperation_t, diag: cublasDiagType_t, n: int64, k: int64, A: *float32, lda: int64, x: *float32, incx: int64): cublasStatus_t <cimport,nodecl> end
global function cublasDtbsv_64(handle: cublasHandle_t, uplo: cublasFillMode_t, trans: cublasOperation_t, diag: cublasDiagType_t, n: int64, k: int64, A: *float64, lda: int64, x: *float64, incx: int64): cublasStatus_t <cimport,nodecl> end
global function cublasCtbsv_64(handle: cublasHandle_t, uplo: cublasFillMode_t, trans: cublasOperation_t, diag: cublasDiagType_t, n: int64, k: int64, A: *cuComplex, lda: int64, x: *cuComplex, incx: int64): cublasStatus_t <cimport,nodecl> end
global function cublasZtbsv_64(handle: cublasHandle_t, uplo: cublasFillMode_t, trans: cublasOperation_t, diag: cublasDiagType_t, n: int64, k: int64, A: *cuDoubleComplex, lda: int64, x: *cuDoubleComplex, incx: int64): cublasStatus_t <cimport,nodecl> end
global function cublasSsymv_64(handle: cublasHandle_t, uplo: cublasFillMode_t, n: int64, alpha: *float32, A: *float32, lda: int64, x: *float32, incx: int64, beta: *float32, y: *float32, incy: int64): cublasStatus_t <cimport,nodecl> end
global function cublasDsymv_64(handle: cublasHandle_t, uplo: cublasFillMode_t, n: int64, alpha: *float64, A: *float64, lda: int64, x: *float64, incx: int64, beta: *float64, y: *float64, incy: int64): cublasStatus_t <cimport,nodecl> end
global function cublasCsymv_64(handle: cublasHandle_t, uplo: cublasFillMode_t, n: int64, alpha: *cuComplex, A: *cuComplex, lda: int64, x: *cuComplex, incx: int64, beta: *cuComplex, y: *cuComplex, incy: int64): cublasStatus_t <cimport,nodecl> end
global function cublasZsymv_64(handle: cublasHandle_t, uplo: cublasFillMode_t, n: int64, alpha: *cuDoubleComplex, A: *cuDoubleComplex, lda: int64, x: *cuDoubleComplex, incx: int64, beta: *cuDoubleComplex, y: *cuDoubleComplex, incy: int64): cublasStatus_t <cimport,nodecl> end
global function cublasChemv_64(handle: cublasHandle_t, uplo: cublasFillMode_t, n: int64, alpha: *cuComplex, A: *cuComplex, lda: int64, x: *cuComplex, incx: int64, beta: *cuComplex, y: *cuComplex, incy: int64): cublasStatus_t <cimport,nodecl> end
global function cublasZhemv_64(handle: cublasHandle_t, uplo: cublasFillMode_t, n: int64, alpha: *cuDoubleComplex, A: *cuDoubleComplex, lda: int64, x: *cuDoubleComplex, incx: int64, beta: *cuDoubleComplex, y: *cuDoubleComplex, incy: int64): cublasStatus_t <cimport,nodecl> end
global function cublasSsbmv_64(handle: cublasHandle_t, uplo: cublasFillMode_t, n: int64, k: int64, alpha: *float32, A: *float32, lda: int64, x: *float32, incx: int64, beta: *float32, y: *float32, incy: int64): cublasStatus_t <cimport,nodecl> end
global function cublasDsbmv_64(handle: cublasHandle_t, uplo: cublasFillMode_t, n: int64, k: int64, alpha: *float64, A: *float64, lda: int64, x: *float64, incx: int64, beta: *float64, y: *float64, incy: int64): cublasStatus_t <cimport,nodecl> end
global function cublasChbmv_64(handle: cublasHandle_t, uplo: cublasFillMode_t, n: int64, k: int64, alpha: *cuComplex, A: *cuComplex, lda: int64, x: *cuComplex, incx: int64, beta: *cuComplex, y: *cuComplex, incy: int64): cublasStatus_t <cimport,nodecl> end
global function cublasZhbmv_64(handle: cublasHandle_t, uplo: cublasFillMode_t, n: int64, k: int64, alpha: *cuDoubleComplex, A: *cuDoubleComplex, lda: int64, x: *cuDoubleComplex, incx: int64, beta: *cuDoubleComplex, y: *cuDoubleComplex, incy: int64): cublasStatus_t <cimport,nodecl> end
global function cublasSspmv_64(handle: cublasHandle_t, uplo: cublasFillMode_t, n: int64, alpha: *float32, AP: *float32, x: *float32, incx: int64, beta: *float32, y: *float32, incy: int64): cublasStatus_t <cimport,nodecl> end
global function cublasDspmv_64(handle: cublasHandle_t, uplo: cublasFillMode_t, n: int64, alpha: *float64, AP: *float64, x: *float64, incx: int64, beta: *float64, y: *float64, incy: int64): cublasStatus_t <cimport,nodecl> end
global function cublasChpmv_64(handle: cublasHandle_t, uplo: cublasFillMode_t, n: int64, alpha: *cuComplex, AP: *cuComplex, x: *cuComplex, incx: int64, beta: *cuComplex, y: *cuComplex, incy: int64): cublasStatus_t <cimport,nodecl> end
global function cublasZhpmv_64(handle: cublasHandle_t, uplo: cublasFillMode_t, n: int64, alpha: *cuDoubleComplex, AP: *cuDoubleComplex, x: *cuDoubleComplex, incx: int64, beta: *cuDoubleComplex, y: *cuDoubleComplex, incy: int64): cublasStatus_t <cimport,nodecl> end
global function cublasSger_64(handle: cublasHandle_t, m: int64, n: int64, alpha: *float32, x: *float32, incx: int64, y: *float32, incy: int64, A: *float32, lda: int64): cublasStatus_t <cimport,nodecl> end
global function cublasDger_64(handle: cublasHandle_t, m: int64, n: int64, alpha: *float64, x: *float64, incx: int64, y: *float64, incy: int64, A: *float64, lda: int64): cublasStatus_t <cimport,nodecl> end
global function cublasCgeru_64(handle: cublasHandle_t, m: int64, n: int64, alpha: *cuComplex, x: *cuComplex, incx: int64, y: *cuComplex, incy: int64, A: *cuComplex, lda: int64): cublasStatus_t <cimport,nodecl> end
global function cublasCgerc_64(handle: cublasHandle_t, m: int64, n: int64, alpha: *cuComplex, x: *cuComplex, incx: int64, y: *cuComplex, incy: int64, A: *cuComplex, lda: int64): cublasStatus_t <cimport,nodecl> end
global function cublasZgeru_64(handle: cublasHandle_t, m: int64, n: int64, alpha: *cuDoubleComplex, x: *cuDoubleComplex, incx: int64, y: *cuDoubleComplex, incy: int64, A: *cuDoubleComplex, lda: int64): cublasStatus_t <cimport,nodecl> end
global function cublasZgerc_64(handle: cublasHandle_t, m: int64, n: int64, alpha: *cuDoubleComplex, x: *cuDoubleComplex, incx: int64, y: *cuDoubleComplex, incy: int64, A: *cuDoubleComplex, lda: int64): cublasStatus_t <cimport,nodecl> end
global function cublasSsyr_64(handle: cublasHandle_t, uplo: cublasFillMode_t, n: int64, alpha: *float32, x: *float32, incx: int64, A: *float32, lda: int64): cublasStatus_t <cimport,nodecl> end
global function cublasDsyr_64(handle: cublasHandle_t, uplo: cublasFillMode_t, n: int64, alpha: *float64, x: *float64, incx: int64, A: *float64, lda: int64): cublasStatus_t <cimport,nodecl> end
global function cublasCsyr_64(handle: cublasHandle_t, uplo: cublasFillMode_t, n: int64, alpha: *cuComplex, x: *cuComplex, incx: int64, A: *cuComplex, lda: int64): cublasStatus_t <cimport,nodecl> end
global function cublasZsyr_64(handle: cublasHandle_t, uplo: cublasFillMode_t, n: int64, alpha: *cuDoubleComplex, x: *cuDoubleComplex, incx: int64, A: *cuDoubleComplex, lda: int64): cublasStatus_t <cimport,nodecl> end
global function cublasCher_64(handle: cublasHandle_t, uplo: cublasFillMode_t, n: int64, alpha: *float32, x: *cuComplex, incx: int64, A: *cuComplex, lda: int64): cublasStatus_t <cimport,nodecl> end
global function cublasZher_64(handle: cublasHandle_t, uplo: cublasFillMode_t, n: int64, alpha: *float64, x: *cuDoubleComplex, incx: int64, A: *cuDoubleComplex, lda: int64): cublasStatus_t <cimport,nodecl> end
global function cublasSspr_64(handle: cublasHandle_t, uplo: cublasFillMode_t, n: int64, alpha: *float32, x: *float32, incx: int64, AP: *float32): cublasStatus_t <cimport,nodecl> end
global function cublasDspr_64(handle: cublasHandle_t, uplo: cublasFillMode_t, n: int64, alpha: *float64, x: *float64, incx: int64, AP: *float64): cublasStatus_t <cimport,nodecl> end
global function cublasChpr_64(handle: cublasHandle_t, uplo: cublasFillMode_t, n: int64, alpha: *float32, x: *cuComplex, incx: int64, AP: *cuComplex): cublasStatus_t <cimport,nodecl> end
global function cublasZhpr_64(handle: cublasHandle_t, uplo: cublasFillMode_t, n: int64, alpha: *float64, x: *cuDoubleComplex, incx: int64, AP: *cuDoubleComplex): cublasStatus_t <cimport,nodecl> end
global function cublasSsyr2_64(handle: cublasHandle_t, uplo: cublasFillMode_t, n: int64, alpha: *float32, x: *float32, incx: int64, y: *float32, incy: int64, A: *float32, lda: int64): cublasStatus_t <cimport,nodecl> end
global function cublasDsyr2_64(handle: cublasHandle_t, uplo: cublasFillMode_t, n: int64, alpha: *float64, x: *float64, incx: int64, y: *float64, incy: int64, A: *float64, lda: int64): cublasStatus_t <cimport,nodecl> end
global function cublasCsyr2_64(handle: cublasHandle_t, uplo: cublasFillMode_t, n: int64, alpha: *cuComplex, x: *cuComplex, incx: int64, y: *cuComplex, incy: int64, A: *cuComplex, lda: int64): cublasStatus_t <cimport,nodecl> end
global function cublasZsyr2_64(handle: cublasHandle_t, uplo: cublasFillMode_t, n: int64, alpha: *cuDoubleComplex, x: *cuDoubleComplex, incx: int64, y: *cuDoubleComplex, incy: int64, A: *cuDoubleComplex, lda: int64): cublasStatus_t <cimport,nodecl> end
global function cublasCher2_64(handle: cublasHandle_t, uplo: cublasFillMode_t, n: int64, alpha: *cuComplex, x: *cuComplex, incx: int64, y: *cuComplex, incy: int64, A: *cuComplex, lda: int64): cublasStatus_t <cimport,nodecl> end
global function cublasZher2_64(handle: cublasHandle_t, uplo: cublasFillMode_t, n: int64, alpha: *cuDoubleComplex, x: *cuDoubleComplex, incx: int64, y: *cuDoubleComplex, incy: int64, A: *cuDoubleComplex, lda: int64): cublasStatus_t <cimport,nodecl> end
global function cublasSspr2_64(handle: cublasHandle_t, uplo: cublasFillMode_t, n: int64, alpha: *float32, x: *float32, incx: int64, y: *float32, incy: int64, AP: *float32): cublasStatus_t <cimport,nodecl> end
global function cublasDspr2_64(handle: cublasHandle_t, uplo: cublasFillMode_t, n: int64, alpha: *float64, x: *float64, incx: int64, y: *float64, incy: int64, AP: *float64): cublasStatus_t <cimport,nodecl> end
global function cublasChpr2_64(handle: cublasHandle_t, uplo: cublasFillMode_t, n: int64, alpha: *cuComplex, x: *cuComplex, incx: int64, y: *cuComplex, incy: int64, AP: *cuComplex): cublasStatus_t <cimport,nodecl> end
global function cublasZhpr2_64(handle: cublasHandle_t, uplo: cublasFillMode_t, n: int64, alpha: *cuDoubleComplex, x: *cuDoubleComplex, incx: int64, y: *cuDoubleComplex, incy: int64, AP: *cuDoubleComplex): cublasStatus_t <cimport,nodecl> end
global function cublasSgemm_64(handle: cublasHandle_t, transa: cublasOperation_t, transb: cublasOperation_t, m: int64, n: int64, k: int64, alpha: *float32, A: *float32, lda: int64, B: *float32, ldb: int64, beta: *float32, C: *float32, ldc: int64): cublasStatus_t <cimport,nodecl> end
global function cublasDgemm_64(handle: cublasHandle_t, transa: cublasOperation_t, transb: cublasOperation_t, m: int64, n: int64, k: int64, alpha: *float64, A: *float64, lda: int64, B: *float64, ldb: int64, beta: *float64, C: *float64, ldc: int64): cublasStatus_t <cimport,nodecl> end
global function cublasCgemm_64(handle: cublasHandle_t, transa: cublasOperation_t, transb: cublasOperation_t, m: int64, n: int64, k: int64, alpha: *cuComplex, A: *cuComplex, lda: int64, B: *cuComplex, ldb: int64, beta: *cuComplex, C: *cuComplex, ldc: int64): cublasStatus_t <cimport,nodecl> end
global function cublasZgemm_64(handle: cublasHandle_t, transa: cublasOperation_t, transb: cublasOperation_t, m: int64, n: int64, k: int64, alpha: *cuDoubleComplex, A: *cuDoubleComplex, lda: int64, B: *cuDoubleComplex, ldb: int64, beta: *cuDoubleComplex, C: *cuDoubleComplex, ldc: int64): cublasStatus_t <cimport,nodecl> end
global function cublasSsyrk_64(handle: cublasHandle_t, uplo: cublasFillMode_t, trans: cublasOperation_t, n: int64, k: int64, alpha: *float32, A: *float32, lda: int64, beta: *float32, C: *float32, ldc: int64): cublasStatus_t <cimport,nodecl> end
global function cublasDsyrk_64(handle: cublasHandle_t, uplo: cublasFillMode_t, trans: cublasOperation_t, n: int64, k: int64, alpha: *float64, A: *float64, lda: int64, beta: *float64, C: *float64, ldc: int64): cublasStatus_t <cimport,nodecl> end
global function cublasCsyrk_64(handle: cublasHandle_t, uplo: cublasFillMode_t, trans: cublasOperation_t, n: int64, k: int64, alpha: *cuComplex, A: *cuComplex, lda: int64, beta: *cuComplex, C: *cuComplex, ldc: int64): cublasStatus_t <cimport,nodecl> end
global function cublasZsyrk_64(handle: cublasHandle_t, uplo: cublasFillMode_t, trans: cublasOperation_t, n: int64, k: int64, alpha: *cuDoubleComplex, A: *cuDoubleComplex, lda: int64, beta: *cuDoubleComplex, C: *cuDoubleComplex, ldc: int64): cublasStatus_t <cimport,nodecl> end
global function cublasCherk_64(handle: cublasHandle_t, uplo: cublasFillMode_t, trans: cublasOperation_t, n: int64, k: int64, alpha: *float32, A: *cuComplex, lda: int64, beta: *float32, C: *cuComplex, ldc: int64): cublasStatus_t <cimport,nodecl> end
global function cublasZherk_64(handle: cublasHandle_t, uplo: cublasFillMode_t, trans: cublasOperation_t, n: int64, k: int64, alpha: *float64, A: *cuDoubleComplex, lda: int64, beta: *float64, C: *cuDoubleComplex, ldc: int64): cublasStatus_t <cimport,nodecl> end
global function cublasSsyr2k_64(handle: cublasHandle_t, uplo: cublasFillMode_t, trans: cublasOperation_t, n: int64, k: int64, alpha: *float32, A: *float32, lda: int64, B: *float32, ldb: int64, beta: *float32, C: *float32, ldc: int64): cublasStatus_t <cimport,nodecl> end
global function cublasDsyr2k_64(handle: cublasHandle_t, uplo: cublasFillMode_t, trans: cublasOperation_t, n: int64, k: int64, alpha: *float64, A: *float64, lda: int64, B: *float64, ldb: int64, beta: *float64, C: *float64, ldc: int64): cublasStatus_t <cimport,nodecl> end
global function cublasCsyr2k_64(handle: cublasHandle_t, uplo: cublasFillMode_t, trans: cublasOperation_t, n: int64, k: int64, alpha: *cuComplex, A: *cuComplex, lda: int64, B: *cuComplex, ldb: int64, beta: *cuComplex, C: *cuComplex, ldc: int64): cublasStatus_t <cimport,nodecl> end
global function cublasZsyr2k_64(handle: cublasHandle_t, uplo: cublasFillMode_t, trans: cublasOperation_t, n: int64, k: int64, alpha: *cuDoubleComplex, A: *cuDoubleComplex, lda: int64, B: *cuDoubleComplex, ldb: int64, beta: *cuDoubleComplex, C: *cuDoubleComplex, ldc: int64): cublasStatus_t <cimport,nodecl> end
global function cublasCher2k_64(handle: cublasHandle_t, uplo: cublasFillMode_t, trans: cublasOperation_t, n: int64, k: int64, alpha: *cuComplex, A: *cuComplex, lda: int64, B: *cuComplex, ldb: int64, beta: *float32, C: *cuComplex, ldc: int64): cublasStatus_t <cimport,nodecl> end
global function cublasZher2k_64(handle: cublasHandle_t, uplo: cublasFillMode_t, trans: cublasOperation_t, n: int64, k: int64, alpha: *cuDoubleComplex, A: *cuDoubleComplex, lda: int64, B: *cuDoubleComplex, ldb: int64, beta: *float64, C: *cuDoubleComplex, ldc: int64): cublasStatus_t <cimport,nodecl> end
global function cublasSsymm_64(handle: cublasHandle_t, side: cublasSideMode_t, uplo: cublasFillMode_t, m: int64, n: int64, alpha: *float32, A: *float32, lda: int64, B: *float32, ldb: int64, beta: *float32, C: *float32, ldc: int64): cublasStatus_t <cimport,nodecl> end
global function cublasDsymm_64(handle: cublasHandle_t, side: cublasSideMode_t, uplo: cublasFillMode_t, m: int64, n: int64, alpha: *float64, A: *float64, lda: int64, B: *float64, ldb: int64, beta: *float64, C: *float64, ldc: int64): cublasStatus_t <cimport,nodecl> end
global function cublasCsymm_64(handle: cublasHandle_t, side: cublasSideMode_t, uplo: cublasFillMode_t, m: int64, n: int64, alpha: *cuComplex, A: *cuComplex, lda: int64, B: *cuComplex, ldb: int64, beta: *cuComplex, C: *cuComplex, ldc: int64): cublasStatus_t <cimport,nodecl> end
global function cublasZsymm_64(handle: cublasHandle_t, side: cublasSideMode_t, uplo: cublasFillMode_t, m: int64, n: int64, alpha: *cuDoubleComplex, A: *cuDoubleComplex, lda: int64, B: *cuDoubleComplex, ldb: int64, beta: *cuDoubleComplex, C: *cuDoubleComplex, ldc: int64): cublasStatus_t <cimport,nodecl> end
global function cublasChemm_64(handle: cublasHandle_t, side: cublasSideMode_t, uplo: cublasFillMode_t, m: int64, n: int64, alpha: *cuComplex, A: *cuComplex, lda: int64, B: *cuComplex, ldb: int64, beta: *cuComplex, C: *cuComplex, ldc: int64): cublasStatus_t <cimport,nodecl> end
global function cublasZhemm_64(handle: cublasHandle_t, side: cublasSideMode_t, uplo: cublasFillMode_t, m: int64, n: int64, alpha: *cuDoubleComplex, A: *cuDoubleComplex, lda: int64, B: *cuDoubleComplex, ldb: int64, beta: *cuDoubleComplex, C: *cuDoubleComplex, ldc: int64): cublasStatus_t <cimport,nodecl> end
global function cublasStrsm_64(handle: cublasHandle_t, side: cublasSideMode_t, uplo: cublasFillMode_t, trans: cublasOperation_t, diag: cublasDiagType_t, m: int64, n: int64, alpha: *float32, A: *float32, lda: int64, B: *float32, ldb: int64): cublasStatus_t <cimport,nodecl> end
global function cublasDtrsm_64(handle: cublasHandle_t, side: cublasSideMode_t, uplo: cublasFillMode_t, trans: cublasOperation_t, diag: cublasDiagType_t, m: int64, n: int64, alpha: *float64, A: *float64, lda: int64, B: *float64, ldb: int64): cublasStatus_t <cimport,nodecl> end
global function cublasCtrsm_64(handle: cublasHandle_t, side: cublasSideMode_t, uplo: cublasFillMode_t, trans: cublasOperation_t, diag: cublasDiagType_t, m: int64, n: int64, alpha: *cuComplex, A: *cuComplex, lda: int64, B: *cuComplex, ldb: int64): cublasStatus_t <cimport,nodecl> end
global function cublasZtrsm_64(handle: cublasHandle_t, side: cublasSideMode_t, uplo: cublasFillMode_t, trans: cublasOperation_t, diag: cublasDiagType_t, m: int64, n: int64, alpha: *cuDoubleComplex, A: *cuDoubleComplex, lda: int64, B: *cuDoubleComplex, ldb: int64): cublasStatus_t <cimport,nodecl> end
global function cublasStrmm_64(handle: cublasHandle_t, side: cublasSideMode_t, uplo: cublasFillMode_t, trans: cublasOperation_t, diag: cublasDiagType_t, m: int64, n: int64, alpha: *float32, A: *float32, lda: int64, B: *float32, ldb: int64, C: *float32, ldc: int64): cublasStatus_t <cimport,nodecl> end
global function cublasDtrmm_64(handle: cublasHandle_t, side: cublasSideMode_t, uplo: cublasFillMode_t, trans: cublasOperation_t, diag: cublasDiagType_t, m: int64, n: int64, alpha: *float64, A: *float64, lda: int64, B: *float64, ldb: int64, C: *float64, ldc: int64): cublasStatus_t <cimport,nodecl> end
global function cublasCtrmm_64(handle: cublasHandle_t, side: cublasSideMode_t, uplo: cublasFillMode_t, trans: cublasOperation_t, diag: cublasDiagType_t, m: int64, n: int64, alpha: *cuComplex, A: *cuComplex, lda: int64, B: *cuComplex, ldb: int64, C: *cuComplex, ldc: int64): cublasStatus_t <cimport,nodecl> end
global function cublasZtrmm_64(handle: cublasHandle_t, side: cublasSideMode_t, uplo: cublasFillMode_t, trans: cublasOperation_t, diag: cublasDiagType_t, m: int64, n: int64, alpha: *cuDoubleComplex, A: *cuDoubleComplex, lda: int64, B: *cuDoubleComplex, ldb: int64, C: *cuDoubleComplex, ldc: int64): cublasStatus_t <cimport,nodecl> end
global CUDNN_MAJOR: cint <comptime> = 8
global CUDNN_MINOR: cint <comptime> = 8
global CUDNN_PATCHLEVEL: cint <comptime> = 0
global CUDNN_VERSION: cint <comptime> = 8800
global CUDNN_MAX_SM_MAJOR_NUMBER: cint <comptime> = 9
global CUDNN_MAX_SM_MINOR_NUMBER: cint <comptime> = 0
global CUDNN_MAX_DEVICE_VERSION: cint <comptime> = 900
global CUDNN_SM_50: cint <comptime> = 500
global CUDNN_SM_52: cint <comptime> = 520
global CUDNN_SM_53: cint <comptime> = 530
global CUDNN_SM_60: cint <comptime> = 600
global CUDNN_SM_61: cint <comptime> = 610
global CUDNN_SM_62: cint <comptime> = 620
global CUDNN_SM_70: cint <comptime> = 700
global CUDNN_SM_72: cint <comptime> = 720
global CUDNN_SM_75: cint <comptime> = 750
global CUDNN_SM_80: cint <comptime> = 800
global CUDNN_SM_86: cint <comptime> = 860
global CUDNN_SM_87: cint <comptime> = 870
global CUDNN_SM_89: cint <comptime> = 890
global CUDNN_SM_90: cint <comptime> = 900
global CUDNN_MIN_DEVICE_VERSION: cint <comptime> = 500
global CUDNN_OPS_INFER_MAJOR: cint <comptime> = 8
global CUDNN_OPS_INFER_MINOR: cint <comptime> = 8
global CUDNN_OPS_INFER_PATCH: cint <comptime> = 0
global CUDNN_DIM_MAX: cint <comptime> = 8
global CUDNN_LRN_MIN_N: cint <comptime> = 1
global CUDNN_LRN_MAX_N: cint <comptime> = 16
global CUDNN_LRN_MIN_K: float64 <comptime> = 1e-5
global CUDNN_LRN_MIN_BETA: float64 <comptime> = 0.01
global CUDNN_BN_MIN_EPSILON: float64 <comptime> = 0.0
global CUDNN_SEV_ERROR_EN: cint <comptime> = 2
global CUDNN_SEV_WARNING_EN: cint <comptime> = 4
global CUDNN_SEV_INFO_EN: cint <comptime> = 8
global CUDNN_CNN_INFER_MAJOR: cint <comptime> = 8
global CUDNN_CNN_INFER_MINOR: cint <comptime> = 8
global CUDNN_CNN_INFER_PATCH: cint <comptime> = 0
