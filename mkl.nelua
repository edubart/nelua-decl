global MKL_Complex8: type <cimport,nodecl> = @record{
  real: float32,
  imag: float32
}
global MKL_Complex16: type <cimport,nodecl> = @record{
  real: float64,
  imag: float64
}
global MKLVersion: type <cimport,nodecl> = @record{
  MajorVersion: cint,
  MinorVersion: cint,
  UpdateVersion: cint,
  ProductStatus: cstring,
  Build: cstring,
  Processor: cstring,
  Platform: cstring
}
global MKL_LAYOUT: type <cimport,nodecl,using> = @enum(cint){
  MKL_ROW_MAJOR = 101,
  MKL_COL_MAJOR = 102
}
global MKL_TRANSPOSE: type <cimport,nodecl,using> = @enum(cint){
  MKL_NOTRANS = 111,
  MKL_TRANS = 112,
  MKL_CONJTRANS = 113
}
global MKL_UPLO: type <cimport,nodecl,using> = @enum(cint){
  MKL_UPPER = 121,
  MKL_LOWER = 122
}
global MKL_DIAG: type <cimport,nodecl,using> = @enum(cint){
  MKL_NONUNIT = 131,
  MKL_UNIT = 132
}
global MKL_SIDE: type <cimport,nodecl,using> = @enum(cint){
  MKL_LEFT = 141,
  MKL_RIGHT = 142
}
global MKL_COMPACT_PACK: type <cimport,nodecl,using> = @enum(cint){
  MKL_COMPACT_SSE = 181,
  MKL_COMPACT_AVX = 182,
  MKL_COMPACT_AVX512 = 183
}
global mkl_jit_status_t: type <cimport,nodecl,using> = @enum(cint){
  MKL_JIT_SUCCESS = 0,
  MKL_NO_JIT = 1,
  MKL_JIT_ERROR = 2
}
global CBLAS_LAYOUT: type <cimport,nodecl,using> = @enum(cint){
  CblasRowMajor = 101,
  CblasColMajor = 102
}
global CBLAS_TRANSPOSE: type <cimport,nodecl,using> = @enum(cint){
  CblasNoTrans = 111,
  CblasTrans = 112,
  CblasConjTrans = 113
}
global CBLAS_UPLO: type <cimport,nodecl,using> = @enum(cint){
  CblasUpper = 121,
  CblasLower = 122
}
global CBLAS_DIAG: type <cimport,nodecl,using> = @enum(cint){
  CblasNonUnit = 131,
  CblasUnit = 132
}
global CBLAS_SIDE: type <cimport,nodecl,using> = @enum(cint){
  CblasLeft = 141,
  CblasRight = 142
}
global CBLAS_STORAGE: type <cimport,nodecl,using> = @enum(cint){
  CblasPacked = 151
}
global CBLAS_IDENTIFIER: type <cimport,nodecl,using> = @enum(cint){
  CblasAMatrix = 161,
  CblasBMatrix = 162
}
global CBLAS_OFFSET: type <cimport,nodecl,using> = @enum(cint){
  CblasRowOffset = 171,
  CblasColOffset = 172,
  CblasFixOffset = 173
}
global CBLAS_ORDER: type <cimport,nodecl> = @CBLAS_LAYOUT
global sparse_status_t: type <cimport,nodecl,using> = @enum(cint){
  SPARSE_STATUS_SUCCESS = 0,
  SPARSE_STATUS_NOT_INITIALIZED = 1,
  SPARSE_STATUS_ALLOC_FAILED = 2,
  SPARSE_STATUS_INVALID_VALUE = 3,
  SPARSE_STATUS_EXECUTION_FAILED = 4,
  SPARSE_STATUS_INTERNAL_ERROR = 5,
  SPARSE_STATUS_NOT_SUPPORTED = 6
}
global sparse_operation_t: type <cimport,nodecl,using> = @enum(cint){
  SPARSE_OPERATION_NON_TRANSPOSE = 10,
  SPARSE_OPERATION_TRANSPOSE = 11,
  SPARSE_OPERATION_CONJUGATE_TRANSPOSE = 12
}
global sparse_matrix_type_t: type <cimport,nodecl,using> = @enum(cint){
  SPARSE_MATRIX_TYPE_GENERAL = 20,
  SPARSE_MATRIX_TYPE_SYMMETRIC = 21,
  SPARSE_MATRIX_TYPE_HERMITIAN = 22,
  SPARSE_MATRIX_TYPE_TRIANGULAR = 23,
  SPARSE_MATRIX_TYPE_DIAGONAL = 24,
  SPARSE_MATRIX_TYPE_BLOCK_TRIANGULAR = 25,
  SPARSE_MATRIX_TYPE_BLOCK_DIAGONAL = 26
}
global sparse_index_base_t: type <cimport,nodecl,using> = @enum(cint){
  SPARSE_INDEX_BASE_ZERO = 0,
  SPARSE_INDEX_BASE_ONE = 1
}
global sparse_fill_mode_t: type <cimport,nodecl,using> = @enum(cint){
  SPARSE_FILL_MODE_LOWER = 40,
  SPARSE_FILL_MODE_UPPER = 41,
  SPARSE_FILL_MODE_FULL = 42
}
global sparse_diag_type_t: type <cimport,nodecl,using> = @enum(cint){
  SPARSE_DIAG_NON_UNIT = 50,
  SPARSE_DIAG_UNIT = 51
}
global sparse_layout_t: type <cimport,nodecl,using> = @enum(cint){
  SPARSE_LAYOUT_ROW_MAJOR = 101,
  SPARSE_LAYOUT_COLUMN_MAJOR = 102
}
global verbose_mode_t: type <cimport,nodecl,using> = @enum(cint){
  SPARSE_VERBOSE_OFF = 70,
  SPARSE_VERBOSE_BASIC = 71,
  SPARSE_VERBOSE_EXTENDED = 72
}
global sparse_memory_usage_t: type <cimport,nodecl,using> = @enum(cint){
  SPARSE_MEMORY_NONE = 80,
  SPARSE_MEMORY_AGGRESSIVE = 81
}
global sparse_request_t: type <cimport,nodecl,using> = @enum(cint){
  SPARSE_STAGE_FULL_MULT = 90,
  SPARSE_STAGE_NNZ_COUNT = 91,
  SPARSE_STAGE_FINALIZE_MULT = 92,
  SPARSE_STAGE_FULL_MULT_NO_VAL = 93,
  SPARSE_STAGE_FINALIZE_MULT_NO_VAL = 94
}
global sparse_matrix: type <cimport,nodecl,ctypedef'sparse_matrix',forwarddecl> = @record{}
global matrix_descr: type <cimport,nodecl,ctypedef'matrix_descr'> = @record{
  type: sparse_matrix_type_t,
  mode: sparse_fill_mode_t,
  diag: sparse_diag_type_t
}
global MKL_C_SELECT_FUNCTION_1: type <cimport,nodecl> = @function(a1: *MKL_Complex8): cint
global MKL_C_SELECT_FUNCTION_2: type <cimport,nodecl> = @function(a1: *MKL_Complex8, a2: *MKL_Complex8): cint
global MKL_D_SELECT_FUNCTION_2: type <cimport,nodecl> = @function(a1: *float64, a2: *float64): cint
global MKL_D_SELECT_FUNCTION_3: type <cimport,nodecl> = @function(a1: *float64, a2: *float64, a3: *float64): cint
global MKL_S_SELECT_FUNCTION_2: type <cimport,nodecl> = @function(a1: *float32, a2: *float32): cint
global MKL_S_SELECT_FUNCTION_3: type <cimport,nodecl> = @function(a1: *float32, a2: *float32, a3: *float32): cint
global MKL_Z_SELECT_FUNCTION_1: type <cimport,nodecl> = @function(a1: *MKL_Complex16): cint
global MKL_Z_SELECT_FUNCTION_2: type <cimport,nodecl> = @function(a1: *MKL_Complex16, a2: *MKL_Complex16): cint
global sparse_matrix_indexing: type <cimport,nodecl,using> = @enum(cint){
  MKL_ZERO_BASED = 0,
  MKL_ONE_BASED = 1
}
global sparse_matrix_print_styles: type <cimport,nodecl,using> = @enum(cint){
  MKL_C_STYLE = 0,
  MKL_FORTRAN_STYLE = 1
}
global sparse_matrix_formats: type <cimport,nodecl,using> = @enum(cint){
  MKL_CSR = 0
}
global sparse_matrix_structures: type <cimport,nodecl,using> = @enum(cint){
  MKL_GENERAL_STRUCTURE = 0,
  MKL_UPPER_TRIANGULAR = 1,
  MKL_LOWER_TRIANGULAR = 2,
  MKL_STRUCTURAL_SYMMETRIC = 3
}
global sparse_matrix_message_levels: type <cimport,nodecl,using> = @enum(cint){
  MKL_NO_PRINT = 0,
  MKL_PRINT = 1
}
global sparse_checker_error_values: type <cimport,nodecl,using> = @enum(cint){
  MKL_SPARSE_CHECKER_SUCCESS = 0,
  MKL_SPARSE_CHECKER_NON_MONOTONIC = 21,
  MKL_SPARSE_CHECKER_OUT_OF_RANGE = 22,
  MKL_SPARSE_CHECKER_NONTRIANGULAR = 23,
  MKL_SPARSE_CHECKER_NONORDERED = 24
}
global MKLExitHandler: type <cimport,nodecl> = @function(why: cint): void
global MKL_BLACS_CUSTOM: cint <comptime> = 0
global MKL_BLACS_MSMPI: cint <comptime> = 1
global MKL_BLACS_INTELMPI: cint <comptime> = 2
global MKL_BLACS_MPICH2: cint <comptime> = 3
global MKL_BLACS_LASTMPI: cint <comptime> = 4
global mkl_graph_matrix: type <cimport,nodecl,ctypedef'mkl_graph_matrix',forwarddecl> = @record{}
global mkl_graph_matrix_t: type <cimport,nodecl> = @*mkl_graph_matrix
global mkl_graph_vector: type <cimport,nodecl,ctypedef'mkl_graph_vector',forwarddecl> = @record{}
global mkl_graph_vector_t: type <cimport,nodecl> = @*mkl_graph_vector
global mkl_graph_descriptor: type <cimport,nodecl,ctypedef'mkl_graph_descriptor',forwarddecl> = @record{}
global mkl_graph_descriptor_t: type <cimport,nodecl> = @*mkl_graph_descriptor
global mkl_graph_status_t: type <cimport,nodecl,using> = @enum(cint){
  MKL_GRAPH_STATUS_SUCCESS = 0,
  MKL_GRAPH_STATUS_NOT_INITIALIZED = 1,
  MKL_GRAPH_STATUS_ALLOC_FAILED = 2,
  MKL_GRAPH_STATUS_INVALID_VALUE = 3,
  MKL_GRAPH_STATUS_INTERNAL_ERROR = 4,
  MKL_GRAPH_STATUS_NOT_SUPPORTED = 5
}
global mkl_graph_semiring_t: type <cimport,nodecl,using> = @enum(cint){
  MKL_GRAPH_SEMIRING_PLUS_TIMES_FP32 = 0,
  MKL_GRAPH_SEMIRING_PLUS_TIMES_FP64 = 1,
  MKL_GRAPH_SEMIRING_PLUS_TIMES_INT32 = 2,
  MKL_GRAPH_SEMIRING_PLUS_TIMES_INT64 = 3,
  MKL_GRAPH_SEMIRING_PLUS_FIRST_FP32 = 4,
  MKL_GRAPH_SEMIRING_PLUS_SECOND_FP32 = 5,
  MKL_GRAPH_SEMIRING_LOR_LAND_BOOL = 6,
  MKL_GRAPH_SEMIRING_MIN_PLUS_INT32 = 7,
  MKL_GRAPH_SEMIRING_MIN_PLUS_INT64 = 8,
  MKL_GRAPH_SEMIRING_MIN_PLUS_FP32 = 9,
  MKL_GRAPH_SEMIRING_MIN_PLUS_FP64 = 10,
  MKL_GRAPH_SEMIRING_MAX_FIRST_INT32 = 11,
  MKL_GRAPH_SEMIRING_MAX_FIRST_INT64 = 12,
  MKL_GRAPH_SEMIRING_MAX_FIRST_FP32 = 13,
  MKL_GRAPH_SEMIRING_MAX_FIRST_FP64 = 14,
  MKL_GRAPH_SEMIRING_ANY_FIRST_FP32 = 15,
  MKL_GRAPH_SEMIRING_ANY_FIRST_INT32 = 16,
  MKL_GRAPH_SEMIRING_ANY_SECOND_FP32 = 17,
  MKL_GRAPH_SEMIRING_ANY_SECOND_FP64 = 18,
  MKL_GRAPH_SEMIRING_ANY_SECOND_INT32 = 19,
  MKL_GRAPH_SEMIRING_ANY_SECOND_INT64 = 20,
  MKL_GRAPH_SEMIRING_ANY_PAIR_BOOL = 21,
  MKL_GRAPH_SEMIRING_PLUS_PAIR_INT32 = 22,
  MKL_GRAPH_SEMIRING_PLUS_PAIR_INT64 = 23,
  MKL_GRAPH_SEMIRING_MIN_SECOND_INT32 = 24,
  MKL_GRAPH_SEMIRING_MIN_SECOND_INT64 = 25,
  MKL_GRAPH_SEMIRING_MIN_FIRST_INT32 = 26,
  MKL_GRAPH_SEMIRING_MIN_FIRST_INT64 = 27
}
global mkl_graph_accumulator_t: type <cimport,nodecl,using> = @enum(cint){
  MKL_GRAPH_ACCUMULATOR_NONE = 0,
  MKL_GRAPH_ACCUMULATOR_PLUS = 1,
  MKL_GRAPH_ACCUMULATOR_LOR = 2,
  MKL_GRAPH_ACCUMULATOR_MIN = 3
}
global mkl_graph_type_t: type <cimport,nodecl,using> = @enum(cint){
  MKL_GRAPH_TYPE_UNSET = -1,
  MKL_GRAPH_TYPE_BOOL = 0,
  MKL_GRAPH_TYPE_INT32 = 1,
  MKL_GRAPH_TYPE_INT64 = 2,
  MKL_GRAPH_TYPE_FP32 = 3,
  MKL_GRAPH_TYPE_FP64 = 4
}
global mkl_graph_property_t: type <cimport,nodecl,using> = @enum(cint){
  MKL_GRAPH_PROPERTY_NROWS = 0,
  MKL_GRAPH_PROPERTY_NCOLS = 1,
  MKL_GRAPH_PROPERTY_NNZ = 2,
  MKL_GRAPH_PROPERTY_MATRIX_HAS_CSR = 3,
  MKL_GRAPH_PROPERTY_MATRIX_HAS_CSC = 4,
  MKL_GRAPH_PROPERTY_VECTOR_HAS_DENSE = 5,
  MKL_GRAPH_PROPERTY_VECTOR_HAS_SPARSE = 6
}
global mkl_graph_descriptor_field_t: type <cimport,nodecl,using> = @enum(cint){
  MKL_GRAPH_FIELD_OUTPUT = 0,
  MKL_GRAPH_FIELD_FIRST_INPUT = 1,
  MKL_GRAPH_FIELD_SECOND_INPUT = 2,
  MKL_GRAPH_FIELD_MASK = 3
}
global mkl_graph_descriptor_field_value_t: type <cimport,nodecl,using> = @enum(cint){
  MKL_GRAPH_MOD_NONE = 0,
  MKL_GRAPH_MOD_COMPLEMENT = 1,
  MKL_GRAPH_MOD_TRANSPOSE = 2,
  MKL_GRAPH_MOD_REPLACE = 3,
  MKL_GRAPH_MOD_ONLY_STRUCTURE = 4,
  MKL_GRAPH_MOD_KEEP_MASK_STRUCTURE = 5
}
global mkl_graph_method_t: type <cimport,nodecl,using> = @enum(cint){
  MKL_GRAPH_METHOD_AUTO = 0,
  MKL_GRAPH_METHOD_DOT = 1,
  MKL_GRAPH_METHOD_GUSTAVSON = 2,
  MKL_GRAPH_METHOD_HASH = 3
}
global mkl_graph_request_t: type <cimport,nodecl,using> = @enum(cint){
  MKL_GRAPH_REQUEST_COMPUTE_ALL = 0,
  MKL_GRAPH_REQUEST_FILL_NNZ = 1,
  MKL_GRAPH_REQUEST_FILL_ENTRIES = 2
}
global sparse_qr_hint_t: type <cimport,nodecl,using> = @enum(cint){
  SPARSE_QR_WITH_PIVOTS = 0
}
global function MKL_Simatcopy(ordering: cchar, trans: cchar, rows: csize, cols: csize, alpha: float32, AB: *float32, lda: csize, ldb: csize): void <cimport,nodecl> end
global function MKL_Dimatcopy(ordering: cchar, trans: cchar, rows: csize, cols: csize, alpha: float64, AB: *float64, lda: csize, ldb: csize): void <cimport,nodecl> end
global function MKL_Cimatcopy(ordering: cchar, trans: cchar, rows: csize, cols: csize, alpha: MKL_Complex8, AB: *MKL_Complex8, lda: csize, ldb: csize): void <cimport,nodecl> end
global function MKL_Zimatcopy(ordering: cchar, trans: cchar, rows: csize, cols: csize, alpha: MKL_Complex16, AB: *MKL_Complex16, lda: csize, ldb: csize): void <cimport,nodecl> end
global function MKL_Somatcopy(ordering: cchar, trans: cchar, rows: csize, cols: csize, alpha: float32, A: *float32, lda: csize, B: *float32, ldb: csize): void <cimport,nodecl> end
global function MKL_Domatcopy(ordering: cchar, trans: cchar, rows: csize, cols: csize, alpha: float64, A: *float64, lda: csize, B: *float64, ldb: csize): void <cimport,nodecl> end
global function MKL_Comatcopy(ordering: cchar, trans: cchar, rows: csize, cols: csize, alpha: MKL_Complex8, A: *MKL_Complex8, lda: csize, B: *MKL_Complex8, ldb: csize): void <cimport,nodecl> end
global function MKL_Zomatcopy(ordering: cchar, trans: cchar, rows: csize, cols: csize, alpha: MKL_Complex16, A: *MKL_Complex16, lda: csize, B: *MKL_Complex16, ldb: csize): void <cimport,nodecl> end
global function MKL_Somatcopy2(ordering: cchar, trans: cchar, rows: csize, cols: csize, alpha: float32, A: *float32, lda: csize, stridea: csize, B: *float32, ldb: csize, strideb: csize): void <cimport,nodecl> end
global function MKL_Domatcopy2(ordering: cchar, trans: cchar, rows: csize, cols: csize, alpha: float64, A: *float64, lda: csize, stridea: csize, B: *float64, ldb: csize, strideb: csize): void <cimport,nodecl> end
global function MKL_Comatcopy2(ordering: cchar, trans: cchar, rows: csize, cols: csize, alpha: MKL_Complex8, A: *MKL_Complex8, lda: csize, stridea: csize, B: *MKL_Complex8, ldb: csize, strideb: csize): void <cimport,nodecl> end
global function MKL_Zomatcopy2(ordering: cchar, trans: cchar, rows: csize, cols: csize, alpha: MKL_Complex16, A: *MKL_Complex16, lda: csize, stridea: csize, B: *MKL_Complex16, ldb: csize, strideb: csize): void <cimport,nodecl> end
global function MKL_Somatadd(ordering: cchar, transa: cchar, transb: cchar, rows: csize, cols: csize, alpha: float32, A: *float32, lda: csize, beta: float32, B: *float32, ldb: csize, C: *float32, ldc: csize): void <cimport,nodecl> end
global function MKL_Domatadd(ordering: cchar, transa: cchar, transb: cchar, rows: csize, cols: csize, alpha: float64, A: *float64, lda: csize, beta: float64, B: *float64, ldb: csize, C: *float64, ldc: csize): void <cimport,nodecl> end
global function MKL_Comatadd(ordering: cchar, transa: cchar, transb: cchar, rows: csize, cols: csize, alpha: MKL_Complex8, A: *MKL_Complex8, lda: csize, beta: MKL_Complex8, B: *MKL_Complex8, ldb: csize, C: *MKL_Complex8, ldc: csize): void <cimport,nodecl> end
global function MKL_Zomatadd(ordering: cchar, transa: cchar, transb: cchar, rows: csize, cols: csize, alpha: MKL_Complex16, A: *MKL_Complex16, lda: csize, beta: MKL_Complex16, B: *MKL_Complex16, ldb: csize, C: *MKL_Complex16, ldc: csize): void <cimport,nodecl> end
global function cblas_dcabs1(z: pointer): float64 <cimport,nodecl> end
global function cblas_scabs1(c: pointer): float32 <cimport,nodecl> end
global function cblas_sdot(N: cint, X: *float32, incX: cint, Y: *float32, incY: cint): float32 <cimport,nodecl> end
global function cblas_sdoti(N: cint, X: *float32, indx: *cint, Y: *float32): float32 <cimport,nodecl> end
global function cblas_ddot(N: cint, X: *float64, incX: cint, Y: *float64, incY: cint): float64 <cimport,nodecl> end
global function cblas_ddoti(N: cint, X: *float64, indx: *cint, Y: *float64): float64 <cimport,nodecl> end
global function cblas_dsdot(N: cint, X: *float32, incX: cint, Y: *float32, incY: cint): float64 <cimport,nodecl> end
global function cblas_sdsdot(N: cint, sb: float32, X: *float32, incX: cint, Y: *float32, incY: cint): float32 <cimport,nodecl> end
global function cblas_cdotu_sub(N: cint, X: pointer, incX: cint, Y: pointer, incY: cint, dotu: pointer): void <cimport,nodecl> end
global function cblas_cdotui_sub(N: cint, X: pointer, indx: *cint, Y: pointer, dotui: pointer): void <cimport,nodecl> end
global function cblas_cdotc_sub(N: cint, X: pointer, incX: cint, Y: pointer, incY: cint, dotc: pointer): void <cimport,nodecl> end
global function cblas_cdotci_sub(N: cint, X: pointer, indx: *cint, Y: pointer, dotui: pointer): void <cimport,nodecl> end
global function cblas_zdotu_sub(N: cint, X: pointer, incX: cint, Y: pointer, incY: cint, dotu: pointer): void <cimport,nodecl> end
global function cblas_zdotui_sub(N: cint, X: pointer, indx: *cint, Y: pointer, dotui: pointer): void <cimport,nodecl> end
global function cblas_zdotc_sub(N: cint, X: pointer, incX: cint, Y: pointer, incY: cint, dotc: pointer): void <cimport,nodecl> end
global function cblas_zdotci_sub(N: cint, X: pointer, indx: *cint, Y: pointer, dotui: pointer): void <cimport,nodecl> end
global function cblas_snrm2(N: cint, X: *float32, incX: cint): float32 <cimport,nodecl> end
global function cblas_sasum(N: cint, X: *float32, incX: cint): float32 <cimport,nodecl> end
global function cblas_dnrm2(N: cint, X: *float64, incX: cint): float64 <cimport,nodecl> end
global function cblas_dasum(N: cint, X: *float64, incX: cint): float64 <cimport,nodecl> end
global function cblas_scnrm2(N: cint, X: pointer, incX: cint): float32 <cimport,nodecl> end
global function cblas_scasum(N: cint, X: pointer, incX: cint): float32 <cimport,nodecl> end
global function cblas_dznrm2(N: cint, X: pointer, incX: cint): float64 <cimport,nodecl> end
global function cblas_dzasum(N: cint, X: pointer, incX: cint): float64 <cimport,nodecl> end
global function cblas_isamax(N: cint, X: *float32, incX: cint): csize <cimport,nodecl> end
global function cblas_idamax(N: cint, X: *float64, incX: cint): csize <cimport,nodecl> end
global function cblas_icamax(N: cint, X: pointer, incX: cint): csize <cimport,nodecl> end
global function cblas_izamax(N: cint, X: pointer, incX: cint): csize <cimport,nodecl> end
global function cblas_isamin(N: cint, X: *float32, incX: cint): csize <cimport,nodecl> end
global function cblas_idamin(N: cint, X: *float64, incX: cint): csize <cimport,nodecl> end
global function cblas_icamin(N: cint, X: pointer, incX: cint): csize <cimport,nodecl> end
global function cblas_izamin(N: cint, X: pointer, incX: cint): csize <cimport,nodecl> end
global function cblas_sswap(N: cint, X: *float32, incX: cint, Y: *float32, incY: cint): void <cimport,nodecl> end
global function cblas_scopy(N: cint, X: *float32, incX: cint, Y: *float32, incY: cint): void <cimport,nodecl> end
global function cblas_saxpy(N: cint, alpha: float32, X: *float32, incX: cint, Y: *float32, incY: cint): void <cimport,nodecl> end
global function cblas_saxpby(N: cint, alpha: float32, X: *float32, incX: cint, beta: float32, Y: *float32, incY: cint): void <cimport,nodecl> end
global function cblas_saxpyi(N: cint, alpha: float32, X: *float32, indx: *cint, Y: *float32): void <cimport,nodecl> end
global function cblas_sgthr(N: cint, Y: *float32, X: *float32, indx: *cint): void <cimport,nodecl> end
global function cblas_sgthrz(N: cint, Y: *float32, X: *float32, indx: *cint): void <cimport,nodecl> end
global function cblas_ssctr(N: cint, X: *float32, indx: *cint, Y: *float32): void <cimport,nodecl> end
global function cblas_srotg(a: *float32, b: *float32, c: *float32, s: *float32): void <cimport,nodecl> end
global function cblas_dswap(N: cint, X: *float64, incX: cint, Y: *float64, incY: cint): void <cimport,nodecl> end
global function cblas_dcopy(N: cint, X: *float64, incX: cint, Y: *float64, incY: cint): void <cimport,nodecl> end
global function cblas_daxpy(N: cint, alpha: float64, X: *float64, incX: cint, Y: *float64, incY: cint): void <cimport,nodecl> end
global function cblas_daxpby(N: cint, alpha: float64, X: *float64, incX: cint, beta: float64, Y: *float64, incY: cint): void <cimport,nodecl> end
global function cblas_daxpyi(N: cint, alpha: float64, X: *float64, indx: *cint, Y: *float64): void <cimport,nodecl> end
global function cblas_dgthr(N: cint, Y: *float64, X: *float64, indx: *cint): void <cimport,nodecl> end
global function cblas_dgthrz(N: cint, Y: *float64, X: *float64, indx: *cint): void <cimport,nodecl> end
global function cblas_dsctr(N: cint, X: *float64, indx: *cint, Y: *float64): void <cimport,nodecl> end
global function cblas_drotg(a: *float64, b: *float64, c: *float64, s: *float64): void <cimport,nodecl> end
global function cblas_cswap(N: cint, X: pointer, incX: cint, Y: pointer, incY: cint): void <cimport,nodecl> end
global function cblas_ccopy(N: cint, X: pointer, incX: cint, Y: pointer, incY: cint): void <cimport,nodecl> end
global function cblas_caxpy(N: cint, alpha: pointer, X: pointer, incX: cint, Y: pointer, incY: cint): void <cimport,nodecl> end
global function cblas_caxpby(N: cint, alpha: pointer, X: pointer, incX: cint, beta: pointer, Y: pointer, incY: cint): void <cimport,nodecl> end
global function cblas_caxpyi(N: cint, alpha: pointer, X: pointer, indx: *cint, Y: pointer): void <cimport,nodecl> end
global function cblas_cgthr(N: cint, Y: pointer, X: pointer, indx: *cint): void <cimport,nodecl> end
global function cblas_cgthrz(N: cint, Y: pointer, X: pointer, indx: *cint): void <cimport,nodecl> end
global function cblas_csctr(N: cint, X: pointer, indx: *cint, Y: pointer): void <cimport,nodecl> end
global function cblas_crotg(a: pointer, b: pointer, c: *float32, s: pointer): void <cimport,nodecl> end
global function cblas_zswap(N: cint, X: pointer, incX: cint, Y: pointer, incY: cint): void <cimport,nodecl> end
global function cblas_zcopy(N: cint, X: pointer, incX: cint, Y: pointer, incY: cint): void <cimport,nodecl> end
global function cblas_zaxpy(N: cint, alpha: pointer, X: pointer, incX: cint, Y: pointer, incY: cint): void <cimport,nodecl> end
global function cblas_zaxpby(N: cint, alpha: pointer, X: pointer, incX: cint, beta: pointer, Y: pointer, incY: cint): void <cimport,nodecl> end
global function cblas_zaxpyi(N: cint, alpha: pointer, X: pointer, indx: *cint, Y: pointer): void <cimport,nodecl> end
global function cblas_zgthr(N: cint, Y: pointer, X: pointer, indx: *cint): void <cimport,nodecl> end
global function cblas_zgthrz(N: cint, Y: pointer, X: pointer, indx: *cint): void <cimport,nodecl> end
global function cblas_zsctr(N: cint, X: pointer, indx: *cint, Y: pointer): void <cimport,nodecl> end
global function cblas_zrotg(a: pointer, b: pointer, c: *float64, s: pointer): void <cimport,nodecl> end
global function cblas_srotmg(d1: *float32, d2: *float32, b1: *float32, b2: float32, P: *float32): void <cimport,nodecl> end
global function cblas_srot(N: cint, X: *float32, incX: cint, Y: *float32, incY: cint, c: float32, s: float32): void <cimport,nodecl> end
global function cblas_sroti(N: cint, X: *float32, indx: *cint, Y: *float32, c: float32, s: float32): void <cimport,nodecl> end
global function cblas_srotm(N: cint, X: *float32, incX: cint, Y: *float32, incY: cint, P: *float32): void <cimport,nodecl> end
global function cblas_drotmg(d1: *float64, d2: *float64, b1: *float64, b2: float64, P: *float64): void <cimport,nodecl> end
global function cblas_drot(N: cint, X: *float64, incX: cint, Y: *float64, incY: cint, c: float64, s: float64): void <cimport,nodecl> end
global function cblas_drotm(N: cint, X: *float64, incX: cint, Y: *float64, incY: cint, P: *float64): void <cimport,nodecl> end
global function cblas_droti(N: cint, X: *float64, indx: *cint, Y: *float64, c: float64, s: float64): void <cimport,nodecl> end
global function cblas_csrot(N: cint, X: pointer, incX: cint, Y: pointer, incY: cint, c: float32, s: float32): void <cimport,nodecl> end
global function cblas_zdrot(N: cint, X: pointer, incX: cint, Y: pointer, incY: cint, c: float64, s: float64): void <cimport,nodecl> end
global function cblas_sscal(N: cint, alpha: float32, X: *float32, incX: cint): void <cimport,nodecl> end
global function cblas_dscal(N: cint, alpha: float64, X: *float64, incX: cint): void <cimport,nodecl> end
global function cblas_cscal(N: cint, alpha: pointer, X: pointer, incX: cint): void <cimport,nodecl> end
global function cblas_zscal(N: cint, alpha: pointer, X: pointer, incX: cint): void <cimport,nodecl> end
global function cblas_csscal(N: cint, alpha: float32, X: pointer, incX: cint): void <cimport,nodecl> end
global function cblas_zdscal(N: cint, alpha: float64, X: pointer, incX: cint): void <cimport,nodecl> end
global function cblas_sgemv(Layout: CBLAS_LAYOUT, TransA: CBLAS_TRANSPOSE, M: cint, N: cint, alpha: float32, A: *float32, lda: cint, X: *float32, incX: cint, beta: float32, Y: *float32, incY: cint): void <cimport,nodecl> end
global function cblas_sgbmv(Layout: CBLAS_LAYOUT, TransA: CBLAS_TRANSPOSE, M: cint, N: cint, KL: cint, KU: cint, alpha: float32, A: *float32, lda: cint, X: *float32, incX: cint, beta: float32, Y: *float32, incY: cint): void <cimport,nodecl> end
global function cblas_strmv(Layout: CBLAS_LAYOUT, Uplo: CBLAS_UPLO, TransA: CBLAS_TRANSPOSE, Diag: CBLAS_DIAG, N: cint, A: *float32, lda: cint, X: *float32, incX: cint): void <cimport,nodecl> end
global function cblas_stbmv(Layout: CBLAS_LAYOUT, Uplo: CBLAS_UPLO, TransA: CBLAS_TRANSPOSE, Diag: CBLAS_DIAG, N: cint, K: cint, A: *float32, lda: cint, X: *float32, incX: cint): void <cimport,nodecl> end
global function cblas_stpmv(Layout: CBLAS_LAYOUT, Uplo: CBLAS_UPLO, TransA: CBLAS_TRANSPOSE, Diag: CBLAS_DIAG, N: cint, Ap: *float32, X: *float32, incX: cint): void <cimport,nodecl> end
global function cblas_strsv(Layout: CBLAS_LAYOUT, Uplo: CBLAS_UPLO, TransA: CBLAS_TRANSPOSE, Diag: CBLAS_DIAG, N: cint, A: *float32, lda: cint, X: *float32, incX: cint): void <cimport,nodecl> end
global function cblas_stbsv(Layout: CBLAS_LAYOUT, Uplo: CBLAS_UPLO, TransA: CBLAS_TRANSPOSE, Diag: CBLAS_DIAG, N: cint, K: cint, A: *float32, lda: cint, X: *float32, incX: cint): void <cimport,nodecl> end
global function cblas_stpsv(Layout: CBLAS_LAYOUT, Uplo: CBLAS_UPLO, TransA: CBLAS_TRANSPOSE, Diag: CBLAS_DIAG, N: cint, Ap: *float32, X: *float32, incX: cint): void <cimport,nodecl> end
global function cblas_dgemv(Layout: CBLAS_LAYOUT, TransA: CBLAS_TRANSPOSE, M: cint, N: cint, alpha: float64, A: *float64, lda: cint, X: *float64, incX: cint, beta: float64, Y: *float64, incY: cint): void <cimport,nodecl> end
global function cblas_dgbmv(Layout: CBLAS_LAYOUT, TransA: CBLAS_TRANSPOSE, M: cint, N: cint, KL: cint, KU: cint, alpha: float64, A: *float64, lda: cint, X: *float64, incX: cint, beta: float64, Y: *float64, incY: cint): void <cimport,nodecl> end
global function cblas_dtrmv(Layout: CBLAS_LAYOUT, Uplo: CBLAS_UPLO, TransA: CBLAS_TRANSPOSE, Diag: CBLAS_DIAG, N: cint, A: *float64, lda: cint, X: *float64, incX: cint): void <cimport,nodecl> end
global function cblas_dtbmv(Layout: CBLAS_LAYOUT, Uplo: CBLAS_UPLO, TransA: CBLAS_TRANSPOSE, Diag: CBLAS_DIAG, N: cint, K: cint, A: *float64, lda: cint, X: *float64, incX: cint): void <cimport,nodecl> end
global function cblas_dtpmv(Layout: CBLAS_LAYOUT, Uplo: CBLAS_UPLO, TransA: CBLAS_TRANSPOSE, Diag: CBLAS_DIAG, N: cint, Ap: *float64, X: *float64, incX: cint): void <cimport,nodecl> end
global function cblas_dtrsv(Layout: CBLAS_LAYOUT, Uplo: CBLAS_UPLO, TransA: CBLAS_TRANSPOSE, Diag: CBLAS_DIAG, N: cint, A: *float64, lda: cint, X: *float64, incX: cint): void <cimport,nodecl> end
global function cblas_dtbsv(Layout: CBLAS_LAYOUT, Uplo: CBLAS_UPLO, TransA: CBLAS_TRANSPOSE, Diag: CBLAS_DIAG, N: cint, K: cint, A: *float64, lda: cint, X: *float64, incX: cint): void <cimport,nodecl> end
global function cblas_dtpsv(Layout: CBLAS_LAYOUT, Uplo: CBLAS_UPLO, TransA: CBLAS_TRANSPOSE, Diag: CBLAS_DIAG, N: cint, Ap: *float64, X: *float64, incX: cint): void <cimport,nodecl> end
global function cblas_cgemv(Layout: CBLAS_LAYOUT, TransA: CBLAS_TRANSPOSE, M: cint, N: cint, alpha: pointer, A: pointer, lda: cint, X: pointer, incX: cint, beta: pointer, Y: pointer, incY: cint): void <cimport,nodecl> end
global function cblas_cgbmv(Layout: CBLAS_LAYOUT, TransA: CBLAS_TRANSPOSE, M: cint, N: cint, KL: cint, KU: cint, alpha: pointer, A: pointer, lda: cint, X: pointer, incX: cint, beta: pointer, Y: pointer, incY: cint): void <cimport,nodecl> end
global function cblas_ctrmv(Layout: CBLAS_LAYOUT, Uplo: CBLAS_UPLO, TransA: CBLAS_TRANSPOSE, Diag: CBLAS_DIAG, N: cint, A: pointer, lda: cint, X: pointer, incX: cint): void <cimport,nodecl> end
global function cblas_ctbmv(Layout: CBLAS_LAYOUT, Uplo: CBLAS_UPLO, TransA: CBLAS_TRANSPOSE, Diag: CBLAS_DIAG, N: cint, K: cint, A: pointer, lda: cint, X: pointer, incX: cint): void <cimport,nodecl> end
global function cblas_ctpmv(Layout: CBLAS_LAYOUT, Uplo: CBLAS_UPLO, TransA: CBLAS_TRANSPOSE, Diag: CBLAS_DIAG, N: cint, Ap: pointer, X: pointer, incX: cint): void <cimport,nodecl> end
global function cblas_ctrsv(Layout: CBLAS_LAYOUT, Uplo: CBLAS_UPLO, TransA: CBLAS_TRANSPOSE, Diag: CBLAS_DIAG, N: cint, A: pointer, lda: cint, X: pointer, incX: cint): void <cimport,nodecl> end
global function cblas_ctbsv(Layout: CBLAS_LAYOUT, Uplo: CBLAS_UPLO, TransA: CBLAS_TRANSPOSE, Diag: CBLAS_DIAG, N: cint, K: cint, A: pointer, lda: cint, X: pointer, incX: cint): void <cimport,nodecl> end
global function cblas_ctpsv(Layout: CBLAS_LAYOUT, Uplo: CBLAS_UPLO, TransA: CBLAS_TRANSPOSE, Diag: CBLAS_DIAG, N: cint, Ap: pointer, X: pointer, incX: cint): void <cimport,nodecl> end
global function cblas_zgemv(Layout: CBLAS_LAYOUT, TransA: CBLAS_TRANSPOSE, M: cint, N: cint, alpha: pointer, A: pointer, lda: cint, X: pointer, incX: cint, beta: pointer, Y: pointer, incY: cint): void <cimport,nodecl> end
global function cblas_zgbmv(Layout: CBLAS_LAYOUT, TransA: CBLAS_TRANSPOSE, M: cint, N: cint, KL: cint, KU: cint, alpha: pointer, A: pointer, lda: cint, X: pointer, incX: cint, beta: pointer, Y: pointer, incY: cint): void <cimport,nodecl> end
global function cblas_ztrmv(Layout: CBLAS_LAYOUT, Uplo: CBLAS_UPLO, TransA: CBLAS_TRANSPOSE, Diag: CBLAS_DIAG, N: cint, A: pointer, lda: cint, X: pointer, incX: cint): void <cimport,nodecl> end
global function cblas_ztbmv(Layout: CBLAS_LAYOUT, Uplo: CBLAS_UPLO, TransA: CBLAS_TRANSPOSE, Diag: CBLAS_DIAG, N: cint, K: cint, A: pointer, lda: cint, X: pointer, incX: cint): void <cimport,nodecl> end
global function cblas_ztpmv(Layout: CBLAS_LAYOUT, Uplo: CBLAS_UPLO, TransA: CBLAS_TRANSPOSE, Diag: CBLAS_DIAG, N: cint, Ap: pointer, X: pointer, incX: cint): void <cimport,nodecl> end
global function cblas_ztrsv(Layout: CBLAS_LAYOUT, Uplo: CBLAS_UPLO, TransA: CBLAS_TRANSPOSE, Diag: CBLAS_DIAG, N: cint, A: pointer, lda: cint, X: pointer, incX: cint): void <cimport,nodecl> end
global function cblas_ztbsv(Layout: CBLAS_LAYOUT, Uplo: CBLAS_UPLO, TransA: CBLAS_TRANSPOSE, Diag: CBLAS_DIAG, N: cint, K: cint, A: pointer, lda: cint, X: pointer, incX: cint): void <cimport,nodecl> end
global function cblas_ztpsv(Layout: CBLAS_LAYOUT, Uplo: CBLAS_UPLO, TransA: CBLAS_TRANSPOSE, Diag: CBLAS_DIAG, N: cint, Ap: pointer, X: pointer, incX: cint): void <cimport,nodecl> end
global function cblas_ssymv(Layout: CBLAS_LAYOUT, Uplo: CBLAS_UPLO, N: cint, alpha: float32, A: *float32, lda: cint, X: *float32, incX: cint, beta: float32, Y: *float32, incY: cint): void <cimport,nodecl> end
global function cblas_ssbmv(Layout: CBLAS_LAYOUT, Uplo: CBLAS_UPLO, N: cint, K: cint, alpha: float32, A: *float32, lda: cint, X: *float32, incX: cint, beta: float32, Y: *float32, incY: cint): void <cimport,nodecl> end
global function cblas_sspmv(Layout: CBLAS_LAYOUT, Uplo: CBLAS_UPLO, N: cint, alpha: float32, Ap: *float32, X: *float32, incX: cint, beta: float32, Y: *float32, incY: cint): void <cimport,nodecl> end
global function cblas_sger(Layout: CBLAS_LAYOUT, M: cint, N: cint, alpha: float32, X: *float32, incX: cint, Y: *float32, incY: cint, A: *float32, lda: cint): void <cimport,nodecl> end
global function cblas_ssyr(Layout: CBLAS_LAYOUT, Uplo: CBLAS_UPLO, N: cint, alpha: float32, X: *float32, incX: cint, A: *float32, lda: cint): void <cimport,nodecl> end
global function cblas_sspr(Layout: CBLAS_LAYOUT, Uplo: CBLAS_UPLO, N: cint, alpha: float32, X: *float32, incX: cint, Ap: *float32): void <cimport,nodecl> end
global function cblas_ssyr2(Layout: CBLAS_LAYOUT, Uplo: CBLAS_UPLO, N: cint, alpha: float32, X: *float32, incX: cint, Y: *float32, incY: cint, A: *float32, lda: cint): void <cimport,nodecl> end
global function cblas_sspr2(Layout: CBLAS_LAYOUT, Uplo: CBLAS_UPLO, N: cint, alpha: float32, X: *float32, incX: cint, Y: *float32, incY: cint, A: *float32): void <cimport,nodecl> end
global function cblas_dsymv(Layout: CBLAS_LAYOUT, Uplo: CBLAS_UPLO, N: cint, alpha: float64, A: *float64, lda: cint, X: *float64, incX: cint, beta: float64, Y: *float64, incY: cint): void <cimport,nodecl> end
global function cblas_dsbmv(Layout: CBLAS_LAYOUT, Uplo: CBLAS_UPLO, N: cint, K: cint, alpha: float64, A: *float64, lda: cint, X: *float64, incX: cint, beta: float64, Y: *float64, incY: cint): void <cimport,nodecl> end
global function cblas_dspmv(Layout: CBLAS_LAYOUT, Uplo: CBLAS_UPLO, N: cint, alpha: float64, Ap: *float64, X: *float64, incX: cint, beta: float64, Y: *float64, incY: cint): void <cimport,nodecl> end
global function cblas_dger(Layout: CBLAS_LAYOUT, M: cint, N: cint, alpha: float64, X: *float64, incX: cint, Y: *float64, incY: cint, A: *float64, lda: cint): void <cimport,nodecl> end
global function cblas_dsyr(Layout: CBLAS_LAYOUT, Uplo: CBLAS_UPLO, N: cint, alpha: float64, X: *float64, incX: cint, A: *float64, lda: cint): void <cimport,nodecl> end
global function cblas_dspr(Layout: CBLAS_LAYOUT, Uplo: CBLAS_UPLO, N: cint, alpha: float64, X: *float64, incX: cint, Ap: *float64): void <cimport,nodecl> end
global function cblas_dsyr2(Layout: CBLAS_LAYOUT, Uplo: CBLAS_UPLO, N: cint, alpha: float64, X: *float64, incX: cint, Y: *float64, incY: cint, A: *float64, lda: cint): void <cimport,nodecl> end
global function cblas_dspr2(Layout: CBLAS_LAYOUT, Uplo: CBLAS_UPLO, N: cint, alpha: float64, X: *float64, incX: cint, Y: *float64, incY: cint, A: *float64): void <cimport,nodecl> end
global function cblas_chemv(Layout: CBLAS_LAYOUT, Uplo: CBLAS_UPLO, N: cint, alpha: pointer, A: pointer, lda: cint, X: pointer, incX: cint, beta: pointer, Y: pointer, incY: cint): void <cimport,nodecl> end
global function cblas_chbmv(Layout: CBLAS_LAYOUT, Uplo: CBLAS_UPLO, N: cint, K: cint, alpha: pointer, A: pointer, lda: cint, X: pointer, incX: cint, beta: pointer, Y: pointer, incY: cint): void <cimport,nodecl> end
global function cblas_chpmv(Layout: CBLAS_LAYOUT, Uplo: CBLAS_UPLO, N: cint, alpha: pointer, Ap: pointer, X: pointer, incX: cint, beta: pointer, Y: pointer, incY: cint): void <cimport,nodecl> end
global function cblas_cgeru(Layout: CBLAS_LAYOUT, M: cint, N: cint, alpha: pointer, X: pointer, incX: cint, Y: pointer, incY: cint, A: pointer, lda: cint): void <cimport,nodecl> end
global function cblas_cgerc(Layout: CBLAS_LAYOUT, M: cint, N: cint, alpha: pointer, X: pointer, incX: cint, Y: pointer, incY: cint, A: pointer, lda: cint): void <cimport,nodecl> end
global function cblas_cher(Layout: CBLAS_LAYOUT, Uplo: CBLAS_UPLO, N: cint, alpha: float32, X: pointer, incX: cint, A: pointer, lda: cint): void <cimport,nodecl> end
global function cblas_chpr(Layout: CBLAS_LAYOUT, Uplo: CBLAS_UPLO, N: cint, alpha: float32, X: pointer, incX: cint, A: pointer): void <cimport,nodecl> end
global function cblas_cher2(Layout: CBLAS_LAYOUT, Uplo: CBLAS_UPLO, N: cint, alpha: pointer, X: pointer, incX: cint, Y: pointer, incY: cint, A: pointer, lda: cint): void <cimport,nodecl> end
global function cblas_chpr2(Layout: CBLAS_LAYOUT, Uplo: CBLAS_UPLO, N: cint, alpha: pointer, X: pointer, incX: cint, Y: pointer, incY: cint, Ap: pointer): void <cimport,nodecl> end
global function cblas_zhemv(Layout: CBLAS_LAYOUT, Uplo: CBLAS_UPLO, N: cint, alpha: pointer, A: pointer, lda: cint, X: pointer, incX: cint, beta: pointer, Y: pointer, incY: cint): void <cimport,nodecl> end
global function cblas_zhbmv(Layout: CBLAS_LAYOUT, Uplo: CBLAS_UPLO, N: cint, K: cint, alpha: pointer, A: pointer, lda: cint, X: pointer, incX: cint, beta: pointer, Y: pointer, incY: cint): void <cimport,nodecl> end
global function cblas_zhpmv(Layout: CBLAS_LAYOUT, Uplo: CBLAS_UPLO, N: cint, alpha: pointer, Ap: pointer, X: pointer, incX: cint, beta: pointer, Y: pointer, incY: cint): void <cimport,nodecl> end
global function cblas_zgeru(Layout: CBLAS_LAYOUT, M: cint, N: cint, alpha: pointer, X: pointer, incX: cint, Y: pointer, incY: cint, A: pointer, lda: cint): void <cimport,nodecl> end
global function cblas_zgerc(Layout: CBLAS_LAYOUT, M: cint, N: cint, alpha: pointer, X: pointer, incX: cint, Y: pointer, incY: cint, A: pointer, lda: cint): void <cimport,nodecl> end
global function cblas_zher(Layout: CBLAS_LAYOUT, Uplo: CBLAS_UPLO, N: cint, alpha: float64, X: pointer, incX: cint, A: pointer, lda: cint): void <cimport,nodecl> end
global function cblas_zhpr(Layout: CBLAS_LAYOUT, Uplo: CBLAS_UPLO, N: cint, alpha: float64, X: pointer, incX: cint, A: pointer): void <cimport,nodecl> end
global function cblas_zher2(Layout: CBLAS_LAYOUT, Uplo: CBLAS_UPLO, N: cint, alpha: pointer, X: pointer, incX: cint, Y: pointer, incY: cint, A: pointer, lda: cint): void <cimport,nodecl> end
global function cblas_zhpr2(Layout: CBLAS_LAYOUT, Uplo: CBLAS_UPLO, N: cint, alpha: pointer, X: pointer, incX: cint, Y: pointer, incY: cint, Ap: pointer): void <cimport,nodecl> end
global function cblas_sgemm(Layout: CBLAS_LAYOUT, TransA: CBLAS_TRANSPOSE, TransB: CBLAS_TRANSPOSE, M: cint, N: cint, K: cint, alpha: float32, A: *float32, lda: cint, B: *float32, ldb: cint, beta: float32, C: *float32, ldc: cint): void <cimport,nodecl> end
global function cblas_sgemm_batch(Layout: CBLAS_LAYOUT, TransA_Array: *CBLAS_TRANSPOSE, TransB_Array: *CBLAS_TRANSPOSE, M_Array: *cint, N_Array: *cint, K_Array: *cint, alpha_Array: *float32, A_Array: **float32, lda_Array: *cint, B_Array: **float32, ldb_Array: *cint, beta_Array: *float32, C_Array: **float32, ldc_Array: *cint, group_count: cint, group_size: *cint): void <cimport,nodecl> end
global function cblas_sgemm_batch_strided(Layout: CBLAS_LAYOUT, TransA: CBLAS_TRANSPOSE, TransB: CBLAS_TRANSPOSE, M: cint, N: cint, K: cint, alpha: float32, A: *float32, lda: cint, stridea: cint, B: *float32, ldb: cint, strideb: cint, beta: float32, C: *float32, ldc: cint, stridec: cint, batch_size: cint): void <cimport,nodecl> end
global function cblas_sgemmt(Layout: CBLAS_LAYOUT, Uplo: CBLAS_UPLO, TransA: CBLAS_TRANSPOSE, TransB: CBLAS_TRANSPOSE, N: cint, K: cint, alpha: float32, A: *float32, lda: cint, B: *float32, ldb: cint, beta: float32, C: *float32, ldc: cint): void <cimport,nodecl> end
global function cblas_ssymm(Layout: CBLAS_LAYOUT, Side: CBLAS_SIDE, Uplo: CBLAS_UPLO, M: cint, N: cint, alpha: float32, A: *float32, lda: cint, B: *float32, ldb: cint, beta: float32, C: *float32, ldc: cint): void <cimport,nodecl> end
global function cblas_ssyrk(Layout: CBLAS_LAYOUT, Uplo: CBLAS_UPLO, Trans: CBLAS_TRANSPOSE, N: cint, K: cint, alpha: float32, A: *float32, lda: cint, beta: float32, C: *float32, ldc: cint): void <cimport,nodecl> end
global function cblas_ssyr2k(Layout: CBLAS_LAYOUT, Uplo: CBLAS_UPLO, Trans: CBLAS_TRANSPOSE, N: cint, K: cint, alpha: float32, A: *float32, lda: cint, B: *float32, ldb: cint, beta: float32, C: *float32, ldc: cint): void <cimport,nodecl> end
global function cblas_strmm(Layout: CBLAS_LAYOUT, Side: CBLAS_SIDE, Uplo: CBLAS_UPLO, TransA: CBLAS_TRANSPOSE, Diag: CBLAS_DIAG, M: cint, N: cint, alpha: float32, A: *float32, lda: cint, B: *float32, ldb: cint): void <cimport,nodecl> end
global function cblas_strsm(Layout: CBLAS_LAYOUT, Side: CBLAS_SIDE, Uplo: CBLAS_UPLO, TransA: CBLAS_TRANSPOSE, Diag: CBLAS_DIAG, M: cint, N: cint, alpha: float32, A: *float32, lda: cint, B: *float32, ldb: cint): void <cimport,nodecl> end
global function cblas_strsm_batch(Layout: CBLAS_LAYOUT, Side_Array: *CBLAS_SIDE, Uplo_Array: *CBLAS_UPLO, TransA_Array: *CBLAS_TRANSPOSE, Diag_Array: *CBLAS_DIAG, M_Array: *cint, N_Array: *cint, alpha_Array: *float32, A_Array: **float32, lda_Array: *cint, B_Array: **float32, ldb_Array: *cint, group_count: cint, group_size: *cint): void <cimport,nodecl> end
global function cblas_dgemm(Layout: CBLAS_LAYOUT, TransA: CBLAS_TRANSPOSE, TransB: CBLAS_TRANSPOSE, M: cint, N: cint, K: cint, alpha: float64, A: *float64, lda: cint, B: *float64, ldb: cint, beta: float64, C: *float64, ldc: cint): void <cimport,nodecl> end
global function cblas_dgemm_batch(Layout: CBLAS_LAYOUT, TransA_Array: *CBLAS_TRANSPOSE, TransB_Array: *CBLAS_TRANSPOSE, M_Array: *cint, N_Array: *cint, K_Array: *cint, alpha_Array: *float64, A_Array: **float64, lda_Array: *cint, B_Array: **float64, ldb_Array: *cint, beta_Array: *float64, C_Array: **float64, ldc_Array: *cint, group_count: cint, group_size: *cint): void <cimport,nodecl> end
global function cblas_dgemm_batch_strided(Layout: CBLAS_LAYOUT, TransA: CBLAS_TRANSPOSE, TransB: CBLAS_TRANSPOSE, M: cint, N: cint, K: cint, alpha: float64, A: *float64, lda: cint, stridea: cint, B: *float64, ldb: cint, strideb: cint, beta: float64, C: *float64, ldc: cint, stridec: cint, batch_size: cint): void <cimport,nodecl> end
global function cblas_dgemmt(Layout: CBLAS_LAYOUT, Uplo: CBLAS_UPLO, TransA: CBLAS_TRANSPOSE, TransB: CBLAS_TRANSPOSE, N: cint, K: cint, alpha: float64, A: *float64, lda: cint, B: *float64, ldb: cint, beta: float64, C: *float64, ldc: cint): void <cimport,nodecl> end
global function cblas_dsymm(Layout: CBLAS_LAYOUT, Side: CBLAS_SIDE, Uplo: CBLAS_UPLO, M: cint, N: cint, alpha: float64, A: *float64, lda: cint, B: *float64, ldb: cint, beta: float64, C: *float64, ldc: cint): void <cimport,nodecl> end
global function cblas_dsyrk(Layout: CBLAS_LAYOUT, Uplo: CBLAS_UPLO, Trans: CBLAS_TRANSPOSE, N: cint, K: cint, alpha: float64, A: *float64, lda: cint, beta: float64, C: *float64, ldc: cint): void <cimport,nodecl> end
global function cblas_dsyr2k(Layout: CBLAS_LAYOUT, Uplo: CBLAS_UPLO, Trans: CBLAS_TRANSPOSE, N: cint, K: cint, alpha: float64, A: *float64, lda: cint, B: *float64, ldb: cint, beta: float64, C: *float64, ldc: cint): void <cimport,nodecl> end
global function cblas_dtrmm(Layout: CBLAS_LAYOUT, Side: CBLAS_SIDE, Uplo: CBLAS_UPLO, TransA: CBLAS_TRANSPOSE, Diag: CBLAS_DIAG, M: cint, N: cint, alpha: float64, A: *float64, lda: cint, B: *float64, ldb: cint): void <cimport,nodecl> end
global function cblas_dtrsm(Layout: CBLAS_LAYOUT, Side: CBLAS_SIDE, Uplo: CBLAS_UPLO, TransA: CBLAS_TRANSPOSE, Diag: CBLAS_DIAG, M: cint, N: cint, alpha: float64, A: *float64, lda: cint, B: *float64, ldb: cint): void <cimport,nodecl> end
global function cblas_dtrsm_batch(Layout: CBLAS_LAYOUT, Side_Array: *CBLAS_SIDE, Uplo_Array: *CBLAS_UPLO, Transa_Array: *CBLAS_TRANSPOSE, Diag_Array: *CBLAS_DIAG, M_Array: *cint, N_Array: *cint, alpha_Array: *float64, A_Array: **float64, lda_Array: *cint, B_Array: **float64, ldb_Array: *cint, group_count: cint, group_size: *cint): void <cimport,nodecl> end
global function cblas_cgemm(Layout: CBLAS_LAYOUT, TransA: CBLAS_TRANSPOSE, TransB: CBLAS_TRANSPOSE, M: cint, N: cint, K: cint, alpha: pointer, A: pointer, lda: cint, B: pointer, ldb: cint, beta: pointer, C: pointer, ldc: cint): void <cimport,nodecl> end
global function cblas_cgemm3m(Layout: CBLAS_LAYOUT, TransA: CBLAS_TRANSPOSE, TransB: CBLAS_TRANSPOSE, M: cint, N: cint, K: cint, alpha: pointer, A: pointer, lda: cint, B: pointer, ldb: cint, beta: pointer, C: pointer, ldc: cint): void <cimport,nodecl> end
global function cblas_cgemm_batch(Layout: CBLAS_LAYOUT, TransA_Array: *CBLAS_TRANSPOSE, TransB_Array: *CBLAS_TRANSPOSE, M_Array: *cint, N_Array: *cint, K_Array: *cint, alpha_Array: pointer, A_Array: *pointer, lda_Array: *cint, B_Array: *pointer, ldb_Array: *cint, beta_Array: pointer, C_Array: *pointer, ldc_Array: *cint, group_count: cint, group_size: *cint): void <cimport,nodecl> end
global function cblas_cgemm_batch_strided(Layout: CBLAS_LAYOUT, TransA: CBLAS_TRANSPOSE, TransB: CBLAS_TRANSPOSE, M: cint, N: cint, K: cint, alpha: pointer, A: pointer, lda: cint, stridea: cint, B: pointer, ldb: cint, strideb: cint, beta: pointer, C: pointer, ldc: cint, stridec: cint, batch_size: cint): void <cimport,nodecl> end
global function cblas_cgemm3m_batch(Layout: CBLAS_LAYOUT, TransA_Array: *CBLAS_TRANSPOSE, TransB_Array: *CBLAS_TRANSPOSE, M_Array: *cint, N_Array: *cint, K_Array: *cint, alpha_Array: pointer, A_Array: *pointer, lda_Array: *cint, B_Array: *pointer, ldb_Array: *cint, beta_Array: pointer, C_Array: *pointer, ldc_Array: *cint, group_count: cint, group_size: *cint): void <cimport,nodecl> end
global function cblas_cgemmt(Layout: CBLAS_LAYOUT, Uplo: CBLAS_UPLO, TransA: CBLAS_TRANSPOSE, TransB: CBLAS_TRANSPOSE, N: cint, K: cint, alpha: pointer, A: pointer, lda: cint, B: pointer, ldb: cint, beta: pointer, C: pointer, ldc: cint): void <cimport,nodecl> end
global function cblas_csymm(Layout: CBLAS_LAYOUT, Side: CBLAS_SIDE, Uplo: CBLAS_UPLO, M: cint, N: cint, alpha: pointer, A: pointer, lda: cint, B: pointer, ldb: cint, beta: pointer, C: pointer, ldc: cint): void <cimport,nodecl> end
global function cblas_csyrk(Layout: CBLAS_LAYOUT, Uplo: CBLAS_UPLO, Trans: CBLAS_TRANSPOSE, N: cint, K: cint, alpha: pointer, A: pointer, lda: cint, beta: pointer, C: pointer, ldc: cint): void <cimport,nodecl> end
global function cblas_csyr2k(Layout: CBLAS_LAYOUT, Uplo: CBLAS_UPLO, Trans: CBLAS_TRANSPOSE, N: cint, K: cint, alpha: pointer, A: pointer, lda: cint, B: pointer, ldb: cint, beta: pointer, C: pointer, ldc: cint): void <cimport,nodecl> end
global function cblas_ctrmm(Layout: CBLAS_LAYOUT, Side: CBLAS_SIDE, Uplo: CBLAS_UPLO, TransA: CBLAS_TRANSPOSE, Diag: CBLAS_DIAG, M: cint, N: cint, alpha: pointer, A: pointer, lda: cint, B: pointer, ldb: cint): void <cimport,nodecl> end
global function cblas_ctrsm(Layout: CBLAS_LAYOUT, Side: CBLAS_SIDE, Uplo: CBLAS_UPLO, TransA: CBLAS_TRANSPOSE, Diag: CBLAS_DIAG, M: cint, N: cint, alpha: pointer, A: pointer, lda: cint, B: pointer, ldb: cint): void <cimport,nodecl> end
global function cblas_ctrsm_batch(Layout: CBLAS_LAYOUT, Side_Array: *CBLAS_SIDE, Uplo_Array: *CBLAS_UPLO, Transa_Array: *CBLAS_TRANSPOSE, Diag_Array: *CBLAS_DIAG, M_Array: *cint, N_Array: *cint, alpha_Array: pointer, A_Array: *pointer, lda_Array: *cint, B_Array: *pointer, ldb_Array: *cint, group_count: cint, group_size: *cint): void <cimport,nodecl> end
global function cblas_zgemm(Layout: CBLAS_LAYOUT, TransA: CBLAS_TRANSPOSE, TransB: CBLAS_TRANSPOSE, M: cint, N: cint, K: cint, alpha: pointer, A: pointer, lda: cint, B: pointer, ldb: cint, beta: pointer, C: pointer, ldc: cint): void <cimport,nodecl> end
global function cblas_zgemm3m(Layout: CBLAS_LAYOUT, TransA: CBLAS_TRANSPOSE, TransB: CBLAS_TRANSPOSE, M: cint, N: cint, K: cint, alpha: pointer, A: pointer, lda: cint, B: pointer, ldb: cint, beta: pointer, C: pointer, ldc: cint): void <cimport,nodecl> end
global function cblas_zgemm_batch(Layout: CBLAS_LAYOUT, TransA_Array: *CBLAS_TRANSPOSE, TransB_Array: *CBLAS_TRANSPOSE, M_Array: *cint, N_Array: *cint, K_Array: *cint, alpha_Array: pointer, A_Array: *pointer, lda_Array: *cint, B_Array: *pointer, ldb_Array: *cint, beta_Array: pointer, C_Array: *pointer, ldc_Array: *cint, group_count: cint, group_size: *cint): void <cimport,nodecl> end
global function cblas_zgemm_batch_strided(Layout: CBLAS_LAYOUT, TransA: CBLAS_TRANSPOSE, TransB: CBLAS_TRANSPOSE, M: cint, N: cint, K: cint, alpha: pointer, A: pointer, lda: cint, stridea: cint, B: pointer, ldb: cint, strideb: cint, beta: pointer, C: pointer, ldc: cint, stridec: cint, batch_size: cint): void <cimport,nodecl> end
global function cblas_zgemm3m_batch(Layout: CBLAS_LAYOUT, TransA_Array: *CBLAS_TRANSPOSE, TransB_Array: *CBLAS_TRANSPOSE, M_Array: *cint, N_Array: *cint, K_Array: *cint, alpha_Array: pointer, A_Array: *pointer, lda_Array: *cint, B_Array: *pointer, ldb_Array: *cint, beta_Array: pointer, C_Array: *pointer, ldc_Array: *cint, group_count: cint, group_size: *cint): void <cimport,nodecl> end
global function cblas_zgemmt(Layout: CBLAS_LAYOUT, Uplo: CBLAS_UPLO, TransA: CBLAS_TRANSPOSE, TransB: CBLAS_TRANSPOSE, N: cint, K: cint, alpha: pointer, A: pointer, lda: cint, B: pointer, ldb: cint, beta: pointer, C: pointer, ldc: cint): void <cimport,nodecl> end
global function cblas_zsymm(Layout: CBLAS_LAYOUT, Side: CBLAS_SIDE, Uplo: CBLAS_UPLO, M: cint, N: cint, alpha: pointer, A: pointer, lda: cint, B: pointer, ldb: cint, beta: pointer, C: pointer, ldc: cint): void <cimport,nodecl> end
global function cblas_zsyrk(Layout: CBLAS_LAYOUT, Uplo: CBLAS_UPLO, Trans: CBLAS_TRANSPOSE, N: cint, K: cint, alpha: pointer, A: pointer, lda: cint, beta: pointer, C: pointer, ldc: cint): void <cimport,nodecl> end
global function cblas_zsyr2k(Layout: CBLAS_LAYOUT, Uplo: CBLAS_UPLO, Trans: CBLAS_TRANSPOSE, N: cint, K: cint, alpha: pointer, A: pointer, lda: cint, B: pointer, ldb: cint, beta: pointer, C: pointer, ldc: cint): void <cimport,nodecl> end
global function cblas_ztrmm(Layout: CBLAS_LAYOUT, Side: CBLAS_SIDE, Uplo: CBLAS_UPLO, TransA: CBLAS_TRANSPOSE, Diag: CBLAS_DIAG, M: cint, N: cint, alpha: pointer, A: pointer, lda: cint, B: pointer, ldb: cint): void <cimport,nodecl> end
global function cblas_ztrsm(Layout: CBLAS_LAYOUT, Side: CBLAS_SIDE, Uplo: CBLAS_UPLO, TransA: CBLAS_TRANSPOSE, Diag: CBLAS_DIAG, M: cint, N: cint, alpha: pointer, A: pointer, lda: cint, B: pointer, ldb: cint): void <cimport,nodecl> end
global function cblas_ztrsm_batch(Layout: CBLAS_LAYOUT, Side_Array: *CBLAS_SIDE, Uplo_Array: *CBLAS_UPLO, Transa_Array: *CBLAS_TRANSPOSE, Diag_Array: *CBLAS_DIAG, M_Array: *cint, N_Array: *cint, alpha_Array: pointer, A_Array: *pointer, lda_Array: *cint, B_Array: *pointer, ldb_Array: *cint, group_count: cint, group_size: *cint): void <cimport,nodecl> end
global function cblas_chemm(Layout: CBLAS_LAYOUT, Side: CBLAS_SIDE, Uplo: CBLAS_UPLO, M: cint, N: cint, alpha: pointer, A: pointer, lda: cint, B: pointer, ldb: cint, beta: pointer, C: pointer, ldc: cint): void <cimport,nodecl> end
global function cblas_cherk(Layout: CBLAS_LAYOUT, Uplo: CBLAS_UPLO, Trans: CBLAS_TRANSPOSE, N: cint, K: cint, alpha: float32, A: pointer, lda: cint, beta: float32, C: pointer, ldc: cint): void <cimport,nodecl> end
global function cblas_cher2k(Layout: CBLAS_LAYOUT, Uplo: CBLAS_UPLO, Trans: CBLAS_TRANSPOSE, N: cint, K: cint, alpha: pointer, A: pointer, lda: cint, B: pointer, ldb: cint, beta: float32, C: pointer, ldc: cint): void <cimport,nodecl> end
global function cblas_zhemm(Layout: CBLAS_LAYOUT, Side: CBLAS_SIDE, Uplo: CBLAS_UPLO, M: cint, N: cint, alpha: pointer, A: pointer, lda: cint, B: pointer, ldb: cint, beta: pointer, C: pointer, ldc: cint): void <cimport,nodecl> end
global function cblas_zherk(Layout: CBLAS_LAYOUT, Uplo: CBLAS_UPLO, Trans: CBLAS_TRANSPOSE, N: cint, K: cint, alpha: float64, A: pointer, lda: cint, beta: float64, C: pointer, ldc: cint): void <cimport,nodecl> end
global function cblas_zher2k(Layout: CBLAS_LAYOUT, Uplo: CBLAS_UPLO, Trans: CBLAS_TRANSPOSE, N: cint, K: cint, alpha: pointer, A: pointer, lda: cint, B: pointer, ldb: cint, beta: float64, C: pointer, ldc: cint): void <cimport,nodecl> end
global function cblas_sgemm_alloc(identifier: CBLAS_IDENTIFIER, M: cint, N: cint, K: cint): *float32 <cimport,nodecl> end
global function cblas_sgemm_pack_get_size(identifier: CBLAS_IDENTIFIER, M: cint, N: cint, K: cint): csize <cimport,nodecl> end
global function cblas_sgemm_pack(Layout: CBLAS_LAYOUT, identifier: CBLAS_IDENTIFIER, Trans: CBLAS_TRANSPOSE, M: cint, N: cint, K: cint, alpha: float32, src: *float32, ld: cint, dest: *float32): void <cimport,nodecl> end
global function cblas_sgemm_compute(Layout: CBLAS_LAYOUT, TransA: cint, TransB: cint, M: cint, N: cint, K: cint, A: *float32, lda: cint, B: *float32, ldb: cint, beta: float32, C: *float32, ldc: cint): void <cimport,nodecl> end
global function cblas_sgemm_free(dest: *float32): void <cimport,nodecl> end
global function cblas_dgemm_alloc(identifier: CBLAS_IDENTIFIER, M: cint, N: cint, K: cint): *float64 <cimport,nodecl> end
global function cblas_dgemm_pack_get_size(identifier: CBLAS_IDENTIFIER, M: cint, N: cint, K: cint): csize <cimport,nodecl> end
global function cblas_dgemm_pack(Layout: CBLAS_LAYOUT, identifier: CBLAS_IDENTIFIER, Trans: CBLAS_TRANSPOSE, M: cint, N: cint, K: cint, alpha: float64, src: *float64, ld: cint, dest: *float64): void <cimport,nodecl> end
global function cblas_dgemm_compute(Layout: CBLAS_LAYOUT, TransA: cint, TransB: cint, M: cint, N: cint, K: cint, A: *float64, lda: cint, B: *float64, ldb: cint, beta: float64, C: *float64, ldc: cint): void <cimport,nodecl> end
global function cblas_dgemm_free(dest: *float64): void <cimport,nodecl> end
global function cblas_gemm_s16s16s32(Layout: CBLAS_LAYOUT, TransA: CBLAS_TRANSPOSE, TransB: CBLAS_TRANSPOSE, OffsetC: CBLAS_OFFSET, M: cint, N: cint, K: cint, alpha: float32, A: *cshort, lda: cint, ao: cshort, B: *cshort, ldb: cint, bo: cshort, beta: float32, C: *cint, ldc: cint, cb: *cint): void <cimport,nodecl> end
global function cblas_gemm_s8u8s32(Layout: CBLAS_LAYOUT, TransA: CBLAS_TRANSPOSE, TransB: CBLAS_TRANSPOSE, OffsetC: CBLAS_OFFSET, M: cint, N: cint, K: cint, alpha: float32, A: pointer, lda: cint, ao: cchar, B: pointer, ldb: cint, bo: cchar, beta: float32, C: *cint, ldc: cint, cb: *cint): void <cimport,nodecl> end
global function cblas_gemm_bf16bf16f32(Layout: CBLAS_LAYOUT, TransA: CBLAS_TRANSPOSE, TransB: CBLAS_TRANSPOSE, M: cint, N: cint, K: cint, alpha: float32, A: *cushort, lda: cint, B: *cushort, ldb: cint, beta: float32, C: *float32, ldc: cint): void <cimport,nodecl> end
global function cblas_gemm_s8u8s32_pack_get_size(identifier: CBLAS_IDENTIFIER, M: cint, N: cint, K: cint): csize <cimport,nodecl> end
global function cblas_gemm_s16s16s32_pack_get_size(identifier: CBLAS_IDENTIFIER, M: cint, N: cint, K: cint): csize <cimport,nodecl> end
global function cblas_gemm_bf16bf16f32_pack_get_size(identifier: CBLAS_IDENTIFIER, M: cint, N: cint, K: cint): csize <cimport,nodecl> end
global function cblas_gemm_s8u8s32_pack(Layout: CBLAS_LAYOUT, identifier: CBLAS_IDENTIFIER, Trans: CBLAS_TRANSPOSE, M: cint, N: cint, K: cint, src: pointer, ld: cint, dest: pointer): void <cimport,nodecl> end
global function cblas_gemm_s16s16s32_pack(Layout: CBLAS_LAYOUT, identifier: CBLAS_IDENTIFIER, Trans: CBLAS_TRANSPOSE, M: cint, N: cint, K: cint, src: *cshort, ld: cint, dest: *cshort): void <cimport,nodecl> end
global function cblas_gemm_bf16bf16f32_pack(Layout: CBLAS_LAYOUT, identifier: CBLAS_IDENTIFIER, Trans: CBLAS_TRANSPOSE, M: cint, N: cint, K: cint, src: *cushort, ld: cint, dest: *cushort): void <cimport,nodecl> end
global function cblas_gemm_s8u8s32_compute(Layout: CBLAS_LAYOUT, TransA: cint, TransB: cint, offsetc: CBLAS_OFFSET, M: cint, N: cint, K: cint, alpha: float32, A: pointer, lda: cint, ao: cchar, B: pointer, ldb: cint, bo: cchar, beta: float32, C: *cint, ldc: cint, co: *cint): void <cimport,nodecl> end
global function cblas_gemm_s16s16s32_compute(Layout: CBLAS_LAYOUT, TransA: cint, TransB: cint, offsetc: CBLAS_OFFSET, M: cint, N: cint, K: cint, alpha: float32, A: *cshort, lda: cint, ao: cshort, B: *cshort, ldb: cint, bo: cshort, beta: float32, C: *cint, ldc: cint, co: *cint): void <cimport,nodecl> end
global function cblas_gemm_bf16bf16f32_compute(Layout: CBLAS_LAYOUT, TransA: cint, TransB: cint, M: cint, N: cint, K: cint, alpha: float32, A: *cushort, lda: cint, B: *cushort, ldb: cint, beta: float32, C: *float32, ldc: cint): void <cimport,nodecl> end
global function mkl_cblas_jit_create_dgemm(jitter: *pointer, layout: MKL_LAYOUT, transa: MKL_TRANSPOSE, transb: MKL_TRANSPOSE, m: cint, n: cint, k: cint, alpha: float64, lda: cint, ldb: cint, beta: float64, ldc: cint): mkl_jit_status_t <cimport,nodecl> end
global function mkl_cblas_jit_create_sgemm(jitter: *pointer, layout: MKL_LAYOUT, transa: MKL_TRANSPOSE, transb: MKL_TRANSPOSE, m: cint, n: cint, k: cint, alpha: float32, lda: cint, ldb: cint, beta: float32, ldc: cint): mkl_jit_status_t <cimport,nodecl> end
global function mkl_cblas_jit_create_cgemm(jitter: *pointer, layout: MKL_LAYOUT, transa: MKL_TRANSPOSE, transb: MKL_TRANSPOSE, m: cint, n: cint, k: cint, alpha: pointer, lda: cint, ldb: cint, beta: pointer, ldc: cint): mkl_jit_status_t <cimport,nodecl> end
global function mkl_cblas_jit_create_zgemm(jitter: *pointer, layout: MKL_LAYOUT, transa: MKL_TRANSPOSE, transb: MKL_TRANSPOSE, m: cint, n: cint, k: cint, alpha: pointer, lda: cint, ldb: cint, beta: pointer, ldc: cint): mkl_jit_status_t <cimport,nodecl> end
global function mkl_jit_get_dgemm_ptr(jitter: pointer): function(a1: pointer, a2: *float64, a3: *float64, a4: *float64): void <cimport,nodecl> end
global function mkl_jit_get_sgemm_ptr(jitter: pointer): function(a1: pointer, a2: *float32, a3: *float32, a4: *float32): void <cimport,nodecl> end
global function mkl_jit_get_cgemm_ptr(jitter: pointer): function(a1: pointer, a2: *MKL_Complex8, a3: *MKL_Complex8, a4: *MKL_Complex8): void <cimport,nodecl> end
global function mkl_jit_get_zgemm_ptr(jitter: pointer): function(a1: pointer, a2: *MKL_Complex16, a3: *MKL_Complex16, a4: *MKL_Complex16): void <cimport,nodecl> end
global function mkl_jit_destroy(jitter: pointer): mkl_jit_status_t <cimport,nodecl> end
global function cblas_saxpy_batch(n: *cint, alpha: *float32, x: **float32, incx: *cint, y: **float32, incy: *cint, group_count: cint, group_size: *cint): void <cimport,nodecl> end
global function cblas_daxpy_batch(n: *cint, alpha: *float64, x: **float64, incx: *cint, y: **float64, incy: *cint, group_count: cint, group_size: *cint): void <cimport,nodecl> end
global function cblas_caxpy_batch(n: *cint, alpha: pointer, x: *pointer, incx: *cint, y: *pointer, incy: *cint, group_count: cint, group_size: *cint): void <cimport,nodecl> end
global function cblas_zaxpy_batch(n: *cint, alpha: pointer, x: *pointer, incx: *cint, y: *pointer, incy: *cint, group_count: cint, group_size: *cint): void <cimport,nodecl> end
global function cblas_saxpy_batch_strided(N: cint, alpha: float32, X: *float32, incX: cint, stridex: cint, Y: *float32, incY: cint, stridey: cint, batch_size: cint): void <cimport,nodecl> end
global function cblas_daxpy_batch_strided(N: cint, alpha: float64, X: *float64, incX: cint, stridex: cint, Y: *float64, incY: cint, stridey: cint, batch_size: cint): void <cimport,nodecl> end
global function cblas_caxpy_batch_strided(N: cint, alpha: pointer, X: pointer, incX: cint, stridex: cint, Y: pointer, incY: cint, stridey: cint, batch_size: cint): void <cimport,nodecl> end
global function cblas_zaxpy_batch_strided(N: cint, alpha: pointer, X: pointer, incX: cint, stridex: cint, Y: pointer, incY: cint, stridey: cint, batch_size: cint): void <cimport,nodecl> end
global function mkl_scsrmv(transa: cstring, m: *cint, k: *cint, alpha: *float32, matdescra: cstring, val: *float32, indx: *cint, pntrb: *cint, pntre: *cint, x: *float32, beta: *float32, y: *float32): void <cimport,nodecl> end
global function mkl_scsrsv(transa: cstring, m: *cint, alpha: *float32, matdescra: cstring, val: *float32, indx: *cint, pntrb: *cint, pntre: *cint, x: *float32, y: *float32): void <cimport,nodecl> end
global function mkl_scsrgemv(transa: cstring, m: *cint, a: *float32, ia: *cint, ja: *cint, x: *float32, y: *float32): void <cimport,nodecl> end
global function mkl_cspblas_scsrgemv(transa: cstring, m: *cint, a: *float32, ia: *cint, ja: *cint, x: *float32, y: *float32): void <cimport,nodecl> end
global function mkl_scsrsymv(uplo: cstring, m: *cint, a: *float32, ia: *cint, ja: *cint, x: *float32, y: *float32): void <cimport,nodecl> end
global function mkl_cspblas_scsrsymv(uplo: cstring, m: *cint, a: *float32, ia: *cint, ja: *cint, x: *float32, y: *float32): void <cimport,nodecl> end
global function mkl_scsrtrsv(uplo: cstring, transa: cstring, diag: cstring, m: *cint, a: *float32, ia: *cint, ja: *cint, x: *float32, y: *float32): void <cimport,nodecl> end
global function mkl_cspblas_scsrtrsv(uplo: cstring, transa: cstring, diag: cstring, m: *cint, a: *float32, ia: *cint, ja: *cint, x: *float32, y: *float32): void <cimport,nodecl> end
global function mkl_scscmv(transa: cstring, m: *cint, k: *cint, alpha: *float32, matdescra: cstring, val: *float32, indx: *cint, pntrb: *cint, pntre: *cint, x: *float32, beta: *float32, y: *float32): void <cimport,nodecl> end
global function mkl_scscsv(transa: cstring, m: *cint, alpha: *float32, matdescra: cstring, val: *float32, indx: *cint, pntrb: *cint, pntre: *cint, x: *float32, y: *float32): void <cimport,nodecl> end
global function mkl_scoomv(transa: cstring, m: *cint, k: *cint, alpha: *float32, matdescra: cstring, val: *float32, rowind: *cint, colind: *cint, nnz: *cint, x: *float32, beta: *float32, y: *float32): void <cimport,nodecl> end
global function mkl_scoosv(transa: cstring, m: *cint, alpha: *float32, matdescra: cstring, val: *float32, rowind: *cint, colind: *cint, nnz: *cint, x: *float32, y: *float32): void <cimport,nodecl> end
global function mkl_scoogemv(transa: cstring, m: *cint, val: *float32, rowind: *cint, colind: *cint, nnz: *cint, x: *float32, y: *float32): void <cimport,nodecl> end
global function mkl_cspblas_scoogemv(transa: cstring, m: *cint, val: *float32, rowind: *cint, colind: *cint, nnz: *cint, x: *float32, y: *float32): void <cimport,nodecl> end
global function mkl_scoosymv(uplo: cstring, m: *cint, val: *float32, rowind: *cint, colind: *cint, nnz: *cint, x: *float32, y: *float32): void <cimport,nodecl> end
global function mkl_cspblas_scoosymv(uplo: cstring, m: *cint, val: *float32, rowind: *cint, colind: *cint, nnz: *cint, x: *float32, y: *float32): void <cimport,nodecl> end
global function mkl_scootrsv(uplo: cstring, transa: cstring, diag: cstring, m: *cint, val: *float32, rowind: *cint, colind: *cint, nnz: *cint, x: *float32, y: *float32): void <cimport,nodecl> end
global function mkl_cspblas_scootrsv(uplo: cstring, transa: cstring, diag: cstring, m: *cint, val: *float32, rowind: *cint, colind: *cint, nnz: *cint, x: *float32, y: *float32): void <cimport,nodecl> end
global function mkl_sdiamv(transa: cstring, m: *cint, k: *cint, alpha: *float32, matdescra: cstring, val: *float32, lval: *cint, idiag: *cint, ndiag: *cint, x: *float32, beta: *float32, y: *float32): void <cimport,nodecl> end
global function mkl_sdiasv(transa: cstring, m: *cint, alpha: *float32, matdescra: cstring, val: *float32, lval: *cint, idiag: *cint, ndiag: *cint, x: *float32, y: *float32): void <cimport,nodecl> end
global function mkl_sdiagemv(transa: cstring, m: *cint, val: *float32, lval: *cint, idiag: *cint, ndiag: *cint, x: *float32, y: *float32): void <cimport,nodecl> end
global function mkl_sdiasymv(uplo: cstring, m: *cint, val: *float32, lval: *cint, idiag: *cint, ndiag: *cint, x: *float32, y: *float32): void <cimport,nodecl> end
global function mkl_sdiatrsv(uplo: cstring, transa: cstring, diag: cstring, m: *cint, val: *float32, lval: *cint, idiag: *cint, ndiag: *cint, x: *float32, y: *float32): void <cimport,nodecl> end
global function mkl_sskymv(transa: cstring, m: *cint, k: *cint, alpha: *float32, matdescra: cstring, val: *float32, pntr: *cint, x: *float32, beta: *float32, y: *float32): void <cimport,nodecl> end
global function mkl_sskysv(transa: cstring, m: *cint, alpha: *float32, matdescra: cstring, val: *float32, pntr: *cint, x: *float32, y: *float32): void <cimport,nodecl> end
global function mkl_sbsrmv(transa: cstring, m: *cint, k: *cint, lb: *cint, alpha: *float32, matdescra: cstring, val: *float32, indx: *cint, pntrb: *cint, pntre: *cint, x: *float32, beta: *float32, y: *float32): void <cimport,nodecl> end
global function mkl_sbsrsv(transa: cstring, m: *cint, lb: *cint, alpha: *float32, matdescra: cstring, val: *float32, indx: *cint, pntrb: *cint, pntre: *cint, x: *float32, y: *float32): void <cimport,nodecl> end
global function mkl_sbsrgemv(transa: cstring, m: *cint, lb: *cint, a: *float32, ia: *cint, ja: *cint, x: *float32, y: *float32): void <cimport,nodecl> end
global function mkl_cspblas_sbsrgemv(transa: cstring, m: *cint, lb: *cint, a: *float32, ia: *cint, ja: *cint, x: *float32, y: *float32): void <cimport,nodecl> end
global function mkl_sbsrsymv(uplo: cstring, m: *cint, lb: *cint, a: *float32, ia: *cint, ja: *cint, x: *float32, y: *float32): void <cimport,nodecl> end
global function mkl_cspblas_sbsrsymv(uplo: cstring, m: *cint, lb: *cint, a: *float32, ia: *cint, ja: *cint, x: *float32, y: *float32): void <cimport,nodecl> end
global function mkl_sbsrtrsv(uplo: cstring, transa: cstring, diag: cstring, m: *cint, lb: *cint, a: *float32, ia: *cint, ja: *cint, x: *float32, y: *float32): void <cimport,nodecl> end
global function mkl_cspblas_sbsrtrsv(uplo: cstring, transa: cstring, diag: cstring, m: *cint, lb: *cint, a: *float32, ia: *cint, ja: *cint, x: *float32, y: *float32): void <cimport,nodecl> end
global function mkl_scsrmm(transa: cstring, m: *cint, n: *cint, k: *cint, alpha: *float32, matdescra: cstring, val: *float32, indx: *cint, pntrb: *cint, pntre: *cint, b: *float32, ldb: *cint, beta: *float32, c: *float32, ldc: *cint): void <cimport,nodecl> end
global function mkl_scsrsm(transa: cstring, m: *cint, n: *cint, alpha: *float32, matdescra: cstring, val: *float32, indx: *cint, pntrb: *cint, pntre: *cint, b: *float32, ldb: *cint, c: *float32, ldc: *cint): void <cimport,nodecl> end
global function mkl_scscmm(transa: cstring, m: *cint, n: *cint, k: *cint, alpha: *float32, matdescra: cstring, val: *float32, indx: *cint, pntrb: *cint, pntre: *cint, b: *float32, ldb: *cint, beta: *float32, c: *float32, ldc: *cint): void <cimport,nodecl> end
global function mkl_scscsm(transa: cstring, m: *cint, n: *cint, alpha: *float32, matdescra: cstring, val: *float32, indx: *cint, pntrb: *cint, pntre: *cint, b: *float32, ldb: *cint, c: *float32, ldc: *cint): void <cimport,nodecl> end
global function mkl_scoomm(transa: cstring, m: *cint, n: *cint, k: *cint, alpha: *float32, matdescra: cstring, val: *float32, rowind: *cint, colind: *cint, nnz: *cint, b: *float32, ldb: *cint, beta: *float32, c: *float32, ldc: *cint): void <cimport,nodecl> end
global function mkl_scoosm(transa: cstring, m: *cint, n: *cint, alpha: *float32, matdescra: cstring, val: *float32, rowind: *cint, colind: *cint, nnz: *cint, b: *float32, ldb: *cint, c: *float32, ldc: *cint): void <cimport,nodecl> end
global function mkl_sdiamm(transa: cstring, m: *cint, n: *cint, k: *cint, alpha: *float32, matdescra: cstring, val: *float32, lval: *cint, idiag: *cint, ndiag: *cint, b: *float32, ldb: *cint, beta: *float32, c: *float32, ldc: *cint): void <cimport,nodecl> end
global function mkl_sdiasm(transa: cstring, m: *cint, n: *cint, alpha: *float32, matdescra: cstring, val: *float32, lval: *cint, idiag: *cint, ndiag: *cint, b: *float32, ldb: *cint, c: *float32, ldc: *cint): void <cimport,nodecl> end
global function mkl_sskysm(transa: cstring, m: *cint, n: *cint, alpha: *float32, matdescra: cstring, val: *float32, pntr: *cint, b: *float32, ldb: *cint, c: *float32, ldc: *cint): void <cimport,nodecl> end
global function mkl_sskymm(transa: cstring, m: *cint, n: *cint, k: *cint, alpha: *float32, matdescra: cstring, val: *float32, pntr: *cint, b: *float32, ldb: *cint, beta: *float32, c: *float32, ldc: *cint): void <cimport,nodecl> end
global function mkl_sbsrmm(transa: cstring, m: *cint, n: *cint, k: *cint, lb: *cint, alpha: *float32, matdescra: cstring, val: *float32, indx: *cint, pntrb: *cint, pntre: *cint, b: *float32, ldb: *cint, beta: *float32, c: *float32, ldc: *cint): void <cimport,nodecl> end
global function mkl_sbsrsm(transa: cstring, m: *cint, n: *cint, lb: *cint, alpha: *float32, matdescra: cstring, val: *float32, indx: *cint, pntrb: *cint, pntre: *cint, b: *float32, ldb: *cint, c: *float32, ldc: *cint): void <cimport,nodecl> end
global function MKL_SCSRMV(transa: cstring, m: *cint, k: *cint, alpha: *float32, matdescra: cstring, val: *float32, indx: *cint, pntrb: *cint, pntre: *cint, x: *float32, beta: *float32, y: *float32): void <cimport,nodecl> end
global function MKL_SCSRSV(transa: cstring, m: *cint, alpha: *float32, matdescra: cstring, val: *float32, indx: *cint, pntrb: *cint, pntre: *cint, x: *float32, y: *float32): void <cimport,nodecl> end
global function MKL_SCSRGEMV(transa: cstring, m: *cint, a: *float32, ia: *cint, ja: *cint, x: *float32, y: *float32): void <cimport,nodecl> end
global function MKL_CSPBLAS_SCSRGEMV(transa: cstring, m: *cint, a: *float32, ia: *cint, ja: *cint, x: *float32, y: *float32): void <cimport,nodecl> end
global function MKL_SCSRSYMV(uplo: cstring, m: *cint, a: *float32, ia: *cint, ja: *cint, x: *float32, y: *float32): void <cimport,nodecl> end
global function MKL_CSPBLAS_SCSRSYMV(uplo: cstring, m: *cint, a: *float32, ia: *cint, ja: *cint, x: *float32, y: *float32): void <cimport,nodecl> end
global function MKL_SCSRTRSV(uplo: cstring, transa: cstring, diag: cstring, m: *cint, a: *float32, ia: *cint, ja: *cint, x: *float32, y: *float32): void <cimport,nodecl> end
global function MKL_CSPBLAS_SCSRTRSV(uplo: cstring, transa: cstring, diag: cstring, m: *cint, a: *float32, ia: *cint, ja: *cint, x: *float32, y: *float32): void <cimport,nodecl> end
global function MKL_SCSCMV(transa: cstring, m: *cint, k: *cint, alpha: *float32, matdescra: cstring, val: *float32, indx: *cint, pntrb: *cint, pntre: *cint, x: *float32, beta: *float32, y: *float32): void <cimport,nodecl> end
global function MKL_SCSCSV(transa: cstring, m: *cint, alpha: *float32, matdescra: cstring, val: *float32, indx: *cint, pntrb: *cint, pntre: *cint, x: *float32, y: *float32): void <cimport,nodecl> end
global function MKL_SCOOMV(transa: cstring, m: *cint, k: *cint, alpha: *float32, matdescra: cstring, val: *float32, rowind: *cint, colind: *cint, nnz: *cint, x: *float32, beta: *float32, y: *float32): void <cimport,nodecl> end
global function MKL_SCOOSV(transa: cstring, m: *cint, alpha: *float32, matdescra: cstring, val: *float32, rowind: *cint, colind: *cint, nnz: *cint, x: *float32, y: *float32): void <cimport,nodecl> end
global function MKL_SCOOGEMV(transa: cstring, m: *cint, val: *float32, rowind: *cint, colind: *cint, nnz: *cint, x: *float32, y: *float32): void <cimport,nodecl> end
global function MKL_CSPBLAS_SCOOGEMV(transa: cstring, m: *cint, val: *float32, rowind: *cint, colind: *cint, nnz: *cint, x: *float32, y: *float32): void <cimport,nodecl> end
global function MKL_SCOOSYMV(uplo: cstring, m: *cint, val: *float32, rowind: *cint, colind: *cint, nnz: *cint, x: *float32, y: *float32): void <cimport,nodecl> end
global function MKL_CSPBLAS_SCOOSYMV(uplo: cstring, m: *cint, val: *float32, rowind: *cint, colind: *cint, nnz: *cint, x: *float32, y: *float32): void <cimport,nodecl> end
global function MKL_SCOOTRSV(uplo: cstring, transa: cstring, diag: cstring, m: *cint, val: *float32, rowind: *cint, colind: *cint, nnz: *cint, x: *float32, y: *float32): void <cimport,nodecl> end
global function MKL_CSPBLAS_SCOOTRSV(uplo: cstring, transa: cstring, diag: cstring, m: *cint, val: *float32, rowind: *cint, colind: *cint, nnz: *cint, x: *float32, y: *float32): void <cimport,nodecl> end
global function MKL_SDIAMV(transa: cstring, m: *cint, k: *cint, alpha: *float32, matdescra: cstring, val: *float32, lval: *cint, idiag: *cint, ndiag: *cint, x: *float32, beta: *float32, y: *float32): void <cimport,nodecl> end
global function MKL_SDIASV(transa: cstring, m: *cint, alpha: *float32, matdescra: cstring, val: *float32, lval: *cint, idiag: *cint, ndiag: *cint, x: *float32, y: *float32): void <cimport,nodecl> end
global function MKL_SDIAGEMV(transa: cstring, m: *cint, val: *float32, lval: *cint, idiag: *cint, ndiag: *cint, x: *float32, y: *float32): void <cimport,nodecl> end
global function MKL_SDIASYMV(uplo: cstring, m: *cint, val: *float32, lval: *cint, idiag: *cint, ndiag: *cint, x: *float32, y: *float32): void <cimport,nodecl> end
global function MKL_SDIATRSV(uplo: cstring, transa: cstring, diag: cstring, m: *cint, val: *float32, lval: *cint, idiag: *cint, ndiag: *cint, x: *float32, y: *float32): void <cimport,nodecl> end
global function MKL_SSKYMV(transa: cstring, m: *cint, k: *cint, alpha: *float32, matdescra: cstring, val: *float32, pntr: *cint, x: *float32, beta: *float32, y: *float32): void <cimport,nodecl> end
global function MKL_SSKYSV(transa: cstring, m: *cint, alpha: *float32, matdescra: cstring, val: *float32, pntr: *cint, x: *float32, y: *float32): void <cimport,nodecl> end
global function MKL_SBSRMV(transa: cstring, m: *cint, k: *cint, lb: *cint, alpha: *float32, matdescra: cstring, val: *float32, indx: *cint, pntrb: *cint, pntre: *cint, x: *float32, beta: *float32, y: *float32): void <cimport,nodecl> end
global function MKL_SBSRSV(transa: cstring, m: *cint, lb: *cint, alpha: *float32, matdescra: cstring, val: *float32, indx: *cint, pntrb: *cint, pntre: *cint, x: *float32, y: *float32): void <cimport,nodecl> end
global function MKL_SBSRGEMV(transa: cstring, m: *cint, lb: *cint, a: *float32, ia: *cint, ja: *cint, x: *float32, y: *float32): void <cimport,nodecl> end
global function MKL_CSPBLAS_SBSRGEMV(transa: cstring, m: *cint, lb: *cint, a: *float32, ia: *cint, ja: *cint, x: *float32, y: *float32): void <cimport,nodecl> end
global function MKL_SBSRSYMV(uplo: cstring, m: *cint, lb: *cint, a: *float32, ia: *cint, ja: *cint, x: *float32, y: *float32): void <cimport,nodecl> end
global function MKL_CSPBLAS_SBSRSYMV(uplo: cstring, m: *cint, lb: *cint, a: *float32, ia: *cint, ja: *cint, x: *float32, y: *float32): void <cimport,nodecl> end
global function MKL_SBSRTRSV(uplo: cstring, transa: cstring, diag: cstring, m: *cint, lb: *cint, a: *float32, ia: *cint, ja: *cint, x: *float32, y: *float32): void <cimport,nodecl> end
global function MKL_CSPBLAS_SBSRTRSV(uplo: cstring, transa: cstring, diag: cstring, m: *cint, lb: *cint, a: *float32, ia: *cint, ja: *cint, x: *float32, y: *float32): void <cimport,nodecl> end
global function MKL_SCSRMM(transa: cstring, m: *cint, n: *cint, k: *cint, alpha: *float32, matdescra: cstring, val: *float32, indx: *cint, pntrb: *cint, pntre: *cint, b: *float32, ldb: *cint, beta: *float32, c: *float32, ldc: *cint): void <cimport,nodecl> end
global function MKL_SCSRSM(transa: cstring, m: *cint, n: *cint, alpha: *float32, matdescra: cstring, val: *float32, indx: *cint, pntrb: *cint, pntre: *cint, b: *float32, ldb: *cint, c: *float32, ldc: *cint): void <cimport,nodecl> end
global function MKL_SCSCMM(transa: cstring, m: *cint, n: *cint, k: *cint, alpha: *float32, matdescra: cstring, val: *float32, indx: *cint, pntrb: *cint, pntre: *cint, b: *float32, ldb: *cint, beta: *float32, c: *float32, ldc: *cint): void <cimport,nodecl> end
global function MKL_SCSCSM(transa: cstring, m: *cint, n: *cint, alpha: *float32, matdescra: cstring, val: *float32, indx: *cint, pntrb: *cint, pntre: *cint, b: *float32, ldb: *cint, c: *float32, ldc: *cint): void <cimport,nodecl> end
global function MKL_SCOOMM(transa: cstring, m: *cint, n: *cint, k: *cint, alpha: *float32, matdescra: cstring, val: *float32, rowind: *cint, colind: *cint, nnz: *cint, b: *float32, ldb: *cint, beta: *float32, c: *float32, ldc: *cint): void <cimport,nodecl> end
global function MKL_SCOOSM(transa: cstring, m: *cint, n: *cint, alpha: *float32, matdescra: cstring, val: *float32, rowind: *cint, colind: *cint, nnz: *cint, b: *float32, ldb: *cint, c: *float32, ldc: *cint): void <cimport,nodecl> end
global function MKL_SDIAMM(transa: cstring, m: *cint, n: *cint, k: *cint, alpha: *float32, matdescra: cstring, val: *float32, lval: *cint, idiag: *cint, ndiag: *cint, b: *float32, ldb: *cint, beta: *float32, c: *float32, ldc: *cint): void <cimport,nodecl> end
global function MKL_SDIASM(transa: cstring, m: *cint, n: *cint, alpha: *float32, matdescra: cstring, val: *float32, lval: *cint, idiag: *cint, ndiag: *cint, b: *float32, ldb: *cint, c: *float32, ldc: *cint): void <cimport,nodecl> end
global function MKL_SSKYSM(transa: cstring, m: *cint, n: *cint, alpha: *float32, matdescra: cstring, val: *float32, pntr: *cint, b: *float32, ldb: *cint, c: *float32, ldc: *cint): void <cimport,nodecl> end
global function MKL_SSKYMM(transa: cstring, m: *cint, n: *cint, k: *cint, alpha: *float32, matdescra: cstring, val: *float32, pntr: *cint, b: *float32, ldb: *cint, beta: *float32, c: *float32, ldc: *cint): void <cimport,nodecl> end
global function MKL_SBSRMM(transa: cstring, m: *cint, n: *cint, k: *cint, lb: *cint, alpha: *float32, matdescra: cstring, val: *float32, indx: *cint, pntrb: *cint, pntre: *cint, b: *float32, ldb: *cint, beta: *float32, c: *float32, ldc: *cint): void <cimport,nodecl> end
global function MKL_SBSRSM(transa: cstring, m: *cint, n: *cint, lb: *cint, alpha: *float32, matdescra: cstring, val: *float32, indx: *cint, pntrb: *cint, pntre: *cint, b: *float32, ldb: *cint, c: *float32, ldc: *cint): void <cimport,nodecl> end
global function mkl_dcsrmv(transa: cstring, m: *cint, k: *cint, alpha: *float64, matdescra: cstring, val: *float64, indx: *cint, pntrb: *cint, pntre: *cint, x: *float64, beta: *float64, y: *float64): void <cimport,nodecl> end
global function mkl_dcsrsv(transa: cstring, m: *cint, alpha: *float64, matdescra: cstring, val: *float64, indx: *cint, pntrb: *cint, pntre: *cint, x: *float64, y: *float64): void <cimport,nodecl> end
global function mkl_dcsrgemv(transa: cstring, m: *cint, a: *float64, ia: *cint, ja: *cint, x: *float64, y: *float64): void <cimport,nodecl> end
global function mkl_cspblas_dcsrgemv(transa: cstring, m: *cint, a: *float64, ia: *cint, ja: *cint, x: *float64, y: *float64): void <cimport,nodecl> end
global function mkl_dcsrsymv(uplo: cstring, m: *cint, a: *float64, ia: *cint, ja: *cint, x: *float64, y: *float64): void <cimport,nodecl> end
global function mkl_cspblas_dcsrsymv(uplo: cstring, m: *cint, a: *float64, ia: *cint, ja: *cint, x: *float64, y: *float64): void <cimport,nodecl> end
global function mkl_dcsrtrsv(uplo: cstring, transa: cstring, diag: cstring, m: *cint, a: *float64, ia: *cint, ja: *cint, x: *float64, y: *float64): void <cimport,nodecl> end
global function mkl_cspblas_dcsrtrsv(uplo: cstring, transa: cstring, diag: cstring, m: *cint, a: *float64, ia: *cint, ja: *cint, x: *float64, y: *float64): void <cimport,nodecl> end
global function mkl_dcscmv(transa: cstring, m: *cint, k: *cint, alpha: *float64, matdescra: cstring, val: *float64, indx: *cint, pntrb: *cint, pntre: *cint, x: *float64, beta: *float64, y: *float64): void <cimport,nodecl> end
global function mkl_dcscsv(transa: cstring, m: *cint, alpha: *float64, matdescra: cstring, val: *float64, indx: *cint, pntrb: *cint, pntre: *cint, x: *float64, y: *float64): void <cimport,nodecl> end
global function mkl_dcoomv(transa: cstring, m: *cint, k: *cint, alpha: *float64, matdescra: cstring, val: *float64, rowind: *cint, colind: *cint, nnz: *cint, x: *float64, beta: *float64, y: *float64): void <cimport,nodecl> end
global function mkl_dcoosv(transa: cstring, m: *cint, alpha: *float64, matdescra: cstring, val: *float64, rowind: *cint, colind: *cint, nnz: *cint, x: *float64, y: *float64): void <cimport,nodecl> end
global function mkl_dcoogemv(transa: cstring, m: *cint, val: *float64, rowind: *cint, colind: *cint, nnz: *cint, x: *float64, y: *float64): void <cimport,nodecl> end
global function mkl_cspblas_dcoogemv(transa: cstring, m: *cint, val: *float64, rowind: *cint, colind: *cint, nnz: *cint, x: *float64, y: *float64): void <cimport,nodecl> end
global function mkl_dcoosymv(uplo: cstring, m: *cint, val: *float64, rowind: *cint, colind: *cint, nnz: *cint, x: *float64, y: *float64): void <cimport,nodecl> end
global function mkl_cspblas_dcoosymv(uplo: cstring, m: *cint, val: *float64, rowind: *cint, colind: *cint, nnz: *cint, x: *float64, y: *float64): void <cimport,nodecl> end
global function mkl_dcootrsv(uplo: cstring, transa: cstring, diag: cstring, m: *cint, val: *float64, rowind: *cint, colind: *cint, nnz: *cint, x: *float64, y: *float64): void <cimport,nodecl> end
global function mkl_cspblas_dcootrsv(uplo: cstring, transa: cstring, diag: cstring, m: *cint, val: *float64, rowind: *cint, colind: *cint, nnz: *cint, x: *float64, y: *float64): void <cimport,nodecl> end
global function mkl_ddiamv(transa: cstring, m: *cint, k: *cint, alpha: *float64, matdescra: cstring, val: *float64, lval: *cint, idiag: *cint, ndiag: *cint, x: *float64, beta: *float64, y: *float64): void <cimport,nodecl> end
global function mkl_ddiasv(transa: cstring, m: *cint, alpha: *float64, matdescra: cstring, val: *float64, lval: *cint, idiag: *cint, ndiag: *cint, x: *float64, y: *float64): void <cimport,nodecl> end
global function mkl_ddiagemv(transa: cstring, m: *cint, val: *float64, lval: *cint, idiag: *cint, ndiag: *cint, x: *float64, y: *float64): void <cimport,nodecl> end
global function mkl_ddiasymv(uplo: cstring, m: *cint, val: *float64, lval: *cint, idiag: *cint, ndiag: *cint, x: *float64, y: *float64): void <cimport,nodecl> end
global function mkl_ddiatrsv(uplo: cstring, transa: cstring, diag: cstring, m: *cint, val: *float64, lval: *cint, idiag: *cint, ndiag: *cint, x: *float64, y: *float64): void <cimport,nodecl> end
global function mkl_dskymv(transa: cstring, m: *cint, k: *cint, alpha: *float64, matdescra: cstring, val: *float64, pntr: *cint, x: *float64, beta: *float64, y: *float64): void <cimport,nodecl> end
global function mkl_dskysv(transa: cstring, m: *cint, alpha: *float64, matdescra: cstring, val: *float64, pntr: *cint, x: *float64, y: *float64): void <cimport,nodecl> end
global function mkl_dbsrmv(transa: cstring, m: *cint, k: *cint, lb: *cint, alpha: *float64, matdescra: cstring, val: *float64, indx: *cint, pntrb: *cint, pntre: *cint, x: *float64, beta: *float64, y: *float64): void <cimport,nodecl> end
global function mkl_dbsrsv(transa: cstring, m: *cint, lb: *cint, alpha: *float64, matdescra: cstring, val: *float64, indx: *cint, pntrb: *cint, pntre: *cint, x: *float64, y: *float64): void <cimport,nodecl> end
global function mkl_dbsrgemv(transa: cstring, m: *cint, lb: *cint, a: *float64, ia: *cint, ja: *cint, x: *float64, y: *float64): void <cimport,nodecl> end
global function mkl_cspblas_dbsrgemv(transa: cstring, m: *cint, lb: *cint, a: *float64, ia: *cint, ja: *cint, x: *float64, y: *float64): void <cimport,nodecl> end
global function mkl_dbsrsymv(uplo: cstring, m: *cint, lb: *cint, a: *float64, ia: *cint, ja: *cint, x: *float64, y: *float64): void <cimport,nodecl> end
global function mkl_cspblas_dbsrsymv(uplo: cstring, m: *cint, lb: *cint, a: *float64, ia: *cint, ja: *cint, x: *float64, y: *float64): void <cimport,nodecl> end
global function mkl_dbsrtrsv(uplo: cstring, transa: cstring, diag: cstring, m: *cint, lb: *cint, a: *float64, ia: *cint, ja: *cint, x: *float64, y: *float64): void <cimport,nodecl> end
global function mkl_cspblas_dbsrtrsv(uplo: cstring, transa: cstring, diag: cstring, m: *cint, lb: *cint, a: *float64, ia: *cint, ja: *cint, x: *float64, y: *float64): void <cimport,nodecl> end
global function mkl_dcsrmm(transa: cstring, m: *cint, n: *cint, k: *cint, alpha: *float64, matdescra: cstring, val: *float64, indx: *cint, pntrb: *cint, pntre: *cint, b: *float64, ldb: *cint, beta: *float64, c: *float64, ldc: *cint): void <cimport,nodecl> end
global function mkl_dcsrsm(transa: cstring, m: *cint, n: *cint, alpha: *float64, matdescra: cstring, val: *float64, indx: *cint, pntrb: *cint, pntre: *cint, b: *float64, ldb: *cint, c: *float64, ldc: *cint): void <cimport,nodecl> end
global function mkl_dcscmm(transa: cstring, m: *cint, n: *cint, k: *cint, alpha: *float64, matdescra: cstring, val: *float64, indx: *cint, pntrb: *cint, pntre: *cint, b: *float64, ldb: *cint, beta: *float64, c: *float64, ldc: *cint): void <cimport,nodecl> end
global function mkl_dcscsm(transa: cstring, m: *cint, n: *cint, alpha: *float64, matdescra: cstring, val: *float64, indx: *cint, pntrb: *cint, pntre: *cint, b: *float64, ldb: *cint, c: *float64, ldc: *cint): void <cimport,nodecl> end
global function mkl_dcoomm(transa: cstring, m: *cint, n: *cint, k: *cint, alpha: *float64, matdescra: cstring, val: *float64, rowind: *cint, colind: *cint, nnz: *cint, b: *float64, ldb: *cint, beta: *float64, c: *float64, ldc: *cint): void <cimport,nodecl> end
global function mkl_dcoosm(transa: cstring, m: *cint, n: *cint, alpha: *float64, matdescra: cstring, val: *float64, rowind: *cint, colind: *cint, nnz: *cint, b: *float64, ldb: *cint, c: *float64, ldc: *cint): void <cimport,nodecl> end
global function mkl_ddiamm(transa: cstring, m: *cint, n: *cint, k: *cint, alpha: *float64, matdescra: cstring, val: *float64, lval: *cint, idiag: *cint, ndiag: *cint, b: *float64, ldb: *cint, beta: *float64, c: *float64, ldc: *cint): void <cimport,nodecl> end
global function mkl_ddiasm(transa: cstring, m: *cint, n: *cint, alpha: *float64, matdescra: cstring, val: *float64, lval: *cint, idiag: *cint, ndiag: *cint, b: *float64, ldb: *cint, c: *float64, ldc: *cint): void <cimport,nodecl> end
global function mkl_dskysm(transa: cstring, m: *cint, n: *cint, alpha: *float64, matdescra: cstring, val: *float64, pntr: *cint, b: *float64, ldb: *cint, c: *float64, ldc: *cint): void <cimport,nodecl> end
global function mkl_dskymm(transa: cstring, m: *cint, n: *cint, k: *cint, alpha: *float64, matdescra: cstring, val: *float64, pntr: *cint, b: *float64, ldb: *cint, beta: *float64, c: *float64, ldc: *cint): void <cimport,nodecl> end
global function mkl_dbsrmm(transa: cstring, m: *cint, n: *cint, k: *cint, lb: *cint, alpha: *float64, matdescra: cstring, val: *float64, indx: *cint, pntrb: *cint, pntre: *cint, b: *float64, ldb: *cint, beta: *float64, c: *float64, ldc: *cint): void <cimport,nodecl> end
global function mkl_dbsrsm(transa: cstring, m: *cint, n: *cint, lb: *cint, alpha: *float64, matdescra: cstring, val: *float64, indx: *cint, pntrb: *cint, pntre: *cint, b: *float64, ldb: *cint, c: *float64, ldc: *cint): void <cimport,nodecl> end
global function MKL_DCSRMV(transa: cstring, m: *cint, k: *cint, alpha: *float64, matdescra: cstring, val: *float64, indx: *cint, pntrb: *cint, pntre: *cint, x: *float64, beta: *float64, y: *float64): void <cimport,nodecl> end
global function MKL_DCSRSV(transa: cstring, m: *cint, alpha: *float64, matdescra: cstring, val: *float64, indx: *cint, pntrb: *cint, pntre: *cint, x: *float64, y: *float64): void <cimport,nodecl> end
global function MKL_DCSRGEMV(transa: cstring, m: *cint, a: *float64, ia: *cint, ja: *cint, x: *float64, y: *float64): void <cimport,nodecl> end
global function MKL_CSPBLAS_DCSRGEMV(transa: cstring, m: *cint, a: *float64, ia: *cint, ja: *cint, x: *float64, y: *float64): void <cimport,nodecl> end
global function MKL_DCSRSYMV(uplo: cstring, m: *cint, a: *float64, ia: *cint, ja: *cint, x: *float64, y: *float64): void <cimport,nodecl> end
global function MKL_CSPBLAS_DCSRSYMV(uplo: cstring, m: *cint, a: *float64, ia: *cint, ja: *cint, x: *float64, y: *float64): void <cimport,nodecl> end
global function MKL_DCSRTRSV(uplo: cstring, transa: cstring, diag: cstring, m: *cint, a: *float64, ia: *cint, ja: *cint, x: *float64, y: *float64): void <cimport,nodecl> end
global function MKL_CSPBLAS_DCSRTRSV(uplo: cstring, transa: cstring, diag: cstring, m: *cint, a: *float64, ia: *cint, ja: *cint, x: *float64, y: *float64): void <cimport,nodecl> end
global function MKL_DCSCMV(transa: cstring, m: *cint, k: *cint, alpha: *float64, matdescra: cstring, val: *float64, indx: *cint, pntrb: *cint, pntre: *cint, x: *float64, beta: *float64, y: *float64): void <cimport,nodecl> end
global function MKL_DCSCSV(transa: cstring, m: *cint, alpha: *float64, matdescra: cstring, val: *float64, indx: *cint, pntrb: *cint, pntre: *cint, x: *float64, y: *float64): void <cimport,nodecl> end
global function MKL_DCOOMV(transa: cstring, m: *cint, k: *cint, alpha: *float64, matdescra: cstring, val: *float64, rowind: *cint, colind: *cint, nnz: *cint, x: *float64, beta: *float64, y: *float64): void <cimport,nodecl> end
global function MKL_DCOOSV(transa: cstring, m: *cint, alpha: *float64, matdescra: cstring, val: *float64, rowind: *cint, colind: *cint, nnz: *cint, x: *float64, y: *float64): void <cimport,nodecl> end
global function MKL_DCOOGEMV(transa: cstring, m: *cint, val: *float64, rowind: *cint, colind: *cint, nnz: *cint, x: *float64, y: *float64): void <cimport,nodecl> end
global function MKL_CSPBLAS_DCOOGEMV(transa: cstring, m: *cint, val: *float64, rowind: *cint, colind: *cint, nnz: *cint, x: *float64, y: *float64): void <cimport,nodecl> end
global function MKL_DCOOSYMV(uplo: cstring, m: *cint, val: *float64, rowind: *cint, colind: *cint, nnz: *cint, x: *float64, y: *float64): void <cimport,nodecl> end
global function MKL_CSPBLAS_DCOOSYMV(uplo: cstring, m: *cint, val: *float64, rowind: *cint, colind: *cint, nnz: *cint, x: *float64, y: *float64): void <cimport,nodecl> end
global function MKL_DCOOTRSV(uplo: cstring, transa: cstring, diag: cstring, m: *cint, val: *float64, rowind: *cint, colind: *cint, nnz: *cint, x: *float64, y: *float64): void <cimport,nodecl> end
global function MKL_CSPBLAS_DCOOTRSV(uplo: cstring, transa: cstring, diag: cstring, m: *cint, val: *float64, rowind: *cint, colind: *cint, nnz: *cint, x: *float64, y: *float64): void <cimport,nodecl> end
global function MKL_DDIAMV(transa: cstring, m: *cint, k: *cint, alpha: *float64, matdescra: cstring, val: *float64, lval: *cint, idiag: *cint, ndiag: *cint, x: *float64, beta: *float64, y: *float64): void <cimport,nodecl> end
global function MKL_DDIASV(transa: cstring, m: *cint, alpha: *float64, matdescra: cstring, val: *float64, lval: *cint, idiag: *cint, ndiag: *cint, x: *float64, y: *float64): void <cimport,nodecl> end
global function MKL_DDIAGEMV(transa: cstring, m: *cint, val: *float64, lval: *cint, idiag: *cint, ndiag: *cint, x: *float64, y: *float64): void <cimport,nodecl> end
global function MKL_DDIASYMV(uplo: cstring, m: *cint, val: *float64, lval: *cint, idiag: *cint, ndiag: *cint, x: *float64, y: *float64): void <cimport,nodecl> end
global function MKL_DDIATRSV(uplo: cstring, transa: cstring, diag: cstring, m: *cint, val: *float64, lval: *cint, idiag: *cint, ndiag: *cint, x: *float64, y: *float64): void <cimport,nodecl> end
global function MKL_DSKYMV(transa: cstring, m: *cint, k: *cint, alpha: *float64, matdescra: cstring, val: *float64, pntr: *cint, x: *float64, beta: *float64, y: *float64): void <cimport,nodecl> end
global function MKL_DSKYSV(transa: cstring, m: *cint, alpha: *float64, matdescra: cstring, val: *float64, pntr: *cint, x: *float64, y: *float64): void <cimport,nodecl> end
global function MKL_DBSRMV(transa: cstring, m: *cint, k: *cint, lb: *cint, alpha: *float64, matdescra: cstring, val: *float64, indx: *cint, pntrb: *cint, pntre: *cint, x: *float64, beta: *float64, y: *float64): void <cimport,nodecl> end
global function MKL_DBSRSV(transa: cstring, m: *cint, lb: *cint, alpha: *float64, matdescra: cstring, val: *float64, indx: *cint, pntrb: *cint, pntre: *cint, x: *float64, y: *float64): void <cimport,nodecl> end
global function MKL_DBSRGEMV(transa: cstring, m: *cint, lb: *cint, a: *float64, ia: *cint, ja: *cint, x: *float64, y: *float64): void <cimport,nodecl> end
global function MKL_CSPBLAS_DBSRGEMV(transa: cstring, m: *cint, lb: *cint, a: *float64, ia: *cint, ja: *cint, x: *float64, y: *float64): void <cimport,nodecl> end
global function MKL_DBSRSYMV(uplo: cstring, m: *cint, lb: *cint, a: *float64, ia: *cint, ja: *cint, x: *float64, y: *float64): void <cimport,nodecl> end
global function MKL_CSPBLAS_DBSRSYMV(uplo: cstring, m: *cint, lb: *cint, a: *float64, ia: *cint, ja: *cint, x: *float64, y: *float64): void <cimport,nodecl> end
global function MKL_DBSRTRSV(uplo: cstring, transa: cstring, diag: cstring, m: *cint, lb: *cint, a: *float64, ia: *cint, ja: *cint, x: *float64, y: *float64): void <cimport,nodecl> end
global function MKL_CSPBLAS_DBSRTRSV(uplo: cstring, transa: cstring, diag: cstring, m: *cint, lb: *cint, a: *float64, ia: *cint, ja: *cint, x: *float64, y: *float64): void <cimport,nodecl> end
global function MKL_DCSRMM(transa: cstring, m: *cint, n: *cint, k: *cint, alpha: *float64, matdescra: cstring, val: *float64, indx: *cint, pntrb: *cint, pntre: *cint, b: *float64, ldb: *cint, beta: *float64, c: *float64, ldc: *cint): void <cimport,nodecl> end
global function MKL_DCSRSM(transa: cstring, m: *cint, n: *cint, alpha: *float64, matdescra: cstring, val: *float64, indx: *cint, pntrb: *cint, pntre: *cint, b: *float64, ldb: *cint, c: *float64, ldc: *cint): void <cimport,nodecl> end
global function MKL_DCSCMM(transa: cstring, m: *cint, n: *cint, k: *cint, alpha: *float64, matdescra: cstring, val: *float64, indx: *cint, pntrb: *cint, pntre: *cint, b: *float64, ldb: *cint, beta: *float64, c: *float64, ldc: *cint): void <cimport,nodecl> end
global function MKL_DCSCSM(transa: cstring, m: *cint, n: *cint, alpha: *float64, matdescra: cstring, val: *float64, indx: *cint, pntrb: *cint, pntre: *cint, b: *float64, ldb: *cint, c: *float64, ldc: *cint): void <cimport,nodecl> end
global function MKL_DCOOMM(transa: cstring, m: *cint, n: *cint, k: *cint, alpha: *float64, matdescra: cstring, val: *float64, rowind: *cint, colind: *cint, nnz: *cint, b: *float64, ldb: *cint, beta: *float64, c: *float64, ldc: *cint): void <cimport,nodecl> end
global function MKL_DCOOSM(transa: cstring, m: *cint, n: *cint, alpha: *float64, matdescra: cstring, val: *float64, rowind: *cint, colind: *cint, nnz: *cint, b: *float64, ldb: *cint, c: *float64, ldc: *cint): void <cimport,nodecl> end
global function MKL_DDIAMM(transa: cstring, m: *cint, n: *cint, k: *cint, alpha: *float64, matdescra: cstring, val: *float64, lval: *cint, idiag: *cint, ndiag: *cint, b: *float64, ldb: *cint, beta: *float64, c: *float64, ldc: *cint): void <cimport,nodecl> end
global function MKL_DDIASM(transa: cstring, m: *cint, n: *cint, alpha: *float64, matdescra: cstring, val: *float64, lval: *cint, idiag: *cint, ndiag: *cint, b: *float64, ldb: *cint, c: *float64, ldc: *cint): void <cimport,nodecl> end
global function MKL_DSKYSM(transa: cstring, m: *cint, n: *cint, alpha: *float64, matdescra: cstring, val: *float64, pntr: *cint, b: *float64, ldb: *cint, c: *float64, ldc: *cint): void <cimport,nodecl> end
global function MKL_DSKYMM(transa: cstring, m: *cint, n: *cint, k: *cint, alpha: *float64, matdescra: cstring, val: *float64, pntr: *cint, b: *float64, ldb: *cint, beta: *float64, c: *float64, ldc: *cint): void <cimport,nodecl> end
global function MKL_DBSRMM(transa: cstring, m: *cint, n: *cint, k: *cint, lb: *cint, alpha: *float64, matdescra: cstring, val: *float64, indx: *cint, pntrb: *cint, pntre: *cint, b: *float64, ldb: *cint, beta: *float64, c: *float64, ldc: *cint): void <cimport,nodecl> end
global function MKL_DBSRSM(transa: cstring, m: *cint, n: *cint, lb: *cint, alpha: *float64, matdescra: cstring, val: *float64, indx: *cint, pntrb: *cint, pntre: *cint, b: *float64, ldb: *cint, c: *float64, ldc: *cint): void <cimport,nodecl> end
global function mkl_ccsrmv(transa: cstring, m: *cint, k: *cint, alpha: *MKL_Complex8, matdescra: cstring, val: *MKL_Complex8, indx: *cint, pntrb: *cint, pntre: *cint, x: *MKL_Complex8, beta: *MKL_Complex8, y: *MKL_Complex8): void <cimport,nodecl> end
global function mkl_ccsrsv(transa: cstring, m: *cint, alpha: *MKL_Complex8, matdescra: cstring, val: *MKL_Complex8, indx: *cint, pntrb: *cint, pntre: *cint, x: *MKL_Complex8, y: *MKL_Complex8): void <cimport,nodecl> end
global function mkl_ccsrgemv(transa: cstring, m: *cint, a: *MKL_Complex8, ia: *cint, ja: *cint, x: *MKL_Complex8, y: *MKL_Complex8): void <cimport,nodecl> end
global function mkl_cspblas_ccsrgemv(transa: cstring, m: *cint, a: *MKL_Complex8, ia: *cint, ja: *cint, x: *MKL_Complex8, y: *MKL_Complex8): void <cimport,nodecl> end
global function mkl_ccsrsymv(uplo: cstring, m: *cint, a: *MKL_Complex8, ia: *cint, ja: *cint, x: *MKL_Complex8, y: *MKL_Complex8): void <cimport,nodecl> end
global function mkl_cspblas_ccsrsymv(uplo: cstring, m: *cint, a: *MKL_Complex8, ia: *cint, ja: *cint, x: *MKL_Complex8, y: *MKL_Complex8): void <cimport,nodecl> end
global function mkl_ccsrtrsv(uplo: cstring, transa: cstring, diag: cstring, m: *cint, a: *MKL_Complex8, ia: *cint, ja: *cint, x: *MKL_Complex8, y: *MKL_Complex8): void <cimport,nodecl> end
global function mkl_cspblas_ccsrtrsv(uplo: cstring, transa: cstring, diag: cstring, m: *cint, a: *MKL_Complex8, ia: *cint, ja: *cint, x: *MKL_Complex8, y: *MKL_Complex8): void <cimport,nodecl> end
global function mkl_ccscmv(transa: cstring, m: *cint, k: *cint, alpha: *MKL_Complex8, matdescra: cstring, val: *MKL_Complex8, indx: *cint, pntrb: *cint, pntre: *cint, x: *MKL_Complex8, beta: *MKL_Complex8, y: *MKL_Complex8): void <cimport,nodecl> end
global function mkl_ccscsv(transa: cstring, m: *cint, alpha: *MKL_Complex8, matdescra: cstring, val: *MKL_Complex8, indx: *cint, pntrb: *cint, pntre: *cint, x: *MKL_Complex8, y: *MKL_Complex8): void <cimport,nodecl> end
global function mkl_ccoomv(transa: cstring, m: *cint, k: *cint, alpha: *MKL_Complex8, matdescra: cstring, val: *MKL_Complex8, rowind: *cint, colind: *cint, nnz: *cint, x: *MKL_Complex8, beta: *MKL_Complex8, y: *MKL_Complex8): void <cimport,nodecl> end
global function mkl_ccoosv(transa: cstring, m: *cint, alpha: *MKL_Complex8, matdescra: cstring, val: *MKL_Complex8, rowind: *cint, colind: *cint, nnz: *cint, x: *MKL_Complex8, y: *MKL_Complex8): void <cimport,nodecl> end
global function mkl_ccoogemv(transa: cstring, m: *cint, val: *MKL_Complex8, rowind: *cint, colind: *cint, nnz: *cint, x: *MKL_Complex8, y: *MKL_Complex8): void <cimport,nodecl> end
global function mkl_cspblas_ccoogemv(transa: cstring, m: *cint, val: *MKL_Complex8, rowind: *cint, colind: *cint, nnz: *cint, x: *MKL_Complex8, y: *MKL_Complex8): void <cimport,nodecl> end
global function mkl_ccoosymv(uplo: cstring, m: *cint, val: *MKL_Complex8, rowind: *cint, colind: *cint, nnz: *cint, x: *MKL_Complex8, y: *MKL_Complex8): void <cimport,nodecl> end
global function mkl_cspblas_ccoosymv(uplo: cstring, m: *cint, val: *MKL_Complex8, rowind: *cint, colind: *cint, nnz: *cint, x: *MKL_Complex8, y: *MKL_Complex8): void <cimport,nodecl> end
global function mkl_ccootrsv(uplo: cstring, transa: cstring, diag: cstring, m: *cint, val: *MKL_Complex8, rowind: *cint, colind: *cint, nnz: *cint, x: *MKL_Complex8, y: *MKL_Complex8): void <cimport,nodecl> end
global function mkl_cspblas_ccootrsv(uplo: cstring, transa: cstring, diag: cstring, m: *cint, val: *MKL_Complex8, rowind: *cint, colind: *cint, nnz: *cint, x: *MKL_Complex8, y: *MKL_Complex8): void <cimport,nodecl> end
global function mkl_cdiamv(transa: cstring, m: *cint, k: *cint, alpha: *MKL_Complex8, matdescra: cstring, val: *MKL_Complex8, lval: *cint, idiag: *cint, ndiag: *cint, x: *MKL_Complex8, beta: *MKL_Complex8, y: *MKL_Complex8): void <cimport,nodecl> end
global function mkl_cdiasv(transa: cstring, m: *cint, alpha: *MKL_Complex8, matdescra: cstring, val: *MKL_Complex8, lval: *cint, idiag: *cint, ndiag: *cint, x: *MKL_Complex8, y: *MKL_Complex8): void <cimport,nodecl> end
global function mkl_cdiagemv(transa: cstring, m: *cint, val: *MKL_Complex8, lval: *cint, idiag: *cint, ndiag: *cint, x: *MKL_Complex8, y: *MKL_Complex8): void <cimport,nodecl> end
global function mkl_cdiasymv(uplo: cstring, m: *cint, val: *MKL_Complex8, lval: *cint, idiag: *cint, ndiag: *cint, x: *MKL_Complex8, y: *MKL_Complex8): void <cimport,nodecl> end
global function mkl_cdiatrsv(uplo: cstring, transa: cstring, diag: cstring, m: *cint, val: *MKL_Complex8, lval: *cint, idiag: *cint, ndiag: *cint, x: *MKL_Complex8, y: *MKL_Complex8): void <cimport,nodecl> end
global function mkl_cskymv(transa: cstring, m: *cint, k: *cint, alpha: *MKL_Complex8, matdescra: cstring, val: *MKL_Complex8, pntr: *cint, x: *MKL_Complex8, beta: *MKL_Complex8, y: *MKL_Complex8): void <cimport,nodecl> end
global function mkl_cskysv(transa: cstring, m: *cint, alpha: *MKL_Complex8, matdescra: cstring, val: *MKL_Complex8, pntr: *cint, x: *MKL_Complex8, y: *MKL_Complex8): void <cimport,nodecl> end
global function mkl_cbsrmv(transa: cstring, m: *cint, k: *cint, lb: *cint, alpha: *MKL_Complex8, matdescra: cstring, val: *MKL_Complex8, indx: *cint, pntrb: *cint, pntre: *cint, x: *MKL_Complex8, beta: *MKL_Complex8, y: *MKL_Complex8): void <cimport,nodecl> end
global function mkl_cbsrsv(transa: cstring, m: *cint, lb: *cint, alpha: *MKL_Complex8, matdescra: cstring, val: *MKL_Complex8, indx: *cint, pntrb: *cint, pntre: *cint, x: *MKL_Complex8, y: *MKL_Complex8): void <cimport,nodecl> end
global function mkl_cbsrgemv(transa: cstring, m: *cint, lb: *cint, a: *MKL_Complex8, ia: *cint, ja: *cint, x: *MKL_Complex8, y: *MKL_Complex8): void <cimport,nodecl> end
global function mkl_cspblas_cbsrgemv(transa: cstring, m: *cint, lb: *cint, a: *MKL_Complex8, ia: *cint, ja: *cint, x: *MKL_Complex8, y: *MKL_Complex8): void <cimport,nodecl> end
global function mkl_cbsrsymv(uplo: cstring, m: *cint, lb: *cint, a: *MKL_Complex8, ia: *cint, ja: *cint, x: *MKL_Complex8, y: *MKL_Complex8): void <cimport,nodecl> end
global function mkl_cspblas_cbsrsymv(uplo: cstring, m: *cint, lb: *cint, a: *MKL_Complex8, ia: *cint, ja: *cint, x: *MKL_Complex8, y: *MKL_Complex8): void <cimport,nodecl> end
global function mkl_cbsrtrsv(uplo: cstring, transa: cstring, diag: cstring, m: *cint, lb: *cint, a: *MKL_Complex8, ia: *cint, ja: *cint, x: *MKL_Complex8, y: *MKL_Complex8): void <cimport,nodecl> end
global function mkl_cspblas_cbsrtrsv(uplo: cstring, transa: cstring, diag: cstring, m: *cint, lb: *cint, a: *MKL_Complex8, ia: *cint, ja: *cint, x: *MKL_Complex8, y: *MKL_Complex8): void <cimport,nodecl> end
global function mkl_ccsrmm(transa: cstring, m: *cint, n: *cint, k: *cint, alpha: *MKL_Complex8, matdescra: cstring, val: *MKL_Complex8, indx: *cint, pntrb: *cint, pntre: *cint, b: *MKL_Complex8, ldb: *cint, beta: *MKL_Complex8, c: *MKL_Complex8, ldc: *cint): void <cimport,nodecl> end
global function mkl_ccsrsm(transa: cstring, m: *cint, n: *cint, alpha: *MKL_Complex8, matdescra: cstring, val: *MKL_Complex8, indx: *cint, pntrb: *cint, pntre: *cint, b: *MKL_Complex8, ldb: *cint, c: *MKL_Complex8, ldc: *cint): void <cimport,nodecl> end
global function mkl_ccscmm(transa: cstring, m: *cint, n: *cint, k: *cint, alpha: *MKL_Complex8, matdescra: cstring, val: *MKL_Complex8, indx: *cint, pntrb: *cint, pntre: *cint, b: *MKL_Complex8, ldb: *cint, beta: *MKL_Complex8, c: *MKL_Complex8, ldc: *cint): void <cimport,nodecl> end
global function mkl_ccscsm(transa: cstring, m: *cint, n: *cint, alpha: *MKL_Complex8, matdescra: cstring, val: *MKL_Complex8, indx: *cint, pntrb: *cint, pntre: *cint, b: *MKL_Complex8, ldb: *cint, c: *MKL_Complex8, ldc: *cint): void <cimport,nodecl> end
global function mkl_ccoomm(transa: cstring, m: *cint, n: *cint, k: *cint, alpha: *MKL_Complex8, matdescra: cstring, val: *MKL_Complex8, rowind: *cint, colind: *cint, nnz: *cint, b: *MKL_Complex8, ldb: *cint, beta: *MKL_Complex8, c: *MKL_Complex8, ldc: *cint): void <cimport,nodecl> end
global function mkl_ccoosm(transa: cstring, m: *cint, n: *cint, alpha: *MKL_Complex8, matdescra: cstring, val: *MKL_Complex8, rowind: *cint, colind: *cint, nnz: *cint, b: *MKL_Complex8, ldb: *cint, c: *MKL_Complex8, ldc: *cint): void <cimport,nodecl> end
global function mkl_cdiamm(transa: cstring, m: *cint, n: *cint, k: *cint, alpha: *MKL_Complex8, matdescra: cstring, val: *MKL_Complex8, lval: *cint, idiag: *cint, ndiag: *cint, b: *MKL_Complex8, ldb: *cint, beta: *MKL_Complex8, c: *MKL_Complex8, ldc: *cint): void <cimport,nodecl> end
global function mkl_cdiasm(transa: cstring, m: *cint, n: *cint, alpha: *MKL_Complex8, matdescra: cstring, val: *MKL_Complex8, lval: *cint, idiag: *cint, ndiag: *cint, b: *MKL_Complex8, ldb: *cint, c: *MKL_Complex8, ldc: *cint): void <cimport,nodecl> end
global function mkl_cskysm(transa: cstring, m: *cint, n: *cint, alpha: *MKL_Complex8, matdescra: cstring, val: *MKL_Complex8, pntr: *cint, b: *MKL_Complex8, ldb: *cint, c: *MKL_Complex8, ldc: *cint): void <cimport,nodecl> end
global function mkl_cskymm(transa: cstring, m: *cint, n: *cint, k: *cint, alpha: *MKL_Complex8, matdescra: cstring, val: *MKL_Complex8, pntr: *cint, b: *MKL_Complex8, ldb: *cint, beta: *MKL_Complex8, c: *MKL_Complex8, ldc: *cint): void <cimport,nodecl> end
global function mkl_cbsrmm(transa: cstring, m: *cint, n: *cint, k: *cint, lb: *cint, alpha: *MKL_Complex8, matdescra: cstring, val: *MKL_Complex8, indx: *cint, pntrb: *cint, pntre: *cint, b: *MKL_Complex8, ldb: *cint, beta: *MKL_Complex8, c: *MKL_Complex8, ldc: *cint): void <cimport,nodecl> end
global function mkl_cbsrsm(transa: cstring, m: *cint, n: *cint, lb: *cint, alpha: *MKL_Complex8, matdescra: cstring, val: *MKL_Complex8, indx: *cint, pntrb: *cint, pntre: *cint, b: *MKL_Complex8, ldb: *cint, c: *MKL_Complex8, ldc: *cint): void <cimport,nodecl> end
global function MKL_CCSRMV(transa: cstring, m: *cint, k: *cint, alpha: *MKL_Complex8, matdescra: cstring, val: *MKL_Complex8, indx: *cint, pntrb: *cint, pntre: *cint, x: *MKL_Complex8, beta: *MKL_Complex8, y: *MKL_Complex8): void <cimport,nodecl> end
global function MKL_CCSRSV(transa: cstring, m: *cint, alpha: *MKL_Complex8, matdescra: cstring, val: *MKL_Complex8, indx: *cint, pntrb: *cint, pntre: *cint, x: *MKL_Complex8, y: *MKL_Complex8): void <cimport,nodecl> end
global function MKL_CCSRGEMV(transa: cstring, m: *cint, a: *MKL_Complex8, ia: *cint, ja: *cint, x: *MKL_Complex8, y: *MKL_Complex8): void <cimport,nodecl> end
global function MKL_CSPBLAS_CCSRGEMV(transa: cstring, m: *cint, a: *MKL_Complex8, ia: *cint, ja: *cint, x: *MKL_Complex8, y: *MKL_Complex8): void <cimport,nodecl> end
global function MKL_CCSRSYMV(uplo: cstring, m: *cint, a: *MKL_Complex8, ia: *cint, ja: *cint, x: *MKL_Complex8, y: *MKL_Complex8): void <cimport,nodecl> end
global function MKL_CSPBLAS_CCSRSYMV(uplo: cstring, m: *cint, a: *MKL_Complex8, ia: *cint, ja: *cint, x: *MKL_Complex8, y: *MKL_Complex8): void <cimport,nodecl> end
global function MKL_CCSRTRSV(uplo: cstring, transa: cstring, diag: cstring, m: *cint, a: *MKL_Complex8, ia: *cint, ja: *cint, x: *MKL_Complex8, y: *MKL_Complex8): void <cimport,nodecl> end
global function MKL_CSPBLAS_CCSRTRSV(uplo: cstring, transa: cstring, diag: cstring, m: *cint, a: *MKL_Complex8, ia: *cint, ja: *cint, x: *MKL_Complex8, y: *MKL_Complex8): void <cimport,nodecl> end
global function MKL_CCSCMV(transa: cstring, m: *cint, k: *cint, alpha: *MKL_Complex8, matdescra: cstring, val: *MKL_Complex8, indx: *cint, pntrb: *cint, pntre: *cint, x: *MKL_Complex8, beta: *MKL_Complex8, y: *MKL_Complex8): void <cimport,nodecl> end
global function MKL_CCSCSV(transa: cstring, m: *cint, alpha: *MKL_Complex8, matdescra: cstring, val: *MKL_Complex8, indx: *cint, pntrb: *cint, pntre: *cint, x: *MKL_Complex8, y: *MKL_Complex8): void <cimport,nodecl> end
global function MKL_CCOOMV(transa: cstring, m: *cint, k: *cint, alpha: *MKL_Complex8, matdescra: cstring, val: *MKL_Complex8, rowind: *cint, colind: *cint, nnz: *cint, x: *MKL_Complex8, beta: *MKL_Complex8, y: *MKL_Complex8): void <cimport,nodecl> end
global function MKL_CCOOSV(transa: cstring, m: *cint, alpha: *MKL_Complex8, matdescra: cstring, val: *MKL_Complex8, rowind: *cint, colind: *cint, nnz: *cint, x: *MKL_Complex8, y: *MKL_Complex8): void <cimport,nodecl> end
global function MKL_CCOOGEMV(transa: cstring, m: *cint, val: *MKL_Complex8, rowind: *cint, colind: *cint, nnz: *cint, x: *MKL_Complex8, y: *MKL_Complex8): void <cimport,nodecl> end
global function MKL_CSPBLAS_CCOOGEMV(transa: cstring, m: *cint, val: *MKL_Complex8, rowind: *cint, colind: *cint, nnz: *cint, x: *MKL_Complex8, y: *MKL_Complex8): void <cimport,nodecl> end
global function MKL_CCOOSYMV(uplo: cstring, m: *cint, val: *MKL_Complex8, rowind: *cint, colind: *cint, nnz: *cint, x: *MKL_Complex8, y: *MKL_Complex8): void <cimport,nodecl> end
global function MKL_CSPBLAS_CCOOSYMV(uplo: cstring, m: *cint, val: *MKL_Complex8, rowind: *cint, colind: *cint, nnz: *cint, x: *MKL_Complex8, y: *MKL_Complex8): void <cimport,nodecl> end
global function MKL_CCOOTRSV(uplo: cstring, transa: cstring, diag: cstring, m: *cint, val: *MKL_Complex8, rowind: *cint, colind: *cint, nnz: *cint, x: *MKL_Complex8, y: *MKL_Complex8): void <cimport,nodecl> end
global function MKL_CSPBLAS_CCOOTRSV(uplo: cstring, transa: cstring, diag: cstring, m: *cint, val: *MKL_Complex8, rowind: *cint, colind: *cint, nnz: *cint, x: *MKL_Complex8, y: *MKL_Complex8): void <cimport,nodecl> end
global function MKL_CDIAMV(transa: cstring, m: *cint, k: *cint, alpha: *MKL_Complex8, matdescra: cstring, val: *MKL_Complex8, lval: *cint, idiag: *cint, ndiag: *cint, x: *MKL_Complex8, beta: *MKL_Complex8, y: *MKL_Complex8): void <cimport,nodecl> end
global function MKL_CDIASV(transa: cstring, m: *cint, alpha: *MKL_Complex8, matdescra: cstring, val: *MKL_Complex8, lval: *cint, idiag: *cint, ndiag: *cint, x: *MKL_Complex8, y: *MKL_Complex8): void <cimport,nodecl> end
global function MKL_CDIAGEMV(transa: cstring, m: *cint, val: *MKL_Complex8, lval: *cint, idiag: *cint, ndiag: *cint, x: *MKL_Complex8, y: *MKL_Complex8): void <cimport,nodecl> end
global function MKL_CDIASYMV(uplo: cstring, m: *cint, val: *MKL_Complex8, lval: *cint, idiag: *cint, ndiag: *cint, x: *MKL_Complex8, y: *MKL_Complex8): void <cimport,nodecl> end
global function MKL_CDIATRSV(uplo: cstring, transa: cstring, diag: cstring, m: *cint, val: *MKL_Complex8, lval: *cint, idiag: *cint, ndiag: *cint, x: *MKL_Complex8, y: *MKL_Complex8): void <cimport,nodecl> end
global function MKL_CSKYMV(transa: cstring, m: *cint, k: *cint, alpha: *MKL_Complex8, matdescra: cstring, val: *MKL_Complex8, pntr: *cint, x: *MKL_Complex8, beta: *MKL_Complex8, y: *MKL_Complex8): void <cimport,nodecl> end
global function MKL_CSKYSV(transa: cstring, m: *cint, alpha: *MKL_Complex8, matdescra: cstring, val: *MKL_Complex8, pntr: *cint, x: *MKL_Complex8, y: *MKL_Complex8): void <cimport,nodecl> end
global function MKL_CBSRMV(transa: cstring, m: *cint, k: *cint, lb: *cint, alpha: *MKL_Complex8, matdescra: cstring, val: *MKL_Complex8, indx: *cint, pntrb: *cint, pntre: *cint, x: *MKL_Complex8, beta: *MKL_Complex8, y: *MKL_Complex8): void <cimport,nodecl> end
global function MKL_CBSRSV(transa: cstring, m: *cint, lb: *cint, alpha: *MKL_Complex8, matdescra: cstring, val: *MKL_Complex8, indx: *cint, pntrb: *cint, pntre: *cint, x: *MKL_Complex8, y: *MKL_Complex8): void <cimport,nodecl> end
global function MKL_CBSRGEMV(transa: cstring, m: *cint, lb: *cint, a: *MKL_Complex8, ia: *cint, ja: *cint, x: *MKL_Complex8, y: *MKL_Complex8): void <cimport,nodecl> end
global function MKL_CSPBLAS_CBSRGEMV(transa: cstring, m: *cint, lb: *cint, a: *MKL_Complex8, ia: *cint, ja: *cint, x: *MKL_Complex8, y: *MKL_Complex8): void <cimport,nodecl> end
global function MKL_CBSRSYMV(uplo: cstring, m: *cint, lb: *cint, a: *MKL_Complex8, ia: *cint, ja: *cint, x: *MKL_Complex8, y: *MKL_Complex8): void <cimport,nodecl> end
global function MKL_CSPBLAS_CBSRSYMV(uplo: cstring, m: *cint, lb: *cint, a: *MKL_Complex8, ia: *cint, ja: *cint, x: *MKL_Complex8, y: *MKL_Complex8): void <cimport,nodecl> end
global function MKL_CBSRTRSV(uplo: cstring, transa: cstring, diag: cstring, m: *cint, lb: *cint, a: *MKL_Complex8, ia: *cint, ja: *cint, x: *MKL_Complex8, y: *MKL_Complex8): void <cimport,nodecl> end
global function MKL_CSPBLAS_CBSRTRSV(uplo: cstring, transa: cstring, diag: cstring, m: *cint, lb: *cint, a: *MKL_Complex8, ia: *cint, ja: *cint, x: *MKL_Complex8, y: *MKL_Complex8): void <cimport,nodecl> end
global function MKL_CCSRMM(transa: cstring, m: *cint, n: *cint, k: *cint, alpha: *MKL_Complex8, matdescra: cstring, val: *MKL_Complex8, indx: *cint, pntrb: *cint, pntre: *cint, b: *MKL_Complex8, ldb: *cint, beta: *MKL_Complex8, c: *MKL_Complex8, ldc: *cint): void <cimport,nodecl> end
global function MKL_CCSRSM(transa: cstring, m: *cint, n: *cint, alpha: *MKL_Complex8, matdescra: cstring, val: *MKL_Complex8, indx: *cint, pntrb: *cint, pntre: *cint, b: *MKL_Complex8, ldb: *cint, c: *MKL_Complex8, ldc: *cint): void <cimport,nodecl> end
global function MKL_CCSCMM(transa: cstring, m: *cint, n: *cint, k: *cint, alpha: *MKL_Complex8, matdescra: cstring, val: *MKL_Complex8, indx: *cint, pntrb: *cint, pntre: *cint, b: *MKL_Complex8, ldb: *cint, beta: *MKL_Complex8, c: *MKL_Complex8, ldc: *cint): void <cimport,nodecl> end
global function MKL_CCSCSM(transa: cstring, m: *cint, n: *cint, alpha: *MKL_Complex8, matdescra: cstring, val: *MKL_Complex8, indx: *cint, pntrb: *cint, pntre: *cint, b: *MKL_Complex8, ldb: *cint, c: *MKL_Complex8, ldc: *cint): void <cimport,nodecl> end
global function MKL_CCOOMM(transa: cstring, m: *cint, n: *cint, k: *cint, alpha: *MKL_Complex8, matdescra: cstring, val: *MKL_Complex8, rowind: *cint, colind: *cint, nnz: *cint, b: *MKL_Complex8, ldb: *cint, beta: *MKL_Complex8, c: *MKL_Complex8, ldc: *cint): void <cimport,nodecl> end
global function MKL_CCOOSM(transa: cstring, m: *cint, n: *cint, alpha: *MKL_Complex8, matdescra: cstring, val: *MKL_Complex8, rowind: *cint, colind: *cint, nnz: *cint, b: *MKL_Complex8, ldb: *cint, c: *MKL_Complex8, ldc: *cint): void <cimport,nodecl> end
global function MKL_CDIAMM(transa: cstring, m: *cint, n: *cint, k: *cint, alpha: *MKL_Complex8, matdescra: cstring, val: *MKL_Complex8, lval: *cint, idiag: *cint, ndiag: *cint, b: *MKL_Complex8, ldb: *cint, beta: *MKL_Complex8, c: *MKL_Complex8, ldc: *cint): void <cimport,nodecl> end
global function MKL_CDIASM(transa: cstring, m: *cint, n: *cint, alpha: *MKL_Complex8, matdescra: cstring, val: *MKL_Complex8, lval: *cint, idiag: *cint, ndiag: *cint, b: *MKL_Complex8, ldb: *cint, c: *MKL_Complex8, ldc: *cint): void <cimport,nodecl> end
global function MKL_CSKYSM(transa: cstring, m: *cint, n: *cint, alpha: *MKL_Complex8, matdescra: cstring, val: *MKL_Complex8, pntr: *cint, b: *MKL_Complex8, ldb: *cint, c: *MKL_Complex8, ldc: *cint): void <cimport,nodecl> end
global function MKL_CSKYMM(transa: cstring, m: *cint, n: *cint, k: *cint, alpha: *MKL_Complex8, matdescra: cstring, val: *MKL_Complex8, pntr: *cint, b: *MKL_Complex8, ldb: *cint, beta: *MKL_Complex8, c: *MKL_Complex8, ldc: *cint): void <cimport,nodecl> end
global function MKL_CBSRMM(transa: cstring, m: *cint, n: *cint, k: *cint, lb: *cint, alpha: *MKL_Complex8, matdescra: cstring, val: *MKL_Complex8, indx: *cint, pntrb: *cint, pntre: *cint, b: *MKL_Complex8, ldb: *cint, beta: *MKL_Complex8, c: *MKL_Complex8, ldc: *cint): void <cimport,nodecl> end
global function MKL_CBSRSM(transa: cstring, m: *cint, n: *cint, lb: *cint, alpha: *MKL_Complex8, matdescra: cstring, val: *MKL_Complex8, indx: *cint, pntrb: *cint, pntre: *cint, b: *MKL_Complex8, ldb: *cint, c: *MKL_Complex8, ldc: *cint): void <cimport,nodecl> end
global function mkl_zcsrmv(transa: cstring, m: *cint, k: *cint, alpha: *MKL_Complex16, matdescra: cstring, val: *MKL_Complex16, indx: *cint, pntrb: *cint, pntre: *cint, x: *MKL_Complex16, beta: *MKL_Complex16, y: *MKL_Complex16): void <cimport,nodecl> end
global function mkl_zcsrsv(transa: cstring, m: *cint, alpha: *MKL_Complex16, matdescra: cstring, val: *MKL_Complex16, indx: *cint, pntrb: *cint, pntre: *cint, x: *MKL_Complex16, y: *MKL_Complex16): void <cimport,nodecl> end
global function mkl_zcsrgemv(transa: cstring, m: *cint, a: *MKL_Complex16, ia: *cint, ja: *cint, x: *MKL_Complex16, y: *MKL_Complex16): void <cimport,nodecl> end
global function mkl_cspblas_zcsrgemv(transa: cstring, m: *cint, a: *MKL_Complex16, ia: *cint, ja: *cint, x: *MKL_Complex16, y: *MKL_Complex16): void <cimport,nodecl> end
global function mkl_zcsrsymv(uplo: cstring, m: *cint, a: *MKL_Complex16, ia: *cint, ja: *cint, x: *MKL_Complex16, y: *MKL_Complex16): void <cimport,nodecl> end
global function mkl_cspblas_zcsrsymv(uplo: cstring, m: *cint, a: *MKL_Complex16, ia: *cint, ja: *cint, x: *MKL_Complex16, y: *MKL_Complex16): void <cimport,nodecl> end
global function mkl_zcsrtrsv(uplo: cstring, transa: cstring, diag: cstring, m: *cint, a: *MKL_Complex16, ia: *cint, ja: *cint, x: *MKL_Complex16, y: *MKL_Complex16): void <cimport,nodecl> end
global function mkl_cspblas_zcsrtrsv(uplo: cstring, transa: cstring, diag: cstring, m: *cint, a: *MKL_Complex16, ia: *cint, ja: *cint, x: *MKL_Complex16, y: *MKL_Complex16): void <cimport,nodecl> end
global function mkl_zcscmv(transa: cstring, m: *cint, k: *cint, alpha: *MKL_Complex16, matdescra: cstring, val: *MKL_Complex16, indx: *cint, pntrb: *cint, pntre: *cint, x: *MKL_Complex16, beta: *MKL_Complex16, y: *MKL_Complex16): void <cimport,nodecl> end
global function mkl_zcscsv(transa: cstring, m: *cint, alpha: *MKL_Complex16, matdescra: cstring, val: *MKL_Complex16, indx: *cint, pntrb: *cint, pntre: *cint, x: *MKL_Complex16, y: *MKL_Complex16): void <cimport,nodecl> end
global function mkl_zcoomv(transa: cstring, m: *cint, k: *cint, alpha: *MKL_Complex16, matdescra: cstring, val: *MKL_Complex16, rowind: *cint, colind: *cint, nnz: *cint, x: *MKL_Complex16, beta: *MKL_Complex16, y: *MKL_Complex16): void <cimport,nodecl> end
global function mkl_zcoosv(transa: cstring, m: *cint, alpha: *MKL_Complex16, matdescra: cstring, val: *MKL_Complex16, rowind: *cint, colind: *cint, nnz: *cint, x: *MKL_Complex16, y: *MKL_Complex16): void <cimport,nodecl> end
global function mkl_zcoogemv(transa: cstring, m: *cint, val: *MKL_Complex16, rowind: *cint, colind: *cint, nnz: *cint, x: *MKL_Complex16, y: *MKL_Complex16): void <cimport,nodecl> end
global function mkl_cspblas_zcoogemv(transa: cstring, m: *cint, val: *MKL_Complex16, rowind: *cint, colind: *cint, nnz: *cint, x: *MKL_Complex16, y: *MKL_Complex16): void <cimport,nodecl> end
global function mkl_zcoosymv(uplo: cstring, m: *cint, val: *MKL_Complex16, rowind: *cint, colind: *cint, nnz: *cint, x: *MKL_Complex16, y: *MKL_Complex16): void <cimport,nodecl> end
global function mkl_cspblas_zcoosymv(uplo: cstring, m: *cint, val: *MKL_Complex16, rowind: *cint, colind: *cint, nnz: *cint, x: *MKL_Complex16, y: *MKL_Complex16): void <cimport,nodecl> end
global function mkl_zcootrsv(uplo: cstring, transa: cstring, diag: cstring, m: *cint, val: *MKL_Complex16, rowind: *cint, colind: *cint, nnz: *cint, x: *MKL_Complex16, y: *MKL_Complex16): void <cimport,nodecl> end
global function mkl_cspblas_zcootrsv(uplo: cstring, transa: cstring, diag: cstring, m: *cint, val: *MKL_Complex16, rowind: *cint, colind: *cint, nnz: *cint, x: *MKL_Complex16, y: *MKL_Complex16): void <cimport,nodecl> end
global function mkl_zdiamv(transa: cstring, m: *cint, k: *cint, alpha: *MKL_Complex16, matdescra: cstring, val: *MKL_Complex16, lval: *cint, idiag: *cint, ndiag: *cint, x: *MKL_Complex16, beta: *MKL_Complex16, y: *MKL_Complex16): void <cimport,nodecl> end
global function mkl_zdiasv(transa: cstring, m: *cint, alpha: *MKL_Complex16, matdescra: cstring, val: *MKL_Complex16, lval: *cint, idiag: *cint, ndiag: *cint, x: *MKL_Complex16, y: *MKL_Complex16): void <cimport,nodecl> end
global function mkl_zdiagemv(transa: cstring, m: *cint, val: *MKL_Complex16, lval: *cint, idiag: *cint, ndiag: *cint, x: *MKL_Complex16, y: *MKL_Complex16): void <cimport,nodecl> end
global function mkl_zdiasymv(uplo: cstring, m: *cint, val: *MKL_Complex16, lval: *cint, idiag: *cint, ndiag: *cint, x: *MKL_Complex16, y: *MKL_Complex16): void <cimport,nodecl> end
global function mkl_zdiatrsv(uplo: cstring, transa: cstring, diag: cstring, m: *cint, val: *MKL_Complex16, lval: *cint, idiag: *cint, ndiag: *cint, x: *MKL_Complex16, y: *MKL_Complex16): void <cimport,nodecl> end
global function mkl_zskymv(transa: cstring, m: *cint, k: *cint, alpha: *MKL_Complex16, matdescra: cstring, val: *MKL_Complex16, pntr: *cint, x: *MKL_Complex16, beta: *MKL_Complex16, y: *MKL_Complex16): void <cimport,nodecl> end
global function mkl_zskysv(transa: cstring, m: *cint, alpha: *MKL_Complex16, matdescra: cstring, val: *MKL_Complex16, pntr: *cint, x: *MKL_Complex16, y: *MKL_Complex16): void <cimport,nodecl> end
global function mkl_zbsrmv(transa: cstring, m: *cint, k: *cint, lb: *cint, alpha: *MKL_Complex16, matdescra: cstring, val: *MKL_Complex16, indx: *cint, pntrb: *cint, pntre: *cint, x: *MKL_Complex16, beta: *MKL_Complex16, y: *MKL_Complex16): void <cimport,nodecl> end
global function mkl_zbsrsv(transa: cstring, m: *cint, lb: *cint, alpha: *MKL_Complex16, matdescra: cstring, val: *MKL_Complex16, indx: *cint, pntrb: *cint, pntre: *cint, x: *MKL_Complex16, y: *MKL_Complex16): void <cimport,nodecl> end
global function mkl_zbsrgemv(transa: cstring, m: *cint, lb: *cint, a: *MKL_Complex16, ia: *cint, ja: *cint, x: *MKL_Complex16, y: *MKL_Complex16): void <cimport,nodecl> end
global function mkl_cspblas_zbsrgemv(transa: cstring, m: *cint, lb: *cint, a: *MKL_Complex16, ia: *cint, ja: *cint, x: *MKL_Complex16, y: *MKL_Complex16): void <cimport,nodecl> end
global function mkl_zbsrsymv(uplo: cstring, m: *cint, lb: *cint, a: *MKL_Complex16, ia: *cint, ja: *cint, x: *MKL_Complex16, y: *MKL_Complex16): void <cimport,nodecl> end
global function mkl_cspblas_zbsrsymv(uplo: cstring, m: *cint, lb: *cint, a: *MKL_Complex16, ia: *cint, ja: *cint, x: *MKL_Complex16, y: *MKL_Complex16): void <cimport,nodecl> end
global function mkl_zbsrtrsv(uplo: cstring, transa: cstring, diag: cstring, m: *cint, lb: *cint, a: *MKL_Complex16, ia: *cint, ja: *cint, x: *MKL_Complex16, y: *MKL_Complex16): void <cimport,nodecl> end
global function mkl_cspblas_zbsrtrsv(uplo: cstring, transa: cstring, diag: cstring, m: *cint, lb: *cint, a: *MKL_Complex16, ia: *cint, ja: *cint, x: *MKL_Complex16, y: *MKL_Complex16): void <cimport,nodecl> end
global function mkl_zcsrmm(transa: cstring, m: *cint, n: *cint, k: *cint, alpha: *MKL_Complex16, matdescra: cstring, val: *MKL_Complex16, indx: *cint, pntrb: *cint, pntre: *cint, b: *MKL_Complex16, ldb: *cint, beta: *MKL_Complex16, c: *MKL_Complex16, ldc: *cint): void <cimport,nodecl> end
global function mkl_zcsrsm(transa: cstring, m: *cint, n: *cint, alpha: *MKL_Complex16, matdescra: cstring, val: *MKL_Complex16, indx: *cint, pntrb: *cint, pntre: *cint, b: *MKL_Complex16, ldb: *cint, c: *MKL_Complex16, ldc: *cint): void <cimport,nodecl> end
global function mkl_zcscmm(transa: cstring, m: *cint, n: *cint, k: *cint, alpha: *MKL_Complex16, matdescra: cstring, val: *MKL_Complex16, indx: *cint, pntrb: *cint, pntre: *cint, b: *MKL_Complex16, ldb: *cint, beta: *MKL_Complex16, c: *MKL_Complex16, ldc: *cint): void <cimport,nodecl> end
global function mkl_zcscsm(transa: cstring, m: *cint, n: *cint, alpha: *MKL_Complex16, matdescra: cstring, val: *MKL_Complex16, indx: *cint, pntrb: *cint, pntre: *cint, b: *MKL_Complex16, ldb: *cint, c: *MKL_Complex16, ldc: *cint): void <cimport,nodecl> end
global function mkl_zcoomm(transa: cstring, m: *cint, n: *cint, k: *cint, alpha: *MKL_Complex16, matdescra: cstring, val: *MKL_Complex16, rowind: *cint, colind: *cint, nnz: *cint, b: *MKL_Complex16, ldb: *cint, beta: *MKL_Complex16, c: *MKL_Complex16, ldc: *cint): void <cimport,nodecl> end
global function mkl_zcoosm(transa: cstring, m: *cint, n: *cint, alpha: *MKL_Complex16, matdescra: cstring, val: *MKL_Complex16, rowind: *cint, colind: *cint, nnz: *cint, b: *MKL_Complex16, ldb: *cint, c: *MKL_Complex16, ldc: *cint): void <cimport,nodecl> end
global function mkl_zdiamm(transa: cstring, m: *cint, n: *cint, k: *cint, alpha: *MKL_Complex16, matdescra: cstring, val: *MKL_Complex16, lval: *cint, idiag: *cint, ndiag: *cint, b: *MKL_Complex16, ldb: *cint, beta: *MKL_Complex16, c: *MKL_Complex16, ldc: *cint): void <cimport,nodecl> end
global function mkl_zdiasm(transa: cstring, m: *cint, n: *cint, alpha: *MKL_Complex16, matdescra: cstring, val: *MKL_Complex16, lval: *cint, idiag: *cint, ndiag: *cint, b: *MKL_Complex16, ldb: *cint, c: *MKL_Complex16, ldc: *cint): void <cimport,nodecl> end
global function mkl_zskysm(transa: cstring, m: *cint, n: *cint, alpha: *MKL_Complex16, matdescra: cstring, val: *MKL_Complex16, pntr: *cint, b: *MKL_Complex16, ldb: *cint, c: *MKL_Complex16, ldc: *cint): void <cimport,nodecl> end
global function mkl_zskymm(transa: cstring, m: *cint, n: *cint, k: *cint, alpha: *MKL_Complex16, matdescra: cstring, val: *MKL_Complex16, pntr: *cint, b: *MKL_Complex16, ldb: *cint, beta: *MKL_Complex16, c: *MKL_Complex16, ldc: *cint): void <cimport,nodecl> end
global function mkl_zbsrmm(transa: cstring, m: *cint, n: *cint, k: *cint, lb: *cint, alpha: *MKL_Complex16, matdescra: cstring, val: *MKL_Complex16, indx: *cint, pntrb: *cint, pntre: *cint, b: *MKL_Complex16, ldb: *cint, beta: *MKL_Complex16, c: *MKL_Complex16, ldc: *cint): void <cimport,nodecl> end
global function mkl_zbsrsm(transa: cstring, m: *cint, n: *cint, lb: *cint, alpha: *MKL_Complex16, matdescra: cstring, val: *MKL_Complex16, indx: *cint, pntrb: *cint, pntre: *cint, b: *MKL_Complex16, ldb: *cint, c: *MKL_Complex16, ldc: *cint): void <cimport,nodecl> end
global function MKL_ZCSRMV(transa: cstring, m: *cint, k: *cint, alpha: *MKL_Complex16, matdescra: cstring, val: *MKL_Complex16, indx: *cint, pntrb: *cint, pntre: *cint, x: *MKL_Complex16, beta: *MKL_Complex16, y: *MKL_Complex16): void <cimport,nodecl> end
global function MKL_ZCSRSV(transa: cstring, m: *cint, alpha: *MKL_Complex16, matdescra: cstring, val: *MKL_Complex16, indx: *cint, pntrb: *cint, pntre: *cint, x: *MKL_Complex16, y: *MKL_Complex16): void <cimport,nodecl> end
global function MKL_ZCSRGEMV(transa: cstring, m: *cint, a: *MKL_Complex16, ia: *cint, ja: *cint, x: *MKL_Complex16, y: *MKL_Complex16): void <cimport,nodecl> end
global function MKL_CSPBLAS_ZCSRGEMV(transa: cstring, m: *cint, a: *MKL_Complex16, ia: *cint, ja: *cint, x: *MKL_Complex16, y: *MKL_Complex16): void <cimport,nodecl> end
global function MKL_ZCSRSYMV(uplo: cstring, m: *cint, a: *MKL_Complex16, ia: *cint, ja: *cint, x: *MKL_Complex16, y: *MKL_Complex16): void <cimport,nodecl> end
global function MKL_CSPBLAS_ZCSRSYMV(uplo: cstring, m: *cint, a: *MKL_Complex16, ia: *cint, ja: *cint, x: *MKL_Complex16, y: *MKL_Complex16): void <cimport,nodecl> end
global function MKL_ZCSRTRSV(uplo: cstring, transa: cstring, diag: cstring, m: *cint, a: *MKL_Complex16, ia: *cint, ja: *cint, x: *MKL_Complex16, y: *MKL_Complex16): void <cimport,nodecl> end
global function MKL_CSPBLAS_ZCSRTRSV(uplo: cstring, transa: cstring, diag: cstring, m: *cint, a: *MKL_Complex16, ia: *cint, ja: *cint, x: *MKL_Complex16, y: *MKL_Complex16): void <cimport,nodecl> end
global function MKL_ZCSCMV(transa: cstring, m: *cint, k: *cint, alpha: *MKL_Complex16, matdescra: cstring, val: *MKL_Complex16, indx: *cint, pntrb: *cint, pntre: *cint, x: *MKL_Complex16, beta: *MKL_Complex16, y: *MKL_Complex16): void <cimport,nodecl> end
global function MKL_ZCSCSV(transa: cstring, m: *cint, alpha: *MKL_Complex16, matdescra: cstring, val: *MKL_Complex16, indx: *cint, pntrb: *cint, pntre: *cint, x: *MKL_Complex16, y: *MKL_Complex16): void <cimport,nodecl> end
global function MKL_ZCOOMV(transa: cstring, m: *cint, k: *cint, alpha: *MKL_Complex16, matdescra: cstring, val: *MKL_Complex16, rowind: *cint, colind: *cint, nnz: *cint, x: *MKL_Complex16, beta: *MKL_Complex16, y: *MKL_Complex16): void <cimport,nodecl> end
global function MKL_ZCOOSV(transa: cstring, m: *cint, alpha: *MKL_Complex16, matdescra: cstring, val: *MKL_Complex16, rowind: *cint, colind: *cint, nnz: *cint, x: *MKL_Complex16, y: *MKL_Complex16): void <cimport,nodecl> end
global function MKL_ZCOOGEMV(transa: cstring, m: *cint, val: *MKL_Complex16, rowind: *cint, colind: *cint, nnz: *cint, x: *MKL_Complex16, y: *MKL_Complex16): void <cimport,nodecl> end
global function MKL_CSPBLAS_ZCOOGEMV(transa: cstring, m: *cint, val: *MKL_Complex16, rowind: *cint, colind: *cint, nnz: *cint, x: *MKL_Complex16, y: *MKL_Complex16): void <cimport,nodecl> end
global function MKL_ZCOOSYMV(uplo: cstring, m: *cint, val: *MKL_Complex16, rowind: *cint, colind: *cint, nnz: *cint, x: *MKL_Complex16, y: *MKL_Complex16): void <cimport,nodecl> end
global function MKL_CSPBLAS_ZCOOSYMV(uplo: cstring, m: *cint, val: *MKL_Complex16, rowind: *cint, colind: *cint, nnz: *cint, x: *MKL_Complex16, y: *MKL_Complex16): void <cimport,nodecl> end
global function MKL_ZCOOTRSV(uplo: cstring, transa: cstring, diag: cstring, m: *cint, val: *MKL_Complex16, rowind: *cint, colind: *cint, nnz: *cint, x: *MKL_Complex16, y: *MKL_Complex16): void <cimport,nodecl> end
global function MKL_CSPBLAS_ZCOOTRSV(uplo: cstring, transa: cstring, diag: cstring, m: *cint, val: *MKL_Complex16, rowind: *cint, colind: *cint, nnz: *cint, x: *MKL_Complex16, y: *MKL_Complex16): void <cimport,nodecl> end
global function MKL_ZDIAMV(transa: cstring, m: *cint, k: *cint, alpha: *MKL_Complex16, matdescra: cstring, val: *MKL_Complex16, lval: *cint, idiag: *cint, ndiag: *cint, x: *MKL_Complex16, beta: *MKL_Complex16, y: *MKL_Complex16): void <cimport,nodecl> end
global function MKL_ZDIASV(transa: cstring, m: *cint, alpha: *MKL_Complex16, matdescra: cstring, val: *MKL_Complex16, lval: *cint, idiag: *cint, ndiag: *cint, x: *MKL_Complex16, y: *MKL_Complex16): void <cimport,nodecl> end
global function MKL_ZDIAGEMV(transa: cstring, m: *cint, val: *MKL_Complex16, lval: *cint, idiag: *cint, ndiag: *cint, x: *MKL_Complex16, y: *MKL_Complex16): void <cimport,nodecl> end
global function MKL_ZDIASYMV(uplo: cstring, m: *cint, val: *MKL_Complex16, lval: *cint, idiag: *cint, ndiag: *cint, x: *MKL_Complex16, y: *MKL_Complex16): void <cimport,nodecl> end
global function MKL_ZDIATRSV(uplo: cstring, transa: cstring, diag: cstring, m: *cint, val: *MKL_Complex16, lval: *cint, idiag: *cint, ndiag: *cint, x: *MKL_Complex16, y: *MKL_Complex16): void <cimport,nodecl> end
global function MKL_ZSKYMV(transa: cstring, m: *cint, k: *cint, alpha: *MKL_Complex16, matdescra: cstring, val: *MKL_Complex16, pntr: *cint, x: *MKL_Complex16, beta: *MKL_Complex16, y: *MKL_Complex16): void <cimport,nodecl> end
global function MKL_ZSKYSV(transa: cstring, m: *cint, alpha: *MKL_Complex16, matdescra: cstring, val: *MKL_Complex16, pntr: *cint, x: *MKL_Complex16, y: *MKL_Complex16): void <cimport,nodecl> end
global function MKL_ZBSRMV(transa: cstring, m: *cint, k: *cint, lb: *cint, alpha: *MKL_Complex16, matdescra: cstring, val: *MKL_Complex16, indx: *cint, pntrb: *cint, pntre: *cint, x: *MKL_Complex16, beta: *MKL_Complex16, y: *MKL_Complex16): void <cimport,nodecl> end
global function MKL_ZBSRSV(transa: cstring, m: *cint, lb: *cint, alpha: *MKL_Complex16, matdescra: cstring, val: *MKL_Complex16, indx: *cint, pntrb: *cint, pntre: *cint, x: *MKL_Complex16, y: *MKL_Complex16): void <cimport,nodecl> end
global function MKL_ZBSRGEMV(transa: cstring, m: *cint, lb: *cint, a: *MKL_Complex16, ia: *cint, ja: *cint, x: *MKL_Complex16, y: *MKL_Complex16): void <cimport,nodecl> end
global function MKL_CSPBLAS_ZBSRGEMV(transa: cstring, m: *cint, lb: *cint, a: *MKL_Complex16, ia: *cint, ja: *cint, x: *MKL_Complex16, y: *MKL_Complex16): void <cimport,nodecl> end
global function MKL_ZBSRSYMV(uplo: cstring, m: *cint, lb: *cint, a: *MKL_Complex16, ia: *cint, ja: *cint, x: *MKL_Complex16, y: *MKL_Complex16): void <cimport,nodecl> end
global function MKL_CSPBLAS_ZBSRSYMV(uplo: cstring, m: *cint, lb: *cint, a: *MKL_Complex16, ia: *cint, ja: *cint, x: *MKL_Complex16, y: *MKL_Complex16): void <cimport,nodecl> end
global function MKL_ZBSRTRSV(uplo: cstring, transa: cstring, diag: cstring, m: *cint, lb: *cint, a: *MKL_Complex16, ia: *cint, ja: *cint, x: *MKL_Complex16, y: *MKL_Complex16): void <cimport,nodecl> end
global function MKL_CSPBLAS_ZBSRTRSV(uplo: cstring, transa: cstring, diag: cstring, m: *cint, lb: *cint, a: *MKL_Complex16, ia: *cint, ja: *cint, x: *MKL_Complex16, y: *MKL_Complex16): void <cimport,nodecl> end
global function MKL_ZCSRMM(transa: cstring, m: *cint, n: *cint, k: *cint, alpha: *MKL_Complex16, matdescra: cstring, val: *MKL_Complex16, indx: *cint, pntrb: *cint, pntre: *cint, b: *MKL_Complex16, ldb: *cint, beta: *MKL_Complex16, c: *MKL_Complex16, ldc: *cint): void <cimport,nodecl> end
global function MKL_ZCSRSM(transa: cstring, m: *cint, n: *cint, alpha: *MKL_Complex16, matdescra: cstring, val: *MKL_Complex16, indx: *cint, pntrb: *cint, pntre: *cint, b: *MKL_Complex16, ldb: *cint, c: *MKL_Complex16, ldc: *cint): void <cimport,nodecl> end
global function MKL_ZCSCMM(transa: cstring, m: *cint, n: *cint, k: *cint, alpha: *MKL_Complex16, matdescra: cstring, val: *MKL_Complex16, indx: *cint, pntrb: *cint, pntre: *cint, b: *MKL_Complex16, ldb: *cint, beta: *MKL_Complex16, c: *MKL_Complex16, ldc: *cint): void <cimport,nodecl> end
global function MKL_ZCSCSM(transa: cstring, m: *cint, n: *cint, alpha: *MKL_Complex16, matdescra: cstring, val: *MKL_Complex16, indx: *cint, pntrb: *cint, pntre: *cint, b: *MKL_Complex16, ldb: *cint, c: *MKL_Complex16, ldc: *cint): void <cimport,nodecl> end
global function MKL_ZCOOMM(transa: cstring, m: *cint, n: *cint, k: *cint, alpha: *MKL_Complex16, matdescra: cstring, val: *MKL_Complex16, rowind: *cint, colind: *cint, nnz: *cint, b: *MKL_Complex16, ldb: *cint, beta: *MKL_Complex16, c: *MKL_Complex16, ldc: *cint): void <cimport,nodecl> end
global function MKL_ZCOOSM(transa: cstring, m: *cint, n: *cint, alpha: *MKL_Complex16, matdescra: cstring, val: *MKL_Complex16, rowind: *cint, colind: *cint, nnz: *cint, b: *MKL_Complex16, ldb: *cint, c: *MKL_Complex16, ldc: *cint): void <cimport,nodecl> end
global function MKL_ZDIAMM(transa: cstring, m: *cint, n: *cint, k: *cint, alpha: *MKL_Complex16, matdescra: cstring, val: *MKL_Complex16, lval: *cint, idiag: *cint, ndiag: *cint, b: *MKL_Complex16, ldb: *cint, beta: *MKL_Complex16, c: *MKL_Complex16, ldc: *cint): void <cimport,nodecl> end
global function MKL_ZDIASM(transa: cstring, m: *cint, n: *cint, alpha: *MKL_Complex16, matdescra: cstring, val: *MKL_Complex16, lval: *cint, idiag: *cint, ndiag: *cint, b: *MKL_Complex16, ldb: *cint, c: *MKL_Complex16, ldc: *cint): void <cimport,nodecl> end
global function MKL_ZSKYSM(transa: cstring, m: *cint, n: *cint, alpha: *MKL_Complex16, matdescra: cstring, val: *MKL_Complex16, pntr: *cint, b: *MKL_Complex16, ldb: *cint, c: *MKL_Complex16, ldc: *cint): void <cimport,nodecl> end
global function MKL_ZSKYMM(transa: cstring, m: *cint, n: *cint, k: *cint, alpha: *MKL_Complex16, matdescra: cstring, val: *MKL_Complex16, pntr: *cint, b: *MKL_Complex16, ldb: *cint, beta: *MKL_Complex16, c: *MKL_Complex16, ldc: *cint): void <cimport,nodecl> end
global function MKL_ZBSRMM(transa: cstring, m: *cint, n: *cint, k: *cint, lb: *cint, alpha: *MKL_Complex16, matdescra: cstring, val: *MKL_Complex16, indx: *cint, pntrb: *cint, pntre: *cint, b: *MKL_Complex16, ldb: *cint, beta: *MKL_Complex16, c: *MKL_Complex16, ldc: *cint): void <cimport,nodecl> end
global function MKL_ZBSRSM(transa: cstring, m: *cint, n: *cint, lb: *cint, alpha: *MKL_Complex16, matdescra: cstring, val: *MKL_Complex16, indx: *cint, pntrb: *cint, pntre: *cint, b: *MKL_Complex16, ldb: *cint, c: *MKL_Complex16, ldc: *cint): void <cimport,nodecl> end
global function mkl_dcsrbsr(job: *cint, m: *cint, mblk: *cint, ldAbsr: *cint, Acsr: *float64, AJ: *cint, AI: *cint, Absr: *float64, AJB: *cint, AIB: *cint, info: *cint): void <cimport,nodecl> end
global function mkl_dcsrcoo(job: *cint, n: *cint, Acsr: *float64, AJR: *cint, AIR: *cint, nnz: *cint, Acoo: *float64, ir: *cint, jc: *cint, info: *cint): void <cimport,nodecl> end
global function mkl_ddnscsr(job: *cint, m: *cint, n: *cint, Adns: *float64, lda: *cint, Acsr: *float64, AJ: *cint, AI: *cint, info: *cint): void <cimport,nodecl> end
global function mkl_dcsrcsc(job: *cint, n: *cint, Acsr: *float64, AJ0: *cint, AI0: *cint, Acsc: *float64, AJ1: *cint, AI1: *cint, info: *cint): void <cimport,nodecl> end
global function mkl_dcsrdia(job: *cint, n: *cint, Acsr: *float64, AJ0: *cint, AI0: *cint, Adia: *float64, ndiag: *cint, distance: *cint, idiag: *cint, Acsr_rem: *float64, AJ0_rem: *cint, AI0_rem: *cint, info: *cint): void <cimport,nodecl> end
global function mkl_dcsrsky(job: *cint, n: *cint, Acsr: *float64, AJ0: *cint, AI0: *cint, Asky: *float64, pointers: *cint, info: *cint): void <cimport,nodecl> end
global function mkl_scsrbsr(job: *cint, m: *cint, mblk: *cint, ldAbsr: *cint, Acsr: *float32, AJ: *cint, AI: *cint, Absr: *float32, AJB: *cint, AIB: *cint, info: *cint): void <cimport,nodecl> end
global function mkl_scsrcoo(job: *cint, n: *cint, Acsr: *float32, AJR: *cint, AIR: *cint, nnz: *cint, Acoo: *float32, ir: *cint, jc: *cint, info: *cint): void <cimport,nodecl> end
global function mkl_sdnscsr(job: *cint, m: *cint, n: *cint, Adns: *float32, lda: *cint, Acsr: *float32, AJ: *cint, AI: *cint, info: *cint): void <cimport,nodecl> end
global function mkl_scsrcsc(job: *cint, n: *cint, Acsr: *float32, AJ0: *cint, AI0: *cint, Acsc: *float32, AJ1: *cint, AI1: *cint, info: *cint): void <cimport,nodecl> end
global function mkl_scsrdia(job: *cint, n: *cint, Acsr: *float32, AJ0: *cint, AI0: *cint, Adia: *float32, ndiag: *cint, distance: *cint, idiag: *cint, Acsr_rem: *float32, AJ0_rem: *cint, AI0_rem: *cint, info: *cint): void <cimport,nodecl> end
global function mkl_scsrsky(job: *cint, n: *cint, Acsr: *float32, AJ0: *cint, AI0: *cint, Asky: *float32, pointers: *cint, info: *cint): void <cimport,nodecl> end
global function mkl_ccsrbsr(job: *cint, m: *cint, mblk: *cint, ldAbsr: *cint, Acsr: *MKL_Complex8, AJ: *cint, AI: *cint, Absr: *MKL_Complex8, AJB: *cint, AIB: *cint, info: *cint): void <cimport,nodecl> end
global function mkl_ccsrcoo(job: *cint, n: *cint, Acsr: *MKL_Complex8, AJR: *cint, AIR: *cint, nnz: *cint, Acoo: *MKL_Complex8, ir: *cint, jc: *cint, info: *cint): void <cimport,nodecl> end
global function mkl_cdnscsr(job: *cint, m: *cint, n: *cint, Adns: *MKL_Complex8, lda: *cint, Acsr: *MKL_Complex8, AJ: *cint, AI: *cint, info: *cint): void <cimport,nodecl> end
global function mkl_ccsrcsc(job: *cint, n: *cint, Acsr: *MKL_Complex8, AJ0: *cint, AI0: *cint, Acsc: *MKL_Complex8, AJ1: *cint, AI1: *cint, info: *cint): void <cimport,nodecl> end
global function mkl_ccsrdia(job: *cint, n: *cint, Acsr: *MKL_Complex8, AJ0: *cint, AI0: *cint, Adia: *MKL_Complex8, ndiag: *cint, distance: *cint, idiag: *cint, Acsr_rem: *MKL_Complex8, AJ0_rem: *cint, AI0_rem: *cint, info: *cint): void <cimport,nodecl> end
global function mkl_ccsrsky(job: *cint, n: *cint, Acsr: *MKL_Complex8, AJ0: *cint, AI0: *cint, Asky: *MKL_Complex8, pointers: *cint, info: *cint): void <cimport,nodecl> end
global function mkl_zcsrbsr(job: *cint, m: *cint, mblk: *cint, ldAbsr: *cint, Acsr: *MKL_Complex16, AJ: *cint, AI: *cint, Absr: *MKL_Complex16, AJB: *cint, AIB: *cint, info: *cint): void <cimport,nodecl> end
global function mkl_zcsrcoo(job: *cint, n: *cint, Acsr: *MKL_Complex16, AJR: *cint, AIR: *cint, nnz: *cint, Acoo: *MKL_Complex16, ir: *cint, jc: *cint, info: *cint): void <cimport,nodecl> end
global function mkl_zdnscsr(job: *cint, m: *cint, n: *cint, Adns: *MKL_Complex16, lda: *cint, Acsr: *MKL_Complex16, AJ: *cint, AI: *cint, info: *cint): void <cimport,nodecl> end
global function mkl_zcsrcsc(job: *cint, n: *cint, Acsr: *MKL_Complex16, AJ0: *cint, AI0: *cint, Acsc: *MKL_Complex16, AJ1: *cint, AI1: *cint, info: *cint): void <cimport,nodecl> end
global function mkl_zcsrdia(job: *cint, n: *cint, Acsr: *MKL_Complex16, AJ0: *cint, AI0: *cint, Adia: *MKL_Complex16, ndiag: *cint, distance: *cint, idiag: *cint, Acsr_rem: *MKL_Complex16, AJ0_rem: *cint, AI0_rem: *cint, info: *cint): void <cimport,nodecl> end
global function mkl_zcsrsky(job: *cint, n: *cint, Acsr: *MKL_Complex16, AJ0: *cint, AI0: *cint, Asky: *MKL_Complex16, pointers: *cint, info: *cint): void <cimport,nodecl> end
global function MKL_DCSRBSR(job: *cint, m: *cint, mblk: *cint, ldAbsr: *cint, Acsr: *float64, AJ: *cint, AI: *cint, Absr: *float64, AJB: *cint, AIB: *cint, info: *cint): void <cimport,nodecl> end
global function MKL_DCSRCOO(job: *cint, n: *cint, Acsr: *float64, AJR: *cint, AIR: *cint, nnz: *cint, Acoo: *float64, ir: *cint, jc: *cint, info: *cint): void <cimport,nodecl> end
global function MKL_DDNSCSR(job: *cint, m: *cint, n: *cint, Adns: *float64, lda: *cint, Acsr: *float64, AJ: *cint, AI: *cint, info: *cint): void <cimport,nodecl> end
global function MKL_DCSRCSC(job: *cint, n: *cint, Acsr: *float64, AJ0: *cint, AI0: *cint, Acsc: *float64, AJ1: *cint, AI1: *cint, info: *cint): void <cimport,nodecl> end
global function MKL_DCSRDIA(job: *cint, n: *cint, Acsr: *float64, AJ0: *cint, AI0: *cint, Adia: *float64, ndiag: *cint, distance: *cint, idiag: *cint, Acsr_rem: *float64, AJ0_rem: *cint, AI0_rem: *cint, info: *cint): void <cimport,nodecl> end
global function MKL_DCSRSKY(job: *cint, n: *cint, Acsr: *float64, AJ0: *cint, AI0: *cint, Asky: *float64, pointers: *cint, info: *cint): void <cimport,nodecl> end
global function MKL_SCSRBSR(job: *cint, m: *cint, mblk: *cint, ldAbsr: *cint, Acsr: *float32, AJ: *cint, AI: *cint, Absr: *float32, AJB: *cint, AIB: *cint, info: *cint): void <cimport,nodecl> end
global function MKL_SCSRCOO(job: *cint, n: *cint, Acsr: *float32, AJR: *cint, AIR: *cint, nnz: *cint, Acoo: *float32, ir: *cint, jc: *cint, info: *cint): void <cimport,nodecl> end
global function MKL_SDNSCSR(job: *cint, m: *cint, n: *cint, Adns: *float32, lda: *cint, Acsr: *float32, AJ: *cint, AI: *cint, info: *cint): void <cimport,nodecl> end
global function MKL_SCSRCSC(job: *cint, n: *cint, Acsr: *float32, AJ0: *cint, AI0: *cint, Acsc: *float32, AJ1: *cint, AI1: *cint, info: *cint): void <cimport,nodecl> end
global function MKL_SCSRDIA(job: *cint, n: *cint, Acsr: *float32, AJ0: *cint, AI0: *cint, Adia: *float32, ndiag: *cint, distance: *cint, idiag: *cint, Acsr_rem: *float32, AJ0_rem: *cint, AI0_rem: *cint, info: *cint): void <cimport,nodecl> end
global function MKL_SCSRSKY(job: *cint, n: *cint, Acsr: *float32, AJ0: *cint, AI0: *cint, Asky: *float32, pointers: *cint, info: *cint): void <cimport,nodecl> end
global function MKL_CCSRBSR(job: *cint, m: *cint, mblk: *cint, ldAbsr: *cint, Acsr: *MKL_Complex8, AJ: *cint, AI: *cint, Absr: *MKL_Complex8, AJB: *cint, AIB: *cint, info: *cint): void <cimport,nodecl> end
global function MKL_CCSRCOO(job: *cint, n: *cint, Acsr: *MKL_Complex8, AJR: *cint, AIR: *cint, nnz: *cint, Acoo: *MKL_Complex8, ir: *cint, jc: *cint, info: *cint): void <cimport,nodecl> end
global function MKL_CDNSCSR(job: *cint, m: *cint, n: *cint, Adns: *MKL_Complex8, lda: *cint, Acsr: *MKL_Complex8, AJ: *cint, AI: *cint, info: *cint): void <cimport,nodecl> end
global function MKL_CCSRCSC(job: *cint, n: *cint, Acsr: *MKL_Complex8, AJ0: *cint, AI0: *cint, Acsc: *MKL_Complex8, AJ1: *cint, AI1: *cint, info: *cint): void <cimport,nodecl> end
global function MKL_CCSRDIA(job: *cint, n: *cint, Acsr: *MKL_Complex8, AJ0: *cint, AI0: *cint, Adia: *MKL_Complex8, ndiag: *cint, distance: *cint, idiag: *cint, Acsr_rem: *MKL_Complex8, AJ0_rem: *cint, AI0_rem: *cint, info: *cint): void <cimport,nodecl> end
global function MKL_CCSRSKY(job: *cint, n: *cint, Acsr: *MKL_Complex8, AJ0: *cint, AI0: *cint, Asky: *MKL_Complex8, pointers: *cint, info: *cint): void <cimport,nodecl> end
global function MKL_ZCSRBSR(job: *cint, m: *cint, mblk: *cint, ldAbsr: *cint, Acsr: *MKL_Complex16, AJ: *cint, AI: *cint, Absr: *MKL_Complex16, AJB: *cint, AIB: *cint, info: *cint): void <cimport,nodecl> end
global function MKL_ZCSRCOO(job: *cint, n: *cint, Acsr: *MKL_Complex16, AJR: *cint, AIR: *cint, nnz: *cint, Acoo: *MKL_Complex16, ir: *cint, jc: *cint, info: *cint): void <cimport,nodecl> end
global function MKL_ZDNSCSR(job: *cint, m: *cint, n: *cint, Adns: *MKL_Complex16, lda: *cint, Acsr: *MKL_Complex16, AJ: *cint, AI: *cint, info: *cint): void <cimport,nodecl> end
global function MKL_ZCSRCSC(job: *cint, n: *cint, Acsr: *MKL_Complex16, AJ0: *cint, AI0: *cint, Acsc: *MKL_Complex16, AJ1: *cint, AI1: *cint, info: *cint): void <cimport,nodecl> end
global function MKL_ZCSRDIA(job: *cint, n: *cint, Acsr: *MKL_Complex16, AJ0: *cint, AI0: *cint, Adia: *MKL_Complex16, ndiag: *cint, distance: *cint, idiag: *cint, Acsr_rem: *MKL_Complex16, AJ0_rem: *cint, AI0_rem: *cint, info: *cint): void <cimport,nodecl> end
global function MKL_ZCSRSKY(job: *cint, n: *cint, Acsr: *MKL_Complex16, AJ0: *cint, AI0: *cint, Asky: *MKL_Complex16, pointers: *cint, info: *cint): void <cimport,nodecl> end
global function mkl_dcsrmultcsr(transa: cstring, job: *cint, sort: *cint, m: *cint, n: *cint, k: *cint, a: *float64, ja: *cint, ia: *cint, b: *float64, jb: *cint, ib: *cint, c: *float64, jc: *cint, ic: *cint, nnzmax: *cint, ierr: *cint): void <cimport,nodecl> end
global function mkl_dcsrmultd(transa: cstring, m: *cint, n: *cint, k: *cint, a: *float64, ja: *cint, ia: *cint, b: *float64, jb: *cint, ib: *cint, c: *float64, ldc: *cint): void <cimport,nodecl> end
global function mkl_dcsradd(transa: cstring, job: *cint, sort: *cint, m: *cint, n: *cint, a: *float64, ja: *cint, ia: *cint, beta: *float64, b: *float64, jb: *cint, ib: *cint, c: *float64, jc: *cint, ic: *cint, nnzmax: *cint, ierr: *cint): void <cimport,nodecl> end
global function mkl_scsrmultcsr(transa: cstring, job: *cint, sort: *cint, m: *cint, n: *cint, k: *cint, a: *float32, ja: *cint, ia: *cint, b: *float32, jb: *cint, ib: *cint, c: *float32, jc: *cint, ic: *cint, nnzmax: *cint, ierr: *cint): void <cimport,nodecl> end
global function mkl_scsrmultd(transa: cstring, m: *cint, n: *cint, k: *cint, a: *float32, ja: *cint, ia: *cint, b: *float32, jb: *cint, ib: *cint, c: *float32, ldc: *cint): void <cimport,nodecl> end
global function mkl_scsradd(transa: cstring, job: *cint, sort: *cint, m: *cint, n: *cint, a: *float32, ja: *cint, ia: *cint, beta: *float32, b: *float32, jb: *cint, ib: *cint, c: *float32, jc: *cint, ic: *cint, nnzmax: *cint, ierr: *cint): void <cimport,nodecl> end
global function mkl_ccsrmultcsr(transa: cstring, job: *cint, sort: *cint, m: *cint, n: *cint, k: *cint, a: *MKL_Complex8, ja: *cint, ia: *cint, b: *MKL_Complex8, jb: *cint, ib: *cint, c: *MKL_Complex8, jc: *cint, ic: *cint, nnzmax: *cint, ierr: *cint): void <cimport,nodecl> end
global function mkl_ccsrmultd(transa: cstring, m: *cint, n: *cint, k: *cint, a: *MKL_Complex8, ja: *cint, ia: *cint, b: *MKL_Complex8, jb: *cint, ib: *cint, c: *MKL_Complex8, ldc: *cint): void <cimport,nodecl> end
global function mkl_ccsradd(transa: cstring, job: *cint, sort: *cint, m: *cint, n: *cint, a: *MKL_Complex8, ja: *cint, ia: *cint, beta: *MKL_Complex8, b: *MKL_Complex8, jb: *cint, ib: *cint, c: *MKL_Complex8, jc: *cint, ic: *cint, nnzmax: *cint, ierr: *cint): void <cimport,nodecl> end
global function mkl_zcsrmultcsr(transa: cstring, job: *cint, sort: *cint, m: *cint, n: *cint, k: *cint, a: *MKL_Complex16, ja: *cint, ia: *cint, b: *MKL_Complex16, jb: *cint, ib: *cint, c: *MKL_Complex16, jc: *cint, ic: *cint, nnzmax: *cint, ierr: *cint): void <cimport,nodecl> end
global function mkl_zcsrmultd(transa: cstring, m: *cint, n: *cint, k: *cint, a: *MKL_Complex16, ja: *cint, ia: *cint, b: *MKL_Complex16, jb: *cint, ib: *cint, c: *MKL_Complex16, ldc: *cint): void <cimport,nodecl> end
global function mkl_zcsradd(transa: cstring, job: *cint, sort: *cint, m: *cint, n: *cint, a: *MKL_Complex16, ja: *cint, ia: *cint, beta: *MKL_Complex16, b: *MKL_Complex16, jb: *cint, ib: *cint, c: *MKL_Complex16, jc: *cint, ic: *cint, nnzmax: *cint, ierr: *cint): void <cimport,nodecl> end
global function MKL_DCSRMULTCSR(transa: cstring, job: *cint, sort: *cint, m: *cint, n: *cint, k: *cint, a: *float64, ja: *cint, ia: *cint, b: *float64, jb: *cint, ib: *cint, c: *float64, jc: *cint, ic: *cint, nnzmax: *cint, ierr: *cint): void <cimport,nodecl> end
global function MKL_DCSRMULTD(transa: cstring, m: *cint, n: *cint, k: *cint, a: *float64, ja: *cint, ia: *cint, b: *float64, jb: *cint, ib: *cint, c: *float64, ldc: *cint): void <cimport,nodecl> end
global function MKL_DCSRADD(transa: cstring, job: *cint, sort: *cint, m: *cint, n: *cint, a: *float64, ja: *cint, ia: *cint, beta: *float64, b: *float64, jb: *cint, ib: *cint, c: *float64, jc: *cint, ic: *cint, nnzmax: *cint, ierr: *cint): void <cimport,nodecl> end
global function MKL_SCSRMULTCSR(transa: cstring, job: *cint, sort: *cint, m: *cint, n: *cint, k: *cint, a: *float32, ja: *cint, ia: *cint, b: *float32, jb: *cint, ib: *cint, c: *float32, jc: *cint, ic: *cint, nnzmax: *cint, ierr: *cint): void <cimport,nodecl> end
global function MKL_SCSRMULTD(transa: cstring, m: *cint, n: *cint, k: *cint, a: *float32, ja: *cint, ia: *cint, b: *float32, jb: *cint, ib: *cint, c: *float32, ldc: *cint): void <cimport,nodecl> end
global function MKL_SCSRADD(transa: cstring, job: *cint, sort: *cint, m: *cint, n: *cint, a: *float32, ja: *cint, ia: *cint, beta: *float32, b: *float32, jb: *cint, ib: *cint, c: *float32, jc: *cint, ic: *cint, nnzmax: *cint, ierr: *cint): void <cimport,nodecl> end
global function MKL_CCSRMULTCSR(transa: cstring, job: *cint, sort: *cint, m: *cint, n: *cint, k: *cint, a: *MKL_Complex8, ja: *cint, ia: *cint, b: *MKL_Complex8, jb: *cint, ib: *cint, c: *MKL_Complex8, jc: *cint, ic: *cint, nnzmax: *cint, ierr: *cint): void <cimport,nodecl> end
global function MKL_CCSRMULTD(transa: cstring, m: *cint, n: *cint, k: *cint, a: *MKL_Complex8, ja: *cint, ia: *cint, b: *MKL_Complex8, jb: *cint, ib: *cint, c: *MKL_Complex8, ldc: *cint): void <cimport,nodecl> end
global function MKL_CCSRADD(transa: cstring, job: *cint, sort: *cint, m: *cint, n: *cint, a: *MKL_Complex8, ja: *cint, ia: *cint, beta: *MKL_Complex8, b: *MKL_Complex8, jb: *cint, ib: *cint, c: *MKL_Complex8, jc: *cint, ic: *cint, nnzmax: *cint, ierr: *cint): void <cimport,nodecl> end
global function MKL_ZCSRMULTCSR(transa: cstring, job: *cint, sort: *cint, m: *cint, n: *cint, k: *cint, a: *MKL_Complex16, ja: *cint, ia: *cint, b: *MKL_Complex16, jb: *cint, ib: *cint, c: *MKL_Complex16, jc: *cint, ic: *cint, nnzmax: *cint, ierr: *cint): void <cimport,nodecl> end
global function MKL_ZCSRMULTD(transa: cstring, m: *cint, n: *cint, k: *cint, a: *MKL_Complex16, ja: *cint, ia: *cint, b: *MKL_Complex16, jb: *cint, ib: *cint, c: *MKL_Complex16, ldc: *cint): void <cimport,nodecl> end
global function MKL_ZCSRADD(transa: cstring, job: *cint, sort: *cint, m: *cint, n: *cint, a: *MKL_Complex16, ja: *cint, ia: *cint, beta: *MKL_Complex16, b: *MKL_Complex16, jb: *cint, ib: *cint, c: *MKL_Complex16, jc: *cint, ic: *cint, nnzmax: *cint, ierr: *cint): void <cimport,nodecl> end
global function mkl_sparse_s_create_coo(A: **sparse_matrix, indexing: sparse_index_base_t, rows: cint, cols: cint, nnz: cint, row_indx: *cint, col_indx: *cint, values: *float32): sparse_status_t <cimport,nodecl> end
global function mkl_sparse_d_create_coo(A: **sparse_matrix, indexing: sparse_index_base_t, rows: cint, cols: cint, nnz: cint, row_indx: *cint, col_indx: *cint, values: *float64): sparse_status_t <cimport,nodecl> end
global function mkl_sparse_c_create_coo(A: **sparse_matrix, indexing: sparse_index_base_t, rows: cint, cols: cint, nnz: cint, row_indx: *cint, col_indx: *cint, values: *MKL_Complex8): sparse_status_t <cimport,nodecl> end
global function mkl_sparse_z_create_coo(A: **sparse_matrix, indexing: sparse_index_base_t, rows: cint, cols: cint, nnz: cint, row_indx: *cint, col_indx: *cint, values: *MKL_Complex16): sparse_status_t <cimport,nodecl> end
global function mkl_sparse_s_create_csr(A: **sparse_matrix, indexing: sparse_index_base_t, rows: cint, cols: cint, rows_start: *cint, rows_end: *cint, col_indx: *cint, values: *float32): sparse_status_t <cimport,nodecl> end
global function mkl_sparse_d_create_csr(A: **sparse_matrix, indexing: sparse_index_base_t, rows: cint, cols: cint, rows_start: *cint, rows_end: *cint, col_indx: *cint, values: *float64): sparse_status_t <cimport,nodecl> end
global function mkl_sparse_c_create_csr(A: **sparse_matrix, indexing: sparse_index_base_t, rows: cint, cols: cint, rows_start: *cint, rows_end: *cint, col_indx: *cint, values: *MKL_Complex8): sparse_status_t <cimport,nodecl> end
global function mkl_sparse_z_create_csr(A: **sparse_matrix, indexing: sparse_index_base_t, rows: cint, cols: cint, rows_start: *cint, rows_end: *cint, col_indx: *cint, values: *MKL_Complex16): sparse_status_t <cimport,nodecl> end
global function mkl_sparse_s_create_csc(A: **sparse_matrix, indexing: sparse_index_base_t, rows: cint, cols: cint, cols_start: *cint, cols_end: *cint, row_indx: *cint, values: *float32): sparse_status_t <cimport,nodecl> end
global function mkl_sparse_d_create_csc(A: **sparse_matrix, indexing: sparse_index_base_t, rows: cint, cols: cint, cols_start: *cint, cols_end: *cint, row_indx: *cint, values: *float64): sparse_status_t <cimport,nodecl> end
global function mkl_sparse_c_create_csc(A: **sparse_matrix, indexing: sparse_index_base_t, rows: cint, cols: cint, cols_start: *cint, cols_end: *cint, row_indx: *cint, values: *MKL_Complex8): sparse_status_t <cimport,nodecl> end
global function mkl_sparse_z_create_csc(A: **sparse_matrix, indexing: sparse_index_base_t, rows: cint, cols: cint, cols_start: *cint, cols_end: *cint, row_indx: *cint, values: *MKL_Complex16): sparse_status_t <cimport,nodecl> end
global function mkl_sparse_s_create_bsr(A: **sparse_matrix, indexing: sparse_index_base_t, block_layout: sparse_layout_t, rows: cint, cols: cint, block_size: cint, rows_start: *cint, rows_end: *cint, col_indx: *cint, values: *float32): sparse_status_t <cimport,nodecl> end
global function mkl_sparse_d_create_bsr(A: **sparse_matrix, indexing: sparse_index_base_t, block_layout: sparse_layout_t, rows: cint, cols: cint, block_size: cint, rows_start: *cint, rows_end: *cint, col_indx: *cint, values: *float64): sparse_status_t <cimport,nodecl> end
global function mkl_sparse_c_create_bsr(A: **sparse_matrix, indexing: sparse_index_base_t, block_layout: sparse_layout_t, rows: cint, cols: cint, block_size: cint, rows_start: *cint, rows_end: *cint, col_indx: *cint, values: *MKL_Complex8): sparse_status_t <cimport,nodecl> end
global function mkl_sparse_z_create_bsr(A: **sparse_matrix, indexing: sparse_index_base_t, block_layout: sparse_layout_t, rows: cint, cols: cint, block_size: cint, rows_start: *cint, rows_end: *cint, col_indx: *cint, values: *MKL_Complex16): sparse_status_t <cimport,nodecl> end
global function mkl_sparse_copy(source: *sparse_matrix, descr: matrix_descr, dest: **sparse_matrix): sparse_status_t <cimport,nodecl> end
global function mkl_sparse_destroy(A: *sparse_matrix): sparse_status_t <cimport,nodecl> end
global function mkl_sparse_get_error_info(A: *sparse_matrix, info: *cint): sparse_status_t <cimport,nodecl> end
global function mkl_sparse_convert_csr(source: *sparse_matrix, operation: sparse_operation_t, dest: **sparse_matrix): sparse_status_t <cimport,nodecl> end
global function mkl_sparse_convert_bsr(source: *sparse_matrix, block_size: cint, block_layout: sparse_layout_t, operation: sparse_operation_t, dest: **sparse_matrix): sparse_status_t <cimport,nodecl> end
global function mkl_sparse_s_export_bsr(source: *sparse_matrix, indexing: *sparse_index_base_t, block_layout: *sparse_layout_t, rows: *cint, cols: *cint, block_size: *cint, rows_start: **cint, rows_end: **cint, col_indx: **cint, values: **float32): sparse_status_t <cimport,nodecl> end
global function mkl_sparse_d_export_bsr(source: *sparse_matrix, indexing: *sparse_index_base_t, block_layout: *sparse_layout_t, rows: *cint, cols: *cint, block_size: *cint, rows_start: **cint, rows_end: **cint, col_indx: **cint, values: **float64): sparse_status_t <cimport,nodecl> end
global function mkl_sparse_c_export_bsr(source: *sparse_matrix, indexing: *sparse_index_base_t, block_layout: *sparse_layout_t, rows: *cint, cols: *cint, block_size: *cint, rows_start: **cint, rows_end: **cint, col_indx: **cint, values: **MKL_Complex8): sparse_status_t <cimport,nodecl> end
global function mkl_sparse_z_export_bsr(source: *sparse_matrix, indexing: *sparse_index_base_t, block_layout: *sparse_layout_t, rows: *cint, cols: *cint, block_size: *cint, rows_start: **cint, rows_end: **cint, col_indx: **cint, values: **MKL_Complex16): sparse_status_t <cimport,nodecl> end
global function mkl_sparse_s_export_csr(source: *sparse_matrix, indexing: *sparse_index_base_t, rows: *cint, cols: *cint, rows_start: **cint, rows_end: **cint, col_indx: **cint, values: **float32): sparse_status_t <cimport,nodecl> end
global function mkl_sparse_d_export_csr(source: *sparse_matrix, indexing: *sparse_index_base_t, rows: *cint, cols: *cint, rows_start: **cint, rows_end: **cint, col_indx: **cint, values: **float64): sparse_status_t <cimport,nodecl> end
global function mkl_sparse_c_export_csr(source: *sparse_matrix, indexing: *sparse_index_base_t, rows: *cint, cols: *cint, rows_start: **cint, rows_end: **cint, col_indx: **cint, values: **MKL_Complex8): sparse_status_t <cimport,nodecl> end
global function mkl_sparse_z_export_csr(source: *sparse_matrix, indexing: *sparse_index_base_t, rows: *cint, cols: *cint, rows_start: **cint, rows_end: **cint, col_indx: **cint, values: **MKL_Complex16): sparse_status_t <cimport,nodecl> end
global function mkl_sparse_s_export_csc(source: *sparse_matrix, indexing: *sparse_index_base_t, rows: *cint, cols: *cint, cols_start: **cint, cols_end: **cint, row_indx: **cint, values: **float32): sparse_status_t <cimport,nodecl> end
global function mkl_sparse_d_export_csc(source: *sparse_matrix, indexing: *sparse_index_base_t, rows: *cint, cols: *cint, cols_start: **cint, cols_end: **cint, row_indx: **cint, values: **float64): sparse_status_t <cimport,nodecl> end
global function mkl_sparse_c_export_csc(source: *sparse_matrix, indexing: *sparse_index_base_t, rows: *cint, cols: *cint, cols_start: **cint, cols_end: **cint, row_indx: **cint, values: **MKL_Complex8): sparse_status_t <cimport,nodecl> end
global function mkl_sparse_z_export_csc(source: *sparse_matrix, indexing: *sparse_index_base_t, rows: *cint, cols: *cint, cols_start: **cint, cols_end: **cint, row_indx: **cint, values: **MKL_Complex16): sparse_status_t <cimport,nodecl> end
global function mkl_sparse_s_set_value(A: *sparse_matrix, row: cint, col: cint, value: float32): sparse_status_t <cimport,nodecl> end
global function mkl_sparse_d_set_value(A: *sparse_matrix, row: cint, col: cint, value: float64): sparse_status_t <cimport,nodecl> end
global function mkl_sparse_c_set_value(A: *sparse_matrix, row: cint, col: cint, value: MKL_Complex8): sparse_status_t <cimport,nodecl> end
global function mkl_sparse_z_set_value(A: *sparse_matrix, row: cint, col: cint, value: MKL_Complex16): sparse_status_t <cimport,nodecl> end
global function mkl_sparse_s_update_values(A: *sparse_matrix, nvalues: cint, indx: *cint, indy: *cint, values: *float32): sparse_status_t <cimport,nodecl> end
global function mkl_sparse_d_update_values(A: *sparse_matrix, nvalues: cint, indx: *cint, indy: *cint, values: *float64): sparse_status_t <cimport,nodecl> end
global function mkl_sparse_c_update_values(A: *sparse_matrix, nvalues: cint, indx: *cint, indy: *cint, values: *MKL_Complex8): sparse_status_t <cimport,nodecl> end
global function mkl_sparse_z_update_values(A: *sparse_matrix, nvalues: cint, indx: *cint, indy: *cint, values: *MKL_Complex16): sparse_status_t <cimport,nodecl> end
global function mkl_sparse_set_verbose_mode(verbose: verbose_mode_t): sparse_status_t <cimport,nodecl> end
global function mkl_sparse_set_mv_hint(A: *sparse_matrix, operation: sparse_operation_t, descr: matrix_descr, expected_calls: cint): sparse_status_t <cimport,nodecl> end
global function mkl_sparse_set_dotmv_hint(A: *sparse_matrix, operation: sparse_operation_t, descr: matrix_descr, expectedCalls: cint): sparse_status_t <cimport,nodecl> end
global function mkl_sparse_set_mm_hint(A: *sparse_matrix, operation: sparse_operation_t, descr: matrix_descr, layout: sparse_layout_t, dense_matrix_size: cint, expected_calls: cint): sparse_status_t <cimport,nodecl> end
global function mkl_sparse_set_sv_hint(A: *sparse_matrix, operation: sparse_operation_t, descr: matrix_descr, expected_calls: cint): sparse_status_t <cimport,nodecl> end
global function mkl_sparse_set_sm_hint(A: *sparse_matrix, operation: sparse_operation_t, descr: matrix_descr, layout: sparse_layout_t, dense_matrix_size: cint, expected_calls: cint): sparse_status_t <cimport,nodecl> end
global function mkl_sparse_set_symgs_hint(A: *sparse_matrix, operation: sparse_operation_t, descr: matrix_descr, expected_calls: cint): sparse_status_t <cimport,nodecl> end
global function mkl_sparse_set_lu_smoother_hint(A: *sparse_matrix, operation: sparse_operation_t, descr: matrix_descr, expectedCalls: cint): sparse_status_t <cimport,nodecl> end
global function mkl_sparse_set_memory_hint(A: *sparse_matrix, policy: sparse_memory_usage_t): sparse_status_t <cimport,nodecl> end
global function mkl_sparse_optimize(A: *sparse_matrix): sparse_status_t <cimport,nodecl> end
global function mkl_sparse_order(A: *sparse_matrix): sparse_status_t <cimport,nodecl> end
global function mkl_sparse_s_mv(operation: sparse_operation_t, alpha: float32, A: *sparse_matrix, descr: matrix_descr, x: *float32, beta: float32, y: *float32): sparse_status_t <cimport,nodecl> end
global function mkl_sparse_d_mv(operation: sparse_operation_t, alpha: float64, A: *sparse_matrix, descr: matrix_descr, x: *float64, beta: float64, y: *float64): sparse_status_t <cimport,nodecl> end
global function mkl_sparse_c_mv(operation: sparse_operation_t, alpha: MKL_Complex8, A: *sparse_matrix, descr: matrix_descr, x: *MKL_Complex8, beta: MKL_Complex8, y: *MKL_Complex8): sparse_status_t <cimport,nodecl> end
global function mkl_sparse_z_mv(operation: sparse_operation_t, alpha: MKL_Complex16, A: *sparse_matrix, descr: matrix_descr, x: *MKL_Complex16, beta: MKL_Complex16, y: *MKL_Complex16): sparse_status_t <cimport,nodecl> end
global function mkl_sparse_s_dotmv(transA: sparse_operation_t, alpha: float32, A: *sparse_matrix, descr: matrix_descr, x: *float32, beta: float32, y: *float32, d: *float32): sparse_status_t <cimport,nodecl> end
global function mkl_sparse_d_dotmv(transA: sparse_operation_t, alpha: float64, A: *sparse_matrix, descr: matrix_descr, x: *float64, beta: float64, y: *float64, d: *float64): sparse_status_t <cimport,nodecl> end
global function mkl_sparse_c_dotmv(transA: sparse_operation_t, alpha: MKL_Complex8, A: *sparse_matrix, descr: matrix_descr, x: *MKL_Complex8, beta: MKL_Complex8, y: *MKL_Complex8, d: *MKL_Complex8): sparse_status_t <cimport,nodecl> end
global function mkl_sparse_z_dotmv(transA: sparse_operation_t, alpha: MKL_Complex16, A: *sparse_matrix, descr: matrix_descr, x: *MKL_Complex16, beta: MKL_Complex16, y: *MKL_Complex16, d: *MKL_Complex16): sparse_status_t <cimport,nodecl> end
global function mkl_sparse_s_trsv(operation: sparse_operation_t, alpha: float32, A: *sparse_matrix, descr: matrix_descr, x: *float32, y: *float32): sparse_status_t <cimport,nodecl> end
global function mkl_sparse_d_trsv(operation: sparse_operation_t, alpha: float64, A: *sparse_matrix, descr: matrix_descr, x: *float64, y: *float64): sparse_status_t <cimport,nodecl> end
global function mkl_sparse_c_trsv(operation: sparse_operation_t, alpha: MKL_Complex8, A: *sparse_matrix, descr: matrix_descr, x: *MKL_Complex8, y: *MKL_Complex8): sparse_status_t <cimport,nodecl> end
global function mkl_sparse_z_trsv(operation: sparse_operation_t, alpha: MKL_Complex16, A: *sparse_matrix, descr: matrix_descr, x: *MKL_Complex16, y: *MKL_Complex16): sparse_status_t <cimport,nodecl> end
global function mkl_sparse_s_symgs(op: sparse_operation_t, A: *sparse_matrix, descr: matrix_descr, alpha: float32, b: *float32, x: *float32): sparse_status_t <cimport,nodecl> end
global function mkl_sparse_d_symgs(op: sparse_operation_t, A: *sparse_matrix, descr: matrix_descr, alpha: float64, b: *float64, x: *float64): sparse_status_t <cimport,nodecl> end
global function mkl_sparse_c_symgs(op: sparse_operation_t, A: *sparse_matrix, descr: matrix_descr, alpha: MKL_Complex8, b: *MKL_Complex8, x: *MKL_Complex8): sparse_status_t <cimport,nodecl> end
global function mkl_sparse_z_symgs(op: sparse_operation_t, A: *sparse_matrix, descr: matrix_descr, alpha: MKL_Complex16, b: *MKL_Complex16, x: *MKL_Complex16): sparse_status_t <cimport,nodecl> end
global function mkl_sparse_s_symgs_mv(op: sparse_operation_t, A: *sparse_matrix, descr: matrix_descr, alpha: float32, b: *float32, x: *float32, y: *float32): sparse_status_t <cimport,nodecl> end
global function mkl_sparse_d_symgs_mv(op: sparse_operation_t, A: *sparse_matrix, descr: matrix_descr, alpha: float64, b: *float64, x: *float64, y: *float64): sparse_status_t <cimport,nodecl> end
global function mkl_sparse_c_symgs_mv(op: sparse_operation_t, A: *sparse_matrix, descr: matrix_descr, alpha: MKL_Complex8, b: *MKL_Complex8, x: *MKL_Complex8, y: *MKL_Complex8): sparse_status_t <cimport,nodecl> end
global function mkl_sparse_z_symgs_mv(op: sparse_operation_t, A: *sparse_matrix, descr: matrix_descr, alpha: MKL_Complex16, b: *MKL_Complex16, x: *MKL_Complex16, y: *MKL_Complex16): sparse_status_t <cimport,nodecl> end
global function mkl_sparse_s_lu_smoother(op: sparse_operation_t, A: *sparse_matrix, descr: matrix_descr, diag: *float32, approx_diag_inverse: *float32, x: *float32, rhs: *float32): sparse_status_t <cimport,nodecl> end
global function mkl_sparse_d_lu_smoother(op: sparse_operation_t, A: *sparse_matrix, descr: matrix_descr, diag: *float64, approx_diag_inverse: *float64, x: *float64, rhs: *float64): sparse_status_t <cimport,nodecl> end
global function mkl_sparse_c_lu_smoother(op: sparse_operation_t, A: *sparse_matrix, descr: matrix_descr, diag: *MKL_Complex8, approx_diag_inverse: *MKL_Complex8, x: *MKL_Complex8, rhs: *MKL_Complex8): sparse_status_t <cimport,nodecl> end
global function mkl_sparse_z_lu_smoother(op: sparse_operation_t, A: *sparse_matrix, descr: matrix_descr, diag: *MKL_Complex16, approx_diag_inverse: *MKL_Complex16, x: *MKL_Complex16, rhs: *MKL_Complex16): sparse_status_t <cimport,nodecl> end
global function mkl_sparse_s_mm(operation: sparse_operation_t, alpha: float32, A: *sparse_matrix, descr: matrix_descr, layout: sparse_layout_t, x: *float32, columns: cint, ldx: cint, beta: float32, y: *float32, ldy: cint): sparse_status_t <cimport,nodecl> end
global function mkl_sparse_d_mm(operation: sparse_operation_t, alpha: float64, A: *sparse_matrix, descr: matrix_descr, layout: sparse_layout_t, x: *float64, columns: cint, ldx: cint, beta: float64, y: *float64, ldy: cint): sparse_status_t <cimport,nodecl> end
global function mkl_sparse_c_mm(operation: sparse_operation_t, alpha: MKL_Complex8, A: *sparse_matrix, descr: matrix_descr, layout: sparse_layout_t, x: *MKL_Complex8, columns: cint, ldx: cint, beta: MKL_Complex8, y: *MKL_Complex8, ldy: cint): sparse_status_t <cimport,nodecl> end
global function mkl_sparse_z_mm(operation: sparse_operation_t, alpha: MKL_Complex16, A: *sparse_matrix, descr: matrix_descr, layout: sparse_layout_t, x: *MKL_Complex16, columns: cint, ldx: cint, beta: MKL_Complex16, y: *MKL_Complex16, ldy: cint): sparse_status_t <cimport,nodecl> end
global function mkl_sparse_s_trsm(operation: sparse_operation_t, alpha: float32, A: *sparse_matrix, descr: matrix_descr, layout: sparse_layout_t, x: *float32, columns: cint, ldx: cint, y: *float32, ldy: cint): sparse_status_t <cimport,nodecl> end
global function mkl_sparse_d_trsm(operation: sparse_operation_t, alpha: float64, A: *sparse_matrix, descr: matrix_descr, layout: sparse_layout_t, x: *float64, columns: cint, ldx: cint, y: *float64, ldy: cint): sparse_status_t <cimport,nodecl> end
global function mkl_sparse_c_trsm(operation: sparse_operation_t, alpha: MKL_Complex8, A: *sparse_matrix, descr: matrix_descr, layout: sparse_layout_t, x: *MKL_Complex8, columns: cint, ldx: cint, y: *MKL_Complex8, ldy: cint): sparse_status_t <cimport,nodecl> end
global function mkl_sparse_z_trsm(operation: sparse_operation_t, alpha: MKL_Complex16, A: *sparse_matrix, descr: matrix_descr, layout: sparse_layout_t, x: *MKL_Complex16, columns: cint, ldx: cint, y: *MKL_Complex16, ldy: cint): sparse_status_t <cimport,nodecl> end
global function mkl_sparse_s_add(operation: sparse_operation_t, A: *sparse_matrix, alpha: float32, B: *sparse_matrix, C: **sparse_matrix): sparse_status_t <cimport,nodecl> end
global function mkl_sparse_d_add(operation: sparse_operation_t, A: *sparse_matrix, alpha: float64, B: *sparse_matrix, C: **sparse_matrix): sparse_status_t <cimport,nodecl> end
global function mkl_sparse_c_add(operation: sparse_operation_t, A: *sparse_matrix, alpha: MKL_Complex8, B: *sparse_matrix, C: **sparse_matrix): sparse_status_t <cimport,nodecl> end
global function mkl_sparse_z_add(operation: sparse_operation_t, A: *sparse_matrix, alpha: MKL_Complex16, B: *sparse_matrix, C: **sparse_matrix): sparse_status_t <cimport,nodecl> end
global function mkl_sparse_spmm(operation: sparse_operation_t, A: *sparse_matrix, B: *sparse_matrix, C: **sparse_matrix): sparse_status_t <cimport,nodecl> end
global function mkl_sparse_sp2m(transA: sparse_operation_t, descrA: matrix_descr, A: *sparse_matrix, transB: sparse_operation_t, descrB: matrix_descr, B: *sparse_matrix, request: sparse_request_t, C: **sparse_matrix): sparse_status_t <cimport,nodecl> end
global function mkl_sparse_syrk(operation: sparse_operation_t, A: *sparse_matrix, C: **sparse_matrix): sparse_status_t <cimport,nodecl> end
global function mkl_sparse_sypr(transA: sparse_operation_t, A: *sparse_matrix, B: *sparse_matrix, descrB: matrix_descr, C: **sparse_matrix, request: sparse_request_t): sparse_status_t <cimport,nodecl> end
global function mkl_sparse_s_syprd(op: sparse_operation_t, A: *sparse_matrix, B: *float32, layoutB: sparse_layout_t, ldb: cint, alpha: float32, beta: float32, C: *float32, layoutC: sparse_layout_t, ldc: cint): sparse_status_t <cimport,nodecl> end
global function mkl_sparse_d_syprd(op: sparse_operation_t, A: *sparse_matrix, B: *float64, layoutB: sparse_layout_t, ldb: cint, alpha: float64, beta: float64, C: *float64, layoutC: sparse_layout_t, ldc: cint): sparse_status_t <cimport,nodecl> end
global function mkl_sparse_c_syprd(op: sparse_operation_t, A: *sparse_matrix, B: *MKL_Complex8, layoutB: sparse_layout_t, ldb: cint, alpha: MKL_Complex8, beta: MKL_Complex8, C: *MKL_Complex8, layoutC: sparse_layout_t, ldc: cint): sparse_status_t <cimport,nodecl> end
global function mkl_sparse_z_syprd(op: sparse_operation_t, A: *sparse_matrix, B: *MKL_Complex16, layoutB: sparse_layout_t, ldb: cint, alpha: MKL_Complex16, beta: MKL_Complex16, C: *MKL_Complex16, layoutC: sparse_layout_t, ldc: cint): sparse_status_t <cimport,nodecl> end
global function mkl_sparse_s_spmmd(operation: sparse_operation_t, A: *sparse_matrix, B: *sparse_matrix, layout: sparse_layout_t, C: *float32, ldc: cint): sparse_status_t <cimport,nodecl> end
global function mkl_sparse_d_spmmd(operation: sparse_operation_t, A: *sparse_matrix, B: *sparse_matrix, layout: sparse_layout_t, C: *float64, ldc: cint): sparse_status_t <cimport,nodecl> end
global function mkl_sparse_c_spmmd(operation: sparse_operation_t, A: *sparse_matrix, B: *sparse_matrix, layout: sparse_layout_t, C: *MKL_Complex8, ldc: cint): sparse_status_t <cimport,nodecl> end
global function mkl_sparse_z_spmmd(operation: sparse_operation_t, A: *sparse_matrix, B: *sparse_matrix, layout: sparse_layout_t, C: *MKL_Complex16, ldc: cint): sparse_status_t <cimport,nodecl> end
global function mkl_sparse_s_sp2md(transA: sparse_operation_t, descrA: matrix_descr, A: *sparse_matrix, transB: sparse_operation_t, descrB: matrix_descr, B: *sparse_matrix, alpha: float32, beta: float32, C: *float32, layout: sparse_layout_t, ldc: cint): sparse_status_t <cimport,nodecl> end
global function mkl_sparse_d_sp2md(transA: sparse_operation_t, descrA: matrix_descr, A: *sparse_matrix, transB: sparse_operation_t, descrB: matrix_descr, B: *sparse_matrix, alpha: float64, beta: float64, C: *float64, layout: sparse_layout_t, ldc: cint): sparse_status_t <cimport,nodecl> end
global function mkl_sparse_c_sp2md(transA: sparse_operation_t, descrA: matrix_descr, A: *sparse_matrix, transB: sparse_operation_t, descrB: matrix_descr, B: *sparse_matrix, alpha: MKL_Complex8, beta: MKL_Complex8, C: *MKL_Complex8, layout: sparse_layout_t, ldc: cint): sparse_status_t <cimport,nodecl> end
global function mkl_sparse_z_sp2md(transA: sparse_operation_t, descrA: matrix_descr, A: *sparse_matrix, transB: sparse_operation_t, descrB: matrix_descr, B: *sparse_matrix, alpha: MKL_Complex16, beta: MKL_Complex16, C: *MKL_Complex16, layout: sparse_layout_t, ldc: cint): sparse_status_t <cimport,nodecl> end
global function mkl_sparse_s_syrkd(operation: sparse_operation_t, A: *sparse_matrix, alpha: float32, beta: float32, C: *float32, layout: sparse_layout_t, ldc: cint): sparse_status_t <cimport,nodecl> end
global function mkl_sparse_d_syrkd(operation: sparse_operation_t, A: *sparse_matrix, alpha: float64, beta: float64, C: *float64, layout: sparse_layout_t, ldc: cint): sparse_status_t <cimport,nodecl> end
global function mkl_sparse_c_syrkd(operation: sparse_operation_t, A: *sparse_matrix, alpha: MKL_Complex8, beta: MKL_Complex8, C: *MKL_Complex8, layout: sparse_layout_t, ldc: cint): sparse_status_t <cimport,nodecl> end
global function mkl_sparse_z_syrkd(operation: sparse_operation_t, A: *sparse_matrix, alpha: MKL_Complex16, beta: MKL_Complex16, C: *MKL_Complex16, layout: sparse_layout_t, ldc: cint): sparse_status_t <cimport,nodecl> end
global function MKL_CGETRFNP(m: *cint, n: *cint, a: *MKL_Complex8, lda: *cint, info: *cint): void <cimport,nodecl> end
global function MKL_CGETRFNP_(m: *cint, n: *cint, a: *MKL_Complex8, lda: *cint, info: *cint): void <cimport,nodecl> end
global function mkl_cgetrfnp(m: *cint, n: *cint, a: *MKL_Complex8, lda: *cint, info: *cint): void <cimport,nodecl> end
global function mkl_cgetrfnp_(m: *cint, n: *cint, a: *MKL_Complex8, lda: *cint, info: *cint): void <cimport,nodecl> end
global function MKL_DGETRFNP(m: *cint, n: *cint, a: *float64, lda: *cint, info: *cint): void <cimport,nodecl> end
global function MKL_DGETRFNP_(m: *cint, n: *cint, a: *float64, lda: *cint, info: *cint): void <cimport,nodecl> end
global function mkl_dgetrfnp(m: *cint, n: *cint, a: *float64, lda: *cint, info: *cint): void <cimport,nodecl> end
global function mkl_dgetrfnp_(m: *cint, n: *cint, a: *float64, lda: *cint, info: *cint): void <cimport,nodecl> end
global function MKL_SGETRFNP(m: *cint, n: *cint, a: *float32, lda: *cint, info: *cint): void <cimport,nodecl> end
global function MKL_SGETRFNP_(m: *cint, n: *cint, a: *float32, lda: *cint, info: *cint): void <cimport,nodecl> end
global function mkl_sgetrfnp(m: *cint, n: *cint, a: *float32, lda: *cint, info: *cint): void <cimport,nodecl> end
global function mkl_sgetrfnp_(m: *cint, n: *cint, a: *float32, lda: *cint, info: *cint): void <cimport,nodecl> end
global function MKL_ZGETRFNP(m: *cint, n: *cint, a: *MKL_Complex16, lda: *cint, info: *cint): void <cimport,nodecl> end
global function MKL_ZGETRFNP_(m: *cint, n: *cint, a: *MKL_Complex16, lda: *cint, info: *cint): void <cimport,nodecl> end
global function mkl_zgetrfnp(m: *cint, n: *cint, a: *MKL_Complex16, lda: *cint, info: *cint): void <cimport,nodecl> end
global function mkl_zgetrfnp_(m: *cint, n: *cint, a: *MKL_Complex16, lda: *cint, info: *cint): void <cimport,nodecl> end
global function MKL_CGETRINP(n: *cint, a: *MKL_Complex8, lda: *cint, work: *MKL_Complex8, lwork: *cint, info: *cint): void <cimport,nodecl> end
global function MKL_CGETRINP_(n: *cint, a: *MKL_Complex8, lda: *cint, work: *MKL_Complex8, lwork: *cint, info: *cint): void <cimport,nodecl> end
global function mkl_cgetrinp(n: *cint, a: *MKL_Complex8, lda: *cint, work: *MKL_Complex8, lwork: *cint, info: *cint): void <cimport,nodecl> end
global function mkl_cgetrinp_(n: *cint, a: *MKL_Complex8, lda: *cint, work: *MKL_Complex8, lwork: *cint, info: *cint): void <cimport,nodecl> end
global function MKL_DGETRINP(n: *cint, a: *float64, lda: *cint, work: *float64, lwork: *cint, info: *cint): void <cimport,nodecl> end
global function MKL_DGETRINP_(n: *cint, a: *float64, lda: *cint, work: *float64, lwork: *cint, info: *cint): void <cimport,nodecl> end
global function mkl_dgetrinp(n: *cint, a: *float64, lda: *cint, work: *float64, lwork: *cint, info: *cint): void <cimport,nodecl> end
global function mkl_dgetrinp_(n: *cint, a: *float64, lda: *cint, work: *float64, lwork: *cint, info: *cint): void <cimport,nodecl> end
global function MKL_SGETRINP(n: *cint, a: *float32, lda: *cint, work: *float32, lwork: *cint, info: *cint): void <cimport,nodecl> end
global function MKL_SGETRINP_(n: *cint, a: *float32, lda: *cint, work: *float32, lwork: *cint, info: *cint): void <cimport,nodecl> end
global function mkl_sgetrinp(n: *cint, a: *float32, lda: *cint, work: *float32, lwork: *cint, info: *cint): void <cimport,nodecl> end
global function mkl_sgetrinp_(n: *cint, a: *float32, lda: *cint, work: *float32, lwork: *cint, info: *cint): void <cimport,nodecl> end
global function MKL_ZGETRINP(n: *cint, a: *MKL_Complex16, lda: *cint, work: *MKL_Complex16, lwork: *cint, info: *cint): void <cimport,nodecl> end
global function MKL_ZGETRINP_(n: *cint, a: *MKL_Complex16, lda: *cint, work: *MKL_Complex16, lwork: *cint, info: *cint): void <cimport,nodecl> end
global function mkl_zgetrinp(n: *cint, a: *MKL_Complex16, lda: *cint, work: *MKL_Complex16, lwork: *cint, info: *cint): void <cimport,nodecl> end
global function mkl_zgetrinp_(n: *cint, a: *MKL_Complex16, lda: *cint, work: *MKL_Complex16, lwork: *cint, info: *cint): void <cimport,nodecl> end
global function MKL_CGETRFNPI(m: *cint, n: *cint, nfact: *cint, a: *MKL_Complex8, lda: *cint, info: *cint): void <cimport,nodecl> end
global function MKL_CGETRFNPI_(m: *cint, n: *cint, nfact: *cint, a: *MKL_Complex8, lda: *cint, info: *cint): void <cimport,nodecl> end
global function mkl_cgetrfnpi(m: *cint, n: *cint, nfact: *cint, a: *MKL_Complex8, lda: *cint, info: *cint): void <cimport,nodecl> end
global function mkl_cgetrfnpi_(m: *cint, n: *cint, nfact: *cint, a: *MKL_Complex8, lda: *cint, info: *cint): void <cimport,nodecl> end
global function MKL_DGETRFNPI(m: *cint, n: *cint, nfact: *cint, a: *float64, lda: *cint, info: *cint): void <cimport,nodecl> end
global function MKL_DGETRFNPI_(m: *cint, n: *cint, nfact: *cint, a: *float64, lda: *cint, info: *cint): void <cimport,nodecl> end
global function mkl_dgetrfnpi(m: *cint, n: *cint, nfact: *cint, a: *float64, lda: *cint, info: *cint): void <cimport,nodecl> end
global function mkl_dgetrfnpi_(m: *cint, n: *cint, nfact: *cint, a: *float64, lda: *cint, info: *cint): void <cimport,nodecl> end
global function MKL_SGETRFNPI(m: *cint, n: *cint, nfact: *cint, a: *float32, lda: *cint, info: *cint): void <cimport,nodecl> end
global function MKL_SGETRFNPI_(m: *cint, n: *cint, nfact: *cint, a: *float32, lda: *cint, info: *cint): void <cimport,nodecl> end
global function mkl_sgetrfnpi(m: *cint, n: *cint, nfact: *cint, a: *float32, lda: *cint, info: *cint): void <cimport,nodecl> end
global function mkl_sgetrfnpi_(m: *cint, n: *cint, nfact: *cint, a: *float32, lda: *cint, info: *cint): void <cimport,nodecl> end
global function MKL_ZGETRFNPI(m: *cint, n: *cint, nfact: *cint, a: *MKL_Complex16, lda: *cint, info: *cint): void <cimport,nodecl> end
global function MKL_ZGETRFNPI_(m: *cint, n: *cint, nfact: *cint, a: *MKL_Complex16, lda: *cint, info: *cint): void <cimport,nodecl> end
global function mkl_zgetrfnpi(m: *cint, n: *cint, nfact: *cint, a: *MKL_Complex16, lda: *cint, info: *cint): void <cimport,nodecl> end
global function mkl_zgetrfnpi_(m: *cint, n: *cint, nfact: *cint, a: *MKL_Complex16, lda: *cint, info: *cint): void <cimport,nodecl> end
global function MKL_CTPPACK(uplo: cstring, trans: cstring, n: *cint, ap: *MKL_Complex8, i: *cint, j: *cint, rows: *cint, cols: *cint, a: *MKL_Complex8, lda: *cint, info: *cint): void <cimport,nodecl> end
global function MKL_CTPPACK_(uplo: cstring, trans: cstring, n: *cint, ap: *MKL_Complex8, i: *cint, j: *cint, rows: *cint, cols: *cint, a: *MKL_Complex8, lda: *cint, info: *cint): void <cimport,nodecl> end
global function mkl_ctppack(uplo: cstring, trans: cstring, n: *cint, ap: *MKL_Complex8, i: *cint, j: *cint, rows: *cint, cols: *cint, a: *MKL_Complex8, lda: *cint, info: *cint): void <cimport,nodecl> end
global function mkl_ctppack_(uplo: cstring, trans: cstring, n: *cint, ap: *MKL_Complex8, i: *cint, j: *cint, rows: *cint, cols: *cint, a: *MKL_Complex8, lda: *cint, info: *cint): void <cimport,nodecl> end
global function MKL_DTPPACK(uplo: cstring, trans: cstring, n: *cint, ap: *float64, i: *cint, j: *cint, rows: *cint, cols: *cint, a: *float64, lda: *cint, info: *cint): void <cimport,nodecl> end
global function MKL_DTPPACK_(uplo: cstring, trans: cstring, n: *cint, ap: *float64, i: *cint, j: *cint, rows: *cint, cols: *cint, a: *float64, lda: *cint, info: *cint): void <cimport,nodecl> end
global function mkl_dtppack(uplo: cstring, trans: cstring, n: *cint, ap: *float64, i: *cint, j: *cint, rows: *cint, cols: *cint, a: *float64, lda: *cint, info: *cint): void <cimport,nodecl> end
global function mkl_dtppack_(uplo: cstring, trans: cstring, n: *cint, ap: *float64, i: *cint, j: *cint, rows: *cint, cols: *cint, a: *float64, lda: *cint, info: *cint): void <cimport,nodecl> end
global function MKL_STPPACK(uplo: cstring, trans: cstring, n: *cint, ap: *float32, i: *cint, j: *cint, rows: *cint, cols: *cint, a: *float32, lda: *cint, info: *cint): void <cimport,nodecl> end
global function MKL_STPPACK_(uplo: cstring, trans: cstring, n: *cint, ap: *float32, i: *cint, j: *cint, rows: *cint, cols: *cint, a: *float32, lda: *cint, info: *cint): void <cimport,nodecl> end
global function mkl_stppack(uplo: cstring, trans: cstring, n: *cint, ap: *float32, i: *cint, j: *cint, rows: *cint, cols: *cint, a: *float32, lda: *cint, info: *cint): void <cimport,nodecl> end
global function mkl_stppack_(uplo: cstring, trans: cstring, n: *cint, ap: *float32, i: *cint, j: *cint, rows: *cint, cols: *cint, a: *float32, lda: *cint, info: *cint): void <cimport,nodecl> end
global function MKL_ZTPPACK(uplo: cstring, trans: cstring, n: *cint, ap: *MKL_Complex16, i: *cint, j: *cint, rows: *cint, cols: *cint, a: *MKL_Complex16, lda: *cint, info: *cint): void <cimport,nodecl> end
global function MKL_ZTPPACK_(uplo: cstring, trans: cstring, n: *cint, ap: *MKL_Complex16, i: *cint, j: *cint, rows: *cint, cols: *cint, a: *MKL_Complex16, lda: *cint, info: *cint): void <cimport,nodecl> end
global function mkl_ztppack(uplo: cstring, trans: cstring, n: *cint, ap: *MKL_Complex16, i: *cint, j: *cint, rows: *cint, cols: *cint, a: *MKL_Complex16, lda: *cint, info: *cint): void <cimport,nodecl> end
global function mkl_ztppack_(uplo: cstring, trans: cstring, n: *cint, ap: *MKL_Complex16, i: *cint, j: *cint, rows: *cint, cols: *cint, a: *MKL_Complex16, lda: *cint, info: *cint): void <cimport,nodecl> end
global function MKL_CTPUNPACK(uplo: cstring, trans: cstring, n: *cint, ap: *MKL_Complex8, i: *cint, j: *cint, rows: *cint, cols: *cint, a: *MKL_Complex8, lda: *cint, info: *cint): void <cimport,nodecl> end
global function MKL_CTPUNPACK_(uplo: cstring, trans: cstring, n: *cint, ap: *MKL_Complex8, i: *cint, j: *cint, rows: *cint, cols: *cint, a: *MKL_Complex8, lda: *cint, info: *cint): void <cimport,nodecl> end
global function mkl_ctpunpack(uplo: cstring, trans: cstring, n: *cint, ap: *MKL_Complex8, i: *cint, j: *cint, rows: *cint, cols: *cint, a: *MKL_Complex8, lda: *cint, info: *cint): void <cimport,nodecl> end
global function mkl_ctpunpack_(uplo: cstring, trans: cstring, n: *cint, ap: *MKL_Complex8, i: *cint, j: *cint, rows: *cint, cols: *cint, a: *MKL_Complex8, lda: *cint, info: *cint): void <cimport,nodecl> end
global function MKL_DTPUNPACK(uplo: cstring, trans: cstring, n: *cint, ap: *float64, i: *cint, j: *cint, rows: *cint, cols: *cint, a: *float64, lda: *cint, info: *cint): void <cimport,nodecl> end
global function MKL_DTPUNPACK_(uplo: cstring, trans: cstring, n: *cint, ap: *float64, i: *cint, j: *cint, rows: *cint, cols: *cint, a: *float64, lda: *cint, info: *cint): void <cimport,nodecl> end
global function mkl_dtpunpack(uplo: cstring, trans: cstring, n: *cint, ap: *float64, i: *cint, j: *cint, rows: *cint, cols: *cint, a: *float64, lda: *cint, info: *cint): void <cimport,nodecl> end
global function mkl_dtpunpack_(uplo: cstring, trans: cstring, n: *cint, ap: *float64, i: *cint, j: *cint, rows: *cint, cols: *cint, a: *float64, lda: *cint, info: *cint): void <cimport,nodecl> end
global function MKL_STPUNPACK(uplo: cstring, trans: cstring, n: *cint, ap: *float32, i: *cint, j: *cint, rows: *cint, cols: *cint, a: *float32, lda: *cint, info: *cint): void <cimport,nodecl> end
global function MKL_STPUNPACK_(uplo: cstring, trans: cstring, n: *cint, ap: *float32, i: *cint, j: *cint, rows: *cint, cols: *cint, a: *float32, lda: *cint, info: *cint): void <cimport,nodecl> end
global function mkl_stpunpack(uplo: cstring, trans: cstring, n: *cint, ap: *float32, i: *cint, j: *cint, rows: *cint, cols: *cint, a: *float32, lda: *cint, info: *cint): void <cimport,nodecl> end
global function mkl_stpunpack_(uplo: cstring, trans: cstring, n: *cint, ap: *float32, i: *cint, j: *cint, rows: *cint, cols: *cint, a: *float32, lda: *cint, info: *cint): void <cimport,nodecl> end
global function MKL_ZTPUNPACK(uplo: cstring, trans: cstring, n: *cint, ap: *MKL_Complex16, i: *cint, j: *cint, rows: *cint, cols: *cint, a: *MKL_Complex16, lda: *cint, info: *cint): void <cimport,nodecl> end
global function MKL_ZTPUNPACK_(uplo: cstring, trans: cstring, n: *cint, ap: *MKL_Complex16, i: *cint, j: *cint, rows: *cint, cols: *cint, a: *MKL_Complex16, lda: *cint, info: *cint): void <cimport,nodecl> end
global function mkl_ztpunpack(uplo: cstring, trans: cstring, n: *cint, ap: *MKL_Complex16, i: *cint, j: *cint, rows: *cint, cols: *cint, a: *MKL_Complex16, lda: *cint, info: *cint): void <cimport,nodecl> end
global function mkl_ztpunpack_(uplo: cstring, trans: cstring, n: *cint, ap: *MKL_Complex16, i: *cint, j: *cint, rows: *cint, cols: *cint, a: *MKL_Complex16, lda: *cint, info: *cint): void <cimport,nodecl> end
global function MKL_CSPFFRT2(ap: *MKL_Complex8, n: *cint, ncolm: *cint, work: *MKL_Complex8, work2: *MKL_Complex8): void <cimport,nodecl> end
global function mkl_cspffrt2(ap: *MKL_Complex8, n: *cint, ncolm: *cint, work: *MKL_Complex8, work2: *MKL_Complex8): void <cimport,nodecl> end
global function mkl_cspffrt2_(ap: *MKL_Complex8, n: *cint, ncolm: *cint, work: *MKL_Complex8, work2: *MKL_Complex8): void <cimport,nodecl> end
global function MKL_CSPFFRTX(ap: *MKL_Complex8, n: *cint, ncolm: *cint, work: *MKL_Complex8, work2: *MKL_Complex8): void <cimport,nodecl> end
global function mkl_cspffrtx(ap: *MKL_Complex8, n: *cint, ncolm: *cint, work: *MKL_Complex8, work2: *MKL_Complex8): void <cimport,nodecl> end
global function mkl_cspffrtx_(ap: *MKL_Complex8, n: *cint, ncolm: *cint, work: *MKL_Complex8, work2: *MKL_Complex8): void <cimport,nodecl> end
global function MKL_DSPFFRT2(ap: *float64, n: *cint, ncolm: *cint, work: *float64, work2: *float64): void <cimport,nodecl> end
global function mkl_dspffrt2(ap: *float64, n: *cint, ncolm: *cint, work: *float64, work2: *float64): void <cimport,nodecl> end
global function mkl_dspffrt2_(ap: *float64, n: *cint, ncolm: *cint, work: *float64, work2: *float64): void <cimport,nodecl> end
global function MKL_DSPFFRTX(ap: *float64, n: *cint, ncolm: *cint, work: *float64, work2: *float64): void <cimport,nodecl> end
global function mkl_dspffrtx(ap: *float64, n: *cint, ncolm: *cint, work: *float64, work2: *float64): void <cimport,nodecl> end
global function mkl_dspffrtx_(ap: *float64, n: *cint, ncolm: *cint, work: *float64, work2: *float64): void <cimport,nodecl> end
global function MKL_SSPFFRT2(ap: *float32, n: *cint, ncolm: *cint, work: *float32, work2: *float32): void <cimport,nodecl> end
global function mkl_sspffrt2(ap: *float32, n: *cint, ncolm: *cint, work: *float32, work2: *float32): void <cimport,nodecl> end
global function mkl_sspffrt2_(ap: *float32, n: *cint, ncolm: *cint, work: *float32, work2: *float32): void <cimport,nodecl> end
global function MKL_SSPFFRTX(ap: *float32, n: *cint, ncolm: *cint, work: *float32, work2: *float32): void <cimport,nodecl> end
global function mkl_sspffrtx(ap: *float32, n: *cint, ncolm: *cint, work: *float32, work2: *float32): void <cimport,nodecl> end
global function mkl_sspffrtx_(ap: *float32, n: *cint, ncolm: *cint, work: *float32, work2: *float32): void <cimport,nodecl> end
global function MKL_ZSPFFRT2(ap: *MKL_Complex16, n: *cint, ncolm: *cint, work: *MKL_Complex16, work2: *MKL_Complex16): void <cimport,nodecl> end
global function mkl_zspffrt2(ap: *MKL_Complex16, n: *cint, ncolm: *cint, work: *MKL_Complex16, work2: *MKL_Complex16): void <cimport,nodecl> end
global function mkl_zspffrt2_(ap: *MKL_Complex16, n: *cint, ncolm: *cint, work: *MKL_Complex16, work2: *MKL_Complex16): void <cimport,nodecl> end
global function MKL_ZSPFFRTX(ap: *MKL_Complex16, n: *cint, ncolm: *cint, work: *MKL_Complex16, work2: *MKL_Complex16): void <cimport,nodecl> end
global function mkl_zspffrtx(ap: *MKL_Complex16, n: *cint, ncolm: *cint, work: *MKL_Complex16, work2: *MKL_Complex16): void <cimport,nodecl> end
global function mkl_zspffrtx_(ap: *MKL_Complex16, n: *cint, ncolm: *cint, work: *MKL_Complex16, work2: *MKL_Complex16): void <cimport,nodecl> end
global function MKL_PROGRESS(thread: *cint, step: *cint, stage: cstring, lstage: cint): cint <cimport,nodecl> end
global function MKL_PROGRESS_(thread: *cint, step: *cint, stage: cstring, lstage: cint): cint <cimport,nodecl> end
global function mkl_progress(thread: *cint, step: *cint, stage: cstring, lstage: cint): cint <cimport,nodecl> end
global function mkl_progress_(thread: *cint, step: *cint, stage: cstring, lstage: cint): cint <cimport,nodecl> end
global function MKL_PARDISO_PIVOT(aii: *float64, bii: *float64, eps: *float64): cint <cimport,nodecl> end
global function MKL_PARDISO_PIVOT_(aii: *float64, bii: *float64, eps: *float64): cint <cimport,nodecl> end
global function mkl_pardiso_pivot(aii: *float64, bii: *float64, eps: *float64): cint <cimport,nodecl> end
global function mkl_pardiso_pivot_(aii: *float64, bii: *float64, eps: *float64): cint <cimport,nodecl> end
global function MKL_Get_Version(ver: *MKLVersion): void <cimport,nodecl> end
global function MKL_Get_Version_String(buffer: cstring, len: cint): void <cimport,nodecl> end
global function MKL_Free_Buffers(): void <cimport,nodecl> end
global function MKL_Thread_Free_Buffers(): void <cimport,nodecl> end
global function MKL_Mem_Stat(nbuffers: *cint): clonglong <cimport,nodecl> end
global function MKL_Peak_Mem_Usage(reset: cint): clonglong <cimport,nodecl> end
global function MKL_malloc(size: csize, align: cint): pointer <cimport,nodecl> end
global function MKL_calloc(num: csize, size: csize, align: cint): pointer <cimport,nodecl> end
global function MKL_realloc(ptr: pointer, size: csize): pointer <cimport,nodecl> end
global function MKL_free(ptr: pointer): void <cimport,nodecl> end
global function MKL_Disable_Fast_MM(): cint <cimport,nodecl> end
global function MKL_Get_Cpu_Clocks(a1: *culonglong): void <cimport,nodecl> end
global function MKL_Get_Cpu_Frequency(): float64 <cimport,nodecl> end
global function MKL_Get_Max_Cpu_Frequency(): float64 <cimport,nodecl> end
global function MKL_Get_Clocks_Frequency(): float64 <cimport,nodecl> end
global function MKL_Set_Num_Threads_Local(nth: cint): cint <cimport,nodecl> end
global function MKL_Set_Num_Threads(nth: cint): void <cimport,nodecl> end
global function MKL_Get_Max_Threads(): cint <cimport,nodecl> end
global function MKL_Set_Num_Stripes(nstripes: cint): void <cimport,nodecl> end
global function MKL_Get_Num_Stripes(): cint <cimport,nodecl> end
global function MKL_Domain_Set_Num_Threads(nth: cint, MKL_DOMAIN: cint): cint <cimport,nodecl> end
global function MKL_Domain_Get_Max_Threads(MKL_DOMAIN: cint): cint <cimport,nodecl> end
global function MKL_Set_Dynamic(bool_MKL_DYNAMIC: cint): void <cimport,nodecl> end
global function MKL_Get_Dynamic(): cint <cimport,nodecl> end
global function MKL_Enable_Instructions(a1: cint): cint <cimport,nodecl> end
global function MKL_Set_Interface_Layer(code: cint): cint <cimport,nodecl> end
global function MKL_Set_Threading_Layer(code: cint): cint <cimport,nodecl> end
global function mkl_set_xerbla(xerbla: function(Name: cstring, Num: *cint, Len: cint): void): function(Name: cstring, Num: *cint, Len: cint): void <cimport,nodecl> end
global function mkl_set_progress(progress: function(thread: *cint, step: *cint, stage: cstring, stage_len: cint): cint): function(thread: *cint, step: *cint, stage: cstring, stage_len: cint): cint <cimport,nodecl> end
global function mkl_set_pardiso_pivot(pardiso_pivot: function(aii: *float64, bii: *float64, eps: *float64): cint): function(aii: *float64, bii: *float64, eps: *float64): cint <cimport,nodecl> end
global function MKL_CBWR_Get(a1: cint): cint <cimport,nodecl> end
global function MKL_CBWR_Set(a1: cint): cint <cimport,nodecl> end
global function MKL_CBWR_Get_Auto_Branch(): cint <cimport,nodecl> end
global function MKL_Set_Env_Mode(a1: cint): cint <cimport,nodecl> end
global function MKL_Verbose(a1: cint): cint <cimport,nodecl> end
global function MKL_Verbose_Output_File(fname: cstring): cint <cimport,nodecl> end
global function MKL_Set_Exit_Handler(h: MKLExitHandler): void <cimport,nodecl> end
global function MKL_Set_mpi(vendor: cint, custom_library_name: cstring): cint <cimport,nodecl> end
global function MKL_Set_Memory_Limit(mem_type: cint, limit: csize): cint <cimport,nodecl> end
global function MKL_Finalize(): void <cimport,nodecl> end
global function mkl_sparse_ee_init(pm: *cint): sparse_status_t <cimport,nodecl> end
global function mkl_sparse_d_gv(which: cstring, pm: *cint, A: *sparse_matrix, descrA: matrix_descr, B: *sparse_matrix, descrB: matrix_descr, k0: cint, k: *cint, E: *float64, X: *float64, res: *float64): sparse_status_t <cimport,nodecl> end
global function mkl_sparse_s_gv(which: cstring, pm: *cint, A: *sparse_matrix, descrA: matrix_descr, B: *sparse_matrix, descrB: matrix_descr, k0: cint, k: *cint, E: *float32, X: *float32, res: *float32): sparse_status_t <cimport,nodecl> end
global function mkl_sparse_d_ev(which: cstring, pm: *cint, A: *sparse_matrix, descrA: matrix_descr, k0: cint, k: *cint, E: *float64, X: *float64, res: *float64): sparse_status_t <cimport,nodecl> end
global function mkl_sparse_s_ev(which: cstring, pm: *cint, A: *sparse_matrix, descrA: matrix_descr, k0: cint, k: *cint, E: *float32, X: *float32, res: *float32): sparse_status_t <cimport,nodecl> end
global function mkl_sparse_d_svd(whichE: cstring, whichV: cstring, pm: *cint, A: *sparse_matrix, descrA: matrix_descr, k0: cint, k: *cint, E: *float64, XL: *float64, XR: *float64, res: *float64): sparse_status_t <cimport,nodecl> end
global function mkl_sparse_s_svd(whichE: cstring, whichV: cstring, pm: *cint, A: *sparse_matrix, descrA: matrix_descr, k0: cint, k: *cint, E: *float32, XL: *float32, XR: *float32, res: *float32): sparse_status_t <cimport,nodecl> end
global function mkl_get_format_compact(): MKL_COMPACT_PACK <cimport,nodecl> end
global function mkl_sget_size_compact(ld: cint, sd: cint, format: MKL_COMPACT_PACK, nm: cint): cint <cimport,nodecl> end
global function mkl_sgepack_compact(layout: MKL_LAYOUT, rows: cint, columns: cint, a: **float32, lda: cint, ap: *float32, ldap: cint, format: MKL_COMPACT_PACK, nm: cint): void <cimport,nodecl> end
global function mkl_sgeunpack_compact(layout: MKL_LAYOUT, rows: cint, columns: cint, a: **float32, lda: cint, ap: *float32, ldap: cint, format: MKL_COMPACT_PACK, nm: cint): void <cimport,nodecl> end
global function mkl_sgemm_compact(layout: MKL_LAYOUT, transa: MKL_TRANSPOSE, transb: MKL_TRANSPOSE, m: cint, n: cint, k: cint, alpha: float32, ap: *float32, ldap: cint, bp: *float32, ldbp: cint, beta: float32, cp: *float32, ldcp: cint, format: MKL_COMPACT_PACK, nm: cint): void <cimport,nodecl> end
global function mkl_strsm_compact(layout: MKL_LAYOUT, side: MKL_SIDE, uplo: MKL_UPLO, transa: MKL_TRANSPOSE, diag: MKL_DIAG, m: cint, n: cint, alpha: float32, ap: *float32, ldap: cint, bp: *float32, ldbp: cint, format: MKL_COMPACT_PACK, nm: cint): void <cimport,nodecl> end
global function mkl_dget_size_compact(ld: cint, sd: cint, format: MKL_COMPACT_PACK, nm: cint): cint <cimport,nodecl> end
global function mkl_dgepack_compact(layout: MKL_LAYOUT, rows: cint, columns: cint, a: **float64, lda: cint, ap: *float64, ldap: cint, format: MKL_COMPACT_PACK, nm: cint): void <cimport,nodecl> end
global function mkl_dgeunpack_compact(layout: MKL_LAYOUT, rows: cint, columns: cint, a: **float64, lda: cint, ap: *float64, ldap: cint, format: MKL_COMPACT_PACK, nm: cint): void <cimport,nodecl> end
global function mkl_dgemm_compact(layout: MKL_LAYOUT, transa: MKL_TRANSPOSE, transb: MKL_TRANSPOSE, m: cint, n: cint, k: cint, alpha: float64, a: *float64, ldap: cint, b: *float64, ldbp: cint, beta: float64, c: *float64, ldcp: cint, format: MKL_COMPACT_PACK, nm: cint): void <cimport,nodecl> end
global function mkl_dtrsm_compact(layout: MKL_LAYOUT, side: MKL_SIDE, uplo: MKL_UPLO, transa: MKL_TRANSPOSE, diag: MKL_DIAG, m: cint, n: cint, alpha: float64, a: *float64, ldap: cint, b: *float64, ldbp: cint, format: MKL_COMPACT_PACK, nm: cint): void <cimport,nodecl> end
global function mkl_cget_size_compact(ld: cint, sd: cint, format: MKL_COMPACT_PACK, nm: cint): cint <cimport,nodecl> end
global function mkl_cgepack_compact(layout: MKL_LAYOUT, rows: cint, columns: cint, a: **MKL_Complex8, lda: cint, ap: *float32, ldap: cint, format: MKL_COMPACT_PACK, nm: cint): void <cimport,nodecl> end
global function mkl_cgeunpack_compact(layout: MKL_LAYOUT, rows: cint, columns: cint, a: **MKL_Complex8, lda: cint, ap: *float32, ldap: cint, format: MKL_COMPACT_PACK, nm: cint): void <cimport,nodecl> end
global function mkl_cgemm_compact(layout: MKL_LAYOUT, transa: MKL_TRANSPOSE, transb: MKL_TRANSPOSE, m: cint, n: cint, k: cint, alpha: *MKL_Complex8, a: *float32, ldap: cint, b: *float32, ldbp: cint, beta: *MKL_Complex8, c: *float32, ldcp: cint, format: MKL_COMPACT_PACK, nm: cint): void <cimport,nodecl> end
global function mkl_ctrsm_compact(layout: MKL_LAYOUT, side: MKL_SIDE, uplo: MKL_UPLO, transa: MKL_TRANSPOSE, diag: MKL_DIAG, m: cint, n: cint, alpha: *MKL_Complex8, a: *float32, ldap: cint, b: *float32, ldbp: cint, format: MKL_COMPACT_PACK, nm: cint): void <cimport,nodecl> end
global function mkl_zget_size_compact(ld: cint, sd: cint, format: MKL_COMPACT_PACK, nm: cint): cint <cimport,nodecl> end
global function mkl_zgepack_compact(layout: MKL_LAYOUT, rows: cint, columns: cint, a: **MKL_Complex16, lda: cint, ap: *float64, ldap: cint, format: MKL_COMPACT_PACK, nm: cint): void <cimport,nodecl> end
global function mkl_zgeunpack_compact(layout: MKL_LAYOUT, rows: cint, columns: cint, a: **MKL_Complex16, lda: cint, ap: *float64, ldap: cint, format: MKL_COMPACT_PACK, nm: cint): void <cimport,nodecl> end
global function mkl_zgemm_compact(layout: MKL_LAYOUT, transa: MKL_TRANSPOSE, transb: MKL_TRANSPOSE, m: cint, n: cint, k: cint, alpha: *MKL_Complex16, a: *float64, ldap: cint, b: *float64, ldbp: cint, beta: *MKL_Complex16, c: *float64, ldcp: cint, format: MKL_COMPACT_PACK, nm: cint): void <cimport,nodecl> end
global function mkl_ztrsm_compact(layout: MKL_LAYOUT, side: MKL_SIDE, uplo: MKL_UPLO, transa: MKL_TRANSPOSE, diag: MKL_DIAG, m: cint, n: cint, alpha: *MKL_Complex16, a: *float64, ldap: cint, b: *float64, ldbp: cint, format: MKL_COMPACT_PACK, nm: cint): void <cimport,nodecl> end
global function mkl_cgetrinp_compact(layout: MKL_LAYOUT, n: cint, ap: *float32, ldap: cint, work: *float32, lwork: cint, info: *cint, format: MKL_COMPACT_PACK, nm: cint): void <cimport,nodecl> end
global function mkl_dgetrinp_compact(layout: MKL_LAYOUT, n: cint, ap: *float64, ldap: cint, work: *float64, lwork: cint, info: *cint, format: MKL_COMPACT_PACK, nm: cint): void <cimport,nodecl> end
global function mkl_sgetrinp_compact(layout: MKL_LAYOUT, n: cint, ap: *float32, ldap: cint, work: *float32, lwork: cint, info: *cint, format: MKL_COMPACT_PACK, nm: cint): void <cimport,nodecl> end
global function mkl_zgetrinp_compact(layout: MKL_LAYOUT, n: cint, ap: *float64, ldap: cint, work: *float64, lwork: cint, info: *cint, format: MKL_COMPACT_PACK, nm: cint): void <cimport,nodecl> end
global function mkl_cgetrfnp_compact(layout: MKL_LAYOUT, m: cint, n: cint, ap: *float32, ldap: cint, info: *cint, format: MKL_COMPACT_PACK, nm: cint): void <cimport,nodecl> end
global function mkl_dgetrfnp_compact(layout: MKL_LAYOUT, m: cint, n: cint, ap: *float64, ldap: cint, info: *cint, format: MKL_COMPACT_PACK, nm: cint): void <cimport,nodecl> end
global function mkl_sgetrfnp_compact(layout: MKL_LAYOUT, m: cint, n: cint, ap: *float32, ldap: cint, info: *cint, format: MKL_COMPACT_PACK, nm: cint): void <cimport,nodecl> end
global function mkl_zgetrfnp_compact(layout: MKL_LAYOUT, m: cint, n: cint, ap: *float64, ldap: cint, info: *cint, format: MKL_COMPACT_PACK, nm: cint): void <cimport,nodecl> end
global function mkl_cpotrf_compact(layout: MKL_LAYOUT, uplo: MKL_UPLO, n: cint, ap: *float32, ldap: cint, info: *cint, format: MKL_COMPACT_PACK, nm: cint): void <cimport,nodecl> end
global function mkl_dpotrf_compact(layout: MKL_LAYOUT, uplo: MKL_UPLO, n: cint, ap: *float64, ldap: cint, info: *cint, format: MKL_COMPACT_PACK, nm: cint): void <cimport,nodecl> end
global function mkl_spotrf_compact(layout: MKL_LAYOUT, uplo: MKL_UPLO, n: cint, ap: *float32, ldap: cint, info: *cint, format: MKL_COMPACT_PACK, nm: cint): void <cimport,nodecl> end
global function mkl_zpotrf_compact(layout: MKL_LAYOUT, uplo: MKL_UPLO, n: cint, ap: *float64, ldap: cint, info: *cint, format: MKL_COMPACT_PACK, nm: cint): void <cimport,nodecl> end
global function mkl_cgeqrf_compact(layout: MKL_LAYOUT, m: cint, n: cint, ap: *float32, ldap: cint, taup: *float32, work: *float32, lwork: cint, info: *cint, format: MKL_COMPACT_PACK, nm: cint): void <cimport,nodecl> end
global function mkl_dgeqrf_compact(layout: MKL_LAYOUT, m: cint, n: cint, ap: *float64, ldap: cint, taup: *float64, work: *float64, lwork: cint, info: *cint, format: MKL_COMPACT_PACK, nm: cint): void <cimport,nodecl> end
global function mkl_sgeqrf_compact(layout: MKL_LAYOUT, m: cint, n: cint, ap: *float32, ldap: cint, taup: *float32, work: *float32, lwork: cint, info: *cint, format: MKL_COMPACT_PACK, nm: cint): void <cimport,nodecl> end
global function mkl_zgeqrf_compact(layout: MKL_LAYOUT, m: cint, n: cint, ap: *float64, ldap: cint, taup: *float64, work: *float64, lwork: cint, info: *cint, format: MKL_COMPACT_PACK, nm: cint): void <cimport,nodecl> end
global function mkl_graph_matrix_create(A_pt: *mkl_graph_matrix_t): mkl_graph_status_t <cimport,nodecl> end
global function mkl_graph_matrix_destroy(A_pt: *mkl_graph_matrix_t): mkl_graph_status_t <cimport,nodecl> end
global function mkl_graph_vector_create(v_pt: *mkl_graph_vector_t): mkl_graph_status_t <cimport,nodecl> end
global function mkl_graph_vector_destroy(v_pt: *mkl_graph_vector_t): mkl_graph_status_t <cimport,nodecl> end
global function mkl_graph_descriptor_create(desc_pt: *mkl_graph_descriptor_t): mkl_graph_status_t <cimport,nodecl> end
global function mkl_graph_descriptor_destroy(desc_pt: *mkl_graph_descriptor_t): mkl_graph_status_t <cimport,nodecl> end
global function mkl_graph_matrix_set_csr(A: mkl_graph_matrix_t, nrows: int64, ncols: int64, rows_start: pointer, rows_start_type: mkl_graph_type_t, col_indx: pointer, col_indx_type: mkl_graph_type_t, values: pointer, values_type: mkl_graph_type_t): mkl_graph_status_t <cimport,nodecl> end
global function mkl_graph_matrix_get_csr(A: mkl_graph_matrix_t, nrows_pt: *int64, ncols_pt: *int64, rows_start_pt: *pointer, rows_start_type_pt: *mkl_graph_type_t, col_indx_pt: *pointer, col_indx_type_pt: *mkl_graph_type_t, values_pt: *pointer, values_type_pt: *mkl_graph_type_t): mkl_graph_status_t <cimport,nodecl> end
global function mkl_graph_matrix_set_csc(A: mkl_graph_matrix_t, nrows: int64, ncols: int64, cols_start: pointer, cols_start_type: mkl_graph_type_t, row_indx: pointer, row_indx_type: mkl_graph_type_t, values: pointer, values_type: mkl_graph_type_t): mkl_graph_status_t <cimport,nodecl> end
global function mkl_graph_matrix_get_csc(A: mkl_graph_matrix_t, nrows_pt: *int64, ncols_pt: *int64, cols_start_pt: *pointer, cols_start_type_pt: *mkl_graph_type_t, row_indx_pt: *pointer, row_indx_type_pt: *mkl_graph_type_t, values_pt: *pointer, values_type_pt: *mkl_graph_type_t): mkl_graph_status_t <cimport,nodecl> end
global function mkl_graph_matrix_get_property(A: mkl_graph_matrix_t, property: mkl_graph_property_t, value_pt: pointer): mkl_graph_status_t <cimport,nodecl> end
global function mkl_graph_optimize_mxv(mask: mkl_graph_vector_t, semiring: mkl_graph_semiring_t, A: mkl_graph_matrix_t, v: mkl_graph_vector_t, desc: mkl_graph_descriptor_t, ncalls: int64): mkl_graph_status_t <cimport,nodecl> end
global function mkl_graph_optimize_mxm(Mask: mkl_graph_matrix_t, semiring: mkl_graph_semiring_t, A: mkl_graph_matrix_t, B: mkl_graph_matrix_t, desc: mkl_graph_descriptor_t, ncalls: int64): mkl_graph_status_t <cimport,nodecl> end
global function mkl_graph_transpose(C: mkl_graph_matrix_t, Mask: mkl_graph_matrix_t, accum: mkl_graph_accumulator_t, A: mkl_graph_matrix_t, desc: mkl_graph_descriptor_t): mkl_graph_status_t <cimport,nodecl> end
global function mkl_graph_vector_set_dense(v: mkl_graph_vector_t, dim: int64, values: pointer, values_type: mkl_graph_type_t): mkl_graph_status_t <cimport,nodecl> end
global function mkl_graph_vector_get_dense(v: mkl_graph_vector_t, dim_pt: *int64, values_pt: *pointer, values_type_pt: *mkl_graph_type_t): mkl_graph_status_t <cimport,nodecl> end
global function mkl_graph_vector_set_sparse(v: mkl_graph_vector_t, dim: int64, nnz: int64, indices: pointer, indices_type: mkl_graph_type_t, values: pointer, values_type: mkl_graph_type_t): mkl_graph_status_t <cimport,nodecl> end
global function mkl_graph_vector_get_sparse(v: mkl_graph_vector_t, dim_pt: *int64, nnz_pt: *int64, indices_pt: *pointer, indices_type_pt: *mkl_graph_type_t, values_pt: *pointer, values_type_pt: *mkl_graph_type_t): mkl_graph_status_t <cimport,nodecl> end
global function mkl_graph_vector_get_property(v: mkl_graph_vector_t, property: mkl_graph_property_t, value_pt: pointer): mkl_graph_status_t <cimport,nodecl> end
global function mkl_graph_descriptor_set_field(desc: mkl_graph_descriptor_t, field: mkl_graph_descriptor_field_t, value: mkl_graph_descriptor_field_value_t): mkl_graph_status_t <cimport,nodecl> end
global function mkl_graph_mxm(C: mkl_graph_matrix_t, M: mkl_graph_matrix_t, accum: mkl_graph_accumulator_t, semiring: mkl_graph_semiring_t, A: mkl_graph_matrix_t, B: mkl_graph_matrix_t, desc: mkl_graph_descriptor_t, request: mkl_graph_request_t, method: mkl_graph_method_t): mkl_graph_status_t <cimport,nodecl> end
global function mkl_graph_mxv(w: mkl_graph_vector_t, mask: mkl_graph_vector_t, accum: mkl_graph_accumulator_t, semiring: mkl_graph_semiring_t, A: mkl_graph_matrix_t, u: mkl_graph_vector_t, desc: mkl_graph_descriptor_t, request: mkl_graph_request_t, method: mkl_graph_method_t): mkl_graph_status_t <cimport,nodecl> end
global function mkl_graph_vxm(w: mkl_graph_vector_t, mask: mkl_graph_vector_t, accum: mkl_graph_accumulator_t, semiring: mkl_graph_semiring_t, u: mkl_graph_vector_t, A: mkl_graph_matrix_t, desc: mkl_graph_descriptor_t, request: mkl_graph_request_t, method: mkl_graph_method_t): mkl_graph_status_t <cimport,nodecl> end
global function mkl_sparse_set_qr_hint(A: *sparse_matrix, hint: sparse_qr_hint_t): sparse_status_t <cimport,nodecl> end
global function mkl_sparse_d_qr(operation: sparse_operation_t, A: *sparse_matrix, descr: matrix_descr, layout: sparse_layout_t, columns: cint, x: *float64, ldx: cint, b: *float64, ldb: cint): sparse_status_t <cimport,nodecl> end
global function mkl_sparse_s_qr(operation: sparse_operation_t, A: *sparse_matrix, descr: matrix_descr, layout: sparse_layout_t, columns: cint, x: *float32, ldx: cint, b: *float32, ldb: cint): sparse_status_t <cimport,nodecl> end
global function mkl_sparse_qr_reorder(A: *sparse_matrix, descr: matrix_descr): sparse_status_t <cimport,nodecl> end
global function mkl_sparse_d_qr_factorize(A: *sparse_matrix, alt_values: *float64): sparse_status_t <cimport,nodecl> end
global function mkl_sparse_s_qr_factorize(A: *sparse_matrix, alt_values: *float32): sparse_status_t <cimport,nodecl> end
global function mkl_sparse_d_qr_solve(operation: sparse_operation_t, A: *sparse_matrix, alt_values: *float64, layout: sparse_layout_t, columns: cint, x: *float64, ldx: cint, b: *float64, ldb: cint): sparse_status_t <cimport,nodecl> end
global function mkl_sparse_s_qr_solve(operation: sparse_operation_t, A: *sparse_matrix, alt_values: *float32, layout: sparse_layout_t, columns: cint, x: *float32, ldx: cint, b: *float32, ldb: cint): sparse_status_t <cimport,nodecl> end
global function mkl_sparse_d_qr_qmult(operation: sparse_operation_t, A: *sparse_matrix, layout: sparse_layout_t, columns: cint, x: *float64, ldx: cint, b: *float64, ldb: cint): sparse_status_t <cimport,nodecl> end
global function mkl_sparse_s_qr_qmult(operation: sparse_operation_t, A: *sparse_matrix, layout: sparse_layout_t, columns: cint, x: *float32, ldx: cint, b: *float32, ldb: cint): sparse_status_t <cimport,nodecl> end
global function mkl_sparse_d_qr_rsolve(operation: sparse_operation_t, A: *sparse_matrix, layout: sparse_layout_t, columns: cint, x: *float64, ldx: cint, b: *float64, ldb: cint): sparse_status_t <cimport,nodecl> end
global function mkl_sparse_s_qr_rsolve(operation: sparse_operation_t, A: *sparse_matrix, layout: sparse_layout_t, columns: cint, x: *float32, ldx: cint, b: *float32, ldb: cint): sparse_status_t <cimport,nodecl> end
global MKL_INT64: type = clonglong
global MKL_UINT64: type = culonglong
global MKL_INT: type = cint
global MKL_UINT: type = cuint
global MKL_LONG: type = clong
global MKL_UINT8: type = cuchar
global MKL_INT8: type = cchar
global MKL_INT16: type = cshort
global MKL_BF16: type = cushort
global MKL_INT32: type = cint
global MKL_DOMAIN_ALL: cint <comptime> = 0
global MKL_DOMAIN_BLAS: cint <comptime> = 1
global MKL_DOMAIN_FFT: cint <comptime> = 2
global MKL_DOMAIN_VML: cint <comptime> = 3
global MKL_DOMAIN_PARDISO: cint <comptime> = 4
global MKL_DOMAIN_LAPACK: cint <comptime> = 5
global MKL_CBWR_BRANCH: cint <comptime> = 1
global MKL_CBWR_ALL: cint <cimport,nodecl,const>
global MKL_CBWR_STRICT: cint <comptime> = 65536
global MKL_CBWR_OFF: cint <comptime> = 0
global MKL_CBWR_BRANCH_OFF: cint <comptime> = 1
global MKL_CBWR_AUTO: cint <comptime> = 2
global MKL_CBWR_COMPATIBLE: cint <comptime> = 3
global MKL_CBWR_SSE2: cint <comptime> = 4
global MKL_CBWR_SSSE3: cint <comptime> = 6
global MKL_CBWR_SSE4_1: cint <comptime> = 7
global MKL_CBWR_SSE4_2: cint <comptime> = 8
global MKL_CBWR_AVX: cint <comptime> = 9
global MKL_CBWR_AVX2: cint <comptime> = 10
global MKL_CBWR_AVX512_MIC: cint <comptime> = 11
global MKL_CBWR_AVX512: cint <comptime> = 12
global MKL_CBWR_AVX512_MIC_E1: cint <comptime> = 13
global MKL_CBWR_AVX512_E1: cint <comptime> = 14
global MKL_CBWR_SUCCESS: cint <comptime> = 0
global MKL_CBWR_ERR_INVALID_SETTINGS: cint <comptime> = -1
global MKL_CBWR_ERR_INVALID_INPUT: cint <comptime> = -2
global MKL_CBWR_ERR_UNSUPPORTED_BRANCH: cint <comptime> = -3
global MKL_CBWR_ERR_UNKNOWN_BRANCH: cint <comptime> = -4
global MKL_CBWR_ERR_MODE_CHANGE_FAILURE: cint <comptime> = -8
global MKL_CBWR_SSE3: cint <comptime> = 5
global function mkl_jit_create_dgemm(jitter: *pointer, layout: MKL_LAYOUT, transa: MKL_TRANSPOSE, transb: MKL_TRANSPOSE, m: cint, n: cint, k: cint, alpha: float64, lda: cint, ldb: cint, beta: float64, ldc: cint): mkl_jit_status_t <cimport,nodecl> end
global function mkl_jit_create_sgemm(jitter: *pointer, layout: MKL_LAYOUT, transa: MKL_TRANSPOSE, transb: MKL_TRANSPOSE, m: cint, n: cint, k: cint, alpha: float32, lda: cint, ldb: cint, beta: float32, ldc: cint): mkl_jit_status_t <cimport,nodecl> end
global function mkl_jit_create_cgemm(jitter: *pointer, layout: MKL_LAYOUT, transa: MKL_TRANSPOSE, transb: MKL_TRANSPOSE, m: cint, n: cint, k: cint, alpha: pointer, lda: cint, ldb: cint, beta: pointer, ldc: cint): mkl_jit_status_t <cimport,nodecl> end
global function mkl_jit_create_zgemm(jitter: *pointer, layout: MKL_LAYOUT, transa: MKL_TRANSPOSE, transb: MKL_TRANSPOSE, m: cint, n: cint, k: cint, alpha: pointer, lda: cint, ldb: cint, beta: pointer, ldc: cint): mkl_jit_status_t <cimport,nodecl> end
global function mkl_simatcopy(ordering: cchar, trans: cchar, rows: csize, cols: csize, alpha: float32, AB: *float32, lda: csize, ldb: csize): void <cimport,nodecl> end
global function mkl_dimatcopy(ordering: cchar, trans: cchar, rows: csize, cols: csize, alpha: float64, AB: *float64, lda: csize, ldb: csize): void <cimport,nodecl> end
global function mkl_cimatcopy(ordering: cchar, trans: cchar, rows: csize, cols: csize, alpha: MKL_Complex8, AB: *MKL_Complex8, lda: csize, ldb: csize): void <cimport,nodecl> end
global function mkl_zimatcopy(ordering: cchar, trans: cchar, rows: csize, cols: csize, alpha: MKL_Complex16, AB: *MKL_Complex16, lda: csize, ldb: csize): void <cimport,nodecl> end
global function mkl_somatcopy(ordering: cchar, trans: cchar, rows: csize, cols: csize, alpha: float32, A: *float32, lda: csize, B: *float32, ldb: csize): void <cimport,nodecl> end
global function mkl_domatcopy(ordering: cchar, trans: cchar, rows: csize, cols: csize, alpha: float64, A: *float64, lda: csize, B: *float64, ldb: csize): void <cimport,nodecl> end
global function mkl_comatcopy(ordering: cchar, trans: cchar, rows: csize, cols: csize, alpha: MKL_Complex8, A: *MKL_Complex8, lda: csize, B: *MKL_Complex8, ldb: csize): void <cimport,nodecl> end
global function mkl_zomatcopy(ordering: cchar, trans: cchar, rows: csize, cols: csize, alpha: MKL_Complex16, A: *MKL_Complex16, lda: csize, B: *MKL_Complex16, ldb: csize): void <cimport,nodecl> end
global function mkl_somatcopy2(ordering: cchar, trans: cchar, rows: csize, cols: csize, alpha: float32, A: *float32, lda: csize, stridea: csize, B: *float32, ldb: csize, strideb: csize): void <cimport,nodecl> end
global function mkl_domatcopy2(ordering: cchar, trans: cchar, rows: csize, cols: csize, alpha: float64, A: *float64, lda: csize, stridea: csize, B: *float64, ldb: csize, strideb: csize): void <cimport,nodecl> end
global function mkl_comatcopy2(ordering: cchar, trans: cchar, rows: csize, cols: csize, alpha: MKL_Complex8, A: *MKL_Complex8, lda: csize, stridea: csize, B: *MKL_Complex8, ldb: csize, strideb: csize): void <cimport,nodecl> end
global function mkl_zomatcopy2(ordering: cchar, trans: cchar, rows: csize, cols: csize, alpha: MKL_Complex16, A: *MKL_Complex16, lda: csize, stridea: csize, B: *MKL_Complex16, ldb: csize, strideb: csize): void <cimport,nodecl> end
global function mkl_somatadd(ordering: cchar, transa: cchar, transb: cchar, rows: csize, cols: csize, alpha: float32, A: *float32, lda: csize, beta: float32, B: *float32, ldb: csize, C: *float32, ldc: csize): void <cimport,nodecl> end
global function mkl_domatadd(ordering: cchar, transa: cchar, transb: cchar, rows: csize, cols: csize, alpha: float64, A: *float64, lda: csize, beta: float64, B: *float64, ldb: csize, C: *float64, ldc: csize): void <cimport,nodecl> end
global function mkl_comatadd(ordering: cchar, transa: cchar, transb: cchar, rows: csize, cols: csize, alpha: MKL_Complex8, A: *MKL_Complex8, lda: csize, beta: MKL_Complex8, B: *MKL_Complex8, ldb: csize, C: *MKL_Complex8, ldc: csize): void <cimport,nodecl> end
global function mkl_zomatadd(ordering: cchar, transa: cchar, transb: cchar, rows: csize, cols: csize, alpha: MKL_Complex16, A: *MKL_Complex16, lda: csize, beta: MKL_Complex16, B: *MKL_Complex16, ldb: csize, C: *MKL_Complex16, ldc: csize): void <cimport,nodecl> end
global CBLAS_INDEX: type = csize
global MKL_DSS_DEFAULTS: cint <comptime> = 0
global MKL_DSS_OOC_VARIABLE: cint <comptime> = 1024
global MKL_DSS_OOC_STRONG: cint <comptime> = 2048
global MKL_DSS_REFINEMENT_OFF: cint <comptime> = 4096
global MKL_DSS_REFINEMENT_ON: cint <comptime> = 8192
global MKL_DSS_FORWARD_SOLVE: cint <comptime> = 16384
global MKL_DSS_DIAGONAL_SOLVE: cint <comptime> = 32768
global MKL_DSS_BACKWARD_SOLVE: cint <comptime> = 49152
global MKL_DSS_TRANSPOSE_SOLVE: cint <comptime> = 262144
global MKL_DSS_CONJUGATE_SOLVE: cint <comptime> = 524288
global MKL_DSS_SINGLE_PRECISION: cint <comptime> = 65536
global MKL_DSS_ZERO_BASED_INDEXING: cint <comptime> = 131072
global MKL_DSS_MSG_LVL_SUCCESS: cint <comptime> = -2147483647
global MKL_DSS_MSG_LVL_DEBUG: cint <comptime> = -2147483646
global MKL_DSS_MSG_LVL_INFO: cint <comptime> = -2147483645
global MKL_DSS_MSG_LVL_WARNING: cint <comptime> = -2147483644
global MKL_DSS_MSG_LVL_ERROR: cint <comptime> = -2147483643
global MKL_DSS_MSG_LVL_FATAL: cint <comptime> = -2147483642
global MKL_DSS_TERM_LVL_SUCCESS: cint <comptime> = 1073741832
global MKL_DSS_TERM_LVL_DEBUG: cint <comptime> = 1073741840
global MKL_DSS_TERM_LVL_INFO: cint <comptime> = 1073741848
global MKL_DSS_TERM_LVL_WARNING: cint <comptime> = 1073741856
global MKL_DSS_TERM_LVL_ERROR: cint <comptime> = 1073741864
global MKL_DSS_TERM_LVL_FATAL: cint <comptime> = 1073741872
global MKL_DSS_SYMMETRIC: cint <comptime> = 536870976
global MKL_DSS_SYMMETRIC_STRUCTURE: cint <comptime> = 536871040
global MKL_DSS_NON_SYMMETRIC: cint <comptime> = 536871104
global MKL_DSS_SYMMETRIC_COMPLEX: cint <comptime> = 536871168
global MKL_DSS_SYMMETRIC_STRUCTURE_COMPLEX: cint <comptime> = 536871232
global MKL_DSS_NON_SYMMETRIC_COMPLEX: cint <comptime> = 536871296
global MKL_DSS_AUTO_ORDER: cint <comptime> = 268435520
global MKL_DSS_MY_ORDER: cint <comptime> = 268435584
global MKL_DSS_OPTION1_ORDER: cint <comptime> = 268435648
global MKL_DSS_GET_ORDER: cint <comptime> = 268435712
global MKL_DSS_METIS_ORDER: cint <comptime> = 268435776
global MKL_DSS_METIS_OPENMP_ORDER: cint <comptime> = 268435840
global MKL_DSS_POSITIVE_DEFINITE: cint <comptime> = 134217792
global MKL_DSS_INDEFINITE: cint <comptime> = 134217856
global MKL_DSS_HERMITIAN_POSITIVE_DEFINITE: cint <comptime> = 134217920
global MKL_DSS_HERMITIAN_INDEFINITE: cint <comptime> = 134217984
global MKL_DSS_SUCCESS: cint <comptime> = 0
global MKL_DSS_ZERO_PIVOT: cint <comptime> = -1
global MKL_DSS_OUT_OF_MEMORY: cint <comptime> = -2
global MKL_DSS_FAILURE: cint <comptime> = -3
global MKL_DSS_ROW_ERR: cint <comptime> = -4
global MKL_DSS_COL_ERR: cint <comptime> = -5
global MKL_DSS_TOO_FEW_VALUES: cint <comptime> = -6
global MKL_DSS_TOO_MANY_VALUES: cint <comptime> = -7
global MKL_DSS_NOT_SQUARE: cint <comptime> = -8
global MKL_DSS_STATE_ERR: cint <comptime> = -9
global MKL_DSS_INVALID_OPTION: cint <comptime> = -10
global MKL_DSS_OPTION_CONFLICT: cint <comptime> = -11
global MKL_DSS_MSG_LVL_ERR: cint <comptime> = -12
global MKL_DSS_TERM_LVL_ERR: cint <comptime> = -13
global MKL_DSS_STRUCTURE_ERR: cint <comptime> = -14
global MKL_DSS_REORDER_ERR: cint <comptime> = -15
global MKL_DSS_VALUES_ERR: cint <comptime> = -16
global MKL_DSS_STATISTICS_INVALID_MATRIX: cint <comptime> = -17
global MKL_DSS_STATISTICS_INVALID_STATE: cint <comptime> = -18
global MKL_DSS_STATISTICS_INVALID_STRING: cint <comptime> = -19
global MKL_DSS_REORDER1_ERR: cint <comptime> = -20
global MKL_DSS_PREORDER_ERR: cint <comptime> = -21
global MKL_DSS_DIAG_ERR: cint <comptime> = -22
global MKL_DSS_I32BIT_ERR: cint <comptime> = -23
global MKL_DSS_OOC_MEM_ERR: cint <comptime> = -24
global MKL_DSS_OOC_OC_ERR: cint <comptime> = -25
global MKL_DSS_OOC_RW_ERR: cint <comptime> = -26
global function mkl_get_version(ver: *MKLVersion): void <cimport,nodecl> end
global function mkl_get_version_string(buffer: cstring, len: cint): void <cimport,nodecl> end
global function mkl_free_buffers(): void <cimport,nodecl> end
global function mkl_thread_free_buffers(): void <cimport,nodecl> end
global function mkl_mem_stat(nbuffers: *cint): clonglong <cimport,nodecl> end
global MKL_PEAK_MEM_DISABLE: cint <comptime> = 0
global MKL_PEAK_MEM_ENABLE: cint <comptime> = 1
global MKL_PEAK_MEM_RESET: cint <comptime> = -1
global MKL_PEAK_MEM: cint <comptime> = 2
global function mkl_peak_mem_usage(reset: cint): clonglong <cimport,nodecl> end
global function mkl_malloc(size: csize, align: cint): pointer <cimport,nodecl> end
global function mkl_calloc(num: csize, size: csize, align: cint): pointer <cimport,nodecl> end
global function mkl_realloc(ptr: pointer, size: csize): pointer <cimport,nodecl> end
global function mkl_free(ptr: pointer): void <cimport,nodecl> end
global function mkl_disable_fast_mm(): cint <cimport,nodecl> end
global function mkl_get_cpu_clocks(a1: *culonglong): void <cimport,nodecl> end
global function mkl_get_cpu_frequency(): float64 <cimport,nodecl> end
global function mkl_get_max_cpu_frequency(): float64 <cimport,nodecl> end
global function mkl_get_clocks_frequency(): float64 <cimport,nodecl> end
global function mkl_set_num_threads_local(nth: cint): cint <cimport,nodecl> end
global function mkl_set_num_threads(nth: cint): void <cimport,nodecl> end
global function mkl_get_max_threads(): cint <cimport,nodecl> end
global function mkl_set_num_stripes(nstripes: cint): void <cimport,nodecl> end
global function mkl_get_num_stripes(): cint <cimport,nodecl> end
global function mkl_domain_set_num_threads(nth: cint, MKL_DOMAIN: cint): cint <cimport,nodecl> end
global function mkl_domain_get_max_threads(MKL_DOMAIN: cint): cint <cimport,nodecl> end
global function mkl_set_dynamic(bool_MKL_DYNAMIC: cint): void <cimport,nodecl> end
global function mkl_get_dynamic(): cint <cimport,nodecl> end
global function mkl_enable_instructions(a1: cint): cint <cimport,nodecl> end
global MKL_ENABLE_SSE4_2: cint <comptime> = 0
global MKL_ENABLE_AVX: cint <comptime> = 1
global MKL_ENABLE_AVX2: cint <comptime> = 2
global MKL_ENABLE_AVX512_MIC: cint <comptime> = 3
global MKL_ENABLE_AVX512: cint <comptime> = 4
global MKL_ENABLE_AVX512_MIC_E1: cint <comptime> = 5
global MKL_ENABLE_AVX512_E1: cint <comptime> = 6
global MKL_ENABLE_AVX512_E2: cint <comptime> = 7
global MKL_ENABLE_AVX512_E3: cint <comptime> = 8
global MKL_ENABLE_AVX512_E4: cint <comptime> = 9
global MKL_SINGLE_PATH_ENABLE: cint <comptime> = 1536
global MKL_INTERFACE_LP64: cint <comptime> = 0
global MKL_INTERFACE_ILP64: cint <comptime> = 1
global MKL_INTERFACE_GNU: cint <comptime> = 2
global function mkl_set_interface_layer(code: cint): cint <cimport,nodecl> end
global MKL_THREADING_INTEL: cint <comptime> = 0
global MKL_THREADING_SEQUENTIAL: cint <comptime> = 1
global MKL_THREADING_PGI: cint <comptime> = 2
global MKL_THREADING_GNU: cint <comptime> = 3
global MKL_THREADING_TBB: cint <comptime> = 4
global function mkl_set_threading_layer(code: cint): cint <cimport,nodecl> end
global function mkl_cbwr_get(a1: cint): cint <cimport,nodecl> end
global function mkl_cbwr_set(a1: cint): cint <cimport,nodecl> end
global function mkl_cbwr_get_auto_branch(): cint <cimport,nodecl> end
global function mkl_set_env_mode(a1: cint): cint <cimport,nodecl> end
global function mkl_verbose(a1: cint): cint <cimport,nodecl> end
global function mkl_verbose_output_file(fname: cstring): cint <cimport,nodecl> end
global MKL_EXIT_UNSUPPORTED_CPU: cint <comptime> = 1
global MKL_EXIT_CORRUPTED_INSTALL: cint <comptime> = 2
global MKL_EXIT_NO_MEMORY: cint <comptime> = 3
global function mkl_set_exit_handler(h: MKLExitHandler): void <cimport,nodecl> end
global function mkl_set_mpi(vendor: cint, custom_library_name: cstring): cint <cimport,nodecl> end
global MKL_MEM_MCDRAM: cint <comptime> = 1
global function mkl_set_memory_limit(mem_type: cint, limit: csize): cint <cimport,nodecl> end
global function mkl_finalize(): void <cimport,nodecl> end
global MKL_SINE_TRANSFORM: cint <comptime> = 0
global MKL_COSINE_TRANSFORM: cint <comptime> = 1
global MKL_STAGGERED_COSINE_TRANSFORM: cint <comptime> = 2
global MKL_STAGGERED_SINE_TRANSFORM: cint <comptime> = 3
global MKL_STAGGERED2_COSINE_TRANSFORM: cint <comptime> = 4
global MKL_STAGGERED2_SINE_TRANSFORM: cint <comptime> = 5
global mkl_compact_complex_float: type = MKL_Complex8
global mkl_compact_complex_double: type = MKL_Complex16
global MKL_CBWR_UNSET_ALL: cint <comptime> = 0
