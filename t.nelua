global max_align_t: type <cimport,nodecl> = @record{
  __max_align_ll: clonglong,
  __max_align_ld: clongdouble
}
global gint8: type <cimport,nodecl> = @cschar
global guint8: type <cimport,nodecl> = @cuchar
global gint16: type <cimport,nodecl> = @cshort
global guint16: type <cimport,nodecl> = @cushort
global gint32: type <cimport,nodecl> = @cint
global guint32: type <cimport,nodecl> = @cuint
global gint64: type <cimport,nodecl> = @clong
global guint64: type <cimport,nodecl> = @culong
global gssize: type <cimport,nodecl> = @clong
global gsize: type <cimport,nodecl> = @culong
global goffset: type <cimport,nodecl> = @gint64
global gintptr: type <cimport,nodecl> = @clong
global guintptr: type <cimport,nodecl> = @culong
global GPid: type <cimport,nodecl> = @cint
global fsid_t: type <cimport,nodecl> = @record{
  __val: [2]cint
}
global tm: type <cimport,nodecl,ctypedef'tm'> = @record{
  tm_sec: cint,
  tm_min: cint,
  tm_hour: cint,
  tm_mday: cint,
  tm_mon: cint,
  tm_year: cint,
  tm_wday: cint,
  tm_yday: cint,
  tm_isdst: cint,
  tm_gmtoff: clong,
  tm_zone: cstring
}
global timespec: type <cimport,nodecl,ctypedef'timespec'> = @record{
  tv_sec: ctime_t,
  tv_nsec: clong
}
global clockid_t: type <cimport,nodecl> = @cint
global timer_t: type <cimport,nodecl> = @pointer
global itimerspec: type <cimport,nodecl,ctypedef'itimerspec'> = @record{
  it_interval: timespec,
  it_value: timespec
}
global sigevent_t: type <cimport,nodecl,forwarddecl> = @record{}
global pid_t: type <cimport,nodecl> = @cint
global __locale_data: type <cimport,nodecl,ctypedef'__locale_data',forwarddecl> = @record{}
global __locale_struct: type <cimport,nodecl,ctypedef'__locale_struct'> = @record{
  __locales: [13]*__locale_data,
  __ctype_b: *cushort,
  __ctype_tolower: *cint,
  __ctype_toupper: *cint,
  __names: [13]cstring
}
global locale_t: type <cimport,nodecl> = @*__locale_struct
global gchar: type <cimport,nodecl> = @cchar
global gshort: type <cimport,nodecl> = @cshort
global glong: type <cimport,nodecl> = @clong
global gint: type <cimport,nodecl> = @cint
global gboolean: type <cimport,nodecl> = @gint
global guchar: type <cimport,nodecl> = @cuchar
global gushort: type <cimport,nodecl> = @cushort
global gulong: type <cimport,nodecl> = @culong
global guint: type <cimport,nodecl> = @cuint
global gfloat: type <cimport,nodecl> = @float32
global gdouble: type <cimport,nodecl> = @float64
global gpointer: type <cimport,nodecl> = @pointer
global gconstpointer: type <cimport,nodecl> = @pointer
global GCompareFunc: type <cimport,nodecl> = @function(a: gconstpointer, b: gconstpointer): gint
global GCompareDataFunc: type <cimport,nodecl> = @function(a: gconstpointer, b: gconstpointer, user_data: gpointer): gint
global GEqualFunc: type <cimport,nodecl> = @function(a: gconstpointer, b: gconstpointer): gboolean
global GDestroyNotify: type <cimport,nodecl> = @function(data: gpointer): void
global GFunc: type <cimport,nodecl> = @function(data: gpointer, user_data: gpointer): void
global GHashFunc: type <cimport,nodecl> = @function(key: gconstpointer): guint
global GHFunc: type <cimport,nodecl> = @function(key: gpointer, value: gpointer, user_data: gpointer): void
global GCopyFunc: type <cimport,nodecl> = @function(src: gconstpointer, data: gpointer): gpointer
global GFreeFunc: type <cimport,nodecl> = @function(data: gpointer): void
global GTranslateFunc: type <cimport,nodecl> = @function(str: *gchar, data: gpointer): *gchar
global GDoubleIEEE754: type <cimport,nodecl,forwarddecl> = @union{}
global GFloatIEEE754: type <cimport,nodecl,forwarddecl> = @union{}
GFloatIEEE754 = @union{
  v_float: gfloat,
  mpn: record{
    mantissa: guint,
    biased_exponent: guint,
    sign: guint
  }
}
GDoubleIEEE754 = @union{
  v_double: gdouble,
  mpn: record{
    mantissa_low: guint,
    mantissa_high: guint,
    biased_exponent: guint,
    sign: guint
  }
}
global GTimeVal: type <cimport,nodecl,forwarddecl> = @record{}
GTimeVal = @record{
  tv_sec: glong,
  tv_usec: glong
}
global grefcount: type <cimport,nodecl> = @gint
global gatomicrefcount: type <cimport,nodecl> = @gint
global GBytes: type <cimport,nodecl,forwarddecl> = @record{}
global GArray: type <cimport,nodecl,forwarddecl> = @record{}
global GByteArray: type <cimport,nodecl,forwarddecl> = @record{}
global GPtrArray: type <cimport,nodecl,forwarddecl> = @record{}
GArray = @record{
  data: *gchar,
  len: guint
}
GByteArray = @record{
  data: *guint8,
  len: guint
}
GPtrArray = @record{
  pdata: *gpointer,
  len: guint
}
global GQuark: type <cimport,nodecl> = @guint32
global GError: type <cimport,nodecl,forwarddecl> = @record{}
GError = @record{
  domain: GQuark,
  code: gint,
  message: *gchar
}
global GErrorInitFunc: type <cimport,nodecl> = @function(error: *GError): void
global GErrorCopyFunc: type <cimport,nodecl> = @function(src_error: *GError, dest_error: *GError): void
global GErrorClearFunc: type <cimport,nodecl> = @function(error: *GError): void
global GUserDirectory: type <cimport,nodecl,using> = @enum(cint){
  G_USER_DIRECTORY_DESKTOP = 0,
  G_USER_DIRECTORY_DOCUMENTS = 1,
  G_USER_DIRECTORY_DOWNLOAD = 2,
  G_USER_DIRECTORY_MUSIC = 3,
  G_USER_DIRECTORY_PICTURES = 4,
  G_USER_DIRECTORY_PUBLIC_SHARE = 5,
  G_USER_DIRECTORY_TEMPLATES = 6,
  G_USER_DIRECTORY_VIDEOS = 7,
  G_USER_N_DIRECTORIES = 8
}
global GDebugKey: type <cimport,nodecl,forwarddecl> = @record{}
GDebugKey = @record{
  key: *gchar,
  value: guint
}
global GFormatSizeFlags: type <cimport,nodecl,using> = @enum(cint){
  G_FORMAT_SIZE_DEFAULT = 0,
  G_FORMAT_SIZE_LONG_FORMAT = 1,
  G_FORMAT_SIZE_IEC_UNITS = 2,
  G_FORMAT_SIZE_BITS = 4
}
global GVoidFunc: type <cimport,nodecl> = @function(): void
global div_t: type <cimport,nodecl> = @record{
  quot: cint,
  rem: cint
}
global ldiv_t: type <cimport,nodecl> = @record{
  quot: clong,
  rem: clong
}
global lldiv_t: type <cimport,nodecl> = @record{
  quot: clonglong,
  rem: clonglong
}
global quad_t: type <cimport,nodecl> = @clong
global u_quad_t: type <cimport,nodecl> = @culong
global loff_t: type <cimport,nodecl> = @clong
global ino_t: type <cimport,nodecl> = @culong
global dev_t: type <cimport,nodecl> = @culong
global gid_t: type <cimport,nodecl> = @cuint
global mode_t: type <cimport,nodecl> = @cuint
global nlink_t: type <cimport,nodecl> = @culong
global uid_t: type <cimport,nodecl> = @cuint
global off_t: type <cimport,nodecl> = @clong
global id_t: type <cimport,nodecl> = @cuint
global ssize_t: type <cimport,nodecl> = @clong
global daddr_t: type <cimport,nodecl> = @cint
global caddr_t: type <cimport,nodecl> = @cstring
global key_t: type <cimport,nodecl> = @cint
global register_t: type <cimport,nodecl> = @cint
global sigset_t: type <cimport,nodecl> = @record{
  __val: [0]culong
}
global timeval: type <cimport,nodecl,ctypedef'timeval'> = @record{
  tv_sec: ctime_t,
  tv_usec: clong
}
global suseconds_t: type <cimport,nodecl> = @clong
global fd_set: type <cimport,nodecl> = @record{
  __fds_bits: [0]clong
}
global fd_mask: type <cimport,nodecl> = @clong
global blksize_t: type <cimport,nodecl> = @clong
global blkcnt_t: type <cimport,nodecl> = @clong
global fsblkcnt_t: type <cimport,nodecl> = @culong
global fsfilcnt_t: type <cimport,nodecl> = @culong
global __atomic_wide_counter: type <cimport,nodecl> = @union{
  __value64: culonglong,
  __value32: record{
    __low: cuint,
    __high: cuint
  }
}
global __pthread_list_t: type <cimport,nodecl> = @record{
  __prev: *__pthread_list_t,
  __next: *__pthread_list_t
}
global __pthread_mutex_s: type <cimport,nodecl,ctypedef'__pthread_mutex_s'> = @record{
  __lock: cint,
  __count: cuint,
  __owner: cint,
  __nusers: cuint,
  __kind: cint,
  __spins: cshort,
  __elision: cshort,
  __list: __pthread_list_t
}
global __pthread_rwlock_arch_t: type <cimport,nodecl,ctypedef'__pthread_rwlock_arch_t'> = @record{
  __readers: cuint,
  __writers: cuint,
  __wrphase_futex: cuint,
  __writers_futex: cuint,
  __pad3: cuint,
  __pad4: cuint,
  __cur_writer: cint,
  __shared: cint,
  __rwelision: cschar,
  __pad1: [7]cuchar,
  __pad2: culong,
  __flags: cuint
}
global __pthread_cond_s: type <cimport,nodecl,ctypedef'__pthread_cond_s'> = @record{
  __wseq: __atomic_wide_counter,
  __g1_start: __atomic_wide_counter,
  __g_refs: [2]cuint,
  __g_size: [2]cuint,
  __g1_orig_size: cuint,
  __wrefs: cuint,
  __g_signals: [2]cuint
}
global pthread_t: type <cimport,nodecl> = @culong
global pthread_mutexattr_t: type <cimport,nodecl> = @union{
  __size: [4]cchar,
  __align: cint
}
global pthread_condattr_t: type <cimport,nodecl> = @union{
  __size: [4]cchar,
  __align: cint
}
global pthread_key_t: type <cimport,nodecl> = @cuint
global pthread_once_t: type <cimport,nodecl> = @cint
global pthread_attr_t: type <cimport,nodecl> = @union{
  __size: [56]cchar,
  __align: clong
}
global pthread_mutex_t: type <cimport,nodecl> = @union{
  __data: __pthread_mutex_s,
  __size: [40]cchar,
  __align: clong
}
global pthread_cond_t: type <cimport,nodecl> = @union{
  __data: __pthread_cond_s,
  __size: [48]cchar,
  __align: clonglong
}
global pthread_rwlock_t: type <cimport,nodecl> = @union{
  __data: __pthread_rwlock_arch_t,
  __size: [56]cchar,
  __align: clong
}
global pthread_rwlockattr_t: type <cimport,nodecl> = @union{
  __size: [8]cchar,
  __align: clong
}
global pthread_spinlock_t: type <cimport,nodecl> = @cint
global pthread_barrier_t: type <cimport,nodecl> = @union{
  __size: [32]cchar,
  __align: clong
}
global pthread_barrierattr_t: type <cimport,nodecl> = @union{
  __size: [4]cchar,
  __align: cint
}
global random_data: type <cimport,nodecl,ctypedef'random_data'> = @record{
  fptr: *int32,
  rptr: *int32,
  state: *int32,
  rand_type: cint,
  rand_deg: cint,
  rand_sep: cint,
  end_ptr: *int32
}
global drand48_data: type <cimport,nodecl,ctypedef'drand48_data'> = @record{
  __x: [3]cushort,
  __old_x: [3]cushort,
  __c: cushort,
  __init: cushort,
  __a: culonglong
}
global GThreadError: type <cimport,nodecl,using> = @enum(cint){
  G_THREAD_ERROR_AGAIN = 0
}
global GThreadFunc: type <cimport,nodecl> = @function(data: gpointer): gpointer
global GThread: type <cimport,nodecl,forwarddecl> = @record{}
global GMutex: type <cimport,nodecl,forwarddecl> = @union{}
global GRecMutex: type <cimport,nodecl,forwarddecl> = @record{}
global GRWLock: type <cimport,nodecl,forwarddecl> = @record{}
global GCond: type <cimport,nodecl,forwarddecl> = @record{}
global GPrivate: type <cimport,nodecl,forwarddecl> = @record{}
global GOnce: type <cimport,nodecl,forwarddecl> = @record{}
GMutex = @union{
  p: gpointer,
  i: [2]guint
}
GRWLock = @record{
  p: gpointer,
  i: [2]guint
}
GCond = @record{
  p: gpointer,
  i: [2]guint
}
GRecMutex = @record{
  p: gpointer,
  i: [2]guint
}
GPrivate = @record{
  p: gpointer,
  notify: GDestroyNotify,
  future: [2]gpointer
}
global GOnceStatus: type <cimport,nodecl,using> = @enum(cint){
  G_ONCE_STATUS_NOTCALLED = 0,
  G_ONCE_STATUS_PROGRESS = 1,
  G_ONCE_STATUS_READY = 2
}
GOnce = @record{
  status: GOnceStatus,
  retval: gpointer
}
global GMutexLocker: type <cimport,nodecl> = @void
global GRecMutexLocker: type <cimport,nodecl> = @void
global GRWLockWriterLocker: type <cimport,nodecl> = @void
global GRWLockReaderLocker: type <cimport,nodecl> = @void
global GAsyncQueue: type <cimport,nodecl,forwarddecl> = @record{}
global sig_atomic_t: type <cimport,nodecl> = @cint
global sigval_t: type <cimport,nodecl> = @union{
  sival_int: cint,
  sival_ptr: pointer
}
global siginfo_t: type <cimport,nodecl> = @record{
  si_signo: cint,
  si_errno: cint,
  si_code: cint,
  __pad0: cint,
  _sifields: union{
    _pad: [0]cint,
    _kill: record{
      si_pid: cint,
      si_uid: cuint
    },
    _timer: record{
      si_tid: cint,
      si_overrun: cint,
      si_sigval: sigval_t
    },
    _rt: record{
      si_pid: cint,
      si_uid: cuint,
      si_sigval: sigval_t
    },
    _sigchld: record{
      si_pid: cint,
      si_uid: cuint,
      si_status: cint,
      si_utime: cclock_t,
      si_stime: cclock_t
    },
    _sigfault: record{
      si_addr: pointer,
      si_addr_lsb: cshort,
      _bounds: union{
        _addr_bnd: record{
          _lower: pointer,
          _upper: pointer
        },
        _pkey: uint32
      }
    },
    _sigpoll: record{
      si_band: clong,
      si_fd: cint
    },
    _sigsys: record{
      _call_addr: pointer,
      _syscall: cint,
      _arch: cuint
    }
  }
}
global SI_ASYNCNL: cint <comptime> = -60
global SI_DETHREAD: cint <comptime> = -7
global SI_TKILL: cint <comptime> = -6
global SI_SIGIO: cint <comptime> = -5
global SI_ASYNCIO: cint <comptime> = -4
global SI_MESGQ: cint <comptime> = -3
global SI_TIMER: cint <comptime> = -2
global SI_QUEUE: cint <comptime> = -1
global SI_USER: cint <comptime> = 0
global SI_KERNEL: cint <comptime> = 128
global ILL_ILLOPC: cint <comptime> = 1
global ILL_ILLOPN: cint <comptime> = 2
global ILL_ILLADR: cint <comptime> = 3
global ILL_ILLTRP: cint <comptime> = 4
global ILL_PRVOPC: cint <comptime> = 5
global ILL_PRVREG: cint <comptime> = 6
global ILL_COPROC: cint <comptime> = 7
global ILL_BADSTK: cint <comptime> = 8
global ILL_BADIADDR: cint <comptime> = 9
global FPE_INTDIV: cint <comptime> = 1
global FPE_INTOVF: cint <comptime> = 2
global FPE_FLTDIV: cint <comptime> = 3
global FPE_FLTOVF: cint <comptime> = 4
global FPE_FLTUND: cint <comptime> = 5
global FPE_FLTRES: cint <comptime> = 6
global FPE_FLTINV: cint <comptime> = 7
global FPE_FLTSUB: cint <comptime> = 8
global FPE_FLTUNK: cint <comptime> = 14
global FPE_CONDTRAP: cint <comptime> = 15
global SEGV_MAPERR: cint <comptime> = 1
global SEGV_ACCERR: cint <comptime> = 2
global SEGV_BNDERR: cint <comptime> = 3
global SEGV_PKUERR: cint <comptime> = 4
global SEGV_ACCADI: cint <comptime> = 5
global SEGV_ADIDERR: cint <comptime> = 6
global SEGV_ADIPERR: cint <comptime> = 7
global SEGV_MTEAERR: cint <comptime> = 8
global SEGV_MTESERR: cint <comptime> = 9
global BUS_ADRALN: cint <comptime> = 1
global BUS_ADRERR: cint <comptime> = 2
global BUS_OBJERR: cint <comptime> = 3
global BUS_MCEERR_AR: cint <comptime> = 4
global BUS_MCEERR_AO: cint <comptime> = 5
global CLD_EXITED: cint <comptime> = 1
global CLD_KILLED: cint <comptime> = 2
global CLD_DUMPED: cint <comptime> = 3
global CLD_TRAPPED: cint <comptime> = 4
global CLD_STOPPED: cint <comptime> = 5
global CLD_CONTINUED: cint <comptime> = 6
global POLL_IN: cint <comptime> = 1
global POLL_OUT: cint <comptime> = 2
global POLL_MSG: cint <comptime> = 3
global POLL_ERR: cint <comptime> = 4
global POLL_PRI: cint <comptime> = 5
global POLL_HUP: cint <comptime> = 6
sigevent_t = @record{
  sigev_value: sigval_t,
  sigev_signo: cint,
  sigev_notify: cint,
  _sigev_un: union{
    _pad: [0]cint,
    _tid: cint,
    _sigev_thread: record{
      _function: function(a1: sigval_t): void,
      _attribute: *pthread_attr_t
    }
  }
}
global SIGEV_SIGNAL: cint <comptime> = 0
global SIGEV_NONE: cint <comptime> = 1
global SIGEV_THREAD: cint <comptime> = 2
global SIGEV_THREAD_ID: cint <comptime> = 4
global sig_t: type <cimport,nodecl> = @function(a1: cint): void
global sigaction_t: type <cimport,nodecl,ctypedef'sigaction'> = @record{
  __sigaction_handler: union{
    sa_handler: function(a1: cint): void,
    sa_sigaction: function(a1: cint, a2: *siginfo_t, a3: pointer): void
  },
  sa_mask: sigset_t,
  sa_flags: cint,
  sa_restorer: function(): void
}
global _fpx_sw_bytes: type <cimport,nodecl,ctypedef'_fpx_sw_bytes'> = @record{
  magic1: uint32,
  extended_size: uint32,
  xstate_bv: uint64,
  xstate_size: uint32,
  __glibc_reserved1: [7]uint32
}
global _fpreg: type <cimport,nodecl,ctypedef'_fpreg'> = @record{
  significand: [4]cushort,
  exponent: cushort
}
global _fpxreg: type <cimport,nodecl,ctypedef'_fpxreg'> = @record{
  significand: [4]cushort,
  exponent: cushort,
  __glibc_reserved1: [3]cushort
}
global _xmmreg: type <cimport,nodecl,ctypedef'_xmmreg'> = @record{
  element: [4]uint32
}
global _fpstate: type <cimport,nodecl,ctypedef'_fpstate'> = @record{
  cwd: uint16,
  swd: uint16,
  ftw: uint16,
  fop: uint16,
  rip: uint64,
  rdp: uint64,
  mxcsr: uint32,
  mxcr_mask: uint32,
  _st: [8]_fpxreg,
  _xmm: [16]_xmmreg,
  __glibc_reserved1: [24]uint32
}
global sigcontext: type <cimport,nodecl,ctypedef'sigcontext'> = @record{
  r8: uint64,
  r9: uint64,
  r10: uint64,
  r11: uint64,
  r12: uint64,
  r13: uint64,
  r14: uint64,
  r15: uint64,
  rdi: uint64,
  rsi: uint64,
  rbp: uint64,
  rbx: uint64,
  rdx: uint64,
  rax: uint64,
  rcx: uint64,
  rsp: uint64,
  rip: uint64,
  eflags: uint64,
  cs: cushort,
  gs: cushort,
  fs: cushort,
  __pad0: cushort,
  err: uint64,
  trapno: uint64,
  oldmask: uint64,
  cr2: uint64,
  __unnamed27: union{
    fpstate: *_fpstate,
    __fpstate_word: uint64
  },
  __reserved1: [8]uint64
}
global _xsave_hdr: type <cimport,nodecl,ctypedef'_xsave_hdr'> = @record{
  xstate_bv: uint64,
  __glibc_reserved1: [2]uint64,
  __glibc_reserved2: [5]uint64
}
global _ymmh_state: type <cimport,nodecl,ctypedef'_ymmh_state'> = @record{
  ymmh_space: [64]uint32
}
global _xstate: type <cimport,nodecl,ctypedef'_xstate'> = @record{
  fpstate: _fpstate,
  xstate_hdr: _xsave_hdr,
  ymmh: _ymmh_state
}
global stack_t: type <cimport,nodecl> = @record{
  ss_sp: pointer,
  ss_flags: cint,
  ss_size: csize
}
global greg_t: type <cimport,nodecl> = @clonglong
global gregset_t: type <cimport,nodecl> = @[23]greg_t
global _libc_fpxreg: type <cimport,nodecl,ctypedef'_libc_fpxreg'> = @record{
  significand: [4]cushort,
  exponent: cushort,
  __glibc_reserved1: [3]cushort
}
global _libc_xmmreg: type <cimport,nodecl,ctypedef'_libc_xmmreg'> = @record{
  element: [4]uint32
}
global _libc_fpstate: type <cimport,nodecl,ctypedef'_libc_fpstate'> = @record{
  cwd: uint16,
  swd: uint16,
  ftw: uint16,
  fop: uint16,
  rip: uint64,
  rdp: uint64,
  mxcsr: uint32,
  mxcr_mask: uint32,
  _st: [8]_libc_fpxreg,
  _xmm: [16]_libc_xmmreg,
  __glibc_reserved1: [24]uint32
}
global fpregset_t: type <cimport,nodecl> = @*_libc_fpstate
global mcontext_t: type <cimport,nodecl> = @record{
  gregs: gregset_t,
  fpregs: fpregset_t,
  __reserved1: [8]culonglong
}
global ucontext_t: type <cimport,nodecl> = @record{
  uc_flags: culong,
  uc_link: *ucontext_t,
  uc_stack: stack_t,
  uc_mcontext: mcontext_t,
  uc_sigmask: sigset_t,
  __fpregs_mem: _libc_fpstate,
  __ssp: [4]culonglong
}
global SS_ONSTACK: cint <comptime> = 1
global SS_DISABLE: cint <comptime> = 2
global sigstack_t: type <cimport,nodecl,ctypedef'sigstack'> = @record{
  ss_sp: pointer,
  ss_onstack: cint
}
global GTimeZone: type <cimport,nodecl,forwarddecl> = @record{}
global GTimeType: type <cimport,nodecl,using> = @enum(cint){
  G_TIME_TYPE_STANDARD = 0,
  G_TIME_TYPE_DAYLIGHT = 1,
  G_TIME_TYPE_UNIVERSAL = 2
}
global GTimeSpan: type <cimport,nodecl> = @gint64
global GDateTime: type <cimport,nodecl,forwarddecl> = @record{}
global GBookmarkFileError: type <cimport,nodecl,using> = @enum(cint){
  G_BOOKMARK_FILE_ERROR_INVALID_URI = 0,
  G_BOOKMARK_FILE_ERROR_INVALID_VALUE = 1,
  G_BOOKMARK_FILE_ERROR_APP_NOT_REGISTERED = 2,
  G_BOOKMARK_FILE_ERROR_URI_NOT_FOUND = 3,
  G_BOOKMARK_FILE_ERROR_READ = 4,
  G_BOOKMARK_FILE_ERROR_UNKNOWN_ENCODING = 5,
  G_BOOKMARK_FILE_ERROR_WRITE = 6,
  G_BOOKMARK_FILE_ERROR_FILE_NOT_FOUND = 7
}
global GBookmarkFile: type <cimport,nodecl,forwarddecl> = @record{}
global GChecksumType: type <cimport,nodecl,using> = @enum(cint){
  G_CHECKSUM_MD5 = 0,
  G_CHECKSUM_SHA1 = 1,
  G_CHECKSUM_SHA256 = 2,
  G_CHECKSUM_SHA512 = 3,
  G_CHECKSUM_SHA384 = 4
}
global GChecksum: type <cimport,nodecl,forwarddecl> = @record{}
global GConvertError: type <cimport,nodecl,using> = @enum(cint){
  G_CONVERT_ERROR_NO_CONVERSION = 0,
  G_CONVERT_ERROR_ILLEGAL_SEQUENCE = 1,
  G_CONVERT_ERROR_FAILED = 2,
  G_CONVERT_ERROR_PARTIAL_INPUT = 3,
  G_CONVERT_ERROR_BAD_URI = 4,
  G_CONVERT_ERROR_NOT_ABSOLUTE_PATH = 5,
  G_CONVERT_ERROR_NO_MEMORY = 6,
  G_CONVERT_ERROR_EMBEDDED_NUL = 7
}
global _GIConv: type <cimport,nodecl,ctypedef'_GIConv',forwarddecl> = @record{}
global GIConv: type <cimport,nodecl> = @*_GIConv
global GData: type <cimport,nodecl,forwarddecl> = @record{}
global GDataForeachFunc: type <cimport,nodecl> = @function(key_id: GQuark, data: gpointer, user_data: gpointer): void
global GDuplicateFunc: type <cimport,nodecl> = @function(data: gpointer, user_data: gpointer): gpointer
global GTime: type <cimport,nodecl> = @gint32
global GDateYear: type <cimport,nodecl> = @guint16
global GDateDay: type <cimport,nodecl> = @guint8
global GDate: type <cimport,nodecl,forwarddecl> = @record{}
global GDateDMY: type <cimport,nodecl,using> = @enum(cint){
  G_DATE_DAY = 0,
  G_DATE_MONTH = 1,
  G_DATE_YEAR = 2
}
global GDateWeekday: type <cimport,nodecl,using> = @enum(cint){
  G_DATE_BAD_WEEKDAY = 0,
  G_DATE_MONDAY = 1,
  G_DATE_TUESDAY = 2,
  G_DATE_WEDNESDAY = 3,
  G_DATE_THURSDAY = 4,
  G_DATE_FRIDAY = 5,
  G_DATE_SATURDAY = 6,
  G_DATE_SUNDAY = 7
}
global GDateMonth: type <cimport,nodecl,using> = @enum(cint){
  G_DATE_BAD_MONTH = 0,
  G_DATE_JANUARY = 1,
  G_DATE_FEBRUARY = 2,
  G_DATE_MARCH = 3,
  G_DATE_APRIL = 4,
  G_DATE_MAY = 5,
  G_DATE_JUNE = 6,
  G_DATE_JULY = 7,
  G_DATE_AUGUST = 8,
  G_DATE_SEPTEMBER = 9,
  G_DATE_OCTOBER = 10,
  G_DATE_NOVEMBER = 11,
  G_DATE_DECEMBER = 12
}
GDate = @record{
  julian_days: guint,
  julian: guint,
  dmy: guint,
  day: guint,
  month: guint,
  year: guint
}
global dirent: type <cimport,nodecl,ctypedef'dirent'> = @record{
  d_ino: culong,
  d_off: clong,
  d_reclen: cushort,
  d_type: cuchar,
  d_name: [256]cchar
}
global DT_UNKNOWN: cint <comptime> = 0
global DT_FIFO: cint <comptime> = 1
global DT_CHR: cint <comptime> = 2
global DT_DIR: cint <comptime> = 4
global DT_BLK: cint <comptime> = 6
global DT_REG: cint <comptime> = 8
global DT_LNK: cint <comptime> = 10
global DT_SOCK: cint <comptime> = 12
global DT_WHT: cint <comptime> = 14
global DIR: type <cimport,nodecl,forwarddecl> = @record{}
global GDir: type <cimport,nodecl,forwarddecl> = @record{}
global GFileError: type <cimport,nodecl,using> = @enum(cint){
  G_FILE_ERROR_EXIST = 0,
  G_FILE_ERROR_ISDIR = 1,
  G_FILE_ERROR_ACCES = 2,
  G_FILE_ERROR_NAMETOOLONG = 3,
  G_FILE_ERROR_NOENT = 4,
  G_FILE_ERROR_NOTDIR = 5,
  G_FILE_ERROR_NXIO = 6,
  G_FILE_ERROR_NODEV = 7,
  G_FILE_ERROR_ROFS = 8,
  G_FILE_ERROR_TXTBSY = 9,
  G_FILE_ERROR_FAULT = 10,
  G_FILE_ERROR_LOOP = 11,
  G_FILE_ERROR_NOSPC = 12,
  G_FILE_ERROR_NOMEM = 13,
  G_FILE_ERROR_MFILE = 14,
  G_FILE_ERROR_NFILE = 15,
  G_FILE_ERROR_BADF = 16,
  G_FILE_ERROR_INVAL = 17,
  G_FILE_ERROR_PIPE = 18,
  G_FILE_ERROR_AGAIN = 19,
  G_FILE_ERROR_INTR = 20,
  G_FILE_ERROR_IO = 21,
  G_FILE_ERROR_PERM = 22,
  G_FILE_ERROR_NOSYS = 23,
  G_FILE_ERROR_FAILED = 24
}
global GFileTest: type <cimport,nodecl,using> = @enum(cint){
  G_FILE_TEST_IS_REGULAR = 1,
  G_FILE_TEST_IS_SYMLINK = 2,
  G_FILE_TEST_IS_DIR = 4,
  G_FILE_TEST_IS_EXECUTABLE = 8,
  G_FILE_TEST_EXISTS = 16
}
global GFileSetContentsFlags: type <cimport,nodecl,using> = @enum(cint){
  G_FILE_SET_CONTENTS_NONE = 0,
  G_FILE_SET_CONTENTS_CONSISTENT = 1,
  G_FILE_SET_CONTENTS_DURABLE = 2,
  G_FILE_SET_CONTENTS_ONLY_EXISTING = 4
}
global GMemVTable: type <cimport,nodecl,forwarddecl> = @record{}
GMemVTable = @record{
  malloc: function(n_bytes: gsize): gpointer,
  realloc: function(mem: gpointer, n_bytes: gsize): gpointer,
  free: function(mem: gpointer): void,
  calloc: function(n_blocks: gsize, n_block_bytes: gsize): gpointer,
  try_malloc: function(n_bytes: gsize): gpointer,
  try_realloc: function(mem: gpointer, n_bytes: gsize): gpointer
}
global GNode: type <cimport,nodecl,forwarddecl> = @record{}
global GTraverseFlags: type <cimport,nodecl,using> = @enum(cint){
  G_TRAVERSE_LEAVES = 1,
  G_TRAVERSE_NON_LEAVES = 2,
  G_TRAVERSE_ALL = 3,
  G_TRAVERSE_MASK = 3,
  G_TRAVERSE_LEAFS = 1,
  G_TRAVERSE_NON_LEAFS = 2
}
global GTraverseType: type <cimport,nodecl,using> = @enum(cint){
  G_IN_ORDER = 0,
  G_PRE_ORDER = 1,
  G_POST_ORDER = 2,
  G_LEVEL_ORDER = 3
}
global GNodeTraverseFunc: type <cimport,nodecl> = @function(node: *GNode, data: gpointer): gboolean
global GNodeForeachFunc: type <cimport,nodecl> = @function(node: *GNode, data: gpointer): void
GNode = @record{
  data: gpointer,
  next: *GNode,
  prev: *GNode,
  parent: *GNode,
  children: *GNode
}
global GList: type <cimport,nodecl,forwarddecl> = @record{}
GList = @record{
  data: gpointer,
  next: *GList,
  prev: *GList
}
global GHashTable: type <cimport,nodecl,forwarddecl> = @record{}
global GHRFunc: type <cimport,nodecl> = @function(key: gpointer, value: gpointer, user_data: gpointer): gboolean
global GHashTableIter: type <cimport,nodecl,forwarddecl> = @record{}
GHashTableIter = @record{
  dummy1: gpointer,
  dummy2: gpointer,
  dummy3: gpointer,
  dummy4: cint,
  dummy5: gboolean,
  dummy6: gpointer
}
global GHmac: type <cimport,nodecl,forwarddecl> = @record{}
global GHook: type <cimport,nodecl,forwarddecl> = @record{}
global GHookList: type <cimport,nodecl,forwarddecl> = @record{}
global GHookCompareFunc: type <cimport,nodecl> = @function(new_hook: *GHook, sibling: *GHook): gint
global GHookFindFunc: type <cimport,nodecl> = @function(hook: *GHook, data: gpointer): gboolean
global GHookMarshaller: type <cimport,nodecl> = @function(hook: *GHook, marshal_data: gpointer): void
global GHookCheckMarshaller: type <cimport,nodecl> = @function(hook: *GHook, marshal_data: gpointer): gboolean
global GHookFunc: type <cimport,nodecl> = @function(data: gpointer): void
global GHookCheckFunc: type <cimport,nodecl> = @function(data: gpointer): gboolean
global GHookFinalizeFunc: type <cimport,nodecl> = @function(hook_list: *GHookList, hook: *GHook): void
global GHookFlagMask: type <cimport,nodecl,using> = @enum(cint){
  G_HOOK_FLAG_ACTIVE = 1,
  G_HOOK_FLAG_IN_CALL = 2,
  G_HOOK_FLAG_MASK = 15
}
GHookList = @record{
  seq_id: gulong,
  hook_size: guint,
  is_setup: guint,
  hooks: *GHook,
  dummy3: gpointer,
  finalize_hook: GHookFinalizeFunc,
  dummy: [2]gpointer
}
GHook = @record{
  data: gpointer,
  next: *GHook,
  prev: *GHook,
  ref_count: guint,
  hook_id: gulong,
  flags: guint,
  func: gpointer,
  destroy: GDestroyNotify
}
global GPollFD: type <cimport,nodecl,forwarddecl> = @record{}
global GPollFunc: type <cimport,nodecl> = @function(ufds: *GPollFD, nfsd: guint, timeout_: gint): gint
GPollFD = @record{
  fd: gint,
  events: gushort,
  revents: gushort
}
global GSList: type <cimport,nodecl,forwarddecl> = @record{}
GSList = @record{
  data: gpointer,
  next: *GSList
}
global GIOCondition: type <cimport,nodecl,using> = @enum(cint){
  G_IO_IN = 1,
  G_IO_OUT = 4,
  G_IO_PRI = 2,
  G_IO_ERR = 8,
  G_IO_HUP = 16,
  G_IO_NVAL = 32
}
global GMainContext: type <cimport,nodecl,forwarddecl> = @record{}
global GMainLoop: type <cimport,nodecl,forwarddecl> = @record{}
global GSource: type <cimport,nodecl,forwarddecl> = @record{}
global GSourcePrivate: type <cimport,nodecl,forwarddecl> = @record{}
global GSourceCallbackFuncs: type <cimport,nodecl,forwarddecl> = @record{}
global GSourceFuncs: type <cimport,nodecl,forwarddecl> = @record{}
global GSourceFunc: type <cimport,nodecl> = @function(user_data: gpointer): gboolean
global GChildWatchFunc: type <cimport,nodecl> = @function(pid: GPid, wait_status: gint, user_data: gpointer): void
global GSourceDisposeFunc: type <cimport,nodecl> = @function(source: *GSource): void
GSource = @record{
  callback_data: gpointer,
  callback_funcs: *GSourceCallbackFuncs,
  source_funcs: *GSourceFuncs,
  ref_count: guint,
  context: *GMainContext,
  priority: gint,
  flags: guint,
  source_id: guint,
  poll_fds: *GSList,
  prev: *GSource,
  next: *GSource,
  name: cstring,
  priv: *GSourcePrivate
}
GSourceCallbackFuncs = @record{
  ref: function(cb_data: gpointer): void,
  unref: function(cb_data: gpointer): void,
  get: function(cb_data: gpointer, source: *GSource, func: *GSourceFunc, data: *gpointer): void
}
global GSourceDummyMarshal: type <cimport,nodecl> = @function(): void
GSourceFuncs = @record{
  prepare: function(source: *GSource, timeout_: *gint): gboolean,
  check: function(source: *GSource): gboolean,
  dispatch: function(source: *GSource, callback: GSourceFunc, user_data: gpointer): gboolean,
  finalize: function(source: *GSource): void,
  closure_callback: GSourceFunc,
  closure_marshal: GSourceDummyMarshal
}
global GMainContextPusher: type <cimport,nodecl> = @void
global GClearHandleFunc: type <cimport,nodecl> = @function(handle_id: guint): void
global gunichar: type <cimport,nodecl> = @guint32
global gunichar2: type <cimport,nodecl> = @guint16
global GUnicodeType: type <cimport,nodecl,using> = @enum(cint){
  G_UNICODE_CONTROL = 0,
  G_UNICODE_FORMAT = 1,
  G_UNICODE_UNASSIGNED = 2,
  G_UNICODE_PRIVATE_USE = 3,
  G_UNICODE_SURROGATE = 4,
  G_UNICODE_LOWERCASE_LETTER = 5,
  G_UNICODE_MODIFIER_LETTER = 6,
  G_UNICODE_OTHER_LETTER = 7,
  G_UNICODE_TITLECASE_LETTER = 8,
  G_UNICODE_UPPERCASE_LETTER = 9,
  G_UNICODE_SPACING_MARK = 10,
  G_UNICODE_ENCLOSING_MARK = 11,
  G_UNICODE_NON_SPACING_MARK = 12,
  G_UNICODE_DECIMAL_NUMBER = 13,
  G_UNICODE_LETTER_NUMBER = 14,
  G_UNICODE_OTHER_NUMBER = 15,
  G_UNICODE_CONNECT_PUNCTUATION = 16,
  G_UNICODE_DASH_PUNCTUATION = 17,
  G_UNICODE_CLOSE_PUNCTUATION = 18,
  G_UNICODE_FINAL_PUNCTUATION = 19,
  G_UNICODE_INITIAL_PUNCTUATION = 20,
  G_UNICODE_OTHER_PUNCTUATION = 21,
  G_UNICODE_OPEN_PUNCTUATION = 22,
  G_UNICODE_CURRENCY_SYMBOL = 23,
  G_UNICODE_MODIFIER_SYMBOL = 24,
  G_UNICODE_MATH_SYMBOL = 25,
  G_UNICODE_OTHER_SYMBOL = 26,
  G_UNICODE_LINE_SEPARATOR = 27,
  G_UNICODE_PARAGRAPH_SEPARATOR = 28,
  G_UNICODE_SPACE_SEPARATOR = 29
}
global GUnicodeBreakType: type <cimport,nodecl,using> = @enum(cint){
  G_UNICODE_BREAK_MANDATORY = 0,
  G_UNICODE_BREAK_CARRIAGE_RETURN = 1,
  G_UNICODE_BREAK_LINE_FEED = 2,
  G_UNICODE_BREAK_COMBINING_MARK = 3,
  G_UNICODE_BREAK_SURROGATE = 4,
  G_UNICODE_BREAK_ZERO_WIDTH_SPACE = 5,
  G_UNICODE_BREAK_INSEPARABLE = 6,
  G_UNICODE_BREAK_NON_BREAKING_GLUE = 7,
  G_UNICODE_BREAK_CONTINGENT = 8,
  G_UNICODE_BREAK_SPACE = 9,
  G_UNICODE_BREAK_AFTER = 10,
  G_UNICODE_BREAK_BEFORE = 11,
  G_UNICODE_BREAK_BEFORE_AND_AFTER = 12,
  G_UNICODE_BREAK_HYPHEN = 13,
  G_UNICODE_BREAK_NON_STARTER = 14,
  G_UNICODE_BREAK_OPEN_PUNCTUATION = 15,
  G_UNICODE_BREAK_CLOSE_PUNCTUATION = 16,
  G_UNICODE_BREAK_QUOTATION = 17,
  G_UNICODE_BREAK_EXCLAMATION = 18,
  G_UNICODE_BREAK_IDEOGRAPHIC = 19,
  G_UNICODE_BREAK_NUMERIC = 20,
  G_UNICODE_BREAK_INFIX_SEPARATOR = 21,
  G_UNICODE_BREAK_SYMBOL = 22,
  G_UNICODE_BREAK_ALPHABETIC = 23,
  G_UNICODE_BREAK_PREFIX = 24,
  G_UNICODE_BREAK_POSTFIX = 25,
  G_UNICODE_BREAK_COMPLEX_CONTEXT = 26,
  G_UNICODE_BREAK_AMBIGUOUS = 27,
  G_UNICODE_BREAK_UNKNOWN = 28,
  G_UNICODE_BREAK_NEXT_LINE = 29,
  G_UNICODE_BREAK_WORD_JOINER = 30,
  G_UNICODE_BREAK_HANGUL_L_JAMO = 31,
  G_UNICODE_BREAK_HANGUL_V_JAMO = 32,
  G_UNICODE_BREAK_HANGUL_T_JAMO = 33,
  G_UNICODE_BREAK_HANGUL_LV_SYLLABLE = 34,
  G_UNICODE_BREAK_HANGUL_LVT_SYLLABLE = 35,
  G_UNICODE_BREAK_CLOSE_PARANTHESIS = 36,
  G_UNICODE_BREAK_CLOSE_PARENTHESIS = 36,
  G_UNICODE_BREAK_CONDITIONAL_JAPANESE_STARTER = 37,
  G_UNICODE_BREAK_HEBREW_LETTER = 38,
  G_UNICODE_BREAK_REGIONAL_INDICATOR = 39,
  G_UNICODE_BREAK_EMOJI_BASE = 40,
  G_UNICODE_BREAK_EMOJI_MODIFIER = 41,
  G_UNICODE_BREAK_ZERO_WIDTH_JOINER = 42
}
global GUnicodeScript: type <cimport,nodecl,using> = @enum(cint){
  G_UNICODE_SCRIPT_INVALID_CODE = -1,
  G_UNICODE_SCRIPT_COMMON = 0,
  G_UNICODE_SCRIPT_INHERITED = 1,
  G_UNICODE_SCRIPT_ARABIC = 2,
  G_UNICODE_SCRIPT_ARMENIAN = 3,
  G_UNICODE_SCRIPT_BENGALI = 4,
  G_UNICODE_SCRIPT_BOPOMOFO = 5,
  G_UNICODE_SCRIPT_CHEROKEE = 6,
  G_UNICODE_SCRIPT_COPTIC = 7,
  G_UNICODE_SCRIPT_CYRILLIC = 8,
  G_UNICODE_SCRIPT_DESERET = 9,
  G_UNICODE_SCRIPT_DEVANAGARI = 10,
  G_UNICODE_SCRIPT_ETHIOPIC = 11,
  G_UNICODE_SCRIPT_GEORGIAN = 12,
  G_UNICODE_SCRIPT_GOTHIC = 13,
  G_UNICODE_SCRIPT_GREEK = 14,
  G_UNICODE_SCRIPT_GUJARATI = 15,
  G_UNICODE_SCRIPT_GURMUKHI = 16,
  G_UNICODE_SCRIPT_HAN = 17,
  G_UNICODE_SCRIPT_HANGUL = 18,
  G_UNICODE_SCRIPT_HEBREW = 19,
  G_UNICODE_SCRIPT_HIRAGANA = 20,
  G_UNICODE_SCRIPT_KANNADA = 21,
  G_UNICODE_SCRIPT_KATAKANA = 22,
  G_UNICODE_SCRIPT_KHMER = 23,
  G_UNICODE_SCRIPT_LAO = 24,
  G_UNICODE_SCRIPT_LATIN = 25,
  G_UNICODE_SCRIPT_MALAYALAM = 26,
  G_UNICODE_SCRIPT_MONGOLIAN = 27,
  G_UNICODE_SCRIPT_MYANMAR = 28,
  G_UNICODE_SCRIPT_OGHAM = 29,
  G_UNICODE_SCRIPT_OLD_ITALIC = 30,
  G_UNICODE_SCRIPT_ORIYA = 31,
  G_UNICODE_SCRIPT_RUNIC = 32,
  G_UNICODE_SCRIPT_SINHALA = 33,
  G_UNICODE_SCRIPT_SYRIAC = 34,
  G_UNICODE_SCRIPT_TAMIL = 35,
  G_UNICODE_SCRIPT_TELUGU = 36,
  G_UNICODE_SCRIPT_THAANA = 37,
  G_UNICODE_SCRIPT_THAI = 38,
  G_UNICODE_SCRIPT_TIBETAN = 39,
  G_UNICODE_SCRIPT_CANADIAN_ABORIGINAL = 40,
  G_UNICODE_SCRIPT_YI = 41,
  G_UNICODE_SCRIPT_TAGALOG = 42,
  G_UNICODE_SCRIPT_HANUNOO = 43,
  G_UNICODE_SCRIPT_BUHID = 44,
  G_UNICODE_SCRIPT_TAGBANWA = 45,
  G_UNICODE_SCRIPT_BRAILLE = 46,
  G_UNICODE_SCRIPT_CYPRIOT = 47,
  G_UNICODE_SCRIPT_LIMBU = 48,
  G_UNICODE_SCRIPT_OSMANYA = 49,
  G_UNICODE_SCRIPT_SHAVIAN = 50,
  G_UNICODE_SCRIPT_LINEAR_B = 51,
  G_UNICODE_SCRIPT_TAI_LE = 52,
  G_UNICODE_SCRIPT_UGARITIC = 53,
  G_UNICODE_SCRIPT_NEW_TAI_LUE = 54,
  G_UNICODE_SCRIPT_BUGINESE = 55,
  G_UNICODE_SCRIPT_GLAGOLITIC = 56,
  G_UNICODE_SCRIPT_TIFINAGH = 57,
  G_UNICODE_SCRIPT_SYLOTI_NAGRI = 58,
  G_UNICODE_SCRIPT_OLD_PERSIAN = 59,
  G_UNICODE_SCRIPT_KHAROSHTHI = 60,
  G_UNICODE_SCRIPT_UNKNOWN = 61,
  G_UNICODE_SCRIPT_BALINESE = 62,
  G_UNICODE_SCRIPT_CUNEIFORM = 63,
  G_UNICODE_SCRIPT_PHOENICIAN = 64,
  G_UNICODE_SCRIPT_PHAGS_PA = 65,
  G_UNICODE_SCRIPT_NKO = 66,
  G_UNICODE_SCRIPT_KAYAH_LI = 67,
  G_UNICODE_SCRIPT_LEPCHA = 68,
  G_UNICODE_SCRIPT_REJANG = 69,
  G_UNICODE_SCRIPT_SUNDANESE = 70,
  G_UNICODE_SCRIPT_SAURASHTRA = 71,
  G_UNICODE_SCRIPT_CHAM = 72,
  G_UNICODE_SCRIPT_OL_CHIKI = 73,
  G_UNICODE_SCRIPT_VAI = 74,
  G_UNICODE_SCRIPT_CARIAN = 75,
  G_UNICODE_SCRIPT_LYCIAN = 76,
  G_UNICODE_SCRIPT_LYDIAN = 77,
  G_UNICODE_SCRIPT_AVESTAN = 78,
  G_UNICODE_SCRIPT_BAMUM = 79,
  G_UNICODE_SCRIPT_EGYPTIAN_HIEROGLYPHS = 80,
  G_UNICODE_SCRIPT_IMPERIAL_ARAMAIC = 81,
  G_UNICODE_SCRIPT_INSCRIPTIONAL_PAHLAVI = 82,
  G_UNICODE_SCRIPT_INSCRIPTIONAL_PARTHIAN = 83,
  G_UNICODE_SCRIPT_JAVANESE = 84,
  G_UNICODE_SCRIPT_KAITHI = 85,
  G_UNICODE_SCRIPT_LISU = 86,
  G_UNICODE_SCRIPT_MEETEI_MAYEK = 87,
  G_UNICODE_SCRIPT_OLD_SOUTH_ARABIAN = 88,
  G_UNICODE_SCRIPT_OLD_TURKIC = 89,
  G_UNICODE_SCRIPT_SAMARITAN = 90,
  G_UNICODE_SCRIPT_TAI_THAM = 91,
  G_UNICODE_SCRIPT_TAI_VIET = 92,
  G_UNICODE_SCRIPT_BATAK = 93,
  G_UNICODE_SCRIPT_BRAHMI = 94,
  G_UNICODE_SCRIPT_MANDAIC = 95,
  G_UNICODE_SCRIPT_CHAKMA = 96,
  G_UNICODE_SCRIPT_MEROITIC_CURSIVE = 97,
  G_UNICODE_SCRIPT_MEROITIC_HIEROGLYPHS = 98,
  G_UNICODE_SCRIPT_MIAO = 99,
  G_UNICODE_SCRIPT_SHARADA = 100,
  G_UNICODE_SCRIPT_SORA_SOMPENG = 101,
  G_UNICODE_SCRIPT_TAKRI = 102,
  G_UNICODE_SCRIPT_BASSA_VAH = 103,
  G_UNICODE_SCRIPT_CAUCASIAN_ALBANIAN = 104,
  G_UNICODE_SCRIPT_DUPLOYAN = 105,
  G_UNICODE_SCRIPT_ELBASAN = 106,
  G_UNICODE_SCRIPT_GRANTHA = 107,
  G_UNICODE_SCRIPT_KHOJKI = 108,
  G_UNICODE_SCRIPT_KHUDAWADI = 109,
  G_UNICODE_SCRIPT_LINEAR_A = 110,
  G_UNICODE_SCRIPT_MAHAJANI = 111,
  G_UNICODE_SCRIPT_MANICHAEAN = 112,
  G_UNICODE_SCRIPT_MENDE_KIKAKUI = 113,
  G_UNICODE_SCRIPT_MODI = 114,
  G_UNICODE_SCRIPT_MRO = 115,
  G_UNICODE_SCRIPT_NABATAEAN = 116,
  G_UNICODE_SCRIPT_OLD_NORTH_ARABIAN = 117,
  G_UNICODE_SCRIPT_OLD_PERMIC = 118,
  G_UNICODE_SCRIPT_PAHAWH_HMONG = 119,
  G_UNICODE_SCRIPT_PALMYRENE = 120,
  G_UNICODE_SCRIPT_PAU_CIN_HAU = 121,
  G_UNICODE_SCRIPT_PSALTER_PAHLAVI = 122,
  G_UNICODE_SCRIPT_SIDDHAM = 123,
  G_UNICODE_SCRIPT_TIRHUTA = 124,
  G_UNICODE_SCRIPT_WARANG_CITI = 125,
  G_UNICODE_SCRIPT_AHOM = 126,
  G_UNICODE_SCRIPT_ANATOLIAN_HIEROGLYPHS = 127,
  G_UNICODE_SCRIPT_HATRAN = 128,
  G_UNICODE_SCRIPT_MULTANI = 129,
  G_UNICODE_SCRIPT_OLD_HUNGARIAN = 130,
  G_UNICODE_SCRIPT_SIGNWRITING = 131,
  G_UNICODE_SCRIPT_ADLAM = 132,
  G_UNICODE_SCRIPT_BHAIKSUKI = 133,
  G_UNICODE_SCRIPT_MARCHEN = 134,
  G_UNICODE_SCRIPT_NEWA = 135,
  G_UNICODE_SCRIPT_OSAGE = 136,
  G_UNICODE_SCRIPT_TANGUT = 137,
  G_UNICODE_SCRIPT_MASARAM_GONDI = 138,
  G_UNICODE_SCRIPT_NUSHU = 139,
  G_UNICODE_SCRIPT_SOYOMBO = 140,
  G_UNICODE_SCRIPT_ZANABAZAR_SQUARE = 141,
  G_UNICODE_SCRIPT_DOGRA = 142,
  G_UNICODE_SCRIPT_GUNJALA_GONDI = 143,
  G_UNICODE_SCRIPT_HANIFI_ROHINGYA = 144,
  G_UNICODE_SCRIPT_MAKASAR = 145,
  G_UNICODE_SCRIPT_MEDEFAIDRIN = 146,
  G_UNICODE_SCRIPT_OLD_SOGDIAN = 147,
  G_UNICODE_SCRIPT_SOGDIAN = 148,
  G_UNICODE_SCRIPT_ELYMAIC = 149,
  G_UNICODE_SCRIPT_NANDINAGARI = 150,
  G_UNICODE_SCRIPT_NYIAKENG_PUACHUE_HMONG = 151,
  G_UNICODE_SCRIPT_WANCHO = 152,
  G_UNICODE_SCRIPT_CHORASMIAN = 153,
  G_UNICODE_SCRIPT_DIVES_AKURU = 154,
  G_UNICODE_SCRIPT_KHITAN_SMALL_SCRIPT = 155,
  G_UNICODE_SCRIPT_YEZIDI = 156,
  G_UNICODE_SCRIPT_CYPRO_MINOAN = 157,
  G_UNICODE_SCRIPT_OLD_UYGHUR = 158,
  G_UNICODE_SCRIPT_TANGSA = 159,
  G_UNICODE_SCRIPT_TOTO = 160,
  G_UNICODE_SCRIPT_VITHKUQI = 161
}
global GNormalizeMode: type <cimport,nodecl,using> = @enum(cint){
  G_NORMALIZE_DEFAULT = 0,
  G_NORMALIZE_NFD = 0,
  G_NORMALIZE_DEFAULT_COMPOSE = 1,
  G_NORMALIZE_NFC = 1,
  G_NORMALIZE_ALL = 2,
  G_NORMALIZE_NFKD = 2,
  G_NORMALIZE_ALL_COMPOSE = 3,
  G_NORMALIZE_NFKC = 3
}
global GString: type <cimport,nodecl,forwarddecl> = @record{}
GString = @record{
  str: *gchar,
  len: gsize,
  allocated_len: gsize
}
global GIOChannel: type <cimport,nodecl,forwarddecl> = @record{}
global GIOFuncs: type <cimport,nodecl,forwarddecl> = @record{}
global GIOError: type <cimport,nodecl,using> = @enum(cint){
  G_IO_ERROR_NONE = 0,
  G_IO_ERROR_AGAIN = 1,
  G_IO_ERROR_INVAL = 2,
  G_IO_ERROR_UNKNOWN = 3
}
global GIOChannelError: type <cimport,nodecl,using> = @enum(cint){
  G_IO_CHANNEL_ERROR_FBIG = 0,
  G_IO_CHANNEL_ERROR_INVAL = 1,
  G_IO_CHANNEL_ERROR_IO = 2,
  G_IO_CHANNEL_ERROR_ISDIR = 3,
  G_IO_CHANNEL_ERROR_NOSPC = 4,
  G_IO_CHANNEL_ERROR_NXIO = 5,
  G_IO_CHANNEL_ERROR_OVERFLOW = 6,
  G_IO_CHANNEL_ERROR_PIPE = 7,
  G_IO_CHANNEL_ERROR_FAILED = 8
}
global GIOStatus: type <cimport,nodecl,using> = @enum(cint){
  G_IO_STATUS_ERROR = 0,
  G_IO_STATUS_NORMAL = 1,
  G_IO_STATUS_EOF = 2,
  G_IO_STATUS_AGAIN = 3
}
global GSeekType: type <cimport,nodecl,using> = @enum(cint){
  G_SEEK_CUR = 0,
  G_SEEK_SET = 1,
  G_SEEK_END = 2
}
global GIOFlags: type <cimport,nodecl,using> = @enum(cint){
  G_IO_FLAG_APPEND = 1,
  G_IO_FLAG_NONBLOCK = 2,
  G_IO_FLAG_IS_READABLE = 4,
  G_IO_FLAG_IS_WRITABLE = 8,
  G_IO_FLAG_IS_WRITEABLE = 8,
  G_IO_FLAG_IS_SEEKABLE = 16,
  G_IO_FLAG_MASK = 31,
  G_IO_FLAG_GET_MASK = 31,
  G_IO_FLAG_SET_MASK = 3
}
GIOChannel = @record{
  ref_count: gint,
  funcs: *GIOFuncs,
  encoding: *gchar,
  read_cd: GIConv,
  write_cd: GIConv,
  line_term: *gchar,
  line_term_len: guint,
  buf_size: gsize,
  read_buf: *GString,
  encoded_read_buf: *GString,
  write_buf: *GString,
  partial_write_buf: [6]gchar,
  use_buffer: guint,
  do_encode: guint,
  close_on_unref: guint,
  is_readable: guint,
  is_writeable: guint,
  is_seekable: guint,
  reserved1: gpointer,
  reserved2: gpointer
}
global GIOFunc: type <cimport,nodecl> = @function(source: *GIOChannel, condition: GIOCondition, data: gpointer): gboolean
GIOFuncs = @record{
  io_read: function(channel: *GIOChannel, buf: *gchar, count: gsize, bytes_read: *gsize, err: **GError): GIOStatus,
  io_write: function(channel: *GIOChannel, buf: *gchar, count: gsize, bytes_written: *gsize, err: **GError): GIOStatus,
  io_seek: function(channel: *GIOChannel, offset: gint64, type: GSeekType, err: **GError): GIOStatus,
  io_close: function(channel: *GIOChannel, err: **GError): GIOStatus,
  io_create_watch: function(channel: *GIOChannel, condition: GIOCondition): *GSource,
  io_free: function(channel: *GIOChannel): void,
  io_set_flags: function(channel: *GIOChannel, flags: GIOFlags, err: **GError): GIOStatus,
  io_get_flags: function(channel: *GIOChannel): GIOFlags
}
global GKeyFileError: type <cimport,nodecl,using> = @enum(cint){
  G_KEY_FILE_ERROR_UNKNOWN_ENCODING = 0,
  G_KEY_FILE_ERROR_PARSE = 1,
  G_KEY_FILE_ERROR_NOT_FOUND = 2,
  G_KEY_FILE_ERROR_KEY_NOT_FOUND = 3,
  G_KEY_FILE_ERROR_GROUP_NOT_FOUND = 4,
  G_KEY_FILE_ERROR_INVALID_VALUE = 5
}
global GKeyFile: type <cimport,nodecl,forwarddecl> = @record{}
global GKeyFileFlags: type <cimport,nodecl,using> = @enum(cint){
  G_KEY_FILE_NONE = 0,
  G_KEY_FILE_KEEP_COMMENTS = 1,
  G_KEY_FILE_KEEP_TRANSLATIONS = 2
}
global GMappedFile: type <cimport,nodecl,forwarddecl> = @record{}
global GMarkupError: type <cimport,nodecl,using> = @enum(cint){
  G_MARKUP_ERROR_BAD_UTF8 = 0,
  G_MARKUP_ERROR_EMPTY = 1,
  G_MARKUP_ERROR_PARSE = 2,
  G_MARKUP_ERROR_UNKNOWN_ELEMENT = 3,
  G_MARKUP_ERROR_UNKNOWN_ATTRIBUTE = 4,
  G_MARKUP_ERROR_INVALID_CONTENT = 5,
  G_MARKUP_ERROR_MISSING_ATTRIBUTE = 6
}
global GMarkupParseFlags: type <cimport,nodecl,using> = @enum(cint){
  G_MARKUP_DO_NOT_USE_THIS_UNSUPPORTED_FLAG = 1,
  G_MARKUP_TREAT_CDATA_AS_TEXT = 2,
  G_MARKUP_PREFIX_ERROR_POSITION = 4,
  G_MARKUP_IGNORE_QUALIFIED = 8
}
global GMarkupParseContext: type <cimport,nodecl,forwarddecl> = @record{}
global GMarkupParser: type <cimport,nodecl,forwarddecl> = @record{}
GMarkupParser = @record{
  start_element: function(context: *GMarkupParseContext, element_name: *gchar, attribute_names: **gchar, attribute_values: **gchar, user_data: gpointer, error: **GError): void,
  end_element: function(context: *GMarkupParseContext, element_name: *gchar, user_data: gpointer, error: **GError): void,
  text: function(context: *GMarkupParseContext, text: *gchar, text_len: gsize, user_data: gpointer, error: **GError): void,
  passthrough: function(context: *GMarkupParseContext, passthrough_text: *gchar, text_len: gsize, user_data: gpointer, error: **GError): void,
  error: function(context: *GMarkupParseContext, error: *GError, user_data: gpointer): void
}
global GMarkupCollectType: type <cimport,nodecl,using> = @enum(cint){
  G_MARKUP_COLLECT_INVALID = 0,
  G_MARKUP_COLLECT_STRING = 1,
  G_MARKUP_COLLECT_STRDUP = 2,
  G_MARKUP_COLLECT_BOOLEAN = 3,
  G_MARKUP_COLLECT_TRISTATE = 4,
  G_MARKUP_COLLECT_OPTIONAL = 65536
}
global GVariantType: type <cimport,nodecl,forwarddecl> = @record{}
global GVariant: type <cimport,nodecl,forwarddecl> = @record{}
global GVariantClass: type <cimport,nodecl,using> = @enum(cint){
  G_VARIANT_CLASS_BOOLEAN = 98,
  G_VARIANT_CLASS_BYTE = 121,
  G_VARIANT_CLASS_INT16 = 110,
  G_VARIANT_CLASS_UINT16 = 113,
  G_VARIANT_CLASS_INT32 = 105,
  G_VARIANT_CLASS_UINT32 = 117,
  G_VARIANT_CLASS_INT64 = 120,
  G_VARIANT_CLASS_UINT64 = 116,
  G_VARIANT_CLASS_HANDLE = 104,
  G_VARIANT_CLASS_DOUBLE = 100,
  G_VARIANT_CLASS_STRING = 115,
  G_VARIANT_CLASS_OBJECT_PATH = 111,
  G_VARIANT_CLASS_SIGNATURE = 103,
  G_VARIANT_CLASS_VARIANT = 118,
  G_VARIANT_CLASS_MAYBE = 109,
  G_VARIANT_CLASS_ARRAY = 97,
  G_VARIANT_CLASS_TUPLE = 40,
  G_VARIANT_CLASS_DICT_ENTRY = 123
}
global GVariantIter: type <cimport,nodecl,forwarddecl> = @record{}
GVariantIter = @record{
  x: [16]gsize
}
global GVariantBuilder: type <cimport,nodecl,forwarddecl> = @record{}
GVariantBuilder = @record{
  u: union{
    s: record{
      partial_magic: gsize,
      type: *GVariantType,
      y: [14]gsize
    },
    x: [16]gsize
  }
}
global GVariantParseError: type <cimport,nodecl,using> = @enum(cint){
  G_VARIANT_PARSE_ERROR_FAILED = 0,
  G_VARIANT_PARSE_ERROR_BASIC_TYPE_EXPECTED = 1,
  G_VARIANT_PARSE_ERROR_CANNOT_INFER_TYPE = 2,
  G_VARIANT_PARSE_ERROR_DEFINITE_TYPE_EXPECTED = 3,
  G_VARIANT_PARSE_ERROR_INPUT_NOT_AT_END = 4,
  G_VARIANT_PARSE_ERROR_INVALID_CHARACTER = 5,
  G_VARIANT_PARSE_ERROR_INVALID_FORMAT_STRING = 6,
  G_VARIANT_PARSE_ERROR_INVALID_OBJECT_PATH = 7,
  G_VARIANT_PARSE_ERROR_INVALID_SIGNATURE = 8,
  G_VARIANT_PARSE_ERROR_INVALID_TYPE_STRING = 9,
  G_VARIANT_PARSE_ERROR_NO_COMMON_TYPE = 10,
  G_VARIANT_PARSE_ERROR_NUMBER_OUT_OF_RANGE = 11,
  G_VARIANT_PARSE_ERROR_NUMBER_TOO_BIG = 12,
  G_VARIANT_PARSE_ERROR_TYPE_ERROR = 13,
  G_VARIANT_PARSE_ERROR_UNEXPECTED_TOKEN = 14,
  G_VARIANT_PARSE_ERROR_UNKNOWN_KEYWORD = 15,
  G_VARIANT_PARSE_ERROR_UNTERMINATED_STRING_CONSTANT = 16,
  G_VARIANT_PARSE_ERROR_VALUE_EXPECTED = 17,
  G_VARIANT_PARSE_ERROR_RECURSION = 18
}
global GVariantDict: type <cimport,nodecl,forwarddecl> = @record{}
GVariantDict = @record{
  u: union{
    s: record{
      asv: *GVariant,
      partial_magic: gsize,
      y: [14]gsize
    },
    x: [16]gsize
  }
}
global GLogLevelFlags: type = @cint
global G_LOG_FLAG_RECURSION: cint <cimport,nodecl,const>
global G_LOG_FLAG_FATAL: cint <cimport,nodecl,const>
global G_LOG_LEVEL_ERROR: cint <cimport,nodecl,const>
global G_LOG_LEVEL_CRITICAL: cint <cimport,nodecl,const>
global G_LOG_LEVEL_WARNING: cint <cimport,nodecl,const>
global G_LOG_LEVEL_MESSAGE: cint <cimport,nodecl,const>
global G_LOG_LEVEL_INFO: cint <cimport,nodecl,const>
global G_LOG_LEVEL_DEBUG: cint <cimport,nodecl,const>
global G_LOG_LEVEL_MASK: cint <cimport,nodecl,const>
global GLogFunc: type <cimport,nodecl> = @function(log_domain: *gchar, log_level: GLogLevelFlags, message: *gchar, user_data: gpointer): void
global GLogWriterOutput: type <cimport,nodecl,using> = @enum(cint){
  G_LOG_WRITER_HANDLED = 1,
  G_LOG_WRITER_UNHANDLED = 0
}
global GLogField: type <cimport,nodecl,forwarddecl> = @record{}
GLogField = @record{
  key: *gchar,
  value: gconstpointer,
  length: gssize
}
global GLogWriterFunc: type <cimport,nodecl> = @function(log_level: GLogLevelFlags, fields: *GLogField, n_fields: gsize, user_data: gpointer): GLogWriterOutput
global GPrintFunc: type <cimport,nodecl> = @function(string: *gchar): void
global GOptionContext: type <cimport,nodecl,forwarddecl> = @record{}
global GOptionGroup: type <cimport,nodecl,forwarddecl> = @record{}
global GOptionEntry: type <cimport,nodecl,forwarddecl> = @record{}
global GOptionFlags: type <cimport,nodecl,using> = @enum(cint){
  G_OPTION_FLAG_NONE = 0,
  G_OPTION_FLAG_HIDDEN = 1,
  G_OPTION_FLAG_IN_MAIN = 2,
  G_OPTION_FLAG_REVERSE = 4,
  G_OPTION_FLAG_NO_ARG = 8,
  G_OPTION_FLAG_FILENAME = 16,
  G_OPTION_FLAG_OPTIONAL_ARG = 32,
  G_OPTION_FLAG_NOALIAS = 64
}
global GOptionArg: type <cimport,nodecl,using> = @enum(cint){
  G_OPTION_ARG_NONE = 0,
  G_OPTION_ARG_STRING = 1,
  G_OPTION_ARG_INT = 2,
  G_OPTION_ARG_CALLBACK = 3,
  G_OPTION_ARG_FILENAME = 4,
  G_OPTION_ARG_STRING_ARRAY = 5,
  G_OPTION_ARG_FILENAME_ARRAY = 6,
  G_OPTION_ARG_DOUBLE = 7,
  G_OPTION_ARG_INT64 = 8
}
global GOptionArgFunc: type <cimport,nodecl> = @function(option_name: *gchar, value: *gchar, data: gpointer, error: **GError): gboolean
global GOptionParseFunc: type <cimport,nodecl> = @function(context: *GOptionContext, group: *GOptionGroup, data: gpointer, error: **GError): gboolean
global GOptionErrorFunc: type <cimport,nodecl> = @function(context: *GOptionContext, group: *GOptionGroup, data: gpointer, error: **GError): void
global GOptionError: type <cimport,nodecl,using> = @enum(cint){
  G_OPTION_ERROR_UNKNOWN_OPTION = 0,
  G_OPTION_ERROR_BAD_VALUE = 1,
  G_OPTION_ERROR_FAILED = 2
}
GOptionEntry = @record{
  long_name: *gchar,
  short_name: gchar,
  flags: gint,
  arg: GOptionArg,
  arg_data: gpointer,
  description: *gchar,
  arg_description: *gchar
}
global GPatternSpec: type <cimport,nodecl,forwarddecl> = @record{}
global GQueue: type <cimport,nodecl,forwarddecl> = @record{}
GQueue = @record{
  head: *GList,
  tail: *GList,
  length: guint
}
global GRand: type <cimport,nodecl,forwarddecl> = @record{}
global GRefString: type <cimport,nodecl> = @cchar
global GRegexError: type <cimport,nodecl,using> = @enum(cint){
  G_REGEX_ERROR_COMPILE = 0,
  G_REGEX_ERROR_OPTIMIZE = 1,
  G_REGEX_ERROR_REPLACE = 2,
  G_REGEX_ERROR_MATCH = 3,
  G_REGEX_ERROR_INTERNAL = 4,
  G_REGEX_ERROR_STRAY_BACKSLASH = 101,
  G_REGEX_ERROR_MISSING_CONTROL_CHAR = 102,
  G_REGEX_ERROR_UNRECOGNIZED_ESCAPE = 103,
  G_REGEX_ERROR_QUANTIFIERS_OUT_OF_ORDER = 104,
  G_REGEX_ERROR_QUANTIFIER_TOO_BIG = 105,
  G_REGEX_ERROR_UNTERMINATED_CHARACTER_CLASS = 106,
  G_REGEX_ERROR_INVALID_ESCAPE_IN_CHARACTER_CLASS = 107,
  G_REGEX_ERROR_RANGE_OUT_OF_ORDER = 108,
  G_REGEX_ERROR_NOTHING_TO_REPEAT = 109,
  G_REGEX_ERROR_UNRECOGNIZED_CHARACTER = 112,
  G_REGEX_ERROR_POSIX_NAMED_CLASS_OUTSIDE_CLASS = 113,
  G_REGEX_ERROR_UNMATCHED_PARENTHESIS = 114,
  G_REGEX_ERROR_INEXISTENT_SUBPATTERN_REFERENCE = 115,
  G_REGEX_ERROR_UNTERMINATED_COMMENT = 118,
  G_REGEX_ERROR_EXPRESSION_TOO_LARGE = 120,
  G_REGEX_ERROR_MEMORY_ERROR = 121,
  G_REGEX_ERROR_VARIABLE_LENGTH_LOOKBEHIND = 125,
  G_REGEX_ERROR_MALFORMED_CONDITION = 126,
  G_REGEX_ERROR_TOO_MANY_CONDITIONAL_BRANCHES = 127,
  G_REGEX_ERROR_ASSERTION_EXPECTED = 128,
  G_REGEX_ERROR_UNKNOWN_POSIX_CLASS_NAME = 130,
  G_REGEX_ERROR_POSIX_COLLATING_ELEMENTS_NOT_SUPPORTED = 131,
  G_REGEX_ERROR_HEX_CODE_TOO_LARGE = 134,
  G_REGEX_ERROR_INVALID_CONDITION = 135,
  G_REGEX_ERROR_SINGLE_BYTE_MATCH_IN_LOOKBEHIND = 136,
  G_REGEX_ERROR_INFINITE_LOOP = 140,
  G_REGEX_ERROR_MISSING_SUBPATTERN_NAME_TERMINATOR = 142,
  G_REGEX_ERROR_DUPLICATE_SUBPATTERN_NAME = 143,
  G_REGEX_ERROR_MALFORMED_PROPERTY = 146,
  G_REGEX_ERROR_UNKNOWN_PROPERTY = 147,
  G_REGEX_ERROR_SUBPATTERN_NAME_TOO_LONG = 148,
  G_REGEX_ERROR_TOO_MANY_SUBPATTERNS = 149,
  G_REGEX_ERROR_INVALID_OCTAL_VALUE = 151,
  G_REGEX_ERROR_TOO_MANY_BRANCHES_IN_DEFINE = 154,
  G_REGEX_ERROR_DEFINE_REPETION = 155,
  G_REGEX_ERROR_INCONSISTENT_NEWLINE_OPTIONS = 156,
  G_REGEX_ERROR_MISSING_BACK_REFERENCE = 157,
  G_REGEX_ERROR_INVALID_RELATIVE_REFERENCE = 158,
  G_REGEX_ERROR_BACKTRACKING_CONTROL_VERB_ARGUMENT_FORBIDDEN = 159,
  G_REGEX_ERROR_UNKNOWN_BACKTRACKING_CONTROL_VERB = 160,
  G_REGEX_ERROR_NUMBER_TOO_BIG = 161,
  G_REGEX_ERROR_MISSING_SUBPATTERN_NAME = 162,
  G_REGEX_ERROR_MISSING_DIGIT = 163,
  G_REGEX_ERROR_INVALID_DATA_CHARACTER = 164,
  G_REGEX_ERROR_EXTRA_SUBPATTERN_NAME = 165,
  G_REGEX_ERROR_BACKTRACKING_CONTROL_VERB_ARGUMENT_REQUIRED = 166,
  G_REGEX_ERROR_INVALID_CONTROL_CHAR = 168,
  G_REGEX_ERROR_MISSING_NAME = 169,
  G_REGEX_ERROR_NOT_SUPPORTED_IN_CLASS = 171,
  G_REGEX_ERROR_TOO_MANY_FORWARD_REFERENCES = 172,
  G_REGEX_ERROR_NAME_TOO_LONG = 175,
  G_REGEX_ERROR_CHARACTER_VALUE_TOO_LARGE = 176
}
global GRegexCompileFlags: type <cimport,nodecl,using> = @enum(cint){
  G_REGEX_CASELESS = 1,
  G_REGEX_MULTILINE = 2,
  G_REGEX_DOTALL = 4,
  G_REGEX_EXTENDED = 8,
  G_REGEX_ANCHORED = 16,
  G_REGEX_DOLLAR_ENDONLY = 32,
  G_REGEX_UNGREEDY = 512,
  G_REGEX_RAW = 2048,
  G_REGEX_NO_AUTO_CAPTURE = 4096,
  G_REGEX_OPTIMIZE = 8192,
  G_REGEX_FIRSTLINE = 262144,
  G_REGEX_DUPNAMES = 524288,
  G_REGEX_NEWLINE_CR = 1048576,
  G_REGEX_NEWLINE_LF = 2097152,
  G_REGEX_NEWLINE_CRLF = 3145728,
  G_REGEX_NEWLINE_ANYCRLF = 5242880,
  G_REGEX_BSR_ANYCRLF = 8388608,
  G_REGEX_JAVASCRIPT_COMPAT = 33554432
}
global GRegexMatchFlags: type <cimport,nodecl,using> = @enum(cint){
  G_REGEX_MATCH_ANCHORED = 16,
  G_REGEX_MATCH_NOTBOL = 128,
  G_REGEX_MATCH_NOTEOL = 256,
  G_REGEX_MATCH_NOTEMPTY = 1024,
  G_REGEX_MATCH_PARTIAL = 32768,
  G_REGEX_MATCH_NEWLINE_CR = 1048576,
  G_REGEX_MATCH_NEWLINE_LF = 2097152,
  G_REGEX_MATCH_NEWLINE_CRLF = 3145728,
  G_REGEX_MATCH_NEWLINE_ANY = 4194304,
  G_REGEX_MATCH_NEWLINE_ANYCRLF = 5242880,
  G_REGEX_MATCH_BSR_ANYCRLF = 8388608,
  G_REGEX_MATCH_BSR_ANY = 16777216,
  G_REGEX_MATCH_PARTIAL_SOFT = 32768,
  G_REGEX_MATCH_PARTIAL_HARD = 134217728,
  G_REGEX_MATCH_NOTEMPTY_ATSTART = 268435456
}
global GRegex: type <cimport,nodecl,forwarddecl> = @record{}
global GMatchInfo: type <cimport,nodecl,forwarddecl> = @record{}
global GRegexEvalCallback: type <cimport,nodecl> = @function(match_info: *GMatchInfo, result: *GString, user_data: gpointer): gboolean
global GScanner: type <cimport,nodecl,forwarddecl> = @record{}
global GScannerConfig: type <cimport,nodecl,forwarddecl> = @record{}
global GTokenValue: type <cimport,nodecl,forwarddecl> = @union{}
global GScannerMsgFunc: type <cimport,nodecl> = @function(scanner: *GScanner, message: *gchar, error: gboolean): void
global GErrorType: type <cimport,nodecl,using> = @enum(cint){
  G_ERR_UNKNOWN = 0,
  G_ERR_UNEXP_EOF = 1,
  G_ERR_UNEXP_EOF_IN_STRING = 2,
  G_ERR_UNEXP_EOF_IN_COMMENT = 3,
  G_ERR_NON_DIGIT_IN_CONST = 4,
  G_ERR_DIGIT_RADIX = 5,
  G_ERR_FLOAT_RADIX = 6,
  G_ERR_FLOAT_MALFORMED = 7
}
global GTokenType: type <cimport,nodecl,using> = @enum(cint){
  G_TOKEN_EOF = 0,
  G_TOKEN_LEFT_PAREN = 40,
  G_TOKEN_RIGHT_PAREN = 41,
  G_TOKEN_LEFT_CURLY = 123,
  G_TOKEN_RIGHT_CURLY = 125,
  G_TOKEN_LEFT_BRACE = 91,
  G_TOKEN_RIGHT_BRACE = 93,
  G_TOKEN_EQUAL_SIGN = 61,
  G_TOKEN_COMMA = 44,
  G_TOKEN_NONE = 256,
  G_TOKEN_ERROR = 257,
  G_TOKEN_CHAR = 258,
  G_TOKEN_BINARY = 259,
  G_TOKEN_OCTAL = 260,
  G_TOKEN_INT = 261,
  G_TOKEN_HEX = 262,
  G_TOKEN_FLOAT = 263,
  G_TOKEN_STRING = 264,
  G_TOKEN_SYMBOL = 265,
  G_TOKEN_IDENTIFIER = 266,
  G_TOKEN_IDENTIFIER_NULL = 267,
  G_TOKEN_COMMENT_SINGLE = 268,
  G_TOKEN_COMMENT_MULTI = 269,
  G_TOKEN_LAST = 270
}
GTokenValue = @union{
  v_symbol: gpointer,
  v_identifier: *gchar,
  v_binary: gulong,
  v_octal: gulong,
  v_int: gulong,
  v_int64: guint64,
  v_float: gdouble,
  v_hex: gulong,
  v_string: *gchar,
  v_comment: *gchar,
  v_char: guchar,
  v_error: guint
}
GScannerConfig = @record{
  cset_skip_characters: *gchar,
  cset_identifier_first: *gchar,
  cset_identifier_nth: *gchar,
  cpair_comment_single: *gchar,
  case_sensitive: guint,
  skip_comment_multi: guint,
  skip_comment_single: guint,
  scan_comment_multi: guint,
  scan_identifier: guint,
  scan_identifier_1char: guint,
  scan_identifier_NULL: guint,
  scan_symbols: guint,
  scan_binary: guint,
  scan_octal: guint,
  scan_float: guint,
  scan_hex: guint,
  scan_hex_dollar: guint,
  scan_string_sq: guint,
  scan_string_dq: guint,
  numbers_2_int: guint,
  int_2_float: guint,
  identifier_2_string: guint,
  char_2_token: guint,
  symbol_2_token: guint,
  scope_0_fallback: guint,
  store_int64: guint,
  padding_dummy: guint
}
GScanner = @record{
  user_data: gpointer,
  max_parse_errors: guint,
  parse_errors: guint,
  input_name: *gchar,
  qdata: *GData,
  config: *GScannerConfig,
  token: GTokenType,
  value: GTokenValue,
  line: guint,
  position: guint,
  next_token: GTokenType,
  next_value: GTokenValue,
  next_line: guint,
  next_position: guint,
  symbol_table: *GHashTable,
  input_fd: gint,
  text: *gchar,
  text_end: *gchar,
  buffer: *gchar,
  scope_id: guint,
  msg_handler: GScannerMsgFunc
}
global GSequence: type <cimport,nodecl,forwarddecl> = @record{}
global GSequenceIter: type <cimport,nodecl,forwarddecl> = @record{}
global GSequenceIterCompareFunc: type <cimport,nodecl> = @function(a: *GSequenceIter, b: *GSequenceIter, data: gpointer): gint
global GShellError: type <cimport,nodecl,using> = @enum(cint){
  G_SHELL_ERROR_BAD_QUOTING = 0,
  G_SHELL_ERROR_EMPTY_STRING = 1,
  G_SHELL_ERROR_FAILED = 2
}
global GSliceConfig: type <cimport,nodecl,using> = @enum(cint){
  G_SLICE_CONFIG_ALWAYS_MALLOC = 1,
  G_SLICE_CONFIG_BYPASS_MAGAZINES = 2,
  G_SLICE_CONFIG_WORKING_SET_MSECS = 3,
  G_SLICE_CONFIG_COLOR_INCREMENT = 4,
  G_SLICE_CONFIG_CHUNK_SIZES = 5,
  G_SLICE_CONFIG_CONTENTION_COUNTER = 6
}
global GSpawnError: type <cimport,nodecl,using> = @enum(cint){
  G_SPAWN_ERROR_FORK = 0,
  G_SPAWN_ERROR_READ = 1,
  G_SPAWN_ERROR_CHDIR = 2,
  G_SPAWN_ERROR_ACCES = 3,
  G_SPAWN_ERROR_PERM = 4,
  G_SPAWN_ERROR_TOO_BIG = 5,
  G_SPAWN_ERROR_2BIG = 5,
  G_SPAWN_ERROR_NOEXEC = 6,
  G_SPAWN_ERROR_NAMETOOLONG = 7,
  G_SPAWN_ERROR_NOENT = 8,
  G_SPAWN_ERROR_NOMEM = 9,
  G_SPAWN_ERROR_NOTDIR = 10,
  G_SPAWN_ERROR_LOOP = 11,
  G_SPAWN_ERROR_TXTBUSY = 12,
  G_SPAWN_ERROR_IO = 13,
  G_SPAWN_ERROR_NFILE = 14,
  G_SPAWN_ERROR_MFILE = 15,
  G_SPAWN_ERROR_INVAL = 16,
  G_SPAWN_ERROR_ISDIR = 17,
  G_SPAWN_ERROR_LIBBAD = 18,
  G_SPAWN_ERROR_FAILED = 19
}
global GSpawnChildSetupFunc: type <cimport,nodecl> = @function(user_data: gpointer): void
global GSpawnFlags: type <cimport,nodecl,using> = @enum(cint){
  G_SPAWN_DEFAULT = 0,
  G_SPAWN_LEAVE_DESCRIPTORS_OPEN = 1,
  G_SPAWN_DO_NOT_REAP_CHILD = 2,
  G_SPAWN_SEARCH_PATH = 4,
  G_SPAWN_STDOUT_TO_DEV_NULL = 8,
  G_SPAWN_STDERR_TO_DEV_NULL = 16,
  G_SPAWN_CHILD_INHERITS_STDIN = 32,
  G_SPAWN_FILE_AND_ARGV_ZERO = 64,
  G_SPAWN_SEARCH_PATH_FROM_ENVP = 128,
  G_SPAWN_CLOEXEC_PIPES = 256
}
global GAsciiType: type <cimport,nodecl,using> = @enum(cint){
  G_ASCII_ALNUM = 1,
  G_ASCII_ALPHA = 2,
  G_ASCII_CNTRL = 4,
  G_ASCII_DIGIT = 8,
  G_ASCII_GRAPH = 16,
  G_ASCII_LOWER = 32,
  G_ASCII_PRINT = 64,
  G_ASCII_PUNCT = 128,
  G_ASCII_SPACE = 256,
  G_ASCII_UPPER = 512,
  G_ASCII_XDIGIT = 1024
}
global GStrv: type <cimport,nodecl> = @**gchar
global GNumberParserError: type <cimport,nodecl,using> = @enum(cint){
  G_NUMBER_PARSER_ERROR_INVALID = 0,
  G_NUMBER_PARSER_ERROR_OUT_OF_BOUNDS = 1
}
global GStringChunk: type <cimport,nodecl,forwarddecl> = @record{}
global GStrvBuilder: type <cimport,nodecl,forwarddecl> = @record{}
global GTestCase: type <cimport,nodecl,forwarddecl> = @record{}
global GTestSuite: type <cimport,nodecl,forwarddecl> = @record{}
global GTestFunc: type <cimport,nodecl> = @function(): void
global GTestDataFunc: type <cimport,nodecl> = @function(user_data: gconstpointer): void
global GTestFixtureFunc: type <cimport,nodecl> = @function(fixture: gpointer, user_data: gconstpointer): void
global GTestTrapFlags: type <cimport,nodecl,using> = @enum(cint){
  G_TEST_TRAP_SILENCE_STDOUT = 128,
  G_TEST_TRAP_SILENCE_STDERR = 256,
  G_TEST_TRAP_INHERIT_STDIN = 512
}
global GTestSubprocessFlags: type <cimport,nodecl,using> = @enum(cint){
  G_TEST_SUBPROCESS_INHERIT_STDIN = 1,
  G_TEST_SUBPROCESS_INHERIT_STDOUT = 2,
  G_TEST_SUBPROCESS_INHERIT_STDERR = 4
}
global GTestConfig: type <cimport,nodecl> = @record{
  test_initialized: gboolean,
  test_quick: gboolean,
  test_perf: gboolean,
  test_verbose: gboolean,
  test_quiet: gboolean,
  test_undefined: gboolean
}
global GTestResult: type <cimport,nodecl,using> = @enum(cint){
  G_TEST_RUN_SUCCESS = 0,
  G_TEST_RUN_SKIPPED = 1,
  G_TEST_RUN_FAILURE = 2,
  G_TEST_RUN_INCOMPLETE = 3
}
global GTestLogType: type <cimport,nodecl,using> = @enum(cint){
  G_TEST_LOG_NONE = 0,
  G_TEST_LOG_ERROR = 1,
  G_TEST_LOG_START_BINARY = 2,
  G_TEST_LOG_LIST_CASE = 3,
  G_TEST_LOG_SKIP_CASE = 4,
  G_TEST_LOG_START_CASE = 5,
  G_TEST_LOG_STOP_CASE = 6,
  G_TEST_LOG_MIN_RESULT = 7,
  G_TEST_LOG_MAX_RESULT = 8,
  G_TEST_LOG_MESSAGE = 9,
  G_TEST_LOG_START_SUITE = 10,
  G_TEST_LOG_STOP_SUITE = 11
}
global GTestLogMsg: type <cimport,nodecl> = @record{
  log_type: GTestLogType,
  n_strings: guint,
  strings: **gchar,
  n_nums: guint,
  nums: *clongdouble
}
global GTestLogBuffer: type <cimport,nodecl> = @record{
  data: *GString,
  msgs: *GSList
}
global GTestLogFatalFunc: type <cimport,nodecl> = @function(log_domain: *gchar, log_level: GLogLevelFlags, message: *gchar, user_data: gpointer): gboolean
global GTestFileType: type <cimport,nodecl,using> = @enum(cint){
  G_TEST_DIST = 0,
  G_TEST_BUILT = 1
}
global GThreadPool: type <cimport,nodecl,forwarddecl> = @record{}
GThreadPool = @record{
  func: GFunc,
  user_data: gpointer,
  exclusive: gboolean
}
global GTimer: type <cimport,nodecl,forwarddecl> = @record{}
global GTrashStack: type <cimport,nodecl,forwarddecl> = @record{}
GTrashStack = @record{
  next: *GTrashStack
}
global GTree: type <cimport,nodecl,forwarddecl> = @record{}
global GTreeNode: type <cimport,nodecl,forwarddecl> = @record{}
global GTraverseFunc: type <cimport,nodecl> = @function(key: gpointer, value: gpointer, data: gpointer): gboolean
global GTraverseNodeFunc: type <cimport,nodecl> = @function(node: *GTreeNode, data: gpointer): gboolean
global GUri: type <cimport,nodecl,forwarddecl> = @record{}
global GUriFlags: type <cimport,nodecl,using> = @enum(cint){
  G_URI_FLAGS_NONE = 0,
  G_URI_FLAGS_PARSE_RELAXED = 1,
  G_URI_FLAGS_HAS_PASSWORD = 2,
  G_URI_FLAGS_HAS_AUTH_PARAMS = 4,
  G_URI_FLAGS_ENCODED = 8,
  G_URI_FLAGS_NON_DNS = 16,
  G_URI_FLAGS_ENCODED_QUERY = 32,
  G_URI_FLAGS_ENCODED_PATH = 64,
  G_URI_FLAGS_ENCODED_FRAGMENT = 128,
  G_URI_FLAGS_SCHEME_NORMALIZE = 256
}
global GUriHideFlags: type <cimport,nodecl,using> = @enum(cint){
  G_URI_HIDE_NONE = 0,
  G_URI_HIDE_USERINFO = 1,
  G_URI_HIDE_PASSWORD = 2,
  G_URI_HIDE_AUTH_PARAMS = 4,
  G_URI_HIDE_QUERY = 8,
  G_URI_HIDE_FRAGMENT = 16
}
global GUriParamsFlags: type <cimport,nodecl,using> = @enum(cint){
  G_URI_PARAMS_NONE = 0,
  G_URI_PARAMS_CASE_INSENSITIVE = 1,
  G_URI_PARAMS_WWW_FORM = 2,
  G_URI_PARAMS_PARSE_RELAXED = 4
}
global GUriParamsIter: type <cimport,nodecl,forwarddecl> = @record{}
GUriParamsIter = @record{
  dummy0: gint,
  dummy1: gpointer,
  dummy2: gpointer,
  dummy3: [256]guint8
}
global GUriError: type <cimport,nodecl,using> = @enum(cint){
  G_URI_ERROR_FAILED = 0,
  G_URI_ERROR_BAD_SCHEME = 1,
  G_URI_ERROR_BAD_USER = 2,
  G_URI_ERROR_BAD_PASSWORD = 3,
  G_URI_ERROR_BAD_AUTH_PARAMS = 4,
  G_URI_ERROR_BAD_HOST = 5,
  G_URI_ERROR_BAD_PORT = 6,
  G_URI_ERROR_BAD_PATH = 7,
  G_URI_ERROR_BAD_QUERY = 8,
  G_URI_ERROR_BAD_FRAGMENT = 9
}
global GAllocator: type <cimport,nodecl,forwarddecl> = @record{}
global GMemChunk: type <cimport,nodecl,forwarddecl> = @record{}
global GCache: type <cimport,nodecl,forwarddecl> = @record{}
global GCacheNewFunc: type <cimport,nodecl> = @function(key: gpointer): gpointer
global GCacheDupFunc: type <cimport,nodecl> = @function(value: gpointer): gpointer
global GCacheDestroyFunc: type <cimport,nodecl> = @function(value: gpointer): void
global GCompletion: type <cimport,nodecl,forwarddecl> = @record{}
global GCompletionFunc: type <cimport,nodecl> = @function(a1: gpointer): *gchar
global GCompletionStrncmpFunc: type <cimport,nodecl> = @function(s1: *gchar, s2: *gchar, n: gsize): gint
GCompletion = @record{
  items: *GList,
  func: GCompletionFunc,
  prefix: *gchar,
  cache: *GList,
  strncmp_func: GCompletionStrncmpFunc
}
global GRelation: type <cimport,nodecl,forwarddecl> = @record{}
global GTuples: type <cimport,nodecl,forwarddecl> = @record{}
GTuples = @record{
  len: guint
}
global GThreadPriority: type <cimport,nodecl,using> = @enum(cint){
  G_THREAD_PRIORITY_LOW = 0,
  G_THREAD_PRIORITY_NORMAL = 1,
  G_THREAD_PRIORITY_HIGH = 2,
  G_THREAD_PRIORITY_URGENT = 3
}
GThread = @record{
  func: GThreadFunc,
  data: gpointer,
  joinable: gboolean,
  priority: GThreadPriority
}
global GThreadFunctions: type <cimport,nodecl,forwarddecl> = @record{}
GThreadFunctions = @record{
  mutex_new: function(): *GMutex,
  mutex_lock: function(mutex: *GMutex): void,
  mutex_trylock: function(mutex: *GMutex): gboolean,
  mutex_unlock: function(mutex: *GMutex): void,
  mutex_free: function(mutex: *GMutex): void,
  cond_new: function(): *GCond,
  cond_signal: function(cond: *GCond): void,
  cond_broadcast: function(cond: *GCond): void,
  cond_wait: function(cond: *GCond, mutex: *GMutex): void,
  cond_timed_wait: function(cond: *GCond, mutex: *GMutex, end_time: *GTimeVal): gboolean,
  cond_free: function(cond: *GCond): void,
  private_new: function(destructor: GDestroyNotify): *GPrivate,
  private_get: function(private_key: *GPrivate): gpointer,
  private_set: function(private_key: *GPrivate, data: gpointer): void,
  thread_create: function(func: GThreadFunc, data: gpointer, stack_size: gulong, joinable: gboolean, bound: gboolean, priority: GThreadPriority, thread: gpointer, error: **GError): void,
  thread_yield: function(): void,
  thread_join: function(thread: gpointer): void,
  thread_exit: function(): void,
  thread_set_priority: function(thread: gpointer, priority: GThreadPriority): void,
  thread_self: function(thread: gpointer): void,
  thread_equal: function(thread1: gpointer, thread2: gpointer): gboolean
}
global sched_param: type <cimport,nodecl,ctypedef'sched_param'> = @record{
  sched_priority: cint
}
global cpu_set_t: type <cimport,nodecl> = @record{
  __bits: [0]culong
}
global PTHREAD_CREATE_JOINABLE: cint <comptime> = 0
global PTHREAD_CREATE_DETACHED: cint <comptime> = 1
global PTHREAD_MUTEX_TIMED_NP: cint <comptime> = 0
global PTHREAD_MUTEX_RECURSIVE_NP: cint <comptime> = 1
global PTHREAD_MUTEX_ERRORCHECK_NP: cint <comptime> = 2
global PTHREAD_MUTEX_ADAPTIVE_NP: cint <comptime> = 3
global PTHREAD_MUTEX_NORMAL: cint <comptime> = 0
global PTHREAD_MUTEX_RECURSIVE: cint <comptime> = 1
global PTHREAD_MUTEX_ERRORCHECK: cint <comptime> = 2
global PTHREAD_MUTEX_DEFAULT: cint <comptime> = 0
global PTHREAD_MUTEX_STALLED: cint <comptime> = 0
global PTHREAD_MUTEX_STALLED_NP: cint <comptime> = 0
global PTHREAD_MUTEX_ROBUST: cint <comptime> = 1
global PTHREAD_MUTEX_ROBUST_NP: cint <comptime> = 1
global PTHREAD_PRIO_NONE: cint <comptime> = 0
global PTHREAD_PRIO_INHERIT: cint <comptime> = 1
global PTHREAD_PRIO_PROTECT: cint <comptime> = 2
global PTHREAD_RWLOCK_PREFER_READER_NP: cint <comptime> = 0
global PTHREAD_RWLOCK_PREFER_WRITER_NP: cint <comptime> = 1
global PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP: cint <comptime> = 2
global PTHREAD_RWLOCK_DEFAULT_NP: cint <comptime> = 0
global PTHREAD_INHERIT_SCHED: cint <comptime> = 0
global PTHREAD_EXPLICIT_SCHED: cint <comptime> = 1
global PTHREAD_SCOPE_SYSTEM: cint <comptime> = 0
global PTHREAD_SCOPE_PROCESS: cint <comptime> = 1
global PTHREAD_PROCESS_PRIVATE: cint <comptime> = 0
global PTHREAD_PROCESS_SHARED: cint <comptime> = 1
global _pthread_cleanup_buffer: type <cimport,nodecl,ctypedef'_pthread_cleanup_buffer'> = @record{
  __routine: function(a1: pointer): void,
  __arg: pointer,
  __canceltype: cint,
  __prev: *_pthread_cleanup_buffer
}
global PTHREAD_CANCEL_ENABLE: cint <comptime> = 0
global PTHREAD_CANCEL_DISABLE: cint <comptime> = 1
global PTHREAD_CANCEL_DEFERRED: cint <comptime> = 0
global PTHREAD_CANCEL_ASYNCHRONOUS: cint <comptime> = 1
global GStaticMutex: type <cimport,nodecl> = @record{
  mutex: *GMutex,
  unused: pthread_mutex_t
}
global GStaticRecMutex: type <cimport,nodecl,forwarddecl> = @record{}
GStaticRecMutex = @record{
  mutex: GStaticMutex,
  depth: guint,
  unused: union{
    owner: pthread_t,
    dummy: gdouble
  }
}
global GStaticRWLock: type <cimport,nodecl,forwarddecl> = @record{}
GStaticRWLock = @record{
  mutex: GStaticMutex,
  read_cond: *GCond,
  write_cond: *GCond,
  read_counter: guint,
  have_writer: gboolean,
  want_to_read: guint,
  want_to_write: guint
}
global GStaticPrivate: type <cimport,nodecl,forwarddecl> = @record{}
GStaticPrivate = @record{
  index: guint
}
global GAsyncQueue_autoptr: type <cimport,nodecl> = @*GAsyncQueue
global GAsyncQueue_listautoptr: type <cimport,nodecl> = @*GList
global GAsyncQueue_slistautoptr: type <cimport,nodecl> = @*GSList
global GAsyncQueue_queueautoptr: type <cimport,nodecl> = @*GQueue
global GBookmarkFile_autoptr: type <cimport,nodecl> = @*GBookmarkFile
global GBookmarkFile_listautoptr: type <cimport,nodecl> = @*GList
global GBookmarkFile_slistautoptr: type <cimport,nodecl> = @*GSList
global GBookmarkFile_queueautoptr: type <cimport,nodecl> = @*GQueue
global GBytes_autoptr: type <cimport,nodecl> = @*GBytes
global GBytes_listautoptr: type <cimport,nodecl> = @*GList
global GBytes_slistautoptr: type <cimport,nodecl> = @*GSList
global GBytes_queueautoptr: type <cimport,nodecl> = @*GQueue
global GChecksum_autoptr: type <cimport,nodecl> = @*GChecksum
global GChecksum_listautoptr: type <cimport,nodecl> = @*GList
global GChecksum_slistautoptr: type <cimport,nodecl> = @*GSList
global GChecksum_queueautoptr: type <cimport,nodecl> = @*GQueue
global GDateTime_autoptr: type <cimport,nodecl> = @*GDateTime
global GDateTime_listautoptr: type <cimport,nodecl> = @*GList
global GDateTime_slistautoptr: type <cimport,nodecl> = @*GSList
global GDateTime_queueautoptr: type <cimport,nodecl> = @*GQueue
global GDate_autoptr: type <cimport,nodecl> = @*GDate
global GDate_listautoptr: type <cimport,nodecl> = @*GList
global GDate_slistautoptr: type <cimport,nodecl> = @*GSList
global GDate_queueautoptr: type <cimport,nodecl> = @*GQueue
global GDir_autoptr: type <cimport,nodecl> = @*GDir
global GDir_listautoptr: type <cimport,nodecl> = @*GList
global GDir_slistautoptr: type <cimport,nodecl> = @*GSList
global GDir_queueautoptr: type <cimport,nodecl> = @*GQueue
global GError_autoptr: type <cimport,nodecl> = @*GError
global GError_listautoptr: type <cimport,nodecl> = @*GList
global GError_slistautoptr: type <cimport,nodecl> = @*GSList
global GError_queueautoptr: type <cimport,nodecl> = @*GQueue
global GHashTable_autoptr: type <cimport,nodecl> = @*GHashTable
global GHashTable_listautoptr: type <cimport,nodecl> = @*GList
global GHashTable_slistautoptr: type <cimport,nodecl> = @*GSList
global GHashTable_queueautoptr: type <cimport,nodecl> = @*GQueue
global GHmac_autoptr: type <cimport,nodecl> = @*GHmac
global GHmac_listautoptr: type <cimport,nodecl> = @*GList
global GHmac_slistautoptr: type <cimport,nodecl> = @*GSList
global GHmac_queueautoptr: type <cimport,nodecl> = @*GQueue
global GIOChannel_autoptr: type <cimport,nodecl> = @*GIOChannel
global GIOChannel_listautoptr: type <cimport,nodecl> = @*GList
global GIOChannel_slistautoptr: type <cimport,nodecl> = @*GSList
global GIOChannel_queueautoptr: type <cimport,nodecl> = @*GQueue
global GKeyFile_autoptr: type <cimport,nodecl> = @*GKeyFile
global GKeyFile_listautoptr: type <cimport,nodecl> = @*GList
global GKeyFile_slistautoptr: type <cimport,nodecl> = @*GSList
global GKeyFile_queueautoptr: type <cimport,nodecl> = @*GQueue
global GList_autoptr: type <cimport,nodecl> = @*GList
global GList_listautoptr: type <cimport,nodecl> = @*GList
global GList_slistautoptr: type <cimport,nodecl> = @*GSList
global GList_queueautoptr: type <cimport,nodecl> = @*GQueue
global GArray_autoptr: type <cimport,nodecl> = @*GArray
global GArray_listautoptr: type <cimport,nodecl> = @*GList
global GArray_slistautoptr: type <cimport,nodecl> = @*GSList
global GArray_queueautoptr: type <cimport,nodecl> = @*GQueue
global GPtrArray_autoptr: type <cimport,nodecl> = @*GPtrArray
global GPtrArray_listautoptr: type <cimport,nodecl> = @*GList
global GPtrArray_slistautoptr: type <cimport,nodecl> = @*GSList
global GPtrArray_queueautoptr: type <cimport,nodecl> = @*GQueue
global GByteArray_autoptr: type <cimport,nodecl> = @*GByteArray
global GByteArray_listautoptr: type <cimport,nodecl> = @*GList
global GByteArray_slistautoptr: type <cimport,nodecl> = @*GSList
global GByteArray_queueautoptr: type <cimport,nodecl> = @*GQueue
global GMainContext_autoptr: type <cimport,nodecl> = @*GMainContext
global GMainContext_listautoptr: type <cimport,nodecl> = @*GList
global GMainContext_slistautoptr: type <cimport,nodecl> = @*GSList
global GMainContext_queueautoptr: type <cimport,nodecl> = @*GQueue
global GMainContextPusher_autoptr: type <cimport,nodecl> = @*GMainContextPusher
global GMainContextPusher_listautoptr: type <cimport,nodecl> = @*GList
global GMainContextPusher_slistautoptr: type <cimport,nodecl> = @*GSList
global GMainContextPusher_queueautoptr: type <cimport,nodecl> = @*GQueue
global GMainLoop_autoptr: type <cimport,nodecl> = @*GMainLoop
global GMainLoop_listautoptr: type <cimport,nodecl> = @*GList
global GMainLoop_slistautoptr: type <cimport,nodecl> = @*GSList
global GMainLoop_queueautoptr: type <cimport,nodecl> = @*GQueue
global GSource_autoptr: type <cimport,nodecl> = @*GSource
global GSource_listautoptr: type <cimport,nodecl> = @*GList
global GSource_slistautoptr: type <cimport,nodecl> = @*GSList
global GSource_queueautoptr: type <cimport,nodecl> = @*GQueue
global GMappedFile_autoptr: type <cimport,nodecl> = @*GMappedFile
global GMappedFile_listautoptr: type <cimport,nodecl> = @*GList
global GMappedFile_slistautoptr: type <cimport,nodecl> = @*GSList
global GMappedFile_queueautoptr: type <cimport,nodecl> = @*GQueue
global GMarkupParseContext_autoptr: type <cimport,nodecl> = @*GMarkupParseContext
global GMarkupParseContext_listautoptr: type <cimport,nodecl> = @*GList
global GMarkupParseContext_slistautoptr: type <cimport,nodecl> = @*GSList
global GMarkupParseContext_queueautoptr: type <cimport,nodecl> = @*GQueue
global GNode_autoptr: type <cimport,nodecl> = @*GNode
global GNode_listautoptr: type <cimport,nodecl> = @*GList
global GNode_slistautoptr: type <cimport,nodecl> = @*GSList
global GNode_queueautoptr: type <cimport,nodecl> = @*GQueue
global GOptionContext_autoptr: type <cimport,nodecl> = @*GOptionContext
global GOptionContext_listautoptr: type <cimport,nodecl> = @*GList
global GOptionContext_slistautoptr: type <cimport,nodecl> = @*GSList
global GOptionContext_queueautoptr: type <cimport,nodecl> = @*GQueue
global GOptionGroup_autoptr: type <cimport,nodecl> = @*GOptionGroup
global GOptionGroup_listautoptr: type <cimport,nodecl> = @*GList
global GOptionGroup_slistautoptr: type <cimport,nodecl> = @*GSList
global GOptionGroup_queueautoptr: type <cimport,nodecl> = @*GQueue
global GPatternSpec_autoptr: type <cimport,nodecl> = @*GPatternSpec
global GPatternSpec_listautoptr: type <cimport,nodecl> = @*GList
global GPatternSpec_slistautoptr: type <cimport,nodecl> = @*GSList
global GPatternSpec_queueautoptr: type <cimport,nodecl> = @*GQueue
global GQueue_autoptr: type <cimport,nodecl> = @*GQueue
global GQueue_listautoptr: type <cimport,nodecl> = @*GList
global GQueue_slistautoptr: type <cimport,nodecl> = @*GSList
global GQueue_queueautoptr: type <cimport,nodecl> = @*GQueue
global GRand_autoptr: type <cimport,nodecl> = @*GRand
global GRand_listautoptr: type <cimport,nodecl> = @*GList
global GRand_slistautoptr: type <cimport,nodecl> = @*GSList
global GRand_queueautoptr: type <cimport,nodecl> = @*GQueue
global GRegex_autoptr: type <cimport,nodecl> = @*GRegex
global GRegex_listautoptr: type <cimport,nodecl> = @*GList
global GRegex_slistautoptr: type <cimport,nodecl> = @*GSList
global GRegex_queueautoptr: type <cimport,nodecl> = @*GQueue
global GMatchInfo_autoptr: type <cimport,nodecl> = @*GMatchInfo
global GMatchInfo_listautoptr: type <cimport,nodecl> = @*GList
global GMatchInfo_slistautoptr: type <cimport,nodecl> = @*GSList
global GMatchInfo_queueautoptr: type <cimport,nodecl> = @*GQueue
global GScanner_autoptr: type <cimport,nodecl> = @*GScanner
global GScanner_listautoptr: type <cimport,nodecl> = @*GList
global GScanner_slistautoptr: type <cimport,nodecl> = @*GSList
global GScanner_queueautoptr: type <cimport,nodecl> = @*GQueue
global GSequence_autoptr: type <cimport,nodecl> = @*GSequence
global GSequence_listautoptr: type <cimport,nodecl> = @*GList
global GSequence_slistautoptr: type <cimport,nodecl> = @*GSList
global GSequence_queueautoptr: type <cimport,nodecl> = @*GQueue
global GSList_autoptr: type <cimport,nodecl> = @*GSList
global GSList_listautoptr: type <cimport,nodecl> = @*GList
global GSList_slistautoptr: type <cimport,nodecl> = @*GSList
global GSList_queueautoptr: type <cimport,nodecl> = @*GQueue
global GString_autoptr: type <cimport,nodecl> = @*GString
global GString_listautoptr: type <cimport,nodecl> = @*GList
global GString_slistautoptr: type <cimport,nodecl> = @*GSList
global GString_queueautoptr: type <cimport,nodecl> = @*GQueue
global GStringChunk_autoptr: type <cimport,nodecl> = @*GStringChunk
global GStringChunk_listautoptr: type <cimport,nodecl> = @*GList
global GStringChunk_slistautoptr: type <cimport,nodecl> = @*GSList
global GStringChunk_queueautoptr: type <cimport,nodecl> = @*GQueue
global GStrvBuilder_autoptr: type <cimport,nodecl> = @*GStrvBuilder
global GStrvBuilder_listautoptr: type <cimport,nodecl> = @*GList
global GStrvBuilder_slistautoptr: type <cimport,nodecl> = @*GSList
global GStrvBuilder_queueautoptr: type <cimport,nodecl> = @*GQueue
global GThread_autoptr: type <cimport,nodecl> = @*GThread
global GThread_listautoptr: type <cimport,nodecl> = @*GList
global GThread_slistautoptr: type <cimport,nodecl> = @*GSList
global GThread_queueautoptr: type <cimport,nodecl> = @*GQueue
global GMutexLocker_autoptr: type <cimport,nodecl> = @*GMutexLocker
global GMutexLocker_listautoptr: type <cimport,nodecl> = @*GList
global GMutexLocker_slistautoptr: type <cimport,nodecl> = @*GSList
global GMutexLocker_queueautoptr: type <cimport,nodecl> = @*GQueue
global GRecMutexLocker_autoptr: type <cimport,nodecl> = @*GRecMutexLocker
global GRecMutexLocker_listautoptr: type <cimport,nodecl> = @*GList
global GRecMutexLocker_slistautoptr: type <cimport,nodecl> = @*GSList
global GRecMutexLocker_queueautoptr: type <cimport,nodecl> = @*GQueue
global GRWLockWriterLocker_autoptr: type <cimport,nodecl> = @*GRWLockWriterLocker
global GRWLockWriterLocker_listautoptr: type <cimport,nodecl> = @*GList
global GRWLockWriterLocker_slistautoptr: type <cimport,nodecl> = @*GSList
global GRWLockWriterLocker_queueautoptr: type <cimport,nodecl> = @*GQueue
global GRWLockReaderLocker_autoptr: type <cimport,nodecl> = @*GRWLockReaderLocker
global GRWLockReaderLocker_listautoptr: type <cimport,nodecl> = @*GList
global GRWLockReaderLocker_slistautoptr: type <cimport,nodecl> = @*GSList
global GRWLockReaderLocker_queueautoptr: type <cimport,nodecl> = @*GQueue
global GTimer_autoptr: type <cimport,nodecl> = @*GTimer
global GTimer_listautoptr: type <cimport,nodecl> = @*GList
global GTimer_slistautoptr: type <cimport,nodecl> = @*GSList
global GTimer_queueautoptr: type <cimport,nodecl> = @*GQueue
global GTimeZone_autoptr: type <cimport,nodecl> = @*GTimeZone
global GTimeZone_listautoptr: type <cimport,nodecl> = @*GList
global GTimeZone_slistautoptr: type <cimport,nodecl> = @*GSList
global GTimeZone_queueautoptr: type <cimport,nodecl> = @*GQueue
global GTree_autoptr: type <cimport,nodecl> = @*GTree
global GTree_listautoptr: type <cimport,nodecl> = @*GList
global GTree_slistautoptr: type <cimport,nodecl> = @*GSList
global GTree_queueautoptr: type <cimport,nodecl> = @*GQueue
global GVariant_autoptr: type <cimport,nodecl> = @*GVariant
global GVariant_listautoptr: type <cimport,nodecl> = @*GList
global GVariant_slistautoptr: type <cimport,nodecl> = @*GSList
global GVariant_queueautoptr: type <cimport,nodecl> = @*GQueue
global GVariantBuilder_autoptr: type <cimport,nodecl> = @*GVariantBuilder
global GVariantBuilder_listautoptr: type <cimport,nodecl> = @*GList
global GVariantBuilder_slistautoptr: type <cimport,nodecl> = @*GSList
global GVariantBuilder_queueautoptr: type <cimport,nodecl> = @*GQueue
global GVariantIter_autoptr: type <cimport,nodecl> = @*GVariantIter
global GVariantIter_listautoptr: type <cimport,nodecl> = @*GList
global GVariantIter_slistautoptr: type <cimport,nodecl> = @*GSList
global GVariantIter_queueautoptr: type <cimport,nodecl> = @*GQueue
global GVariantDict_autoptr: type <cimport,nodecl> = @*GVariantDict
global GVariantDict_listautoptr: type <cimport,nodecl> = @*GList
global GVariantDict_slistautoptr: type <cimport,nodecl> = @*GSList
global GVariantDict_queueautoptr: type <cimport,nodecl> = @*GQueue
global GVariantType_autoptr: type <cimport,nodecl> = @*GVariantType
global GVariantType_listautoptr: type <cimport,nodecl> = @*GList
global GVariantType_slistautoptr: type <cimport,nodecl> = @*GSList
global GVariantType_queueautoptr: type <cimport,nodecl> = @*GQueue
global GRefString_autoptr: type <cimport,nodecl> = @*GRefString
global GRefString_listautoptr: type <cimport,nodecl> = @*GList
global GRefString_slistautoptr: type <cimport,nodecl> = @*GSList
global GRefString_queueautoptr: type <cimport,nodecl> = @*GQueue
global GUri_autoptr: type <cimport,nodecl> = @*GUri
global GUri_listautoptr: type <cimport,nodecl> = @*GList
global GUri_slistautoptr: type <cimport,nodecl> = @*GSList
global GUri_queueautoptr: type <cimport,nodecl> = @*GQueue
global GtkCssParserError: type <cimport,nodecl,using> = @enum(cint){
  GTK_CSS_PARSER_ERROR_FAILED = 0,
  GTK_CSS_PARSER_ERROR_SYNTAX = 1,
  GTK_CSS_PARSER_ERROR_IMPORT = 2,
  GTK_CSS_PARSER_ERROR_NAME = 3,
  GTK_CSS_PARSER_ERROR_UNKNOWN_VALUE = 4
}
global GtkCssParserWarning: type <cimport,nodecl,using> = @enum(cint){
  GTK_CSS_PARSER_WARNING_DEPRECATED = 0,
  GTK_CSS_PARSER_WARNING_SYNTAX = 1,
  GTK_CSS_PARSER_WARNING_UNIMPLEMENTED = 2
}
global GType: type <cimport,nodecl> = @gsize
global GValue: type <cimport,nodecl,forwarddecl> = @record{}
global GTypeCValue: type <cimport,nodecl,forwarddecl> = @union{}
global GTypePlugin: type <cimport,nodecl,forwarddecl> = @record{}
global GTypeClass: type <cimport,nodecl,forwarddecl> = @record{}
global GTypeInterface: type <cimport,nodecl,forwarddecl> = @record{}
global GTypeInstance: type <cimport,nodecl,forwarddecl> = @record{}
global GTypeInfo: type <cimport,nodecl,forwarddecl> = @record{}
global GTypeFundamentalInfo: type <cimport,nodecl,forwarddecl> = @record{}
global GInterfaceInfo: type <cimport,nodecl,forwarddecl> = @record{}
global GTypeValueTable: type <cimport,nodecl,forwarddecl> = @record{}
global GTypeQuery: type <cimport,nodecl,forwarddecl> = @record{}
GTypeClass = @record{
  g_type: GType
}
GTypeInstance = @record{
  g_class: *GTypeClass
}
GTypeInterface = @record{
  g_type: GType,
  g_instance_type: GType
}
GTypeQuery = @record{
  type: GType,
  type_name: *gchar,
  class_size: guint,
  instance_size: guint
}
global GTypeDebugFlags: type <cimport,nodecl,using> = @enum(cint){
  G_TYPE_DEBUG_NONE = 0,
  G_TYPE_DEBUG_OBJECTS = 1,
  G_TYPE_DEBUG_SIGNALS = 2,
  G_TYPE_DEBUG_INSTANCE_COUNT = 4,
  G_TYPE_DEBUG_MASK = 7
}
global GBaseInitFunc: type <cimport,nodecl> = @function(g_class: gpointer): void
global GBaseFinalizeFunc: type <cimport,nodecl> = @function(g_class: gpointer): void
global GClassInitFunc: type <cimport,nodecl> = @function(g_class: gpointer, class_data: gpointer): void
global GClassFinalizeFunc: type <cimport,nodecl> = @function(g_class: gpointer, class_data: gpointer): void
global GInstanceInitFunc: type <cimport,nodecl> = @function(instance: *GTypeInstance, g_class: gpointer): void
global GInterfaceInitFunc: type <cimport,nodecl> = @function(g_iface: gpointer, iface_data: gpointer): void
global GInterfaceFinalizeFunc: type <cimport,nodecl> = @function(g_iface: gpointer, iface_data: gpointer): void
global GTypeClassCacheFunc: type <cimport,nodecl> = @function(cache_data: gpointer, g_class: *GTypeClass): gboolean
global GTypeInterfaceCheckFunc: type <cimport,nodecl> = @function(check_data: gpointer, g_iface: gpointer): void
global GTypeFundamentalFlags: type <cimport,nodecl,using> = @enum(cint){
  G_TYPE_FLAG_CLASSED = 1,
  G_TYPE_FLAG_INSTANTIATABLE = 2,
  G_TYPE_FLAG_DERIVABLE = 4,
  G_TYPE_FLAG_DEEP_DERIVABLE = 8
}
global GTypeFlags: type <cimport,nodecl,using> = @enum(cint){
  G_TYPE_FLAG_ABSTRACT = 16,
  G_TYPE_FLAG_VALUE_ABSTRACT = 32,
  G_TYPE_FLAG_FINAL = 64
}
GTypeInfo = @record{
  class_size: guint16,
  base_init: GBaseInitFunc,
  base_finalize: GBaseFinalizeFunc,
  class_init: GClassInitFunc,
  class_finalize: GClassFinalizeFunc,
  class_data: gconstpointer,
  instance_size: guint16,
  n_preallocs: guint16,
  instance_init: GInstanceInitFunc,
  value_table: *GTypeValueTable
}
GTypeFundamentalInfo = @record{
  type_flags: GTypeFundamentalFlags
}
GInterfaceInfo = @record{
  interface_init: GInterfaceInitFunc,
  interface_finalize: GInterfaceFinalizeFunc,
  interface_data: gpointer
}
GTypeValueTable = @record{
  value_init: function(value: *GValue): void,
  value_free: function(value: *GValue): void,
  value_copy: function(src_value: *GValue, dest_value: *GValue): void,
  value_peek_pointer: function(value: *GValue): gpointer,
  collect_format: *gchar,
  collect_value: function(value: *GValue, n_collect_values: guint, collect_values: *GTypeCValue, collect_flags: guint): *gchar,
  lcopy_format: *gchar,
  lcopy_value: function(value: *GValue, n_collect_values: guint, collect_values: *GTypeCValue, collect_flags: guint): *gchar
}
global GValueTransform: type <cimport,nodecl> = @function(src_value: *GValue, dest_value: *GValue): void
GValue = @record{
  g_type: GType,
  data: [2]union{
    v_int: gint,
    v_uint: guint,
    v_long: glong,
    v_ulong: gulong,
    v_int64: gint64,
    v_uint64: guint64,
    v_float: gfloat,
    v_double: gdouble,
    v_pointer: gpointer
  }
}
global GParamFlags: type = @cint
global G_PARAM_READABLE: cint <cimport,nodecl,const>
global G_PARAM_WRITABLE: cint <cimport,nodecl,const>
global G_PARAM_READWRITE: cint <cimport,nodecl,const>
global G_PARAM_CONSTRUCT: cint <cimport,nodecl,const>
global G_PARAM_CONSTRUCT_ONLY: cint <cimport,nodecl,const>
global G_PARAM_LAX_VALIDATION: cint <cimport,nodecl,const>
global G_PARAM_STATIC_NAME: cint <cimport,nodecl,const>
global G_PARAM_PRIVATE: cint <cimport,nodecl,const>
global G_PARAM_STATIC_NICK: cint <cimport,nodecl,const>
global G_PARAM_STATIC_BLURB: cint <cimport,nodecl,const>
global G_PARAM_EXPLICIT_NOTIFY: cint <cimport,nodecl,const>
global G_PARAM_DEPRECATED: cint <cimport,nodecl,const>
global GParamSpec: type <cimport,nodecl,forwarddecl> = @record{}
global GParamSpecClass: type <cimport,nodecl,forwarddecl> = @record{}
global GParameter: type <cimport,nodecl,forwarddecl> = @record{}
global GParamSpecPool: type <cimport,nodecl,forwarddecl> = @record{}
GParamSpec = @record{
  g_type_instance: GTypeInstance,
  name: *gchar,
  flags: GParamFlags,
  value_type: GType,
  owner_type: GType,
  _nick: *gchar,
  _blurb: *gchar,
  qdata: *GData,
  ref_count: guint,
  param_id: guint
}
GParamSpecClass = @record{
  g_type_class: GTypeClass,
  value_type: GType,
  finalize: function(pspec: *GParamSpec): void,
  value_set_default: function(pspec: *GParamSpec, value: *GValue): void,
  value_validate: function(pspec: *GParamSpec, value: *GValue): gboolean,
  values_cmp: function(pspec: *GParamSpec, value1: *GValue, value2: *GValue): gint,
  dummy: [4]gpointer
}
GParameter = @record{
  name: *gchar,
  value: GValue
}
global GParamSpecTypeInfo: type <cimport,nodecl,forwarddecl> = @record{}
GParamSpecTypeInfo = @record{
  instance_size: guint16,
  n_preallocs: guint16,
  instance_init: function(pspec: *GParamSpec): void,
  value_type: GType,
  finalize: function(pspec: *GParamSpec): void,
  value_set_default: function(pspec: *GParamSpec, value: *GValue): void,
  value_validate: function(pspec: *GParamSpec, value: *GValue): gboolean,
  values_cmp: function(pspec: *GParamSpec, value1: *GValue, value2: *GValue): gint
}
global GClosure: type <cimport,nodecl,forwarddecl> = @record{}
global GClosureNotifyData: type <cimport,nodecl,forwarddecl> = @record{}
global GCallback: type <cimport,nodecl> = @function(): void
global GClosureNotify: type <cimport,nodecl> = @function(data: gpointer, closure: *GClosure): void
global GClosureMarshal: type <cimport,nodecl> = @function(closure: *GClosure, return_value: *GValue, n_param_values: guint, param_values: *GValue, invocation_hint: gpointer, marshal_data: gpointer): void
global GVaClosureMarshal: type <cimport,nodecl> = @function(closure: *GClosure, return_value: *GValue, instance: gpointer, args: cvalist, marshal_data: gpointer, n_params: cint, param_types: *GType): void
global GCClosure: type <cimport,nodecl,forwarddecl> = @record{}
GClosureNotifyData = @record{
  data: gpointer,
  notify: GClosureNotify
}
GClosure = @record{
  ref_count: guint,
  meta_marshal_nouse: guint,
  n_guards: guint,
  n_fnotifiers: guint,
  n_inotifiers: guint,
  in_inotify: guint,
  floating: guint,
  derivative_flag: guint,
  in_marshal: guint,
  is_invalid: guint,
  marshal: function(closure: *GClosure, return_value: *GValue, n_param_values: guint, param_values: *GValue, invocation_hint: gpointer, marshal_data: gpointer): void,
  data: gpointer,
  notifiers: *GClosureNotifyData
}
GCClosure = @record{
  closure: GClosure,
  callback: gpointer
}
global GSignalQuery: type <cimport,nodecl,forwarddecl> = @record{}
global GSignalInvocationHint: type <cimport,nodecl,forwarddecl> = @record{}
global GSignalCMarshaller: type <cimport,nodecl> = @GClosureMarshal
global GSignalCVaMarshaller: type <cimport,nodecl> = @GVaClosureMarshal
global GSignalEmissionHook: type <cimport,nodecl> = @function(ihint: *GSignalInvocationHint, n_param_values: guint, param_values: *GValue, data: gpointer): gboolean
global GSignalAccumulator: type <cimport,nodecl> = @function(ihint: *GSignalInvocationHint, return_accu: *GValue, handler_return: *GValue, data: gpointer): gboolean
global GSignalFlags: type <cimport,nodecl,using> = @enum(cint){
  G_SIGNAL_RUN_FIRST = 1,
  G_SIGNAL_RUN_LAST = 2,
  G_SIGNAL_RUN_CLEANUP = 4,
  G_SIGNAL_NO_RECURSE = 8,
  G_SIGNAL_DETAILED = 16,
  G_SIGNAL_ACTION = 32,
  G_SIGNAL_NO_HOOKS = 64,
  G_SIGNAL_MUST_COLLECT = 128,
  G_SIGNAL_DEPRECATED = 256,
  G_SIGNAL_ACCUMULATOR_FIRST_RUN = 131072
}
global GConnectFlags: type <cimport,nodecl,using> = @enum(cint){
  G_CONNECT_AFTER = 1,
  G_CONNECT_SWAPPED = 2
}
global GSignalMatchType: type <cimport,nodecl,using> = @enum(cint){
  G_SIGNAL_MATCH_ID = 1,
  G_SIGNAL_MATCH_DETAIL = 2,
  G_SIGNAL_MATCH_CLOSURE = 4,
  G_SIGNAL_MATCH_FUNC = 8,
  G_SIGNAL_MATCH_DATA = 16,
  G_SIGNAL_MATCH_UNBLOCKED = 32
}
GSignalInvocationHint = @record{
  signal_id: guint,
  detail: GQuark,
  run_type: GSignalFlags
}
GSignalQuery = @record{
  signal_id: guint,
  signal_name: *gchar,
  itype: GType,
  signal_flags: GSignalFlags,
  return_type: GType,
  n_params: guint,
  param_types: *GType
}
global GBoxedCopyFunc: type <cimport,nodecl> = @function(boxed: gpointer): gpointer
global GBoxedFreeFunc: type <cimport,nodecl> = @function(boxed: gpointer): void
global GObject: type <cimport,nodecl,forwarddecl> = @record{}
global GObjectClass: type <cimport,nodecl,forwarddecl> = @record{}
global GInitiallyUnowned: type <cimport,nodecl> = @GObject
global GInitiallyUnownedClass: type <cimport,nodecl> = @GObjectClass
global GObjectConstructParam: type <cimport,nodecl,forwarddecl> = @record{}
global GObjectGetPropertyFunc: type <cimport,nodecl> = @function(object: *GObject, property_id: guint, value: *GValue, pspec: *GParamSpec): void
global GObjectSetPropertyFunc: type <cimport,nodecl> = @function(object: *GObject, property_id: guint, value: *GValue, pspec: *GParamSpec): void
global GObjectFinalizeFunc: type <cimport,nodecl> = @function(object: *GObject): void
global GWeakNotify: type <cimport,nodecl> = @function(data: gpointer, where_the_object_was: *GObject): void
GObject = @record{
  g_type_instance: GTypeInstance,
  ref_count: guint,
  qdata: *GData
}
GObjectClass = @record{
  g_type_class: GTypeClass,
  construct_properties: *GSList,
  constructor: function(type: GType, n_construct_properties: guint, construct_properties: *GObjectConstructParam): *GObject,
  set_property: function(object: *GObject, property_id: guint, value: *GValue, pspec: *GParamSpec): void,
  get_property: function(object: *GObject, property_id: guint, value: *GValue, pspec: *GParamSpec): void,
  dispose: function(object: *GObject): void,
  finalize: function(object: *GObject): void,
  dispatch_properties_changed: function(object: *GObject, n_pspecs: guint, pspecs: **GParamSpec): void,
  notify: function(object: *GObject, pspec: *GParamSpec): void,
  constructed: function(object: *GObject): void,
  flags: gsize,
  pdummy: [6]gpointer
}
GObjectConstructParam = @record{
  pspec: *GParamSpec,
  value: *GValue
}
global GToggleNotify: type <cimport,nodecl> = @function(data: gpointer, object: *GObject, is_last_ref: gboolean): void
global GWeakRef: type <cimport,nodecl> = @record{
  priv: union{
    p: gpointer
  }
}
global GBinding: type <cimport,nodecl,forwarddecl> = @record{}
global GBindingTransformFunc: type <cimport,nodecl> = @function(binding: *GBinding, from_value: *GValue, to_value: *GValue, user_data: gpointer): gboolean
global GBindingFlags: type <cimport,nodecl,using> = @enum(cint){
  G_BINDING_DEFAULT = 0,
  G_BINDING_BIDIRECTIONAL = 1,
  G_BINDING_SYNC_CREATE = 2,
  G_BINDING_INVERT_BOOLEAN = 4
}
global GEnumClass: type <cimport,nodecl,forwarddecl> = @record{}
global GFlagsClass: type <cimport,nodecl,forwarddecl> = @record{}
global GEnumValue: type <cimport,nodecl,forwarddecl> = @record{}
global GFlagsValue: type <cimport,nodecl,forwarddecl> = @record{}
GEnumClass = @record{
  g_type_class: GTypeClass,
  minimum: gint,
  maximum: gint,
  n_values: guint,
  values: *GEnumValue
}
GFlagsClass = @record{
  g_type_class: GTypeClass,
  mask: guint,
  n_values: guint,
  values: *GFlagsValue
}
GEnumValue = @record{
  value: gint,
  value_name: *gchar,
  value_nick: *gchar
}
GFlagsValue = @record{
  value: guint,
  value_name: *gchar,
  value_nick: *gchar
}
global GParamSpecChar: type <cimport,nodecl,forwarddecl> = @record{}
global GParamSpecUChar: type <cimport,nodecl,forwarddecl> = @record{}
global GParamSpecBoolean: type <cimport,nodecl,forwarddecl> = @record{}
global GParamSpecInt: type <cimport,nodecl,forwarddecl> = @record{}
global GParamSpecUInt: type <cimport,nodecl,forwarddecl> = @record{}
global GParamSpecLong: type <cimport,nodecl,forwarddecl> = @record{}
global GParamSpecULong: type <cimport,nodecl,forwarddecl> = @record{}
global GParamSpecInt64: type <cimport,nodecl,forwarddecl> = @record{}
global GParamSpecUInt64: type <cimport,nodecl,forwarddecl> = @record{}
global GParamSpecUnichar: type <cimport,nodecl,forwarddecl> = @record{}
global GParamSpecEnum: type <cimport,nodecl,forwarddecl> = @record{}
global GParamSpecFlags: type <cimport,nodecl,forwarddecl> = @record{}
global GParamSpecFloat: type <cimport,nodecl,forwarddecl> = @record{}
global GParamSpecDouble: type <cimport,nodecl,forwarddecl> = @record{}
global GParamSpecString: type <cimport,nodecl,forwarddecl> = @record{}
global GParamSpecParam: type <cimport,nodecl,forwarddecl> = @record{}
global GParamSpecBoxed: type <cimport,nodecl,forwarddecl> = @record{}
global GParamSpecPointer: type <cimport,nodecl,forwarddecl> = @record{}
global GParamSpecValueArray: type <cimport,nodecl,forwarddecl> = @record{}
global GParamSpecObject: type <cimport,nodecl,forwarddecl> = @record{}
global GParamSpecOverride: type <cimport,nodecl,forwarddecl> = @record{}
global GParamSpecGType: type <cimport,nodecl,forwarddecl> = @record{}
global GParamSpecVariant: type <cimport,nodecl,forwarddecl> = @record{}
GParamSpecChar = @record{
  parent_instance: GParamSpec,
  minimum: gint8,
  maximum: gint8,
  default_value: gint8
}
GParamSpecUChar = @record{
  parent_instance: GParamSpec,
  minimum: guint8,
  maximum: guint8,
  default_value: guint8
}
GParamSpecBoolean = @record{
  parent_instance: GParamSpec,
  default_value: gboolean
}
GParamSpecInt = @record{
  parent_instance: GParamSpec,
  minimum: gint,
  maximum: gint,
  default_value: gint
}
GParamSpecUInt = @record{
  parent_instance: GParamSpec,
  minimum: guint,
  maximum: guint,
  default_value: guint
}
GParamSpecLong = @record{
  parent_instance: GParamSpec,
  minimum: glong,
  maximum: glong,
  default_value: glong
}
GParamSpecULong = @record{
  parent_instance: GParamSpec,
  minimum: gulong,
  maximum: gulong,
  default_value: gulong
}
GParamSpecInt64 = @record{
  parent_instance: GParamSpec,
  minimum: gint64,
  maximum: gint64,
  default_value: gint64
}
GParamSpecUInt64 = @record{
  parent_instance: GParamSpec,
  minimum: guint64,
  maximum: guint64,
  default_value: guint64
}
GParamSpecUnichar = @record{
  parent_instance: GParamSpec,
  default_value: gunichar
}
GParamSpecEnum = @record{
  parent_instance: GParamSpec,
  enum_class: *GEnumClass,
  default_value: gint
}
GParamSpecFlags = @record{
  parent_instance: GParamSpec,
  flags_class: *GFlagsClass,
  default_value: guint
}
GParamSpecFloat = @record{
  parent_instance: GParamSpec,
  minimum: gfloat,
  maximum: gfloat,
  default_value: gfloat,
  epsilon: gfloat
}
GParamSpecDouble = @record{
  parent_instance: GParamSpec,
  minimum: gdouble,
  maximum: gdouble,
  default_value: gdouble,
  epsilon: gdouble
}
GParamSpecString = @record{
  parent_instance: GParamSpec,
  default_value: *gchar,
  cset_first: *gchar,
  cset_nth: *gchar,
  substitutor: gchar,
  null_fold_if_empty: guint,
  ensure_non_null: guint
}
GParamSpecParam = @record{
  parent_instance: GParamSpec
}
GParamSpecBoxed = @record{
  parent_instance: GParamSpec
}
GParamSpecPointer = @record{
  parent_instance: GParamSpec
}
GParamSpecValueArray = @record{
  parent_instance: GParamSpec,
  element_spec: *GParamSpec,
  fixed_n_elements: guint
}
GParamSpecObject = @record{
  parent_instance: GParamSpec
}
GParamSpecOverride = @record{
  parent_instance: GParamSpec,
  overridden: *GParamSpec
}
GParamSpecGType = @record{
  parent_instance: GParamSpec,
  is_a_type: GType
}
GParamSpecVariant = @record{
  parent_instance: GParamSpec,
  type: *GVariantType,
  default_value: *GVariant,
  padding: [4]gpointer
}
global GTypeModule: type <cimport,nodecl,forwarddecl> = @record{}
global GTypeModuleClass: type <cimport,nodecl,forwarddecl> = @record{}
global GTypeModule_autoptr: type <cimport,nodecl> = @*GTypeModule
global GTypeModule_listautoptr: type <cimport,nodecl> = @*GList
global GTypeModule_slistautoptr: type <cimport,nodecl> = @*GSList
global GTypeModule_queueautoptr: type <cimport,nodecl> = @*GQueue
GTypeModule = @record{
  parent_instance: GObject,
  use_count: guint,
  type_infos: *GSList,
  interface_infos: *GSList,
  name: *gchar
}
GTypeModuleClass = @record{
  parent_class: GObjectClass,
  load: function(module: *GTypeModule): gboolean,
  unload: function(module: *GTypeModule): void,
  reserved1: function(): void,
  reserved2: function(): void,
  reserved3: function(): void,
  reserved4: function(): void
}
global GTypePluginClass: type <cimport,nodecl,forwarddecl> = @record{}
global GTypePluginUse: type <cimport,nodecl> = @function(plugin: *GTypePlugin): void
global GTypePluginUnuse: type <cimport,nodecl> = @function(plugin: *GTypePlugin): void
global GTypePluginCompleteTypeInfo: type <cimport,nodecl> = @function(plugin: *GTypePlugin, g_type: GType, info: *GTypeInfo, value_table: *GTypeValueTable): void
global GTypePluginCompleteInterfaceInfo: type <cimport,nodecl> = @function(plugin: *GTypePlugin, instance_type: GType, interface_type: GType, info: *GInterfaceInfo): void
GTypePluginClass = @record{
  base_iface: GTypeInterface,
  use_plugin: GTypePluginUse,
  unuse_plugin: GTypePluginUnuse,
  complete_type_info: GTypePluginCompleteTypeInfo,
  complete_interface_info: GTypePluginCompleteInterfaceInfo
}
global GValueArray: type <cimport,nodecl,forwarddecl> = @record{}
GValueArray = @record{
  n_values: guint,
  values: *GValue,
  n_prealloced: guint
}
global gchararray: type <cimport,nodecl> = @*gchar
global GClosure_autoptr: type <cimport,nodecl> = @*GClosure
global GClosure_listautoptr: type <cimport,nodecl> = @*GList
global GClosure_slistautoptr: type <cimport,nodecl> = @*GSList
global GClosure_queueautoptr: type <cimport,nodecl> = @*GQueue
global GEnumClass_autoptr: type <cimport,nodecl> = @*GEnumClass
global GEnumClass_listautoptr: type <cimport,nodecl> = @*GList
global GEnumClass_slistautoptr: type <cimport,nodecl> = @*GSList
global GEnumClass_queueautoptr: type <cimport,nodecl> = @*GQueue
global GFlagsClass_autoptr: type <cimport,nodecl> = @*GFlagsClass
global GFlagsClass_listautoptr: type <cimport,nodecl> = @*GList
global GFlagsClass_slistautoptr: type <cimport,nodecl> = @*GSList
global GFlagsClass_queueautoptr: type <cimport,nodecl> = @*GQueue
global GObject_autoptr: type <cimport,nodecl> = @*GObject
global GObject_listautoptr: type <cimport,nodecl> = @*GList
global GObject_slistautoptr: type <cimport,nodecl> = @*GSList
global GObject_queueautoptr: type <cimport,nodecl> = @*GQueue
global GInitiallyUnowned_autoptr: type <cimport,nodecl> = @*GInitiallyUnowned
global GInitiallyUnowned_listautoptr: type <cimport,nodecl> = @*GList
global GInitiallyUnowned_slistautoptr: type <cimport,nodecl> = @*GSList
global GInitiallyUnowned_queueautoptr: type <cimport,nodecl> = @*GQueue
global GParamSpec_autoptr: type <cimport,nodecl> = @*GParamSpec
global GParamSpec_listautoptr: type <cimport,nodecl> = @*GList
global GParamSpec_slistautoptr: type <cimport,nodecl> = @*GSList
global GParamSpec_queueautoptr: type <cimport,nodecl> = @*GQueue
global GTypeClass_autoptr: type <cimport,nodecl> = @*GTypeClass
global GTypeClass_listautoptr: type <cimport,nodecl> = @*GList
global GTypeClass_slistautoptr: type <cimport,nodecl> = @*GSList
global GTypeClass_queueautoptr: type <cimport,nodecl> = @*GQueue
global GtkCssLocation: type <cimport,nodecl,forwarddecl> = @record{}
GtkCssLocation = @record{
  bytes: gsize,
  chars: gsize,
  lines: gsize,
  line_bytes: gsize,
  line_chars: gsize
}
global GAppInfoCreateFlags: type <cimport,nodecl,using> = @enum(cint){
  G_APP_INFO_CREATE_NONE = 0,
  G_APP_INFO_CREATE_NEEDS_TERMINAL = 1,
  G_APP_INFO_CREATE_SUPPORTS_URIS = 2,
  G_APP_INFO_CREATE_SUPPORTS_STARTUP_NOTIFICATION = 4
}
global GConverterFlags: type <cimport,nodecl,using> = @enum(cint){
  G_CONVERTER_NO_FLAGS = 0,
  G_CONVERTER_INPUT_AT_END = 1,
  G_CONVERTER_FLUSH = 2
}
global GConverterResult: type <cimport,nodecl,using> = @enum(cint){
  G_CONVERTER_ERROR = 0,
  G_CONVERTER_CONVERTED = 1,
  G_CONVERTER_FINISHED = 2,
  G_CONVERTER_FLUSHED = 3
}
global GDataStreamByteOrder: type <cimport,nodecl,using> = @enum(cint){
  G_DATA_STREAM_BYTE_ORDER_BIG_ENDIAN = 0,
  G_DATA_STREAM_BYTE_ORDER_LITTLE_ENDIAN = 1,
  G_DATA_STREAM_BYTE_ORDER_HOST_ENDIAN = 2
}
global GDataStreamNewlineType: type <cimport,nodecl,using> = @enum(cint){
  G_DATA_STREAM_NEWLINE_TYPE_LF = 0,
  G_DATA_STREAM_NEWLINE_TYPE_CR = 1,
  G_DATA_STREAM_NEWLINE_TYPE_CR_LF = 2,
  G_DATA_STREAM_NEWLINE_TYPE_ANY = 3
}
global GFileAttributeType: type <cimport,nodecl,using> = @enum(cint){
  G_FILE_ATTRIBUTE_TYPE_INVALID = 0,
  G_FILE_ATTRIBUTE_TYPE_STRING = 1,
  G_FILE_ATTRIBUTE_TYPE_BYTE_STRING = 2,
  G_FILE_ATTRIBUTE_TYPE_BOOLEAN = 3,
  G_FILE_ATTRIBUTE_TYPE_UINT32 = 4,
  G_FILE_ATTRIBUTE_TYPE_INT32 = 5,
  G_FILE_ATTRIBUTE_TYPE_UINT64 = 6,
  G_FILE_ATTRIBUTE_TYPE_INT64 = 7,
  G_FILE_ATTRIBUTE_TYPE_OBJECT = 8,
  G_FILE_ATTRIBUTE_TYPE_STRINGV = 9
}
global GFileAttributeInfoFlags: type <cimport,nodecl,using> = @enum(cint){
  G_FILE_ATTRIBUTE_INFO_NONE = 0,
  G_FILE_ATTRIBUTE_INFO_COPY_WITH_FILE = 1,
  G_FILE_ATTRIBUTE_INFO_COPY_WHEN_MOVED = 2
}
global GFileAttributeStatus: type <cimport,nodecl,using> = @enum(cint){
  G_FILE_ATTRIBUTE_STATUS_UNSET = 0,
  G_FILE_ATTRIBUTE_STATUS_SET = 1,
  G_FILE_ATTRIBUTE_STATUS_ERROR_SETTING = 2
}
global GFileQueryInfoFlags: type <cimport,nodecl,using> = @enum(cint){
  G_FILE_QUERY_INFO_NONE = 0,
  G_FILE_QUERY_INFO_NOFOLLOW_SYMLINKS = 1
}
global GFileCreateFlags: type <cimport,nodecl,using> = @enum(cint){
  G_FILE_CREATE_NONE = 0,
  G_FILE_CREATE_PRIVATE = 1,
  G_FILE_CREATE_REPLACE_DESTINATION = 2
}
global GFileMeasureFlags: type <cimport,nodecl,using> = @enum(cint){
  G_FILE_MEASURE_NONE = 0,
  G_FILE_MEASURE_REPORT_ANY_ERROR = 2,
  G_FILE_MEASURE_APPARENT_SIZE = 4,
  G_FILE_MEASURE_NO_XDEV = 8
}
global GMountMountFlags: type <cimport,nodecl,using> = @enum(cint){
  G_MOUNT_MOUNT_NONE = 0
}
global GMountUnmountFlags: type <cimport,nodecl,using> = @enum(cint){
  G_MOUNT_UNMOUNT_NONE = 0,
  G_MOUNT_UNMOUNT_FORCE = 1
}
global GDriveStartFlags: type <cimport,nodecl,using> = @enum(cint){
  G_DRIVE_START_NONE = 0
}
global GDriveStartStopType: type <cimport,nodecl,using> = @enum(cint){
  G_DRIVE_START_STOP_TYPE_UNKNOWN = 0,
  G_DRIVE_START_STOP_TYPE_SHUTDOWN = 1,
  G_DRIVE_START_STOP_TYPE_NETWORK = 2,
  G_DRIVE_START_STOP_TYPE_MULTIDISK = 3,
  G_DRIVE_START_STOP_TYPE_PASSWORD = 4
}
global GFileCopyFlags: type <cimport,nodecl,using> = @enum(cint){
  G_FILE_COPY_NONE = 0,
  G_FILE_COPY_OVERWRITE = 1,
  G_FILE_COPY_BACKUP = 2,
  G_FILE_COPY_NOFOLLOW_SYMLINKS = 4,
  G_FILE_COPY_ALL_METADATA = 8,
  G_FILE_COPY_NO_FALLBACK_FOR_MOVE = 16,
  G_FILE_COPY_TARGET_DEFAULT_PERMS = 32
}
global GFileMonitorFlags: type <cimport,nodecl,using> = @enum(cint){
  G_FILE_MONITOR_NONE = 0,
  G_FILE_MONITOR_WATCH_MOUNTS = 1,
  G_FILE_MONITOR_SEND_MOVED = 2,
  G_FILE_MONITOR_WATCH_HARD_LINKS = 4,
  G_FILE_MONITOR_WATCH_MOVES = 8
}
global GFileType: type <cimport,nodecl,using> = @enum(cint){
  G_FILE_TYPE_UNKNOWN = 0,
  G_FILE_TYPE_REGULAR = 1,
  G_FILE_TYPE_DIRECTORY = 2,
  G_FILE_TYPE_SYMBOLIC_LINK = 3,
  G_FILE_TYPE_SPECIAL = 4,
  G_FILE_TYPE_SHORTCUT = 5,
  G_FILE_TYPE_MOUNTABLE = 6
}
global GFilesystemPreviewType: type <cimport,nodecl,using> = @enum(cint){
  G_FILESYSTEM_PREVIEW_TYPE_IF_ALWAYS = 0,
  G_FILESYSTEM_PREVIEW_TYPE_IF_LOCAL = 1,
  G_FILESYSTEM_PREVIEW_TYPE_NEVER = 2
}
global GFileMonitorEvent: type <cimport,nodecl,using> = @enum(cint){
  G_FILE_MONITOR_EVENT_CHANGED = 0,
  G_FILE_MONITOR_EVENT_CHANGES_DONE_HINT = 1,
  G_FILE_MONITOR_EVENT_DELETED = 2,
  G_FILE_MONITOR_EVENT_CREATED = 3,
  G_FILE_MONITOR_EVENT_ATTRIBUTE_CHANGED = 4,
  G_FILE_MONITOR_EVENT_PRE_UNMOUNT = 5,
  G_FILE_MONITOR_EVENT_UNMOUNTED = 6,
  G_FILE_MONITOR_EVENT_MOVED = 7,
  G_FILE_MONITOR_EVENT_RENAMED = 8,
  G_FILE_MONITOR_EVENT_MOVED_IN = 9,
  G_FILE_MONITOR_EVENT_MOVED_OUT = 10
}
global GIOErrorEnum: type <cimport,nodecl,using> = @enum(cint){
  G_IO_ERROR_FAILED = 0,
  G_IO_ERROR_NOT_FOUND = 1,
  G_IO_ERROR_EXISTS = 2,
  G_IO_ERROR_IS_DIRECTORY = 3,
  G_IO_ERROR_NOT_DIRECTORY = 4,
  G_IO_ERROR_NOT_EMPTY = 5,
  G_IO_ERROR_NOT_REGULAR_FILE = 6,
  G_IO_ERROR_NOT_SYMBOLIC_LINK = 7,
  G_IO_ERROR_NOT_MOUNTABLE_FILE = 8,
  G_IO_ERROR_FILENAME_TOO_LONG = 9,
  G_IO_ERROR_INVALID_FILENAME = 10,
  G_IO_ERROR_TOO_MANY_LINKS = 11,
  G_IO_ERROR_NO_SPACE = 12,
  G_IO_ERROR_INVALID_ARGUMENT = 13,
  G_IO_ERROR_PERMISSION_DENIED = 14,
  G_IO_ERROR_NOT_SUPPORTED = 15,
  G_IO_ERROR_NOT_MOUNTED = 16,
  G_IO_ERROR_ALREADY_MOUNTED = 17,
  G_IO_ERROR_CLOSED = 18,
  G_IO_ERROR_CANCELLED = 19,
  G_IO_ERROR_PENDING = 20,
  G_IO_ERROR_READ_ONLY = 21,
  G_IO_ERROR_CANT_CREATE_BACKUP = 22,
  G_IO_ERROR_WRONG_ETAG = 23,
  G_IO_ERROR_TIMED_OUT = 24,
  G_IO_ERROR_WOULD_RECURSE = 25,
  G_IO_ERROR_BUSY = 26,
  G_IO_ERROR_WOULD_BLOCK = 27,
  G_IO_ERROR_HOST_NOT_FOUND = 28,
  G_IO_ERROR_WOULD_MERGE = 29,
  G_IO_ERROR_FAILED_HANDLED = 30,
  G_IO_ERROR_TOO_MANY_OPEN_FILES = 31,
  G_IO_ERROR_NOT_INITIALIZED = 32,
  G_IO_ERROR_ADDRESS_IN_USE = 33,
  G_IO_ERROR_PARTIAL_INPUT = 34,
  G_IO_ERROR_INVALID_DATA = 35,
  G_IO_ERROR_DBUS_ERROR = 36,
  G_IO_ERROR_HOST_UNREACHABLE = 37,
  G_IO_ERROR_NETWORK_UNREACHABLE = 38,
  G_IO_ERROR_CONNECTION_REFUSED = 39,
  G_IO_ERROR_PROXY_FAILED = 40,
  G_IO_ERROR_PROXY_AUTH_FAILED = 41,
  G_IO_ERROR_PROXY_NEED_AUTH = 42,
  G_IO_ERROR_PROXY_NOT_ALLOWED = 43,
  G_IO_ERROR_BROKEN_PIPE = 44,
  G_IO_ERROR_CONNECTION_CLOSED = 44,
  G_IO_ERROR_NOT_CONNECTED = 45,
  G_IO_ERROR_MESSAGE_TOO_LARGE = 46
}
global GAskPasswordFlags: type <cimport,nodecl,using> = @enum(cint){
  G_ASK_PASSWORD_NEED_PASSWORD = 1,
  G_ASK_PASSWORD_NEED_USERNAME = 2,
  G_ASK_PASSWORD_NEED_DOMAIN = 4,
  G_ASK_PASSWORD_SAVING_SUPPORTED = 8,
  G_ASK_PASSWORD_ANONYMOUS_SUPPORTED = 16,
  G_ASK_PASSWORD_TCRYPT = 32
}
global GPasswordSave: type <cimport,nodecl,using> = @enum(cint){
  G_PASSWORD_SAVE_NEVER = 0,
  G_PASSWORD_SAVE_FOR_SESSION = 1,
  G_PASSWORD_SAVE_PERMANENTLY = 2
}
global GMountOperationResult: type <cimport,nodecl,using> = @enum(cint){
  G_MOUNT_OPERATION_HANDLED = 0,
  G_MOUNT_OPERATION_ABORTED = 1,
  G_MOUNT_OPERATION_UNHANDLED = 2
}
global GOutputStreamSpliceFlags: type <cimport,nodecl,using> = @enum(cint){
  G_OUTPUT_STREAM_SPLICE_NONE = 0,
  G_OUTPUT_STREAM_SPLICE_CLOSE_SOURCE = 1,
  G_OUTPUT_STREAM_SPLICE_CLOSE_TARGET = 2
}
global GIOStreamSpliceFlags: type <cimport,nodecl,using> = @enum(cint){
  G_IO_STREAM_SPLICE_NONE = 0,
  G_IO_STREAM_SPLICE_CLOSE_STREAM1 = 1,
  G_IO_STREAM_SPLICE_CLOSE_STREAM2 = 2,
  G_IO_STREAM_SPLICE_WAIT_FOR_BOTH = 4
}
global GEmblemOrigin: type <cimport,nodecl,using> = @enum(cint){
  G_EMBLEM_ORIGIN_UNKNOWN = 0,
  G_EMBLEM_ORIGIN_DEVICE = 1,
  G_EMBLEM_ORIGIN_LIVEMETADATA = 2,
  G_EMBLEM_ORIGIN_TAG = 3
}
global GResolverError: type <cimport,nodecl,using> = @enum(cint){
  G_RESOLVER_ERROR_NOT_FOUND = 0,
  G_RESOLVER_ERROR_TEMPORARY_FAILURE = 1,
  G_RESOLVER_ERROR_INTERNAL = 2
}
global GResolverRecordType: type <cimport,nodecl,using> = @enum(cint){
  G_RESOLVER_RECORD_SRV = 1,
  G_RESOLVER_RECORD_MX = 2,
  G_RESOLVER_RECORD_TXT = 3,
  G_RESOLVER_RECORD_SOA = 4,
  G_RESOLVER_RECORD_NS = 5
}
global GResourceError: type <cimport,nodecl,using> = @enum(cint){
  G_RESOURCE_ERROR_NOT_FOUND = 0,
  G_RESOURCE_ERROR_INTERNAL = 1
}
global GResourceFlags: type <cimport,nodecl,using> = @enum(cint){
  G_RESOURCE_FLAGS_NONE = 0,
  G_RESOURCE_FLAGS_COMPRESSED = 1
}
global GResourceLookupFlags: type <cimport,nodecl,using> = @enum(cint){
  G_RESOURCE_LOOKUP_FLAGS_NONE = 0
}
global GSocketFamily: type <cimport,nodecl,using> = @enum(cint){
  G_SOCKET_FAMILY_INVALID = 0,
  G_SOCKET_FAMILY_UNIX = 1,
  G_SOCKET_FAMILY_IPV4 = 2,
  G_SOCKET_FAMILY_IPV6 = 10
}
global GSocketType: type <cimport,nodecl,using> = @enum(cint){
  G_SOCKET_TYPE_INVALID = 0,
  G_SOCKET_TYPE_STREAM = 1,
  G_SOCKET_TYPE_DATAGRAM = 2,
  G_SOCKET_TYPE_SEQPACKET = 3
}
global GSocketMsgFlags: type <cimport,nodecl,using> = @enum(cint){
  G_SOCKET_MSG_NONE = 0,
  G_SOCKET_MSG_OOB = 1,
  G_SOCKET_MSG_PEEK = 2,
  G_SOCKET_MSG_DONTROUTE = 4
}
global GSocketProtocol: type <cimport,nodecl,using> = @enum(cint){
  G_SOCKET_PROTOCOL_UNKNOWN = -1,
  G_SOCKET_PROTOCOL_DEFAULT = 0,
  G_SOCKET_PROTOCOL_TCP = 6,
  G_SOCKET_PROTOCOL_UDP = 17,
  G_SOCKET_PROTOCOL_SCTP = 132
}
global GZlibCompressorFormat: type <cimport,nodecl,using> = @enum(cint){
  G_ZLIB_COMPRESSOR_FORMAT_ZLIB = 0,
  G_ZLIB_COMPRESSOR_FORMAT_GZIP = 1,
  G_ZLIB_COMPRESSOR_FORMAT_RAW = 2
}
global GUnixSocketAddressType: type <cimport,nodecl,using> = @enum(cint){
  G_UNIX_SOCKET_ADDRESS_INVALID = 0,
  G_UNIX_SOCKET_ADDRESS_ANONYMOUS = 1,
  G_UNIX_SOCKET_ADDRESS_PATH = 2,
  G_UNIX_SOCKET_ADDRESS_ABSTRACT = 3,
  G_UNIX_SOCKET_ADDRESS_ABSTRACT_PADDED = 4
}
global GBusType: type <cimport,nodecl,using> = @enum(cint){
  G_BUS_TYPE_STARTER = -1,
  G_BUS_TYPE_NONE = 0,
  G_BUS_TYPE_SYSTEM = 1,
  G_BUS_TYPE_SESSION = 2
}
global GBusNameOwnerFlags: type <cimport,nodecl,using> = @enum(cint){
  G_BUS_NAME_OWNER_FLAGS_NONE = 0,
  G_BUS_NAME_OWNER_FLAGS_ALLOW_REPLACEMENT = 1,
  G_BUS_NAME_OWNER_FLAGS_REPLACE = 2,
  G_BUS_NAME_OWNER_FLAGS_DO_NOT_QUEUE = 4
}
global GBusNameWatcherFlags: type <cimport,nodecl,using> = @enum(cint){
  G_BUS_NAME_WATCHER_FLAGS_NONE = 0,
  G_BUS_NAME_WATCHER_FLAGS_AUTO_START = 1
}
global GDBusProxyFlags: type <cimport,nodecl,using> = @enum(cint){
  G_DBUS_PROXY_FLAGS_NONE = 0,
  G_DBUS_PROXY_FLAGS_DO_NOT_LOAD_PROPERTIES = 1,
  G_DBUS_PROXY_FLAGS_DO_NOT_CONNECT_SIGNALS = 2,
  G_DBUS_PROXY_FLAGS_DO_NOT_AUTO_START = 4,
  G_DBUS_PROXY_FLAGS_GET_INVALIDATED_PROPERTIES = 8,
  G_DBUS_PROXY_FLAGS_DO_NOT_AUTO_START_AT_CONSTRUCTION = 16
}
global GDBusError: type <cimport,nodecl,using> = @enum(cint){
  G_DBUS_ERROR_FAILED = 0,
  G_DBUS_ERROR_NO_MEMORY = 1,
  G_DBUS_ERROR_SERVICE_UNKNOWN = 2,
  G_DBUS_ERROR_NAME_HAS_NO_OWNER = 3,
  G_DBUS_ERROR_NO_REPLY = 4,
  G_DBUS_ERROR_IO_ERROR = 5,
  G_DBUS_ERROR_BAD_ADDRESS = 6,
  G_DBUS_ERROR_NOT_SUPPORTED = 7,
  G_DBUS_ERROR_LIMITS_EXCEEDED = 8,
  G_DBUS_ERROR_ACCESS_DENIED = 9,
  G_DBUS_ERROR_AUTH_FAILED = 10,
  G_DBUS_ERROR_NO_SERVER = 11,
  G_DBUS_ERROR_TIMEOUT = 12,
  G_DBUS_ERROR_NO_NETWORK = 13,
  G_DBUS_ERROR_ADDRESS_IN_USE = 14,
  G_DBUS_ERROR_DISCONNECTED = 15,
  G_DBUS_ERROR_INVALID_ARGS = 16,
  G_DBUS_ERROR_FILE_NOT_FOUND = 17,
  G_DBUS_ERROR_FILE_EXISTS = 18,
  G_DBUS_ERROR_UNKNOWN_METHOD = 19,
  G_DBUS_ERROR_TIMED_OUT = 20,
  G_DBUS_ERROR_MATCH_RULE_NOT_FOUND = 21,
  G_DBUS_ERROR_MATCH_RULE_INVALID = 22,
  G_DBUS_ERROR_SPAWN_EXEC_FAILED = 23,
  G_DBUS_ERROR_SPAWN_FORK_FAILED = 24,
  G_DBUS_ERROR_SPAWN_CHILD_EXITED = 25,
  G_DBUS_ERROR_SPAWN_CHILD_SIGNALED = 26,
  G_DBUS_ERROR_SPAWN_FAILED = 27,
  G_DBUS_ERROR_SPAWN_SETUP_FAILED = 28,
  G_DBUS_ERROR_SPAWN_CONFIG_INVALID = 29,
  G_DBUS_ERROR_SPAWN_SERVICE_INVALID = 30,
  G_DBUS_ERROR_SPAWN_SERVICE_NOT_FOUND = 31,
  G_DBUS_ERROR_SPAWN_PERMISSIONS_INVALID = 32,
  G_DBUS_ERROR_SPAWN_FILE_INVALID = 33,
  G_DBUS_ERROR_SPAWN_NO_MEMORY = 34,
  G_DBUS_ERROR_UNIX_PROCESS_ID_UNKNOWN = 35,
  G_DBUS_ERROR_INVALID_SIGNATURE = 36,
  G_DBUS_ERROR_INVALID_FILE_CONTENT = 37,
  G_DBUS_ERROR_SELINUX_SECURITY_CONTEXT_UNKNOWN = 38,
  G_DBUS_ERROR_ADT_AUDIT_DATA_UNKNOWN = 39,
  G_DBUS_ERROR_OBJECT_PATH_IN_USE = 40,
  G_DBUS_ERROR_UNKNOWN_OBJECT = 41,
  G_DBUS_ERROR_UNKNOWN_INTERFACE = 42,
  G_DBUS_ERROR_UNKNOWN_PROPERTY = 43,
  G_DBUS_ERROR_PROPERTY_READ_ONLY = 44
}
global GDBusConnectionFlags: type <cimport,nodecl,using> = @enum(cint){
  G_DBUS_CONNECTION_FLAGS_NONE = 0,
  G_DBUS_CONNECTION_FLAGS_AUTHENTICATION_CLIENT = 1,
  G_DBUS_CONNECTION_FLAGS_AUTHENTICATION_SERVER = 2,
  G_DBUS_CONNECTION_FLAGS_AUTHENTICATION_ALLOW_ANONYMOUS = 4,
  G_DBUS_CONNECTION_FLAGS_MESSAGE_BUS_CONNECTION = 8,
  G_DBUS_CONNECTION_FLAGS_DELAY_MESSAGE_PROCESSING = 16,
  G_DBUS_CONNECTION_FLAGS_AUTHENTICATION_REQUIRE_SAME_USER = 32
}
global GDBusCapabilityFlags: type <cimport,nodecl,using> = @enum(cint){
  G_DBUS_CAPABILITY_FLAGS_NONE = 0,
  G_DBUS_CAPABILITY_FLAGS_UNIX_FD_PASSING = 1
}
global GDBusCallFlags: type <cimport,nodecl,using> = @enum(cint){
  G_DBUS_CALL_FLAGS_NONE = 0,
  G_DBUS_CALL_FLAGS_NO_AUTO_START = 1,
  G_DBUS_CALL_FLAGS_ALLOW_INTERACTIVE_AUTHORIZATION = 2
}
global GDBusMessageType: type <cimport,nodecl,using> = @enum(cint){
  G_DBUS_MESSAGE_TYPE_INVALID = 0,
  G_DBUS_MESSAGE_TYPE_METHOD_CALL = 1,
  G_DBUS_MESSAGE_TYPE_METHOD_RETURN = 2,
  G_DBUS_MESSAGE_TYPE_ERROR = 3,
  G_DBUS_MESSAGE_TYPE_SIGNAL = 4
}
global GDBusMessageFlags: type <cimport,nodecl,using> = @enum(cint){
  G_DBUS_MESSAGE_FLAGS_NONE = 0,
  G_DBUS_MESSAGE_FLAGS_NO_REPLY_EXPECTED = 1,
  G_DBUS_MESSAGE_FLAGS_NO_AUTO_START = 2,
  G_DBUS_MESSAGE_FLAGS_ALLOW_INTERACTIVE_AUTHORIZATION = 4
}
global GDBusMessageHeaderField: type <cimport,nodecl,using> = @enum(cint){
  G_DBUS_MESSAGE_HEADER_FIELD_INVALID = 0,
  G_DBUS_MESSAGE_HEADER_FIELD_PATH = 1,
  G_DBUS_MESSAGE_HEADER_FIELD_INTERFACE = 2,
  G_DBUS_MESSAGE_HEADER_FIELD_MEMBER = 3,
  G_DBUS_MESSAGE_HEADER_FIELD_ERROR_NAME = 4,
  G_DBUS_MESSAGE_HEADER_FIELD_REPLY_SERIAL = 5,
  G_DBUS_MESSAGE_HEADER_FIELD_DESTINATION = 6,
  G_DBUS_MESSAGE_HEADER_FIELD_SENDER = 7,
  G_DBUS_MESSAGE_HEADER_FIELD_SIGNATURE = 8,
  G_DBUS_MESSAGE_HEADER_FIELD_NUM_UNIX_FDS = 9
}
global GDBusPropertyInfoFlags: type <cimport,nodecl,using> = @enum(cint){
  G_DBUS_PROPERTY_INFO_FLAGS_NONE = 0,
  G_DBUS_PROPERTY_INFO_FLAGS_READABLE = 1,
  G_DBUS_PROPERTY_INFO_FLAGS_WRITABLE = 2
}
global GDBusSubtreeFlags: type <cimport,nodecl,using> = @enum(cint){
  G_DBUS_SUBTREE_FLAGS_NONE = 0,
  G_DBUS_SUBTREE_FLAGS_DISPATCH_TO_UNENUMERATED_NODES = 1
}
global GDBusServerFlags: type <cimport,nodecl,using> = @enum(cint){
  G_DBUS_SERVER_FLAGS_NONE = 0,
  G_DBUS_SERVER_FLAGS_RUN_IN_THREAD = 1,
  G_DBUS_SERVER_FLAGS_AUTHENTICATION_ALLOW_ANONYMOUS = 2,
  G_DBUS_SERVER_FLAGS_AUTHENTICATION_REQUIRE_SAME_USER = 4
}
global GDBusSignalFlags: type <cimport,nodecl,using> = @enum(cint){
  G_DBUS_SIGNAL_FLAGS_NONE = 0,
  G_DBUS_SIGNAL_FLAGS_NO_MATCH_RULE = 1,
  G_DBUS_SIGNAL_FLAGS_MATCH_ARG0_NAMESPACE = 2,
  G_DBUS_SIGNAL_FLAGS_MATCH_ARG0_PATH = 4
}
global GDBusSendMessageFlags: type <cimport,nodecl,using> = @enum(cint){
  G_DBUS_SEND_MESSAGE_FLAGS_NONE = 0,
  G_DBUS_SEND_MESSAGE_FLAGS_PRESERVE_SERIAL = 1
}
global GCredentialsType: type <cimport,nodecl,using> = @enum(cint){
  G_CREDENTIALS_TYPE_INVALID = 0,
  G_CREDENTIALS_TYPE_LINUX_UCRED = 1,
  G_CREDENTIALS_TYPE_FREEBSD_CMSGCRED = 2,
  G_CREDENTIALS_TYPE_OPENBSD_SOCKPEERCRED = 3,
  G_CREDENTIALS_TYPE_SOLARIS_UCRED = 4,
  G_CREDENTIALS_TYPE_NETBSD_UNPCBID = 5,
  G_CREDENTIALS_TYPE_APPLE_XUCRED = 6
}
global GDBusMessageByteOrder: type <cimport,nodecl,using> = @enum(cint){
  G_DBUS_MESSAGE_BYTE_ORDER_BIG_ENDIAN = 66,
  G_DBUS_MESSAGE_BYTE_ORDER_LITTLE_ENDIAN = 108
}
global GApplicationFlags: type <cimport,nodecl,using> = @enum(cint){
  G_APPLICATION_FLAGS_NONE = 0,
  G_APPLICATION_IS_SERVICE = 1,
  G_APPLICATION_IS_LAUNCHER = 2,
  G_APPLICATION_HANDLES_OPEN = 4,
  G_APPLICATION_HANDLES_COMMAND_LINE = 8,
  G_APPLICATION_SEND_ENVIRONMENT = 16,
  G_APPLICATION_NON_UNIQUE = 32,
  G_APPLICATION_CAN_OVERRIDE_APP_ID = 64,
  G_APPLICATION_ALLOW_REPLACEMENT = 128,
  G_APPLICATION_REPLACE = 256
}
global GTlsError: type <cimport,nodecl,using> = @enum(cint){
  G_TLS_ERROR_UNAVAILABLE = 0,
  G_TLS_ERROR_MISC = 1,
  G_TLS_ERROR_BAD_CERTIFICATE = 2,
  G_TLS_ERROR_NOT_TLS = 3,
  G_TLS_ERROR_HANDSHAKE = 4,
  G_TLS_ERROR_CERTIFICATE_REQUIRED = 5,
  G_TLS_ERROR_EOF = 6,
  G_TLS_ERROR_INAPPROPRIATE_FALLBACK = 7
}
global GTlsCertificateFlags: type <cimport,nodecl,using> = @enum(cint){
  G_TLS_CERTIFICATE_UNKNOWN_CA = 1,
  G_TLS_CERTIFICATE_BAD_IDENTITY = 2,
  G_TLS_CERTIFICATE_NOT_ACTIVATED = 4,
  G_TLS_CERTIFICATE_EXPIRED = 8,
  G_TLS_CERTIFICATE_REVOKED = 16,
  G_TLS_CERTIFICATE_INSECURE = 32,
  G_TLS_CERTIFICATE_GENERIC_ERROR = 64,
  G_TLS_CERTIFICATE_VALIDATE_ALL = 127
}
global GTlsAuthenticationMode: type <cimport,nodecl,using> = @enum(cint){
  G_TLS_AUTHENTICATION_NONE = 0,
  G_TLS_AUTHENTICATION_REQUESTED = 1,
  G_TLS_AUTHENTICATION_REQUIRED = 2
}
global GTlsChannelBindingType: type <cimport,nodecl,using> = @enum(cint){
  G_TLS_CHANNEL_BINDING_TLS_UNIQUE = 0,
  G_TLS_CHANNEL_BINDING_TLS_SERVER_END_POINT = 1
}
global GTlsChannelBindingError: type <cimport,nodecl,using> = @enum(cint){
  G_TLS_CHANNEL_BINDING_ERROR_NOT_IMPLEMENTED = 0,
  G_TLS_CHANNEL_BINDING_ERROR_INVALID_STATE = 1,
  G_TLS_CHANNEL_BINDING_ERROR_NOT_AVAILABLE = 2,
  G_TLS_CHANNEL_BINDING_ERROR_NOT_SUPPORTED = 3,
  G_TLS_CHANNEL_BINDING_ERROR_GENERAL_ERROR = 4
}
global GTlsRehandshakeMode: type <cimport,nodecl,using> = @enum(cint){
  G_TLS_REHANDSHAKE_NEVER = 0,
  G_TLS_REHANDSHAKE_SAFELY = 1,
  G_TLS_REHANDSHAKE_UNSAFELY = 2
}
global GTlsPasswordFlags: type <cimport,nodecl,using> = @enum(cint){
  G_TLS_PASSWORD_NONE = 0,
  G_TLS_PASSWORD_RETRY = 2,
  G_TLS_PASSWORD_MANY_TRIES = 4,
  G_TLS_PASSWORD_FINAL_TRY = 8,
  G_TLS_PASSWORD_PKCS11_USER = 16,
  G_TLS_PASSWORD_PKCS11_SECURITY_OFFICER = 32,
  G_TLS_PASSWORD_PKCS11_CONTEXT_SPECIFIC = 64
}
global GTlsInteractionResult: type <cimport,nodecl,using> = @enum(cint){
  G_TLS_INTERACTION_UNHANDLED = 0,
  G_TLS_INTERACTION_HANDLED = 1,
  G_TLS_INTERACTION_FAILED = 2
}
global GDBusInterfaceSkeletonFlags: type <cimport,nodecl,using> = @enum(cint){
  G_DBUS_INTERFACE_SKELETON_FLAGS_NONE = 0,
  G_DBUS_INTERFACE_SKELETON_FLAGS_HANDLE_METHOD_INVOCATIONS_IN_THREAD = 1
}
global GDBusObjectManagerClientFlags: type <cimport,nodecl,using> = @enum(cint){
  G_DBUS_OBJECT_MANAGER_CLIENT_FLAGS_NONE = 0,
  G_DBUS_OBJECT_MANAGER_CLIENT_FLAGS_DO_NOT_AUTO_START = 1
}
global GTlsDatabaseVerifyFlags: type <cimport,nodecl,using> = @enum(cint){
  G_TLS_DATABASE_VERIFY_NONE = 0
}
global GTlsDatabaseLookupFlags: type <cimport,nodecl,using> = @enum(cint){
  G_TLS_DATABASE_LOOKUP_NONE = 0,
  G_TLS_DATABASE_LOOKUP_KEYPAIR = 1
}
global GTlsCertificateRequestFlags: type <cimport,nodecl,using> = @enum(cint){
  G_TLS_CERTIFICATE_REQUEST_NONE = 0
}
global GTlsProtocolVersion: type <cimport,nodecl,using> = @enum(cint){
  G_TLS_PROTOCOL_VERSION_UNKNOWN = 0,
  G_TLS_PROTOCOL_VERSION_SSL_3_0 = 1,
  G_TLS_PROTOCOL_VERSION_TLS_1_0 = 2,
  G_TLS_PROTOCOL_VERSION_TLS_1_1 = 3,
  G_TLS_PROTOCOL_VERSION_TLS_1_2 = 4,
  G_TLS_PROTOCOL_VERSION_TLS_1_3 = 5,
  G_TLS_PROTOCOL_VERSION_DTLS_1_0 = 201,
  G_TLS_PROTOCOL_VERSION_DTLS_1_2 = 202
}
global GIOModuleScopeFlags: type <cimport,nodecl,using> = @enum(cint){
  G_IO_MODULE_SCOPE_NONE = 0,
  G_IO_MODULE_SCOPE_BLOCK_DUPLICATES = 1
}
global GSocketClientEvent: type <cimport,nodecl,using> = @enum(cint){
  G_SOCKET_CLIENT_RESOLVING = 0,
  G_SOCKET_CLIENT_RESOLVED = 1,
  G_SOCKET_CLIENT_CONNECTING = 2,
  G_SOCKET_CLIENT_CONNECTED = 3,
  G_SOCKET_CLIENT_PROXY_NEGOTIATING = 4,
  G_SOCKET_CLIENT_PROXY_NEGOTIATED = 5,
  G_SOCKET_CLIENT_TLS_HANDSHAKING = 6,
  G_SOCKET_CLIENT_TLS_HANDSHAKED = 7,
  G_SOCKET_CLIENT_COMPLETE = 8
}
global GSocketListenerEvent: type <cimport,nodecl,using> = @enum(cint){
  G_SOCKET_LISTENER_BINDING = 0,
  G_SOCKET_LISTENER_BOUND = 1,
  G_SOCKET_LISTENER_LISTENING = 2,
  G_SOCKET_LISTENER_LISTENED = 3
}
global GTestDBusFlags: type <cimport,nodecl,using> = @enum(cint){
  G_TEST_DBUS_NONE = 0
}
global GSubprocessFlags: type <cimport,nodecl,using> = @enum(cint){
  G_SUBPROCESS_FLAGS_NONE = 0,
  G_SUBPROCESS_FLAGS_STDIN_PIPE = 1,
  G_SUBPROCESS_FLAGS_STDIN_INHERIT = 2,
  G_SUBPROCESS_FLAGS_STDOUT_PIPE = 4,
  G_SUBPROCESS_FLAGS_STDOUT_SILENCE = 8,
  G_SUBPROCESS_FLAGS_STDERR_PIPE = 16,
  G_SUBPROCESS_FLAGS_STDERR_SILENCE = 32,
  G_SUBPROCESS_FLAGS_STDERR_MERGE = 64,
  G_SUBPROCESS_FLAGS_INHERIT_FDS = 128
}
global GNotificationPriority: type <cimport,nodecl,using> = @enum(cint){
  G_NOTIFICATION_PRIORITY_NORMAL = 0,
  G_NOTIFICATION_PRIORITY_LOW = 1,
  G_NOTIFICATION_PRIORITY_HIGH = 2,
  G_NOTIFICATION_PRIORITY_URGENT = 3
}
global GNetworkConnectivity: type <cimport,nodecl,using> = @enum(cint){
  G_NETWORK_CONNECTIVITY_LOCAL = 1,
  G_NETWORK_CONNECTIVITY_LIMITED = 2,
  G_NETWORK_CONNECTIVITY_PORTAL = 3,
  G_NETWORK_CONNECTIVITY_FULL = 4
}
global GPollableReturn: type <cimport,nodecl,using> = @enum(cint){
  G_POLLABLE_RETURN_FAILED = 0,
  G_POLLABLE_RETURN_OK = 1,
  G_POLLABLE_RETURN_WOULD_BLOCK = -27
}
global GMemoryMonitorWarningLevel: type <cimport,nodecl,using> = @enum(cint){
  G_MEMORY_MONITOR_WARNING_LEVEL_LOW = 50,
  G_MEMORY_MONITOR_WARNING_LEVEL_MEDIUM = 100,
  G_MEMORY_MONITOR_WARNING_LEVEL_CRITICAL = 255
}
global GAppLaunchContext: type <cimport,nodecl,forwarddecl> = @record{}
global GAppInfo: type <cimport,nodecl,forwarddecl> = @record{}
global GAsyncResult: type <cimport,nodecl,forwarddecl> = @record{}
global GAsyncInitable: type <cimport,nodecl,forwarddecl> = @record{}
global GBufferedInputStream: type <cimport,nodecl,forwarddecl> = @record{}
global GBufferedOutputStream: type <cimport,nodecl,forwarddecl> = @record{}
global GCancellable: type <cimport,nodecl,forwarddecl> = @record{}
global GCharsetConverter: type <cimport,nodecl,forwarddecl> = @record{}
global GConverter: type <cimport,nodecl,forwarddecl> = @record{}
global GConverterInputStream: type <cimport,nodecl,forwarddecl> = @record{}
global GConverterOutputStream: type <cimport,nodecl,forwarddecl> = @record{}
global GDatagramBased: type <cimport,nodecl,forwarddecl> = @record{}
global GDataInputStream: type <cimport,nodecl,forwarddecl> = @record{}
global GSimplePermission: type <cimport,nodecl,forwarddecl> = @record{}
global GZlibCompressor: type <cimport,nodecl,forwarddecl> = @record{}
global GZlibDecompressor: type <cimport,nodecl,forwarddecl> = @record{}
global GSimpleActionGroup: type <cimport,nodecl,forwarddecl> = @record{}
global GRemoteActionGroup: type <cimport,nodecl,forwarddecl> = @record{}
global GDBusActionGroup: type <cimport,nodecl,forwarddecl> = @record{}
global GActionMap: type <cimport,nodecl,forwarddecl> = @record{}
global GActionGroup: type <cimport,nodecl,forwarddecl> = @record{}
global GPropertyAction: type <cimport,nodecl,forwarddecl> = @record{}
global GSimpleAction: type <cimport,nodecl,forwarddecl> = @record{}
global GAction: type <cimport,nodecl,forwarddecl> = @record{}
global GApplication: type <cimport,nodecl,forwarddecl> = @record{}
global GApplicationCommandLine: type <cimport,nodecl,forwarddecl> = @record{}
global GSettingsBackend: type <cimport,nodecl,forwarddecl> = @record{}
global GSettings: type <cimport,nodecl,forwarddecl> = @record{}
global GPermission: type <cimport,nodecl,forwarddecl> = @record{}
global GMenuModel: type <cimport,nodecl,forwarddecl> = @record{}
global GNotification: type <cimport,nodecl,forwarddecl> = @record{}
global GDrive: type <cimport,nodecl,forwarddecl> = @record{}
global GFileEnumerator: type <cimport,nodecl,forwarddecl> = @record{}
global GFileMonitor: type <cimport,nodecl,forwarddecl> = @record{}
global GFilterInputStream: type <cimport,nodecl,forwarddecl> = @record{}
global GFilterOutputStream: type <cimport,nodecl,forwarddecl> = @record{}
global GFile: type <cimport,nodecl,forwarddecl> = @record{}
global GFileInfo: type <cimport,nodecl,forwarddecl> = @record{}
global GFileAttributeMatcher: type <cimport,nodecl,forwarddecl> = @record{}
global GFileAttributeInfo: type <cimport,nodecl,forwarddecl> = @record{}
global GFileAttributeInfoList: type <cimport,nodecl,forwarddecl> = @record{}
global GFileDescriptorBased: type <cimport,nodecl,forwarddecl> = @record{}
global GFileInputStream: type <cimport,nodecl,forwarddecl> = @record{}
global GFileOutputStream: type <cimport,nodecl,forwarddecl> = @record{}
global GFileIOStream: type <cimport,nodecl,forwarddecl> = @record{}
global GFileIcon: type <cimport,nodecl,forwarddecl> = @record{}
global GFilenameCompleter: type <cimport,nodecl,forwarddecl> = @record{}
global GIcon: type <cimport,nodecl,forwarddecl> = @record{}
global GInetAddress: type <cimport,nodecl,forwarddecl> = @record{}
global GInetAddressMask: type <cimport,nodecl,forwarddecl> = @record{}
global GInetSocketAddress: type <cimport,nodecl,forwarddecl> = @record{}
global GNativeSocketAddress: type <cimport,nodecl,forwarddecl> = @record{}
global GInputStream: type <cimport,nodecl,forwarddecl> = @record{}
global GInitable: type <cimport,nodecl,forwarddecl> = @record{}
global GIOModule: type <cimport,nodecl,forwarddecl> = @record{}
global GIOExtensionPoint: type <cimport,nodecl,forwarddecl> = @record{}
global GIOExtension: type <cimport,nodecl,forwarddecl> = @record{}
global GIOSchedulerJob: type <cimport,nodecl,forwarddecl> = @record{}
global GIOStreamAdapter: type <cimport,nodecl,forwarddecl> = @record{}
global GLoadableIcon: type <cimport,nodecl,forwarddecl> = @record{}
global GBytesIcon: type <cimport,nodecl,forwarddecl> = @record{}
global GMemoryInputStream: type <cimport,nodecl,forwarddecl> = @record{}
global GMemoryOutputStream: type <cimport,nodecl,forwarddecl> = @record{}
global GMount: type <cimport,nodecl,forwarddecl> = @record{}
global GMountOperation: type <cimport,nodecl,forwarddecl> = @record{}
global GNetworkAddress: type <cimport,nodecl,forwarddecl> = @record{}
global GNetworkMonitor: type <cimport,nodecl,forwarddecl> = @record{}
global GNetworkService: type <cimport,nodecl,forwarddecl> = @record{}
global GOutputStream: type <cimport,nodecl,forwarddecl> = @record{}
global GIOStream: type <cimport,nodecl,forwarddecl> = @record{}
global GSimpleIOStream: type <cimport,nodecl,forwarddecl> = @record{}
global GPollableInputStream: type <cimport,nodecl,forwarddecl> = @record{}
global GPollableOutputStream: type <cimport,nodecl,forwarddecl> = @record{}
global GResolver: type <cimport,nodecl,forwarddecl> = @record{}
global GResource: type <cimport,nodecl,forwarddecl> = @record{}
global GSeekable: type <cimport,nodecl,forwarddecl> = @record{}
global GSimpleAsyncResult: type <cimport,nodecl,forwarddecl> = @record{}
global GSocket: type <cimport,nodecl,forwarddecl> = @record{}
global GSocketControlMessage: type <cimport,nodecl,forwarddecl> = @record{}
global GSocketClient: type <cimport,nodecl,forwarddecl> = @record{}
global GSocketConnection: type <cimport,nodecl,forwarddecl> = @record{}
global GSocketListener: type <cimport,nodecl,forwarddecl> = @record{}
global GSocketService: type <cimport,nodecl,forwarddecl> = @record{}
global GSocketAddress: type <cimport,nodecl,forwarddecl> = @record{}
global GSocketAddressEnumerator: type <cimport,nodecl,forwarddecl> = @record{}
global GSocketConnectable: type <cimport,nodecl,forwarddecl> = @record{}
global GSrvTarget: type <cimport,nodecl,forwarddecl> = @record{}
global GTask: type <cimport,nodecl,forwarddecl> = @record{}
global GTcpConnection: type <cimport,nodecl,forwarddecl> = @record{}
global GTcpWrapperConnection: type <cimport,nodecl,forwarddecl> = @record{}
global GThreadedSocketService: type <cimport,nodecl,forwarddecl> = @record{}
global GDtlsConnection: type <cimport,nodecl,forwarddecl> = @record{}
global GDtlsClientConnection: type <cimport,nodecl,forwarddecl> = @record{}
global GDtlsServerConnection: type <cimport,nodecl,forwarddecl> = @record{}
global GThemedIcon: type <cimport,nodecl,forwarddecl> = @record{}
global GTlsCertificate: type <cimport,nodecl,forwarddecl> = @record{}
global GTlsClientConnection: type <cimport,nodecl,forwarddecl> = @record{}
global GTlsConnection: type <cimport,nodecl,forwarddecl> = @record{}
global GTlsDatabase: type <cimport,nodecl,forwarddecl> = @record{}
global GTlsFileDatabase: type <cimport,nodecl,forwarddecl> = @record{}
global GTlsInteraction: type <cimport,nodecl,forwarddecl> = @record{}
global GTlsPassword: type <cimport,nodecl,forwarddecl> = @record{}
global GTlsServerConnection: type <cimport,nodecl,forwarddecl> = @record{}
global GVfs: type <cimport,nodecl,forwarddecl> = @record{}
global GProxyResolver: type <cimport,nodecl,forwarddecl> = @record{}
global GProxy: type <cimport,nodecl,forwarddecl> = @record{}
global GProxyAddress: type <cimport,nodecl,forwarddecl> = @record{}
global GProxyAddressEnumerator: type <cimport,nodecl,forwarddecl> = @record{}
global GVolume: type <cimport,nodecl,forwarddecl> = @record{}
global GVolumeMonitor: type <cimport,nodecl,forwarddecl> = @record{}
global GAsyncReadyCallback: type <cimport,nodecl> = @function(source_object: *GObject, res: *GAsyncResult, user_data: gpointer): void
global GFileProgressCallback: type <cimport,nodecl> = @function(current_num_bytes: goffset, total_num_bytes: goffset, user_data: gpointer): void
global GFileReadMoreCallback: type <cimport,nodecl> = @function(file_contents: cstring, file_size: goffset, callback_data: gpointer): gboolean
global GFileMeasureProgressCallback: type <cimport,nodecl> = @function(reporting: gboolean, current_size: guint64, num_dirs: guint64, num_files: guint64, user_data: gpointer): void
global GIOSchedulerJobFunc: type <cimport,nodecl> = @function(job: *GIOSchedulerJob, cancellable: *GCancellable, user_data: gpointer): gboolean
global GSimpleAsyncThreadFunc: type <cimport,nodecl> = @function(res: *GSimpleAsyncResult, object: *GObject, cancellable: *GCancellable): void
global GSocketSourceFunc: type <cimport,nodecl> = @function(socket: *GSocket, condition: GIOCondition, user_data: gpointer): gboolean
global GDatagramBasedSourceFunc: type <cimport,nodecl> = @function(datagram_based: *GDatagramBased, condition: GIOCondition, user_data: gpointer): gboolean
global GInputVector: type <cimport,nodecl,forwarddecl> = @record{}
GInputVector = @record{
  buffer: gpointer,
  size: gsize
}
global GInputMessage: type <cimport,nodecl,forwarddecl> = @record{}
GInputMessage = @record{
  address: **GSocketAddress,
  vectors: *GInputVector,
  num_vectors: guint,
  bytes_received: gsize,
  flags: gint,
  control_messages: ***GSocketControlMessage,
  num_control_messages: *guint
}
global GOutputVector: type <cimport,nodecl,forwarddecl> = @record{}
GOutputVector = @record{
  buffer: gconstpointer,
  size: gsize
}
global GOutputMessage: type <cimport,nodecl,forwarddecl> = @record{}
GOutputMessage = @record{
  address: *GSocketAddress,
  vectors: *GOutputVector,
  num_vectors: guint,
  bytes_sent: guint,
  control_messages: **GSocketControlMessage,
  num_control_messages: guint
}
global GCredentials: type <cimport,nodecl,forwarddecl> = @record{}
global GUnixCredentialsMessage: type <cimport,nodecl,forwarddecl> = @record{}
global GUnixFDList: type <cimport,nodecl,forwarddecl> = @record{}
global GDBusMessage: type <cimport,nodecl,forwarddecl> = @record{}
global GDBusConnection: type <cimport,nodecl,forwarddecl> = @record{}
global GDBusProxy: type <cimport,nodecl,forwarddecl> = @record{}
global GDBusMethodInvocation: type <cimport,nodecl,forwarddecl> = @record{}
global GDBusServer: type <cimport,nodecl,forwarddecl> = @record{}
global GDBusAuthObserver: type <cimport,nodecl,forwarddecl> = @record{}
global GDBusErrorEntry: type <cimport,nodecl,forwarddecl> = @record{}
global GDBusInterfaceVTable: type <cimport,nodecl,forwarddecl> = @record{}
global GDBusSubtreeVTable: type <cimport,nodecl,forwarddecl> = @record{}
global GDBusAnnotationInfo: type <cimport,nodecl,forwarddecl> = @record{}
global GDBusArgInfo: type <cimport,nodecl,forwarddecl> = @record{}
global GDBusMethodInfo: type <cimport,nodecl,forwarddecl> = @record{}
global GDBusSignalInfo: type <cimport,nodecl,forwarddecl> = @record{}
global GDBusPropertyInfo: type <cimport,nodecl,forwarddecl> = @record{}
global GDBusInterfaceInfo: type <cimport,nodecl,forwarddecl> = @record{}
global GDBusNodeInfo: type <cimport,nodecl,forwarddecl> = @record{}
global GCancellableSourceFunc: type <cimport,nodecl> = @function(cancellable: *GCancellable, user_data: gpointer): gboolean
global GPollableSourceFunc: type <cimport,nodecl> = @function(pollable_stream: *GObject, user_data: gpointer): gboolean
global GDBusInterface: type <cimport,nodecl,forwarddecl> = @record{}
global GDBusInterfaceSkeleton: type <cimport,nodecl,forwarddecl> = @record{}
global GDBusObject: type <cimport,nodecl,forwarddecl> = @record{}
global GDBusObjectSkeleton: type <cimport,nodecl,forwarddecl> = @record{}
global GDBusObjectProxy: type <cimport,nodecl,forwarddecl> = @record{}
global GDBusObjectManager: type <cimport,nodecl,forwarddecl> = @record{}
global GDBusObjectManagerClient: type <cimport,nodecl,forwarddecl> = @record{}
global GDBusObjectManagerServer: type <cimport,nodecl,forwarddecl> = @record{}
global GDBusProxyTypeFunc: type <cimport,nodecl> = @function(manager: *GDBusObjectManagerClient, object_path: *gchar, interface_name: *gchar, user_data: gpointer): GType
global GTestDBus: type <cimport,nodecl,forwarddecl> = @record{}
global GSubprocess: type <cimport,nodecl,forwarddecl> = @record{}
global GSubprocessLauncher: type <cimport,nodecl,forwarddecl> = @record{}
global GActionInterface: type <cimport,nodecl,forwarddecl> = @record{}
GActionInterface = @record{
  g_iface: GTypeInterface,
  get_name: function(action: *GAction): *gchar,
  get_parameter_type: function(action: *GAction): *GVariantType,
  get_state_type: function(action: *GAction): *GVariantType,
  get_state_hint: function(action: *GAction): *GVariant,
  get_enabled: function(action: *GAction): gboolean,
  get_state: function(action: *GAction): *GVariant,
  change_state: function(action: *GAction, value: *GVariant): void,
  activate: function(action: *GAction, parameter: *GVariant): void
}
global GActionGroupInterface: type <cimport,nodecl,forwarddecl> = @record{}
GActionGroupInterface = @record{
  g_iface: GTypeInterface,
  has_action: function(action_group: *GActionGroup, action_name: *gchar): gboolean,
  list_actions: function(action_group: *GActionGroup): **gchar,
  get_action_enabled: function(action_group: *GActionGroup, action_name: *gchar): gboolean,
  get_action_parameter_type: function(action_group: *GActionGroup, action_name: *gchar): *GVariantType,
  get_action_state_type: function(action_group: *GActionGroup, action_name: *gchar): *GVariantType,
  get_action_state_hint: function(action_group: *GActionGroup, action_name: *gchar): *GVariant,
  get_action_state: function(action_group: *GActionGroup, action_name: *gchar): *GVariant,
  change_action_state: function(action_group: *GActionGroup, action_name: *gchar, value: *GVariant): void,
  activate_action: function(action_group: *GActionGroup, action_name: *gchar, parameter: *GVariant): void,
  action_added: function(action_group: *GActionGroup, action_name: *gchar): void,
  action_removed: function(action_group: *GActionGroup, action_name: *gchar): void,
  action_enabled_changed: function(action_group: *GActionGroup, action_name: *gchar, enabled: gboolean): void,
  action_state_changed: function(action_group: *GActionGroup, action_name: *gchar, state: *GVariant): void,
  query_action: function(action_group: *GActionGroup, action_name: *gchar, enabled: *gboolean, parameter_type: **GVariantType, state_type: **GVariantType, state_hint: **GVariant, state: **GVariant): gboolean
}
global GActionMapInterface: type <cimport,nodecl,forwarddecl> = @record{}
global GActionEntry: type <cimport,nodecl,forwarddecl> = @record{}
GActionMapInterface = @record{
  g_iface: GTypeInterface,
  lookup_action: function(action_map: *GActionMap, action_name: *gchar): *GAction,
  add_action: function(action_map: *GActionMap, action: *GAction): void,
  remove_action: function(action_map: *GActionMap, action_name: *gchar): void
}
GActionEntry = @record{
  name: *gchar,
  activate: function(action: *GSimpleAction, parameter: *GVariant, user_data: gpointer): void,
  parameter_type: *gchar,
  state: *gchar,
  change_state: function(action: *GSimpleAction, value: *GVariant, user_data: gpointer): void,
  padding: [3]gsize
}
global GAppLaunchContextClass: type <cimport,nodecl,forwarddecl> = @record{}
global GAppLaunchContextPrivate: type <cimport,nodecl,forwarddecl> = @record{}
global GAppInfoIface: type <cimport,nodecl,forwarddecl> = @record{}
GAppInfoIface = @record{
  g_iface: GTypeInterface,
  dup: function(appinfo: *GAppInfo): *GAppInfo,
  equal: function(appinfo1: *GAppInfo, appinfo2: *GAppInfo): gboolean,
  get_id: function(appinfo: *GAppInfo): cstring,
  get_name: function(appinfo: *GAppInfo): cstring,
  get_description: function(appinfo: *GAppInfo): cstring,
  get_executable: function(appinfo: *GAppInfo): cstring,
  get_icon: function(appinfo: *GAppInfo): *GIcon,
  launch: function(appinfo: *GAppInfo, files: *GList, context: *GAppLaunchContext, error: **GError): gboolean,
  supports_uris: function(appinfo: *GAppInfo): gboolean,
  supports_files: function(appinfo: *GAppInfo): gboolean,
  launch_uris: function(appinfo: *GAppInfo, uris: *GList, context: *GAppLaunchContext, error: **GError): gboolean,
  should_show: function(appinfo: *GAppInfo): gboolean,
  set_as_default_for_type: function(appinfo: *GAppInfo, content_type: cstring, error: **GError): gboolean,
  set_as_default_for_extension: function(appinfo: *GAppInfo, extension: cstring, error: **GError): gboolean,
  add_supports_type: function(appinfo: *GAppInfo, content_type: cstring, error: **GError): gboolean,
  can_remove_supports_type: function(appinfo: *GAppInfo): gboolean,
  remove_supports_type: function(appinfo: *GAppInfo, content_type: cstring, error: **GError): gboolean,
  can_delete: function(appinfo: *GAppInfo): gboolean,
  do_delete: function(appinfo: *GAppInfo): gboolean,
  get_commandline: function(appinfo: *GAppInfo): cstring,
  get_display_name: function(appinfo: *GAppInfo): cstring,
  set_as_last_used_for_type: function(appinfo: *GAppInfo, content_type: cstring, error: **GError): gboolean,
  get_supported_types: function(appinfo: *GAppInfo): *cstring,
  launch_uris_async: function(appinfo: *GAppInfo, uris: *GList, context: *GAppLaunchContext, cancellable: *GCancellable, callback: GAsyncReadyCallback, user_data: gpointer): void,
  launch_uris_finish: function(appinfo: *GAppInfo, result: *GAsyncResult, error: **GError): gboolean
}
GAppLaunchContext = @record{
  parent_instance: GObject,
  priv: *GAppLaunchContextPrivate
}
GAppLaunchContextClass = @record{
  parent_class: GObjectClass,
  get_display: function(context: *GAppLaunchContext, info: *GAppInfo, files: *GList): cstring,
  get_startup_notify_id: function(context: *GAppLaunchContext, info: *GAppInfo, files: *GList): cstring,
  launch_failed: function(context: *GAppLaunchContext, startup_notify_id: cstring): void,
  launched: function(context: *GAppLaunchContext, info: *GAppInfo, platform_data: *GVariant): void,
  _g_reserved1: function(): void,
  _g_reserved2: function(): void,
  _g_reserved3: function(): void,
  _g_reserved4: function(): void
}
global GAppInfoMonitor: type <cimport,nodecl,forwarddecl> = @record{}
global GApplicationPrivate: type <cimport,nodecl,forwarddecl> = @record{}
global GApplicationClass: type <cimport,nodecl,forwarddecl> = @record{}
GApplication = @record{
  parent_instance: GObject,
  priv: *GApplicationPrivate
}
GApplicationClass = @record{
  parent_class: GObjectClass,
  startup: function(application: *GApplication): void,
  activate: function(application: *GApplication): void,
  open: function(application: *GApplication, files: **GFile, n_files: gint, hint: *gchar): void,
  command_line: function(application: *GApplication, command_line: *GApplicationCommandLine): cint,
  local_command_line: function(application: *GApplication, arguments: ***gchar, exit_status: *cint): gboolean,
  before_emit: function(application: *GApplication, platform_data: *GVariant): void,
  after_emit: function(application: *GApplication, platform_data: *GVariant): void,
  add_platform_data: function(application: *GApplication, builder: *GVariantBuilder): void,
  quit_mainloop: function(application: *GApplication): void,
  run_mainloop: function(application: *GApplication): void,
  shutdown: function(application: *GApplication): void,
  dbus_register: function(application: *GApplication, connection: *GDBusConnection, object_path: *gchar, error: **GError): gboolean,
  dbus_unregister: function(application: *GApplication, connection: *GDBusConnection, object_path: *gchar): void,
  handle_local_options: function(application: *GApplication, options: *GVariantDict): gint,
  name_lost: function(application: *GApplication): gboolean,
  padding: [7]gpointer
}
global GApplicationCommandLinePrivate: type <cimport,nodecl,forwarddecl> = @record{}
global GApplicationCommandLineClass: type <cimport,nodecl,forwarddecl> = @record{}
GApplicationCommandLine = @record{
  parent_instance: GObject,
  priv: *GApplicationCommandLinePrivate
}
GApplicationCommandLineClass = @record{
  parent_class: GObjectClass,
  print_literal: function(cmdline: *GApplicationCommandLine, message: *gchar): void,
  printerr_literal: function(cmdline: *GApplicationCommandLine, message: *gchar): void,
  get_stdin: function(cmdline: *GApplicationCommandLine): *GInputStream,
  padding: [11]gpointer
}
global GInitableIface: type <cimport,nodecl,forwarddecl> = @record{}
GInitableIface = @record{
  g_iface: GTypeInterface,
  init: function(initable: *GInitable, cancellable: *GCancellable, error: **GError): gboolean
}
global GAsyncInitableIface: type <cimport,nodecl,forwarddecl> = @record{}
GAsyncInitableIface = @record{
  g_iface: GTypeInterface,
  init_async: function(initable: *GAsyncInitable, io_priority: cint, cancellable: *GCancellable, callback: GAsyncReadyCallback, user_data: gpointer): void,
  init_finish: function(initable: *GAsyncInitable, res: *GAsyncResult, error: **GError): gboolean
}
global GAsyncResultIface: type <cimport,nodecl,forwarddecl> = @record{}
GAsyncResultIface = @record{
  g_iface: GTypeInterface,
  get_user_data: function(res: *GAsyncResult): gpointer,
  get_source_object: function(res: *GAsyncResult): *GObject,
  is_tagged: function(res: *GAsyncResult, source_tag: gpointer): gboolean
}
global GInputStreamClass: type <cimport,nodecl,forwarddecl> = @record{}
global GInputStreamPrivate: type <cimport,nodecl,forwarddecl> = @record{}
GInputStream = @record{
  parent_instance: GObject,
  priv: *GInputStreamPrivate
}
GInputStreamClass = @record{
  parent_class: GObjectClass,
  read_fn: function(stream: *GInputStream, buffer: pointer, count: gsize, cancellable: *GCancellable, error: **GError): gssize,
  skip: function(stream: *GInputStream, count: gsize, cancellable: *GCancellable, error: **GError): gssize,
  close_fn: function(stream: *GInputStream, cancellable: *GCancellable, error: **GError): gboolean,
  read_async: function(stream: *GInputStream, buffer: pointer, count: gsize, io_priority: cint, cancellable: *GCancellable, callback: GAsyncReadyCallback, user_data: gpointer): void,
  read_finish: function(stream: *GInputStream, result: *GAsyncResult, error: **GError): gssize,
  skip_async: function(stream: *GInputStream, count: gsize, io_priority: cint, cancellable: *GCancellable, callback: GAsyncReadyCallback, user_data: gpointer): void,
  skip_finish: function(stream: *GInputStream, result: *GAsyncResult, error: **GError): gssize,
  close_async: function(stream: *GInputStream, io_priority: cint, cancellable: *GCancellable, callback: GAsyncReadyCallback, user_data: gpointer): void,
  close_finish: function(stream: *GInputStream, result: *GAsyncResult, error: **GError): gboolean,
  _g_reserved1: function(): void,
  _g_reserved2: function(): void,
  _g_reserved3: function(): void,
  _g_reserved4: function(): void,
  _g_reserved5: function(): void
}
global GFilterInputStreamClass: type <cimport,nodecl,forwarddecl> = @record{}
GFilterInputStream = @record{
  parent_instance: GInputStream,
  base_stream: *GInputStream
}
GFilterInputStreamClass = @record{
  parent_class: GInputStreamClass,
  _g_reserved1: function(): void,
  _g_reserved2: function(): void,
  _g_reserved3: function(): void
}
global GBufferedInputStreamClass: type <cimport,nodecl,forwarddecl> = @record{}
global GBufferedInputStreamPrivate: type <cimport,nodecl,forwarddecl> = @record{}
GBufferedInputStream = @record{
  parent_instance: GFilterInputStream,
  priv: *GBufferedInputStreamPrivate
}
GBufferedInputStreamClass = @record{
  parent_class: GFilterInputStreamClass,
  fill: function(stream: *GBufferedInputStream, count: gssize, cancellable: *GCancellable, error: **GError): gssize,
  fill_async: function(stream: *GBufferedInputStream, count: gssize, io_priority: cint, cancellable: *GCancellable, callback: GAsyncReadyCallback, user_data: gpointer): void,
  fill_finish: function(stream: *GBufferedInputStream, result: *GAsyncResult, error: **GError): gssize,
  _g_reserved1: function(): void,
  _g_reserved2: function(): void,
  _g_reserved3: function(): void,
  _g_reserved4: function(): void,
  _g_reserved5: function(): void
}
global GOutputStreamClass: type <cimport,nodecl,forwarddecl> = @record{}
global GOutputStreamPrivate: type <cimport,nodecl,forwarddecl> = @record{}
GOutputStream = @record{
  parent_instance: GObject,
  priv: *GOutputStreamPrivate
}
GOutputStreamClass = @record{
  parent_class: GObjectClass,
  write_fn: function(stream: *GOutputStream, buffer: pointer, count: gsize, cancellable: *GCancellable, error: **GError): gssize,
  splice: function(stream: *GOutputStream, source: *GInputStream, flags: GOutputStreamSpliceFlags, cancellable: *GCancellable, error: **GError): gssize,
  flush: function(stream: *GOutputStream, cancellable: *GCancellable, error: **GError): gboolean,
  close_fn: function(stream: *GOutputStream, cancellable: *GCancellable, error: **GError): gboolean,
  write_async: function(stream: *GOutputStream, buffer: pointer, count: gsize, io_priority: cint, cancellable: *GCancellable, callback: GAsyncReadyCallback, user_data: gpointer): void,
  write_finish: function(stream: *GOutputStream, result: *GAsyncResult, error: **GError): gssize,
  splice_async: function(stream: *GOutputStream, source: *GInputStream, flags: GOutputStreamSpliceFlags, io_priority: cint, cancellable: *GCancellable, callback: GAsyncReadyCallback, user_data: gpointer): void,
  splice_finish: function(stream: *GOutputStream, result: *GAsyncResult, error: **GError): gssize,
  flush_async: function(stream: *GOutputStream, io_priority: cint, cancellable: *GCancellable, callback: GAsyncReadyCallback, user_data: gpointer): void,
  flush_finish: function(stream: *GOutputStream, result: *GAsyncResult, error: **GError): gboolean,
  close_async: function(stream: *GOutputStream, io_priority: cint, cancellable: *GCancellable, callback: GAsyncReadyCallback, user_data: gpointer): void,
  close_finish: function(stream: *GOutputStream, result: *GAsyncResult, error: **GError): gboolean,
  writev_fn: function(stream: *GOutputStream, vectors: *GOutputVector, n_vectors: gsize, bytes_written: *gsize, cancellable: *GCancellable, error: **GError): gboolean,
  writev_async: function(stream: *GOutputStream, vectors: *GOutputVector, n_vectors: gsize, io_priority: cint, cancellable: *GCancellable, callback: GAsyncReadyCallback, user_data: gpointer): void,
  writev_finish: function(stream: *GOutputStream, result: *GAsyncResult, bytes_written: *gsize, error: **GError): gboolean,
  _g_reserved4: function(): void,
  _g_reserved5: function(): void,
  _g_reserved6: function(): void,
  _g_reserved7: function(): void,
  _g_reserved8: function(): void
}
global GFilterOutputStreamClass: type <cimport,nodecl,forwarddecl> = @record{}
GFilterOutputStream = @record{
  parent_instance: GOutputStream,
  base_stream: *GOutputStream
}
GFilterOutputStreamClass = @record{
  parent_class: GOutputStreamClass,
  _g_reserved1: function(): void,
  _g_reserved2: function(): void,
  _g_reserved3: function(): void
}
global GBufferedOutputStreamClass: type <cimport,nodecl,forwarddecl> = @record{}
global GBufferedOutputStreamPrivate: type <cimport,nodecl,forwarddecl> = @record{}
GBufferedOutputStream = @record{
  parent_instance: GFilterOutputStream,
  priv: *GBufferedOutputStreamPrivate
}
GBufferedOutputStreamClass = @record{
  parent_class: GFilterOutputStreamClass,
  _g_reserved1: function(): void,
  _g_reserved2: function(): void
}
global GCancellableClass: type <cimport,nodecl,forwarddecl> = @record{}
global GCancellablePrivate: type <cimport,nodecl,forwarddecl> = @record{}
GCancellable = @record{
  parent_instance: GObject,
  priv: *GCancellablePrivate
}
GCancellableClass = @record{
  parent_class: GObjectClass,
  cancelled: function(cancellable: *GCancellable): void,
  _g_reserved1: function(): void,
  _g_reserved2: function(): void,
  _g_reserved3: function(): void,
  _g_reserved4: function(): void,
  _g_reserved5: function(): void
}
global GConverterIface: type <cimport,nodecl,forwarddecl> = @record{}
GConverterIface = @record{
  g_iface: GTypeInterface,
  convert: function(converter: *GConverter, inbuf: pointer, inbuf_size: gsize, outbuf: pointer, outbuf_size: gsize, flags: GConverterFlags, bytes_read: *gsize, bytes_written: *gsize, error: **GError): GConverterResult,
  reset: function(converter: *GConverter): void
}
global GCharsetConverterClass: type <cimport,nodecl,forwarddecl> = @record{}
GCharsetConverterClass = @record{
  parent_class: GObjectClass
}
global GConverterInputStreamClass: type <cimport,nodecl,forwarddecl> = @record{}
global GConverterInputStreamPrivate: type <cimport,nodecl,forwarddecl> = @record{}
GConverterInputStream = @record{
  parent_instance: GFilterInputStream,
  priv: *GConverterInputStreamPrivate
}
GConverterInputStreamClass = @record{
  parent_class: GFilterInputStreamClass,
  _g_reserved1: function(): void,
  _g_reserved2: function(): void,
  _g_reserved3: function(): void,
  _g_reserved4: function(): void,
  _g_reserved5: function(): void
}
global GConverterOutputStreamClass: type <cimport,nodecl,forwarddecl> = @record{}
global GConverterOutputStreamPrivate: type <cimport,nodecl,forwarddecl> = @record{}
GConverterOutputStream = @record{
  parent_instance: GFilterOutputStream,
  priv: *GConverterOutputStreamPrivate
}
GConverterOutputStreamClass = @record{
  parent_class: GFilterOutputStreamClass,
  _g_reserved1: function(): void,
  _g_reserved2: function(): void,
  _g_reserved3: function(): void,
  _g_reserved4: function(): void,
  _g_reserved5: function(): void
}
global useconds_t: type <cimport,nodecl> = @cuint
global socklen_t: type <cimport,nodecl> = @cuint
global _PC_LINK_MAX: cint <comptime> = 0
global _PC_MAX_CANON: cint <comptime> = 1
global _PC_MAX_INPUT: cint <comptime> = 2
global _PC_NAME_MAX: cint <comptime> = 3
global _PC_PATH_MAX: cint <comptime> = 4
global _PC_PIPE_BUF: cint <comptime> = 5
global _PC_CHOWN_RESTRICTED: cint <comptime> = 6
global _PC_NO_TRUNC: cint <comptime> = 7
global _PC_VDISABLE: cint <comptime> = 8
global _PC_SYNC_IO: cint <comptime> = 9
global _PC_ASYNC_IO: cint <comptime> = 10
global _PC_PRIO_IO: cint <comptime> = 11
global _PC_SOCK_MAXBUF: cint <comptime> = 12
global _PC_FILESIZEBITS: cint <comptime> = 13
global _PC_REC_INCR_XFER_SIZE: cint <comptime> = 14
global _PC_REC_MAX_XFER_SIZE: cint <comptime> = 15
global _PC_REC_MIN_XFER_SIZE: cint <comptime> = 16
global _PC_REC_XFER_ALIGN: cint <comptime> = 17
global _PC_ALLOC_SIZE_MIN: cint <comptime> = 18
global _PC_SYMLINK_MAX: cint <comptime> = 19
global _PC_2_SYMLINKS: cint <comptime> = 20
global _SC_ARG_MAX: cint <comptime> = 0
global _SC_CHILD_MAX: cint <comptime> = 1
global _SC_CLK_TCK: cint <comptime> = 2
global _SC_NGROUPS_MAX: cint <comptime> = 3
global _SC_OPEN_MAX: cint <comptime> = 4
global _SC_STREAM_MAX: cint <comptime> = 5
global _SC_TZNAME_MAX: cint <comptime> = 6
global _SC_JOB_CONTROL: cint <comptime> = 7
global _SC_SAVED_IDS: cint <comptime> = 8
global _SC_REALTIME_SIGNALS: cint <comptime> = 9
global _SC_PRIORITY_SCHEDULING: cint <comptime> = 10
global _SC_TIMERS: cint <comptime> = 11
global _SC_ASYNCHRONOUS_IO: cint <comptime> = 12
global _SC_PRIORITIZED_IO: cint <comptime> = 13
global _SC_SYNCHRONIZED_IO: cint <comptime> = 14
global _SC_FSYNC: cint <comptime> = 15
global _SC_MAPPED_FILES: cint <comptime> = 16
global _SC_MEMLOCK: cint <comptime> = 17
global _SC_MEMLOCK_RANGE: cint <comptime> = 18
global _SC_MEMORY_PROTECTION: cint <comptime> = 19
global _SC_MESSAGE_PASSING: cint <comptime> = 20
global _SC_SEMAPHORES: cint <comptime> = 21
global _SC_SHARED_MEMORY_OBJECTS: cint <comptime> = 22
global _SC_AIO_LISTIO_MAX: cint <comptime> = 23
global _SC_AIO_MAX: cint <comptime> = 24
global _SC_AIO_PRIO_DELTA_MAX: cint <comptime> = 25
global _SC_DELAYTIMER_MAX: cint <comptime> = 26
global _SC_MQ_OPEN_MAX: cint <comptime> = 27
global _SC_MQ_PRIO_MAX: cint <comptime> = 28
global _SC_VERSION: cint <comptime> = 29
global _SC_PAGESIZE: cint <comptime> = 30
global _SC_RTSIG_MAX: cint <comptime> = 31
global _SC_SEM_NSEMS_MAX: cint <comptime> = 32
global _SC_SEM_VALUE_MAX: cint <comptime> = 33
global _SC_SIGQUEUE_MAX: cint <comptime> = 34
global _SC_TIMER_MAX: cint <comptime> = 35
global _SC_BC_BASE_MAX: cint <comptime> = 36
global _SC_BC_DIM_MAX: cint <comptime> = 37
global _SC_BC_SCALE_MAX: cint <comptime> = 38
global _SC_BC_STRING_MAX: cint <comptime> = 39
global _SC_COLL_WEIGHTS_MAX: cint <comptime> = 40
global _SC_EQUIV_CLASS_MAX: cint <comptime> = 41
global _SC_EXPR_NEST_MAX: cint <comptime> = 42
global _SC_LINE_MAX: cint <comptime> = 43
global _SC_RE_DUP_MAX: cint <comptime> = 44
global _SC_CHARCLASS_NAME_MAX: cint <comptime> = 45
global _SC_2_VERSION: cint <comptime> = 46
global _SC_2_C_BIND: cint <comptime> = 47
global _SC_2_C_DEV: cint <comptime> = 48
global _SC_2_FORT_DEV: cint <comptime> = 49
global _SC_2_FORT_RUN: cint <comptime> = 50
global _SC_2_SW_DEV: cint <comptime> = 51
global _SC_2_LOCALEDEF: cint <comptime> = 52
global _SC_PII: cint <comptime> = 53
global _SC_PII_XTI: cint <comptime> = 54
global _SC_PII_SOCKET: cint <comptime> = 55
global _SC_PII_INTERNET: cint <comptime> = 56
global _SC_PII_OSI: cint <comptime> = 57
global _SC_POLL: cint <comptime> = 58
global _SC_SELECT: cint <comptime> = 59
global _SC_UIO_MAXIOV: cint <comptime> = 60
global _SC_IOV_MAX: cint <comptime> = 60
global _SC_PII_INTERNET_STREAM: cint <comptime> = 61
global _SC_PII_INTERNET_DGRAM: cint <comptime> = 62
global _SC_PII_OSI_COTS: cint <comptime> = 63
global _SC_PII_OSI_CLTS: cint <comptime> = 64
global _SC_PII_OSI_M: cint <comptime> = 65
global _SC_T_IOV_MAX: cint <comptime> = 66
global _SC_THREADS: cint <comptime> = 67
global _SC_THREAD_SAFE_FUNCTIONS: cint <comptime> = 68
global _SC_GETGR_R_SIZE_MAX: cint <comptime> = 69
global _SC_GETPW_R_SIZE_MAX: cint <comptime> = 70
global _SC_LOGIN_NAME_MAX: cint <comptime> = 71
global _SC_TTY_NAME_MAX: cint <comptime> = 72
global _SC_THREAD_DESTRUCTOR_ITERATIONS: cint <comptime> = 73
global _SC_THREAD_KEYS_MAX: cint <comptime> = 74
global _SC_THREAD_STACK_MIN: cint <comptime> = 75
global _SC_THREAD_THREADS_MAX: cint <comptime> = 76
global _SC_THREAD_ATTR_STACKADDR: cint <comptime> = 77
global _SC_THREAD_ATTR_STACKSIZE: cint <comptime> = 78
global _SC_THREAD_PRIORITY_SCHEDULING: cint <comptime> = 79
global _SC_THREAD_PRIO_INHERIT: cint <comptime> = 80
global _SC_THREAD_PRIO_PROTECT: cint <comptime> = 81
global _SC_THREAD_PROCESS_SHARED: cint <comptime> = 82
global _SC_NPROCESSORS_CONF: cint <comptime> = 83
global _SC_NPROCESSORS_ONLN: cint <comptime> = 84
global _SC_PHYS_PAGES: cint <comptime> = 85
global _SC_AVPHYS_PAGES: cint <comptime> = 86
global _SC_ATEXIT_MAX: cint <comptime> = 87
global _SC_PASS_MAX: cint <comptime> = 88
global _SC_XOPEN_VERSION: cint <comptime> = 89
global _SC_XOPEN_XCU_VERSION: cint <comptime> = 90
global _SC_XOPEN_UNIX: cint <comptime> = 91
global _SC_XOPEN_CRYPT: cint <comptime> = 92
global _SC_XOPEN_ENH_I18N: cint <comptime> = 93
global _SC_XOPEN_SHM: cint <comptime> = 94
global _SC_2_CHAR_TERM: cint <comptime> = 95
global _SC_2_C_VERSION: cint <comptime> = 96
global _SC_2_UPE: cint <comptime> = 97
global _SC_XOPEN_XPG2: cint <comptime> = 98
global _SC_XOPEN_XPG3: cint <comptime> = 99
global _SC_XOPEN_XPG4: cint <comptime> = 100
global _SC_CHAR_BIT: cint <comptime> = 101
global _SC_CHAR_MAX: cint <comptime> = 102
global _SC_CHAR_MIN: cint <comptime> = 103
global _SC_INT_MAX: cint <comptime> = 104
global _SC_INT_MIN: cint <comptime> = 105
global _SC_LONG_BIT: cint <comptime> = 106
global _SC_WORD_BIT: cint <comptime> = 107
global _SC_MB_LEN_MAX: cint <comptime> = 108
global _SC_NZERO: cint <comptime> = 109
global _SC_SSIZE_MAX: cint <comptime> = 110
global _SC_SCHAR_MAX: cint <comptime> = 111
global _SC_SCHAR_MIN: cint <comptime> = 112
global _SC_SHRT_MAX: cint <comptime> = 113
global _SC_SHRT_MIN: cint <comptime> = 114
global _SC_UCHAR_MAX: cint <comptime> = 115
global _SC_UINT_MAX: cint <comptime> = 116
global _SC_ULONG_MAX: cint <comptime> = 117
global _SC_USHRT_MAX: cint <comptime> = 118
global _SC_NL_ARGMAX: cint <comptime> = 119
global _SC_NL_LANGMAX: cint <comptime> = 120
global _SC_NL_MSGMAX: cint <comptime> = 121
global _SC_NL_NMAX: cint <comptime> = 122
global _SC_NL_SETMAX: cint <comptime> = 123
global _SC_NL_TEXTMAX: cint <comptime> = 124
global _SC_XBS5_ILP32_OFF32: cint <comptime> = 125
global _SC_XBS5_ILP32_OFFBIG: cint <comptime> = 126
global _SC_XBS5_LP64_OFF64: cint <comptime> = 127
global _SC_XBS5_LPBIG_OFFBIG: cint <comptime> = 128
global _SC_XOPEN_LEGACY: cint <comptime> = 129
global _SC_XOPEN_REALTIME: cint <comptime> = 130
global _SC_XOPEN_REALTIME_THREADS: cint <comptime> = 131
global _SC_ADVISORY_INFO: cint <comptime> = 132
global _SC_BARRIERS: cint <comptime> = 133
global _SC_BASE: cint <comptime> = 134
global _SC_C_LANG_SUPPORT: cint <comptime> = 135
global _SC_C_LANG_SUPPORT_R: cint <comptime> = 136
global _SC_CLOCK_SELECTION: cint <comptime> = 137
global _SC_CPUTIME: cint <comptime> = 138
global _SC_THREAD_CPUTIME: cint <comptime> = 139
global _SC_DEVICE_IO: cint <comptime> = 140
global _SC_DEVICE_SPECIFIC: cint <comptime> = 141
global _SC_DEVICE_SPECIFIC_R: cint <comptime> = 142
global _SC_FD_MGMT: cint <comptime> = 143
global _SC_FIFO: cint <comptime> = 144
global _SC_PIPE: cint <comptime> = 145
global _SC_FILE_ATTRIBUTES: cint <comptime> = 146
global _SC_FILE_LOCKING: cint <comptime> = 147
global _SC_FILE_SYSTEM: cint <comptime> = 148
global _SC_MONOTONIC_CLOCK: cint <comptime> = 149
global _SC_MULTI_PROCESS: cint <comptime> = 150
global _SC_SINGLE_PROCESS: cint <comptime> = 151
global _SC_NETWORKING: cint <comptime> = 152
global _SC_READER_WRITER_LOCKS: cint <comptime> = 153
global _SC_SPIN_LOCKS: cint <comptime> = 154
global _SC_REGEXP: cint <comptime> = 155
global _SC_REGEX_VERSION: cint <comptime> = 156
global _SC_SHELL: cint <comptime> = 157
global _SC_SIGNALS: cint <comptime> = 158
global _SC_SPAWN: cint <comptime> = 159
global _SC_SPORADIC_SERVER: cint <comptime> = 160
global _SC_THREAD_SPORADIC_SERVER: cint <comptime> = 161
global _SC_SYSTEM_DATABASE: cint <comptime> = 162
global _SC_SYSTEM_DATABASE_R: cint <comptime> = 163
global _SC_TIMEOUTS: cint <comptime> = 164
global _SC_TYPED_MEMORY_OBJECTS: cint <comptime> = 165
global _SC_USER_GROUPS: cint <comptime> = 166
global _SC_USER_GROUPS_R: cint <comptime> = 167
global _SC_2_PBS: cint <comptime> = 168
global _SC_2_PBS_ACCOUNTING: cint <comptime> = 169
global _SC_2_PBS_LOCATE: cint <comptime> = 170
global _SC_2_PBS_MESSAGE: cint <comptime> = 171
global _SC_2_PBS_TRACK: cint <comptime> = 172
global _SC_SYMLOOP_MAX: cint <comptime> = 173
global _SC_STREAMS: cint <comptime> = 174
global _SC_2_PBS_CHECKPOINT: cint <comptime> = 175
global _SC_V6_ILP32_OFF32: cint <comptime> = 176
global _SC_V6_ILP32_OFFBIG: cint <comptime> = 177
global _SC_V6_LP64_OFF64: cint <comptime> = 178
global _SC_V6_LPBIG_OFFBIG: cint <comptime> = 179
global _SC_HOST_NAME_MAX: cint <comptime> = 180
global _SC_TRACE: cint <comptime> = 181
global _SC_TRACE_EVENT_FILTER: cint <comptime> = 182
global _SC_TRACE_INHERIT: cint <comptime> = 183
global _SC_TRACE_LOG: cint <comptime> = 184
global _SC_LEVEL1_ICACHE_SIZE: cint <comptime> = 185
global _SC_LEVEL1_ICACHE_ASSOC: cint <comptime> = 186
global _SC_LEVEL1_ICACHE_LINESIZE: cint <comptime> = 187
global _SC_LEVEL1_DCACHE_SIZE: cint <comptime> = 188
global _SC_LEVEL1_DCACHE_ASSOC: cint <comptime> = 189
global _SC_LEVEL1_DCACHE_LINESIZE: cint <comptime> = 190
global _SC_LEVEL2_CACHE_SIZE: cint <comptime> = 191
global _SC_LEVEL2_CACHE_ASSOC: cint <comptime> = 192
global _SC_LEVEL2_CACHE_LINESIZE: cint <comptime> = 193
global _SC_LEVEL3_CACHE_SIZE: cint <comptime> = 194
global _SC_LEVEL3_CACHE_ASSOC: cint <comptime> = 195
global _SC_LEVEL3_CACHE_LINESIZE: cint <comptime> = 196
global _SC_LEVEL4_CACHE_SIZE: cint <comptime> = 197
global _SC_LEVEL4_CACHE_ASSOC: cint <comptime> = 198
global _SC_LEVEL4_CACHE_LINESIZE: cint <comptime> = 199
global _SC_IPV6: cint <comptime> = 235
global _SC_RAW_SOCKETS: cint <comptime> = 236
global _SC_V7_ILP32_OFF32: cint <comptime> = 237
global _SC_V7_ILP32_OFFBIG: cint <comptime> = 238
global _SC_V7_LP64_OFF64: cint <comptime> = 239
global _SC_V7_LPBIG_OFFBIG: cint <comptime> = 240
global _SC_SS_REPL_MAX: cint <comptime> = 241
global _SC_TRACE_EVENT_NAME_MAX: cint <comptime> = 242
global _SC_TRACE_NAME_MAX: cint <comptime> = 243
global _SC_TRACE_SYS_MAX: cint <comptime> = 244
global _SC_TRACE_USER_EVENT_MAX: cint <comptime> = 245
global _SC_XOPEN_STREAMS: cint <comptime> = 246
global _SC_THREAD_ROBUST_PRIO_INHERIT: cint <comptime> = 247
global _SC_THREAD_ROBUST_PRIO_PROTECT: cint <comptime> = 248
global _SC_MINSIGSTKSZ: cint <comptime> = 249
global _SC_SIGSTKSZ: cint <comptime> = 250
global _CS_PATH: cint <comptime> = 0
global _CS_V6_WIDTH_RESTRICTED_ENVS: cint <comptime> = 1
global _CS_GNU_LIBC_VERSION: cint <comptime> = 2
global _CS_GNU_LIBPTHREAD_VERSION: cint <comptime> = 3
global _CS_V5_WIDTH_RESTRICTED_ENVS: cint <comptime> = 4
global _CS_V7_WIDTH_RESTRICTED_ENVS: cint <comptime> = 5
global _CS_LFS_CFLAGS: cint <comptime> = 1000
global _CS_LFS_LDFLAGS: cint <comptime> = 1001
global _CS_LFS_LIBS: cint <comptime> = 1002
global _CS_LFS_LINTFLAGS: cint <comptime> = 1003
global _CS_LFS64_CFLAGS: cint <comptime> = 1004
global _CS_LFS64_LDFLAGS: cint <comptime> = 1005
global _CS_LFS64_LIBS: cint <comptime> = 1006
global _CS_LFS64_LINTFLAGS: cint <comptime> = 1007
global _CS_XBS5_ILP32_OFF32_CFLAGS: cint <comptime> = 1100
global _CS_XBS5_ILP32_OFF32_LDFLAGS: cint <comptime> = 1101
global _CS_XBS5_ILP32_OFF32_LIBS: cint <comptime> = 1102
global _CS_XBS5_ILP32_OFF32_LINTFLAGS: cint <comptime> = 1103
global _CS_XBS5_ILP32_OFFBIG_CFLAGS: cint <comptime> = 1104
global _CS_XBS5_ILP32_OFFBIG_LDFLAGS: cint <comptime> = 1105
global _CS_XBS5_ILP32_OFFBIG_LIBS: cint <comptime> = 1106
global _CS_XBS5_ILP32_OFFBIG_LINTFLAGS: cint <comptime> = 1107
global _CS_XBS5_LP64_OFF64_CFLAGS: cint <comptime> = 1108
global _CS_XBS5_LP64_OFF64_LDFLAGS: cint <comptime> = 1109
global _CS_XBS5_LP64_OFF64_LIBS: cint <comptime> = 1110
global _CS_XBS5_LP64_OFF64_LINTFLAGS: cint <comptime> = 1111
global _CS_XBS5_LPBIG_OFFBIG_CFLAGS: cint <comptime> = 1112
global _CS_XBS5_LPBIG_OFFBIG_LDFLAGS: cint <comptime> = 1113
global _CS_XBS5_LPBIG_OFFBIG_LIBS: cint <comptime> = 1114
global _CS_XBS5_LPBIG_OFFBIG_LINTFLAGS: cint <comptime> = 1115
global _CS_POSIX_V6_ILP32_OFF32_CFLAGS: cint <comptime> = 1116
global _CS_POSIX_V6_ILP32_OFF32_LDFLAGS: cint <comptime> = 1117
global _CS_POSIX_V6_ILP32_OFF32_LIBS: cint <comptime> = 1118
global _CS_POSIX_V6_ILP32_OFF32_LINTFLAGS: cint <comptime> = 1119
global _CS_POSIX_V6_ILP32_OFFBIG_CFLAGS: cint <comptime> = 1120
global _CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS: cint <comptime> = 1121
global _CS_POSIX_V6_ILP32_OFFBIG_LIBS: cint <comptime> = 1122
global _CS_POSIX_V6_ILP32_OFFBIG_LINTFLAGS: cint <comptime> = 1123
global _CS_POSIX_V6_LP64_OFF64_CFLAGS: cint <comptime> = 1124
global _CS_POSIX_V6_LP64_OFF64_LDFLAGS: cint <comptime> = 1125
global _CS_POSIX_V6_LP64_OFF64_LIBS: cint <comptime> = 1126
global _CS_POSIX_V6_LP64_OFF64_LINTFLAGS: cint <comptime> = 1127
global _CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS: cint <comptime> = 1128
global _CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS: cint <comptime> = 1129
global _CS_POSIX_V6_LPBIG_OFFBIG_LIBS: cint <comptime> = 1130
global _CS_POSIX_V6_LPBIG_OFFBIG_LINTFLAGS: cint <comptime> = 1131
global _CS_POSIX_V7_ILP32_OFF32_CFLAGS: cint <comptime> = 1132
global _CS_POSIX_V7_ILP32_OFF32_LDFLAGS: cint <comptime> = 1133
global _CS_POSIX_V7_ILP32_OFF32_LIBS: cint <comptime> = 1134
global _CS_POSIX_V7_ILP32_OFF32_LINTFLAGS: cint <comptime> = 1135
global _CS_POSIX_V7_ILP32_OFFBIG_CFLAGS: cint <comptime> = 1136
global _CS_POSIX_V7_ILP32_OFFBIG_LDFLAGS: cint <comptime> = 1137
global _CS_POSIX_V7_ILP32_OFFBIG_LIBS: cint <comptime> = 1138
global _CS_POSIX_V7_ILP32_OFFBIG_LINTFLAGS: cint <comptime> = 1139
global _CS_POSIX_V7_LP64_OFF64_CFLAGS: cint <comptime> = 1140
global _CS_POSIX_V7_LP64_OFF64_LDFLAGS: cint <comptime> = 1141
global _CS_POSIX_V7_LP64_OFF64_LIBS: cint <comptime> = 1142
global _CS_POSIX_V7_LP64_OFF64_LINTFLAGS: cint <comptime> = 1143
global _CS_POSIX_V7_LPBIG_OFFBIG_CFLAGS: cint <comptime> = 1144
global _CS_POSIX_V7_LPBIG_OFFBIG_LDFLAGS: cint <comptime> = 1145
global _CS_POSIX_V7_LPBIG_OFFBIG_LIBS: cint <comptime> = 1146
global _CS_POSIX_V7_LPBIG_OFFBIG_LINTFLAGS: cint <comptime> = 1147
global _CS_V6_ENV: cint <comptime> = 1148
global _CS_V7_ENV: cint <comptime> = 1149
global GCredentialsClass: type <cimport,nodecl,forwarddecl> = @record{}
global GDatagramBasedInterface: type <cimport,nodecl,forwarddecl> = @record{}
GDatagramBasedInterface = @record{
  g_iface: GTypeInterface,
  receive_messages: function(datagram_based: *GDatagramBased, messages: *GInputMessage, num_messages: guint, flags: gint, timeout: gint64, cancellable: *GCancellable, error: **GError): gint,
  send_messages: function(datagram_based: *GDatagramBased, messages: *GOutputMessage, num_messages: guint, flags: gint, timeout: gint64, cancellable: *GCancellable, error: **GError): gint,
  create_source: function(datagram_based: *GDatagramBased, condition: GIOCondition, cancellable: *GCancellable): *GSource,
  condition_check: function(datagram_based: *GDatagramBased, condition: GIOCondition): GIOCondition,
  condition_wait: function(datagram_based: *GDatagramBased, condition: GIOCondition, timeout: gint64, cancellable: *GCancellable, error: **GError): gboolean
}
global GDataInputStreamClass: type <cimport,nodecl,forwarddecl> = @record{}
global GDataInputStreamPrivate: type <cimport,nodecl,forwarddecl> = @record{}
GDataInputStream = @record{
  parent_instance: GBufferedInputStream,
  priv: *GDataInputStreamPrivate
}
GDataInputStreamClass = @record{
  parent_class: GBufferedInputStreamClass,
  _g_reserved1: function(): void,
  _g_reserved2: function(): void,
  _g_reserved3: function(): void,
  _g_reserved4: function(): void,
  _g_reserved5: function(): void
}
global GDataOutputStream: type <cimport,nodecl,forwarddecl> = @record{}
global GDataOutputStreamClass: type <cimport,nodecl,forwarddecl> = @record{}
global GDataOutputStreamPrivate: type <cimport,nodecl,forwarddecl> = @record{}
GDataOutputStream = @record{
  parent_instance: GFilterOutputStream,
  priv: *GDataOutputStreamPrivate
}
GDataOutputStreamClass = @record{
  parent_class: GFilterOutputStreamClass,
  _g_reserved1: function(): void,
  _g_reserved2: function(): void,
  _g_reserved3: function(): void,
  _g_reserved4: function(): void,
  _g_reserved5: function(): void
}
global GDBusInterfaceMethodCallFunc: type <cimport,nodecl> = @function(connection: *GDBusConnection, sender: *gchar, object_path: *gchar, interface_name: *gchar, method_name: *gchar, parameters: *GVariant, invocation: *GDBusMethodInvocation, user_data: gpointer): void
global GDBusInterfaceGetPropertyFunc: type <cimport,nodecl> = @function(connection: *GDBusConnection, sender: *gchar, object_path: *gchar, interface_name: *gchar, property_name: *gchar, error: **GError, user_data: gpointer): *GVariant
global GDBusInterfaceSetPropertyFunc: type <cimport,nodecl> = @function(connection: *GDBusConnection, sender: *gchar, object_path: *gchar, interface_name: *gchar, property_name: *gchar, value: *GVariant, error: **GError, user_data: gpointer): gboolean
GDBusInterfaceVTable = @record{
  method_call: GDBusInterfaceMethodCallFunc,
  get_property: GDBusInterfaceGetPropertyFunc,
  set_property: GDBusInterfaceSetPropertyFunc,
  padding: [8]gpointer
}
global GDBusSubtreeEnumerateFunc: type <cimport,nodecl> = @function(connection: *GDBusConnection, sender: *gchar, object_path: *gchar, user_data: gpointer): **gchar
global GDBusSubtreeIntrospectFunc: type <cimport,nodecl> = @function(connection: *GDBusConnection, sender: *gchar, object_path: *gchar, node: *gchar, user_data: gpointer): **GDBusInterfaceInfo
global GDBusSubtreeDispatchFunc: type <cimport,nodecl> = @function(connection: *GDBusConnection, sender: *gchar, object_path: *gchar, interface_name: *gchar, node: *gchar, out_user_data: *gpointer, user_data: gpointer): *GDBusInterfaceVTable
GDBusSubtreeVTable = @record{
  enumerate: GDBusSubtreeEnumerateFunc,
  introspect: GDBusSubtreeIntrospectFunc,
  dispatch: GDBusSubtreeDispatchFunc,
  padding: [8]gpointer
}
global GDBusSignalCallback: type <cimport,nodecl> = @function(connection: *GDBusConnection, sender_name: *gchar, object_path: *gchar, interface_name: *gchar, signal_name: *gchar, parameters: *GVariant, user_data: gpointer): void
global GDBusMessageFilterFunction: type <cimport,nodecl> = @function(connection: *GDBusConnection, message: *GDBusMessage, incoming: gboolean, user_data: gpointer): *GDBusMessage
GDBusErrorEntry = @record{
  error_code: gint,
  dbus_error_name: *gchar
}
global GDBusInterfaceIface: type <cimport,nodecl,forwarddecl> = @record{}
GDBusInterfaceIface = @record{
  parent_iface: GTypeInterface,
  get_info: function(interface_: *GDBusInterface): *GDBusInterfaceInfo,
  get_object: function(interface_: *GDBusInterface): *GDBusObject,
  set_object: function(interface_: *GDBusInterface, object: *GDBusObject): void,
  dup_object: function(interface_: *GDBusInterface): *GDBusObject
}
global GDBusInterfaceSkeletonClass: type <cimport,nodecl,forwarddecl> = @record{}
global GDBusInterfaceSkeletonPrivate: type <cimport,nodecl,forwarddecl> = @record{}
GDBusInterfaceSkeleton = @record{
  parent_instance: GObject,
  priv: *GDBusInterfaceSkeletonPrivate
}
GDBusInterfaceSkeletonClass = @record{
  parent_class: GObjectClass,
  get_info: function(interface_: *GDBusInterfaceSkeleton): *GDBusInterfaceInfo,
  get_vtable: function(interface_: *GDBusInterfaceSkeleton): *GDBusInterfaceVTable,
  get_properties: function(interface_: *GDBusInterfaceSkeleton): *GVariant,
  flush: function(interface_: *GDBusInterfaceSkeleton): void,
  vfunc_padding: [8]gpointer,
  g_authorize_method: function(interface_: *GDBusInterfaceSkeleton, invocation: *GDBusMethodInvocation): gboolean,
  signal_padding: [8]gpointer
}
GDBusAnnotationInfo = @record{
  ref_count: gint,
  key: *gchar,
  value: *gchar,
  annotations: **GDBusAnnotationInfo
}
GDBusArgInfo = @record{
  ref_count: gint,
  name: *gchar,
  signature: *gchar,
  annotations: **GDBusAnnotationInfo
}
GDBusMethodInfo = @record{
  ref_count: gint,
  name: *gchar,
  in_args: **GDBusArgInfo,
  out_args: **GDBusArgInfo,
  annotations: **GDBusAnnotationInfo
}
GDBusSignalInfo = @record{
  ref_count: gint,
  name: *gchar,
  args: **GDBusArgInfo,
  annotations: **GDBusAnnotationInfo
}
GDBusPropertyInfo = @record{
  ref_count: gint,
  name: *gchar,
  signature: *gchar,
  flags: GDBusPropertyInfoFlags,
  annotations: **GDBusAnnotationInfo
}
GDBusInterfaceInfo = @record{
  ref_count: gint,
  name: *gchar,
  methods: **GDBusMethodInfo,
  signals: **GDBusSignalInfo,
  properties: **GDBusPropertyInfo,
  annotations: **GDBusAnnotationInfo
}
GDBusNodeInfo = @record{
  ref_count: gint,
  path: *gchar,
  interfaces: **GDBusInterfaceInfo,
  nodes: **GDBusNodeInfo,
  annotations: **GDBusAnnotationInfo
}
global GDBusMenuModel: type <cimport,nodecl,forwarddecl> = @record{}
global GBusAcquiredCallback: type <cimport,nodecl> = @function(connection: *GDBusConnection, name: *gchar, user_data: gpointer): void
global GBusNameAcquiredCallback: type <cimport,nodecl> = @function(connection: *GDBusConnection, name: *gchar, user_data: gpointer): void
global GBusNameLostCallback: type <cimport,nodecl> = @function(connection: *GDBusConnection, name: *gchar, user_data: gpointer): void
global GBusNameAppearedCallback: type <cimport,nodecl> = @function(connection: *GDBusConnection, name: *gchar, name_owner: *gchar, user_data: gpointer): void
global GBusNameVanishedCallback: type <cimport,nodecl> = @function(connection: *GDBusConnection, name: *gchar, user_data: gpointer): void
global GDBusObjectIface: type <cimport,nodecl,forwarddecl> = @record{}
GDBusObjectIface = @record{
  parent_iface: GTypeInterface,
  get_object_path: function(object: *GDBusObject): *gchar,
  get_interfaces: function(object: *GDBusObject): *GList,
  get_interface: function(object: *GDBusObject, interface_name: *gchar): *GDBusInterface,
  interface_added: function(object: *GDBusObject, interface_: *GDBusInterface): void,
  interface_removed: function(object: *GDBusObject, interface_: *GDBusInterface): void
}
global GDBusObjectManagerIface: type <cimport,nodecl,forwarddecl> = @record{}
GDBusObjectManagerIface = @record{
  parent_iface: GTypeInterface,
  get_object_path: function(manager: *GDBusObjectManager): *gchar,
  get_objects: function(manager: *GDBusObjectManager): *GList,
  get_object: function(manager: *GDBusObjectManager, object_path: *gchar): *GDBusObject,
  get_interface: function(manager: *GDBusObjectManager, object_path: *gchar, interface_name: *gchar): *GDBusInterface,
  object_added: function(manager: *GDBusObjectManager, object: *GDBusObject): void,
  object_removed: function(manager: *GDBusObjectManager, object: *GDBusObject): void,
  interface_added: function(manager: *GDBusObjectManager, object: *GDBusObject, interface_: *GDBusInterface): void,
  interface_removed: function(manager: *GDBusObjectManager, object: *GDBusObject, interface_: *GDBusInterface): void
}
global GDBusObjectManagerClientClass: type <cimport,nodecl,forwarddecl> = @record{}
global GDBusObjectManagerClientPrivate: type <cimport,nodecl,forwarddecl> = @record{}
GDBusObjectManagerClient = @record{
  parent_instance: GObject,
  priv: *GDBusObjectManagerClientPrivate
}
GDBusObjectManagerClientClass = @record{
  parent_class: GObjectClass,
  interface_proxy_signal: function(manager: *GDBusObjectManagerClient, object_proxy: *GDBusObjectProxy, interface_proxy: *GDBusProxy, sender_name: *gchar, signal_name: *gchar, parameters: *GVariant): void,
  interface_proxy_properties_changed: function(manager: *GDBusObjectManagerClient, object_proxy: *GDBusObjectProxy, interface_proxy: *GDBusProxy, changed_properties: *GVariant, invalidated_properties: **gchar): void,
  padding: [8]gpointer
}
global GDBusObjectManagerServerClass: type <cimport,nodecl,forwarddecl> = @record{}
global GDBusObjectManagerServerPrivate: type <cimport,nodecl,forwarddecl> = @record{}
GDBusObjectManagerServer = @record{
  parent_instance: GObject,
  priv: *GDBusObjectManagerServerPrivate
}
GDBusObjectManagerServerClass = @record{
  parent_class: GObjectClass,
  padding: [8]gpointer
}
global GDBusObjectProxyClass: type <cimport,nodecl,forwarddecl> = @record{}
global GDBusObjectProxyPrivate: type <cimport,nodecl,forwarddecl> = @record{}
GDBusObjectProxy = @record{
  parent_instance: GObject,
  priv: *GDBusObjectProxyPrivate
}
GDBusObjectProxyClass = @record{
  parent_class: GObjectClass,
  padding: [8]gpointer
}
global GDBusObjectSkeletonClass: type <cimport,nodecl,forwarddecl> = @record{}
global GDBusObjectSkeletonPrivate: type <cimport,nodecl,forwarddecl> = @record{}
GDBusObjectSkeleton = @record{
  parent_instance: GObject,
  priv: *GDBusObjectSkeletonPrivate
}
GDBusObjectSkeletonClass = @record{
  parent_class: GObjectClass,
  authorize_method: function(object: *GDBusObjectSkeleton, interface_: *GDBusInterfaceSkeleton, invocation: *GDBusMethodInvocation): gboolean,
  padding: [8]gpointer
}
global GDBusProxyClass: type <cimport,nodecl,forwarddecl> = @record{}
global GDBusProxyPrivate: type <cimport,nodecl,forwarddecl> = @record{}
GDBusProxy = @record{
  parent_instance: GObject,
  priv: *GDBusProxyPrivate
}
GDBusProxyClass = @record{
  parent_class: GObjectClass,
  g_properties_changed: function(proxy: *GDBusProxy, changed_properties: *GVariant, invalidated_properties: **gchar): void,
  g_signal: function(proxy: *GDBusProxy, sender_name: *gchar, signal_name: *gchar, parameters: *GVariant): void,
  padding: [32]gpointer
}
global GDriveIface: type <cimport,nodecl,forwarddecl> = @record{}
GDriveIface = @record{
  g_iface: GTypeInterface,
  changed: function(drive: *GDrive): void,
  disconnected: function(drive: *GDrive): void,
  eject_button: function(drive: *GDrive): void,
  get_name: function(drive: *GDrive): cstring,
  get_icon: function(drive: *GDrive): *GIcon,
  has_volumes: function(drive: *GDrive): gboolean,
  get_volumes: function(drive: *GDrive): *GList,
  is_media_removable: function(drive: *GDrive): gboolean,
  has_media: function(drive: *GDrive): gboolean,
  is_media_check_automatic: function(drive: *GDrive): gboolean,
  can_eject: function(drive: *GDrive): gboolean,
  can_poll_for_media: function(drive: *GDrive): gboolean,
  eject: function(drive: *GDrive, flags: GMountUnmountFlags, cancellable: *GCancellable, callback: GAsyncReadyCallback, user_data: gpointer): void,
  eject_finish: function(drive: *GDrive, result: *GAsyncResult, error: **GError): gboolean,
  poll_for_media: function(drive: *GDrive, cancellable: *GCancellable, callback: GAsyncReadyCallback, user_data: gpointer): void,
  poll_for_media_finish: function(drive: *GDrive, result: *GAsyncResult, error: **GError): gboolean,
  get_identifier: function(drive: *GDrive, kind: cstring): cstring,
  enumerate_identifiers: function(drive: *GDrive): *cstring,
  get_start_stop_type: function(drive: *GDrive): GDriveStartStopType,
  can_start: function(drive: *GDrive): gboolean,
  can_start_degraded: function(drive: *GDrive): gboolean,
  start: function(drive: *GDrive, flags: GDriveStartFlags, mount_operation: *GMountOperation, cancellable: *GCancellable, callback: GAsyncReadyCallback, user_data: gpointer): void,
  start_finish: function(drive: *GDrive, result: *GAsyncResult, error: **GError): gboolean,
  can_stop: function(drive: *GDrive): gboolean,
  stop: function(drive: *GDrive, flags: GMountUnmountFlags, mount_operation: *GMountOperation, cancellable: *GCancellable, callback: GAsyncReadyCallback, user_data: gpointer): void,
  stop_finish: function(drive: *GDrive, result: *GAsyncResult, error: **GError): gboolean,
  stop_button: function(drive: *GDrive): void,
  eject_with_operation: function(drive: *GDrive, flags: GMountUnmountFlags, mount_operation: *GMountOperation, cancellable: *GCancellable, callback: GAsyncReadyCallback, user_data: gpointer): void,
  eject_with_operation_finish: function(drive: *GDrive, result: *GAsyncResult, error: **GError): gboolean,
  get_sort_key: function(drive: *GDrive): *gchar,
  get_symbolic_icon: function(drive: *GDrive): *GIcon,
  is_removable: function(drive: *GDrive): gboolean
}
global GDtlsConnectionInterface: type <cimport,nodecl,forwarddecl> = @record{}
GDtlsConnectionInterface = @record{
  g_iface: GTypeInterface,
  accept_certificate: function(connection: *GDtlsConnection, peer_cert: *GTlsCertificate, errors: GTlsCertificateFlags): gboolean,
  handshake: function(conn: *GDtlsConnection, cancellable: *GCancellable, error: **GError): gboolean,
  handshake_async: function(conn: *GDtlsConnection, io_priority: cint, cancellable: *GCancellable, callback: GAsyncReadyCallback, user_data: gpointer): void,
  handshake_finish: function(conn: *GDtlsConnection, result: *GAsyncResult, error: **GError): gboolean,
  shutdown: function(conn: *GDtlsConnection, shutdown_read: gboolean, shutdown_write: gboolean, cancellable: *GCancellable, error: **GError): gboolean,
  shutdown_async: function(conn: *GDtlsConnection, shutdown_read: gboolean, shutdown_write: gboolean, io_priority: cint, cancellable: *GCancellable, callback: GAsyncReadyCallback, user_data: gpointer): void,
  shutdown_finish: function(conn: *GDtlsConnection, result: *GAsyncResult, error: **GError): gboolean,
  set_advertised_protocols: function(conn: *GDtlsConnection, protocols: **gchar): void,
  get_negotiated_protocol: function(conn: *GDtlsConnection): *gchar,
  get_binding_data: function(conn: *GDtlsConnection, type: GTlsChannelBindingType, data: *GByteArray, error: **GError): gboolean
}
global GDtlsClientConnectionInterface: type <cimport,nodecl,forwarddecl> = @record{}
GDtlsClientConnectionInterface = @record{
  g_iface: GTypeInterface
}
global GDtlsServerConnectionInterface: type <cimport,nodecl,forwarddecl> = @record{}
GDtlsServerConnectionInterface = @record{
  g_iface: GTypeInterface
}
global GIconIface: type <cimport,nodecl,forwarddecl> = @record{}
GIconIface = @record{
  g_iface: GTypeInterface,
  hash: function(icon: *GIcon): guint,
  equal: function(icon1: *GIcon, icon2: *GIcon): gboolean,
  to_tokens: function(icon: *GIcon, tokens: *GPtrArray, out_version: *gint): gboolean,
  from_tokens: function(tokens: **gchar, num_tokens: gint, version: gint, error: **GError): *GIcon,
  serialize: function(icon: *GIcon): *GVariant
}
global GEmblem: type <cimport,nodecl,forwarddecl> = @record{}
global GEmblemClass: type <cimport,nodecl,forwarddecl> = @record{}
global GEmblemedIcon: type <cimport,nodecl,forwarddecl> = @record{}
global GEmblemedIconClass: type <cimport,nodecl,forwarddecl> = @record{}
global GEmblemedIconPrivate: type <cimport,nodecl,forwarddecl> = @record{}
GEmblemedIcon = @record{
  parent_instance: GObject,
  priv: *GEmblemedIconPrivate
}
GEmblemedIconClass = @record{
  parent_class: GObjectClass
}
global GFileIface: type <cimport,nodecl,forwarddecl> = @record{}
GFileIface = @record{
  g_iface: GTypeInterface,
  dup: function(file: *GFile): *GFile,
  hash: function(file: *GFile): guint,
  equal: function(file1: *GFile, file2: *GFile): gboolean,
  is_native: function(file: *GFile): gboolean,
  has_uri_scheme: function(file: *GFile, uri_scheme: cstring): gboolean,
  get_uri_scheme: function(file: *GFile): cstring,
  get_basename: function(file: *GFile): cstring,
  get_path: function(file: *GFile): cstring,
  get_uri: function(file: *GFile): cstring,
  get_parse_name: function(file: *GFile): cstring,
  get_parent: function(file: *GFile): *GFile,
  prefix_matches: function(prefix: *GFile, file: *GFile): gboolean,
  get_relative_path: function(parent: *GFile, descendant: *GFile): cstring,
  resolve_relative_path: function(file: *GFile, relative_path: cstring): *GFile,
  get_child_for_display_name: function(file: *GFile, display_name: cstring, error: **GError): *GFile,
  enumerate_children: function(file: *GFile, attributes: cstring, flags: GFileQueryInfoFlags, cancellable: *GCancellable, error: **GError): *GFileEnumerator,
  enumerate_children_async: function(file: *GFile, attributes: cstring, flags: GFileQueryInfoFlags, io_priority: cint, cancellable: *GCancellable, callback: GAsyncReadyCallback, user_data: gpointer): void,
  enumerate_children_finish: function(file: *GFile, res: *GAsyncResult, error: **GError): *GFileEnumerator,
  query_info: function(file: *GFile, attributes: cstring, flags: GFileQueryInfoFlags, cancellable: *GCancellable, error: **GError): *GFileInfo,
  query_info_async: function(file: *GFile, attributes: cstring, flags: GFileQueryInfoFlags, io_priority: cint, cancellable: *GCancellable, callback: GAsyncReadyCallback, user_data: gpointer): void,
  query_info_finish: function(file: *GFile, res: *GAsyncResult, error: **GError): *GFileInfo,
  query_filesystem_info: function(file: *GFile, attributes: cstring, cancellable: *GCancellable, error: **GError): *GFileInfo,
  query_filesystem_info_async: function(file: *GFile, attributes: cstring, io_priority: cint, cancellable: *GCancellable, callback: GAsyncReadyCallback, user_data: gpointer): void,
  query_filesystem_info_finish: function(file: *GFile, res: *GAsyncResult, error: **GError): *GFileInfo,
  find_enclosing_mount: function(file: *GFile, cancellable: *GCancellable, error: **GError): *GMount,
  find_enclosing_mount_async: function(file: *GFile, io_priority: cint, cancellable: *GCancellable, callback: GAsyncReadyCallback, user_data: gpointer): void,
  find_enclosing_mount_finish: function(file: *GFile, res: *GAsyncResult, error: **GError): *GMount,
  set_display_name: function(file: *GFile, display_name: cstring, cancellable: *GCancellable, error: **GError): *GFile,
  set_display_name_async: function(file: *GFile, display_name: cstring, io_priority: cint, cancellable: *GCancellable, callback: GAsyncReadyCallback, user_data: gpointer): void,
  set_display_name_finish: function(file: *GFile, res: *GAsyncResult, error: **GError): *GFile,
  query_settable_attributes: function(file: *GFile, cancellable: *GCancellable, error: **GError): *GFileAttributeInfoList,
  _query_settable_attributes_async: function(): void,
  _query_settable_attributes_finish: function(): void,
  query_writable_namespaces: function(file: *GFile, cancellable: *GCancellable, error: **GError): *GFileAttributeInfoList,
  _query_writable_namespaces_async: function(): void,
  _query_writable_namespaces_finish: function(): void,
  set_attribute: function(file: *GFile, attribute: cstring, type: GFileAttributeType, value_p: gpointer, flags: GFileQueryInfoFlags, cancellable: *GCancellable, error: **GError): gboolean,
  set_attributes_from_info: function(file: *GFile, info: *GFileInfo, flags: GFileQueryInfoFlags, cancellable: *GCancellable, error: **GError): gboolean,
  set_attributes_async: function(file: *GFile, info: *GFileInfo, flags: GFileQueryInfoFlags, io_priority: cint, cancellable: *GCancellable, callback: GAsyncReadyCallback, user_data: gpointer): void,
  set_attributes_finish: function(file: *GFile, result: *GAsyncResult, info: **GFileInfo, error: **GError): gboolean,
  read_fn: function(file: *GFile, cancellable: *GCancellable, error: **GError): *GFileInputStream,
  read_async: function(file: *GFile, io_priority: cint, cancellable: *GCancellable, callback: GAsyncReadyCallback, user_data: gpointer): void,
  read_finish: function(file: *GFile, res: *GAsyncResult, error: **GError): *GFileInputStream,
  append_to: function(file: *GFile, flags: GFileCreateFlags, cancellable: *GCancellable, error: **GError): *GFileOutputStream,
  append_to_async: function(file: *GFile, flags: GFileCreateFlags, io_priority: cint, cancellable: *GCancellable, callback: GAsyncReadyCallback, user_data: gpointer): void,
  append_to_finish: function(file: *GFile, res: *GAsyncResult, error: **GError): *GFileOutputStream,
  create: function(file: *GFile, flags: GFileCreateFlags, cancellable: *GCancellable, error: **GError): *GFileOutputStream,
  create_async: function(file: *GFile, flags: GFileCreateFlags, io_priority: cint, cancellable: *GCancellable, callback: GAsyncReadyCallback, user_data: gpointer): void,
  create_finish: function(file: *GFile, res: *GAsyncResult, error: **GError): *GFileOutputStream,
  replace: function(file: *GFile, etag: cstring, make_backup: gboolean, flags: GFileCreateFlags, cancellable: *GCancellable, error: **GError): *GFileOutputStream,
  replace_async: function(file: *GFile, etag: cstring, make_backup: gboolean, flags: GFileCreateFlags, io_priority: cint, cancellable: *GCancellable, callback: GAsyncReadyCallback, user_data: gpointer): void,
  replace_finish: function(file: *GFile, res: *GAsyncResult, error: **GError): *GFileOutputStream,
  delete_file: function(file: *GFile, cancellable: *GCancellable, error: **GError): gboolean,
  delete_file_async: function(file: *GFile, io_priority: cint, cancellable: *GCancellable, callback: GAsyncReadyCallback, user_data: gpointer): void,
  delete_file_finish: function(file: *GFile, result: *GAsyncResult, error: **GError): gboolean,
  trash: function(file: *GFile, cancellable: *GCancellable, error: **GError): gboolean,
  trash_async: function(file: *GFile, io_priority: cint, cancellable: *GCancellable, callback: GAsyncReadyCallback, user_data: gpointer): void,
  trash_finish: function(file: *GFile, result: *GAsyncResult, error: **GError): gboolean,
  make_directory: function(file: *GFile, cancellable: *GCancellable, error: **GError): gboolean,
  make_directory_async: function(file: *GFile, io_priority: cint, cancellable: *GCancellable, callback: GAsyncReadyCallback, user_data: gpointer): void,
  make_directory_finish: function(file: *GFile, result: *GAsyncResult, error: **GError): gboolean,
  make_symbolic_link: function(file: *GFile, symlink_value: cstring, cancellable: *GCancellable, error: **GError): gboolean,
  _make_symbolic_link_async: function(): void,
  _make_symbolic_link_finish: function(): void,
  copy: function(source: *GFile, destination: *GFile, flags: GFileCopyFlags, cancellable: *GCancellable, progress_callback: GFileProgressCallback, progress_callback_data: gpointer, error: **GError): gboolean,
  copy_async: function(source: *GFile, destination: *GFile, flags: GFileCopyFlags, io_priority: cint, cancellable: *GCancellable, progress_callback: GFileProgressCallback, progress_callback_data: gpointer, callback: GAsyncReadyCallback, user_data: gpointer): void,
  copy_finish: function(file: *GFile, res: *GAsyncResult, error: **GError): gboolean,
  move: function(source: *GFile, destination: *GFile, flags: GFileCopyFlags, cancellable: *GCancellable, progress_callback: GFileProgressCallback, progress_callback_data: gpointer, error: **GError): gboolean,
  _move_async: function(): void,
  _move_finish: function(): void,
  mount_mountable: function(file: *GFile, flags: GMountMountFlags, mount_operation: *GMountOperation, cancellable: *GCancellable, callback: GAsyncReadyCallback, user_data: gpointer): void,
  mount_mountable_finish: function(file: *GFile, result: *GAsyncResult, error: **GError): *GFile,
  unmount_mountable: function(file: *GFile, flags: GMountUnmountFlags, cancellable: *GCancellable, callback: GAsyncReadyCallback, user_data: gpointer): void,
  unmount_mountable_finish: function(file: *GFile, result: *GAsyncResult, error: **GError): gboolean,
  eject_mountable: function(file: *GFile, flags: GMountUnmountFlags, cancellable: *GCancellable, callback: GAsyncReadyCallback, user_data: gpointer): void,
  eject_mountable_finish: function(file: *GFile, result: *GAsyncResult, error: **GError): gboolean,
  mount_enclosing_volume: function(location: *GFile, flags: GMountMountFlags, mount_operation: *GMountOperation, cancellable: *GCancellable, callback: GAsyncReadyCallback, user_data: gpointer): void,
  mount_enclosing_volume_finish: function(location: *GFile, result: *GAsyncResult, error: **GError): gboolean,
  monitor_dir: function(file: *GFile, flags: GFileMonitorFlags, cancellable: *GCancellable, error: **GError): *GFileMonitor,
  monitor_file: function(file: *GFile, flags: GFileMonitorFlags, cancellable: *GCancellable, error: **GError): *GFileMonitor,
  open_readwrite: function(file: *GFile, cancellable: *GCancellable, error: **GError): *GFileIOStream,
  open_readwrite_async: function(file: *GFile, io_priority: cint, cancellable: *GCancellable, callback: GAsyncReadyCallback, user_data: gpointer): void,
  open_readwrite_finish: function(file: *GFile, res: *GAsyncResult, error: **GError): *GFileIOStream,
  create_readwrite: function(file: *GFile, flags: GFileCreateFlags, cancellable: *GCancellable, error: **GError): *GFileIOStream,
  create_readwrite_async: function(file: *GFile, flags: GFileCreateFlags, io_priority: cint, cancellable: *GCancellable, callback: GAsyncReadyCallback, user_data: gpointer): void,
  create_readwrite_finish: function(file: *GFile, res: *GAsyncResult, error: **GError): *GFileIOStream,
  replace_readwrite: function(file: *GFile, etag: cstring, make_backup: gboolean, flags: GFileCreateFlags, cancellable: *GCancellable, error: **GError): *GFileIOStream,
  replace_readwrite_async: function(file: *GFile, etag: cstring, make_backup: gboolean, flags: GFileCreateFlags, io_priority: cint, cancellable: *GCancellable, callback: GAsyncReadyCallback, user_data: gpointer): void,
  replace_readwrite_finish: function(file: *GFile, res: *GAsyncResult, error: **GError): *GFileIOStream,
  start_mountable: function(file: *GFile, flags: GDriveStartFlags, start_operation: *GMountOperation, cancellable: *GCancellable, callback: GAsyncReadyCallback, user_data: gpointer): void,
  start_mountable_finish: function(file: *GFile, result: *GAsyncResult, error: **GError): gboolean,
  stop_mountable: function(file: *GFile, flags: GMountUnmountFlags, mount_operation: *GMountOperation, cancellable: *GCancellable, callback: GAsyncReadyCallback, user_data: gpointer): void,
  stop_mountable_finish: function(file: *GFile, result: *GAsyncResult, error: **GError): gboolean,
  supports_thread_contexts: gboolean,
  unmount_mountable_with_operation: function(file: *GFile, flags: GMountUnmountFlags, mount_operation: *GMountOperation, cancellable: *GCancellable, callback: GAsyncReadyCallback, user_data: gpointer): void,
  unmount_mountable_with_operation_finish: function(file: *GFile, result: *GAsyncResult, error: **GError): gboolean,
  eject_mountable_with_operation: function(file: *GFile, flags: GMountUnmountFlags, mount_operation: *GMountOperation, cancellable: *GCancellable, callback: GAsyncReadyCallback, user_data: gpointer): void,
  eject_mountable_with_operation_finish: function(file: *GFile, result: *GAsyncResult, error: **GError): gboolean,
  poll_mountable: function(file: *GFile, cancellable: *GCancellable, callback: GAsyncReadyCallback, user_data: gpointer): void,
  poll_mountable_finish: function(file: *GFile, result: *GAsyncResult, error: **GError): gboolean,
  measure_disk_usage: function(file: *GFile, flags: GFileMeasureFlags, cancellable: *GCancellable, progress_callback: GFileMeasureProgressCallback, progress_data: gpointer, disk_usage: *guint64, num_dirs: *guint64, num_files: *guint64, error: **GError): gboolean,
  measure_disk_usage_async: function(file: *GFile, flags: GFileMeasureFlags, io_priority: gint, cancellable: *GCancellable, progress_callback: GFileMeasureProgressCallback, progress_data: gpointer, callback: GAsyncReadyCallback, user_data: gpointer): void,
  measure_disk_usage_finish: function(file: *GFile, result: *GAsyncResult, disk_usage: *guint64, num_dirs: *guint64, num_files: *guint64, error: **GError): gboolean
}
GFileAttributeInfo = @record{
  name: cstring,
  type: GFileAttributeType,
  flags: GFileAttributeInfoFlags
}
GFileAttributeInfoList = @record{
  infos: *GFileAttributeInfo,
  n_infos: cint
}
global GFileEnumeratorClass: type <cimport,nodecl,forwarddecl> = @record{}
global GFileEnumeratorPrivate: type <cimport,nodecl,forwarddecl> = @record{}
GFileEnumerator = @record{
  parent_instance: GObject,
  priv: *GFileEnumeratorPrivate
}
GFileEnumeratorClass = @record{
  parent_class: GObjectClass,
  next_file: function(enumerator: *GFileEnumerator, cancellable: *GCancellable, error: **GError): *GFileInfo,
  close_fn: function(enumerator: *GFileEnumerator, cancellable: *GCancellable, error: **GError): gboolean,
  next_files_async: function(enumerator: *GFileEnumerator, num_files: cint, io_priority: cint, cancellable: *GCancellable, callback: GAsyncReadyCallback, user_data: gpointer): void,
  next_files_finish: function(enumerator: *GFileEnumerator, result: *GAsyncResult, error: **GError): *GList,
  close_async: function(enumerator: *GFileEnumerator, io_priority: cint, cancellable: *GCancellable, callback: GAsyncReadyCallback, user_data: gpointer): void,
  close_finish: function(enumerator: *GFileEnumerator, result: *GAsyncResult, error: **GError): gboolean,
  _g_reserved1: function(): void,
  _g_reserved2: function(): void,
  _g_reserved3: function(): void,
  _g_reserved4: function(): void,
  _g_reserved5: function(): void,
  _g_reserved6: function(): void,
  _g_reserved7: function(): void
}
global GFileIconClass: type <cimport,nodecl,forwarddecl> = @record{}
global GFileInfoClass: type <cimport,nodecl,forwarddecl> = @record{}
global GFileInputStreamClass: type <cimport,nodecl,forwarddecl> = @record{}
global GFileInputStreamPrivate: type <cimport,nodecl,forwarddecl> = @record{}
GFileInputStream = @record{
  parent_instance: GInputStream,
  priv: *GFileInputStreamPrivate
}
GFileInputStreamClass = @record{
  parent_class: GInputStreamClass,
  tell: function(stream: *GFileInputStream): goffset,
  can_seek: function(stream: *GFileInputStream): gboolean,
  seek: function(stream: *GFileInputStream, offset: goffset, type: GSeekType, cancellable: *GCancellable, error: **GError): gboolean,
  query_info: function(stream: *GFileInputStream, attributes: cstring, cancellable: *GCancellable, error: **GError): *GFileInfo,
  query_info_async: function(stream: *GFileInputStream, attributes: cstring, io_priority: cint, cancellable: *GCancellable, callback: GAsyncReadyCallback, user_data: gpointer): void,
  query_info_finish: function(stream: *GFileInputStream, result: *GAsyncResult, error: **GError): *GFileInfo,
  _g_reserved1: function(): void,
  _g_reserved2: function(): void,
  _g_reserved3: function(): void,
  _g_reserved4: function(): void,
  _g_reserved5: function(): void
}
global GIOStreamPrivate: type <cimport,nodecl,forwarddecl> = @record{}
global GIOStreamClass: type <cimport,nodecl,forwarddecl> = @record{}
GIOStream = @record{
  parent_instance: GObject,
  priv: *GIOStreamPrivate
}
GIOStreamClass = @record{
  parent_class: GObjectClass,
  get_input_stream: function(stream: *GIOStream): *GInputStream,
  get_output_stream: function(stream: *GIOStream): *GOutputStream,
  close_fn: function(stream: *GIOStream, cancellable: *GCancellable, error: **GError): gboolean,
  close_async: function(stream: *GIOStream, io_priority: cint, cancellable: *GCancellable, callback: GAsyncReadyCallback, user_data: gpointer): void,
  close_finish: function(stream: *GIOStream, result: *GAsyncResult, error: **GError): gboolean,
  _g_reserved1: function(): void,
  _g_reserved2: function(): void,
  _g_reserved3: function(): void,
  _g_reserved4: function(): void,
  _g_reserved5: function(): void,
  _g_reserved6: function(): void,
  _g_reserved7: function(): void,
  _g_reserved8: function(): void,
  _g_reserved9: function(): void,
  _g_reserved10: function(): void
}
global GFileIOStreamClass: type <cimport,nodecl,forwarddecl> = @record{}
global GFileIOStreamPrivate: type <cimport,nodecl,forwarddecl> = @record{}
GFileIOStream = @record{
  parent_instance: GIOStream,
  priv: *GFileIOStreamPrivate
}
GFileIOStreamClass = @record{
  parent_class: GIOStreamClass,
  tell: function(stream: *GFileIOStream): goffset,
  can_seek: function(stream: *GFileIOStream): gboolean,
  seek: function(stream: *GFileIOStream, offset: goffset, type: GSeekType, cancellable: *GCancellable, error: **GError): gboolean,
  can_truncate: function(stream: *GFileIOStream): gboolean,
  truncate_fn: function(stream: *GFileIOStream, size: goffset, cancellable: *GCancellable, error: **GError): gboolean,
  query_info: function(stream: *GFileIOStream, attributes: cstring, cancellable: *GCancellable, error: **GError): *GFileInfo,
  query_info_async: function(stream: *GFileIOStream, attributes: cstring, io_priority: cint, cancellable: *GCancellable, callback: GAsyncReadyCallback, user_data: gpointer): void,
  query_info_finish: function(stream: *GFileIOStream, result: *GAsyncResult, error: **GError): *GFileInfo,
  get_etag: function(stream: *GFileIOStream): cstring,
  _g_reserved1: function(): void,
  _g_reserved2: function(): void,
  _g_reserved3: function(): void,
  _g_reserved4: function(): void,
  _g_reserved5: function(): void
}
global GFileMonitorClass: type <cimport,nodecl,forwarddecl> = @record{}
global GFileMonitorPrivate: type <cimport,nodecl,forwarddecl> = @record{}
GFileMonitor = @record{
  parent_instance: GObject,
  priv: *GFileMonitorPrivate
}
GFileMonitorClass = @record{
  parent_class: GObjectClass,
  changed: function(monitor: *GFileMonitor, file: *GFile, other_file: *GFile, event_type: GFileMonitorEvent): void,
  cancel: function(monitor: *GFileMonitor): gboolean,
  _g_reserved1: function(): void,
  _g_reserved2: function(): void,
  _g_reserved3: function(): void,
  _g_reserved4: function(): void,
  _g_reserved5: function(): void
}
global GFilenameCompleterClass: type <cimport,nodecl,forwarddecl> = @record{}
GFilenameCompleterClass = @record{
  parent_class: GObjectClass,
  got_completion_data: function(filename_completer: *GFilenameCompleter): void,
  _g_reserved1: function(): void,
  _g_reserved2: function(): void,
  _g_reserved3: function(): void
}
global GFileOutputStreamClass: type <cimport,nodecl,forwarddecl> = @record{}
global GFileOutputStreamPrivate: type <cimport,nodecl,forwarddecl> = @record{}
GFileOutputStream = @record{
  parent_instance: GOutputStream,
  priv: *GFileOutputStreamPrivate
}
GFileOutputStreamClass = @record{
  parent_class: GOutputStreamClass,
  tell: function(stream: *GFileOutputStream): goffset,
  can_seek: function(stream: *GFileOutputStream): gboolean,
  seek: function(stream: *GFileOutputStream, offset: goffset, type: GSeekType, cancellable: *GCancellable, error: **GError): gboolean,
  can_truncate: function(stream: *GFileOutputStream): gboolean,
  truncate_fn: function(stream: *GFileOutputStream, size: goffset, cancellable: *GCancellable, error: **GError): gboolean,
  query_info: function(stream: *GFileOutputStream, attributes: cstring, cancellable: *GCancellable, error: **GError): *GFileInfo,
  query_info_async: function(stream: *GFileOutputStream, attributes: cstring, io_priority: cint, cancellable: *GCancellable, callback: GAsyncReadyCallback, user_data: gpointer): void,
  query_info_finish: function(stream: *GFileOutputStream, result: *GAsyncResult, error: **GError): *GFileInfo,
  get_etag: function(stream: *GFileOutputStream): cstring,
  _g_reserved1: function(): void,
  _g_reserved2: function(): void,
  _g_reserved3: function(): void,
  _g_reserved4: function(): void,
  _g_reserved5: function(): void
}
global GInetAddressClass: type <cimport,nodecl,forwarddecl> = @record{}
global GInetAddressPrivate: type <cimport,nodecl,forwarddecl> = @record{}
GInetAddress = @record{
  parent_instance: GObject,
  priv: *GInetAddressPrivate
}
GInetAddressClass = @record{
  parent_class: GObjectClass,
  to_string: function(address: *GInetAddress): *gchar,
  to_bytes: function(address: *GInetAddress): *guint8
}
global GInetAddressMaskClass: type <cimport,nodecl,forwarddecl> = @record{}
global GInetAddressMaskPrivate: type <cimport,nodecl,forwarddecl> = @record{}
GInetAddressMask = @record{
  parent_instance: GObject,
  priv: *GInetAddressMaskPrivate
}
GInetAddressMaskClass = @record{
  parent_class: GObjectClass
}
global GSocketAddressClass: type <cimport,nodecl,forwarddecl> = @record{}
GSocketAddress = @record{
  parent_instance: GObject
}
GSocketAddressClass = @record{
  parent_class: GObjectClass,
  get_family: function(address: *GSocketAddress): GSocketFamily,
  get_native_size: function(address: *GSocketAddress): gssize,
  to_native: function(address: *GSocketAddress, dest: gpointer, destlen: gsize, error: **GError): gboolean
}
global GInetSocketAddressClass: type <cimport,nodecl,forwarddecl> = @record{}
global GInetSocketAddressPrivate: type <cimport,nodecl,forwarddecl> = @record{}
GInetSocketAddress = @record{
  parent_instance: GSocketAddress,
  priv: *GInetSocketAddressPrivate
}
GInetSocketAddressClass = @record{
  parent_class: GSocketAddressClass
}
global GModuleFlags: type <cimport,nodecl,using> = @enum(cint){
  G_MODULE_BIND_LAZY = 1,
  G_MODULE_BIND_LOCAL = 2,
  G_MODULE_BIND_MASK = 3
}
global GModule: type <cimport,nodecl,forwarddecl> = @record{}
global GModuleCheckInit: type <cimport,nodecl> = @function(module: *GModule): *gchar
global GModuleUnload: type <cimport,nodecl> = @function(module: *GModule): void
global GModuleError: type <cimport,nodecl,using> = @enum(cint){
  G_MODULE_ERROR_FAILED = 0,
  G_MODULE_ERROR_CHECK_FAILED = 1
}
global GIOModuleScope: type <cimport,nodecl,forwarddecl> = @record{}
global GIOModuleClass: type <cimport,nodecl,forwarddecl> = @record{}
global GListModel: type <cimport,nodecl,forwarddecl> = @record{}
global GListModelInterface: type <cimport,nodecl,forwarddecl> = @record{}
global GListModel_autoptr: type <cimport,nodecl> = @*GListModel
global GListModel_listautoptr: type <cimport,nodecl> = @*GList
global GListModel_slistautoptr: type <cimport,nodecl> = @*GSList
global GListModel_queueautoptr: type <cimport,nodecl> = @*GQueue
GListModelInterface = @record{
  g_iface: GTypeInterface,
  get_item_type: function(list: *GListModel): GType,
  get_n_items: function(list: *GListModel): guint,
  get_item: function(list: *GListModel, position: guint): gpointer
}
global GListStore: type <cimport,nodecl,forwarddecl> = @record{}
global GListStoreClass: type <cimport,nodecl> = @record{
  parent_class: GObjectClass
}
global GListStore_autoptr: type <cimport,nodecl> = @*GListStore
global GListStore_listautoptr: type <cimport,nodecl> = @*GList
global GListStore_slistautoptr: type <cimport,nodecl> = @*GSList
global GListStore_queueautoptr: type <cimport,nodecl> = @*GQueue
global GListStoreClass_autoptr: type <cimport,nodecl> = @*GListStoreClass
global GListStoreClass_listautoptr: type <cimport,nodecl> = @*GList
global GListStoreClass_slistautoptr: type <cimport,nodecl> = @*GSList
global GListStoreClass_queueautoptr: type <cimport,nodecl> = @*GQueue
global GLoadableIconIface: type <cimport,nodecl,forwarddecl> = @record{}
GLoadableIconIface = @record{
  g_iface: GTypeInterface,
  load: function(icon: *GLoadableIcon, size: cint, type: *cstring, cancellable: *GCancellable, error: **GError): *GInputStream,
  load_async: function(icon: *GLoadableIcon, size: cint, cancellable: *GCancellable, callback: GAsyncReadyCallback, user_data: gpointer): void,
  load_finish: function(icon: *GLoadableIcon, res: *GAsyncResult, type: *cstring, error: **GError): *GInputStream
}
global GMemoryInputStreamClass: type <cimport,nodecl,forwarddecl> = @record{}
global GMemoryInputStreamPrivate: type <cimport,nodecl,forwarddecl> = @record{}
GMemoryInputStream = @record{
  parent_instance: GInputStream,
  priv: *GMemoryInputStreamPrivate
}
GMemoryInputStreamClass = @record{
  parent_class: GInputStreamClass,
  _g_reserved1: function(): void,
  _g_reserved2: function(): void,
  _g_reserved3: function(): void,
  _g_reserved4: function(): void,
  _g_reserved5: function(): void
}
global GMemoryMonitor: type <cimport,nodecl,forwarddecl> = @record{}
global GMemoryMonitorInterface: type <cimport,nodecl,forwarddecl> = @record{}
global GMemoryMonitor_autoptr: type <cimport,nodecl> = @*GMemoryMonitor
global GMemoryMonitor_listautoptr: type <cimport,nodecl> = @*GList
global GMemoryMonitor_slistautoptr: type <cimport,nodecl> = @*GSList
global GMemoryMonitor_queueautoptr: type <cimport,nodecl> = @*GQueue
GMemoryMonitorInterface = @record{
  g_iface: GTypeInterface,
  low_memory_warning: function(monitor: *GMemoryMonitor, level: GMemoryMonitorWarningLevel): void
}
global GMemoryOutputStreamClass: type <cimport,nodecl,forwarddecl> = @record{}
global GMemoryOutputStreamPrivate: type <cimport,nodecl,forwarddecl> = @record{}
GMemoryOutputStream = @record{
  parent_instance: GOutputStream,
  priv: *GMemoryOutputStreamPrivate
}
GMemoryOutputStreamClass = @record{
  parent_class: GOutputStreamClass,
  _g_reserved1: function(): void,
  _g_reserved2: function(): void,
  _g_reserved3: function(): void,
  _g_reserved4: function(): void,
  _g_reserved5: function(): void
}
global GReallocFunc: type <cimport,nodecl> = @function(data: gpointer, size: gsize): gpointer
global GMenuModelPrivate: type <cimport,nodecl,forwarddecl> = @record{}
global GMenuModelClass: type <cimport,nodecl,forwarddecl> = @record{}
global GMenuAttributeIterPrivate: type <cimport,nodecl,forwarddecl> = @record{}
global GMenuAttributeIterClass: type <cimport,nodecl,forwarddecl> = @record{}
global GMenuAttributeIter: type <cimport,nodecl,forwarddecl> = @record{}
global GMenuLinkIterPrivate: type <cimport,nodecl,forwarddecl> = @record{}
global GMenuLinkIterClass: type <cimport,nodecl,forwarddecl> = @record{}
global GMenuLinkIter: type <cimport,nodecl,forwarddecl> = @record{}
GMenuModel = @record{
  parent_instance: GObject,
  priv: *GMenuModelPrivate
}
GMenuModelClass = @record{
  parent_class: GObjectClass,
  is_mutable: function(model: *GMenuModel): gboolean,
  get_n_items: function(model: *GMenuModel): gint,
  get_item_attributes: function(model: *GMenuModel, item_index: gint, attributes: **GHashTable): void,
  iterate_item_attributes: function(model: *GMenuModel, item_index: gint): *GMenuAttributeIter,
  get_item_attribute_value: function(model: *GMenuModel, item_index: gint, attribute: *gchar, expected_type: *GVariantType): *GVariant,
  get_item_links: function(model: *GMenuModel, item_index: gint, links: **GHashTable): void,
  iterate_item_links: function(model: *GMenuModel, item_index: gint): *GMenuLinkIter,
  get_item_link: function(model: *GMenuModel, item_index: gint, link: *gchar): *GMenuModel
}
GMenuAttributeIter = @record{
  parent_instance: GObject,
  priv: *GMenuAttributeIterPrivate
}
GMenuAttributeIterClass = @record{
  parent_class: GObjectClass,
  get_next: function(iter: *GMenuAttributeIter, out_name: **gchar, value: **GVariant): gboolean
}
GMenuLinkIter = @record{
  parent_instance: GObject,
  priv: *GMenuLinkIterPrivate
}
GMenuLinkIterClass = @record{
  parent_class: GObjectClass,
  get_next: function(iter: *GMenuLinkIter, out_link: **gchar, value: **GMenuModel): gboolean
}
global GMenuItem: type <cimport,nodecl,forwarddecl> = @record{}
global GMenu: type <cimport,nodecl,forwarddecl> = @record{}
global GMountIface: type <cimport,nodecl,forwarddecl> = @record{}
GMountIface = @record{
  g_iface: GTypeInterface,
  changed: function(mount: *GMount): void,
  unmounted: function(mount: *GMount): void,
  get_root: function(mount: *GMount): *GFile,
  get_name: function(mount: *GMount): cstring,
  get_icon: function(mount: *GMount): *GIcon,
  get_uuid: function(mount: *GMount): cstring,
  get_volume: function(mount: *GMount): *GVolume,
  get_drive: function(mount: *GMount): *GDrive,
  can_unmount: function(mount: *GMount): gboolean,
  can_eject: function(mount: *GMount): gboolean,
  unmount: function(mount: *GMount, flags: GMountUnmountFlags, cancellable: *GCancellable, callback: GAsyncReadyCallback, user_data: gpointer): void,
  unmount_finish: function(mount: *GMount, result: *GAsyncResult, error: **GError): gboolean,
  eject: function(mount: *GMount, flags: GMountUnmountFlags, cancellable: *GCancellable, callback: GAsyncReadyCallback, user_data: gpointer): void,
  eject_finish: function(mount: *GMount, result: *GAsyncResult, error: **GError): gboolean,
  remount: function(mount: *GMount, flags: GMountMountFlags, mount_operation: *GMountOperation, cancellable: *GCancellable, callback: GAsyncReadyCallback, user_data: gpointer): void,
  remount_finish: function(mount: *GMount, result: *GAsyncResult, error: **GError): gboolean,
  guess_content_type: function(mount: *GMount, force_rescan: gboolean, cancellable: *GCancellable, callback: GAsyncReadyCallback, user_data: gpointer): void,
  guess_content_type_finish: function(mount: *GMount, result: *GAsyncResult, error: **GError): **gchar,
  guess_content_type_sync: function(mount: *GMount, force_rescan: gboolean, cancellable: *GCancellable, error: **GError): **gchar,
  pre_unmount: function(mount: *GMount): void,
  unmount_with_operation: function(mount: *GMount, flags: GMountUnmountFlags, mount_operation: *GMountOperation, cancellable: *GCancellable, callback: GAsyncReadyCallback, user_data: gpointer): void,
  unmount_with_operation_finish: function(mount: *GMount, result: *GAsyncResult, error: **GError): gboolean,
  eject_with_operation: function(mount: *GMount, flags: GMountUnmountFlags, mount_operation: *GMountOperation, cancellable: *GCancellable, callback: GAsyncReadyCallback, user_data: gpointer): void,
  eject_with_operation_finish: function(mount: *GMount, result: *GAsyncResult, error: **GError): gboolean,
  get_default_location: function(mount: *GMount): *GFile,
  get_sort_key: function(mount: *GMount): *gchar,
  get_symbolic_icon: function(mount: *GMount): *GIcon
}
global GMountOperationClass: type <cimport,nodecl,forwarddecl> = @record{}
global GMountOperationPrivate: type <cimport,nodecl,forwarddecl> = @record{}
GMountOperation = @record{
  parent_instance: GObject,
  priv: *GMountOperationPrivate
}
GMountOperationClass = @record{
  parent_class: GObjectClass,
  ask_password: function(op: *GMountOperation, message: cstring, default_user: cstring, default_domain: cstring, flags: GAskPasswordFlags): void,
  ask_question: function(op: *GMountOperation, message: cstring, choices: *[0]cstring): void,
  reply: function(op: *GMountOperation, result: GMountOperationResult): void,
  aborted: function(op: *GMountOperation): void,
  show_processes: function(op: *GMountOperation, message: *gchar, processes: *GArray, choices: *[0]*gchar): void,
  show_unmount_progress: function(op: *GMountOperation, message: *gchar, time_left: gint64, bytes_left: gint64): void,
  _g_reserved1: function(): void,
  _g_reserved2: function(): void,
  _g_reserved3: function(): void,
  _g_reserved4: function(): void,
  _g_reserved5: function(): void,
  _g_reserved6: function(): void,
  _g_reserved7: function(): void,
  _g_reserved8: function(): void,
  _g_reserved9: function(): void
}
global GNativeSocketAddressClass: type <cimport,nodecl,forwarddecl> = @record{}
global GNativeSocketAddressPrivate: type <cimport,nodecl,forwarddecl> = @record{}
GNativeSocketAddress = @record{
  parent_instance: GSocketAddress,
  priv: *GNativeSocketAddressPrivate
}
GNativeSocketAddressClass = @record{
  parent_class: GSocketAddressClass
}
global GVolumeMonitorClass: type <cimport,nodecl,forwarddecl> = @record{}
GVolumeMonitor = @record{
  parent_instance: GObject,
  priv: gpointer
}
GVolumeMonitorClass = @record{
  parent_class: GObjectClass,
  volume_added: function(volume_monitor: *GVolumeMonitor, volume: *GVolume): void,
  volume_removed: function(volume_monitor: *GVolumeMonitor, volume: *GVolume): void,
  volume_changed: function(volume_monitor: *GVolumeMonitor, volume: *GVolume): void,
  mount_added: function(volume_monitor: *GVolumeMonitor, mount: *GMount): void,
  mount_removed: function(volume_monitor: *GVolumeMonitor, mount: *GMount): void,
  mount_pre_unmount: function(volume_monitor: *GVolumeMonitor, mount: *GMount): void,
  mount_changed: function(volume_monitor: *GVolumeMonitor, mount: *GMount): void,
  drive_connected: function(volume_monitor: *GVolumeMonitor, drive: *GDrive): void,
  drive_disconnected: function(volume_monitor: *GVolumeMonitor, drive: *GDrive): void,
  drive_changed: function(volume_monitor: *GVolumeMonitor, drive: *GDrive): void,
  is_supported: function(): gboolean,
  get_connected_drives: function(volume_monitor: *GVolumeMonitor): *GList,
  get_volumes: function(volume_monitor: *GVolumeMonitor): *GList,
  get_mounts: function(volume_monitor: *GVolumeMonitor): *GList,
  get_volume_for_uuid: function(volume_monitor: *GVolumeMonitor, uuid: cstring): *GVolume,
  get_mount_for_uuid: function(volume_monitor: *GVolumeMonitor, uuid: cstring): *GMount,
  adopt_orphan_mount: function(mount: *GMount, volume_monitor: *GVolumeMonitor): *GVolume,
  drive_eject_button: function(volume_monitor: *GVolumeMonitor, drive: *GDrive): void,
  drive_stop_button: function(volume_monitor: *GVolumeMonitor, drive: *GDrive): void,
  _g_reserved1: function(): void,
  _g_reserved2: function(): void,
  _g_reserved3: function(): void,
  _g_reserved4: function(): void,
  _g_reserved5: function(): void,
  _g_reserved6: function(): void
}
global GNativeVolumeMonitor: type <cimport,nodecl,forwarddecl> = @record{}
global GNativeVolumeMonitorClass: type <cimport,nodecl,forwarddecl> = @record{}
GNativeVolumeMonitor = @record{
  parent_instance: GVolumeMonitor
}
GNativeVolumeMonitorClass = @record{
  parent_class: GVolumeMonitorClass,
  get_mount_for_mount_path: function(mount_path: cstring, cancellable: *GCancellable): *GMount
}
global GNetworkAddressClass: type <cimport,nodecl,forwarddecl> = @record{}
global GNetworkAddressPrivate: type <cimport,nodecl,forwarddecl> = @record{}
GNetworkAddress = @record{
  parent_instance: GObject,
  priv: *GNetworkAddressPrivate
}
GNetworkAddressClass = @record{
  parent_class: GObjectClass
}
global GNetworkMonitorInterface: type <cimport,nodecl,forwarddecl> = @record{}
GNetworkMonitorInterface = @record{
  g_iface: GTypeInterface,
  network_changed: function(monitor: *GNetworkMonitor, network_available: gboolean): void,
  can_reach: function(monitor: *GNetworkMonitor, connectable: *GSocketConnectable, cancellable: *GCancellable, error: **GError): gboolean,
  can_reach_async: function(monitor: *GNetworkMonitor, connectable: *GSocketConnectable, cancellable: *GCancellable, callback: GAsyncReadyCallback, user_data: gpointer): void,
  can_reach_finish: function(monitor: *GNetworkMonitor, result: *GAsyncResult, error: **GError): gboolean
}
global GNetworkServiceClass: type <cimport,nodecl,forwarddecl> = @record{}
global GNetworkServicePrivate: type <cimport,nodecl,forwarddecl> = @record{}
GNetworkService = @record{
  parent_instance: GObject,
  priv: *GNetworkServicePrivate
}
GNetworkServiceClass = @record{
  parent_class: GObjectClass
}
global GPermissionPrivate: type <cimport,nodecl,forwarddecl> = @record{}
global GPermissionClass: type <cimport,nodecl,forwarddecl> = @record{}
GPermission = @record{
  parent_instance: GObject,
  priv: *GPermissionPrivate
}
GPermissionClass = @record{
  parent_class: GObjectClass,
  acquire: function(permission: *GPermission, cancellable: *GCancellable, error: **GError): gboolean,
  acquire_async: function(permission: *GPermission, cancellable: *GCancellable, callback: GAsyncReadyCallback, user_data: gpointer): void,
  acquire_finish: function(permission: *GPermission, result: *GAsyncResult, error: **GError): gboolean,
  release: function(permission: *GPermission, cancellable: *GCancellable, error: **GError): gboolean,
  release_async: function(permission: *GPermission, cancellable: *GCancellable, callback: GAsyncReadyCallback, user_data: gpointer): void,
  release_finish: function(permission: *GPermission, result: *GAsyncResult, error: **GError): gboolean,
  reserved: [16]gpointer
}
global GPollableInputStreamInterface: type <cimport,nodecl,forwarddecl> = @record{}
GPollableInputStreamInterface = @record{
  g_iface: GTypeInterface,
  can_poll: function(stream: *GPollableInputStream): gboolean,
  is_readable: function(stream: *GPollableInputStream): gboolean,
  create_source: function(stream: *GPollableInputStream, cancellable: *GCancellable): *GSource,
  read_nonblocking: function(stream: *GPollableInputStream, buffer: pointer, count: gsize, error: **GError): gssize
}
global GPollableOutputStreamInterface: type <cimport,nodecl,forwarddecl> = @record{}
GPollableOutputStreamInterface = @record{
  g_iface: GTypeInterface,
  can_poll: function(stream: *GPollableOutputStream): gboolean,
  is_writable: function(stream: *GPollableOutputStream): gboolean,
  create_source: function(stream: *GPollableOutputStream, cancellable: *GCancellable): *GSource,
  write_nonblocking: function(stream: *GPollableOutputStream, buffer: pointer, count: gsize, error: **GError): gssize,
  writev_nonblocking: function(stream: *GPollableOutputStream, vectors: *GOutputVector, n_vectors: gsize, bytes_written: *gsize, error: **GError): GPollableReturn
}
global GPowerProfileMonitor: type <cimport,nodecl,forwarddecl> = @record{}
global GPowerProfileMonitorInterface: type <cimport,nodecl,forwarddecl> = @record{}
global GPowerProfileMonitor_autoptr: type <cimport,nodecl> = @*GPowerProfileMonitor
global GPowerProfileMonitor_listautoptr: type <cimport,nodecl> = @*GList
global GPowerProfileMonitor_slistautoptr: type <cimport,nodecl> = @*GSList
global GPowerProfileMonitor_queueautoptr: type <cimport,nodecl> = @*GQueue
GPowerProfileMonitorInterface = @record{
  g_iface: GTypeInterface
}
global GProxyInterface: type <cimport,nodecl,forwarddecl> = @record{}
GProxyInterface = @record{
  g_iface: GTypeInterface,
  connect: function(proxy: *GProxy, connection: *GIOStream, proxy_address: *GProxyAddress, cancellable: *GCancellable, error: **GError): *GIOStream,
  connect_async: function(proxy: *GProxy, connection: *GIOStream, proxy_address: *GProxyAddress, cancellable: *GCancellable, callback: GAsyncReadyCallback, user_data: gpointer): void,
  connect_finish: function(proxy: *GProxy, result: *GAsyncResult, error: **GError): *GIOStream,
  supports_hostname: function(proxy: *GProxy): gboolean
}
global GProxyAddressClass: type <cimport,nodecl,forwarddecl> = @record{}
global GProxyAddressPrivate: type <cimport,nodecl,forwarddecl> = @record{}
GProxyAddress = @record{
  parent_instance: GInetSocketAddress,
  priv: *GProxyAddressPrivate
}
GProxyAddressClass = @record{
  parent_class: GInetSocketAddressClass
}
global GSocketAddressEnumeratorClass: type <cimport,nodecl,forwarddecl> = @record{}
GSocketAddressEnumerator = @record{
  parent_instance: GObject
}
GSocketAddressEnumeratorClass = @record{
  parent_class: GObjectClass,
  next: function(enumerator: *GSocketAddressEnumerator, cancellable: *GCancellable, error: **GError): *GSocketAddress,
  next_async: function(enumerator: *GSocketAddressEnumerator, cancellable: *GCancellable, callback: GAsyncReadyCallback, user_data: gpointer): void,
  next_finish: function(enumerator: *GSocketAddressEnumerator, result: *GAsyncResult, error: **GError): *GSocketAddress
}
global GProxyAddressEnumeratorClass: type <cimport,nodecl,forwarddecl> = @record{}
global GProxyAddressEnumeratorPrivate: type <cimport,nodecl,forwarddecl> = @record{}
GProxyAddressEnumerator = @record{
  parent_instance: GSocketAddressEnumerator,
  priv: *GProxyAddressEnumeratorPrivate
}
GProxyAddressEnumeratorClass = @record{
  parent_class: GSocketAddressEnumeratorClass,
  _g_reserved1: function(): void,
  _g_reserved2: function(): void,
  _g_reserved3: function(): void,
  _g_reserved4: function(): void,
  _g_reserved5: function(): void,
  _g_reserved6: function(): void,
  _g_reserved7: function(): void
}
global GProxyResolverInterface: type <cimport,nodecl,forwarddecl> = @record{}
GProxyResolverInterface = @record{
  g_iface: GTypeInterface,
  is_supported: function(resolver: *GProxyResolver): gboolean,
  lookup: function(resolver: *GProxyResolver, uri: *gchar, cancellable: *GCancellable, error: **GError): **gchar,
  lookup_async: function(resolver: *GProxyResolver, uri: *gchar, cancellable: *GCancellable, callback: GAsyncReadyCallback, user_data: gpointer): void,
  lookup_finish: function(resolver: *GProxyResolver, result: *GAsyncResult, error: **GError): **gchar
}
global GRemoteActionGroupInterface: type <cimport,nodecl,forwarddecl> = @record{}
GRemoteActionGroupInterface = @record{
  g_iface: GTypeInterface,
  activate_action_full: function(remote: *GRemoteActionGroup, action_name: *gchar, parameter: *GVariant, platform_data: *GVariant): void,
  change_action_state_full: function(remote: *GRemoteActionGroup, action_name: *gchar, value: *GVariant, platform_data: *GVariant): void
}
global GResolverPrivate: type <cimport,nodecl,forwarddecl> = @record{}
global GResolverClass: type <cimport,nodecl,forwarddecl> = @record{}
GResolver = @record{
  parent_instance: GObject,
  priv: *GResolverPrivate
}
global GResolverNameLookupFlags: type <cimport,nodecl,using> = @enum(cint){
  G_RESOLVER_NAME_LOOKUP_FLAGS_DEFAULT = 0,
  G_RESOLVER_NAME_LOOKUP_FLAGS_IPV4_ONLY = 1,
  G_RESOLVER_NAME_LOOKUP_FLAGS_IPV6_ONLY = 2
}
GResolverClass = @record{
  parent_class: GObjectClass,
  reload: function(resolver: *GResolver): void,
  lookup_by_name: function(resolver: *GResolver, hostname: *gchar, cancellable: *GCancellable, error: **GError): *GList,
  lookup_by_name_async: function(resolver: *GResolver, hostname: *gchar, cancellable: *GCancellable, callback: GAsyncReadyCallback, user_data: gpointer): void,
  lookup_by_name_finish: function(resolver: *GResolver, result: *GAsyncResult, error: **GError): *GList,
  lookup_by_address: function(resolver: *GResolver, address: *GInetAddress, cancellable: *GCancellable, error: **GError): *gchar,
  lookup_by_address_async: function(resolver: *GResolver, address: *GInetAddress, cancellable: *GCancellable, callback: GAsyncReadyCallback, user_data: gpointer): void,
  lookup_by_address_finish: function(resolver: *GResolver, result: *GAsyncResult, error: **GError): *gchar,
  lookup_service: function(resolver: *GResolver, rrname: *gchar, cancellable: *GCancellable, error: **GError): *GList,
  lookup_service_async: function(resolver: *GResolver, rrname: *gchar, cancellable: *GCancellable, callback: GAsyncReadyCallback, user_data: gpointer): void,
  lookup_service_finish: function(resolver: *GResolver, result: *GAsyncResult, error: **GError): *GList,
  lookup_records: function(resolver: *GResolver, rrname: *gchar, record_type: GResolverRecordType, cancellable: *GCancellable, error: **GError): *GList,
  lookup_records_async: function(resolver: *GResolver, rrname: *gchar, record_type: GResolverRecordType, cancellable: *GCancellable, callback: GAsyncReadyCallback, user_data: gpointer): void,
  lookup_records_finish: function(resolver: *GResolver, result: *GAsyncResult, error: **GError): *GList,
  lookup_by_name_with_flags_async: function(resolver: *GResolver, hostname: *gchar, flags: GResolverNameLookupFlags, cancellable: *GCancellable, callback: GAsyncReadyCallback, user_data: gpointer): void,
  lookup_by_name_with_flags_finish: function(resolver: *GResolver, result: *GAsyncResult, error: **GError): *GList,
  lookup_by_name_with_flags: function(resolver: *GResolver, hostname: *gchar, flags: GResolverNameLookupFlags, cancellable: *GCancellable, error: **GError): *GList
}
global GStaticResource: type <cimport,nodecl,forwarddecl> = @record{}
GStaticResource = @record{
  data: *guint8,
  data_len: gsize,
  resource: *GResource,
  next: *GStaticResource,
  padding: gpointer
}
global GSeekableIface: type <cimport,nodecl,forwarddecl> = @record{}
GSeekableIface = @record{
  g_iface: GTypeInterface,
  tell: function(seekable: *GSeekable): goffset,
  can_seek: function(seekable: *GSeekable): gboolean,
  seek: function(seekable: *GSeekable, offset: goffset, type: GSeekType, cancellable: *GCancellable, error: **GError): gboolean,
  can_truncate: function(seekable: *GSeekable): gboolean,
  truncate_fn: function(seekable: *GSeekable, offset: goffset, cancellable: *GCancellable, error: **GError): gboolean
}
global GSettingsSchemaSource: type <cimport,nodecl,forwarddecl> = @record{}
global GSettingsSchema: type <cimport,nodecl,forwarddecl> = @record{}
global GSettingsSchemaKey: type <cimport,nodecl,forwarddecl> = @record{}
global GSettingsPrivate: type <cimport,nodecl,forwarddecl> = @record{}
global GSettingsClass: type <cimport,nodecl,forwarddecl> = @record{}
GSettingsClass = @record{
  parent_class: GObjectClass,
  writable_changed: function(settings: *GSettings, key: *gchar): void,
  changed: function(settings: *GSettings, key: *gchar): void,
  writable_change_event: function(settings: *GSettings, key: GQuark): gboolean,
  change_event: function(settings: *GSettings, keys: *GQuark, n_keys: gint): gboolean,
  padding: [20]gpointer
}
GSettings = @record{
  parent_instance: GObject,
  priv: *GSettingsPrivate
}
global GSettingsBindSetMapping: type <cimport,nodecl> = @function(value: *GValue, expected_type: *GVariantType, user_data: gpointer): *GVariant
global GSettingsBindGetMapping: type <cimport,nodecl> = @function(value: *GValue, variant: *GVariant, user_data: gpointer): gboolean
global GSettingsGetMapping: type <cimport,nodecl> = @function(value: *GVariant, result: *gpointer, user_data: gpointer): gboolean
global GSettingsBindFlags: type <cimport,nodecl,using> = @enum(cint){
  G_SETTINGS_BIND_DEFAULT = 0,
  G_SETTINGS_BIND_GET = 1,
  G_SETTINGS_BIND_SET = 2,
  G_SETTINGS_BIND_NO_SENSITIVITY = 4,
  G_SETTINGS_BIND_GET_NO_CHANGES = 8,
  G_SETTINGS_BIND_INVERT_BOOLEAN = 16
}
global GSimpleActionGroupPrivate: type <cimport,nodecl,forwarddecl> = @record{}
global GSimpleActionGroupClass: type <cimport,nodecl,forwarddecl> = @record{}
GSimpleActionGroup = @record{
  parent_instance: GObject,
  priv: *GSimpleActionGroupPrivate
}
GSimpleActionGroupClass = @record{
  parent_class: GObjectClass,
  padding: [12]gpointer
}
global GSimpleAsyncResultClass: type <cimport,nodecl,forwarddecl> = @record{}
global GSimpleProxyResolver: type <cimport,nodecl,forwarddecl> = @record{}
global GSimpleProxyResolverPrivate: type <cimport,nodecl,forwarddecl> = @record{}
global GSimpleProxyResolverClass: type <cimport,nodecl,forwarddecl> = @record{}
GSimpleProxyResolver = @record{
  parent_instance: GObject,
  priv: *GSimpleProxyResolverPrivate
}
GSimpleProxyResolverClass = @record{
  parent_class: GObjectClass,
  _g_reserved1: function(): void,
  _g_reserved2: function(): void,
  _g_reserved3: function(): void,
  _g_reserved4: function(): void,
  _g_reserved5: function(): void
}
global GSocketPrivate: type <cimport,nodecl,forwarddecl> = @record{}
global GSocketClass: type <cimport,nodecl,forwarddecl> = @record{}
GSocketClass = @record{
  parent_class: GObjectClass,
  _g_reserved1: function(): void,
  _g_reserved2: function(): void,
  _g_reserved3: function(): void,
  _g_reserved4: function(): void,
  _g_reserved5: function(): void,
  _g_reserved6: function(): void,
  _g_reserved7: function(): void,
  _g_reserved8: function(): void,
  _g_reserved9: function(): void,
  _g_reserved10: function(): void
}
GSocket = @record{
  parent_instance: GObject,
  priv: *GSocketPrivate
}
global GSocketClientPrivate: type <cimport,nodecl,forwarddecl> = @record{}
global GSocketClientClass: type <cimport,nodecl,forwarddecl> = @record{}
GSocketClientClass = @record{
  parent_class: GObjectClass,
  event: function(client: *GSocketClient, event: GSocketClientEvent, connectable: *GSocketConnectable, connection: *GIOStream): void,
  _g_reserved1: function(): void,
  _g_reserved2: function(): void,
  _g_reserved3: function(): void,
  _g_reserved4: function(): void
}
GSocketClient = @record{
  parent_instance: GObject,
  priv: *GSocketClientPrivate
}
global GSocketConnectableIface: type <cimport,nodecl,forwarddecl> = @record{}
GSocketConnectableIface = @record{
  g_iface: GTypeInterface,
  enumerate: function(connectable: *GSocketConnectable): *GSocketAddressEnumerator,
  proxy_enumerate: function(connectable: *GSocketConnectable): *GSocketAddressEnumerator,
  to_string: function(connectable: *GSocketConnectable): *gchar
}
global GSocketConnectionPrivate: type <cimport,nodecl,forwarddecl> = @record{}
global GSocketConnectionClass: type <cimport,nodecl,forwarddecl> = @record{}
GSocketConnectionClass = @record{
  parent_class: GIOStreamClass,
  _g_reserved1: function(): void,
  _g_reserved2: function(): void,
  _g_reserved3: function(): void,
  _g_reserved4: function(): void,
  _g_reserved5: function(): void,
  _g_reserved6: function(): void
}
GSocketConnection = @record{
  parent_instance: GIOStream,
  priv: *GSocketConnectionPrivate
}
global GSocketControlMessagePrivate: type <cimport,nodecl,forwarddecl> = @record{}
global GSocketControlMessageClass: type <cimport,nodecl,forwarddecl> = @record{}
GSocketControlMessageClass = @record{
  parent_class: GObjectClass,
  get_size: function(message: *GSocketControlMessage): gsize,
  get_level: function(message: *GSocketControlMessage): cint,
  get_type: function(message: *GSocketControlMessage): cint,
  serialize: function(message: *GSocketControlMessage, data: gpointer): void,
  deserialize: function(level: cint, type: cint, size: gsize, data: gpointer): *GSocketControlMessage,
  _g_reserved1: function(): void,
  _g_reserved2: function(): void,
  _g_reserved3: function(): void,
  _g_reserved4: function(): void,
  _g_reserved5: function(): void
}
GSocketControlMessage = @record{
  parent_instance: GObject,
  priv: *GSocketControlMessagePrivate
}
global GSocketListenerPrivate: type <cimport,nodecl,forwarddecl> = @record{}
global GSocketListenerClass: type <cimport,nodecl,forwarddecl> = @record{}
GSocketListenerClass = @record{
  parent_class: GObjectClass,
  changed: function(listener: *GSocketListener): void,
  event: function(listener: *GSocketListener, event: GSocketListenerEvent, socket: *GSocket): void,
  _g_reserved2: function(): void,
  _g_reserved3: function(): void,
  _g_reserved4: function(): void,
  _g_reserved5: function(): void,
  _g_reserved6: function(): void
}
GSocketListener = @record{
  parent_instance: GObject,
  priv: *GSocketListenerPrivate
}
global GSocketServicePrivate: type <cimport,nodecl,forwarddecl> = @record{}
global GSocketServiceClass: type <cimport,nodecl,forwarddecl> = @record{}
GSocketServiceClass = @record{
  parent_class: GSocketListenerClass,
  incoming: function(service: *GSocketService, connection: *GSocketConnection, source_object: *GObject): gboolean,
  _g_reserved1: function(): void,
  _g_reserved2: function(): void,
  _g_reserved3: function(): void,
  _g_reserved4: function(): void,
  _g_reserved5: function(): void,
  _g_reserved6: function(): void
}
GSocketService = @record{
  parent_instance: GSocketListener,
  priv: *GSocketServicePrivate
}
global GTaskClass: type <cimport,nodecl,forwarddecl> = @record{}
global GTaskThreadFunc: type <cimport,nodecl> = @function(task: *GTask, source_object: gpointer, task_data: gpointer, cancellable: *GCancellable): void
global GTcpConnectionPrivate: type <cimport,nodecl,forwarddecl> = @record{}
global GTcpConnectionClass: type <cimport,nodecl,forwarddecl> = @record{}
GTcpConnectionClass = @record{
  parent_class: GSocketConnectionClass
}
GTcpConnection = @record{
  parent_instance: GSocketConnection,
  priv: *GTcpConnectionPrivate
}
global GTcpWrapperConnectionPrivate: type <cimport,nodecl,forwarddecl> = @record{}
global GTcpWrapperConnectionClass: type <cimport,nodecl,forwarddecl> = @record{}
GTcpWrapperConnectionClass = @record{
  parent_class: GTcpConnectionClass
}
GTcpWrapperConnection = @record{
  parent_instance: GTcpConnection,
  priv: *GTcpWrapperConnectionPrivate
}
global GThemedIconClass: type <cimport,nodecl,forwarddecl> = @record{}
global GThreadedSocketServicePrivate: type <cimport,nodecl,forwarddecl> = @record{}
global GThreadedSocketServiceClass: type <cimport,nodecl,forwarddecl> = @record{}
GThreadedSocketServiceClass = @record{
  parent_class: GSocketServiceClass,
  run: function(service: *GThreadedSocketService, connection: *GSocketConnection, source_object: *GObject): gboolean,
  _g_reserved1: function(): void,
  _g_reserved2: function(): void,
  _g_reserved3: function(): void,
  _g_reserved4: function(): void,
  _g_reserved5: function(): void
}
GThreadedSocketService = @record{
  parent_instance: GSocketService,
  priv: *GThreadedSocketServicePrivate
}
global GTlsBackend: type <cimport,nodecl,forwarddecl> = @record{}
global GTlsBackendInterface: type <cimport,nodecl,forwarddecl> = @record{}
GTlsBackendInterface = @record{
  g_iface: GTypeInterface,
  supports_tls: function(backend: *GTlsBackend): gboolean,
  get_certificate_type: function(): GType,
  get_client_connection_type: function(): GType,
  get_server_connection_type: function(): GType,
  get_file_database_type: function(): GType,
  get_default_database: function(backend: *GTlsBackend): *GTlsDatabase,
  supports_dtls: function(backend: *GTlsBackend): gboolean,
  get_dtls_client_connection_type: function(): GType,
  get_dtls_server_connection_type: function(): GType
}
global GTlsCertificateClass: type <cimport,nodecl,forwarddecl> = @record{}
global GTlsCertificatePrivate: type <cimport,nodecl,forwarddecl> = @record{}
GTlsCertificate = @record{
  parent_instance: GObject,
  priv: *GTlsCertificatePrivate
}
GTlsCertificateClass = @record{
  parent_class: GObjectClass,
  verify: function(cert: *GTlsCertificate, identity: *GSocketConnectable, trusted_ca: *GTlsCertificate): GTlsCertificateFlags,
  padding: [8]gpointer
}
global GTlsConnectionClass: type <cimport,nodecl,forwarddecl> = @record{}
global GTlsConnectionPrivate: type <cimport,nodecl,forwarddecl> = @record{}
GTlsConnection = @record{
  parent_instance: GIOStream,
  priv: *GTlsConnectionPrivate
}
GTlsConnectionClass = @record{
  parent_class: GIOStreamClass,
  accept_certificate: function(connection: *GTlsConnection, peer_cert: *GTlsCertificate, errors: GTlsCertificateFlags): gboolean,
  handshake: function(conn: *GTlsConnection, cancellable: *GCancellable, error: **GError): gboolean,
  handshake_async: function(conn: *GTlsConnection, io_priority: cint, cancellable: *GCancellable, callback: GAsyncReadyCallback, user_data: gpointer): void,
  handshake_finish: function(conn: *GTlsConnection, result: *GAsyncResult, error: **GError): gboolean,
  get_binding_data: function(conn: *GTlsConnection, type: GTlsChannelBindingType, data: *GByteArray, error: **GError): gboolean,
  get_negotiated_protocol: function(conn: *GTlsConnection): *gchar,
  padding: [6]gpointer
}
global GTlsClientConnectionInterface: type <cimport,nodecl,forwarddecl> = @record{}
GTlsClientConnectionInterface = @record{
  g_iface: GTypeInterface,
  copy_session_state: function(conn: *GTlsClientConnection, source: *GTlsClientConnection): void
}
global GTlsDatabaseClass: type <cimport,nodecl,forwarddecl> = @record{}
global GTlsDatabasePrivate: type <cimport,nodecl,forwarddecl> = @record{}
GTlsDatabase = @record{
  parent_instance: GObject,
  priv: *GTlsDatabasePrivate
}
GTlsDatabaseClass = @record{
  parent_class: GObjectClass,
  verify_chain: function(self: *GTlsDatabase, chain: *GTlsCertificate, purpose: *gchar, identity: *GSocketConnectable, interaction: *GTlsInteraction, flags: GTlsDatabaseVerifyFlags, cancellable: *GCancellable, error: **GError): GTlsCertificateFlags,
  verify_chain_async: function(self: *GTlsDatabase, chain: *GTlsCertificate, purpose: *gchar, identity: *GSocketConnectable, interaction: *GTlsInteraction, flags: GTlsDatabaseVerifyFlags, cancellable: *GCancellable, callback: GAsyncReadyCallback, user_data: gpointer): void,
  verify_chain_finish: function(self: *GTlsDatabase, result: *GAsyncResult, error: **GError): GTlsCertificateFlags,
  create_certificate_handle: function(self: *GTlsDatabase, certificate: *GTlsCertificate): *gchar,
  lookup_certificate_for_handle: function(self: *GTlsDatabase, handle: *gchar, interaction: *GTlsInteraction, flags: GTlsDatabaseLookupFlags, cancellable: *GCancellable, error: **GError): *GTlsCertificate,
  lookup_certificate_for_handle_async: function(self: *GTlsDatabase, handle: *gchar, interaction: *GTlsInteraction, flags: GTlsDatabaseLookupFlags, cancellable: *GCancellable, callback: GAsyncReadyCallback, user_data: gpointer): void,
  lookup_certificate_for_handle_finish: function(self: *GTlsDatabase, result: *GAsyncResult, error: **GError): *GTlsCertificate,
  lookup_certificate_issuer: function(self: *GTlsDatabase, certificate: *GTlsCertificate, interaction: *GTlsInteraction, flags: GTlsDatabaseLookupFlags, cancellable: *GCancellable, error: **GError): *GTlsCertificate,
  lookup_certificate_issuer_async: function(self: *GTlsDatabase, certificate: *GTlsCertificate, interaction: *GTlsInteraction, flags: GTlsDatabaseLookupFlags, cancellable: *GCancellable, callback: GAsyncReadyCallback, user_data: gpointer): void,
  lookup_certificate_issuer_finish: function(self: *GTlsDatabase, result: *GAsyncResult, error: **GError): *GTlsCertificate,
  lookup_certificates_issued_by: function(self: *GTlsDatabase, issuer_raw_dn: *GByteArray, interaction: *GTlsInteraction, flags: GTlsDatabaseLookupFlags, cancellable: *GCancellable, error: **GError): *GList,
  lookup_certificates_issued_by_async: function(self: *GTlsDatabase, issuer_raw_dn: *GByteArray, interaction: *GTlsInteraction, flags: GTlsDatabaseLookupFlags, cancellable: *GCancellable, callback: GAsyncReadyCallback, user_data: gpointer): void,
  lookup_certificates_issued_by_finish: function(self: *GTlsDatabase, result: *GAsyncResult, error: **GError): *GList,
  padding: [16]gpointer
}
global GTlsFileDatabaseInterface: type <cimport,nodecl,forwarddecl> = @record{}
GTlsFileDatabaseInterface = @record{
  g_iface: GTypeInterface,
  padding: [8]gpointer
}
global GTlsInteractionClass: type <cimport,nodecl,forwarddecl> = @record{}
global GTlsInteractionPrivate: type <cimport,nodecl,forwarddecl> = @record{}
GTlsInteraction = @record{
  parent_instance: GObject,
  priv: *GTlsInteractionPrivate
}
GTlsInteractionClass = @record{
  parent_class: GObjectClass,
  ask_password: function(interaction: *GTlsInteraction, password: *GTlsPassword, cancellable: *GCancellable, error: **GError): GTlsInteractionResult,
  ask_password_async: function(interaction: *GTlsInteraction, password: *GTlsPassword, cancellable: *GCancellable, callback: GAsyncReadyCallback, user_data: gpointer): void,
  ask_password_finish: function(interaction: *GTlsInteraction, result: *GAsyncResult, error: **GError): GTlsInteractionResult,
  request_certificate: function(interaction: *GTlsInteraction, connection: *GTlsConnection, flags: GTlsCertificateRequestFlags, cancellable: *GCancellable, error: **GError): GTlsInteractionResult,
  request_certificate_async: function(interaction: *GTlsInteraction, connection: *GTlsConnection, flags: GTlsCertificateRequestFlags, cancellable: *GCancellable, callback: GAsyncReadyCallback, user_data: gpointer): void,
  request_certificate_finish: function(interaction: *GTlsInteraction, result: *GAsyncResult, error: **GError): GTlsInteractionResult,
  padding: [21]gpointer
}
global GTlsPasswordClass: type <cimport,nodecl,forwarddecl> = @record{}
global GTlsPasswordPrivate: type <cimport,nodecl,forwarddecl> = @record{}
GTlsPassword = @record{
  parent_instance: GObject,
  priv: *GTlsPasswordPrivate
}
GTlsPasswordClass = @record{
  parent_class: GObjectClass,
  get_value: function(password: *GTlsPassword, length: *gsize): *guchar,
  set_value: function(password: *GTlsPassword, value: *guchar, length: gssize, destroy: GDestroyNotify): void,
  get_default_warning: function(password: *GTlsPassword): *gchar,
  padding: [4]gpointer
}
global GTlsServerConnectionInterface: type <cimport,nodecl,forwarddecl> = @record{}
GTlsServerConnectionInterface = @record{
  g_iface: GTypeInterface
}
global GVfsFileLookupFunc: type <cimport,nodecl> = @function(vfs: *GVfs, identifier: cstring, user_data: gpointer): *GFile
global GVfsClass: type <cimport,nodecl,forwarddecl> = @record{}
GVfs = @record{
  parent_instance: GObject
}
GVfsClass = @record{
  parent_class: GObjectClass,
  is_active: function(vfs: *GVfs): gboolean,
  get_file_for_path: function(vfs: *GVfs, path: cstring): *GFile,
  get_file_for_uri: function(vfs: *GVfs, uri: cstring): *GFile,
  get_supported_uri_schemes: function(vfs: *GVfs): **gchar,
  parse_name: function(vfs: *GVfs, parse_name: cstring): *GFile,
  local_file_add_info: function(vfs: *GVfs, filename: cstring, device: guint64, attribute_matcher: *GFileAttributeMatcher, info: *GFileInfo, cancellable: *GCancellable, extra_data: *gpointer, free_extra_data: *GDestroyNotify): void,
  add_writable_namespaces: function(vfs: *GVfs, list: *GFileAttributeInfoList): void,
  local_file_set_attributes: function(vfs: *GVfs, filename: cstring, info: *GFileInfo, flags: GFileQueryInfoFlags, cancellable: *GCancellable, error: **GError): gboolean,
  local_file_removed: function(vfs: *GVfs, filename: cstring): void,
  local_file_moved: function(vfs: *GVfs, source: cstring, dest: cstring): void,
  deserialize_icon: function(vfs: *GVfs, value: *GVariant): *GIcon,
  _g_reserved1: function(): void,
  _g_reserved2: function(): void,
  _g_reserved3: function(): void,
  _g_reserved4: function(): void,
  _g_reserved5: function(): void,
  _g_reserved6: function(): void
}
global GVolumeIface: type <cimport,nodecl,forwarddecl> = @record{}
GVolumeIface = @record{
  g_iface: GTypeInterface,
  changed: function(volume: *GVolume): void,
  removed: function(volume: *GVolume): void,
  get_name: function(volume: *GVolume): cstring,
  get_icon: function(volume: *GVolume): *GIcon,
  get_uuid: function(volume: *GVolume): cstring,
  get_drive: function(volume: *GVolume): *GDrive,
  get_mount: function(volume: *GVolume): *GMount,
  can_mount: function(volume: *GVolume): gboolean,
  can_eject: function(volume: *GVolume): gboolean,
  mount_fn: function(volume: *GVolume, flags: GMountMountFlags, mount_operation: *GMountOperation, cancellable: *GCancellable, callback: GAsyncReadyCallback, user_data: gpointer): void,
  mount_finish: function(volume: *GVolume, result: *GAsyncResult, error: **GError): gboolean,
  eject: function(volume: *GVolume, flags: GMountUnmountFlags, cancellable: *GCancellable, callback: GAsyncReadyCallback, user_data: gpointer): void,
  eject_finish: function(volume: *GVolume, result: *GAsyncResult, error: **GError): gboolean,
  get_identifier: function(volume: *GVolume, kind: cstring): cstring,
  enumerate_identifiers: function(volume: *GVolume): *cstring,
  should_automount: function(volume: *GVolume): gboolean,
  get_activation_root: function(volume: *GVolume): *GFile,
  eject_with_operation: function(volume: *GVolume, flags: GMountUnmountFlags, mount_operation: *GMountOperation, cancellable: *GCancellable, callback: GAsyncReadyCallback, user_data: gpointer): void,
  eject_with_operation_finish: function(volume: *GVolume, result: *GAsyncResult, error: **GError): gboolean,
  get_sort_key: function(volume: *GVolume): *gchar,
  get_symbolic_icon: function(volume: *GVolume): *GIcon
}
global GZlibCompressorClass: type <cimport,nodecl,forwarddecl> = @record{}
GZlibCompressorClass = @record{
  parent_class: GObjectClass
}
global GZlibDecompressorClass: type <cimport,nodecl,forwarddecl> = @record{}
GZlibDecompressorClass = @record{
  parent_class: GObjectClass
}
global GAction_autoptr: type <cimport,nodecl> = @*GAction
global GAction_listautoptr: type <cimport,nodecl> = @*GList
global GAction_slistautoptr: type <cimport,nodecl> = @*GSList
global GAction_queueautoptr: type <cimport,nodecl> = @*GQueue
global GActionMap_autoptr: type <cimport,nodecl> = @*GActionMap
global GActionMap_listautoptr: type <cimport,nodecl> = @*GList
global GActionMap_slistautoptr: type <cimport,nodecl> = @*GSList
global GActionMap_queueautoptr: type <cimport,nodecl> = @*GQueue
global GAppInfo_autoptr: type <cimport,nodecl> = @*GAppInfo
global GAppInfo_listautoptr: type <cimport,nodecl> = @*GList
global GAppInfo_slistautoptr: type <cimport,nodecl> = @*GSList
global GAppInfo_queueautoptr: type <cimport,nodecl> = @*GQueue
global GAppLaunchContext_autoptr: type <cimport,nodecl> = @*GAppLaunchContext
global GAppLaunchContext_listautoptr: type <cimport,nodecl> = @*GList
global GAppLaunchContext_slistautoptr: type <cimport,nodecl> = @*GSList
global GAppLaunchContext_queueautoptr: type <cimport,nodecl> = @*GQueue
global GAppInfoMonitor_autoptr: type <cimport,nodecl> = @*GAppInfoMonitor
global GAppInfoMonitor_listautoptr: type <cimport,nodecl> = @*GList
global GAppInfoMonitor_slistautoptr: type <cimport,nodecl> = @*GSList
global GAppInfoMonitor_queueautoptr: type <cimport,nodecl> = @*GQueue
global GApplicationCommandLine_autoptr: type <cimport,nodecl> = @*GApplicationCommandLine
global GApplicationCommandLine_listautoptr: type <cimport,nodecl> = @*GList
global GApplicationCommandLine_slistautoptr: type <cimport,nodecl> = @*GSList
global GApplicationCommandLine_queueautoptr: type <cimport,nodecl> = @*GQueue
global GApplication_autoptr: type <cimport,nodecl> = @*GApplication
global GApplication_listautoptr: type <cimport,nodecl> = @*GList
global GApplication_slistautoptr: type <cimport,nodecl> = @*GSList
global GApplication_queueautoptr: type <cimport,nodecl> = @*GQueue
global GAsyncInitable_autoptr: type <cimport,nodecl> = @*GAsyncInitable
global GAsyncInitable_listautoptr: type <cimport,nodecl> = @*GList
global GAsyncInitable_slistautoptr: type <cimport,nodecl> = @*GSList
global GAsyncInitable_queueautoptr: type <cimport,nodecl> = @*GQueue
global GAsyncResult_autoptr: type <cimport,nodecl> = @*GAsyncResult
global GAsyncResult_listautoptr: type <cimport,nodecl> = @*GList
global GAsyncResult_slistautoptr: type <cimport,nodecl> = @*GSList
global GAsyncResult_queueautoptr: type <cimport,nodecl> = @*GQueue
global GBufferedInputStream_autoptr: type <cimport,nodecl> = @*GBufferedInputStream
global GBufferedInputStream_listautoptr: type <cimport,nodecl> = @*GList
global GBufferedInputStream_slistautoptr: type <cimport,nodecl> = @*GSList
global GBufferedInputStream_queueautoptr: type <cimport,nodecl> = @*GQueue
global GBufferedOutputStream_autoptr: type <cimport,nodecl> = @*GBufferedOutputStream
global GBufferedOutputStream_listautoptr: type <cimport,nodecl> = @*GList
global GBufferedOutputStream_slistautoptr: type <cimport,nodecl> = @*GSList
global GBufferedOutputStream_queueautoptr: type <cimport,nodecl> = @*GQueue
global GBytesIcon_autoptr: type <cimport,nodecl> = @*GBytesIcon
global GBytesIcon_listautoptr: type <cimport,nodecl> = @*GList
global GBytesIcon_slistautoptr: type <cimport,nodecl> = @*GSList
global GBytesIcon_queueautoptr: type <cimport,nodecl> = @*GQueue
global GCancellable_autoptr: type <cimport,nodecl> = @*GCancellable
global GCancellable_listautoptr: type <cimport,nodecl> = @*GList
global GCancellable_slistautoptr: type <cimport,nodecl> = @*GSList
global GCancellable_queueautoptr: type <cimport,nodecl> = @*GQueue
global GCharsetConverter_autoptr: type <cimport,nodecl> = @*GCharsetConverter
global GCharsetConverter_listautoptr: type <cimport,nodecl> = @*GList
global GCharsetConverter_slistautoptr: type <cimport,nodecl> = @*GSList
global GCharsetConverter_queueautoptr: type <cimport,nodecl> = @*GQueue
global GConverter_autoptr: type <cimport,nodecl> = @*GConverter
global GConverter_listautoptr: type <cimport,nodecl> = @*GList
global GConverter_slistautoptr: type <cimport,nodecl> = @*GSList
global GConverter_queueautoptr: type <cimport,nodecl> = @*GQueue
global GConverterInputStream_autoptr: type <cimport,nodecl> = @*GConverterInputStream
global GConverterInputStream_listautoptr: type <cimport,nodecl> = @*GList
global GConverterInputStream_slistautoptr: type <cimport,nodecl> = @*GSList
global GConverterInputStream_queueautoptr: type <cimport,nodecl> = @*GQueue
global GConverterOutputStream_autoptr: type <cimport,nodecl> = @*GConverterOutputStream
global GConverterOutputStream_listautoptr: type <cimport,nodecl> = @*GList
global GConverterOutputStream_slistautoptr: type <cimport,nodecl> = @*GSList
global GConverterOutputStream_queueautoptr: type <cimport,nodecl> = @*GQueue
global GCredentials_autoptr: type <cimport,nodecl> = @*GCredentials
global GCredentials_listautoptr: type <cimport,nodecl> = @*GList
global GCredentials_slistautoptr: type <cimport,nodecl> = @*GSList
global GCredentials_queueautoptr: type <cimport,nodecl> = @*GQueue
global GDatagramBased_autoptr: type <cimport,nodecl> = @*GDatagramBased
global GDatagramBased_listautoptr: type <cimport,nodecl> = @*GList
global GDatagramBased_slistautoptr: type <cimport,nodecl> = @*GSList
global GDatagramBased_queueautoptr: type <cimport,nodecl> = @*GQueue
global GDataInputStream_autoptr: type <cimport,nodecl> = @*GDataInputStream
global GDataInputStream_listautoptr: type <cimport,nodecl> = @*GList
global GDataInputStream_slistautoptr: type <cimport,nodecl> = @*GSList
global GDataInputStream_queueautoptr: type <cimport,nodecl> = @*GQueue
global GDataOutputStream_autoptr: type <cimport,nodecl> = @*GDataOutputStream
global GDataOutputStream_listautoptr: type <cimport,nodecl> = @*GList
global GDataOutputStream_slistautoptr: type <cimport,nodecl> = @*GSList
global GDataOutputStream_queueautoptr: type <cimport,nodecl> = @*GQueue
global GDBusActionGroup_autoptr: type <cimport,nodecl> = @*GDBusActionGroup
global GDBusActionGroup_listautoptr: type <cimport,nodecl> = @*GList
global GDBusActionGroup_slistautoptr: type <cimport,nodecl> = @*GSList
global GDBusActionGroup_queueautoptr: type <cimport,nodecl> = @*GQueue
global GDBusAuthObserver_autoptr: type <cimport,nodecl> = @*GDBusAuthObserver
global GDBusAuthObserver_listautoptr: type <cimport,nodecl> = @*GList
global GDBusAuthObserver_slistautoptr: type <cimport,nodecl> = @*GSList
global GDBusAuthObserver_queueautoptr: type <cimport,nodecl> = @*GQueue
global GDBusConnection_autoptr: type <cimport,nodecl> = @*GDBusConnection
global GDBusConnection_listautoptr: type <cimport,nodecl> = @*GList
global GDBusConnection_slistautoptr: type <cimport,nodecl> = @*GSList
global GDBusConnection_queueautoptr: type <cimport,nodecl> = @*GQueue
global GDBusInterface_autoptr: type <cimport,nodecl> = @*GDBusInterface
global GDBusInterface_listautoptr: type <cimport,nodecl> = @*GList
global GDBusInterface_slistautoptr: type <cimport,nodecl> = @*GSList
global GDBusInterface_queueautoptr: type <cimport,nodecl> = @*GQueue
global GDBusInterfaceSkeleton_autoptr: type <cimport,nodecl> = @*GDBusInterfaceSkeleton
global GDBusInterfaceSkeleton_listautoptr: type <cimport,nodecl> = @*GList
global GDBusInterfaceSkeleton_slistautoptr: type <cimport,nodecl> = @*GSList
global GDBusInterfaceSkeleton_queueautoptr: type <cimport,nodecl> = @*GQueue
global GDBusMenuModel_autoptr: type <cimport,nodecl> = @*GDBusMenuModel
global GDBusMenuModel_listautoptr: type <cimport,nodecl> = @*GList
global GDBusMenuModel_slistautoptr: type <cimport,nodecl> = @*GSList
global GDBusMenuModel_queueautoptr: type <cimport,nodecl> = @*GQueue
global GDBusMessage_autoptr: type <cimport,nodecl> = @*GDBusMessage
global GDBusMessage_listautoptr: type <cimport,nodecl> = @*GList
global GDBusMessage_slistautoptr: type <cimport,nodecl> = @*GSList
global GDBusMessage_queueautoptr: type <cimport,nodecl> = @*GQueue
global GDBusMethodInvocation_autoptr: type <cimport,nodecl> = @*GDBusMethodInvocation
global GDBusMethodInvocation_listautoptr: type <cimport,nodecl> = @*GList
global GDBusMethodInvocation_slistautoptr: type <cimport,nodecl> = @*GSList
global GDBusMethodInvocation_queueautoptr: type <cimport,nodecl> = @*GQueue
global GDBusNodeInfo_autoptr: type <cimport,nodecl> = @*GDBusNodeInfo
global GDBusNodeInfo_listautoptr: type <cimport,nodecl> = @*GList
global GDBusNodeInfo_slistautoptr: type <cimport,nodecl> = @*GSList
global GDBusNodeInfo_queueautoptr: type <cimport,nodecl> = @*GQueue
global GDBusObject_autoptr: type <cimport,nodecl> = @*GDBusObject
global GDBusObject_listautoptr: type <cimport,nodecl> = @*GList
global GDBusObject_slistautoptr: type <cimport,nodecl> = @*GSList
global GDBusObject_queueautoptr: type <cimport,nodecl> = @*GQueue
global GDBusObjectManagerClient_autoptr: type <cimport,nodecl> = @*GDBusObjectManagerClient
global GDBusObjectManagerClient_listautoptr: type <cimport,nodecl> = @*GList
global GDBusObjectManagerClient_slistautoptr: type <cimport,nodecl> = @*GSList
global GDBusObjectManagerClient_queueautoptr: type <cimport,nodecl> = @*GQueue
global GDBusObjectManager_autoptr: type <cimport,nodecl> = @*GDBusObjectManager
global GDBusObjectManager_listautoptr: type <cimport,nodecl> = @*GList
global GDBusObjectManager_slistautoptr: type <cimport,nodecl> = @*GSList
global GDBusObjectManager_queueautoptr: type <cimport,nodecl> = @*GQueue
global GDBusObjectManagerServer_autoptr: type <cimport,nodecl> = @*GDBusObjectManagerServer
global GDBusObjectManagerServer_listautoptr: type <cimport,nodecl> = @*GList
global GDBusObjectManagerServer_slistautoptr: type <cimport,nodecl> = @*GSList
global GDBusObjectManagerServer_queueautoptr: type <cimport,nodecl> = @*GQueue
global GDBusObjectProxy_autoptr: type <cimport,nodecl> = @*GDBusObjectProxy
global GDBusObjectProxy_listautoptr: type <cimport,nodecl> = @*GList
global GDBusObjectProxy_slistautoptr: type <cimport,nodecl> = @*GSList
global GDBusObjectProxy_queueautoptr: type <cimport,nodecl> = @*GQueue
global GDBusObjectSkeleton_autoptr: type <cimport,nodecl> = @*GDBusObjectSkeleton
global GDBusObjectSkeleton_listautoptr: type <cimport,nodecl> = @*GList
global GDBusObjectSkeleton_slistautoptr: type <cimport,nodecl> = @*GSList
global GDBusObjectSkeleton_queueautoptr: type <cimport,nodecl> = @*GQueue
global GDBusProxy_autoptr: type <cimport,nodecl> = @*GDBusProxy
global GDBusProxy_listautoptr: type <cimport,nodecl> = @*GList
global GDBusProxy_slistautoptr: type <cimport,nodecl> = @*GSList
global GDBusProxy_queueautoptr: type <cimport,nodecl> = @*GQueue
global GDBusServer_autoptr: type <cimport,nodecl> = @*GDBusServer
global GDBusServer_listautoptr: type <cimport,nodecl> = @*GList
global GDBusServer_slistautoptr: type <cimport,nodecl> = @*GSList
global GDBusServer_queueautoptr: type <cimport,nodecl> = @*GQueue
global GDrive_autoptr: type <cimport,nodecl> = @*GDrive
global GDrive_listautoptr: type <cimport,nodecl> = @*GList
global GDrive_slistautoptr: type <cimport,nodecl> = @*GSList
global GDrive_queueautoptr: type <cimport,nodecl> = @*GQueue
global GEmblemedIcon_autoptr: type <cimport,nodecl> = @*GEmblemedIcon
global GEmblemedIcon_listautoptr: type <cimport,nodecl> = @*GList
global GEmblemedIcon_slistautoptr: type <cimport,nodecl> = @*GSList
global GEmblemedIcon_queueautoptr: type <cimport,nodecl> = @*GQueue
global GEmblem_autoptr: type <cimport,nodecl> = @*GEmblem
global GEmblem_listautoptr: type <cimport,nodecl> = @*GList
global GEmblem_slistautoptr: type <cimport,nodecl> = @*GSList
global GEmblem_queueautoptr: type <cimport,nodecl> = @*GQueue
global GFileEnumerator_autoptr: type <cimport,nodecl> = @*GFileEnumerator
global GFileEnumerator_listautoptr: type <cimport,nodecl> = @*GList
global GFileEnumerator_slistautoptr: type <cimport,nodecl> = @*GSList
global GFileEnumerator_queueautoptr: type <cimport,nodecl> = @*GQueue
global GFile_autoptr: type <cimport,nodecl> = @*GFile
global GFile_listautoptr: type <cimport,nodecl> = @*GList
global GFile_slistautoptr: type <cimport,nodecl> = @*GSList
global GFile_queueautoptr: type <cimport,nodecl> = @*GQueue
global GFileAttributeInfoList_autoptr: type <cimport,nodecl> = @*GFileAttributeInfoList
global GFileAttributeInfoList_listautoptr: type <cimport,nodecl> = @*GList
global GFileAttributeInfoList_slistautoptr: type <cimport,nodecl> = @*GSList
global GFileAttributeInfoList_queueautoptr: type <cimport,nodecl> = @*GQueue
global GFileIcon_autoptr: type <cimport,nodecl> = @*GFileIcon
global GFileIcon_listautoptr: type <cimport,nodecl> = @*GList
global GFileIcon_slistautoptr: type <cimport,nodecl> = @*GSList
global GFileIcon_queueautoptr: type <cimport,nodecl> = @*GQueue
global GFileInfo_autoptr: type <cimport,nodecl> = @*GFileInfo
global GFileInfo_listautoptr: type <cimport,nodecl> = @*GList
global GFileInfo_slistautoptr: type <cimport,nodecl> = @*GSList
global GFileInfo_queueautoptr: type <cimport,nodecl> = @*GQueue
global GFileInputStream_autoptr: type <cimport,nodecl> = @*GFileInputStream
global GFileInputStream_listautoptr: type <cimport,nodecl> = @*GList
global GFileInputStream_slistautoptr: type <cimport,nodecl> = @*GSList
global GFileInputStream_queueautoptr: type <cimport,nodecl> = @*GQueue
global GFileIOStream_autoptr: type <cimport,nodecl> = @*GFileIOStream
global GFileIOStream_listautoptr: type <cimport,nodecl> = @*GList
global GFileIOStream_slistautoptr: type <cimport,nodecl> = @*GSList
global GFileIOStream_queueautoptr: type <cimport,nodecl> = @*GQueue
global GFileMonitor_autoptr: type <cimport,nodecl> = @*GFileMonitor
global GFileMonitor_listautoptr: type <cimport,nodecl> = @*GList
global GFileMonitor_slistautoptr: type <cimport,nodecl> = @*GSList
global GFileMonitor_queueautoptr: type <cimport,nodecl> = @*GQueue
global GFilenameCompleter_autoptr: type <cimport,nodecl> = @*GFilenameCompleter
global GFilenameCompleter_listautoptr: type <cimport,nodecl> = @*GList
global GFilenameCompleter_slistautoptr: type <cimport,nodecl> = @*GSList
global GFilenameCompleter_queueautoptr: type <cimport,nodecl> = @*GQueue
global GFileOutputStream_autoptr: type <cimport,nodecl> = @*GFileOutputStream
global GFileOutputStream_listautoptr: type <cimport,nodecl> = @*GList
global GFileOutputStream_slistautoptr: type <cimport,nodecl> = @*GSList
global GFileOutputStream_queueautoptr: type <cimport,nodecl> = @*GQueue
global GFilterInputStream_autoptr: type <cimport,nodecl> = @*GFilterInputStream
global GFilterInputStream_listautoptr: type <cimport,nodecl> = @*GList
global GFilterInputStream_slistautoptr: type <cimport,nodecl> = @*GSList
global GFilterInputStream_queueautoptr: type <cimport,nodecl> = @*GQueue
global GFilterOutputStream_autoptr: type <cimport,nodecl> = @*GFilterOutputStream
global GFilterOutputStream_listautoptr: type <cimport,nodecl> = @*GList
global GFilterOutputStream_slistautoptr: type <cimport,nodecl> = @*GSList
global GFilterOutputStream_queueautoptr: type <cimport,nodecl> = @*GQueue
global GIcon_autoptr: type <cimport,nodecl> = @*GIcon
global GIcon_listautoptr: type <cimport,nodecl> = @*GList
global GIcon_slistautoptr: type <cimport,nodecl> = @*GSList
global GIcon_queueautoptr: type <cimport,nodecl> = @*GQueue
global GInetAddress_autoptr: type <cimport,nodecl> = @*GInetAddress
global GInetAddress_listautoptr: type <cimport,nodecl> = @*GList
global GInetAddress_slistautoptr: type <cimport,nodecl> = @*GSList
global GInetAddress_queueautoptr: type <cimport,nodecl> = @*GQueue
global GInetAddressMask_autoptr: type <cimport,nodecl> = @*GInetAddressMask
global GInetAddressMask_listautoptr: type <cimport,nodecl> = @*GList
global GInetAddressMask_slistautoptr: type <cimport,nodecl> = @*GSList
global GInetAddressMask_queueautoptr: type <cimport,nodecl> = @*GQueue
global GInetSocketAddress_autoptr: type <cimport,nodecl> = @*GInetSocketAddress
global GInetSocketAddress_listautoptr: type <cimport,nodecl> = @*GList
global GInetSocketAddress_slistautoptr: type <cimport,nodecl> = @*GSList
global GInetSocketAddress_queueautoptr: type <cimport,nodecl> = @*GQueue
global GInitable_autoptr: type <cimport,nodecl> = @*GInitable
global GInitable_listautoptr: type <cimport,nodecl> = @*GList
global GInitable_slistautoptr: type <cimport,nodecl> = @*GSList
global GInitable_queueautoptr: type <cimport,nodecl> = @*GQueue
global GInputStream_autoptr: type <cimport,nodecl> = @*GInputStream
global GInputStream_listautoptr: type <cimport,nodecl> = @*GList
global GInputStream_slistautoptr: type <cimport,nodecl> = @*GSList
global GInputStream_queueautoptr: type <cimport,nodecl> = @*GQueue
global GIOModule_autoptr: type <cimport,nodecl> = @*GIOModule
global GIOModule_listautoptr: type <cimport,nodecl> = @*GList
global GIOModule_slistautoptr: type <cimport,nodecl> = @*GSList
global GIOModule_queueautoptr: type <cimport,nodecl> = @*GQueue
global GIOStream_autoptr: type <cimport,nodecl> = @*GIOStream
global GIOStream_listautoptr: type <cimport,nodecl> = @*GList
global GIOStream_slistautoptr: type <cimport,nodecl> = @*GSList
global GIOStream_queueautoptr: type <cimport,nodecl> = @*GQueue
global GLoadableIcon_autoptr: type <cimport,nodecl> = @*GLoadableIcon
global GLoadableIcon_listautoptr: type <cimport,nodecl> = @*GList
global GLoadableIcon_slistautoptr: type <cimport,nodecl> = @*GSList
global GLoadableIcon_queueautoptr: type <cimport,nodecl> = @*GQueue
global GMemoryInputStream_autoptr: type <cimport,nodecl> = @*GMemoryInputStream
global GMemoryInputStream_listautoptr: type <cimport,nodecl> = @*GList
global GMemoryInputStream_slistautoptr: type <cimport,nodecl> = @*GSList
global GMemoryInputStream_queueautoptr: type <cimport,nodecl> = @*GQueue
global GMemoryOutputStream_autoptr: type <cimport,nodecl> = @*GMemoryOutputStream
global GMemoryOutputStream_listautoptr: type <cimport,nodecl> = @*GList
global GMemoryOutputStream_slistautoptr: type <cimport,nodecl> = @*GSList
global GMemoryOutputStream_queueautoptr: type <cimport,nodecl> = @*GQueue
global GMenu_autoptr: type <cimport,nodecl> = @*GMenu
global GMenu_listautoptr: type <cimport,nodecl> = @*GList
global GMenu_slistautoptr: type <cimport,nodecl> = @*GSList
global GMenu_queueautoptr: type <cimport,nodecl> = @*GQueue
global GMenuItem_autoptr: type <cimport,nodecl> = @*GMenuItem
global GMenuItem_listautoptr: type <cimport,nodecl> = @*GList
global GMenuItem_slistautoptr: type <cimport,nodecl> = @*GSList
global GMenuItem_queueautoptr: type <cimport,nodecl> = @*GQueue
global GMenuModel_autoptr: type <cimport,nodecl> = @*GMenuModel
global GMenuModel_listautoptr: type <cimport,nodecl> = @*GList
global GMenuModel_slistautoptr: type <cimport,nodecl> = @*GSList
global GMenuModel_queueautoptr: type <cimport,nodecl> = @*GQueue
global GMenuAttributeIter_autoptr: type <cimport,nodecl> = @*GMenuAttributeIter
global GMenuAttributeIter_listautoptr: type <cimport,nodecl> = @*GList
global GMenuAttributeIter_slistautoptr: type <cimport,nodecl> = @*GSList
global GMenuAttributeIter_queueautoptr: type <cimport,nodecl> = @*GQueue
global GMenuLinkIter_autoptr: type <cimport,nodecl> = @*GMenuLinkIter
global GMenuLinkIter_listautoptr: type <cimport,nodecl> = @*GList
global GMenuLinkIter_slistautoptr: type <cimport,nodecl> = @*GSList
global GMenuLinkIter_queueautoptr: type <cimport,nodecl> = @*GQueue
global GMount_autoptr: type <cimport,nodecl> = @*GMount
global GMount_listautoptr: type <cimport,nodecl> = @*GList
global GMount_slistautoptr: type <cimport,nodecl> = @*GSList
global GMount_queueautoptr: type <cimport,nodecl> = @*GQueue
global GMountOperation_autoptr: type <cimport,nodecl> = @*GMountOperation
global GMountOperation_listautoptr: type <cimport,nodecl> = @*GList
global GMountOperation_slistautoptr: type <cimport,nodecl> = @*GSList
global GMountOperation_queueautoptr: type <cimport,nodecl> = @*GQueue
global GNativeVolumeMonitor_autoptr: type <cimport,nodecl> = @*GNativeVolumeMonitor
global GNativeVolumeMonitor_listautoptr: type <cimport,nodecl> = @*GList
global GNativeVolumeMonitor_slistautoptr: type <cimport,nodecl> = @*GSList
global GNativeVolumeMonitor_queueautoptr: type <cimport,nodecl> = @*GQueue
global GNetworkAddress_autoptr: type <cimport,nodecl> = @*GNetworkAddress
global GNetworkAddress_listautoptr: type <cimport,nodecl> = @*GList
global GNetworkAddress_slistautoptr: type <cimport,nodecl> = @*GSList
global GNetworkAddress_queueautoptr: type <cimport,nodecl> = @*GQueue
global GNetworkMonitor_autoptr: type <cimport,nodecl> = @*GNetworkMonitor
global GNetworkMonitor_listautoptr: type <cimport,nodecl> = @*GList
global GNetworkMonitor_slistautoptr: type <cimport,nodecl> = @*GSList
global GNetworkMonitor_queueautoptr: type <cimport,nodecl> = @*GQueue
global GNetworkService_autoptr: type <cimport,nodecl> = @*GNetworkService
global GNetworkService_listautoptr: type <cimport,nodecl> = @*GList
global GNetworkService_slistautoptr: type <cimport,nodecl> = @*GSList
global GNetworkService_queueautoptr: type <cimport,nodecl> = @*GQueue
global GNotification_autoptr: type <cimport,nodecl> = @*GNotification
global GNotification_listautoptr: type <cimport,nodecl> = @*GList
global GNotification_slistautoptr: type <cimport,nodecl> = @*GSList
global GNotification_queueautoptr: type <cimport,nodecl> = @*GQueue
global GOutputStream_autoptr: type <cimport,nodecl> = @*GOutputStream
global GOutputStream_listautoptr: type <cimport,nodecl> = @*GList
global GOutputStream_slistautoptr: type <cimport,nodecl> = @*GSList
global GOutputStream_queueautoptr: type <cimport,nodecl> = @*GQueue
global GPermission_autoptr: type <cimport,nodecl> = @*GPermission
global GPermission_listautoptr: type <cimport,nodecl> = @*GList
global GPermission_slistautoptr: type <cimport,nodecl> = @*GSList
global GPermission_queueautoptr: type <cimport,nodecl> = @*GQueue
global GPollableInputStream_autoptr: type <cimport,nodecl> = @*GPollableInputStream
global GPollableInputStream_listautoptr: type <cimport,nodecl> = @*GList
global GPollableInputStream_slistautoptr: type <cimport,nodecl> = @*GSList
global GPollableInputStream_queueautoptr: type <cimport,nodecl> = @*GQueue
global GPollableOutputStream_autoptr: type <cimport,nodecl> = @*GPollableOutputStream
global GPollableOutputStream_listautoptr: type <cimport,nodecl> = @*GList
global GPollableOutputStream_slistautoptr: type <cimport,nodecl> = @*GSList
global GPollableOutputStream_queueautoptr: type <cimport,nodecl> = @*GQueue
global GPropertyAction_autoptr: type <cimport,nodecl> = @*GPropertyAction
global GPropertyAction_listautoptr: type <cimport,nodecl> = @*GList
global GPropertyAction_slistautoptr: type <cimport,nodecl> = @*GSList
global GPropertyAction_queueautoptr: type <cimport,nodecl> = @*GQueue
global GProxyAddressEnumerator_autoptr: type <cimport,nodecl> = @*GProxyAddressEnumerator
global GProxyAddressEnumerator_listautoptr: type <cimport,nodecl> = @*GList
global GProxyAddressEnumerator_slistautoptr: type <cimport,nodecl> = @*GSList
global GProxyAddressEnumerator_queueautoptr: type <cimport,nodecl> = @*GQueue
global GProxyAddress_autoptr: type <cimport,nodecl> = @*GProxyAddress
global GProxyAddress_listautoptr: type <cimport,nodecl> = @*GList
global GProxyAddress_slistautoptr: type <cimport,nodecl> = @*GSList
global GProxyAddress_queueautoptr: type <cimport,nodecl> = @*GQueue
global GProxy_autoptr: type <cimport,nodecl> = @*GProxy
global GProxy_listautoptr: type <cimport,nodecl> = @*GList
global GProxy_slistautoptr: type <cimport,nodecl> = @*GSList
global GProxy_queueautoptr: type <cimport,nodecl> = @*GQueue
global GProxyResolver_autoptr: type <cimport,nodecl> = @*GProxyResolver
global GProxyResolver_listautoptr: type <cimport,nodecl> = @*GList
global GProxyResolver_slistautoptr: type <cimport,nodecl> = @*GSList
global GProxyResolver_queueautoptr: type <cimport,nodecl> = @*GQueue
global GRemoteActionGroup_autoptr: type <cimport,nodecl> = @*GRemoteActionGroup
global GRemoteActionGroup_listautoptr: type <cimport,nodecl> = @*GList
global GRemoteActionGroup_slistautoptr: type <cimport,nodecl> = @*GSList
global GRemoteActionGroup_queueautoptr: type <cimport,nodecl> = @*GQueue
global GResolver_autoptr: type <cimport,nodecl> = @*GResolver
global GResolver_listautoptr: type <cimport,nodecl> = @*GList
global GResolver_slistautoptr: type <cimport,nodecl> = @*GSList
global GResolver_queueautoptr: type <cimport,nodecl> = @*GQueue
global GResource_autoptr: type <cimport,nodecl> = @*GResource
global GResource_listautoptr: type <cimport,nodecl> = @*GList
global GResource_slistautoptr: type <cimport,nodecl> = @*GSList
global GResource_queueautoptr: type <cimport,nodecl> = @*GQueue
global GSeekable_autoptr: type <cimport,nodecl> = @*GSeekable
global GSeekable_listautoptr: type <cimport,nodecl> = @*GList
global GSeekable_slistautoptr: type <cimport,nodecl> = @*GSList
global GSeekable_queueautoptr: type <cimport,nodecl> = @*GQueue
global GSettingsBackend_autoptr: type <cimport,nodecl> = @*GSettingsBackend
global GSettingsBackend_listautoptr: type <cimport,nodecl> = @*GList
global GSettingsBackend_slistautoptr: type <cimport,nodecl> = @*GSList
global GSettingsBackend_queueautoptr: type <cimport,nodecl> = @*GQueue
global GSettingsSchema_autoptr: type <cimport,nodecl> = @*GSettingsSchema
global GSettingsSchema_listautoptr: type <cimport,nodecl> = @*GList
global GSettingsSchema_slistautoptr: type <cimport,nodecl> = @*GSList
global GSettingsSchema_queueautoptr: type <cimport,nodecl> = @*GQueue
global GSettingsSchemaKey_autoptr: type <cimport,nodecl> = @*GSettingsSchemaKey
global GSettingsSchemaKey_listautoptr: type <cimport,nodecl> = @*GList
global GSettingsSchemaKey_slistautoptr: type <cimport,nodecl> = @*GSList
global GSettingsSchemaKey_queueautoptr: type <cimport,nodecl> = @*GQueue
global GSettingsSchemaSource_autoptr: type <cimport,nodecl> = @*GSettingsSchemaSource
global GSettingsSchemaSource_listautoptr: type <cimport,nodecl> = @*GList
global GSettingsSchemaSource_slistautoptr: type <cimport,nodecl> = @*GSList
global GSettingsSchemaSource_queueautoptr: type <cimport,nodecl> = @*GQueue
global GSettings_autoptr: type <cimport,nodecl> = @*GSettings
global GSettings_listautoptr: type <cimport,nodecl> = @*GList
global GSettings_slistautoptr: type <cimport,nodecl> = @*GSList
global GSettings_queueautoptr: type <cimport,nodecl> = @*GQueue
global GSimpleActionGroup_autoptr: type <cimport,nodecl> = @*GSimpleActionGroup
global GSimpleActionGroup_listautoptr: type <cimport,nodecl> = @*GList
global GSimpleActionGroup_slistautoptr: type <cimport,nodecl> = @*GSList
global GSimpleActionGroup_queueautoptr: type <cimport,nodecl> = @*GQueue
global GSimpleAction_autoptr: type <cimport,nodecl> = @*GSimpleAction
global GSimpleAction_listautoptr: type <cimport,nodecl> = @*GList
global GSimpleAction_slistautoptr: type <cimport,nodecl> = @*GSList
global GSimpleAction_queueautoptr: type <cimport,nodecl> = @*GQueue
global GSimpleAsyncResult_autoptr: type <cimport,nodecl> = @*GSimpleAsyncResult
global GSimpleAsyncResult_listautoptr: type <cimport,nodecl> = @*GList
global GSimpleAsyncResult_slistautoptr: type <cimport,nodecl> = @*GSList
global GSimpleAsyncResult_queueautoptr: type <cimport,nodecl> = @*GQueue
global GSimplePermission_autoptr: type <cimport,nodecl> = @*GSimplePermission
global GSimplePermission_listautoptr: type <cimport,nodecl> = @*GList
global GSimplePermission_slistautoptr: type <cimport,nodecl> = @*GSList
global GSimplePermission_queueautoptr: type <cimport,nodecl> = @*GQueue
global GSimpleProxyResolver_autoptr: type <cimport,nodecl> = @*GSimpleProxyResolver
global GSimpleProxyResolver_listautoptr: type <cimport,nodecl> = @*GList
global GSimpleProxyResolver_slistautoptr: type <cimport,nodecl> = @*GSList
global GSimpleProxyResolver_queueautoptr: type <cimport,nodecl> = @*GQueue
global GSocketAddressEnumerator_autoptr: type <cimport,nodecl> = @*GSocketAddressEnumerator
global GSocketAddressEnumerator_listautoptr: type <cimport,nodecl> = @*GList
global GSocketAddressEnumerator_slistautoptr: type <cimport,nodecl> = @*GSList
global GSocketAddressEnumerator_queueautoptr: type <cimport,nodecl> = @*GQueue
global GSocketAddress_autoptr: type <cimport,nodecl> = @*GSocketAddress
global GSocketAddress_listautoptr: type <cimport,nodecl> = @*GList
global GSocketAddress_slistautoptr: type <cimport,nodecl> = @*GSList
global GSocketAddress_queueautoptr: type <cimport,nodecl> = @*GQueue
global GSocketClient_autoptr: type <cimport,nodecl> = @*GSocketClient
global GSocketClient_listautoptr: type <cimport,nodecl> = @*GList
global GSocketClient_slistautoptr: type <cimport,nodecl> = @*GSList
global GSocketClient_queueautoptr: type <cimport,nodecl> = @*GQueue
global GSocketConnectable_autoptr: type <cimport,nodecl> = @*GSocketConnectable
global GSocketConnectable_listautoptr: type <cimport,nodecl> = @*GList
global GSocketConnectable_slistautoptr: type <cimport,nodecl> = @*GSList
global GSocketConnectable_queueautoptr: type <cimport,nodecl> = @*GQueue
global GSocketConnection_autoptr: type <cimport,nodecl> = @*GSocketConnection
global GSocketConnection_listautoptr: type <cimport,nodecl> = @*GList
global GSocketConnection_slistautoptr: type <cimport,nodecl> = @*GSList
global GSocketConnection_queueautoptr: type <cimport,nodecl> = @*GQueue
global GSocketControlMessage_autoptr: type <cimport,nodecl> = @*GSocketControlMessage
global GSocketControlMessage_listautoptr: type <cimport,nodecl> = @*GList
global GSocketControlMessage_slistautoptr: type <cimport,nodecl> = @*GSList
global GSocketControlMessage_queueautoptr: type <cimport,nodecl> = @*GQueue
global GSocket_autoptr: type <cimport,nodecl> = @*GSocket
global GSocket_listautoptr: type <cimport,nodecl> = @*GList
global GSocket_slistautoptr: type <cimport,nodecl> = @*GSList
global GSocket_queueautoptr: type <cimport,nodecl> = @*GQueue
global GSocketListener_autoptr: type <cimport,nodecl> = @*GSocketListener
global GSocketListener_listautoptr: type <cimport,nodecl> = @*GList
global GSocketListener_slistautoptr: type <cimport,nodecl> = @*GSList
global GSocketListener_queueautoptr: type <cimport,nodecl> = @*GQueue
global GSocketService_autoptr: type <cimport,nodecl> = @*GSocketService
global GSocketService_listautoptr: type <cimport,nodecl> = @*GList
global GSocketService_slistautoptr: type <cimport,nodecl> = @*GSList
global GSocketService_queueautoptr: type <cimport,nodecl> = @*GQueue
global GSubprocess_autoptr: type <cimport,nodecl> = @*GSubprocess
global GSubprocess_listautoptr: type <cimport,nodecl> = @*GList
global GSubprocess_slistautoptr: type <cimport,nodecl> = @*GSList
global GSubprocess_queueautoptr: type <cimport,nodecl> = @*GQueue
global GSubprocessLauncher_autoptr: type <cimport,nodecl> = @*GSubprocessLauncher
global GSubprocessLauncher_listautoptr: type <cimport,nodecl> = @*GList
global GSubprocessLauncher_slistautoptr: type <cimport,nodecl> = @*GSList
global GSubprocessLauncher_queueautoptr: type <cimport,nodecl> = @*GQueue
global GTask_autoptr: type <cimport,nodecl> = @*GTask
global GTask_listautoptr: type <cimport,nodecl> = @*GList
global GTask_slistautoptr: type <cimport,nodecl> = @*GSList
global GTask_queueautoptr: type <cimport,nodecl> = @*GQueue
global GTcpConnection_autoptr: type <cimport,nodecl> = @*GTcpConnection
global GTcpConnection_listautoptr: type <cimport,nodecl> = @*GList
global GTcpConnection_slistautoptr: type <cimport,nodecl> = @*GSList
global GTcpConnection_queueautoptr: type <cimport,nodecl> = @*GQueue
global GTcpWrapperConnection_autoptr: type <cimport,nodecl> = @*GTcpWrapperConnection
global GTcpWrapperConnection_listautoptr: type <cimport,nodecl> = @*GList
global GTcpWrapperConnection_slistautoptr: type <cimport,nodecl> = @*GSList
global GTcpWrapperConnection_queueautoptr: type <cimport,nodecl> = @*GQueue
global GTestDBus_autoptr: type <cimport,nodecl> = @*GTestDBus
global GTestDBus_listautoptr: type <cimport,nodecl> = @*GList
global GTestDBus_slistautoptr: type <cimport,nodecl> = @*GSList
global GTestDBus_queueautoptr: type <cimport,nodecl> = @*GQueue
global GThemedIcon_autoptr: type <cimport,nodecl> = @*GThemedIcon
global GThemedIcon_listautoptr: type <cimport,nodecl> = @*GList
global GThemedIcon_slistautoptr: type <cimport,nodecl> = @*GSList
global GThemedIcon_queueautoptr: type <cimport,nodecl> = @*GQueue
global GThreadedSocketService_autoptr: type <cimport,nodecl> = @*GThreadedSocketService
global GThreadedSocketService_listautoptr: type <cimport,nodecl> = @*GList
global GThreadedSocketService_slistautoptr: type <cimport,nodecl> = @*GSList
global GThreadedSocketService_queueautoptr: type <cimport,nodecl> = @*GQueue
global GTlsBackend_autoptr: type <cimport,nodecl> = @*GTlsBackend
global GTlsBackend_listautoptr: type <cimport,nodecl> = @*GList
global GTlsBackend_slistautoptr: type <cimport,nodecl> = @*GSList
global GTlsBackend_queueautoptr: type <cimport,nodecl> = @*GQueue
global GTlsCertificate_autoptr: type <cimport,nodecl> = @*GTlsCertificate
global GTlsCertificate_listautoptr: type <cimport,nodecl> = @*GList
global GTlsCertificate_slistautoptr: type <cimport,nodecl> = @*GSList
global GTlsCertificate_queueautoptr: type <cimport,nodecl> = @*GQueue
global GTlsClientConnection_autoptr: type <cimport,nodecl> = @*GTlsClientConnection
global GTlsClientConnection_listautoptr: type <cimport,nodecl> = @*GList
global GTlsClientConnection_slistautoptr: type <cimport,nodecl> = @*GSList
global GTlsClientConnection_queueautoptr: type <cimport,nodecl> = @*GQueue
global GTlsConnection_autoptr: type <cimport,nodecl> = @*GTlsConnection
global GTlsConnection_listautoptr: type <cimport,nodecl> = @*GList
global GTlsConnection_slistautoptr: type <cimport,nodecl> = @*GSList
global GTlsConnection_queueautoptr: type <cimport,nodecl> = @*GQueue
global GTlsDatabase_autoptr: type <cimport,nodecl> = @*GTlsDatabase
global GTlsDatabase_listautoptr: type <cimport,nodecl> = @*GList
global GTlsDatabase_slistautoptr: type <cimport,nodecl> = @*GSList
global GTlsDatabase_queueautoptr: type <cimport,nodecl> = @*GQueue
global GTlsFileDatabase_autoptr: type <cimport,nodecl> = @*GTlsFileDatabase
global GTlsFileDatabase_listautoptr: type <cimport,nodecl> = @*GList
global GTlsFileDatabase_slistautoptr: type <cimport,nodecl> = @*GSList
global GTlsFileDatabase_queueautoptr: type <cimport,nodecl> = @*GQueue
global GTlsInteraction_autoptr: type <cimport,nodecl> = @*GTlsInteraction
global GTlsInteraction_listautoptr: type <cimport,nodecl> = @*GList
global GTlsInteraction_slistautoptr: type <cimport,nodecl> = @*GSList
global GTlsInteraction_queueautoptr: type <cimport,nodecl> = @*GQueue
global GTlsPassword_autoptr: type <cimport,nodecl> = @*GTlsPassword
global GTlsPassword_listautoptr: type <cimport,nodecl> = @*GList
global GTlsPassword_slistautoptr: type <cimport,nodecl> = @*GSList
global GTlsPassword_queueautoptr: type <cimport,nodecl> = @*GQueue
global GTlsServerConnection_autoptr: type <cimport,nodecl> = @*GTlsServerConnection
global GTlsServerConnection_listautoptr: type <cimport,nodecl> = @*GList
global GTlsServerConnection_slistautoptr: type <cimport,nodecl> = @*GSList
global GTlsServerConnection_queueautoptr: type <cimport,nodecl> = @*GQueue
global GVfs_autoptr: type <cimport,nodecl> = @*GVfs
global GVfs_listautoptr: type <cimport,nodecl> = @*GList
global GVfs_slistautoptr: type <cimport,nodecl> = @*GSList
global GVfs_queueautoptr: type <cimport,nodecl> = @*GQueue
global GVolume_autoptr: type <cimport,nodecl> = @*GVolume
global GVolume_listautoptr: type <cimport,nodecl> = @*GList
global GVolume_slistautoptr: type <cimport,nodecl> = @*GSList
global GVolume_queueautoptr: type <cimport,nodecl> = @*GQueue
global GVolumeMonitor_autoptr: type <cimport,nodecl> = @*GVolumeMonitor
global GVolumeMonitor_listautoptr: type <cimport,nodecl> = @*GList
global GVolumeMonitor_slistautoptr: type <cimport,nodecl> = @*GSList
global GVolumeMonitor_queueautoptr: type <cimport,nodecl> = @*GQueue
global GZlibCompressor_autoptr: type <cimport,nodecl> = @*GZlibCompressor
global GZlibCompressor_listautoptr: type <cimport,nodecl> = @*GList
global GZlibCompressor_slistautoptr: type <cimport,nodecl> = @*GSList
global GZlibCompressor_queueautoptr: type <cimport,nodecl> = @*GQueue
global GZlibDecompressor_autoptr: type <cimport,nodecl> = @*GZlibDecompressor
global GZlibDecompressor_listautoptr: type <cimport,nodecl> = @*GList
global GZlibDecompressor_slistautoptr: type <cimport,nodecl> = @*GSList
global GZlibDecompressor_queueautoptr: type <cimport,nodecl> = @*GQueue
global GtkCssSection: type <cimport,nodecl,forwarddecl> = @record{}
global cairo_bool_t: type <cimport,nodecl> = @cint
global cairo_t: type <cimport,nodecl,forwarddecl> = @record{}
global cairo_surface_t: type <cimport,nodecl,forwarddecl> = @record{}
global cairo_device_t: type <cimport,nodecl,forwarddecl> = @record{}
global cairo_matrix_t: type <cimport,nodecl> = @record{
  xx: float64,
  yx: float64,
  xy: float64,
  yy: float64,
  x0: float64,
  y0: float64
}
global cairo_pattern_t: type <cimport,nodecl,forwarddecl> = @record{}
global cairo_destroy_func_t: type <cimport,nodecl> = @function(data: pointer): void
global cairo_user_data_key_t: type <cimport,nodecl> = @record{
  unused: cint
}
global cairo_status_t: type <cimport,nodecl,using> = @enum(cint){
  CAIRO_STATUS_SUCCESS = 0,
  CAIRO_STATUS_NO_MEMORY = 1,
  CAIRO_STATUS_INVALID_RESTORE = 2,
  CAIRO_STATUS_INVALID_POP_GROUP = 3,
  CAIRO_STATUS_NO_CURRENT_POINT = 4,
  CAIRO_STATUS_INVALID_MATRIX = 5,
  CAIRO_STATUS_INVALID_STATUS = 6,
  CAIRO_STATUS_NULL_POINTER = 7,
  CAIRO_STATUS_INVALID_STRING = 8,
  CAIRO_STATUS_INVALID_PATH_DATA = 9,
  CAIRO_STATUS_READ_ERROR = 10,
  CAIRO_STATUS_WRITE_ERROR = 11,
  CAIRO_STATUS_SURFACE_FINISHED = 12,
  CAIRO_STATUS_SURFACE_TYPE_MISMATCH = 13,
  CAIRO_STATUS_PATTERN_TYPE_MISMATCH = 14,
  CAIRO_STATUS_INVALID_CONTENT = 15,
  CAIRO_STATUS_INVALID_FORMAT = 16,
  CAIRO_STATUS_INVALID_VISUAL = 17,
  CAIRO_STATUS_FILE_NOT_FOUND = 18,
  CAIRO_STATUS_INVALID_DASH = 19,
  CAIRO_STATUS_INVALID_DSC_COMMENT = 20,
  CAIRO_STATUS_INVALID_INDEX = 21,
  CAIRO_STATUS_CLIP_NOT_REPRESENTABLE = 22,
  CAIRO_STATUS_TEMP_FILE_ERROR = 23,
  CAIRO_STATUS_INVALID_STRIDE = 24,
  CAIRO_STATUS_FONT_TYPE_MISMATCH = 25,
  CAIRO_STATUS_USER_FONT_IMMUTABLE = 26,
  CAIRO_STATUS_USER_FONT_ERROR = 27,
  CAIRO_STATUS_NEGATIVE_COUNT = 28,
  CAIRO_STATUS_INVALID_CLUSTERS = 29,
  CAIRO_STATUS_INVALID_SLANT = 30,
  CAIRO_STATUS_INVALID_WEIGHT = 31,
  CAIRO_STATUS_INVALID_SIZE = 32,
  CAIRO_STATUS_USER_FONT_NOT_IMPLEMENTED = 33,
  CAIRO_STATUS_DEVICE_TYPE_MISMATCH = 34,
  CAIRO_STATUS_DEVICE_ERROR = 35,
  CAIRO_STATUS_INVALID_MESH_CONSTRUCTION = 36,
  CAIRO_STATUS_DEVICE_FINISHED = 37,
  CAIRO_STATUS_JBIG2_GLOBAL_MISSING = 38,
  CAIRO_STATUS_PNG_ERROR = 39,
  CAIRO_STATUS_FREETYPE_ERROR = 40,
  CAIRO_STATUS_WIN32_GDI_ERROR = 41,
  CAIRO_STATUS_TAG_ERROR = 42,
  CAIRO_STATUS_LAST_STATUS = 43
}
global cairo_content_t: type <cimport,nodecl,using> = @enum(cint){
  CAIRO_CONTENT_COLOR = 4096,
  CAIRO_CONTENT_ALPHA = 8192,
  CAIRO_CONTENT_COLOR_ALPHA = 12288
}
global cairo_format_t: type <cimport,nodecl,using> = @enum(cint){
  CAIRO_FORMAT_INVALID = -1,
  CAIRO_FORMAT_ARGB32 = 0,
  CAIRO_FORMAT_RGB24 = 1,
  CAIRO_FORMAT_A8 = 2,
  CAIRO_FORMAT_A1 = 3,
  CAIRO_FORMAT_RGB16_565 = 4,
  CAIRO_FORMAT_RGB30 = 5,
  CAIRO_FORMAT_RGB96F = 6,
  CAIRO_FORMAT_RGBA128F = 7
}
global cairo_write_func_t: type <cimport,nodecl> = @function(closure: pointer, data: *cuchar, length: cuint): cairo_status_t
global cairo_read_func_t: type <cimport,nodecl> = @function(closure: pointer, data: *cuchar, length: cuint): cairo_status_t
global cairo_rectangle_int_t: type <cimport,nodecl> = @record{
  x: cint,
  y: cint,
  width: cint,
  height: cint
}
global cairo_operator_t: type <cimport,nodecl,using> = @enum(cint){
  CAIRO_OPERATOR_CLEAR = 0,
  CAIRO_OPERATOR_SOURCE = 1,
  CAIRO_OPERATOR_OVER = 2,
  CAIRO_OPERATOR_IN = 3,
  CAIRO_OPERATOR_OUT = 4,
  CAIRO_OPERATOR_ATOP = 5,
  CAIRO_OPERATOR_DEST = 6,
  CAIRO_OPERATOR_DEST_OVER = 7,
  CAIRO_OPERATOR_DEST_IN = 8,
  CAIRO_OPERATOR_DEST_OUT = 9,
  CAIRO_OPERATOR_DEST_ATOP = 10,
  CAIRO_OPERATOR_XOR = 11,
  CAIRO_OPERATOR_ADD = 12,
  CAIRO_OPERATOR_SATURATE = 13,
  CAIRO_OPERATOR_MULTIPLY = 14,
  CAIRO_OPERATOR_SCREEN = 15,
  CAIRO_OPERATOR_OVERLAY = 16,
  CAIRO_OPERATOR_DARKEN = 17,
  CAIRO_OPERATOR_LIGHTEN = 18,
  CAIRO_OPERATOR_COLOR_DODGE = 19,
  CAIRO_OPERATOR_COLOR_BURN = 20,
  CAIRO_OPERATOR_HARD_LIGHT = 21,
  CAIRO_OPERATOR_SOFT_LIGHT = 22,
  CAIRO_OPERATOR_DIFFERENCE = 23,
  CAIRO_OPERATOR_EXCLUSION = 24,
  CAIRO_OPERATOR_HSL_HUE = 25,
  CAIRO_OPERATOR_HSL_SATURATION = 26,
  CAIRO_OPERATOR_HSL_COLOR = 27,
  CAIRO_OPERATOR_HSL_LUMINOSITY = 28
}
global cairo_antialias_t: type <cimport,nodecl,using> = @enum(cint){
  CAIRO_ANTIALIAS_DEFAULT = 0,
  CAIRO_ANTIALIAS_NONE = 1,
  CAIRO_ANTIALIAS_GRAY = 2,
  CAIRO_ANTIALIAS_SUBPIXEL = 3,
  CAIRO_ANTIALIAS_FAST = 4,
  CAIRO_ANTIALIAS_GOOD = 5,
  CAIRO_ANTIALIAS_BEST = 6
}
global cairo_fill_rule_t: type <cimport,nodecl,using> = @enum(cint){
  CAIRO_FILL_RULE_WINDING = 0,
  CAIRO_FILL_RULE_EVEN_ODD = 1
}
global cairo_line_cap_t: type <cimport,nodecl,using> = @enum(cint){
  CAIRO_LINE_CAP_BUTT = 0,
  CAIRO_LINE_CAP_ROUND = 1,
  CAIRO_LINE_CAP_SQUARE = 2
}
global cairo_line_join_t: type <cimport,nodecl,using> = @enum(cint){
  CAIRO_LINE_JOIN_MITER = 0,
  CAIRO_LINE_JOIN_ROUND = 1,
  CAIRO_LINE_JOIN_BEVEL = 2
}
global cairo_rectangle_t: type <cimport,nodecl> = @record{
  x: float64,
  y: float64,
  width: float64,
  height: float64
}
global cairo_rectangle_list_t: type <cimport,nodecl> = @record{
  status: cairo_status_t,
  rectangles: *cairo_rectangle_t,
  num_rectangles: cint
}
global cairo_scaled_font_t: type <cimport,nodecl,forwarddecl> = @record{}
global cairo_font_face_t: type <cimport,nodecl,forwarddecl> = @record{}
global cairo_glyph_t: type <cimport,nodecl> = @record{
  index: culong,
  x: float64,
  y: float64
}
global cairo_text_cluster_t: type <cimport,nodecl> = @record{
  num_bytes: cint,
  num_glyphs: cint
}
global cairo_text_cluster_flags_t: type <cimport,nodecl,using> = @enum(cint){
  CAIRO_TEXT_CLUSTER_FLAG_BACKWARD = 1
}
global cairo_text_extents_t: type <cimport,nodecl> = @record{
  x_bearing: float64,
  y_bearing: float64,
  width: float64,
  height: float64,
  x_advance: float64,
  y_advance: float64
}
global cairo_font_extents_t: type <cimport,nodecl> = @record{
  ascent: float64,
  descent: float64,
  height: float64,
  max_x_advance: float64,
  max_y_advance: float64
}
global cairo_font_slant_t: type <cimport,nodecl,using> = @enum(cint){
  CAIRO_FONT_SLANT_NORMAL = 0,
  CAIRO_FONT_SLANT_ITALIC = 1,
  CAIRO_FONT_SLANT_OBLIQUE = 2
}
global cairo_font_weight_t: type <cimport,nodecl,using> = @enum(cint){
  CAIRO_FONT_WEIGHT_NORMAL = 0,
  CAIRO_FONT_WEIGHT_BOLD = 1
}
global cairo_subpixel_order_t: type <cimport,nodecl,using> = @enum(cint){
  CAIRO_SUBPIXEL_ORDER_DEFAULT = 0,
  CAIRO_SUBPIXEL_ORDER_RGB = 1,
  CAIRO_SUBPIXEL_ORDER_BGR = 2,
  CAIRO_SUBPIXEL_ORDER_VRGB = 3,
  CAIRO_SUBPIXEL_ORDER_VBGR = 4
}
global cairo_hint_style_t: type <cimport,nodecl,using> = @enum(cint){
  CAIRO_HINT_STYLE_DEFAULT = 0,
  CAIRO_HINT_STYLE_NONE = 1,
  CAIRO_HINT_STYLE_SLIGHT = 2,
  CAIRO_HINT_STYLE_MEDIUM = 3,
  CAIRO_HINT_STYLE_FULL = 4
}
global cairo_hint_metrics_t: type <cimport,nodecl,using> = @enum(cint){
  CAIRO_HINT_METRICS_DEFAULT = 0,
  CAIRO_HINT_METRICS_OFF = 1,
  CAIRO_HINT_METRICS_ON = 2
}
global cairo_font_options_t: type <cimport,nodecl,forwarddecl> = @record{}
global cairo_font_type_t: type <cimport,nodecl,using> = @enum(cint){
  CAIRO_FONT_TYPE_TOY = 0,
  CAIRO_FONT_TYPE_FT = 1,
  CAIRO_FONT_TYPE_WIN32 = 2,
  CAIRO_FONT_TYPE_QUARTZ = 3,
  CAIRO_FONT_TYPE_USER = 4
}
global cairo_user_scaled_font_init_func_t: type <cimport,nodecl> = @function(scaled_font: *cairo_scaled_font_t, cr: *cairo_t, extents: *cairo_font_extents_t): cairo_status_t
global cairo_user_scaled_font_render_glyph_func_t: type <cimport,nodecl> = @function(scaled_font: *cairo_scaled_font_t, glyph: culong, cr: *cairo_t, extents: *cairo_text_extents_t): cairo_status_t
global cairo_user_scaled_font_text_to_glyphs_func_t: type <cimport,nodecl> = @function(scaled_font: *cairo_scaled_font_t, utf8: cstring, utf8_len: cint, glyphs: **cairo_glyph_t, num_glyphs: *cint, clusters: **cairo_text_cluster_t, num_clusters: *cint, cluster_flags: *cairo_text_cluster_flags_t): cairo_status_t
global cairo_user_scaled_font_unicode_to_glyph_func_t: type <cimport,nodecl> = @function(scaled_font: *cairo_scaled_font_t, unicode: culong, glyph_index: *culong): cairo_status_t
global cairo_path_data_type_t: type <cimport,nodecl,using> = @enum(cint){
  CAIRO_PATH_MOVE_TO = 0,
  CAIRO_PATH_LINE_TO = 1,
  CAIRO_PATH_CURVE_TO = 2,
  CAIRO_PATH_CLOSE_PATH = 3
}
global cairo_path_data_t: type <cimport,nodecl,forwarddecl> = @union{}
cairo_path_data_t = @union{
  header: record{
    type: cairo_path_data_type_t,
    length: cint
  },
  point: record{
    x: float64,
    y: float64
  }
}
global cairo_path_t: type <cimport,nodecl> = @record{
  status: cairo_status_t,
  data: *cairo_path_data_t,
  num_data: cint
}
global cairo_device_type_t: type <cimport,nodecl,using> = @enum(cint){
  CAIRO_DEVICE_TYPE_DRM = 0,
  CAIRO_DEVICE_TYPE_GL = 1,
  CAIRO_DEVICE_TYPE_SCRIPT = 2,
  CAIRO_DEVICE_TYPE_XCB = 3,
  CAIRO_DEVICE_TYPE_XLIB = 4,
  CAIRO_DEVICE_TYPE_XML = 5,
  CAIRO_DEVICE_TYPE_COGL = 6,
  CAIRO_DEVICE_TYPE_WIN32 = 7,
  CAIRO_DEVICE_TYPE_INVALID = -1
}
global cairo_surface_observer_mode_t: type <cimport,nodecl,using> = @enum(cint){
  CAIRO_SURFACE_OBSERVER_NORMAL = 0,
  CAIRO_SURFACE_OBSERVER_RECORD_OPERATIONS = 1
}
global cairo_surface_observer_callback_t: type <cimport,nodecl> = @function(observer: *cairo_surface_t, target: *cairo_surface_t, data: pointer): void
global cairo_surface_type_t: type <cimport,nodecl,using> = @enum(cint){
  CAIRO_SURFACE_TYPE_IMAGE = 0,
  CAIRO_SURFACE_TYPE_PDF = 1,
  CAIRO_SURFACE_TYPE_PS = 2,
  CAIRO_SURFACE_TYPE_XLIB = 3,
  CAIRO_SURFACE_TYPE_XCB = 4,
  CAIRO_SURFACE_TYPE_GLITZ = 5,
  CAIRO_SURFACE_TYPE_QUARTZ = 6,
  CAIRO_SURFACE_TYPE_WIN32 = 7,
  CAIRO_SURFACE_TYPE_BEOS = 8,
  CAIRO_SURFACE_TYPE_DIRECTFB = 9,
  CAIRO_SURFACE_TYPE_SVG = 10,
  CAIRO_SURFACE_TYPE_OS2 = 11,
  CAIRO_SURFACE_TYPE_WIN32_PRINTING = 12,
  CAIRO_SURFACE_TYPE_QUARTZ_IMAGE = 13,
  CAIRO_SURFACE_TYPE_SCRIPT = 14,
  CAIRO_SURFACE_TYPE_QT = 15,
  CAIRO_SURFACE_TYPE_RECORDING = 16,
  CAIRO_SURFACE_TYPE_VG = 17,
  CAIRO_SURFACE_TYPE_GL = 18,
  CAIRO_SURFACE_TYPE_DRM = 19,
  CAIRO_SURFACE_TYPE_TEE = 20,
  CAIRO_SURFACE_TYPE_XML = 21,
  CAIRO_SURFACE_TYPE_SKIA = 22,
  CAIRO_SURFACE_TYPE_SUBSURFACE = 23,
  CAIRO_SURFACE_TYPE_COGL = 24
}
global cairo_raster_source_acquire_func_t: type <cimport,nodecl> = @function(pattern: *cairo_pattern_t, callback_data: pointer, target: *cairo_surface_t, extents: *cairo_rectangle_int_t): *cairo_surface_t
global cairo_raster_source_release_func_t: type <cimport,nodecl> = @function(pattern: *cairo_pattern_t, callback_data: pointer, surface: *cairo_surface_t): void
global cairo_raster_source_snapshot_func_t: type <cimport,nodecl> = @function(pattern: *cairo_pattern_t, callback_data: pointer): cairo_status_t
global cairo_raster_source_copy_func_t: type <cimport,nodecl> = @function(pattern: *cairo_pattern_t, callback_data: pointer, other: *cairo_pattern_t): cairo_status_t
global cairo_raster_source_finish_func_t: type <cimport,nodecl> = @function(pattern: *cairo_pattern_t, callback_data: pointer): void
global cairo_pattern_type_t: type <cimport,nodecl,using> = @enum(cint){
  CAIRO_PATTERN_TYPE_SOLID = 0,
  CAIRO_PATTERN_TYPE_SURFACE = 1,
  CAIRO_PATTERN_TYPE_LINEAR = 2,
  CAIRO_PATTERN_TYPE_RADIAL = 3,
  CAIRO_PATTERN_TYPE_MESH = 4,
  CAIRO_PATTERN_TYPE_RASTER_SOURCE = 5
}
global cairo_extend_t: type <cimport,nodecl,using> = @enum(cint){
  CAIRO_EXTEND_NONE = 0,
  CAIRO_EXTEND_REPEAT = 1,
  CAIRO_EXTEND_REFLECT = 2,
  CAIRO_EXTEND_PAD = 3
}
global cairo_filter_t: type <cimport,nodecl,using> = @enum(cint){
  CAIRO_FILTER_FAST = 0,
  CAIRO_FILTER_GOOD = 1,
  CAIRO_FILTER_BEST = 2,
  CAIRO_FILTER_NEAREST = 3,
  CAIRO_FILTER_BILINEAR = 4,
  CAIRO_FILTER_GAUSSIAN = 5
}
global cairo_region_t: type <cimport,nodecl,forwarddecl> = @record{}
global cairo_region_overlap_t: type <cimport,nodecl,using> = @enum(cint){
  CAIRO_REGION_OVERLAP_IN = 0,
  CAIRO_REGION_OVERLAP_OUT = 1,
  CAIRO_REGION_OVERLAP_PART = 2
}
global int_least8_t: type <cimport,nodecl> = @int8
global int_least16_t: type <cimport,nodecl> = @int16
global int_least32_t: type <cimport,nodecl> = @int32
global int_least64_t: type <cimport,nodecl> = @int64
global uint_least8_t: type <cimport,nodecl> = @uint8
global uint_least16_t: type <cimport,nodecl> = @uint16
global uint_least32_t: type <cimport,nodecl> = @uint32
global uint_least64_t: type <cimport,nodecl> = @uint64
global int_fast8_t: type <cimport,nodecl> = @cschar
global int_fast16_t: type <cimport,nodecl> = @clong
global int_fast32_t: type <cimport,nodecl> = @clong
global int_fast64_t: type <cimport,nodecl> = @clong
global uint_fast8_t: type <cimport,nodecl> = @cuchar
global uint_fast16_t: type <cimport,nodecl> = @culong
global uint_fast32_t: type <cimport,nodecl> = @culong
global uint_fast64_t: type <cimport,nodecl> = @culong
global intmax_t: type <cimport,nodecl> = @clong
global uintmax_t: type <cimport,nodecl> = @culong
global hb_bool_t: type <cimport,nodecl> = @cint
global hb_codepoint_t: type <cimport,nodecl> = @uint32
global hb_position_t: type <cimport,nodecl> = @int32
global hb_mask_t: type <cimport,nodecl> = @uint32
global hb_var_int_t: type <cimport,nodecl> = @union{
  u32: uint32,
  i32: int32,
  u16: [2]uint16,
  i16: [2]int16,
  u8: [4]uint8,
  i8: [4]int8
}
global hb_var_num_t: type <cimport,nodecl> = @union{
  f: float32,
  u32: uint32,
  i32: int32,
  u16: [2]uint16,
  i16: [2]int16,
  u8: [4]uint8,
  i8: [4]int8
}
global hb_tag_t: type <cimport,nodecl> = @uint32
global hb_direction_t: type <cimport,nodecl,using> = @enum(cint){
  HB_DIRECTION_INVALID = 0,
  HB_DIRECTION_LTR = 4,
  HB_DIRECTION_RTL = 5,
  HB_DIRECTION_TTB = 6,
  HB_DIRECTION_BTT = 7
}
global hb_language_impl_t: type <cimport,nodecl,ctypedef'hb_language_impl_t',forwarddecl> = @record{}
global hb_language_t: type <cimport,nodecl> = @*hb_language_impl_t
global hb_script_t: type = @cint
global HB_SCRIPT_COMMON: cint <cimport,nodecl,const>
global HB_SCRIPT_INHERITED: cint <cimport,nodecl,const>
global HB_SCRIPT_UNKNOWN: cint <cimport,nodecl,const>
global HB_SCRIPT_ARABIC: cint <cimport,nodecl,const>
global HB_SCRIPT_ARMENIAN: cint <cimport,nodecl,const>
global HB_SCRIPT_BENGALI: cint <cimport,nodecl,const>
global HB_SCRIPT_CYRILLIC: cint <cimport,nodecl,const>
global HB_SCRIPT_DEVANAGARI: cint <cimport,nodecl,const>
global HB_SCRIPT_GEORGIAN: cint <cimport,nodecl,const>
global HB_SCRIPT_GREEK: cint <cimport,nodecl,const>
global HB_SCRIPT_GUJARATI: cint <cimport,nodecl,const>
global HB_SCRIPT_GURMUKHI: cint <cimport,nodecl,const>
global HB_SCRIPT_HANGUL: cint <cimport,nodecl,const>
global HB_SCRIPT_HAN: cint <cimport,nodecl,const>
global HB_SCRIPT_HEBREW: cint <cimport,nodecl,const>
global HB_SCRIPT_HIRAGANA: cint <cimport,nodecl,const>
global HB_SCRIPT_KANNADA: cint <cimport,nodecl,const>
global HB_SCRIPT_KATAKANA: cint <cimport,nodecl,const>
global HB_SCRIPT_LAO: cint <cimport,nodecl,const>
global HB_SCRIPT_LATIN: cint <cimport,nodecl,const>
global HB_SCRIPT_MALAYALAM: cint <cimport,nodecl,const>
global HB_SCRIPT_ORIYA: cint <cimport,nodecl,const>
global HB_SCRIPT_TAMIL: cint <cimport,nodecl,const>
global HB_SCRIPT_TELUGU: cint <cimport,nodecl,const>
global HB_SCRIPT_THAI: cint <cimport,nodecl,const>
global HB_SCRIPT_TIBETAN: cint <cimport,nodecl,const>
global HB_SCRIPT_BOPOMOFO: cint <cimport,nodecl,const>
global HB_SCRIPT_BRAILLE: cint <cimport,nodecl,const>
global HB_SCRIPT_CANADIAN_SYLLABICS: cint <cimport,nodecl,const>
global HB_SCRIPT_CHEROKEE: cint <cimport,nodecl,const>
global HB_SCRIPT_ETHIOPIC: cint <cimport,nodecl,const>
global HB_SCRIPT_KHMER: cint <cimport,nodecl,const>
global HB_SCRIPT_MONGOLIAN: cint <cimport,nodecl,const>
global HB_SCRIPT_MYANMAR: cint <cimport,nodecl,const>
global HB_SCRIPT_OGHAM: cint <cimport,nodecl,const>
global HB_SCRIPT_RUNIC: cint <cimport,nodecl,const>
global HB_SCRIPT_SINHALA: cint <cimport,nodecl,const>
global HB_SCRIPT_SYRIAC: cint <cimport,nodecl,const>
global HB_SCRIPT_THAANA: cint <cimport,nodecl,const>
global HB_SCRIPT_YI: cint <cimport,nodecl,const>
global HB_SCRIPT_DESERET: cint <cimport,nodecl,const>
global HB_SCRIPT_GOTHIC: cint <cimport,nodecl,const>
global HB_SCRIPT_OLD_ITALIC: cint <cimport,nodecl,const>
global HB_SCRIPT_BUHID: cint <cimport,nodecl,const>
global HB_SCRIPT_HANUNOO: cint <cimport,nodecl,const>
global HB_SCRIPT_TAGALOG: cint <cimport,nodecl,const>
global HB_SCRIPT_TAGBANWA: cint <cimport,nodecl,const>
global HB_SCRIPT_CYPRIOT: cint <cimport,nodecl,const>
global HB_SCRIPT_LIMBU: cint <cimport,nodecl,const>
global HB_SCRIPT_LINEAR_B: cint <cimport,nodecl,const>
global HB_SCRIPT_OSMANYA: cint <cimport,nodecl,const>
global HB_SCRIPT_SHAVIAN: cint <cimport,nodecl,const>
global HB_SCRIPT_TAI_LE: cint <cimport,nodecl,const>
global HB_SCRIPT_UGARITIC: cint <cimport,nodecl,const>
global HB_SCRIPT_BUGINESE: cint <cimport,nodecl,const>
global HB_SCRIPT_COPTIC: cint <cimport,nodecl,const>
global HB_SCRIPT_GLAGOLITIC: cint <cimport,nodecl,const>
global HB_SCRIPT_KHAROSHTHI: cint <cimport,nodecl,const>
global HB_SCRIPT_NEW_TAI_LUE: cint <cimport,nodecl,const>
global HB_SCRIPT_OLD_PERSIAN: cint <cimport,nodecl,const>
global HB_SCRIPT_SYLOTI_NAGRI: cint <cimport,nodecl,const>
global HB_SCRIPT_TIFINAGH: cint <cimport,nodecl,const>
global HB_SCRIPT_BALINESE: cint <cimport,nodecl,const>
global HB_SCRIPT_CUNEIFORM: cint <cimport,nodecl,const>
global HB_SCRIPT_NKO: cint <cimport,nodecl,const>
global HB_SCRIPT_PHAGS_PA: cint <cimport,nodecl,const>
global HB_SCRIPT_PHOENICIAN: cint <cimport,nodecl,const>
global HB_SCRIPT_CARIAN: cint <cimport,nodecl,const>
global HB_SCRIPT_CHAM: cint <cimport,nodecl,const>
global HB_SCRIPT_KAYAH_LI: cint <cimport,nodecl,const>
global HB_SCRIPT_LEPCHA: cint <cimport,nodecl,const>
global HB_SCRIPT_LYCIAN: cint <cimport,nodecl,const>
global HB_SCRIPT_LYDIAN: cint <cimport,nodecl,const>
global HB_SCRIPT_OL_CHIKI: cint <cimport,nodecl,const>
global HB_SCRIPT_REJANG: cint <cimport,nodecl,const>
global HB_SCRIPT_SAURASHTRA: cint <cimport,nodecl,const>
global HB_SCRIPT_SUNDANESE: cint <cimport,nodecl,const>
global HB_SCRIPT_VAI: cint <cimport,nodecl,const>
global HB_SCRIPT_AVESTAN: cint <cimport,nodecl,const>
global HB_SCRIPT_BAMUM: cint <cimport,nodecl,const>
global HB_SCRIPT_EGYPTIAN_HIEROGLYPHS: cint <cimport,nodecl,const>
global HB_SCRIPT_IMPERIAL_ARAMAIC: cint <cimport,nodecl,const>
global HB_SCRIPT_INSCRIPTIONAL_PAHLAVI: cint <cimport,nodecl,const>
global HB_SCRIPT_INSCRIPTIONAL_PARTHIAN: cint <cimport,nodecl,const>
global HB_SCRIPT_JAVANESE: cint <cimport,nodecl,const>
global HB_SCRIPT_KAITHI: cint <cimport,nodecl,const>
global HB_SCRIPT_LISU: cint <cimport,nodecl,const>
global HB_SCRIPT_MEETEI_MAYEK: cint <cimport,nodecl,const>
global HB_SCRIPT_OLD_SOUTH_ARABIAN: cint <cimport,nodecl,const>
global HB_SCRIPT_OLD_TURKIC: cint <cimport,nodecl,const>
global HB_SCRIPT_SAMARITAN: cint <cimport,nodecl,const>
global HB_SCRIPT_TAI_THAM: cint <cimport,nodecl,const>
global HB_SCRIPT_TAI_VIET: cint <cimport,nodecl,const>
global HB_SCRIPT_BATAK: cint <cimport,nodecl,const>
global HB_SCRIPT_BRAHMI: cint <cimport,nodecl,const>
global HB_SCRIPT_MANDAIC: cint <cimport,nodecl,const>
global HB_SCRIPT_CHAKMA: cint <cimport,nodecl,const>
global HB_SCRIPT_MEROITIC_CURSIVE: cint <cimport,nodecl,const>
global HB_SCRIPT_MEROITIC_HIEROGLYPHS: cint <cimport,nodecl,const>
global HB_SCRIPT_MIAO: cint <cimport,nodecl,const>
global HB_SCRIPT_SHARADA: cint <cimport,nodecl,const>
global HB_SCRIPT_SORA_SOMPENG: cint <cimport,nodecl,const>
global HB_SCRIPT_TAKRI: cint <cimport,nodecl,const>
global HB_SCRIPT_BASSA_VAH: cint <cimport,nodecl,const>
global HB_SCRIPT_CAUCASIAN_ALBANIAN: cint <cimport,nodecl,const>
global HB_SCRIPT_DUPLOYAN: cint <cimport,nodecl,const>
global HB_SCRIPT_ELBASAN: cint <cimport,nodecl,const>
global HB_SCRIPT_GRANTHA: cint <cimport,nodecl,const>
global HB_SCRIPT_KHOJKI: cint <cimport,nodecl,const>
global HB_SCRIPT_KHUDAWADI: cint <cimport,nodecl,const>
global HB_SCRIPT_LINEAR_A: cint <cimport,nodecl,const>
global HB_SCRIPT_MAHAJANI: cint <cimport,nodecl,const>
global HB_SCRIPT_MANICHAEAN: cint <cimport,nodecl,const>
global HB_SCRIPT_MENDE_KIKAKUI: cint <cimport,nodecl,const>
global HB_SCRIPT_MODI: cint <cimport,nodecl,const>
global HB_SCRIPT_MRO: cint <cimport,nodecl,const>
global HB_SCRIPT_NABATAEAN: cint <cimport,nodecl,const>
global HB_SCRIPT_OLD_NORTH_ARABIAN: cint <cimport,nodecl,const>
global HB_SCRIPT_OLD_PERMIC: cint <cimport,nodecl,const>
global HB_SCRIPT_PAHAWH_HMONG: cint <cimport,nodecl,const>
global HB_SCRIPT_PALMYRENE: cint <cimport,nodecl,const>
global HB_SCRIPT_PAU_CIN_HAU: cint <cimport,nodecl,const>
global HB_SCRIPT_PSALTER_PAHLAVI: cint <cimport,nodecl,const>
global HB_SCRIPT_SIDDHAM: cint <cimport,nodecl,const>
global HB_SCRIPT_TIRHUTA: cint <cimport,nodecl,const>
global HB_SCRIPT_WARANG_CITI: cint <cimport,nodecl,const>
global HB_SCRIPT_AHOM: cint <cimport,nodecl,const>
global HB_SCRIPT_ANATOLIAN_HIEROGLYPHS: cint <cimport,nodecl,const>
global HB_SCRIPT_HATRAN: cint <cimport,nodecl,const>
global HB_SCRIPT_MULTANI: cint <cimport,nodecl,const>
global HB_SCRIPT_OLD_HUNGARIAN: cint <cimport,nodecl,const>
global HB_SCRIPT_SIGNWRITING: cint <cimport,nodecl,const>
global HB_SCRIPT_ADLAM: cint <cimport,nodecl,const>
global HB_SCRIPT_BHAIKSUKI: cint <cimport,nodecl,const>
global HB_SCRIPT_MARCHEN: cint <cimport,nodecl,const>
global HB_SCRIPT_OSAGE: cint <cimport,nodecl,const>
global HB_SCRIPT_TANGUT: cint <cimport,nodecl,const>
global HB_SCRIPT_NEWA: cint <cimport,nodecl,const>
global HB_SCRIPT_MASARAM_GONDI: cint <cimport,nodecl,const>
global HB_SCRIPT_NUSHU: cint <cimport,nodecl,const>
global HB_SCRIPT_SOYOMBO: cint <cimport,nodecl,const>
global HB_SCRIPT_ZANABAZAR_SQUARE: cint <cimport,nodecl,const>
global HB_SCRIPT_DOGRA: cint <cimport,nodecl,const>
global HB_SCRIPT_GUNJALA_GONDI: cint <cimport,nodecl,const>
global HB_SCRIPT_HANIFI_ROHINGYA: cint <cimport,nodecl,const>
global HB_SCRIPT_MAKASAR: cint <cimport,nodecl,const>
global HB_SCRIPT_MEDEFAIDRIN: cint <cimport,nodecl,const>
global HB_SCRIPT_OLD_SOGDIAN: cint <cimport,nodecl,const>
global HB_SCRIPT_SOGDIAN: cint <cimport,nodecl,const>
global HB_SCRIPT_ELYMAIC: cint <cimport,nodecl,const>
global HB_SCRIPT_NANDINAGARI: cint <cimport,nodecl,const>
global HB_SCRIPT_NYIAKENG_PUACHUE_HMONG: cint <cimport,nodecl,const>
global HB_SCRIPT_WANCHO: cint <cimport,nodecl,const>
global HB_SCRIPT_CHORASMIAN: cint <cimport,nodecl,const>
global HB_SCRIPT_DIVES_AKURU: cint <cimport,nodecl,const>
global HB_SCRIPT_KHITAN_SMALL_SCRIPT: cint <cimport,nodecl,const>
global HB_SCRIPT_YEZIDI: cint <cimport,nodecl,const>
global HB_SCRIPT_CYPRO_MINOAN: cint <cimport,nodecl,const>
global HB_SCRIPT_OLD_UYGHUR: cint <cimport,nodecl,const>
global HB_SCRIPT_TANGSA: cint <cimport,nodecl,const>
global HB_SCRIPT_TOTO: cint <cimport,nodecl,const>
global HB_SCRIPT_VITHKUQI: cint <cimport,nodecl,const>
global HB_SCRIPT_MATH: cint <cimport,nodecl,const>
global HB_SCRIPT_INVALID: cint <cimport,nodecl,const>
global _HB_SCRIPT_MAX_VALUE: cint <cimport,nodecl,const>
global _HB_SCRIPT_MAX_VALUE_SIGNED: cint <cimport,nodecl,const>
global hb_user_data_key_t: type <cimport,nodecl> = @record{
  unused: cchar
}
global hb_destroy_func_t: type <cimport,nodecl> = @function(user_data: pointer): void
global hb_feature_t: type <cimport,nodecl> = @record{
  tag: hb_tag_t,
  value: uint32,
  start: cuint,
  end_: cuint
}
global hb_variation_t: type <cimport,nodecl> = @record{
  tag: hb_tag_t,
  value: float32
}
global hb_color_t: type <cimport,nodecl> = @uint32
global hb_memory_mode_t: type <cimport,nodecl,using> = @enum(cint){
  HB_MEMORY_MODE_DUPLICATE = 0,
  HB_MEMORY_MODE_READONLY = 1,
  HB_MEMORY_MODE_WRITABLE = 2,
  HB_MEMORY_MODE_READONLY_MAY_MAKE_WRITABLE = 3
}
global hb_blob_t: type <cimport,nodecl,forwarddecl> = @record{}
global hb_unicode_general_category_t: type <cimport,nodecl,using> = @enum(cint){
  HB_UNICODE_GENERAL_CATEGORY_CONTROL = 0,
  HB_UNICODE_GENERAL_CATEGORY_FORMAT = 1,
  HB_UNICODE_GENERAL_CATEGORY_UNASSIGNED = 2,
  HB_UNICODE_GENERAL_CATEGORY_PRIVATE_USE = 3,
  HB_UNICODE_GENERAL_CATEGORY_SURROGATE = 4,
  HB_UNICODE_GENERAL_CATEGORY_LOWERCASE_LETTER = 5,
  HB_UNICODE_GENERAL_CATEGORY_MODIFIER_LETTER = 6,
  HB_UNICODE_GENERAL_CATEGORY_OTHER_LETTER = 7,
  HB_UNICODE_GENERAL_CATEGORY_TITLECASE_LETTER = 8,
  HB_UNICODE_GENERAL_CATEGORY_UPPERCASE_LETTER = 9,
  HB_UNICODE_GENERAL_CATEGORY_SPACING_MARK = 10,
  HB_UNICODE_GENERAL_CATEGORY_ENCLOSING_MARK = 11,
  HB_UNICODE_GENERAL_CATEGORY_NON_SPACING_MARK = 12,
  HB_UNICODE_GENERAL_CATEGORY_DECIMAL_NUMBER = 13,
  HB_UNICODE_GENERAL_CATEGORY_LETTER_NUMBER = 14,
  HB_UNICODE_GENERAL_CATEGORY_OTHER_NUMBER = 15,
  HB_UNICODE_GENERAL_CATEGORY_CONNECT_PUNCTUATION = 16,
  HB_UNICODE_GENERAL_CATEGORY_DASH_PUNCTUATION = 17,
  HB_UNICODE_GENERAL_CATEGORY_CLOSE_PUNCTUATION = 18,
  HB_UNICODE_GENERAL_CATEGORY_FINAL_PUNCTUATION = 19,
  HB_UNICODE_GENERAL_CATEGORY_INITIAL_PUNCTUATION = 20,
  HB_UNICODE_GENERAL_CATEGORY_OTHER_PUNCTUATION = 21,
  HB_UNICODE_GENERAL_CATEGORY_OPEN_PUNCTUATION = 22,
  HB_UNICODE_GENERAL_CATEGORY_CURRENCY_SYMBOL = 23,
  HB_UNICODE_GENERAL_CATEGORY_MODIFIER_SYMBOL = 24,
  HB_UNICODE_GENERAL_CATEGORY_MATH_SYMBOL = 25,
  HB_UNICODE_GENERAL_CATEGORY_OTHER_SYMBOL = 26,
  HB_UNICODE_GENERAL_CATEGORY_LINE_SEPARATOR = 27,
  HB_UNICODE_GENERAL_CATEGORY_PARAGRAPH_SEPARATOR = 28,
  HB_UNICODE_GENERAL_CATEGORY_SPACE_SEPARATOR = 29
}
global hb_unicode_combining_class_t: type <cimport,nodecl,using> = @enum(cint){
  HB_UNICODE_COMBINING_CLASS_NOT_REORDERED = 0,
  HB_UNICODE_COMBINING_CLASS_OVERLAY = 1,
  HB_UNICODE_COMBINING_CLASS_NUKTA = 7,
  HB_UNICODE_COMBINING_CLASS_KANA_VOICING = 8,
  HB_UNICODE_COMBINING_CLASS_VIRAMA = 9,
  HB_UNICODE_COMBINING_CLASS_CCC10 = 10,
  HB_UNICODE_COMBINING_CLASS_CCC11 = 11,
  HB_UNICODE_COMBINING_CLASS_CCC12 = 12,
  HB_UNICODE_COMBINING_CLASS_CCC13 = 13,
  HB_UNICODE_COMBINING_CLASS_CCC14 = 14,
  HB_UNICODE_COMBINING_CLASS_CCC15 = 15,
  HB_UNICODE_COMBINING_CLASS_CCC16 = 16,
  HB_UNICODE_COMBINING_CLASS_CCC17 = 17,
  HB_UNICODE_COMBINING_CLASS_CCC18 = 18,
  HB_UNICODE_COMBINING_CLASS_CCC19 = 19,
  HB_UNICODE_COMBINING_CLASS_CCC20 = 20,
  HB_UNICODE_COMBINING_CLASS_CCC21 = 21,
  HB_UNICODE_COMBINING_CLASS_CCC22 = 22,
  HB_UNICODE_COMBINING_CLASS_CCC23 = 23,
  HB_UNICODE_COMBINING_CLASS_CCC24 = 24,
  HB_UNICODE_COMBINING_CLASS_CCC25 = 25,
  HB_UNICODE_COMBINING_CLASS_CCC26 = 26,
  HB_UNICODE_COMBINING_CLASS_CCC27 = 27,
  HB_UNICODE_COMBINING_CLASS_CCC28 = 28,
  HB_UNICODE_COMBINING_CLASS_CCC29 = 29,
  HB_UNICODE_COMBINING_CLASS_CCC30 = 30,
  HB_UNICODE_COMBINING_CLASS_CCC31 = 31,
  HB_UNICODE_COMBINING_CLASS_CCC32 = 32,
  HB_UNICODE_COMBINING_CLASS_CCC33 = 33,
  HB_UNICODE_COMBINING_CLASS_CCC34 = 34,
  HB_UNICODE_COMBINING_CLASS_CCC35 = 35,
  HB_UNICODE_COMBINING_CLASS_CCC36 = 36,
  HB_UNICODE_COMBINING_CLASS_CCC84 = 84,
  HB_UNICODE_COMBINING_CLASS_CCC91 = 91,
  HB_UNICODE_COMBINING_CLASS_CCC103 = 103,
  HB_UNICODE_COMBINING_CLASS_CCC107 = 107,
  HB_UNICODE_COMBINING_CLASS_CCC118 = 118,
  HB_UNICODE_COMBINING_CLASS_CCC122 = 122,
  HB_UNICODE_COMBINING_CLASS_CCC129 = 129,
  HB_UNICODE_COMBINING_CLASS_CCC130 = 130,
  HB_UNICODE_COMBINING_CLASS_CCC133 = 132,
  HB_UNICODE_COMBINING_CLASS_ATTACHED_BELOW_LEFT = 200,
  HB_UNICODE_COMBINING_CLASS_ATTACHED_BELOW = 202,
  HB_UNICODE_COMBINING_CLASS_ATTACHED_ABOVE = 214,
  HB_UNICODE_COMBINING_CLASS_ATTACHED_ABOVE_RIGHT = 216,
  HB_UNICODE_COMBINING_CLASS_BELOW_LEFT = 218,
  HB_UNICODE_COMBINING_CLASS_BELOW = 220,
  HB_UNICODE_COMBINING_CLASS_BELOW_RIGHT = 222,
  HB_UNICODE_COMBINING_CLASS_LEFT = 224,
  HB_UNICODE_COMBINING_CLASS_RIGHT = 226,
  HB_UNICODE_COMBINING_CLASS_ABOVE_LEFT = 228,
  HB_UNICODE_COMBINING_CLASS_ABOVE = 230,
  HB_UNICODE_COMBINING_CLASS_ABOVE_RIGHT = 232,
  HB_UNICODE_COMBINING_CLASS_DOUBLE_BELOW = 233,
  HB_UNICODE_COMBINING_CLASS_DOUBLE_ABOVE = 234,
  HB_UNICODE_COMBINING_CLASS_IOTA_SUBSCRIPT = 240,
  HB_UNICODE_COMBINING_CLASS_INVALID = 255
}
global hb_unicode_funcs_t: type <cimport,nodecl,forwarddecl> = @record{}
global hb_unicode_combining_class_func_t: type <cimport,nodecl> = @function(ufuncs: *hb_unicode_funcs_t, unicode: hb_codepoint_t, user_data: pointer): hb_unicode_combining_class_t
global hb_unicode_general_category_func_t: type <cimport,nodecl> = @function(ufuncs: *hb_unicode_funcs_t, unicode: hb_codepoint_t, user_data: pointer): hb_unicode_general_category_t
global hb_unicode_mirroring_func_t: type <cimport,nodecl> = @function(ufuncs: *hb_unicode_funcs_t, unicode: hb_codepoint_t, user_data: pointer): hb_codepoint_t
global hb_unicode_script_func_t: type <cimport,nodecl> = @function(ufuncs: *hb_unicode_funcs_t, unicode: hb_codepoint_t, user_data: pointer): hb_script_t
global hb_unicode_compose_func_t: type <cimport,nodecl> = @function(ufuncs: *hb_unicode_funcs_t, a: hb_codepoint_t, b: hb_codepoint_t, ab: *hb_codepoint_t, user_data: pointer): hb_bool_t
global hb_unicode_decompose_func_t: type <cimport,nodecl> = @function(ufuncs: *hb_unicode_funcs_t, ab: hb_codepoint_t, a: *hb_codepoint_t, b: *hb_codepoint_t, user_data: pointer): hb_bool_t
global hb_set_t: type <cimport,nodecl,forwarddecl> = @record{}
global hb_face_t: type <cimport,nodecl,forwarddecl> = @record{}
global hb_reference_table_func_t: type <cimport,nodecl> = @function(face: *hb_face_t, tag: hb_tag_t, user_data: pointer): *hb_blob_t
global hb_draw_state_t: type <cimport,nodecl> = @record{
  path_open: hb_bool_t,
  path_start_x: float32,
  path_start_y: float32,
  current_x: float32,
  current_y: float32,
  reserved1: hb_var_num_t,
  reserved2: hb_var_num_t,
  reserved3: hb_var_num_t,
  reserved4: hb_var_num_t,
  reserved5: hb_var_num_t,
  reserved6: hb_var_num_t,
  reserved7: hb_var_num_t
}
global hb_draw_funcs_t: type <cimport,nodecl,forwarddecl> = @record{}
global hb_draw_move_to_func_t: type <cimport,nodecl> = @function(dfuncs: *hb_draw_funcs_t, draw_data: pointer, st: *hb_draw_state_t, to_x: float32, to_y: float32, user_data: pointer): void
global hb_draw_line_to_func_t: type <cimport,nodecl> = @function(dfuncs: *hb_draw_funcs_t, draw_data: pointer, st: *hb_draw_state_t, to_x: float32, to_y: float32, user_data: pointer): void
global hb_draw_quadratic_to_func_t: type <cimport,nodecl> = @function(dfuncs: *hb_draw_funcs_t, draw_data: pointer, st: *hb_draw_state_t, control_x: float32, control_y: float32, to_x: float32, to_y: float32, user_data: pointer): void
global hb_draw_cubic_to_func_t: type <cimport,nodecl> = @function(dfuncs: *hb_draw_funcs_t, draw_data: pointer, st: *hb_draw_state_t, control1_x: float32, control1_y: float32, control2_x: float32, control2_y: float32, to_x: float32, to_y: float32, user_data: pointer): void
global hb_draw_close_path_func_t: type <cimport,nodecl> = @function(dfuncs: *hb_draw_funcs_t, draw_data: pointer, st: *hb_draw_state_t, user_data: pointer): void
global hb_font_t: type <cimport,nodecl,forwarddecl> = @record{}
global hb_font_funcs_t: type <cimport,nodecl,forwarddecl> = @record{}
global hb_font_extents_t: type <cimport,nodecl> = @record{
  ascender: hb_position_t,
  descender: hb_position_t,
  line_gap: hb_position_t,
  reserved9: hb_position_t,
  reserved8: hb_position_t,
  reserved7: hb_position_t,
  reserved6: hb_position_t,
  reserved5: hb_position_t,
  reserved4: hb_position_t,
  reserved3: hb_position_t,
  reserved2: hb_position_t,
  reserved1: hb_position_t
}
global hb_glyph_extents_t: type <cimport,nodecl> = @record{
  x_bearing: hb_position_t,
  y_bearing: hb_position_t,
  width: hb_position_t,
  height: hb_position_t
}
global hb_font_get_font_extents_func_t: type <cimport,nodecl> = @function(font: *hb_font_t, font_data: pointer, extents: *hb_font_extents_t, user_data: pointer): hb_bool_t
global hb_font_get_font_h_extents_func_t: type <cimport,nodecl> = @hb_font_get_font_extents_func_t
global hb_font_get_font_v_extents_func_t: type <cimport,nodecl> = @hb_font_get_font_extents_func_t
global hb_font_get_nominal_glyph_func_t: type <cimport,nodecl> = @function(font: *hb_font_t, font_data: pointer, unicode: hb_codepoint_t, glyph: *hb_codepoint_t, user_data: pointer): hb_bool_t
global hb_font_get_variation_glyph_func_t: type <cimport,nodecl> = @function(font: *hb_font_t, font_data: pointer, unicode: hb_codepoint_t, variation_selector: hb_codepoint_t, glyph: *hb_codepoint_t, user_data: pointer): hb_bool_t
global hb_font_get_nominal_glyphs_func_t: type <cimport,nodecl> = @function(font: *hb_font_t, font_data: pointer, count: cuint, first_unicode: *hb_codepoint_t, unicode_stride: cuint, first_glyph: *hb_codepoint_t, glyph_stride: cuint, user_data: pointer): cuint
global hb_font_get_glyph_advance_func_t: type <cimport,nodecl> = @function(font: *hb_font_t, font_data: pointer, glyph: hb_codepoint_t, user_data: pointer): hb_position_t
global hb_font_get_glyph_h_advance_func_t: type <cimport,nodecl> = @hb_font_get_glyph_advance_func_t
global hb_font_get_glyph_v_advance_func_t: type <cimport,nodecl> = @hb_font_get_glyph_advance_func_t
global hb_font_get_glyph_advances_func_t: type <cimport,nodecl> = @function(font: *hb_font_t, font_data: pointer, count: cuint, first_glyph: *hb_codepoint_t, glyph_stride: cuint, first_advance: *hb_position_t, advance_stride: cuint, user_data: pointer): void
global hb_font_get_glyph_h_advances_func_t: type <cimport,nodecl> = @hb_font_get_glyph_advances_func_t
global hb_font_get_glyph_v_advances_func_t: type <cimport,nodecl> = @hb_font_get_glyph_advances_func_t
global hb_font_get_glyph_origin_func_t: type <cimport,nodecl> = @function(font: *hb_font_t, font_data: pointer, glyph: hb_codepoint_t, x: *hb_position_t, y: *hb_position_t, user_data: pointer): hb_bool_t
global hb_font_get_glyph_h_origin_func_t: type <cimport,nodecl> = @hb_font_get_glyph_origin_func_t
global hb_font_get_glyph_v_origin_func_t: type <cimport,nodecl> = @hb_font_get_glyph_origin_func_t
global hb_font_get_glyph_kerning_func_t: type <cimport,nodecl> = @function(font: *hb_font_t, font_data: pointer, first_glyph: hb_codepoint_t, second_glyph: hb_codepoint_t, user_data: pointer): hb_position_t
global hb_font_get_glyph_h_kerning_func_t: type <cimport,nodecl> = @hb_font_get_glyph_kerning_func_t
global hb_font_get_glyph_extents_func_t: type <cimport,nodecl> = @function(font: *hb_font_t, font_data: pointer, glyph: hb_codepoint_t, extents: *hb_glyph_extents_t, user_data: pointer): hb_bool_t
global hb_font_get_glyph_contour_point_func_t: type <cimport,nodecl> = @function(font: *hb_font_t, font_data: pointer, glyph: hb_codepoint_t, point_index: cuint, x: *hb_position_t, y: *hb_position_t, user_data: pointer): hb_bool_t
global hb_font_get_glyph_name_func_t: type <cimport,nodecl> = @function(font: *hb_font_t, font_data: pointer, glyph: hb_codepoint_t, name: cstring, size: cuint, user_data: pointer): hb_bool_t
global hb_font_get_glyph_from_name_func_t: type <cimport,nodecl> = @function(font: *hb_font_t, font_data: pointer, name: cstring, len: cint, glyph: *hb_codepoint_t, user_data: pointer): hb_bool_t
global hb_font_get_glyph_shape_func_t: type <cimport,nodecl> = @function(font: *hb_font_t, font_data: pointer, glyph: hb_codepoint_t, draw_funcs: *hb_draw_funcs_t, draw_data: pointer, user_data: pointer): void
global hb_glyph_info_t: type <cimport,nodecl> = @record{
  codepoint: hb_codepoint_t,
  mask: hb_mask_t,
  cluster: uint32,
  var1: hb_var_int_t,
  var2: hb_var_int_t
}
global hb_glyph_flags_t: type <cimport,nodecl,using> = @enum(cint){
  HB_GLYPH_FLAG_UNSAFE_TO_BREAK = 1,
  HB_GLYPH_FLAG_UNSAFE_TO_CONCAT = 2,
  HB_GLYPH_FLAG_DEFINED = 3
}
global hb_glyph_position_t: type <cimport,nodecl> = @record{
  x_advance: hb_position_t,
  y_advance: hb_position_t,
  x_offset: hb_position_t,
  y_offset: hb_position_t,
  var: hb_var_int_t
}
global hb_segment_properties_t: type <cimport,nodecl> = @record{
  direction: hb_direction_t,
  script: hb_script_t,
  language: hb_language_t,
  reserved1: pointer,
  reserved2: pointer
}
global hb_buffer_t: type <cimport,nodecl,forwarddecl> = @record{}
global hb_buffer_content_type_t: type <cimport,nodecl,using> = @enum(cint){
  HB_BUFFER_CONTENT_TYPE_INVALID = 0,
  HB_BUFFER_CONTENT_TYPE_UNICODE = 1,
  HB_BUFFER_CONTENT_TYPE_GLYPHS = 2
}
global hb_buffer_flags_t: type <cimport,nodecl,using> = @enum(cint){
  HB_BUFFER_FLAG_DEFAULT = 0,
  HB_BUFFER_FLAG_BOT = 1,
  HB_BUFFER_FLAG_EOT = 2,
  HB_BUFFER_FLAG_PRESERVE_DEFAULT_IGNORABLES = 4,
  HB_BUFFER_FLAG_REMOVE_DEFAULT_IGNORABLES = 8,
  HB_BUFFER_FLAG_DO_NOT_INSERT_DOTTED_CIRCLE = 16,
  HB_BUFFER_FLAG_VERIFY = 32,
  HB_BUFFER_FLAG_PRODUCE_UNSAFE_TO_CONCAT = 64
}
global hb_buffer_cluster_level_t: type <cimport,nodecl,using> = @enum(cint){
  HB_BUFFER_CLUSTER_LEVEL_MONOTONE_GRAPHEMES = 0,
  HB_BUFFER_CLUSTER_LEVEL_MONOTONE_CHARACTERS = 1,
  HB_BUFFER_CLUSTER_LEVEL_CHARACTERS = 2,
  HB_BUFFER_CLUSTER_LEVEL_DEFAULT = 0
}
global hb_buffer_serialize_flags_t: type <cimport,nodecl,using> = @enum(cint){
  HB_BUFFER_SERIALIZE_FLAG_DEFAULT = 0,
  HB_BUFFER_SERIALIZE_FLAG_NO_CLUSTERS = 1,
  HB_BUFFER_SERIALIZE_FLAG_NO_POSITIONS = 2,
  HB_BUFFER_SERIALIZE_FLAG_NO_GLYPH_NAMES = 4,
  HB_BUFFER_SERIALIZE_FLAG_GLYPH_EXTENTS = 8,
  HB_BUFFER_SERIALIZE_FLAG_GLYPH_FLAGS = 16,
  HB_BUFFER_SERIALIZE_FLAG_NO_ADVANCES = 32
}
global hb_buffer_serialize_format_t: type = @cint
global HB_BUFFER_SERIALIZE_FORMAT_TEXT: cint <cimport,nodecl,const>
global HB_BUFFER_SERIALIZE_FORMAT_JSON: cint <cimport,nodecl,const>
global HB_BUFFER_SERIALIZE_FORMAT_INVALID: cint <cimport,nodecl,const>
global hb_buffer_diff_flags_t: type <cimport,nodecl,using> = @enum(cint){
  HB_BUFFER_DIFF_FLAG_EQUAL = 0,
  HB_BUFFER_DIFF_FLAG_CONTENT_TYPE_MISMATCH = 1,
  HB_BUFFER_DIFF_FLAG_LENGTH_MISMATCH = 2,
  HB_BUFFER_DIFF_FLAG_NOTDEF_PRESENT = 4,
  HB_BUFFER_DIFF_FLAG_DOTTED_CIRCLE_PRESENT = 8,
  HB_BUFFER_DIFF_FLAG_CODEPOINT_MISMATCH = 16,
  HB_BUFFER_DIFF_FLAG_CLUSTER_MISMATCH = 32,
  HB_BUFFER_DIFF_FLAG_GLYPH_FLAGS_MISMATCH = 64,
  HB_BUFFER_DIFF_FLAG_POSITION_MISMATCH = 128
}
global hb_buffer_message_func_t: type <cimport,nodecl> = @function(buffer: *hb_buffer_t, font: *hb_font_t, message: cstring, user_data: pointer): hb_bool_t
global hb_font_get_glyph_func_t: type <cimport,nodecl> = @function(font: *hb_font_t, font_data: pointer, unicode: hb_codepoint_t, variation_selector: hb_codepoint_t, glyph: *hb_codepoint_t, user_data: pointer): hb_bool_t
global hb_unicode_eastasian_width_func_t: type <cimport,nodecl> = @function(ufuncs: *hb_unicode_funcs_t, unicode: hb_codepoint_t, user_data: pointer): cuint
global hb_unicode_decompose_compatibility_func_t: type <cimport,nodecl> = @function(ufuncs: *hb_unicode_funcs_t, u: hb_codepoint_t, decomposed: *hb_codepoint_t, user_data: pointer): cuint
global hb_font_get_glyph_v_kerning_func_t: type <cimport,nodecl> = @hb_font_get_glyph_kerning_func_t
global hb_map_t: type <cimport,nodecl,forwarddecl> = @record{}
global hb_shape_plan_t: type <cimport,nodecl,forwarddecl> = @record{}
global hb_style_tag_t: type = @cint
global HB_STYLE_TAG_ITALIC: cint <cimport,nodecl,const>
global HB_STYLE_TAG_OPTICAL_SIZE: cint <cimport,nodecl,const>
global HB_STYLE_TAG_SLANT_ANGLE: cint <cimport,nodecl,const>
global HB_STYLE_TAG_SLANT_RATIO: cint <cimport,nodecl,const>
global HB_STYLE_TAG_WIDTH: cint <cimport,nodecl,const>
global HB_STYLE_TAG_WEIGHT: cint <cimport,nodecl,const>
global _HB_STYLE_TAG_MAX_VALUE: cint <cimport,nodecl,const>
global PangoCoverage: type <cimport,nodecl,forwarddecl> = @record{}
global PangoCoverageLevel: type <cimport,nodecl,using> = @enum(cint){
  PANGO_COVERAGE_NONE = 0,
  PANGO_COVERAGE_FALLBACK = 1,
  PANGO_COVERAGE_APPROXIMATE = 2,
  PANGO_COVERAGE_EXACT = 3
}
global PangoCoverage_autoptr: type <cimport,nodecl> = @*PangoCoverage
global PangoCoverage_listautoptr: type <cimport,nodecl> = @*GList
global PangoCoverage_slistautoptr: type <cimport,nodecl> = @*GSList
global PangoCoverage_queueautoptr: type <cimport,nodecl> = @*GQueue
global PangoLogAttr: type <cimport,nodecl,forwarddecl> = @record{}
global PangoEngineLang: type <cimport,nodecl,forwarddecl> = @record{}
global PangoEngineShape: type <cimport,nodecl,forwarddecl> = @record{}
global PangoFont: type <cimport,nodecl,forwarddecl> = @record{}
global PangoFontMap: type <cimport,nodecl,forwarddecl> = @record{}
global PangoRectangle: type <cimport,nodecl,forwarddecl> = @record{}
global PangoContext: type <cimport,nodecl,forwarddecl> = @record{}
global PangoLanguage: type <cimport,nodecl,forwarddecl> = @record{}
global PangoGlyph: type <cimport,nodecl> = @guint32
PangoRectangle = @record{
  x: cint,
  y: cint,
  width: cint,
  height: cint
}
global PangoGravity: type <cimport,nodecl,using> = @enum(cint){
  PANGO_GRAVITY_SOUTH = 0,
  PANGO_GRAVITY_EAST = 1,
  PANGO_GRAVITY_NORTH = 2,
  PANGO_GRAVITY_WEST = 3,
  PANGO_GRAVITY_AUTO = 4
}
global PangoGravityHint: type <cimport,nodecl,using> = @enum(cint){
  PANGO_GRAVITY_HINT_NATURAL = 0,
  PANGO_GRAVITY_HINT_STRONG = 1,
  PANGO_GRAVITY_HINT_LINE = 2
}
global PangoMatrix: type <cimport,nodecl,forwarddecl> = @record{}
PangoMatrix = @record{
  xx: float64,
  xy: float64,
  yx: float64,
  yy: float64,
  x0: float64,
  y0: float64
}
global PangoScriptIter: type <cimport,nodecl,forwarddecl> = @record{}
global PangoScript: type <cimport,nodecl,using> = @enum(cint){
  PANGO_SCRIPT_INVALID_CODE = -1,
  PANGO_SCRIPT_COMMON = 0,
  PANGO_SCRIPT_INHERITED = 1,
  PANGO_SCRIPT_ARABIC = 2,
  PANGO_SCRIPT_ARMENIAN = 3,
  PANGO_SCRIPT_BENGALI = 4,
  PANGO_SCRIPT_BOPOMOFO = 5,
  PANGO_SCRIPT_CHEROKEE = 6,
  PANGO_SCRIPT_COPTIC = 7,
  PANGO_SCRIPT_CYRILLIC = 8,
  PANGO_SCRIPT_DESERET = 9,
  PANGO_SCRIPT_DEVANAGARI = 10,
  PANGO_SCRIPT_ETHIOPIC = 11,
  PANGO_SCRIPT_GEORGIAN = 12,
  PANGO_SCRIPT_GOTHIC = 13,
  PANGO_SCRIPT_GREEK = 14,
  PANGO_SCRIPT_GUJARATI = 15,
  PANGO_SCRIPT_GURMUKHI = 16,
  PANGO_SCRIPT_HAN = 17,
  PANGO_SCRIPT_HANGUL = 18,
  PANGO_SCRIPT_HEBREW = 19,
  PANGO_SCRIPT_HIRAGANA = 20,
  PANGO_SCRIPT_KANNADA = 21,
  PANGO_SCRIPT_KATAKANA = 22,
  PANGO_SCRIPT_KHMER = 23,
  PANGO_SCRIPT_LAO = 24,
  PANGO_SCRIPT_LATIN = 25,
  PANGO_SCRIPT_MALAYALAM = 26,
  PANGO_SCRIPT_MONGOLIAN = 27,
  PANGO_SCRIPT_MYANMAR = 28,
  PANGO_SCRIPT_OGHAM = 29,
  PANGO_SCRIPT_OLD_ITALIC = 30,
  PANGO_SCRIPT_ORIYA = 31,
  PANGO_SCRIPT_RUNIC = 32,
  PANGO_SCRIPT_SINHALA = 33,
  PANGO_SCRIPT_SYRIAC = 34,
  PANGO_SCRIPT_TAMIL = 35,
  PANGO_SCRIPT_TELUGU = 36,
  PANGO_SCRIPT_THAANA = 37,
  PANGO_SCRIPT_THAI = 38,
  PANGO_SCRIPT_TIBETAN = 39,
  PANGO_SCRIPT_CANADIAN_ABORIGINAL = 40,
  PANGO_SCRIPT_YI = 41,
  PANGO_SCRIPT_TAGALOG = 42,
  PANGO_SCRIPT_HANUNOO = 43,
  PANGO_SCRIPT_BUHID = 44,
  PANGO_SCRIPT_TAGBANWA = 45,
  PANGO_SCRIPT_BRAILLE = 46,
  PANGO_SCRIPT_CYPRIOT = 47,
  PANGO_SCRIPT_LIMBU = 48,
  PANGO_SCRIPT_OSMANYA = 49,
  PANGO_SCRIPT_SHAVIAN = 50,
  PANGO_SCRIPT_LINEAR_B = 51,
  PANGO_SCRIPT_TAI_LE = 52,
  PANGO_SCRIPT_UGARITIC = 53,
  PANGO_SCRIPT_NEW_TAI_LUE = 54,
  PANGO_SCRIPT_BUGINESE = 55,
  PANGO_SCRIPT_GLAGOLITIC = 56,
  PANGO_SCRIPT_TIFINAGH = 57,
  PANGO_SCRIPT_SYLOTI_NAGRI = 58,
  PANGO_SCRIPT_OLD_PERSIAN = 59,
  PANGO_SCRIPT_KHAROSHTHI = 60,
  PANGO_SCRIPT_UNKNOWN = 61,
  PANGO_SCRIPT_BALINESE = 62,
  PANGO_SCRIPT_CUNEIFORM = 63,
  PANGO_SCRIPT_PHOENICIAN = 64,
  PANGO_SCRIPT_PHAGS_PA = 65,
  PANGO_SCRIPT_NKO = 66,
  PANGO_SCRIPT_KAYAH_LI = 67,
  PANGO_SCRIPT_LEPCHA = 68,
  PANGO_SCRIPT_REJANG = 69,
  PANGO_SCRIPT_SUNDANESE = 70,
  PANGO_SCRIPT_SAURASHTRA = 71,
  PANGO_SCRIPT_CHAM = 72,
  PANGO_SCRIPT_OL_CHIKI = 73,
  PANGO_SCRIPT_VAI = 74,
  PANGO_SCRIPT_CARIAN = 75,
  PANGO_SCRIPT_LYCIAN = 76,
  PANGO_SCRIPT_LYDIAN = 77,
  PANGO_SCRIPT_BATAK = 78,
  PANGO_SCRIPT_BRAHMI = 79,
  PANGO_SCRIPT_MANDAIC = 80,
  PANGO_SCRIPT_CHAKMA = 81,
  PANGO_SCRIPT_MEROITIC_CURSIVE = 82,
  PANGO_SCRIPT_MEROITIC_HIEROGLYPHS = 83,
  PANGO_SCRIPT_MIAO = 84,
  PANGO_SCRIPT_SHARADA = 85,
  PANGO_SCRIPT_SORA_SOMPENG = 86,
  PANGO_SCRIPT_TAKRI = 87,
  PANGO_SCRIPT_BASSA_VAH = 88,
  PANGO_SCRIPT_CAUCASIAN_ALBANIAN = 89,
  PANGO_SCRIPT_DUPLOYAN = 90,
  PANGO_SCRIPT_ELBASAN = 91,
  PANGO_SCRIPT_GRANTHA = 92,
  PANGO_SCRIPT_KHOJKI = 93,
  PANGO_SCRIPT_KHUDAWADI = 94,
  PANGO_SCRIPT_LINEAR_A = 95,
  PANGO_SCRIPT_MAHAJANI = 96,
  PANGO_SCRIPT_MANICHAEAN = 97,
  PANGO_SCRIPT_MENDE_KIKAKUI = 98,
  PANGO_SCRIPT_MODI = 99,
  PANGO_SCRIPT_MRO = 100,
  PANGO_SCRIPT_NABATAEAN = 101,
  PANGO_SCRIPT_OLD_NORTH_ARABIAN = 102,
  PANGO_SCRIPT_OLD_PERMIC = 103,
  PANGO_SCRIPT_PAHAWH_HMONG = 104,
  PANGO_SCRIPT_PALMYRENE = 105,
  PANGO_SCRIPT_PAU_CIN_HAU = 106,
  PANGO_SCRIPT_PSALTER_PAHLAVI = 107,
  PANGO_SCRIPT_SIDDHAM = 108,
  PANGO_SCRIPT_TIRHUTA = 109,
  PANGO_SCRIPT_WARANG_CITI = 110,
  PANGO_SCRIPT_AHOM = 111,
  PANGO_SCRIPT_ANATOLIAN_HIEROGLYPHS = 112,
  PANGO_SCRIPT_HATRAN = 113,
  PANGO_SCRIPT_MULTANI = 114,
  PANGO_SCRIPT_OLD_HUNGARIAN = 115,
  PANGO_SCRIPT_SIGNWRITING = 116
}
global PangoDirection: type <cimport,nodecl,using> = @enum(cint){
  PANGO_DIRECTION_LTR = 0,
  PANGO_DIRECTION_RTL = 1,
  PANGO_DIRECTION_TTB_LTR = 2,
  PANGO_DIRECTION_TTB_RTL = 3,
  PANGO_DIRECTION_WEAK_LTR = 4,
  PANGO_DIRECTION_WEAK_RTL = 5,
  PANGO_DIRECTION_NEUTRAL = 6
}
global PangoBidiType: type <cimport,nodecl,using> = @enum(cint){
  PANGO_BIDI_TYPE_L = 0,
  PANGO_BIDI_TYPE_LRE = 1,
  PANGO_BIDI_TYPE_LRO = 2,
  PANGO_BIDI_TYPE_R = 3,
  PANGO_BIDI_TYPE_AL = 4,
  PANGO_BIDI_TYPE_RLE = 5,
  PANGO_BIDI_TYPE_RLO = 6,
  PANGO_BIDI_TYPE_PDF = 7,
  PANGO_BIDI_TYPE_EN = 8,
  PANGO_BIDI_TYPE_ES = 9,
  PANGO_BIDI_TYPE_ET = 10,
  PANGO_BIDI_TYPE_AN = 11,
  PANGO_BIDI_TYPE_CS = 12,
  PANGO_BIDI_TYPE_NSM = 13,
  PANGO_BIDI_TYPE_BN = 14,
  PANGO_BIDI_TYPE_B = 15,
  PANGO_BIDI_TYPE_S = 16,
  PANGO_BIDI_TYPE_WS = 17,
  PANGO_BIDI_TYPE_ON = 18,
  PANGO_BIDI_TYPE_LRI = 19,
  PANGO_BIDI_TYPE_RLI = 20,
  PANGO_BIDI_TYPE_FSI = 21,
  PANGO_BIDI_TYPE_PDI = 22
}
global PangoFontDescription: type <cimport,nodecl,forwarddecl> = @record{}
global PangoFontMetrics: type <cimport,nodecl,forwarddecl> = @record{}
global PangoStyle: type <cimport,nodecl,using> = @enum(cint){
  PANGO_STYLE_NORMAL = 0,
  PANGO_STYLE_OBLIQUE = 1,
  PANGO_STYLE_ITALIC = 2
}
global PangoVariant: type <cimport,nodecl,using> = @enum(cint){
  PANGO_VARIANT_NORMAL = 0,
  PANGO_VARIANT_SMALL_CAPS = 1,
  PANGO_VARIANT_ALL_SMALL_CAPS = 2,
  PANGO_VARIANT_PETITE_CAPS = 3,
  PANGO_VARIANT_ALL_PETITE_CAPS = 4,
  PANGO_VARIANT_UNICASE = 5,
  PANGO_VARIANT_TITLE_CAPS = 6
}
global PangoWeight: type <cimport,nodecl,using> = @enum(cint){
  PANGO_WEIGHT_THIN = 100,
  PANGO_WEIGHT_ULTRALIGHT = 200,
  PANGO_WEIGHT_LIGHT = 300,
  PANGO_WEIGHT_SEMILIGHT = 350,
  PANGO_WEIGHT_BOOK = 380,
  PANGO_WEIGHT_NORMAL = 400,
  PANGO_WEIGHT_MEDIUM = 500,
  PANGO_WEIGHT_SEMIBOLD = 600,
  PANGO_WEIGHT_BOLD = 700,
  PANGO_WEIGHT_ULTRABOLD = 800,
  PANGO_WEIGHT_HEAVY = 900,
  PANGO_WEIGHT_ULTRAHEAVY = 1000
}
global PangoStretch: type <cimport,nodecl,using> = @enum(cint){
  PANGO_STRETCH_ULTRA_CONDENSED = 0,
  PANGO_STRETCH_EXTRA_CONDENSED = 1,
  PANGO_STRETCH_CONDENSED = 2,
  PANGO_STRETCH_SEMI_CONDENSED = 3,
  PANGO_STRETCH_NORMAL = 4,
  PANGO_STRETCH_SEMI_EXPANDED = 5,
  PANGO_STRETCH_EXPANDED = 6,
  PANGO_STRETCH_EXTRA_EXPANDED = 7,
  PANGO_STRETCH_ULTRA_EXPANDED = 8
}
global PangoFontMask: type <cimport,nodecl,using> = @enum(cint){
  PANGO_FONT_MASK_FAMILY = 1,
  PANGO_FONT_MASK_STYLE = 2,
  PANGO_FONT_MASK_VARIANT = 4,
  PANGO_FONT_MASK_WEIGHT = 8,
  PANGO_FONT_MASK_STRETCH = 16,
  PANGO_FONT_MASK_SIZE = 32,
  PANGO_FONT_MASK_GRAVITY = 64,
  PANGO_FONT_MASK_VARIATIONS = 128
}
PangoFontMetrics = @record{
  ref_count: guint,
  ascent: cint,
  descent: cint,
  height: cint,
  approximate_char_width: cint,
  approximate_digit_width: cint,
  underline_position: cint,
  underline_thickness: cint,
  strikethrough_position: cint,
  strikethrough_thickness: cint
}
global PangoFontFace: type <cimport,nodecl,forwarddecl> = @record{}
global PangoFontFamily: type <cimport,nodecl,forwarddecl> = @record{}
global PangoFontFamilyClass: type <cimport,nodecl,forwarddecl> = @record{}
PangoFontFamily = @record{
  parent_instance: GObject
}
PangoFontFamilyClass = @record{
  parent_class: GObjectClass,
  list_faces: function(family: *PangoFontFamily, faces: ***PangoFontFace, n_faces: *cint): void,
  get_name: function(family: *PangoFontFamily): cstring,
  is_monospace: function(family: *PangoFontFamily): gboolean,
  is_variable: function(family: *PangoFontFamily): gboolean,
  get_face: function(family: *PangoFontFamily, name: cstring): *PangoFontFace,
  _pango_reserved2: function(): void
}
global PangoFontFaceClass: type <cimport,nodecl,forwarddecl> = @record{}
PangoFontFace = @record{
  parent_instance: GObject
}
PangoFontFaceClass = @record{
  parent_class: GObjectClass,
  get_face_name: function(face: *PangoFontFace): cstring,
  describe: function(face: *PangoFontFace): *PangoFontDescription,
  list_sizes: function(face: *PangoFontFace, sizes: **cint, n_sizes: *cint): void,
  is_synthesized: function(face: *PangoFontFace): gboolean,
  get_family: function(face: *PangoFontFace): *PangoFontFamily,
  _pango_reserved3: function(): void,
  _pango_reserved4: function(): void
}
PangoFont = @record{
  parent_instance: GObject
}
global PangoFontClass: type <cimport,nodecl,forwarddecl> = @record{}
PangoFontClass = @record{
  parent_class: GObjectClass,
  describe: function(font: *PangoFont): *PangoFontDescription,
  get_coverage: function(font: *PangoFont, language: *PangoLanguage): *PangoCoverage,
  get_glyph_extents: function(font: *PangoFont, glyph: PangoGlyph, ink_rect: *PangoRectangle, logical_rect: *PangoRectangle): void,
  get_metrics: function(font: *PangoFont, language: *PangoLanguage): *PangoFontMetrics,
  get_font_map: function(font: *PangoFont): *PangoFontMap,
  describe_absolute: function(font: *PangoFont): *PangoFontDescription,
  get_features: function(font: *PangoFont, features: *hb_feature_t, len: guint, num_features: *guint): void,
  create_hb_font: function(font: *PangoFont): *hb_font_t
}
global PangoFontFamily_autoptr: type <cimport,nodecl> = @*PangoFontFamily
global PangoFontFamily_listautoptr: type <cimport,nodecl> = @*GList
global PangoFontFamily_slistautoptr: type <cimport,nodecl> = @*GSList
global PangoFontFamily_queueautoptr: type <cimport,nodecl> = @*GQueue
global PangoFontFace_autoptr: type <cimport,nodecl> = @*PangoFontFace
global PangoFontFace_listautoptr: type <cimport,nodecl> = @*GList
global PangoFontFace_slistautoptr: type <cimport,nodecl> = @*GSList
global PangoFontFace_queueautoptr: type <cimport,nodecl> = @*GQueue
global PangoFont_autoptr: type <cimport,nodecl> = @*PangoFont
global PangoFont_listautoptr: type <cimport,nodecl> = @*GList
global PangoFont_slistautoptr: type <cimport,nodecl> = @*GSList
global PangoFont_queueautoptr: type <cimport,nodecl> = @*GQueue
global PangoFontDescription_autoptr: type <cimport,nodecl> = @*PangoFontDescription
global PangoFontDescription_listautoptr: type <cimport,nodecl> = @*GList
global PangoFontDescription_slistautoptr: type <cimport,nodecl> = @*GSList
global PangoFontDescription_queueautoptr: type <cimport,nodecl> = @*GQueue
global PangoColor: type <cimport,nodecl,forwarddecl> = @record{}
PangoColor = @record{
  red: guint16,
  green: guint16,
  blue: guint16
}
global PangoAttribute: type <cimport,nodecl,forwarddecl> = @record{}
global PangoAttrClass: type <cimport,nodecl,forwarddecl> = @record{}
global PangoAttrString: type <cimport,nodecl,forwarddecl> = @record{}
global PangoAttrLanguage: type <cimport,nodecl,forwarddecl> = @record{}
global PangoAttrInt: type <cimport,nodecl,forwarddecl> = @record{}
global PangoAttrSize: type <cimport,nodecl,forwarddecl> = @record{}
global PangoAttrFloat: type <cimport,nodecl,forwarddecl> = @record{}
global PangoAttrColor: type <cimport,nodecl,forwarddecl> = @record{}
global PangoAttrFontDesc: type <cimport,nodecl,forwarddecl> = @record{}
global PangoAttrShape: type <cimport,nodecl,forwarddecl> = @record{}
global PangoAttrFontFeatures: type <cimport,nodecl,forwarddecl> = @record{}
global PangoAttrType: type <cimport,nodecl,using> = @enum(cint){
  PANGO_ATTR_INVALID = 0,
  PANGO_ATTR_LANGUAGE = 1,
  PANGO_ATTR_FAMILY = 2,
  PANGO_ATTR_STYLE = 3,
  PANGO_ATTR_WEIGHT = 4,
  PANGO_ATTR_VARIANT = 5,
  PANGO_ATTR_STRETCH = 6,
  PANGO_ATTR_SIZE = 7,
  PANGO_ATTR_FONT_DESC = 8,
  PANGO_ATTR_FOREGROUND = 9,
  PANGO_ATTR_BACKGROUND = 10,
  PANGO_ATTR_UNDERLINE = 11,
  PANGO_ATTR_STRIKETHROUGH = 12,
  PANGO_ATTR_RISE = 13,
  PANGO_ATTR_SHAPE = 14,
  PANGO_ATTR_SCALE = 15,
  PANGO_ATTR_FALLBACK = 16,
  PANGO_ATTR_LETTER_SPACING = 17,
  PANGO_ATTR_UNDERLINE_COLOR = 18,
  PANGO_ATTR_STRIKETHROUGH_COLOR = 19,
  PANGO_ATTR_ABSOLUTE_SIZE = 20,
  PANGO_ATTR_GRAVITY = 21,
  PANGO_ATTR_GRAVITY_HINT = 22,
  PANGO_ATTR_FONT_FEATURES = 23,
  PANGO_ATTR_FOREGROUND_ALPHA = 24,
  PANGO_ATTR_BACKGROUND_ALPHA = 25,
  PANGO_ATTR_ALLOW_BREAKS = 26,
  PANGO_ATTR_SHOW = 27,
  PANGO_ATTR_INSERT_HYPHENS = 28,
  PANGO_ATTR_OVERLINE = 29,
  PANGO_ATTR_OVERLINE_COLOR = 30,
  PANGO_ATTR_LINE_HEIGHT = 31,
  PANGO_ATTR_ABSOLUTE_LINE_HEIGHT = 32,
  PANGO_ATTR_TEXT_TRANSFORM = 33,
  PANGO_ATTR_WORD = 34,
  PANGO_ATTR_SENTENCE = 35,
  PANGO_ATTR_BASELINE_SHIFT = 36,
  PANGO_ATTR_FONT_SCALE = 37
}
global PangoUnderline: type <cimport,nodecl,using> = @enum(cint){
  PANGO_UNDERLINE_NONE = 0,
  PANGO_UNDERLINE_SINGLE = 1,
  PANGO_UNDERLINE_DOUBLE = 2,
  PANGO_UNDERLINE_LOW = 3,
  PANGO_UNDERLINE_ERROR = 4,
  PANGO_UNDERLINE_SINGLE_LINE = 5,
  PANGO_UNDERLINE_DOUBLE_LINE = 6,
  PANGO_UNDERLINE_ERROR_LINE = 7
}
global PangoOverline: type <cimport,nodecl,using> = @enum(cint){
  PANGO_OVERLINE_NONE = 0,
  PANGO_OVERLINE_SINGLE = 1
}
global PangoShowFlags: type <cimport,nodecl,using> = @enum(cint){
  PANGO_SHOW_NONE = 0,
  PANGO_SHOW_SPACES = 1,
  PANGO_SHOW_LINE_BREAKS = 2,
  PANGO_SHOW_IGNORABLES = 4
}
global PangoTextTransform: type <cimport,nodecl,using> = @enum(cint){
  PANGO_TEXT_TRANSFORM_NONE = 0,
  PANGO_TEXT_TRANSFORM_LOWERCASE = 1,
  PANGO_TEXT_TRANSFORM_UPPERCASE = 2,
  PANGO_TEXT_TRANSFORM_CAPITALIZE = 3
}
global PangoBaselineShift: type <cimport,nodecl,using> = @enum(cint){
  PANGO_BASELINE_SHIFT_NONE = 0,
  PANGO_BASELINE_SHIFT_SUPERSCRIPT = 1,
  PANGO_BASELINE_SHIFT_SUBSCRIPT = 2
}
global PangoFontScale: type <cimport,nodecl,using> = @enum(cint){
  PANGO_FONT_SCALE_NONE = 0,
  PANGO_FONT_SCALE_SUPERSCRIPT = 1,
  PANGO_FONT_SCALE_SUBSCRIPT = 2,
  PANGO_FONT_SCALE_SMALL_CAPS = 3
}
PangoAttribute = @record{
  klass: *PangoAttrClass,
  start_index: guint,
  end_index: guint
}
global PangoAttrFilterFunc: type <cimport,nodecl> = @function(attribute: *PangoAttribute, user_data: gpointer): gboolean
global PangoAttrDataCopyFunc: type <cimport,nodecl> = @function(user_data: gconstpointer): gpointer
PangoAttrClass = @record{
  type: PangoAttrType,
  copy: function(attr: *PangoAttribute): *PangoAttribute,
  destroy: function(attr: *PangoAttribute): void,
  equal: function(attr1: *PangoAttribute, attr2: *PangoAttribute): gboolean
}
PangoAttrString = @record{
  attr: PangoAttribute,
  value: cstring
}
PangoAttrLanguage = @record{
  attr: PangoAttribute,
  value: *PangoLanguage
}
PangoAttrInt = @record{
  attr: PangoAttribute,
  value: cint
}
PangoAttrFloat = @record{
  attr: PangoAttribute,
  value: float64
}
PangoAttrColor = @record{
  attr: PangoAttribute,
  color: PangoColor
}
PangoAttrSize = @record{
  attr: PangoAttribute,
  size: cint,
  absolute: guint
}
PangoAttrShape = @record{
  attr: PangoAttribute,
  ink_rect: PangoRectangle,
  logical_rect: PangoRectangle,
  data: gpointer,
  copy_func: PangoAttrDataCopyFunc,
  destroy_func: GDestroyNotify
}
PangoAttrFontDesc = @record{
  attr: PangoAttribute,
  desc: *PangoFontDescription
}
PangoAttrFontFeatures = @record{
  attr: PangoAttribute,
  features: *gchar
}
global PangoAttrList: type <cimport,nodecl,forwarddecl> = @record{}
global PangoAttrIterator: type <cimport,nodecl,forwarddecl> = @record{}
global PangoAttribute_autoptr: type <cimport,nodecl> = @*PangoAttribute
global PangoAttribute_listautoptr: type <cimport,nodecl> = @*GList
global PangoAttribute_slistautoptr: type <cimport,nodecl> = @*GSList
global PangoAttribute_queueautoptr: type <cimport,nodecl> = @*GQueue
global PangoAttrList_autoptr: type <cimport,nodecl> = @*PangoAttrList
global PangoAttrList_listautoptr: type <cimport,nodecl> = @*GList
global PangoAttrList_slistautoptr: type <cimport,nodecl> = @*GSList
global PangoAttrList_queueautoptr: type <cimport,nodecl> = @*GQueue
global PangoAttrIterator_autoptr: type <cimport,nodecl> = @*PangoAttrIterator
global PangoAttrIterator_listautoptr: type <cimport,nodecl> = @*GList
global PangoAttrIterator_slistautoptr: type <cimport,nodecl> = @*GSList
global PangoAttrIterator_queueautoptr: type <cimport,nodecl> = @*GQueue
global PangoAnalysis: type <cimport,nodecl,forwarddecl> = @record{}
global PangoItem: type <cimport,nodecl,forwarddecl> = @record{}
PangoAnalysis = @record{
  shape_engine: *PangoEngineShape,
  lang_engine: *PangoEngineLang,
  font: *PangoFont,
  level: guint8,
  gravity: guint8,
  flags: guint8,
  script: guint8,
  language: *PangoLanguage,
  extra_attrs: *GSList
}
PangoItem = @record{
  offset: cint,
  length: cint,
  num_chars: cint,
  analysis: PangoAnalysis
}
PangoLogAttr = @record{
  is_line_break: guint,
  is_mandatory_break: guint,
  is_char_break: guint,
  is_white: guint,
  is_cursor_position: guint,
  is_word_start: guint,
  is_word_end: guint,
  is_sentence_boundary: guint,
  is_sentence_start: guint,
  is_sentence_end: guint,
  backspace_deletes_character: guint,
  is_expandable_space: guint,
  is_word_boundary: guint,
  break_inserts_hyphen: guint,
  break_removes_preceding: guint,
  reserved: guint
}
global PangoFontset: type <cimport,nodecl,forwarddecl> = @record{}
global PangoFontsetClass: type <cimport,nodecl,forwarddecl> = @record{}
global PangoFontsetForeachFunc: type <cimport,nodecl> = @function(fontset: *PangoFontset, font: *PangoFont, user_data: gpointer): gboolean
PangoFontset = @record{
  parent_instance: GObject
}
PangoFontsetClass = @record{
  parent_class: GObjectClass,
  get_font: function(fontset: *PangoFontset, wc: guint): *PangoFont,
  get_metrics: function(fontset: *PangoFontset): *PangoFontMetrics,
  get_language: function(fontset: *PangoFontset): *PangoLanguage,
  foreach: function(fontset: *PangoFontset, func: PangoFontsetForeachFunc, data: gpointer): void,
  _pango_reserved1: function(): void,
  _pango_reserved2: function(): void,
  _pango_reserved3: function(): void,
  _pango_reserved4: function(): void
}
global PangoFontMapClass: type <cimport,nodecl,forwarddecl> = @record{}
PangoFontMap = @record{
  parent_instance: GObject
}
PangoFontMapClass = @record{
  parent_class: GObjectClass,
  load_font: function(fontmap: *PangoFontMap, context: *PangoContext, desc: *PangoFontDescription): *PangoFont,
  list_families: function(fontmap: *PangoFontMap, families: ***PangoFontFamily, n_families: *cint): void,
  load_fontset: function(fontmap: *PangoFontMap, context: *PangoContext, desc: *PangoFontDescription, language: *PangoLanguage): *PangoFontset,
  shape_engine_type: cstring,
  get_serial: function(fontmap: *PangoFontMap): guint,
  changed: function(fontmap: *PangoFontMap): void,
  get_family: function(fontmap: *PangoFontMap, name: cstring): *PangoFontFamily,
  get_face: function(fontmap: *PangoFontMap, font: *PangoFont): *PangoFontFace
}
global PangoFontMap_autoptr: type <cimport,nodecl> = @*PangoFontMap
global PangoFontMap_listautoptr: type <cimport,nodecl> = @*GList
global PangoFontMap_slistautoptr: type <cimport,nodecl> = @*GSList
global PangoFontMap_queueautoptr: type <cimport,nodecl> = @*GQueue
global PangoContextClass: type <cimport,nodecl,forwarddecl> = @record{}
global PangoGlyphGeometry: type <cimport,nodecl,forwarddecl> = @record{}
global PangoGlyphVisAttr: type <cimport,nodecl,forwarddecl> = @record{}
global PangoGlyphInfo: type <cimport,nodecl,forwarddecl> = @record{}
global PangoGlyphString: type <cimport,nodecl,forwarddecl> = @record{}
global PangoGlyphUnit: type <cimport,nodecl> = @gint32
PangoGlyphGeometry = @record{
  width: PangoGlyphUnit,
  x_offset: PangoGlyphUnit,
  y_offset: PangoGlyphUnit
}
PangoGlyphVisAttr = @record{
  is_cluster_start: guint,
  is_color: guint
}
PangoGlyphInfo = @record{
  glyph: PangoGlyph,
  geometry: PangoGlyphGeometry,
  attr: PangoGlyphVisAttr
}
PangoGlyphString = @record{
  num_glyphs: cint,
  glyphs: *PangoGlyphInfo,
  log_clusters: *cint,
  space: cint
}
global PangoShapeFlags: type <cimport,nodecl,using> = @enum(cint){
  PANGO_SHAPE_NONE = 0,
  PANGO_SHAPE_ROUND_POSITIONS = 1
}
global PangoEngine: type <cimport,nodecl,forwarddecl> = @record{}
global PangoEngineClass: type <cimport,nodecl,forwarddecl> = @record{}
PangoEngine = @record{
  parent_instance: GObject
}
PangoEngineClass = @record{
  parent_class: GObjectClass
}
global PangoEngineLangClass: type <cimport,nodecl,forwarddecl> = @record{}
PangoEngineLang = @record{
  parent_instance: PangoEngine
}
PangoEngineLangClass = @record{
  parent_class: PangoEngineClass,
  script_break: function(engine: *PangoEngineLang, text: cstring, len: cint, analysis: *PangoAnalysis, attrs: *PangoLogAttr, attrs_len: cint): void
}
global PangoEngineShapeClass: type <cimport,nodecl,forwarddecl> = @record{}
PangoEngineShape = @record{
  parent_instance: PangoEngine
}
PangoEngineShapeClass = @record{
  parent_class: PangoEngineClass,
  script_shape: function(engine: *PangoEngineShape, font: *PangoFont, item_text: cstring, item_length: cuint, analysis: *PangoAnalysis, glyphs: *PangoGlyphString, paragraph_text: cstring, paragraph_length: cuint): void,
  covers: function(engine: *PangoEngineShape, font: *PangoFont, language: *PangoLanguage, wc: gunichar): PangoCoverageLevel
}
global PangoEngineInfo: type <cimport,nodecl,forwarddecl> = @record{}
global PangoEngineScriptInfo: type <cimport,nodecl,forwarddecl> = @record{}
PangoEngineScriptInfo = @record{
  script: PangoScript,
  langs: *gchar
}
PangoEngineInfo = @record{
  id: *gchar,
  engine_type: *gchar,
  render_type: *gchar,
  scripts: *PangoEngineScriptInfo,
  n_scripts: gint
}
global PangoFontsetSimple: type <cimport,nodecl,forwarddecl> = @record{}
global PangoFontsetSimpleClass: type <cimport,nodecl,forwarddecl> = @record{}
global PangoGlyphItem: type <cimport,nodecl,forwarddecl> = @record{}
PangoGlyphItem = @record{
  item: *PangoItem,
  glyphs: *PangoGlyphString,
  y_offset: cint,
  start_x_offset: cint,
  end_x_offset: cint
}
global PangoGlyphItemIter: type <cimport,nodecl,forwarddecl> = @record{}
PangoGlyphItemIter = @record{
  glyph_item: *PangoGlyphItem,
  text: *gchar,
  start_glyph: cint,
  start_index: cint,
  start_char: cint,
  end_glyph: cint,
  end_index: cint,
  end_char: cint
}
global PangoTabArray: type <cimport,nodecl,forwarddecl> = @record{}
global PangoTabAlign: type <cimport,nodecl,using> = @enum(cint){
  PANGO_TAB_LEFT = 0,
  PANGO_TAB_RIGHT = 1,
  PANGO_TAB_CENTER = 2,
  PANGO_TAB_DECIMAL = 3
}
global PangoTabArray_autoptr: type <cimport,nodecl> = @*PangoTabArray
global PangoTabArray_listautoptr: type <cimport,nodecl> = @*GList
global PangoTabArray_slistautoptr: type <cimport,nodecl> = @*GSList
global PangoTabArray_queueautoptr: type <cimport,nodecl> = @*GQueue
global PangoLayout: type <cimport,nodecl,forwarddecl> = @record{}
global PangoLayoutClass: type <cimport,nodecl,forwarddecl> = @record{}
global PangoLayoutLine: type <cimport,nodecl,forwarddecl> = @record{}
global PangoLayoutRun: type <cimport,nodecl> = @PangoGlyphItem
global PangoAlignment: type <cimport,nodecl,using> = @enum(cint){
  PANGO_ALIGN_LEFT = 0,
  PANGO_ALIGN_CENTER = 1,
  PANGO_ALIGN_RIGHT = 2
}
global PangoWrapMode: type <cimport,nodecl,using> = @enum(cint){
  PANGO_WRAP_WORD = 0,
  PANGO_WRAP_CHAR = 1,
  PANGO_WRAP_WORD_CHAR = 2
}
global PangoEllipsizeMode: type <cimport,nodecl,using> = @enum(cint){
  PANGO_ELLIPSIZE_NONE = 0,
  PANGO_ELLIPSIZE_START = 1,
  PANGO_ELLIPSIZE_MIDDLE = 2,
  PANGO_ELLIPSIZE_END = 3
}
PangoLayoutLine = @record{
  layout: *PangoLayout,
  start_index: gint,
  length: gint,
  runs: *GSList,
  is_paragraph_start: guint,
  resolved_dir: guint
}
global PangoLayoutSerializeFlags: type <cimport,nodecl,using> = @enum(cint){
  PANGO_LAYOUT_SERIALIZE_DEFAULT = 0,
  PANGO_LAYOUT_SERIALIZE_CONTEXT = 1,
  PANGO_LAYOUT_SERIALIZE_OUTPUT = 2
}
global PangoLayoutDeserializeError: type <cimport,nodecl,using> = @enum(cint){
  PANGO_LAYOUT_DESERIALIZE_INVALID = 0,
  PANGO_LAYOUT_DESERIALIZE_INVALID_VALUE = 1,
  PANGO_LAYOUT_DESERIALIZE_MISSING_VALUE = 2
}
global PangoLayoutDeserializeFlags: type <cimport,nodecl,using> = @enum(cint){
  PANGO_LAYOUT_DESERIALIZE_DEFAULT = 0,
  PANGO_LAYOUT_DESERIALIZE_CONTEXT = 1
}
global PangoLayoutIter: type <cimport,nodecl,forwarddecl> = @record{}
global PangoLayout_autoptr: type <cimport,nodecl> = @*PangoLayout
global PangoLayout_listautoptr: type <cimport,nodecl> = @*GList
global PangoLayout_slistautoptr: type <cimport,nodecl> = @*GSList
global PangoLayout_queueautoptr: type <cimport,nodecl> = @*GQueue
global PangoLayoutIter_autoptr: type <cimport,nodecl> = @*PangoLayoutIter
global PangoLayoutIter_listautoptr: type <cimport,nodecl> = @*GList
global PangoLayoutIter_slistautoptr: type <cimport,nodecl> = @*GSList
global PangoLayoutIter_queueautoptr: type <cimport,nodecl> = @*GQueue
global PangoRenderer: type <cimport,nodecl,forwarddecl> = @record{}
global PangoRendererClass: type <cimport,nodecl,forwarddecl> = @record{}
global PangoRendererPrivate: type <cimport,nodecl,forwarddecl> = @record{}
global PangoRenderPart: type <cimport,nodecl,using> = @enum(cint){
  PANGO_RENDER_PART_FOREGROUND = 0,
  PANGO_RENDER_PART_BACKGROUND = 1,
  PANGO_RENDER_PART_UNDERLINE = 2,
  PANGO_RENDER_PART_STRIKETHROUGH = 3,
  PANGO_RENDER_PART_OVERLINE = 4
}
PangoRenderer = @record{
  parent_instance: GObject,
  underline: PangoUnderline,
  strikethrough: gboolean,
  active_count: cint,
  matrix: *PangoMatrix,
  priv: *PangoRendererPrivate
}
PangoRendererClass = @record{
  parent_class: GObjectClass,
  draw_glyphs: function(renderer: *PangoRenderer, font: *PangoFont, glyphs: *PangoGlyphString, x: cint, y: cint): void,
  draw_rectangle: function(renderer: *PangoRenderer, part: PangoRenderPart, x: cint, y: cint, width: cint, height: cint): void,
  draw_error_underline: function(renderer: *PangoRenderer, x: cint, y: cint, width: cint, height: cint): void,
  draw_shape: function(renderer: *PangoRenderer, attr: *PangoAttrShape, x: cint, y: cint): void,
  draw_trapezoid: function(renderer: *PangoRenderer, part: PangoRenderPart, y1_: float64, x11: float64, x21: float64, y2: float64, x12: float64, x22: float64): void,
  draw_glyph: function(renderer: *PangoRenderer, font: *PangoFont, glyph: PangoGlyph, x: float64, y: float64): void,
  part_changed: function(renderer: *PangoRenderer, part: PangoRenderPart): void,
  begin: function(renderer: *PangoRenderer): void,
  end_: function(renderer: *PangoRenderer): void,
  prepare_run: function(renderer: *PangoRenderer, run: *PangoLayoutRun): void,
  draw_glyph_item: function(renderer: *PangoRenderer, text: cstring, glyph_item: *PangoGlyphItem, x: cint, y: cint): void,
  _pango_reserved2: function(): void,
  _pango_reserved3: function(): void,
  _pango_reserved4: function(): void
}
global __mbstate_t: type <cimport,nodecl> = @record{
  __count: cint,
  __value: union{
    __wch: cuint,
    __wchb: [4]cchar
  }
}
global fpos_t: type <cimport,nodecl> = @record{
  __pos: clong,
  __state: __mbstate_t
}
global __fpos64_t: type <cimport,nodecl> = @record{
  __pos: clong,
  __state: __mbstate_t
}
global FILE: type <cimport,nodecl,cincomplete> = @record{}
global _IO_marker: type <cimport,nodecl,ctypedef'_IO_marker',forwarddecl> = @record{}
global _IO_codecvt: type <cimport,nodecl,ctypedef'_IO_codecvt',forwarddecl> = @record{}
global _IO_wide_data: type <cimport,nodecl,ctypedef'_IO_wide_data',forwarddecl> = @record{}
global _IO_lock_t: type <cimport,nodecl> = @void
global GdkRectangle: type <cimport,nodecl> = @cairo_rectangle_int_t
global GdkRGBA: type <cimport,nodecl,forwarddecl> = @record{}
global GdkContentFormats: type <cimport,nodecl,forwarddecl> = @record{}
global GdkContentProvider: type <cimport,nodecl,forwarddecl> = @record{}
global GdkCursor: type <cimport,nodecl,forwarddecl> = @record{}
global GdkTexture: type <cimport,nodecl,forwarddecl> = @record{}
global GdkDevice: type <cimport,nodecl,forwarddecl> = @record{}
global GdkDrag: type <cimport,nodecl,forwarddecl> = @record{}
global GdkDrop: type <cimport,nodecl,forwarddecl> = @record{}
global GdkClipboard: type <cimport,nodecl,forwarddecl> = @record{}
global GdkDisplayManager: type <cimport,nodecl,forwarddecl> = @record{}
global GdkDisplay: type <cimport,nodecl,forwarddecl> = @record{}
global GdkSurface: type <cimport,nodecl,forwarddecl> = @record{}
global GdkAppLaunchContext: type <cimport,nodecl,forwarddecl> = @record{}
global GdkSeat: type <cimport,nodecl,forwarddecl> = @record{}
global GdkSnapshot: type <cimport,nodecl,forwarddecl> = @record{}
global GdkDrawContext: type <cimport,nodecl,forwarddecl> = @record{}
global GdkCairoContext: type <cimport,nodecl,forwarddecl> = @record{}
global GdkGLContext: type <cimport,nodecl,forwarddecl> = @record{}
global GdkVulkanContext: type <cimport,nodecl,forwarddecl> = @record{}
global GdkKeymapKey: type <cimport,nodecl,forwarddecl> = @record{}
GdkKeymapKey = @record{
  keycode: guint,
  group: cint,
  level: cint
}
GdkRGBA = @record{
  red: float32,
  green: float32,
  blue: float32,
  alpha: float32
}
global GdkPixbufAlphaMode: type <cimport,nodecl,using> = @enum(cint){
  GDK_PIXBUF_ALPHA_BILEVEL = 0,
  GDK_PIXBUF_ALPHA_FULL = 1
}
global GdkColorspace: type <cimport,nodecl,using> = @enum(cint){
  GDK_COLORSPACE_RGB = 0
}
global GdkPixbuf: type <cimport,nodecl,forwarddecl> = @record{}
global GdkPixbufDestroyNotify: type <cimport,nodecl> = @function(pixels: *guchar, data: gpointer): void
global GdkPixbufError: type <cimport,nodecl,using> = @enum(cint){
  GDK_PIXBUF_ERROR_CORRUPT_IMAGE = 0,
  GDK_PIXBUF_ERROR_INSUFFICIENT_MEMORY = 1,
  GDK_PIXBUF_ERROR_BAD_OPTION = 2,
  GDK_PIXBUF_ERROR_UNKNOWN_TYPE = 3,
  GDK_PIXBUF_ERROR_UNSUPPORTED_OPERATION = 4,
  GDK_PIXBUF_ERROR_FAILED = 5,
  GDK_PIXBUF_ERROR_INCOMPLETE_ANIMATION = 6
}
global GdkPixbufSaveFunc: type <cimport,nodecl> = @function(buf: *gchar, count: gsize, error: **GError, data: gpointer): gboolean
global GdkInterpType: type <cimport,nodecl,using> = @enum(cint){
  GDK_INTERP_NEAREST = 0,
  GDK_INTERP_TILES = 1,
  GDK_INTERP_BILINEAR = 2,
  GDK_INTERP_HYPER = 3
}
global GdkPixbufRotation: type <cimport,nodecl,using> = @enum(cint){
  GDK_PIXBUF_ROTATE_NONE = 0,
  GDK_PIXBUF_ROTATE_COUNTERCLOCKWISE = 90,
  GDK_PIXBUF_ROTATE_UPSIDEDOWN = 180,
  GDK_PIXBUF_ROTATE_CLOCKWISE = 270
}
global GdkPixbufAnimation: type <cimport,nodecl,forwarddecl> = @record{}
global GdkPixbufAnimationIter: type <cimport,nodecl,forwarddecl> = @record{}
global GdkPixbufSimpleAnim: type <cimport,nodecl,forwarddecl> = @record{}
global GdkPixbufSimpleAnimClass: type <cimport,nodecl,forwarddecl> = @record{}
global GdkPixbufFormat: type <cimport,nodecl,forwarddecl> = @record{}
global GdkPixbufLoader: type <cimport,nodecl,forwarddecl> = @record{}
GdkPixbufLoader = @record{
  parent_instance: GObject,
  priv: gpointer
}
global GdkPixbufLoaderClass: type <cimport,nodecl,forwarddecl> = @record{}
GdkPixbufLoaderClass = @record{
  parent_class: GObjectClass,
  size_prepared: function(loader: *GdkPixbufLoader, width: cint, height: cint): void,
  area_prepared: function(loader: *GdkPixbufLoader): void,
  area_updated: function(loader: *GdkPixbufLoader, x: cint, y: cint, width: cint, height: cint): void,
  closed: function(loader: *GdkPixbufLoader): void
}
global GdkPixbuf_autoptr: type <cimport,nodecl> = @*GdkPixbuf
global GdkPixbuf_listautoptr: type <cimport,nodecl> = @*GList
global GdkPixbuf_slistautoptr: type <cimport,nodecl> = @*GSList
global GdkPixbuf_queueautoptr: type <cimport,nodecl> = @*GQueue
global GdkPixbufAnimation_autoptr: type <cimport,nodecl> = @*GdkPixbufAnimation
global GdkPixbufAnimation_listautoptr: type <cimport,nodecl> = @*GList
global GdkPixbufAnimation_slistautoptr: type <cimport,nodecl> = @*GSList
global GdkPixbufAnimation_queueautoptr: type <cimport,nodecl> = @*GQueue
global GdkPixbufAnimationIter_autoptr: type <cimport,nodecl> = @*GdkPixbufAnimationIter
global GdkPixbufAnimationIter_listautoptr: type <cimport,nodecl> = @*GList
global GdkPixbufAnimationIter_slistautoptr: type <cimport,nodecl> = @*GSList
global GdkPixbufAnimationIter_queueautoptr: type <cimport,nodecl> = @*GQueue
global GdkPixbufLoader_autoptr: type <cimport,nodecl> = @*GdkPixbufLoader
global GdkPixbufLoader_listautoptr: type <cimport,nodecl> = @*GList
global GdkPixbufLoader_slistautoptr: type <cimport,nodecl> = @*GSList
global GdkPixbufLoader_queueautoptr: type <cimport,nodecl> = @*GQueue
global GdkPixbufSimpleAnim_autoptr: type <cimport,nodecl> = @*GdkPixbufSimpleAnim
global GdkPixbufSimpleAnim_listautoptr: type <cimport,nodecl> = @*GList
global GdkPixbufSimpleAnim_slistautoptr: type <cimport,nodecl> = @*GSList
global GdkPixbufSimpleAnim_queueautoptr: type <cimport,nodecl> = @*GQueue
global GdkTexture_autoptr: type <cimport,nodecl> = @*GdkTexture
global GdkTexture_listautoptr: type <cimport,nodecl> = @*GList
global GdkTexture_slistautoptr: type <cimport,nodecl> = @*GSList
global GdkTexture_queueautoptr: type <cimport,nodecl> = @*GQueue
global GdkTextureClass: type <cimport,nodecl,forwarddecl> = @record{}
global GdkTextureError: type <cimport,nodecl,using> = @enum(cint){
  GDK_TEXTURE_ERROR_TOO_LARGE = 0,
  GDK_TEXTURE_ERROR_CORRUPT_IMAGE = 1,
  GDK_TEXTURE_ERROR_UNSUPPORTED_CONTENT = 2,
  GDK_TEXTURE_ERROR_UNSUPPORTED_FORMAT = 3
}
global PangoCairoFont: type <cimport,nodecl,forwarddecl> = @record{}
global PangoCairoFontMap: type <cimport,nodecl,forwarddecl> = @record{}
global PangoCairoShapeRendererFunc: type <cimport,nodecl> = @function(cr: *cairo_t, attr: *PangoAttrShape, do_path: gboolean, data: gpointer): void
global GdkContentDeserializer: type <cimport,nodecl,forwarddecl> = @record{}
global GdkContentDeserializeFunc: type <cimport,nodecl> = @function(deserializer: *GdkContentDeserializer): void
global GdkContentFormatsBuilder: type <cimport,nodecl,forwarddecl> = @record{}
global GdkFileList: type <cimport,nodecl,forwarddecl> = @record{}
global GdkContentProviderClass: type <cimport,nodecl,forwarddecl> = @record{}
GdkContentProvider = @record{
  parent: GObject
}
GdkContentProviderClass = @record{
  parent_class: GObjectClass,
  content_changed: function(provider: *GdkContentProvider): void,
  attach_clipboard: function(provider: *GdkContentProvider, clipboard: *GdkClipboard): void,
  detach_clipboard: function(provider: *GdkContentProvider, clipboard: *GdkClipboard): void,
  ref_formats: function(provider: *GdkContentProvider): *GdkContentFormats,
  ref_storable_formats: function(provider: *GdkContentProvider): *GdkContentFormats,
  write_mime_type_async: function(provider: *GdkContentProvider, mime_type: cstring, stream: *GOutputStream, io_priority: cint, cancellable: *GCancellable, callback: GAsyncReadyCallback, user_data: gpointer): void,
  write_mime_type_finish: function(provider: *GdkContentProvider, result: *GAsyncResult, error: **GError): gboolean,
  get_value: function(provider: *GdkContentProvider, value: *GValue, error: **GError): gboolean,
  padding: [8]gpointer
}
global GdkContentSerializer: type <cimport,nodecl,forwarddecl> = @record{}
global GdkContentSerializeFunc: type <cimport,nodecl> = @function(serializer: *GdkContentSerializer): void
global GdkGravity: type <cimport,nodecl,using> = @enum(cint){
  GDK_GRAVITY_NORTH_WEST = 1,
  GDK_GRAVITY_NORTH = 2,
  GDK_GRAVITY_NORTH_EAST = 3,
  GDK_GRAVITY_WEST = 4,
  GDK_GRAVITY_CENTER = 5,
  GDK_GRAVITY_EAST = 6,
  GDK_GRAVITY_SOUTH_WEST = 7,
  GDK_GRAVITY_SOUTH = 8,
  GDK_GRAVITY_SOUTH_EAST = 9,
  GDK_GRAVITY_STATIC = 10
}
global GdkModifierType: type <cimport,nodecl,using> = @enum(cint){
  GDK_SHIFT_MASK = 1,
  GDK_LOCK_MASK = 2,
  GDK_CONTROL_MASK = 4,
  GDK_ALT_MASK = 8,
  GDK_BUTTON1_MASK = 256,
  GDK_BUTTON2_MASK = 512,
  GDK_BUTTON3_MASK = 1024,
  GDK_BUTTON4_MASK = 2048,
  GDK_BUTTON5_MASK = 4096,
  GDK_SUPER_MASK = 67108864,
  GDK_HYPER_MASK = 134217728,
  GDK_META_MASK = 268435456
}
global GdkGLError: type <cimport,nodecl,using> = @enum(cint){
  GDK_GL_ERROR_NOT_AVAILABLE = 0,
  GDK_GL_ERROR_UNSUPPORTED_FORMAT = 1,
  GDK_GL_ERROR_UNSUPPORTED_PROFILE = 2,
  GDK_GL_ERROR_COMPILATION_FAILED = 3,
  GDK_GL_ERROR_LINK_FAILED = 4
}
global GdkVulkanError: type <cimport,nodecl,using> = @enum(cint){
  GDK_VULKAN_ERROR_UNSUPPORTED = 0,
  GDK_VULKAN_ERROR_NOT_AVAILABLE = 1
}
global GdkAxisUse: type <cimport,nodecl,using> = @enum(cint){
  GDK_AXIS_IGNORE = 0,
  GDK_AXIS_X = 1,
  GDK_AXIS_Y = 2,
  GDK_AXIS_DELTA_X = 3,
  GDK_AXIS_DELTA_Y = 4,
  GDK_AXIS_PRESSURE = 5,
  GDK_AXIS_XTILT = 6,
  GDK_AXIS_YTILT = 7,
  GDK_AXIS_WHEEL = 8,
  GDK_AXIS_DISTANCE = 9,
  GDK_AXIS_ROTATION = 10,
  GDK_AXIS_SLIDER = 11,
  GDK_AXIS_LAST = 12
}
global GdkAxisFlags: type <cimport,nodecl,using> = @enum(cint){
  GDK_AXIS_FLAG_X = 2,
  GDK_AXIS_FLAG_Y = 4,
  GDK_AXIS_FLAG_DELTA_X = 8,
  GDK_AXIS_FLAG_DELTA_Y = 16,
  GDK_AXIS_FLAG_PRESSURE = 32,
  GDK_AXIS_FLAG_XTILT = 64,
  GDK_AXIS_FLAG_YTILT = 128,
  GDK_AXIS_FLAG_WHEEL = 256,
  GDK_AXIS_FLAG_DISTANCE = 512,
  GDK_AXIS_FLAG_ROTATION = 1024,
  GDK_AXIS_FLAG_SLIDER = 2048
}
global GdkDragAction: type <cimport,nodecl,using> = @enum(cint){
  GDK_ACTION_COPY = 1,
  GDK_ACTION_MOVE = 2,
  GDK_ACTION_LINK = 4,
  GDK_ACTION_ASK = 8
}
global GdkMemoryFormat: type <cimport,nodecl,using> = @enum(cint){
  GDK_MEMORY_B8G8R8A8_PREMULTIPLIED = 0,
  GDK_MEMORY_A8R8G8B8_PREMULTIPLIED = 1,
  GDK_MEMORY_R8G8B8A8_PREMULTIPLIED = 2,
  GDK_MEMORY_B8G8R8A8 = 3,
  GDK_MEMORY_A8R8G8B8 = 4,
  GDK_MEMORY_R8G8B8A8 = 5,
  GDK_MEMORY_A8B8G8R8 = 6,
  GDK_MEMORY_R8G8B8 = 7,
  GDK_MEMORY_B8G8R8 = 8,
  GDK_MEMORY_R16G16B16 = 9,
  GDK_MEMORY_R16G16B16A16_PREMULTIPLIED = 10,
  GDK_MEMORY_R16G16B16A16 = 11,
  GDK_MEMORY_R16G16B16_FLOAT = 12,
  GDK_MEMORY_R16G16B16A16_FLOAT_PREMULTIPLIED = 13,
  GDK_MEMORY_R16G16B16A16_FLOAT = 14,
  GDK_MEMORY_R32G32B32_FLOAT = 15,
  GDK_MEMORY_R32G32B32A32_FLOAT_PREMULTIPLIED = 16,
  GDK_MEMORY_R32G32B32A32_FLOAT = 17,
  GDK_MEMORY_N_FORMATS = 18
}
global GdkDeviceTool: type <cimport,nodecl,forwarddecl> = @record{}
global GdkDeviceToolType: type <cimport,nodecl,using> = @enum(cint){
  GDK_DEVICE_TOOL_TYPE_UNKNOWN = 0,
  GDK_DEVICE_TOOL_TYPE_PEN = 1,
  GDK_DEVICE_TOOL_TYPE_ERASER = 2,
  GDK_DEVICE_TOOL_TYPE_BRUSH = 3,
  GDK_DEVICE_TOOL_TYPE_PENCIL = 4,
  GDK_DEVICE_TOOL_TYPE_AIRBRUSH = 5,
  GDK_DEVICE_TOOL_TYPE_MOUSE = 6,
  GDK_DEVICE_TOOL_TYPE_LENS = 7
}
global GdkTimeCoord: type <cimport,nodecl,forwarddecl> = @record{}
global GdkInputSource: type <cimport,nodecl,using> = @enum(cint){
  GDK_SOURCE_MOUSE = 0,
  GDK_SOURCE_PEN = 1,
  GDK_SOURCE_KEYBOARD = 2,
  GDK_SOURCE_TOUCHSCREEN = 3,
  GDK_SOURCE_TOUCHPAD = 4,
  GDK_SOURCE_TRACKPOINT = 5,
  GDK_SOURCE_TABLET_PAD = 6
}
GdkTimeCoord = @record{
  time: guint32,
  flags: GdkAxisFlags,
  axes: [12]float64
}
global GdkDevicePad: type <cimport,nodecl,forwarddecl> = @record{}
global GdkDevicePadInterface: type <cimport,nodecl,forwarddecl> = @record{}
global GdkDevicePadFeature: type <cimport,nodecl,using> = @enum(cint){
  GDK_DEVICE_PAD_FEATURE_BUTTON = 0,
  GDK_DEVICE_PAD_FEATURE_RING = 1,
  GDK_DEVICE_PAD_FEATURE_STRIP = 2
}
global GdkDragCancelReason: type <cimport,nodecl,using> = @enum(cint){
  GDK_DRAG_CANCEL_NO_TARGET = 0,
  GDK_DRAG_CANCEL_USER_CANCELLED = 1,
  GDK_DRAG_CANCEL_ERROR = 2
}
global GdkEventSequence: type <cimport,nodecl,forwarddecl> = @record{}
global GdkEvent: type <cimport,nodecl,forwarddecl> = @record{}
global GdkButtonEvent: type <cimport,nodecl,forwarddecl> = @record{}
global GdkCrossingEvent: type <cimport,nodecl,forwarddecl> = @record{}
global GdkDeleteEvent: type <cimport,nodecl,forwarddecl> = @record{}
global GdkDNDEvent: type <cimport,nodecl,forwarddecl> = @record{}
global GdkFocusEvent: type <cimport,nodecl,forwarddecl> = @record{}
global GdkGrabBrokenEvent: type <cimport,nodecl,forwarddecl> = @record{}
global GdkKeyEvent: type <cimport,nodecl,forwarddecl> = @record{}
global GdkMotionEvent: type <cimport,nodecl,forwarddecl> = @record{}
global GdkPadEvent: type <cimport,nodecl,forwarddecl> = @record{}
global GdkProximityEvent: type <cimport,nodecl,forwarddecl> = @record{}
global GdkScrollEvent: type <cimport,nodecl,forwarddecl> = @record{}
global GdkTouchEvent: type <cimport,nodecl,forwarddecl> = @record{}
global GdkTouchpadEvent: type <cimport,nodecl,forwarddecl> = @record{}
global GdkEventType: type <cimport,nodecl,using> = @enum(cint){
  GDK_DELETE = 0,
  GDK_MOTION_NOTIFY = 1,
  GDK_BUTTON_PRESS = 2,
  GDK_BUTTON_RELEASE = 3,
  GDK_KEY_PRESS = 4,
  GDK_KEY_RELEASE = 5,
  GDK_ENTER_NOTIFY = 6,
  GDK_LEAVE_NOTIFY = 7,
  GDK_FOCUS_CHANGE = 8,
  GDK_PROXIMITY_IN = 9,
  GDK_PROXIMITY_OUT = 10,
  GDK_DRAG_ENTER = 11,
  GDK_DRAG_LEAVE = 12,
  GDK_DRAG_MOTION = 13,
  GDK_DROP_START = 14,
  GDK_SCROLL = 15,
  GDK_GRAB_BROKEN = 16,
  GDK_TOUCH_BEGIN = 17,
  GDK_TOUCH_UPDATE = 18,
  GDK_TOUCH_END = 19,
  GDK_TOUCH_CANCEL = 20,
  GDK_TOUCHPAD_SWIPE = 21,
  GDK_TOUCHPAD_PINCH = 22,
  GDK_PAD_BUTTON_PRESS = 23,
  GDK_PAD_BUTTON_RELEASE = 24,
  GDK_PAD_RING = 25,
  GDK_PAD_STRIP = 26,
  GDK_PAD_GROUP_MODE = 27,
  GDK_TOUCHPAD_HOLD = 28,
  GDK_EVENT_LAST = 29
}
global GdkTouchpadGesturePhase: type <cimport,nodecl,using> = @enum(cint){
  GDK_TOUCHPAD_GESTURE_PHASE_BEGIN = 0,
  GDK_TOUCHPAD_GESTURE_PHASE_UPDATE = 1,
  GDK_TOUCHPAD_GESTURE_PHASE_END = 2,
  GDK_TOUCHPAD_GESTURE_PHASE_CANCEL = 3
}
global GdkScrollDirection: type <cimport,nodecl,using> = @enum(cint){
  GDK_SCROLL_UP = 0,
  GDK_SCROLL_DOWN = 1,
  GDK_SCROLL_LEFT = 2,
  GDK_SCROLL_RIGHT = 3,
  GDK_SCROLL_SMOOTH = 4
}
global GdkNotifyType: type <cimport,nodecl,using> = @enum(cint){
  GDK_NOTIFY_ANCESTOR = 0,
  GDK_NOTIFY_VIRTUAL = 1,
  GDK_NOTIFY_INFERIOR = 2,
  GDK_NOTIFY_NONLINEAR = 3,
  GDK_NOTIFY_NONLINEAR_VIRTUAL = 4,
  GDK_NOTIFY_UNKNOWN = 5
}
global GdkCrossingMode: type <cimport,nodecl,using> = @enum(cint){
  GDK_CROSSING_NORMAL = 0,
  GDK_CROSSING_GRAB = 1,
  GDK_CROSSING_UNGRAB = 2,
  GDK_CROSSING_GTK_GRAB = 3,
  GDK_CROSSING_GTK_UNGRAB = 4,
  GDK_CROSSING_STATE_CHANGED = 5,
  GDK_CROSSING_TOUCH_BEGIN = 6,
  GDK_CROSSING_TOUCH_END = 7,
  GDK_CROSSING_DEVICE_SWITCH = 8
}
global GdkKeyMatch: type <cimport,nodecl,using> = @enum(cint){
  GDK_KEY_MATCH_NONE = 0,
  GDK_KEY_MATCH_PARTIAL = 1,
  GDK_KEY_MATCH_EXACT = 2
}
global GdkFrameTimings: type <cimport,nodecl,forwarddecl> = @record{}
global GdkFrameClock: type <cimport,nodecl,forwarddecl> = @record{}
global GdkFrameClockPrivate: type <cimport,nodecl,forwarddecl> = @record{}
global GdkFrameClockClass: type <cimport,nodecl,forwarddecl> = @record{}
global GdkFrameClockPhase: type <cimport,nodecl,using> = @enum(cint){
  GDK_FRAME_CLOCK_PHASE_NONE = 0,
  GDK_FRAME_CLOCK_PHASE_FLUSH_EVENTS = 1,
  GDK_FRAME_CLOCK_PHASE_BEFORE_PAINT = 2,
  GDK_FRAME_CLOCK_PHASE_UPDATE = 4,
  GDK_FRAME_CLOCK_PHASE_LAYOUT = 8,
  GDK_FRAME_CLOCK_PHASE_PAINT = 16,
  GDK_FRAME_CLOCK_PHASE_RESUME_EVENTS = 32,
  GDK_FRAME_CLOCK_PHASE_AFTER_PAINT = 64
}
global GdkMonitor: type <cimport,nodecl,forwarddecl> = @record{}
global GdkMonitorClass: type <cimport,nodecl,forwarddecl> = @record{}
global GdkSubpixelLayout: type <cimport,nodecl,using> = @enum(cint){
  GDK_SUBPIXEL_LAYOUT_UNKNOWN = 0,
  GDK_SUBPIXEL_LAYOUT_NONE = 1,
  GDK_SUBPIXEL_LAYOUT_HORIZONTAL_RGB = 2,
  GDK_SUBPIXEL_LAYOUT_HORIZONTAL_BGR = 3,
  GDK_SUBPIXEL_LAYOUT_VERTICAL_RGB = 4,
  GDK_SUBPIXEL_LAYOUT_VERTICAL_BGR = 5
}
global GdkAnchorHints: type <cimport,nodecl,using> = @enum(cint){
  GDK_ANCHOR_FLIP_X = 1,
  GDK_ANCHOR_FLIP_Y = 2,
  GDK_ANCHOR_SLIDE_X = 4,
  GDK_ANCHOR_SLIDE_Y = 8,
  GDK_ANCHOR_RESIZE_X = 16,
  GDK_ANCHOR_RESIZE_Y = 32,
  GDK_ANCHOR_FLIP = 3,
  GDK_ANCHOR_SLIDE = 12,
  GDK_ANCHOR_RESIZE = 48
}
global GdkPopupLayout: type <cimport,nodecl,forwarddecl> = @record{}
global GdkSurfaceClass: type <cimport,nodecl,forwarddecl> = @record{}
global GdkSurface_autoptr: type <cimport,nodecl> = @*GdkSurface
global GdkSurface_listautoptr: type <cimport,nodecl> = @*GList
global GdkSurface_slistautoptr: type <cimport,nodecl> = @*GSList
global GdkSurface_queueautoptr: type <cimport,nodecl> = @*GQueue
global GdkSeatCapabilities: type <cimport,nodecl,using> = @enum(cint){
  GDK_SEAT_CAPABILITY_NONE = 0,
  GDK_SEAT_CAPABILITY_POINTER = 1,
  GDK_SEAT_CAPABILITY_TOUCH = 2,
  GDK_SEAT_CAPABILITY_TABLET_STYLUS = 4,
  GDK_SEAT_CAPABILITY_KEYBOARD = 8,
  GDK_SEAT_CAPABILITY_TABLET_PAD = 16,
  GDK_SEAT_CAPABILITY_ALL_POINTING = 7,
  GDK_SEAT_CAPABILITY_ALL = 15
}
GdkSeat = @record{
  parent_instance: GObject
}
global GdkDragSurface: type <cimport,nodecl,forwarddecl> = @record{}
global GdkDragSurfaceInterface: type <cimport,nodecl,forwarddecl> = @record{}
global GdkDragSurface_autoptr: type <cimport,nodecl> = @*GdkDragSurface
global GdkDragSurface_listautoptr: type <cimport,nodecl> = @*GList
global GdkDragSurface_slistautoptr: type <cimport,nodecl> = @*GSList
global GdkDragSurface_queueautoptr: type <cimport,nodecl> = @*GQueue
global GdkDrop_autoptr: type <cimport,nodecl> = @*GdkDrop
global GdkDrop_listautoptr: type <cimport,nodecl> = @*GList
global GdkDrop_slistautoptr: type <cimport,nodecl> = @*GSList
global GdkDrop_queueautoptr: type <cimport,nodecl> = @*GQueue
global GdkGLAPI: type <cimport,nodecl,using> = @enum(cint){
  GDK_GL_API_GL = 1,
  GDK_GL_API_GLES = 2
}
global GdkGLTexture: type <cimport,nodecl,forwarddecl> = @record{}
global GdkGLTextureClass: type <cimport,nodecl,forwarddecl> = @record{}
global GdkGLTexture_autoptr: type <cimport,nodecl> = @*GdkGLTexture
global GdkGLTexture_listautoptr: type <cimport,nodecl> = @*GList
global GdkGLTexture_slistautoptr: type <cimport,nodecl> = @*GSList
global GdkGLTexture_queueautoptr: type <cimport,nodecl> = @*GQueue
global GdkMemoryTexture: type <cimport,nodecl,forwarddecl> = @record{}
global GdkMemoryTextureClass: type <cimport,nodecl,forwarddecl> = @record{}
global GdkMemoryTexture_autoptr: type <cimport,nodecl> = @*GdkMemoryTexture
global GdkMemoryTexture_listautoptr: type <cimport,nodecl> = @*GList
global GdkMemoryTexture_slistautoptr: type <cimport,nodecl> = @*GSList
global GdkMemoryTexture_queueautoptr: type <cimport,nodecl> = @*GQueue
global GdkPaintable: type <cimport,nodecl,forwarddecl> = @record{}
global GdkPaintableInterface: type <cimport,nodecl,forwarddecl> = @record{}
global GdkPaintable_autoptr: type <cimport,nodecl> = @*GdkPaintable
global GdkPaintable_listautoptr: type <cimport,nodecl> = @*GList
global GdkPaintable_slistautoptr: type <cimport,nodecl> = @*GSList
global GdkPaintable_queueautoptr: type <cimport,nodecl> = @*GQueue
global GdkPaintableFlags: type <cimport,nodecl,using> = @enum(cint){
  GDK_PAINTABLE_STATIC_SIZE = 1,
  GDK_PAINTABLE_STATIC_CONTENTS = 2
}
GdkPaintableInterface = @record{
  g_iface: GTypeInterface,
  snapshot: function(paintable: *GdkPaintable, snapshot: *GdkSnapshot, width: float64, height: float64): void,
  get_current_image: function(paintable: *GdkPaintable): *GdkPaintable,
  get_flags: function(paintable: *GdkPaintable): GdkPaintableFlags,
  get_intrinsic_width: function(paintable: *GdkPaintable): cint,
  get_intrinsic_height: function(paintable: *GdkPaintable): cint,
  get_intrinsic_aspect_ratio: function(paintable: *GdkPaintable): float64
}
global GdkPopup: type <cimport,nodecl,forwarddecl> = @record{}
global GdkPopupInterface: type <cimport,nodecl,forwarddecl> = @record{}
global GdkPopup_autoptr: type <cimport,nodecl> = @*GdkPopup
global GdkPopup_listautoptr: type <cimport,nodecl> = @*GList
global GdkPopup_slistautoptr: type <cimport,nodecl> = @*GSList
global GdkPopup_queueautoptr: type <cimport,nodecl> = @*GQueue
global GdkSnapshotClass: type <cimport,nodecl,forwarddecl> = @record{}
global GdkSnapshot_autoptr: type <cimport,nodecl> = @*GdkSnapshot
global GdkSnapshot_listautoptr: type <cimport,nodecl> = @*GList
global GdkSnapshot_slistautoptr: type <cimport,nodecl> = @*GSList
global GdkSnapshot_queueautoptr: type <cimport,nodecl> = @*GQueue
global GdkToplevelLayout: type <cimport,nodecl,forwarddecl> = @record{}
global GdkSurfaceEdge: type <cimport,nodecl,using> = @enum(cint){
  GDK_SURFACE_EDGE_NORTH_WEST = 0,
  GDK_SURFACE_EDGE_NORTH = 1,
  GDK_SURFACE_EDGE_NORTH_EAST = 2,
  GDK_SURFACE_EDGE_WEST = 3,
  GDK_SURFACE_EDGE_EAST = 4,
  GDK_SURFACE_EDGE_SOUTH_WEST = 5,
  GDK_SURFACE_EDGE_SOUTH = 6,
  GDK_SURFACE_EDGE_SOUTH_EAST = 7
}
global GdkFullscreenMode: type <cimport,nodecl,using> = @enum(cint){
  GDK_FULLSCREEN_ON_CURRENT_MONITOR = 0,
  GDK_FULLSCREEN_ON_ALL_MONITORS = 1
}
global GdkToplevelState: type <cimport,nodecl,using> = @enum(cint){
  GDK_TOPLEVEL_STATE_MINIMIZED = 1,
  GDK_TOPLEVEL_STATE_MAXIMIZED = 2,
  GDK_TOPLEVEL_STATE_STICKY = 4,
  GDK_TOPLEVEL_STATE_FULLSCREEN = 8,
  GDK_TOPLEVEL_STATE_ABOVE = 16,
  GDK_TOPLEVEL_STATE_BELOW = 32,
  GDK_TOPLEVEL_STATE_FOCUSED = 64,
  GDK_TOPLEVEL_STATE_TILED = 128,
  GDK_TOPLEVEL_STATE_TOP_TILED = 256,
  GDK_TOPLEVEL_STATE_TOP_RESIZABLE = 512,
  GDK_TOPLEVEL_STATE_RIGHT_TILED = 1024,
  GDK_TOPLEVEL_STATE_RIGHT_RESIZABLE = 2048,
  GDK_TOPLEVEL_STATE_BOTTOM_TILED = 4096,
  GDK_TOPLEVEL_STATE_BOTTOM_RESIZABLE = 8192,
  GDK_TOPLEVEL_STATE_LEFT_TILED = 16384,
  GDK_TOPLEVEL_STATE_LEFT_RESIZABLE = 32768
}
global GdkTitlebarGesture: type <cimport,nodecl,using> = @enum(cint){
  GDK_TITLEBAR_GESTURE_DOUBLE_CLICK = 1,
  GDK_TITLEBAR_GESTURE_RIGHT_CLICK = 2,
  GDK_TITLEBAR_GESTURE_MIDDLE_CLICK = 3
}
global GdkToplevel: type <cimport,nodecl,forwarddecl> = @record{}
global GdkToplevelInterface: type <cimport,nodecl,forwarddecl> = @record{}
global GdkToplevel_autoptr: type <cimport,nodecl> = @*GdkToplevel
global GdkToplevel_listautoptr: type <cimport,nodecl> = @*GList
global GdkToplevel_slistautoptr: type <cimport,nodecl> = @*GSList
global GdkToplevel_queueautoptr: type <cimport,nodecl> = @*GQueue
global GdkToplevelSize: type <cimport,nodecl,forwarddecl> = @record{}
global GdkAppLaunchContext_autoptr: type <cimport,nodecl> = @*GdkAppLaunchContext
global GdkAppLaunchContext_listautoptr: type <cimport,nodecl> = @*GList
global GdkAppLaunchContext_slistautoptr: type <cimport,nodecl> = @*GSList
global GdkAppLaunchContext_queueautoptr: type <cimport,nodecl> = @*GQueue
global GdkClipboard_autoptr: type <cimport,nodecl> = @*GdkClipboard
global GdkClipboard_listautoptr: type <cimport,nodecl> = @*GList
global GdkClipboard_slistautoptr: type <cimport,nodecl> = @*GSList
global GdkClipboard_queueautoptr: type <cimport,nodecl> = @*GQueue
global GdkContentProvider_autoptr: type <cimport,nodecl> = @*GdkContentProvider
global GdkContentProvider_listautoptr: type <cimport,nodecl> = @*GList
global GdkContentProvider_slistautoptr: type <cimport,nodecl> = @*GSList
global GdkContentProvider_queueautoptr: type <cimport,nodecl> = @*GQueue
global GdkCursor_autoptr: type <cimport,nodecl> = @*GdkCursor
global GdkCursor_listautoptr: type <cimport,nodecl> = @*GList
global GdkCursor_slistautoptr: type <cimport,nodecl> = @*GSList
global GdkCursor_queueautoptr: type <cimport,nodecl> = @*GQueue
global GdkDevice_autoptr: type <cimport,nodecl> = @*GdkDevice
global GdkDevice_listautoptr: type <cimport,nodecl> = @*GList
global GdkDevice_slistautoptr: type <cimport,nodecl> = @*GSList
global GdkDevice_queueautoptr: type <cimport,nodecl> = @*GQueue
global GdkDisplay_autoptr: type <cimport,nodecl> = @*GdkDisplay
global GdkDisplay_listautoptr: type <cimport,nodecl> = @*GList
global GdkDisplay_slistautoptr: type <cimport,nodecl> = @*GSList
global GdkDisplay_queueautoptr: type <cimport,nodecl> = @*GQueue
global GdkDisplayManager_autoptr: type <cimport,nodecl> = @*GdkDisplayManager
global GdkDisplayManager_listautoptr: type <cimport,nodecl> = @*GList
global GdkDisplayManager_slistautoptr: type <cimport,nodecl> = @*GSList
global GdkDisplayManager_queueautoptr: type <cimport,nodecl> = @*GQueue
global GdkDrag_autoptr: type <cimport,nodecl> = @*GdkDrag
global GdkDrag_listautoptr: type <cimport,nodecl> = @*GList
global GdkDrag_slistautoptr: type <cimport,nodecl> = @*GSList
global GdkDrag_queueautoptr: type <cimport,nodecl> = @*GQueue
global GdkDrawContext_autoptr: type <cimport,nodecl> = @*GdkDrawContext
global GdkDrawContext_listautoptr: type <cimport,nodecl> = @*GList
global GdkDrawContext_slistautoptr: type <cimport,nodecl> = @*GSList
global GdkDrawContext_queueautoptr: type <cimport,nodecl> = @*GQueue
global GdkFrameClock_autoptr: type <cimport,nodecl> = @*GdkFrameClock
global GdkFrameClock_listautoptr: type <cimport,nodecl> = @*GList
global GdkFrameClock_slistautoptr: type <cimport,nodecl> = @*GSList
global GdkFrameClock_queueautoptr: type <cimport,nodecl> = @*GQueue
global GdkGLContext_autoptr: type <cimport,nodecl> = @*GdkGLContext
global GdkGLContext_listautoptr: type <cimport,nodecl> = @*GList
global GdkGLContext_slistautoptr: type <cimport,nodecl> = @*GSList
global GdkGLContext_queueautoptr: type <cimport,nodecl> = @*GQueue
global GdkMonitor_autoptr: type <cimport,nodecl> = @*GdkMonitor
global GdkMonitor_listautoptr: type <cimport,nodecl> = @*GList
global GdkMonitor_slistautoptr: type <cimport,nodecl> = @*GSList
global GdkMonitor_queueautoptr: type <cimport,nodecl> = @*GQueue
global GdkSeat_autoptr: type <cimport,nodecl> = @*GdkSeat
global GdkSeat_listautoptr: type <cimport,nodecl> = @*GList
global GdkSeat_slistautoptr: type <cimport,nodecl> = @*GSList
global GdkSeat_queueautoptr: type <cimport,nodecl> = @*GQueue
global GdkPopupLayout_autoptr: type <cimport,nodecl> = @*GdkPopupLayout
global GdkPopupLayout_listautoptr: type <cimport,nodecl> = @*GList
global GdkPopupLayout_slistautoptr: type <cimport,nodecl> = @*GSList
global GdkPopupLayout_queueautoptr: type <cimport,nodecl> = @*GQueue
global GdkVulkanContext_autoptr: type <cimport,nodecl> = @*GdkVulkanContext
global GdkVulkanContext_listautoptr: type <cimport,nodecl> = @*GList
global GdkVulkanContext_slistautoptr: type <cimport,nodecl> = @*GSList
global GdkVulkanContext_queueautoptr: type <cimport,nodecl> = @*GQueue
global GdkContentFormats_autoptr: type <cimport,nodecl> = @*GdkContentFormats
global GdkContentFormats_listautoptr: type <cimport,nodecl> = @*GList
global GdkContentFormats_slistautoptr: type <cimport,nodecl> = @*GSList
global GdkContentFormats_queueautoptr: type <cimport,nodecl> = @*GQueue
global GdkEvent_autoptr: type <cimport,nodecl> = @*GdkEvent
global GdkEvent_listautoptr: type <cimport,nodecl> = @*GList
global GdkEvent_slistautoptr: type <cimport,nodecl> = @*GSList
global GdkEvent_queueautoptr: type <cimport,nodecl> = @*GQueue
global GdkFrameTimings_autoptr: type <cimport,nodecl> = @*GdkFrameTimings
global GdkFrameTimings_listautoptr: type <cimport,nodecl> = @*GList
global GdkFrameTimings_slistautoptr: type <cimport,nodecl> = @*GSList
global GdkFrameTimings_queueautoptr: type <cimport,nodecl> = @*GQueue
global GdkRGBA_autoptr: type <cimport,nodecl> = @*GdkRGBA
global GdkRGBA_listautoptr: type <cimport,nodecl> = @*GList
global GdkRGBA_slistautoptr: type <cimport,nodecl> = @*GSList
global GdkRGBA_queueautoptr: type <cimport,nodecl> = @*GQueue
global GskRenderNodeType: type <cimport,nodecl,using> = @enum(cint){
  GSK_NOT_A_RENDER_NODE = 0,
  GSK_CONTAINER_NODE = 1,
  GSK_CAIRO_NODE = 2,
  GSK_COLOR_NODE = 3,
  GSK_LINEAR_GRADIENT_NODE = 4,
  GSK_REPEATING_LINEAR_GRADIENT_NODE = 5,
  GSK_RADIAL_GRADIENT_NODE = 6,
  GSK_REPEATING_RADIAL_GRADIENT_NODE = 7,
  GSK_CONIC_GRADIENT_NODE = 8,
  GSK_BORDER_NODE = 9,
  GSK_TEXTURE_NODE = 10,
  GSK_INSET_SHADOW_NODE = 11,
  GSK_OUTSET_SHADOW_NODE = 12,
  GSK_TRANSFORM_NODE = 13,
  GSK_OPACITY_NODE = 14,
  GSK_COLOR_MATRIX_NODE = 15,
  GSK_REPEAT_NODE = 16,
  GSK_CLIP_NODE = 17,
  GSK_ROUNDED_CLIP_NODE = 18,
  GSK_SHADOW_NODE = 19,
  GSK_BLEND_NODE = 20,
  GSK_CROSS_FADE_NODE = 21,
  GSK_TEXT_NODE = 22,
  GSK_BLUR_NODE = 23,
  GSK_DEBUG_NODE = 24,
  GSK_GL_SHADER_NODE = 25
}
global GskScalingFilter: type <cimport,nodecl,using> = @enum(cint){
  GSK_SCALING_FILTER_LINEAR = 0,
  GSK_SCALING_FILTER_NEAREST = 1,
  GSK_SCALING_FILTER_TRILINEAR = 2
}
global GskBlendMode: type <cimport,nodecl,using> = @enum(cint){
  GSK_BLEND_MODE_DEFAULT = 0,
  GSK_BLEND_MODE_MULTIPLY = 1,
  GSK_BLEND_MODE_SCREEN = 2,
  GSK_BLEND_MODE_OVERLAY = 3,
  GSK_BLEND_MODE_DARKEN = 4,
  GSK_BLEND_MODE_LIGHTEN = 5,
  GSK_BLEND_MODE_COLOR_DODGE = 6,
  GSK_BLEND_MODE_COLOR_BURN = 7,
  GSK_BLEND_MODE_HARD_LIGHT = 8,
  GSK_BLEND_MODE_SOFT_LIGHT = 9,
  GSK_BLEND_MODE_DIFFERENCE = 10,
  GSK_BLEND_MODE_EXCLUSION = 11,
  GSK_BLEND_MODE_COLOR = 12,
  GSK_BLEND_MODE_HUE = 13,
  GSK_BLEND_MODE_SATURATION = 14,
  GSK_BLEND_MODE_LUMINOSITY = 15
}
global GskCorner: type <cimport,nodecl,using> = @enum(cint){
  GSK_CORNER_TOP_LEFT = 0,
  GSK_CORNER_TOP_RIGHT = 1,
  GSK_CORNER_BOTTOM_RIGHT = 2,
  GSK_CORNER_BOTTOM_LEFT = 3
}
global GskSerializationError: type <cimport,nodecl,using> = @enum(cint){
  GSK_SERIALIZATION_UNSUPPORTED_FORMAT = 0,
  GSK_SERIALIZATION_UNSUPPORTED_VERSION = 1,
  GSK_SERIALIZATION_INVALID_DATA = 2
}
global GskTransformCategory: type <cimport,nodecl,using> = @enum(cint){
  GSK_TRANSFORM_CATEGORY_UNKNOWN = 0,
  GSK_TRANSFORM_CATEGORY_ANY = 1,
  GSK_TRANSFORM_CATEGORY_3D = 2,
  GSK_TRANSFORM_CATEGORY_2D = 3,
  GSK_TRANSFORM_CATEGORY_2D_AFFINE = 4,
  GSK_TRANSFORM_CATEGORY_2D_TRANSLATE = 5,
  GSK_TRANSFORM_CATEGORY_IDENTITY = 6
}
global GskGLUniformType: type <cimport,nodecl,using> = @enum(cint){
  GSK_GL_UNIFORM_TYPE_NONE = 0,
  GSK_GL_UNIFORM_TYPE_FLOAT = 1,
  GSK_GL_UNIFORM_TYPE_INT = 2,
  GSK_GL_UNIFORM_TYPE_UINT = 3,
  GSK_GL_UNIFORM_TYPE_BOOL = 4,
  GSK_GL_UNIFORM_TYPE_VEC2 = 5,
  GSK_GL_UNIFORM_TYPE_VEC3 = 6,
  GSK_GL_UNIFORM_TYPE_VEC4 = 7
}
global _mm_hint: type <cimport,nodecl,using,ctypedef'_mm_hint'> = @enum(cint){
  _MM_HINT_ET0 = 7,
  _MM_HINT_ET1 = 6,
  _MM_HINT_T0 = 3,
  _MM_HINT_T1 = 2,
  _MM_HINT_T2 = 1,
  _MM_HINT_NTA = 0
}
global graphene_simd4f_t: type <cimport,nodecl> = @float32
global graphene_simd4x4f_t: type <cimport,nodecl> = @record{
  x: graphene_simd4f_t,
  y: graphene_simd4f_t,
  z: graphene_simd4f_t,
  w: graphene_simd4f_t
}
global graphene_vec2_t: type <cimport,nodecl,forwarddecl> = @record{}
global graphene_vec3_t: type <cimport,nodecl,forwarddecl> = @record{}
global graphene_vec4_t: type <cimport,nodecl,forwarddecl> = @record{}
global graphene_matrix_t: type <cimport,nodecl,forwarddecl> = @record{}
global graphene_point_t: type <cimport,nodecl,forwarddecl> = @record{}
global graphene_size_t: type <cimport,nodecl,forwarddecl> = @record{}
global graphene_rect_t: type <cimport,nodecl,forwarddecl> = @record{}
global graphene_point3d_t: type <cimport,nodecl,forwarddecl> = @record{}
global graphene_quad_t: type <cimport,nodecl,forwarddecl> = @record{}
global graphene_quaternion_t: type <cimport,nodecl,forwarddecl> = @record{}
global graphene_euler_t: type <cimport,nodecl,forwarddecl> = @record{}
global graphene_plane_t: type <cimport,nodecl,forwarddecl> = @record{}
global graphene_frustum_t: type <cimport,nodecl,forwarddecl> = @record{}
global graphene_sphere_t: type <cimport,nodecl,forwarddecl> = @record{}
global graphene_box_t: type <cimport,nodecl,forwarddecl> = @record{}
global graphene_triangle_t: type <cimport,nodecl,forwarddecl> = @record{}
global graphene_ray_t: type <cimport,nodecl,forwarddecl> = @record{}
global FP_NAN: cint <comptime> = 0
global FP_INFINITE: cint <comptime> = 1
global FP_ZERO: cint <comptime> = 2
global FP_SUBNORMAL: cint <comptime> = 3
global FP_NORMAL: cint <comptime> = 4
global graphene_simd4f_union_t: type <cimport,nodecl> = @union{
  s: graphene_simd4f_t,
  f: [4]float32
}
global graphene_simd4f_uif_t: type <cimport,nodecl> = @union{
  ui: [4]cuint,
  f: [4]float32
}
graphene_vec2_t = @record{
  __graphene_private_value: graphene_simd4f_t
}
graphene_vec3_t = @record{
  __graphene_private_value: graphene_simd4f_t
}
graphene_vec4_t = @record{
  __graphene_private_value: graphene_simd4f_t
}
graphene_matrix_t = @record{
  __graphene_private_value: graphene_simd4x4f_t
}
graphene_point_t = @record{
  x: float32,
  y: float32
}
graphene_size_t = @record{
  width: float32,
  height: float32
}
graphene_rect_t = @record{
  origin: graphene_point_t,
  size: graphene_size_t
}
graphene_point3d_t = @record{
  x: float32,
  y: float32,
  z: float32
}
graphene_quad_t = @record{
  __graphene_private_points: [4]graphene_point_t
}
graphene_quaternion_t = @record{
  __graphene_private_x: float32,
  __graphene_private_y: float32,
  __graphene_private_z: float32,
  __graphene_private_w: float32
}
global graphene_euler_order_t: type <cimport,nodecl,using> = @enum(cint){
  GRAPHENE_EULER_ORDER_DEFAULT = -1,
  GRAPHENE_EULER_ORDER_XYZ = 0,
  GRAPHENE_EULER_ORDER_YZX = 1,
  GRAPHENE_EULER_ORDER_ZXY = 2,
  GRAPHENE_EULER_ORDER_XZY = 3,
  GRAPHENE_EULER_ORDER_YXZ = 4,
  GRAPHENE_EULER_ORDER_ZYX = 5,
  GRAPHENE_EULER_ORDER_SXYZ = 6,
  GRAPHENE_EULER_ORDER_SXYX = 7,
  GRAPHENE_EULER_ORDER_SXZY = 8,
  GRAPHENE_EULER_ORDER_SXZX = 9,
  GRAPHENE_EULER_ORDER_SYZX = 10,
  GRAPHENE_EULER_ORDER_SYZY = 11,
  GRAPHENE_EULER_ORDER_SYXZ = 12,
  GRAPHENE_EULER_ORDER_SYXY = 13,
  GRAPHENE_EULER_ORDER_SZXY = 14,
  GRAPHENE_EULER_ORDER_SZXZ = 15,
  GRAPHENE_EULER_ORDER_SZYX = 16,
  GRAPHENE_EULER_ORDER_SZYZ = 17,
  GRAPHENE_EULER_ORDER_RZYX = 18,
  GRAPHENE_EULER_ORDER_RXYX = 19,
  GRAPHENE_EULER_ORDER_RYZX = 20,
  GRAPHENE_EULER_ORDER_RXZX = 21,
  GRAPHENE_EULER_ORDER_RXZY = 22,
  GRAPHENE_EULER_ORDER_RYZY = 23,
  GRAPHENE_EULER_ORDER_RZXY = 24,
  GRAPHENE_EULER_ORDER_RYXY = 25,
  GRAPHENE_EULER_ORDER_RYXZ = 26,
  GRAPHENE_EULER_ORDER_RZXZ = 27,
  GRAPHENE_EULER_ORDER_RXYZ = 28,
  GRAPHENE_EULER_ORDER_RZYZ = 29
}
graphene_euler_t = @record{
  __graphene_private_angles: graphene_vec3_t,
  __graphene_private_order: graphene_euler_order_t
}
graphene_plane_t = @record{
  __graphene_private_normal: graphene_vec3_t,
  __graphene_private_constant: float32
}
graphene_frustum_t = @record{
  __graphene_private_planes: [6]graphene_plane_t
}
graphene_sphere_t = @record{
  __graphene_private_center: graphene_vec3_t,
  __graphene_private_radius: float32
}
graphene_box_t = @record{
  __graphene_private_min: graphene_vec3_t,
  __graphene_private_max: graphene_vec3_t
}
graphene_triangle_t = @record{
  __graphene_private_a: graphene_vec3_t,
  __graphene_private_b: graphene_vec3_t,
  __graphene_private_c: graphene_vec3_t
}
graphene_ray_t = @record{
  __graphene_private_origin: graphene_vec3_t,
  __graphene_private_direction: graphene_vec3_t
}
global graphene_ray_intersection_kind_t: type <cimport,nodecl,using> = @enum(cint){
  GRAPHENE_RAY_INTERSECTION_KIND_NONE = 0,
  GRAPHENE_RAY_INTERSECTION_KIND_ENTER = 1,
  GRAPHENE_RAY_INTERSECTION_KIND_LEAVE = 2
}
global GskRenderer: type <cimport,nodecl,forwarddecl> = @record{}
global GskTransform: type <cimport,nodecl,forwarddecl> = @record{}
global GskRoundedRect: type <cimport,nodecl,forwarddecl> = @record{}
GskRoundedRect = @record{
  bounds: graphene_rect_t,
  corner: [4]graphene_size_t
}
global GskShaderArgsBuilder: type <cimport,nodecl,forwarddecl> = @record{}
global GskGLShader: type <cimport,nodecl,forwarddecl> = @record{}
global GskGLShaderClass: type <cimport,nodecl> = @record{
  parent_class: GObjectClass
}
global GskGLShader_autoptr: type <cimport,nodecl> = @*GskGLShader
global GskGLShader_listautoptr: type <cimport,nodecl> = @*GList
global GskGLShader_slistautoptr: type <cimport,nodecl> = @*GSList
global GskGLShader_queueautoptr: type <cimport,nodecl> = @*GQueue
global GskGLShaderClass_autoptr: type <cimport,nodecl> = @*GskGLShaderClass
global GskGLShaderClass_listautoptr: type <cimport,nodecl> = @*GList
global GskGLShaderClass_slistautoptr: type <cimport,nodecl> = @*GSList
global GskGLShaderClass_queueautoptr: type <cimport,nodecl> = @*GQueue
global GskRenderNode: type <cimport,nodecl,forwarddecl> = @record{}
global GskColorStop: type <cimport,nodecl,forwarddecl> = @record{}
global GskShadow: type <cimport,nodecl,forwarddecl> = @record{}
GskColorStop = @record{
  offset: float32,
  color: GdkRGBA
}
GskShadow = @record{
  color: GdkRGBA,
  dx: float32,
  dy: float32,
  radius: float32
}
global GskParseLocation: type <cimport,nodecl,forwarddecl> = @record{}
GskParseLocation = @record{
  bytes: gsize,
  chars: gsize,
  lines: gsize,
  line_bytes: gsize,
  line_chars: gsize
}
global GskParseErrorFunc: type <cimport,nodecl> = @function(start: *GskParseLocation, end_: *GskParseLocation, error: *GError, user_data: gpointer): void
global GskDebugNode: type <cimport,nodecl,forwarddecl> = @record{}
global GskColorNode: type <cimport,nodecl,forwarddecl> = @record{}
global GskTextureNode: type <cimport,nodecl,forwarddecl> = @record{}
global GskLinearGradientNode: type <cimport,nodecl,forwarddecl> = @record{}
global GskRepeatingLinearGradientNode: type <cimport,nodecl,forwarddecl> = @record{}
global GskRadialGradientNode: type <cimport,nodecl,forwarddecl> = @record{}
global GskRepeatingRadialGradientNode: type <cimport,nodecl,forwarddecl> = @record{}
global GskConicGradientNode: type <cimport,nodecl,forwarddecl> = @record{}
global GskBorderNode: type <cimport,nodecl,forwarddecl> = @record{}
global GskInsetShadowNode: type <cimport,nodecl,forwarddecl> = @record{}
global GskOutsetShadowNode: type <cimport,nodecl,forwarddecl> = @record{}
global GskCairoNode: type <cimport,nodecl,forwarddecl> = @record{}
global GskContainerNode: type <cimport,nodecl,forwarddecl> = @record{}
global GskTransformNode: type <cimport,nodecl,forwarddecl> = @record{}
global GskOpacityNode: type <cimport,nodecl,forwarddecl> = @record{}
global GskColorMatrixNode: type <cimport,nodecl,forwarddecl> = @record{}
global GskRepeatNode: type <cimport,nodecl,forwarddecl> = @record{}
global GskClipNode: type <cimport,nodecl,forwarddecl> = @record{}
global GskRoundedClipNode: type <cimport,nodecl,forwarddecl> = @record{}
global GskShadowNode: type <cimport,nodecl,forwarddecl> = @record{}
global GskBlendNode: type <cimport,nodecl,forwarddecl> = @record{}
global GskCrossFadeNode: type <cimport,nodecl,forwarddecl> = @record{}
global GskTextNode: type <cimport,nodecl,forwarddecl> = @record{}
global GskBlurNode: type <cimport,nodecl,forwarddecl> = @record{}
global GskGLShaderNode: type <cimport,nodecl,forwarddecl> = @record{}
global GskRendererClass: type <cimport,nodecl,forwarddecl> = @record{}
global GskCairoRenderer: type <cimport,nodecl,forwarddecl> = @record{}
global GskCairoRendererClass: type <cimport,nodecl,forwarddecl> = @record{}
global GskRenderer_autoptr: type <cimport,nodecl> = @*GskRenderer
global GskRenderer_listautoptr: type <cimport,nodecl> = @*GList
global GskRenderer_slistautoptr: type <cimport,nodecl> = @*GSList
global GskRenderer_queueautoptr: type <cimport,nodecl> = @*GQueue
global GskRenderNode_autoptr: type <cimport,nodecl> = @*GskRenderNode
global GskRenderNode_listautoptr: type <cimport,nodecl> = @*GList
global GskRenderNode_slistautoptr: type <cimport,nodecl> = @*GSList
global GskRenderNode_queueautoptr: type <cimport,nodecl> = @*GQueue
global GskTransform_autoptr: type <cimport,nodecl> = @*GskTransform
global GskTransform_listautoptr: type <cimport,nodecl> = @*GList
global GskTransform_slistautoptr: type <cimport,nodecl> = @*GSList
global GskTransform_queueautoptr: type <cimport,nodecl> = @*GQueue
global GtkAlign: type <cimport,nodecl,using> = @enum(cint){
  GTK_ALIGN_FILL = 0,
  GTK_ALIGN_START = 1,
  GTK_ALIGN_END = 2,
  GTK_ALIGN_CENTER = 3,
  GTK_ALIGN_BASELINE = 4
}
global GtkArrowType: type <cimport,nodecl,using> = @enum(cint){
  GTK_ARROW_UP = 0,
  GTK_ARROW_DOWN = 1,
  GTK_ARROW_LEFT = 2,
  GTK_ARROW_RIGHT = 3,
  GTK_ARROW_NONE = 4
}
global GtkBaselinePosition: type <cimport,nodecl,using> = @enum(cint){
  GTK_BASELINE_POSITION_TOP = 0,
  GTK_BASELINE_POSITION_CENTER = 1,
  GTK_BASELINE_POSITION_BOTTOM = 2
}
global GtkDeleteType: type <cimport,nodecl,using> = @enum(cint){
  GTK_DELETE_CHARS = 0,
  GTK_DELETE_WORD_ENDS = 1,
  GTK_DELETE_WORDS = 2,
  GTK_DELETE_DISPLAY_LINES = 3,
  GTK_DELETE_DISPLAY_LINE_ENDS = 4,
  GTK_DELETE_PARAGRAPH_ENDS = 5,
  GTK_DELETE_PARAGRAPHS = 6,
  GTK_DELETE_WHITESPACE = 7
}
global GtkDirectionType: type <cimport,nodecl,using> = @enum(cint){
  GTK_DIR_TAB_FORWARD = 0,
  GTK_DIR_TAB_BACKWARD = 1,
  GTK_DIR_UP = 2,
  GTK_DIR_DOWN = 3,
  GTK_DIR_LEFT = 4,
  GTK_DIR_RIGHT = 5
}
global GtkIconSize: type <cimport,nodecl,using> = @enum(cint){
  GTK_ICON_SIZE_INHERIT = 0,
  GTK_ICON_SIZE_NORMAL = 1,
  GTK_ICON_SIZE_LARGE = 2
}
global GtkSensitivityType: type <cimport,nodecl,using> = @enum(cint){
  GTK_SENSITIVITY_AUTO = 0,
  GTK_SENSITIVITY_ON = 1,
  GTK_SENSITIVITY_OFF = 2
}
global GtkTextDirection: type <cimport,nodecl,using> = @enum(cint){
  GTK_TEXT_DIR_NONE = 0,
  GTK_TEXT_DIR_LTR = 1,
  GTK_TEXT_DIR_RTL = 2
}
global GtkJustification: type <cimport,nodecl,using> = @enum(cint){
  GTK_JUSTIFY_LEFT = 0,
  GTK_JUSTIFY_RIGHT = 1,
  GTK_JUSTIFY_CENTER = 2,
  GTK_JUSTIFY_FILL = 3
}
global GtkMessageType: type <cimport,nodecl,using> = @enum(cint){
  GTK_MESSAGE_INFO = 0,
  GTK_MESSAGE_WARNING = 1,
  GTK_MESSAGE_QUESTION = 2,
  GTK_MESSAGE_ERROR = 3,
  GTK_MESSAGE_OTHER = 4
}
global GtkMovementStep: type <cimport,nodecl,using> = @enum(cint){
  GTK_MOVEMENT_LOGICAL_POSITIONS = 0,
  GTK_MOVEMENT_VISUAL_POSITIONS = 1,
  GTK_MOVEMENT_WORDS = 2,
  GTK_MOVEMENT_DISPLAY_LINES = 3,
  GTK_MOVEMENT_DISPLAY_LINE_ENDS = 4,
  GTK_MOVEMENT_PARAGRAPHS = 5,
  GTK_MOVEMENT_PARAGRAPH_ENDS = 6,
  GTK_MOVEMENT_PAGES = 7,
  GTK_MOVEMENT_BUFFER_ENDS = 8,
  GTK_MOVEMENT_HORIZONTAL_PAGES = 9
}
global GtkNaturalWrapMode: type <cimport,nodecl,using> = @enum(cint){
  GTK_NATURAL_WRAP_INHERIT = 0,
  GTK_NATURAL_WRAP_NONE = 1,
  GTK_NATURAL_WRAP_WORD = 2
}
global GtkScrollStep: type <cimport,nodecl,using> = @enum(cint){
  GTK_SCROLL_STEPS = 0,
  GTK_SCROLL_PAGES = 1,
  GTK_SCROLL_ENDS = 2,
  GTK_SCROLL_HORIZONTAL_STEPS = 3,
  GTK_SCROLL_HORIZONTAL_PAGES = 4,
  GTK_SCROLL_HORIZONTAL_ENDS = 5
}
global GtkOrientation: type <cimport,nodecl,using> = @enum(cint){
  GTK_ORIENTATION_HORIZONTAL = 0,
  GTK_ORIENTATION_VERTICAL = 1
}
global GtkOverflow: type <cimport,nodecl,using> = @enum(cint){
  GTK_OVERFLOW_VISIBLE = 0,
  GTK_OVERFLOW_HIDDEN = 1
}
global GtkPackType: type <cimport,nodecl,using> = @enum(cint){
  GTK_PACK_START = 0,
  GTK_PACK_END = 1
}
global GtkPositionType: type <cimport,nodecl,using> = @enum(cint){
  GTK_POS_LEFT = 0,
  GTK_POS_RIGHT = 1,
  GTK_POS_TOP = 2,
  GTK_POS_BOTTOM = 3
}
global GtkScrollType: type <cimport,nodecl,using> = @enum(cint){
  GTK_SCROLL_NONE = 0,
  GTK_SCROLL_JUMP = 1,
  GTK_SCROLL_STEP_BACKWARD = 2,
  GTK_SCROLL_STEP_FORWARD = 3,
  GTK_SCROLL_PAGE_BACKWARD = 4,
  GTK_SCROLL_PAGE_FORWARD = 5,
  GTK_SCROLL_STEP_UP = 6,
  GTK_SCROLL_STEP_DOWN = 7,
  GTK_SCROLL_PAGE_UP = 8,
  GTK_SCROLL_PAGE_DOWN = 9,
  GTK_SCROLL_STEP_LEFT = 10,
  GTK_SCROLL_STEP_RIGHT = 11,
  GTK_SCROLL_PAGE_LEFT = 12,
  GTK_SCROLL_PAGE_RIGHT = 13,
  GTK_SCROLL_START = 14,
  GTK_SCROLL_END = 15
}
global GtkSelectionMode: type <cimport,nodecl,using> = @enum(cint){
  GTK_SELECTION_NONE = 0,
  GTK_SELECTION_SINGLE = 1,
  GTK_SELECTION_BROWSE = 2,
  GTK_SELECTION_MULTIPLE = 3
}
global GtkWrapMode: type <cimport,nodecl,using> = @enum(cint){
  GTK_WRAP_NONE = 0,
  GTK_WRAP_CHAR = 1,
  GTK_WRAP_WORD = 2,
  GTK_WRAP_WORD_CHAR = 3
}
global GtkSortType: type <cimport,nodecl,using> = @enum(cint){
  GTK_SORT_ASCENDING = 0,
  GTK_SORT_DESCENDING = 1
}
global GtkPrintPages: type <cimport,nodecl,using> = @enum(cint){
  GTK_PRINT_PAGES_ALL = 0,
  GTK_PRINT_PAGES_CURRENT = 1,
  GTK_PRINT_PAGES_RANGES = 2,
  GTK_PRINT_PAGES_SELECTION = 3
}
global GtkPageSet: type <cimport,nodecl,using> = @enum(cint){
  GTK_PAGE_SET_ALL = 0,
  GTK_PAGE_SET_EVEN = 1,
  GTK_PAGE_SET_ODD = 2
}
global GtkNumberUpLayout: type <cimport,nodecl,using> = @enum(cint){
  GTK_NUMBER_UP_LAYOUT_LEFT_TO_RIGHT_TOP_TO_BOTTOM = 0,
  GTK_NUMBER_UP_LAYOUT_LEFT_TO_RIGHT_BOTTOM_TO_TOP = 1,
  GTK_NUMBER_UP_LAYOUT_RIGHT_TO_LEFT_TOP_TO_BOTTOM = 2,
  GTK_NUMBER_UP_LAYOUT_RIGHT_TO_LEFT_BOTTOM_TO_TOP = 3,
  GTK_NUMBER_UP_LAYOUT_TOP_TO_BOTTOM_LEFT_TO_RIGHT = 4,
  GTK_NUMBER_UP_LAYOUT_TOP_TO_BOTTOM_RIGHT_TO_LEFT = 5,
  GTK_NUMBER_UP_LAYOUT_BOTTOM_TO_TOP_LEFT_TO_RIGHT = 6,
  GTK_NUMBER_UP_LAYOUT_BOTTOM_TO_TOP_RIGHT_TO_LEFT = 7
}
global GtkOrdering: type <cimport,nodecl,using> = @enum(cint){
  GTK_ORDERING_SMALLER = -1,
  GTK_ORDERING_EQUAL = 0,
  GTK_ORDERING_LARGER = 1
}
global GtkPageOrientation: type <cimport,nodecl,using> = @enum(cint){
  GTK_PAGE_ORIENTATION_PORTRAIT = 0,
  GTK_PAGE_ORIENTATION_LANDSCAPE = 1,
  GTK_PAGE_ORIENTATION_REVERSE_PORTRAIT = 2,
  GTK_PAGE_ORIENTATION_REVERSE_LANDSCAPE = 3
}
global GtkPrintQuality: type <cimport,nodecl,using> = @enum(cint){
  GTK_PRINT_QUALITY_LOW = 0,
  GTK_PRINT_QUALITY_NORMAL = 1,
  GTK_PRINT_QUALITY_HIGH = 2,
  GTK_PRINT_QUALITY_DRAFT = 3
}
global GtkPrintDuplex: type <cimport,nodecl,using> = @enum(cint){
  GTK_PRINT_DUPLEX_SIMPLEX = 0,
  GTK_PRINT_DUPLEX_HORIZONTAL = 1,
  GTK_PRINT_DUPLEX_VERTICAL = 2
}
global GtkUnit: type <cimport,nodecl,using> = @enum(cint){
  GTK_UNIT_NONE = 0,
  GTK_UNIT_POINTS = 1,
  GTK_UNIT_INCH = 2,
  GTK_UNIT_MM = 3
}
global GtkTreeViewGridLines: type <cimport,nodecl,using> = @enum(cint){
  GTK_TREE_VIEW_GRID_LINES_NONE = 0,
  GTK_TREE_VIEW_GRID_LINES_HORIZONTAL = 1,
  GTK_TREE_VIEW_GRID_LINES_VERTICAL = 2,
  GTK_TREE_VIEW_GRID_LINES_BOTH = 3
}
global GtkSizeGroupMode: type <cimport,nodecl,using> = @enum(cint){
  GTK_SIZE_GROUP_NONE = 0,
  GTK_SIZE_GROUP_HORIZONTAL = 1,
  GTK_SIZE_GROUP_VERTICAL = 2,
  GTK_SIZE_GROUP_BOTH = 3
}
global GtkSizeRequestMode: type <cimport,nodecl,using> = @enum(cint){
  GTK_SIZE_REQUEST_HEIGHT_FOR_WIDTH = 0,
  GTK_SIZE_REQUEST_WIDTH_FOR_HEIGHT = 1,
  GTK_SIZE_REQUEST_CONSTANT_SIZE = 2
}
global GtkScrollablePolicy: type <cimport,nodecl,using> = @enum(cint){
  GTK_SCROLL_MINIMUM = 0,
  GTK_SCROLL_NATURAL = 1
}
global GtkStateFlags: type <cimport,nodecl,using> = @enum(cint){
  GTK_STATE_FLAG_NORMAL = 0,
  GTK_STATE_FLAG_ACTIVE = 1,
  GTK_STATE_FLAG_PRELIGHT = 2,
  GTK_STATE_FLAG_SELECTED = 4,
  GTK_STATE_FLAG_INSENSITIVE = 8,
  GTK_STATE_FLAG_INCONSISTENT = 16,
  GTK_STATE_FLAG_FOCUSED = 32,
  GTK_STATE_FLAG_BACKDROP = 64,
  GTK_STATE_FLAG_DIR_LTR = 128,
  GTK_STATE_FLAG_DIR_RTL = 256,
  GTK_STATE_FLAG_LINK = 512,
  GTK_STATE_FLAG_VISITED = 1024,
  GTK_STATE_FLAG_CHECKED = 2048,
  GTK_STATE_FLAG_DROP_ACTIVE = 4096,
  GTK_STATE_FLAG_FOCUS_VISIBLE = 8192,
  GTK_STATE_FLAG_FOCUS_WITHIN = 16384
}
global GtkBorderStyle: type <cimport,nodecl,using> = @enum(cint){
  GTK_BORDER_STYLE_NONE = 0,
  GTK_BORDER_STYLE_HIDDEN = 1,
  GTK_BORDER_STYLE_SOLID = 2,
  GTK_BORDER_STYLE_INSET = 3,
  GTK_BORDER_STYLE_OUTSET = 4,
  GTK_BORDER_STYLE_DOTTED = 5,
  GTK_BORDER_STYLE_DASHED = 6,
  GTK_BORDER_STYLE_DOUBLE = 7,
  GTK_BORDER_STYLE_GROOVE = 8,
  GTK_BORDER_STYLE_RIDGE = 9
}
global GtkLevelBarMode: type <cimport,nodecl,using> = @enum(cint){
  GTK_LEVEL_BAR_MODE_CONTINUOUS = 0,
  GTK_LEVEL_BAR_MODE_DISCRETE = 1
}
global GtkInputPurpose: type <cimport,nodecl,using> = @enum(cint){
  GTK_INPUT_PURPOSE_FREE_FORM = 0,
  GTK_INPUT_PURPOSE_ALPHA = 1,
  GTK_INPUT_PURPOSE_DIGITS = 2,
  GTK_INPUT_PURPOSE_NUMBER = 3,
  GTK_INPUT_PURPOSE_PHONE = 4,
  GTK_INPUT_PURPOSE_URL = 5,
  GTK_INPUT_PURPOSE_EMAIL = 6,
  GTK_INPUT_PURPOSE_NAME = 7,
  GTK_INPUT_PURPOSE_PASSWORD = 8,
  GTK_INPUT_PURPOSE_PIN = 9,
  GTK_INPUT_PURPOSE_TERMINAL = 10
}
global GtkInputHints: type <cimport,nodecl,using> = @enum(cint){
  GTK_INPUT_HINT_NONE = 0,
  GTK_INPUT_HINT_SPELLCHECK = 1,
  GTK_INPUT_HINT_NO_SPELLCHECK = 2,
  GTK_INPUT_HINT_WORD_COMPLETION = 4,
  GTK_INPUT_HINT_LOWERCASE = 8,
  GTK_INPUT_HINT_UPPERCASE_CHARS = 16,
  GTK_INPUT_HINT_UPPERCASE_WORDS = 32,
  GTK_INPUT_HINT_UPPERCASE_SENTENCES = 64,
  GTK_INPUT_HINT_INHIBIT_OSK = 128,
  GTK_INPUT_HINT_VERTICAL_WRITING = 256,
  GTK_INPUT_HINT_EMOJI = 512,
  GTK_INPUT_HINT_NO_EMOJI = 1024,
  GTK_INPUT_HINT_PRIVATE = 2048
}
global GtkPropagationPhase: type <cimport,nodecl,using> = @enum(cint){
  GTK_PHASE_NONE = 0,
  GTK_PHASE_CAPTURE = 1,
  GTK_PHASE_BUBBLE = 2,
  GTK_PHASE_TARGET = 3
}
global GtkPropagationLimit: type <cimport,nodecl,using> = @enum(cint){
  GTK_LIMIT_NONE = 0,
  GTK_LIMIT_SAME_NATIVE = 1
}
global GtkEventSequenceState: type <cimport,nodecl,using> = @enum(cint){
  GTK_EVENT_SEQUENCE_NONE = 0,
  GTK_EVENT_SEQUENCE_CLAIMED = 1,
  GTK_EVENT_SEQUENCE_DENIED = 2
}
global GtkPanDirection: type <cimport,nodecl,using> = @enum(cint){
  GTK_PAN_DIRECTION_LEFT = 0,
  GTK_PAN_DIRECTION_RIGHT = 1,
  GTK_PAN_DIRECTION_UP = 2,
  GTK_PAN_DIRECTION_DOWN = 3
}
global GtkShortcutScope: type <cimport,nodecl,using> = @enum(cint){
  GTK_SHORTCUT_SCOPE_LOCAL = 0,
  GTK_SHORTCUT_SCOPE_MANAGED = 1,
  GTK_SHORTCUT_SCOPE_GLOBAL = 2
}
global GtkPickFlags: type <cimport,nodecl,using> = @enum(cint){
  GTK_PICK_DEFAULT = 0,
  GTK_PICK_INSENSITIVE = 1,
  GTK_PICK_NON_TARGETABLE = 2
}
global GtkConstraintRelation: type <cimport,nodecl,using> = @enum(cint){
  GTK_CONSTRAINT_RELATION_LE = -1,
  GTK_CONSTRAINT_RELATION_EQ = 0,
  GTK_CONSTRAINT_RELATION_GE = 1
}
global GtkConstraintStrength: type <cimport,nodecl,using> = @enum(cint){
  GTK_CONSTRAINT_STRENGTH_REQUIRED = 1001001000,
  GTK_CONSTRAINT_STRENGTH_STRONG = 1000000000,
  GTK_CONSTRAINT_STRENGTH_MEDIUM = 1000,
  GTK_CONSTRAINT_STRENGTH_WEAK = 1
}
global GtkConstraintAttribute: type <cimport,nodecl,using> = @enum(cint){
  GTK_CONSTRAINT_ATTRIBUTE_NONE = 0,
  GTK_CONSTRAINT_ATTRIBUTE_LEFT = 1,
  GTK_CONSTRAINT_ATTRIBUTE_RIGHT = 2,
  GTK_CONSTRAINT_ATTRIBUTE_TOP = 3,
  GTK_CONSTRAINT_ATTRIBUTE_BOTTOM = 4,
  GTK_CONSTRAINT_ATTRIBUTE_START = 5,
  GTK_CONSTRAINT_ATTRIBUTE_END = 6,
  GTK_CONSTRAINT_ATTRIBUTE_WIDTH = 7,
  GTK_CONSTRAINT_ATTRIBUTE_HEIGHT = 8,
  GTK_CONSTRAINT_ATTRIBUTE_CENTER_X = 9,
  GTK_CONSTRAINT_ATTRIBUTE_CENTER_Y = 10,
  GTK_CONSTRAINT_ATTRIBUTE_BASELINE = 11
}
global GtkConstraintVflParserError: type <cimport,nodecl,using> = @enum(cint){
  GTK_CONSTRAINT_VFL_PARSER_ERROR_INVALID_SYMBOL = 0,
  GTK_CONSTRAINT_VFL_PARSER_ERROR_INVALID_ATTRIBUTE = 1,
  GTK_CONSTRAINT_VFL_PARSER_ERROR_INVALID_VIEW = 2,
  GTK_CONSTRAINT_VFL_PARSER_ERROR_INVALID_METRIC = 3,
  GTK_CONSTRAINT_VFL_PARSER_ERROR_INVALID_PRIORITY = 4,
  GTK_CONSTRAINT_VFL_PARSER_ERROR_INVALID_RELATION = 5
}
global GtkSystemSetting: type <cimport,nodecl,using> = @enum(cint){
  GTK_SYSTEM_SETTING_DPI = 0,
  GTK_SYSTEM_SETTING_FONT_NAME = 1,
  GTK_SYSTEM_SETTING_FONT_CONFIG = 2,
  GTK_SYSTEM_SETTING_DISPLAY = 3,
  GTK_SYSTEM_SETTING_ICON_THEME = 4
}
global GtkSymbolicColor: type <cimport,nodecl,using> = @enum(cint){
  GTK_SYMBOLIC_COLOR_FOREGROUND = 0,
  GTK_SYMBOLIC_COLOR_ERROR = 1,
  GTK_SYMBOLIC_COLOR_WARNING = 2,
  GTK_SYMBOLIC_COLOR_SUCCESS = 3
}
global GtkAccessibleRole: type <cimport,nodecl,using> = @enum(cint){
  GTK_ACCESSIBLE_ROLE_ALERT = 0,
  GTK_ACCESSIBLE_ROLE_ALERT_DIALOG = 1,
  GTK_ACCESSIBLE_ROLE_BANNER = 2,
  GTK_ACCESSIBLE_ROLE_BUTTON = 3,
  GTK_ACCESSIBLE_ROLE_CAPTION = 4,
  GTK_ACCESSIBLE_ROLE_CELL = 5,
  GTK_ACCESSIBLE_ROLE_CHECKBOX = 6,
  GTK_ACCESSIBLE_ROLE_COLUMN_HEADER = 7,
  GTK_ACCESSIBLE_ROLE_COMBO_BOX = 8,
  GTK_ACCESSIBLE_ROLE_COMMAND = 9,
  GTK_ACCESSIBLE_ROLE_COMPOSITE = 10,
  GTK_ACCESSIBLE_ROLE_DIALOG = 11,
  GTK_ACCESSIBLE_ROLE_DOCUMENT = 12,
  GTK_ACCESSIBLE_ROLE_FEED = 13,
  GTK_ACCESSIBLE_ROLE_FORM = 14,
  GTK_ACCESSIBLE_ROLE_GENERIC = 15,
  GTK_ACCESSIBLE_ROLE_GRID = 16,
  GTK_ACCESSIBLE_ROLE_GRID_CELL = 17,
  GTK_ACCESSIBLE_ROLE_GROUP = 18,
  GTK_ACCESSIBLE_ROLE_HEADING = 19,
  GTK_ACCESSIBLE_ROLE_IMG = 20,
  GTK_ACCESSIBLE_ROLE_INPUT = 21,
  GTK_ACCESSIBLE_ROLE_LABEL = 22,
  GTK_ACCESSIBLE_ROLE_LANDMARK = 23,
  GTK_ACCESSIBLE_ROLE_LEGEND = 24,
  GTK_ACCESSIBLE_ROLE_LINK = 25,
  GTK_ACCESSIBLE_ROLE_LIST = 26,
  GTK_ACCESSIBLE_ROLE_LIST_BOX = 27,
  GTK_ACCESSIBLE_ROLE_LIST_ITEM = 28,
  GTK_ACCESSIBLE_ROLE_LOG = 29,
  GTK_ACCESSIBLE_ROLE_MAIN = 30,
  GTK_ACCESSIBLE_ROLE_MARQUEE = 31,
  GTK_ACCESSIBLE_ROLE_MATH = 32,
  GTK_ACCESSIBLE_ROLE_METER = 33,
  GTK_ACCESSIBLE_ROLE_MENU = 34,
  GTK_ACCESSIBLE_ROLE_MENU_BAR = 35,
  GTK_ACCESSIBLE_ROLE_MENU_ITEM = 36,
  GTK_ACCESSIBLE_ROLE_MENU_ITEM_CHECKBOX = 37,
  GTK_ACCESSIBLE_ROLE_MENU_ITEM_RADIO = 38,
  GTK_ACCESSIBLE_ROLE_NAVIGATION = 39,
  GTK_ACCESSIBLE_ROLE_NONE = 40,
  GTK_ACCESSIBLE_ROLE_NOTE = 41,
  GTK_ACCESSIBLE_ROLE_OPTION = 42,
  GTK_ACCESSIBLE_ROLE_PRESENTATION = 43,
  GTK_ACCESSIBLE_ROLE_PROGRESS_BAR = 44,
  GTK_ACCESSIBLE_ROLE_RADIO = 45,
  GTK_ACCESSIBLE_ROLE_RADIO_GROUP = 46,
  GTK_ACCESSIBLE_ROLE_RANGE = 47,
  GTK_ACCESSIBLE_ROLE_REGION = 48,
  GTK_ACCESSIBLE_ROLE_ROW = 49,
  GTK_ACCESSIBLE_ROLE_ROW_GROUP = 50,
  GTK_ACCESSIBLE_ROLE_ROW_HEADER = 51,
  GTK_ACCESSIBLE_ROLE_SCROLLBAR = 52,
  GTK_ACCESSIBLE_ROLE_SEARCH = 53,
  GTK_ACCESSIBLE_ROLE_SEARCH_BOX = 54,
  GTK_ACCESSIBLE_ROLE_SECTION = 55,
  GTK_ACCESSIBLE_ROLE_SECTION_HEAD = 56,
  GTK_ACCESSIBLE_ROLE_SELECT = 57,
  GTK_ACCESSIBLE_ROLE_SEPARATOR = 58,
  GTK_ACCESSIBLE_ROLE_SLIDER = 59,
  GTK_ACCESSIBLE_ROLE_SPIN_BUTTON = 60,
  GTK_ACCESSIBLE_ROLE_STATUS = 61,
  GTK_ACCESSIBLE_ROLE_STRUCTURE = 62,
  GTK_ACCESSIBLE_ROLE_SWITCH = 63,
  GTK_ACCESSIBLE_ROLE_TAB = 64,
  GTK_ACCESSIBLE_ROLE_TABLE = 65,
  GTK_ACCESSIBLE_ROLE_TAB_LIST = 66,
  GTK_ACCESSIBLE_ROLE_TAB_PANEL = 67,
  GTK_ACCESSIBLE_ROLE_TEXT_BOX = 68,
  GTK_ACCESSIBLE_ROLE_TIME = 69,
  GTK_ACCESSIBLE_ROLE_TIMER = 70,
  GTK_ACCESSIBLE_ROLE_TOOLBAR = 71,
  GTK_ACCESSIBLE_ROLE_TOOLTIP = 72,
  GTK_ACCESSIBLE_ROLE_TREE = 73,
  GTK_ACCESSIBLE_ROLE_TREE_GRID = 74,
  GTK_ACCESSIBLE_ROLE_TREE_ITEM = 75,
  GTK_ACCESSIBLE_ROLE_WIDGET = 76,
  GTK_ACCESSIBLE_ROLE_WINDOW = 77
}
global GtkAccessibleState: type <cimport,nodecl,using> = @enum(cint){
  GTK_ACCESSIBLE_STATE_BUSY = 0,
  GTK_ACCESSIBLE_STATE_CHECKED = 1,
  GTK_ACCESSIBLE_STATE_DISABLED = 2,
  GTK_ACCESSIBLE_STATE_EXPANDED = 3,
  GTK_ACCESSIBLE_STATE_HIDDEN = 4,
  GTK_ACCESSIBLE_STATE_INVALID = 5,
  GTK_ACCESSIBLE_STATE_PRESSED = 6,
  GTK_ACCESSIBLE_STATE_SELECTED = 7
}
global GtkAccessibleProperty: type <cimport,nodecl,using> = @enum(cint){
  GTK_ACCESSIBLE_PROPERTY_AUTOCOMPLETE = 0,
  GTK_ACCESSIBLE_PROPERTY_DESCRIPTION = 1,
  GTK_ACCESSIBLE_PROPERTY_HAS_POPUP = 2,
  GTK_ACCESSIBLE_PROPERTY_KEY_SHORTCUTS = 3,
  GTK_ACCESSIBLE_PROPERTY_LABEL = 4,
  GTK_ACCESSIBLE_PROPERTY_LEVEL = 5,
  GTK_ACCESSIBLE_PROPERTY_MODAL = 6,
  GTK_ACCESSIBLE_PROPERTY_MULTI_LINE = 7,
  GTK_ACCESSIBLE_PROPERTY_MULTI_SELECTABLE = 8,
  GTK_ACCESSIBLE_PROPERTY_ORIENTATION = 9,
  GTK_ACCESSIBLE_PROPERTY_PLACEHOLDER = 10,
  GTK_ACCESSIBLE_PROPERTY_READ_ONLY = 11,
  GTK_ACCESSIBLE_PROPERTY_REQUIRED = 12,
  GTK_ACCESSIBLE_PROPERTY_ROLE_DESCRIPTION = 13,
  GTK_ACCESSIBLE_PROPERTY_SORT = 14,
  GTK_ACCESSIBLE_PROPERTY_VALUE_MAX = 15,
  GTK_ACCESSIBLE_PROPERTY_VALUE_MIN = 16,
  GTK_ACCESSIBLE_PROPERTY_VALUE_NOW = 17,
  GTK_ACCESSIBLE_PROPERTY_VALUE_TEXT = 18
}
global GtkAccessibleRelation: type <cimport,nodecl,using> = @enum(cint){
  GTK_ACCESSIBLE_RELATION_ACTIVE_DESCENDANT = 0,
  GTK_ACCESSIBLE_RELATION_COL_COUNT = 1,
  GTK_ACCESSIBLE_RELATION_COL_INDEX = 2,
  GTK_ACCESSIBLE_RELATION_COL_INDEX_TEXT = 3,
  GTK_ACCESSIBLE_RELATION_COL_SPAN = 4,
  GTK_ACCESSIBLE_RELATION_CONTROLS = 5,
  GTK_ACCESSIBLE_RELATION_DESCRIBED_BY = 6,
  GTK_ACCESSIBLE_RELATION_DETAILS = 7,
  GTK_ACCESSIBLE_RELATION_ERROR_MESSAGE = 8,
  GTK_ACCESSIBLE_RELATION_FLOW_TO = 9,
  GTK_ACCESSIBLE_RELATION_LABELLED_BY = 10,
  GTK_ACCESSIBLE_RELATION_OWNS = 11,
  GTK_ACCESSIBLE_RELATION_POS_IN_SET = 12,
  GTK_ACCESSIBLE_RELATION_ROW_COUNT = 13,
  GTK_ACCESSIBLE_RELATION_ROW_INDEX = 14,
  GTK_ACCESSIBLE_RELATION_ROW_INDEX_TEXT = 15,
  GTK_ACCESSIBLE_RELATION_ROW_SPAN = 16,
  GTK_ACCESSIBLE_RELATION_SET_SIZE = 17
}
global GtkAccessibleTristate: type <cimport,nodecl,using> = @enum(cint){
  GTK_ACCESSIBLE_TRISTATE_FALSE = 0,
  GTK_ACCESSIBLE_TRISTATE_TRUE = 1,
  GTK_ACCESSIBLE_TRISTATE_MIXED = 2
}
global GtkAccessibleInvalidState: type <cimport,nodecl,using> = @enum(cint){
  GTK_ACCESSIBLE_INVALID_FALSE = 0,
  GTK_ACCESSIBLE_INVALID_TRUE = 1,
  GTK_ACCESSIBLE_INVALID_GRAMMAR = 2,
  GTK_ACCESSIBLE_INVALID_SPELLING = 3
}
global GtkAccessibleAutocomplete: type <cimport,nodecl,using> = @enum(cint){
  GTK_ACCESSIBLE_AUTOCOMPLETE_NONE = 0,
  GTK_ACCESSIBLE_AUTOCOMPLETE_INLINE = 1,
  GTK_ACCESSIBLE_AUTOCOMPLETE_LIST = 2,
  GTK_ACCESSIBLE_AUTOCOMPLETE_BOTH = 3
}
global GtkAccessibleSort: type <cimport,nodecl,using> = @enum(cint){
  GTK_ACCESSIBLE_SORT_NONE = 0,
  GTK_ACCESSIBLE_SORT_ASCENDING = 1,
  GTK_ACCESSIBLE_SORT_DESCENDING = 2,
  GTK_ACCESSIBLE_SORT_OTHER = 3
}
global GtkBorder: type <cimport,nodecl,forwarddecl> = @record{}
GtkBorder = @record{
  left: gint16,
  right: gint16,
  top: gint16,
  bottom: gint16
}
global GtkBorder_autoptr: type <cimport,nodecl> = @*GtkBorder
global GtkBorder_listautoptr: type <cimport,nodecl> = @*GList
global GtkBorder_slistautoptr: type <cimport,nodecl> = @*GSList
global GtkBorder_queueautoptr: type <cimport,nodecl> = @*GQueue
global GtkAdjustment: type <cimport,nodecl,forwarddecl> = @record{}
global GtkBitset: type <cimport,nodecl,forwarddecl> = @record{}
global GtkBuilder: type <cimport,nodecl,forwarddecl> = @record{}
global GtkBuilderScope: type <cimport,nodecl,forwarddecl> = @record{}
global GtkCssStyleChange: type <cimport,nodecl,forwarddecl> = @record{}
global GtkEventController: type <cimport,nodecl,forwarddecl> = @record{}
global GtkGesture: type <cimport,nodecl,forwarddecl> = @record{}
global GtkLayoutManager: type <cimport,nodecl,forwarddecl> = @record{}
global GtkListItem: type <cimport,nodecl,forwarddecl> = @record{}
global GtkListItemFactory: type <cimport,nodecl,forwarddecl> = @record{}
global GtkNative: type <cimport,nodecl,forwarddecl> = @record{}
global GtkRequisition: type <cimport,nodecl,forwarddecl> = @record{}
global GtkRoot: type <cimport,nodecl,forwarddecl> = @record{}
global GtkSettings: type <cimport,nodecl,forwarddecl> = @record{}
global GtkShortcut: type <cimport,nodecl,forwarddecl> = @record{}
global GtkShortcutAction: type <cimport,nodecl,forwarddecl> = @record{}
global GtkShortcutTrigger: type <cimport,nodecl,forwarddecl> = @record{}
global GtkSnapshot: type <cimport,nodecl> = @GdkSnapshot
global GtkStyleContext: type <cimport,nodecl,forwarddecl> = @record{}
global GtkTooltip: type <cimport,nodecl,forwarddecl> = @record{}
global GtkWidget: type <cimport,nodecl,forwarddecl> = @record{}
global GtkWindow: type <cimport,nodecl,forwarddecl> = @record{}
global GtkShortcutClass: type <cimport,nodecl> = @record{
  parent_class: GObjectClass
}
global GtkShortcut_autoptr: type <cimport,nodecl> = @*GtkShortcut
global GtkShortcut_listautoptr: type <cimport,nodecl> = @*GList
global GtkShortcut_slistautoptr: type <cimport,nodecl> = @*GSList
global GtkShortcut_queueautoptr: type <cimport,nodecl> = @*GQueue
global GtkShortcutClass_autoptr: type <cimport,nodecl> = @*GtkShortcutClass
global GtkShortcutClass_listautoptr: type <cimport,nodecl> = @*GList
global GtkShortcutClass_slistautoptr: type <cimport,nodecl> = @*GSList
global GtkShortcutClass_queueautoptr: type <cimport,nodecl> = @*GQueue
global GtkShortcutFunc: type <cimport,nodecl> = @function(widget: *GtkWidget, args: *GVariant, user_data: gpointer): gboolean
global GtkShortcutActionFlags: type <cimport,nodecl,using> = @enum(cint){
  GTK_SHORTCUT_ACTION_EXCLUSIVE = 1
}
global GtkShortcutActionClass: type <cimport,nodecl,forwarddecl> = @record{}
global GtkShortcutAction_autoptr: type <cimport,nodecl> = @*GtkShortcutAction
global GtkShortcutAction_listautoptr: type <cimport,nodecl> = @*GList
global GtkShortcutAction_slistautoptr: type <cimport,nodecl> = @*GSList
global GtkShortcutAction_queueautoptr: type <cimport,nodecl> = @*GQueue
global GtkShortcutActionClass_autoptr: type <cimport,nodecl> = @*GtkShortcutActionClass
global GtkShortcutActionClass_listautoptr: type <cimport,nodecl> = @*GList
global GtkShortcutActionClass_slistautoptr: type <cimport,nodecl> = @*GSList
global GtkShortcutActionClass_queueautoptr: type <cimport,nodecl> = @*GQueue
global GtkNothingAction: type <cimport,nodecl,forwarddecl> = @record{}
global GtkNothingActionClass: type <cimport,nodecl,forwarddecl> = @record{}
global GtkNothingAction_autoptr: type <cimport,nodecl> = @*GtkNothingAction
global GtkNothingAction_listautoptr: type <cimport,nodecl> = @*GList
global GtkNothingAction_slistautoptr: type <cimport,nodecl> = @*GSList
global GtkNothingAction_queueautoptr: type <cimport,nodecl> = @*GQueue
global GtkNothingActionClass_autoptr: type <cimport,nodecl> = @*GtkNothingActionClass
global GtkNothingActionClass_listautoptr: type <cimport,nodecl> = @*GList
global GtkNothingActionClass_slistautoptr: type <cimport,nodecl> = @*GSList
global GtkNothingActionClass_queueautoptr: type <cimport,nodecl> = @*GQueue
global GtkCallbackAction: type <cimport,nodecl,forwarddecl> = @record{}
global GtkCallbackActionClass: type <cimport,nodecl,forwarddecl> = @record{}
global GtkCallbackAction_autoptr: type <cimport,nodecl> = @*GtkCallbackAction
global GtkCallbackAction_listautoptr: type <cimport,nodecl> = @*GList
global GtkCallbackAction_slistautoptr: type <cimport,nodecl> = @*GSList
global GtkCallbackAction_queueautoptr: type <cimport,nodecl> = @*GQueue
global GtkCallbackActionClass_autoptr: type <cimport,nodecl> = @*GtkCallbackActionClass
global GtkCallbackActionClass_listautoptr: type <cimport,nodecl> = @*GList
global GtkCallbackActionClass_slistautoptr: type <cimport,nodecl> = @*GSList
global GtkCallbackActionClass_queueautoptr: type <cimport,nodecl> = @*GQueue
global GtkMnemonicAction: type <cimport,nodecl,forwarddecl> = @record{}
global GtkMnemonicActionClass: type <cimport,nodecl,forwarddecl> = @record{}
global GtkMnemonicAction_autoptr: type <cimport,nodecl> = @*GtkMnemonicAction
global GtkMnemonicAction_listautoptr: type <cimport,nodecl> = @*GList
global GtkMnemonicAction_slistautoptr: type <cimport,nodecl> = @*GSList
global GtkMnemonicAction_queueautoptr: type <cimport,nodecl> = @*GQueue
global GtkMnemonicActionClass_autoptr: type <cimport,nodecl> = @*GtkMnemonicActionClass
global GtkMnemonicActionClass_listautoptr: type <cimport,nodecl> = @*GList
global GtkMnemonicActionClass_slistautoptr: type <cimport,nodecl> = @*GSList
global GtkMnemonicActionClass_queueautoptr: type <cimport,nodecl> = @*GQueue
global GtkActivateAction: type <cimport,nodecl,forwarddecl> = @record{}
global GtkActivateActionClass: type <cimport,nodecl,forwarddecl> = @record{}
global GtkActivateAction_autoptr: type <cimport,nodecl> = @*GtkActivateAction
global GtkActivateAction_listautoptr: type <cimport,nodecl> = @*GList
global GtkActivateAction_slistautoptr: type <cimport,nodecl> = @*GSList
global GtkActivateAction_queueautoptr: type <cimport,nodecl> = @*GQueue
global GtkActivateActionClass_autoptr: type <cimport,nodecl> = @*GtkActivateActionClass
global GtkActivateActionClass_listautoptr: type <cimport,nodecl> = @*GList
global GtkActivateActionClass_slistautoptr: type <cimport,nodecl> = @*GSList
global GtkActivateActionClass_queueautoptr: type <cimport,nodecl> = @*GQueue
global GtkSignalAction: type <cimport,nodecl,forwarddecl> = @record{}
global GtkSignalActionClass: type <cimport,nodecl,forwarddecl> = @record{}
global GtkSignalAction_autoptr: type <cimport,nodecl> = @*GtkSignalAction
global GtkSignalAction_listautoptr: type <cimport,nodecl> = @*GList
global GtkSignalAction_slistautoptr: type <cimport,nodecl> = @*GSList
global GtkSignalAction_queueautoptr: type <cimport,nodecl> = @*GQueue
global GtkSignalActionClass_autoptr: type <cimport,nodecl> = @*GtkSignalActionClass
global GtkSignalActionClass_listautoptr: type <cimport,nodecl> = @*GList
global GtkSignalActionClass_slistautoptr: type <cimport,nodecl> = @*GSList
global GtkSignalActionClass_queueautoptr: type <cimport,nodecl> = @*GQueue
global GtkNamedAction: type <cimport,nodecl,forwarddecl> = @record{}
global GtkNamedActionClass: type <cimport,nodecl,forwarddecl> = @record{}
global GtkNamedAction_autoptr: type <cimport,nodecl> = @*GtkNamedAction
global GtkNamedAction_listautoptr: type <cimport,nodecl> = @*GList
global GtkNamedAction_slistautoptr: type <cimport,nodecl> = @*GSList
global GtkNamedAction_queueautoptr: type <cimport,nodecl> = @*GQueue
global GtkNamedActionClass_autoptr: type <cimport,nodecl> = @*GtkNamedActionClass
global GtkNamedActionClass_listautoptr: type <cimport,nodecl> = @*GList
global GtkNamedActionClass_slistautoptr: type <cimport,nodecl> = @*GSList
global GtkNamedActionClass_queueautoptr: type <cimport,nodecl> = @*GQueue
global GtkWidgetPrivate: type <cimport,nodecl,forwarddecl> = @record{}
global GtkWidgetClass: type <cimport,nodecl,forwarddecl> = @record{}
global GtkWidgetClassPrivate: type <cimport,nodecl,forwarddecl> = @record{}
global GtkAllocation: type <cimport,nodecl> = @GdkRectangle
global GtkTickCallback: type <cimport,nodecl> = @function(widget: *GtkWidget, frame_clock: *GdkFrameClock, user_data: gpointer): gboolean
GtkRequisition = @record{
  width: cint,
  height: cint
}
GtkWidget = @record{
  parent_instance: GInitiallyUnowned,
  priv: *GtkWidgetPrivate
}
GtkWidgetClass = @record{
  parent_class: GInitiallyUnownedClass,
  show: function(widget: *GtkWidget): void,
  hide: function(widget: *GtkWidget): void,
  map: function(widget: *GtkWidget): void,
  unmap: function(widget: *GtkWidget): void,
  realize: function(widget: *GtkWidget): void,
  unrealize: function(widget: *GtkWidget): void,
  root: function(widget: *GtkWidget): void,
  unroot: function(widget: *GtkWidget): void,
  size_allocate: function(widget: *GtkWidget, width: cint, height: cint, baseline: cint): void,
  state_flags_changed: function(widget: *GtkWidget, previous_state_flags: GtkStateFlags): void,
  direction_changed: function(widget: *GtkWidget, previous_direction: GtkTextDirection): void,
  get_request_mode: function(widget: *GtkWidget): GtkSizeRequestMode,
  measure: function(widget: *GtkWidget, orientation: GtkOrientation, for_size: cint, minimum: *cint, natural: *cint, minimum_baseline: *cint, natural_baseline: *cint): void,
  mnemonic_activate: function(widget: *GtkWidget, group_cycling: gboolean): gboolean,
  grab_focus: function(widget: *GtkWidget): gboolean,
  focus: function(widget: *GtkWidget, direction: GtkDirectionType): gboolean,
  set_focus_child: function(widget: *GtkWidget, child: *GtkWidget): void,
  move_focus: function(widget: *GtkWidget, direction: GtkDirectionType): void,
  keynav_failed: function(widget: *GtkWidget, direction: GtkDirectionType): gboolean,
  query_tooltip: function(widget: *GtkWidget, x: cint, y: cint, keyboard_tooltip: gboolean, tooltip: *GtkTooltip): gboolean,
  compute_expand: function(widget: *GtkWidget, hexpand_p: *gboolean, vexpand_p: *gboolean): void,
  css_changed: function(widget: *GtkWidget, change: *GtkCssStyleChange): void,
  system_setting_changed: function(widget: *GtkWidget, settings: GtkSystemSetting): void,
  snapshot: function(widget: *GtkWidget, snapshot: *GtkSnapshot): void,
  contains: function(widget: *GtkWidget, x: float64, y: float64): gboolean,
  priv: *GtkWidgetClassPrivate,
  padding: [8]gpointer
}
global GtkWidgetActionActivateFunc: type <cimport,nodecl> = @function(widget: *GtkWidget, action_name: cstring, parameter: *GVariant): void
global GtkWidget_autoptr: type <cimport,nodecl> = @*GtkWidget
global GtkWidget_listautoptr: type <cimport,nodecl> = @*GList
global GtkWidget_slistautoptr: type <cimport,nodecl> = @*GSList
global GtkWidget_queueautoptr: type <cimport,nodecl> = @*GQueue
global GtkRequisition_autoptr: type <cimport,nodecl> = @*GtkRequisition
global GtkRequisition_listautoptr: type <cimport,nodecl> = @*GList
global GtkRequisition_slistautoptr: type <cimport,nodecl> = @*GSList
global GtkRequisition_queueautoptr: type <cimport,nodecl> = @*GQueue
global GtkApplication: type <cimport,nodecl,forwarddecl> = @record{}
global GtkApplicationClass: type <cimport,nodecl,forwarddecl> = @record{}
GtkApplication = @record{
  parent_instance: GApplication
}
GtkApplicationClass = @record{
  parent_class: GApplicationClass,
  window_added: function(application: *GtkApplication, window: *GtkWindow): void,
  window_removed: function(application: *GtkApplication, window: *GtkWindow): void,
  padding: [8]gpointer
}
global GtkApplicationInhibitFlags: type <cimport,nodecl,using> = @enum(cint){
  GTK_APPLICATION_INHIBIT_LOGOUT = 1,
  GTK_APPLICATION_INHIBIT_SWITCH = 2,
  GTK_APPLICATION_INHIBIT_SUSPEND = 4,
  GTK_APPLICATION_INHIBIT_IDLE = 8
}
global GtkApplication_autoptr: type <cimport,nodecl> = @*GtkApplication
global GtkApplication_listautoptr: type <cimport,nodecl> = @*GList
global GtkApplication_slistautoptr: type <cimport,nodecl> = @*GSList
global GtkApplication_queueautoptr: type <cimport,nodecl> = @*GQueue
global GtkWindowClass: type <cimport,nodecl,forwarddecl> = @record{}
global GtkWindowGroup: type <cimport,nodecl,forwarddecl> = @record{}
global GtkWindowGroupClass: type <cimport,nodecl,forwarddecl> = @record{}
global GtkWindowGroupPrivate: type <cimport,nodecl,forwarddecl> = @record{}
GtkWindow = @record{
  parent_instance: GtkWidget
}
GtkWindowClass = @record{
  parent_class: GtkWidgetClass,
  activate_focus: function(window: *GtkWindow): void,
  activate_default: function(window: *GtkWindow): void,
  keys_changed: function(window: *GtkWindow): void,
  enable_debugging: function(window: *GtkWindow, toggle: gboolean): gboolean,
  close_request: function(window: *GtkWindow): gboolean,
  padding: [8]gpointer
}
global GtkWindow_autoptr: type <cimport,nodecl> = @*GtkWindow
global GtkWindow_listautoptr: type <cimport,nodecl> = @*GList
global GtkWindow_slistautoptr: type <cimport,nodecl> = @*GSList
global GtkWindow_queueautoptr: type <cimport,nodecl> = @*GQueue
global GtkWindowGroup_autoptr: type <cimport,nodecl> = @*GtkWindowGroup
global GtkWindowGroup_listautoptr: type <cimport,nodecl> = @*GList
global GtkWindowGroup_slistautoptr: type <cimport,nodecl> = @*GSList
global GtkWindowGroup_queueautoptr: type <cimport,nodecl> = @*GQueue
global GtkAboutDialog: type <cimport,nodecl,forwarddecl> = @record{}
global GtkLicense: type <cimport,nodecl,using> = @enum(cint){
  GTK_LICENSE_UNKNOWN = 0,
  GTK_LICENSE_CUSTOM = 1,
  GTK_LICENSE_GPL_2_0 = 2,
  GTK_LICENSE_GPL_3_0 = 3,
  GTK_LICENSE_LGPL_2_1 = 4,
  GTK_LICENSE_LGPL_3_0 = 5,
  GTK_LICENSE_BSD = 6,
  GTK_LICENSE_MIT_X11 = 7,
  GTK_LICENSE_ARTISTIC = 8,
  GTK_LICENSE_GPL_2_0_ONLY = 9,
  GTK_LICENSE_GPL_3_0_ONLY = 10,
  GTK_LICENSE_LGPL_2_1_ONLY = 11,
  GTK_LICENSE_LGPL_3_0_ONLY = 12,
  GTK_LICENSE_AGPL_3_0 = 13,
  GTK_LICENSE_AGPL_3_0_ONLY = 14,
  GTK_LICENSE_BSD_3 = 15,
  GTK_LICENSE_APACHE_2_0 = 16,
  GTK_LICENSE_MPL_2_0 = 17
}
global GtkAboutDialog_autoptr: type <cimport,nodecl> = @*GtkAboutDialog
global GtkAboutDialog_listautoptr: type <cimport,nodecl> = @*GList
global GtkAboutDialog_slistautoptr: type <cimport,nodecl> = @*GSList
global GtkAboutDialog_queueautoptr: type <cimport,nodecl> = @*GQueue
global GtkAccessible: type <cimport,nodecl,forwarddecl> = @record{}
global GtkAccessibleInterface: type <cimport,nodecl,forwarddecl> = @record{}
global GtkAccessible_autoptr: type <cimport,nodecl> = @*GtkAccessible
global GtkAccessible_listautoptr: type <cimport,nodecl> = @*GList
global GtkAccessible_slistautoptr: type <cimport,nodecl> = @*GSList
global GtkAccessible_queueautoptr: type <cimport,nodecl> = @*GQueue
global GtkActionableInterface: type <cimport,nodecl,forwarddecl> = @record{}
global GtkActionable: type <cimport,nodecl,forwarddecl> = @record{}
GtkActionableInterface = @record{
  g_iface: GTypeInterface,
  get_action_name: function(actionable: *GtkActionable): cstring,
  set_action_name: function(actionable: *GtkActionable, action_name: cstring): void,
  get_action_target_value: function(actionable: *GtkActionable): *GVariant,
  set_action_target_value: function(actionable: *GtkActionable, target_value: *GVariant): void
}
global GtkActionBar: type <cimport,nodecl,forwarddecl> = @record{}
global GtkAdjustmentClass: type <cimport,nodecl,forwarddecl> = @record{}
GtkAdjustment = @record{
  parent_instance: GInitiallyUnowned
}
GtkAdjustmentClass = @record{
  parent_class: GInitiallyUnownedClass,
  changed: function(adjustment: *GtkAdjustment): void,
  value_changed: function(adjustment: *GtkAdjustment): void,
  _gtk_reserved1: function(): void,
  _gtk_reserved2: function(): void,
  _gtk_reserved3: function(): void,
  _gtk_reserved4: function(): void
}
global GtkAppChooser: type <cimport,nodecl,forwarddecl> = @record{}
global GtkDialogFlags: type <cimport,nodecl,using> = @enum(cint){
  GTK_DIALOG_MODAL = 1,
  GTK_DIALOG_DESTROY_WITH_PARENT = 2,
  GTK_DIALOG_USE_HEADER_BAR = 4
}
global GtkResponseType: type <cimport,nodecl,using> = @enum(cint){
  GTK_RESPONSE_NONE = -1,
  GTK_RESPONSE_REJECT = -2,
  GTK_RESPONSE_ACCEPT = -3,
  GTK_RESPONSE_DELETE_EVENT = -4,
  GTK_RESPONSE_OK = -5,
  GTK_RESPONSE_CANCEL = -6,
  GTK_RESPONSE_CLOSE = -7,
  GTK_RESPONSE_YES = -8,
  GTK_RESPONSE_NO = -9,
  GTK_RESPONSE_APPLY = -10,
  GTK_RESPONSE_HELP = -11
}
global GtkDialog: type <cimport,nodecl,forwarddecl> = @record{}
global GtkDialogClass: type <cimport,nodecl,forwarddecl> = @record{}
GtkDialog = @record{
  parent_instance: GtkWindow
}
GtkDialogClass = @record{
  parent_class: GtkWindowClass,
  response: function(dialog: *GtkDialog, response_id: cint): void,
  close: function(dialog: *GtkDialog): void,
  padding: [8]gpointer
}
global GtkDialog_autoptr: type <cimport,nodecl> = @*GtkDialog
global GtkDialog_listautoptr: type <cimport,nodecl> = @*GList
global GtkDialog_slistautoptr: type <cimport,nodecl> = @*GSList
global GtkDialog_queueautoptr: type <cimport,nodecl> = @*GQueue
global GtkAppChooserDialog: type <cimport,nodecl,forwarddecl> = @record{}
global GtkAppChooserWidget: type <cimport,nodecl,forwarddecl> = @record{}
global GtkAppChooserButton: type <cimport,nodecl,forwarddecl> = @record{}
global GtkShortcutsWindow: type <cimport,nodecl,forwarddecl> = @record{}
global GtkShortcutsWindow_autoptr: type <cimport,nodecl> = @*GtkShortcutsWindow
global GtkShortcutsWindow_listautoptr: type <cimport,nodecl> = @*GList
global GtkShortcutsWindow_slistautoptr: type <cimport,nodecl> = @*GSList
global GtkShortcutsWindow_queueautoptr: type <cimport,nodecl> = @*GQueue
global GtkApplicationWindowClass: type <cimport,nodecl,forwarddecl> = @record{}
global GtkApplicationWindow: type <cimport,nodecl,forwarddecl> = @record{}
GtkApplicationWindow = @record{
  parent_instance: GtkWindow
}
GtkApplicationWindowClass = @record{
  parent_class: GtkWindowClass,
  padding: [8]gpointer
}
global GtkAspectFrame: type <cimport,nodecl,forwarddecl> = @record{}
global GtkAssistantPageType: type <cimport,nodecl,using> = @enum(cint){
  GTK_ASSISTANT_PAGE_CONTENT = 0,
  GTK_ASSISTANT_PAGE_INTRO = 1,
  GTK_ASSISTANT_PAGE_CONFIRM = 2,
  GTK_ASSISTANT_PAGE_SUMMARY = 3,
  GTK_ASSISTANT_PAGE_PROGRESS = 4,
  GTK_ASSISTANT_PAGE_CUSTOM = 5
}
global GtkAssistant: type <cimport,nodecl,forwarddecl> = @record{}
global GtkAssistantPage: type <cimport,nodecl,forwarddecl> = @record{}
global GtkAssistantPageFunc: type <cimport,nodecl> = @function(current_page: cint, data: gpointer): cint
global GtkATContext: type <cimport,nodecl,forwarddecl> = @record{}
global GtkATContextClass: type <cimport,nodecl,forwarddecl> = @record{}
global GtkATContext_autoptr: type <cimport,nodecl> = @*GtkATContext
global GtkATContext_listautoptr: type <cimport,nodecl> = @*GList
global GtkATContext_slistautoptr: type <cimport,nodecl> = @*GSList
global GtkATContext_queueautoptr: type <cimport,nodecl> = @*GQueue
global GtkATContextClass_autoptr: type <cimport,nodecl> = @*GtkATContextClass
global GtkATContextClass_listautoptr: type <cimport,nodecl> = @*GList
global GtkATContextClass_slistautoptr: type <cimport,nodecl> = @*GSList
global GtkATContextClass_queueautoptr: type <cimport,nodecl> = @*GQueue
global GtkLayoutChild: type <cimport,nodecl,forwarddecl> = @record{}
global GtkLayoutChildClass: type <cimport,nodecl,forwarddecl> = @record{}
GtkLayoutChild = @record{
  parent_instance: GObject
}
global GtkLayoutChild_autoptr: type <cimport,nodecl> = @*GtkLayoutChild
global GtkLayoutChild_listautoptr: type <cimport,nodecl> = @*GList
global GtkLayoutChild_slistautoptr: type <cimport,nodecl> = @*GSList
global GtkLayoutChild_queueautoptr: type <cimport,nodecl> = @*GQueue
global GtkLayoutChildClass_autoptr: type <cimport,nodecl> = @*GtkLayoutChildClass
global GtkLayoutChildClass_listautoptr: type <cimport,nodecl> = @*GList
global GtkLayoutChildClass_slistautoptr: type <cimport,nodecl> = @*GSList
global GtkLayoutChildClass_queueautoptr: type <cimport,nodecl> = @*GQueue
GtkLayoutChildClass = @record{
  parent_class: GObjectClass
}
global GtkLayoutManagerClass: type <cimport,nodecl,forwarddecl> = @record{}
GtkLayoutManager = @record{
  parent_instance: GObject
}
global GtkLayoutManager_autoptr: type <cimport,nodecl> = @*GtkLayoutManager
global GtkLayoutManager_listautoptr: type <cimport,nodecl> = @*GList
global GtkLayoutManager_slistautoptr: type <cimport,nodecl> = @*GSList
global GtkLayoutManager_queueautoptr: type <cimport,nodecl> = @*GQueue
global GtkLayoutManagerClass_autoptr: type <cimport,nodecl> = @*GtkLayoutManagerClass
global GtkLayoutManagerClass_listautoptr: type <cimport,nodecl> = @*GList
global GtkLayoutManagerClass_slistautoptr: type <cimport,nodecl> = @*GSList
global GtkLayoutManagerClass_queueautoptr: type <cimport,nodecl> = @*GQueue
GtkLayoutManagerClass = @record{
  parent_class: GObjectClass,
  get_request_mode: function(manager: *GtkLayoutManager, widget: *GtkWidget): GtkSizeRequestMode,
  measure: function(manager: *GtkLayoutManager, widget: *GtkWidget, orientation: GtkOrientation, for_size: cint, minimum: *cint, natural: *cint, minimum_baseline: *cint, natural_baseline: *cint): void,
  allocate: function(manager: *GtkLayoutManager, widget: *GtkWidget, width: cint, height: cint, baseline: cint): void,
  layout_child_type: GType,
  create_layout_child: function(manager: *GtkLayoutManager, widget: *GtkWidget, for_child: *GtkWidget): *GtkLayoutChild,
  root: function(manager: *GtkLayoutManager): void,
  unroot: function(manager: *GtkLayoutManager): void,
  _padding: [16]gpointer
}
global GtkBinLayout: type <cimport,nodecl,forwarddecl> = @record{}
global GtkBinLayoutClass: type <cimport,nodecl> = @record{
  parent_class: GtkLayoutManagerClass
}
global GtkBinLayout_autoptr: type <cimport,nodecl> = @*GtkBinLayout
global GtkBinLayout_listautoptr: type <cimport,nodecl> = @*GList
global GtkBinLayout_slistautoptr: type <cimport,nodecl> = @*GSList
global GtkBinLayout_queueautoptr: type <cimport,nodecl> = @*GQueue
global GtkBinLayoutClass_autoptr: type <cimport,nodecl> = @*GtkBinLayoutClass
global GtkBinLayoutClass_listautoptr: type <cimport,nodecl> = @*GList
global GtkBinLayoutClass_slistautoptr: type <cimport,nodecl> = @*GSList
global GtkBinLayoutClass_queueautoptr: type <cimport,nodecl> = @*GQueue
global GtkBitset_autoptr: type <cimport,nodecl> = @*GtkBitset
global GtkBitset_listautoptr: type <cimport,nodecl> = @*GList
global GtkBitset_slistautoptr: type <cimport,nodecl> = @*GSList
global GtkBitset_queueautoptr: type <cimport,nodecl> = @*GQueue
global GtkBitsetIter: type <cimport,nodecl,forwarddecl> = @record{}
GtkBitsetIter = @record{
  private_data: [10]gpointer
}
global GtkBookmarkList: type <cimport,nodecl,forwarddecl> = @record{}
global GtkBookmarkListClass: type <cimport,nodecl> = @record{
  parent_class: GObjectClass
}
global GtkBookmarkList_autoptr: type <cimport,nodecl> = @*GtkBookmarkList
global GtkBookmarkList_listautoptr: type <cimport,nodecl> = @*GList
global GtkBookmarkList_slistautoptr: type <cimport,nodecl> = @*GSList
global GtkBookmarkList_queueautoptr: type <cimport,nodecl> = @*GQueue
global GtkBookmarkListClass_autoptr: type <cimport,nodecl> = @*GtkBookmarkListClass
global GtkBookmarkListClass_listautoptr: type <cimport,nodecl> = @*GList
global GtkBookmarkListClass_slistautoptr: type <cimport,nodecl> = @*GSList
global GtkBookmarkListClass_queueautoptr: type <cimport,nodecl> = @*GQueue
global GtkExpression: type <cimport,nodecl,forwarddecl> = @record{}
global GtkExpressionWatch: type <cimport,nodecl,forwarddecl> = @record{}
global GtkExpressionNotify: type <cimport,nodecl> = @function(user_data: gpointer): void
global GtkExpression_autoptr: type <cimport,nodecl> = @*GtkExpression
global GtkExpression_listautoptr: type <cimport,nodecl> = @*GList
global GtkExpression_slistautoptr: type <cimport,nodecl> = @*GSList
global GtkExpression_queueautoptr: type <cimport,nodecl> = @*GQueue
global GtkPropertyExpression: type <cimport,nodecl,forwarddecl> = @record{}
global GtkConstantExpression: type <cimport,nodecl,forwarddecl> = @record{}
global GtkObjectExpression: type <cimport,nodecl,forwarddecl> = @record{}
global GtkClosureExpression: type <cimport,nodecl,forwarddecl> = @record{}
global GtkCClosureExpression: type <cimport,nodecl,forwarddecl> = @record{}
global GtkParamSpecExpression: type <cimport,nodecl> = @record{
  parent_instance: GParamSpec
}
global GtkFilterMatch: type <cimport,nodecl,using> = @enum(cint){
  GTK_FILTER_MATCH_SOME = 0,
  GTK_FILTER_MATCH_NONE = 1,
  GTK_FILTER_MATCH_ALL = 2
}
global GtkFilterChange: type <cimport,nodecl,using> = @enum(cint){
  GTK_FILTER_CHANGE_DIFFERENT = 0,
  GTK_FILTER_CHANGE_LESS_STRICT = 1,
  GTK_FILTER_CHANGE_MORE_STRICT = 2
}
global GtkFilter: type <cimport,nodecl,forwarddecl> = @record{}
global GtkFilterClass: type <cimport,nodecl,forwarddecl> = @record{}
GtkFilter = @record{
  parent_instance: GObject
}
global GtkFilter_autoptr: type <cimport,nodecl> = @*GtkFilter
global GtkFilter_listautoptr: type <cimport,nodecl> = @*GList
global GtkFilter_slistautoptr: type <cimport,nodecl> = @*GSList
global GtkFilter_queueautoptr: type <cimport,nodecl> = @*GQueue
global GtkFilterClass_autoptr: type <cimport,nodecl> = @*GtkFilterClass
global GtkFilterClass_listautoptr: type <cimport,nodecl> = @*GList
global GtkFilterClass_slistautoptr: type <cimport,nodecl> = @*GSList
global GtkFilterClass_queueautoptr: type <cimport,nodecl> = @*GQueue
GtkFilterClass = @record{
  parent_class: GObjectClass,
  match: function(self: *GtkFilter, item: gpointer): gboolean,
  get_strictness: function(self: *GtkFilter): GtkFilterMatch,
  _gtk_reserved1: function(): void,
  _gtk_reserved2: function(): void,
  _gtk_reserved3: function(): void,
  _gtk_reserved4: function(): void,
  _gtk_reserved5: function(): void,
  _gtk_reserved6: function(): void,
  _gtk_reserved7: function(): void,
  _gtk_reserved8: function(): void
}
global GtkBoolFilter: type <cimport,nodecl,forwarddecl> = @record{}
global GtkBoolFilterClass: type <cimport,nodecl> = @record{
  parent_class: GtkFilterClass
}
global GtkBoolFilter_autoptr: type <cimport,nodecl> = @*GtkBoolFilter
global GtkBoolFilter_listautoptr: type <cimport,nodecl> = @*GList
global GtkBoolFilter_slistautoptr: type <cimport,nodecl> = @*GSList
global GtkBoolFilter_queueautoptr: type <cimport,nodecl> = @*GQueue
global GtkBoolFilterClass_autoptr: type <cimport,nodecl> = @*GtkBoolFilterClass
global GtkBoolFilterClass_listautoptr: type <cimport,nodecl> = @*GList
global GtkBoolFilterClass_slistautoptr: type <cimport,nodecl> = @*GSList
global GtkBoolFilterClass_queueautoptr: type <cimport,nodecl> = @*GQueue
global GtkBoxLayout: type <cimport,nodecl,forwarddecl> = @record{}
global GtkBoxLayoutClass: type <cimport,nodecl> = @record{
  parent_class: GtkLayoutManagerClass
}
global GtkBoxLayout_autoptr: type <cimport,nodecl> = @*GtkBoxLayout
global GtkBoxLayout_listautoptr: type <cimport,nodecl> = @*GList
global GtkBoxLayout_slistautoptr: type <cimport,nodecl> = @*GSList
global GtkBoxLayout_queueautoptr: type <cimport,nodecl> = @*GQueue
global GtkBoxLayoutClass_autoptr: type <cimport,nodecl> = @*GtkBoxLayoutClass
global GtkBoxLayoutClass_listautoptr: type <cimport,nodecl> = @*GList
global GtkBoxLayoutClass_slistautoptr: type <cimport,nodecl> = @*GSList
global GtkBoxLayoutClass_queueautoptr: type <cimport,nodecl> = @*GQueue
global GtkBox: type <cimport,nodecl,forwarddecl> = @record{}
global GtkBoxClass: type <cimport,nodecl,forwarddecl> = @record{}
GtkBox = @record{
  parent_instance: GtkWidget
}
GtkBoxClass = @record{
  parent_class: GtkWidgetClass,
  padding: [8]gpointer
}
global GtkBuilderScopeInterface: type <cimport,nodecl,forwarddecl> = @record{}
global GtkBuilderScope_autoptr: type <cimport,nodecl> = @*GtkBuilderScope
global GtkBuilderScope_listautoptr: type <cimport,nodecl> = @*GList
global GtkBuilderScope_slistautoptr: type <cimport,nodecl> = @*GSList
global GtkBuilderScope_queueautoptr: type <cimport,nodecl> = @*GQueue
global GtkBuilderClosureFlags: type <cimport,nodecl,using> = @enum(cint){
  GTK_BUILDER_CLOSURE_SWAPPED = 1
}
GtkBuilderScopeInterface = @record{
  g_iface: GTypeInterface,
  get_type_from_name: function(self: *GtkBuilderScope, builder: *GtkBuilder, type_name: cstring): GType,
  get_type_from_function: function(self: *GtkBuilderScope, builder: *GtkBuilder, function_name: cstring): GType,
  create_closure: function(self: *GtkBuilderScope, builder: *GtkBuilder, function_name: cstring, flags: GtkBuilderClosureFlags, object: *GObject, error: **GError): *GClosure
}
global GtkBuilderCScopeClass: type <cimport,nodecl> = @record{
  parent_class: GObjectClass
}
global GtkBuilderCScope: type <cimport,nodecl,forwarddecl> = @record{}
GtkBuilderCScope = @record{
  parent_instance: GObject
}
global GtkBuilderCScope_autoptr: type <cimport,nodecl> = @*GtkBuilderCScope
global GtkBuilderCScope_listautoptr: type <cimport,nodecl> = @*GList
global GtkBuilderCScope_slistautoptr: type <cimport,nodecl> = @*GSList
global GtkBuilderCScope_queueautoptr: type <cimport,nodecl> = @*GQueue
global GtkBuilderCScopeClass_autoptr: type <cimport,nodecl> = @*GtkBuilderCScopeClass
global GtkBuilderCScopeClass_listautoptr: type <cimport,nodecl> = @*GList
global GtkBuilderCScopeClass_slistautoptr: type <cimport,nodecl> = @*GSList
global GtkBuilderCScopeClass_queueautoptr: type <cimport,nodecl> = @*GQueue
global GtkBuilderClass: type <cimport,nodecl,forwarddecl> = @record{}
global GtkBuilderError: type <cimport,nodecl,using> = @enum(cint){
  GTK_BUILDER_ERROR_INVALID_TYPE_FUNCTION = 0,
  GTK_BUILDER_ERROR_UNHANDLED_TAG = 1,
  GTK_BUILDER_ERROR_MISSING_ATTRIBUTE = 2,
  GTK_BUILDER_ERROR_INVALID_ATTRIBUTE = 3,
  GTK_BUILDER_ERROR_INVALID_TAG = 4,
  GTK_BUILDER_ERROR_MISSING_PROPERTY_VALUE = 5,
  GTK_BUILDER_ERROR_INVALID_VALUE = 6,
  GTK_BUILDER_ERROR_VERSION_MISMATCH = 7,
  GTK_BUILDER_ERROR_DUPLICATE_ID = 8,
  GTK_BUILDER_ERROR_OBJECT_TYPE_REFUSED = 9,
  GTK_BUILDER_ERROR_TEMPLATE_MISMATCH = 10,
  GTK_BUILDER_ERROR_INVALID_PROPERTY = 11,
  GTK_BUILDER_ERROR_INVALID_SIGNAL = 12,
  GTK_BUILDER_ERROR_INVALID_ID = 13,
  GTK_BUILDER_ERROR_INVALID_FUNCTION = 14
}
global GtkBuildable: type <cimport,nodecl,forwarddecl> = @record{}
global GtkBuildableIface: type <cimport,nodecl,forwarddecl> = @record{}
global GtkBuildableParseContext: type <cimport,nodecl,forwarddecl> = @record{}
global GtkBuildableParser: type <cimport,nodecl,forwarddecl> = @record{}
GtkBuildableParser = @record{
  start_element: function(context: *GtkBuildableParseContext, element_name: cstring, attribute_names: *cstring, attribute_values: *cstring, user_data: gpointer, error: **GError): void,
  end_element: function(context: *GtkBuildableParseContext, element_name: cstring, user_data: gpointer, error: **GError): void,
  text: function(context: *GtkBuildableParseContext, text: cstring, text_len: gsize, user_data: gpointer, error: **GError): void,
  error: function(context: *GtkBuildableParseContext, error: *GError, user_data: gpointer): void,
  padding: [4]gpointer
}
GtkBuildableIface = @record{
  g_iface: GTypeInterface,
  set_id: function(buildable: *GtkBuildable, id: cstring): void,
  get_id: function(buildable: *GtkBuildable): cstring,
  add_child: function(buildable: *GtkBuildable, builder: *GtkBuilder, child: *GObject, type: cstring): void,
  set_buildable_property: function(buildable: *GtkBuildable, builder: *GtkBuilder, name: cstring, value: *GValue): void,
  construct_child: function(buildable: *GtkBuildable, builder: *GtkBuilder, name: cstring): *GObject,
  custom_tag_start: function(buildable: *GtkBuildable, builder: *GtkBuilder, child: *GObject, tagname: cstring, parser: *GtkBuildableParser, data: *gpointer): gboolean,
  custom_tag_end: function(buildable: *GtkBuildable, builder: *GtkBuilder, child: *GObject, tagname: cstring, data: gpointer): void,
  custom_finished: function(buildable: *GtkBuildable, builder: *GtkBuilder, child: *GObject, tagname: cstring, data: gpointer): void,
  parser_finished: function(buildable: *GtkBuildable, builder: *GtkBuilder): void,
  get_internal_child: function(buildable: *GtkBuildable, builder: *GtkBuilder, childname: cstring): *GObject
}
global GtkListItemFactoryClass: type <cimport,nodecl,forwarddecl> = @record{}
global GtkBuilderListItemFactory: type <cimport,nodecl,forwarddecl> = @record{}
global GtkBuilderListItemFactoryClass: type <cimport,nodecl,forwarddecl> = @record{}
global GtkButton: type <cimport,nodecl,forwarddecl> = @record{}
global GtkButtonPrivate: type <cimport,nodecl,forwarddecl> = @record{}
global GtkButtonClass: type <cimport,nodecl,forwarddecl> = @record{}
GtkButton = @record{
  parent_instance: GtkWidget
}
GtkButtonClass = @record{
  parent_class: GtkWidgetClass,
  clicked: function(button: *GtkButton): void,
  activate: function(button: *GtkButton): void,
  padding: [8]gpointer
}
global GtkCalendar: type <cimport,nodecl,forwarddecl> = @record{}
global GtkCellEditable: type <cimport,nodecl,forwarddecl> = @record{}
global GtkCellEditableIface: type <cimport,nodecl,forwarddecl> = @record{}
GtkCellEditableIface = @record{
  g_iface: GTypeInterface,
  editing_done: function(cell_editable: *GtkCellEditable): void,
  remove_widget: function(cell_editable: *GtkCellEditable): void,
  start_editing: function(cell_editable: *GtkCellEditable, event: *GdkEvent): void
}
global GtkCellRendererState: type <cimport,nodecl,using> = @enum(cint){
  GTK_CELL_RENDERER_SELECTED = 1,
  GTK_CELL_RENDERER_PRELIT = 2,
  GTK_CELL_RENDERER_INSENSITIVE = 4,
  GTK_CELL_RENDERER_SORTED = 8,
  GTK_CELL_RENDERER_FOCUSED = 16,
  GTK_CELL_RENDERER_EXPANDABLE = 32,
  GTK_CELL_RENDERER_EXPANDED = 64
}
global GtkCellRendererMode: type <cimport,nodecl,using> = @enum(cint){
  GTK_CELL_RENDERER_MODE_INERT = 0,
  GTK_CELL_RENDERER_MODE_ACTIVATABLE = 1,
  GTK_CELL_RENDERER_MODE_EDITABLE = 2
}
global GtkCellRenderer: type <cimport,nodecl,forwarddecl> = @record{}
global GtkCellRendererPrivate: type <cimport,nodecl,forwarddecl> = @record{}
global GtkCellRendererClass: type <cimport,nodecl,forwarddecl> = @record{}
global GtkCellRendererClassPrivate: type <cimport,nodecl,forwarddecl> = @record{}
GtkCellRenderer = @record{
  parent_instance: GInitiallyUnowned,
  priv: *GtkCellRendererPrivate
}
GtkCellRendererClass = @record{
  parent_class: GInitiallyUnownedClass,
  get_request_mode: function(cell: *GtkCellRenderer): GtkSizeRequestMode,
  get_preferred_width: function(cell: *GtkCellRenderer, widget: *GtkWidget, minimum_size: *cint, natural_size: *cint): void,
  get_preferred_height_for_width: function(cell: *GtkCellRenderer, widget: *GtkWidget, width: cint, minimum_height: *cint, natural_height: *cint): void,
  get_preferred_height: function(cell: *GtkCellRenderer, widget: *GtkWidget, minimum_size: *cint, natural_size: *cint): void,
  get_preferred_width_for_height: function(cell: *GtkCellRenderer, widget: *GtkWidget, height: cint, minimum_width: *cint, natural_width: *cint): void,
  get_aligned_area: function(cell: *GtkCellRenderer, widget: *GtkWidget, flags: GtkCellRendererState, cell_area: *GdkRectangle, aligned_area: *GdkRectangle): void,
  snapshot: function(cell: *GtkCellRenderer, snapshot: *GtkSnapshot, widget: *GtkWidget, background_area: *GdkRectangle, cell_area: *GdkRectangle, flags: GtkCellRendererState): void,
  activate: function(cell: *GtkCellRenderer, event: *GdkEvent, widget: *GtkWidget, path: cstring, background_area: *GdkRectangle, cell_area: *GdkRectangle, flags: GtkCellRendererState): gboolean,
  start_editing: function(cell: *GtkCellRenderer, event: *GdkEvent, widget: *GtkWidget, path: cstring, background_area: *GdkRectangle, cell_area: *GdkRectangle, flags: GtkCellRendererState): *GtkCellEditable,
  editing_canceled: function(cell: *GtkCellRenderer): void,
  editing_started: function(cell: *GtkCellRenderer, editable: *GtkCellEditable, path: cstring): void,
  padding: [8]gpointer
}
global GtkTreeIter: type <cimport,nodecl,forwarddecl> = @record{}
global GtkTreePath: type <cimport,nodecl,forwarddecl> = @record{}
global GtkTreeRowReference: type <cimport,nodecl,forwarddecl> = @record{}
global GtkTreeModel: type <cimport,nodecl,forwarddecl> = @record{}
global GtkTreeModelIface: type <cimport,nodecl,forwarddecl> = @record{}
global GtkTreeModelForeachFunc: type <cimport,nodecl> = @function(model: *GtkTreeModel, path: *GtkTreePath, iter: *GtkTreeIter, data: gpointer): gboolean
global GtkTreeModelFlags: type <cimport,nodecl,using> = @enum(cint){
  GTK_TREE_MODEL_ITERS_PERSIST = 1,
  GTK_TREE_MODEL_LIST_ONLY = 2
}
GtkTreeIter = @record{
  stamp: cint,
  user_data: gpointer,
  user_data2: gpointer,
  user_data3: gpointer
}
GtkTreeModelIface = @record{
  g_iface: GTypeInterface,
  row_changed: function(tree_model: *GtkTreeModel, path: *GtkTreePath, iter: *GtkTreeIter): void,
  row_inserted: function(tree_model: *GtkTreeModel, path: *GtkTreePath, iter: *GtkTreeIter): void,
  row_has_child_toggled: function(tree_model: *GtkTreeModel, path: *GtkTreePath, iter: *GtkTreeIter): void,
  row_deleted: function(tree_model: *GtkTreeModel, path: *GtkTreePath): void,
  rows_reordered: function(tree_model: *GtkTreeModel, path: *GtkTreePath, iter: *GtkTreeIter, new_order: *cint): void,
  get_flags: function(tree_model: *GtkTreeModel): GtkTreeModelFlags,
  get_n_columns: function(tree_model: *GtkTreeModel): cint,
  get_column_type: function(tree_model: *GtkTreeModel, index_: cint): GType,
  get_iter: function(tree_model: *GtkTreeModel, iter: *GtkTreeIter, path: *GtkTreePath): gboolean,
  get_path: function(tree_model: *GtkTreeModel, iter: *GtkTreeIter): *GtkTreePath,
  get_value: function(tree_model: *GtkTreeModel, iter: *GtkTreeIter, column: cint, value: *GValue): void,
  iter_next: function(tree_model: *GtkTreeModel, iter: *GtkTreeIter): gboolean,
  iter_previous: function(tree_model: *GtkTreeModel, iter: *GtkTreeIter): gboolean,
  iter_children: function(tree_model: *GtkTreeModel, iter: *GtkTreeIter, parent: *GtkTreeIter): gboolean,
  iter_has_child: function(tree_model: *GtkTreeModel, iter: *GtkTreeIter): gboolean,
  iter_n_children: function(tree_model: *GtkTreeModel, iter: *GtkTreeIter): cint,
  iter_nth_child: function(tree_model: *GtkTreeModel, iter: *GtkTreeIter, parent: *GtkTreeIter, n: cint): gboolean,
  iter_parent: function(tree_model: *GtkTreeModel, iter: *GtkTreeIter, child: *GtkTreeIter): gboolean,
  ref_node: function(tree_model: *GtkTreeModel, iter: *GtkTreeIter): void,
  unref_node: function(tree_model: *GtkTreeModel, iter: *GtkTreeIter): void
}
global GtkCellArea: type <cimport,nodecl,forwarddecl> = @record{}
global GtkCellAreaClass: type <cimport,nodecl,forwarddecl> = @record{}
global GtkCellAreaContext: type <cimport,nodecl,forwarddecl> = @record{}
global GtkCellCallback: type <cimport,nodecl> = @function(renderer: *GtkCellRenderer, data: gpointer): gboolean
global GtkCellAllocCallback: type <cimport,nodecl> = @function(renderer: *GtkCellRenderer, cell_area: *GdkRectangle, cell_background: *GdkRectangle, data: gpointer): gboolean
GtkCellArea = @record{
  parent_instance: GInitiallyUnowned
}
GtkCellAreaClass = @record{
  parent_class: GInitiallyUnownedClass,
  add: function(area: *GtkCellArea, renderer: *GtkCellRenderer): void,
  remove: function(area: *GtkCellArea, renderer: *GtkCellRenderer): void,
  foreach: function(area: *GtkCellArea, callback: GtkCellCallback, callback_data: gpointer): void,
  foreach_alloc: function(area: *GtkCellArea, context: *GtkCellAreaContext, widget: *GtkWidget, cell_area: *GdkRectangle, background_area: *GdkRectangle, callback: GtkCellAllocCallback, callback_data: gpointer): void,
  event: function(area: *GtkCellArea, context: *GtkCellAreaContext, widget: *GtkWidget, event: *GdkEvent, cell_area: *GdkRectangle, flags: GtkCellRendererState): cint,
  snapshot: function(area: *GtkCellArea, context: *GtkCellAreaContext, widget: *GtkWidget, snapshot: *GtkSnapshot, background_area: *GdkRectangle, cell_area: *GdkRectangle, flags: GtkCellRendererState, paint_focus: gboolean): void,
  apply_attributes: function(area: *GtkCellArea, tree_model: *GtkTreeModel, iter: *GtkTreeIter, is_expander: gboolean, is_expanded: gboolean): void,
  create_context: function(area: *GtkCellArea): *GtkCellAreaContext,
  copy_context: function(area: *GtkCellArea, context: *GtkCellAreaContext): *GtkCellAreaContext,
  get_request_mode: function(area: *GtkCellArea): GtkSizeRequestMode,
  get_preferred_width: function(area: *GtkCellArea, context: *GtkCellAreaContext, widget: *GtkWidget, minimum_width: *cint, natural_width: *cint): void,
  get_preferred_height_for_width: function(area: *GtkCellArea, context: *GtkCellAreaContext, widget: *GtkWidget, width: cint, minimum_height: *cint, natural_height: *cint): void,
  get_preferred_height: function(area: *GtkCellArea, context: *GtkCellAreaContext, widget: *GtkWidget, minimum_height: *cint, natural_height: *cint): void,
  get_preferred_width_for_height: function(area: *GtkCellArea, context: *GtkCellAreaContext, widget: *GtkWidget, height: cint, minimum_width: *cint, natural_width: *cint): void,
  set_cell_property: function(area: *GtkCellArea, renderer: *GtkCellRenderer, property_id: guint, value: *GValue, pspec: *GParamSpec): void,
  get_cell_property: function(area: *GtkCellArea, renderer: *GtkCellRenderer, property_id: guint, value: *GValue, pspec: *GParamSpec): void,
  focus: function(area: *GtkCellArea, direction: GtkDirectionType): gboolean,
  is_activatable: function(area: *GtkCellArea): gboolean,
  activate: function(area: *GtkCellArea, context: *GtkCellAreaContext, widget: *GtkWidget, cell_area: *GdkRectangle, flags: GtkCellRendererState, edit_only: gboolean): gboolean,
  padding: [8]gpointer
}
global GtkCellAreaBox: type <cimport,nodecl,forwarddecl> = @record{}
global GtkCellAreaContextPrivate: type <cimport,nodecl,forwarddecl> = @record{}
global GtkCellAreaContextClass: type <cimport,nodecl,forwarddecl> = @record{}
GtkCellAreaContext = @record{
  parent_instance: GObject
}
GtkCellAreaContextClass = @record{
  parent_class: GObjectClass,
  allocate: function(context: *GtkCellAreaContext, width: cint, height: cint): void,
  reset: function(context: *GtkCellAreaContext): void,
  get_preferred_height_for_width: function(context: *GtkCellAreaContext, width: cint, minimum_height: *cint, natural_height: *cint): void,
  get_preferred_width_for_height: function(context: *GtkCellAreaContext, height: cint, minimum_width: *cint, natural_width: *cint): void,
  padding: [8]gpointer
}
global GtkCellLayout: type <cimport,nodecl,forwarddecl> = @record{}
global GtkCellLayoutIface: type <cimport,nodecl,forwarddecl> = @record{}
global GtkCellLayoutDataFunc: type <cimport,nodecl> = @function(cell_layout: *GtkCellLayout, cell: *GtkCellRenderer, tree_model: *GtkTreeModel, iter: *GtkTreeIter, data: gpointer): void
GtkCellLayoutIface = @record{
  g_iface: GTypeInterface,
  pack_start: function(cell_layout: *GtkCellLayout, cell: *GtkCellRenderer, expand: gboolean): void,
  pack_end: function(cell_layout: *GtkCellLayout, cell: *GtkCellRenderer, expand: gboolean): void,
  clear: function(cell_layout: *GtkCellLayout): void,
  add_attribute: function(cell_layout: *GtkCellLayout, cell: *GtkCellRenderer, attribute: cstring, column: cint): void,
  set_cell_data_func: function(cell_layout: *GtkCellLayout, cell: *GtkCellRenderer, func: GtkCellLayoutDataFunc, func_data: gpointer, destroy: GDestroyNotify): void,
  clear_attributes: function(cell_layout: *GtkCellLayout, cell: *GtkCellRenderer): void,
  reorder: function(cell_layout: *GtkCellLayout, cell: *GtkCellRenderer, position: cint): void,
  get_cells: function(cell_layout: *GtkCellLayout): *GList,
  get_area: function(cell_layout: *GtkCellLayout): *GtkCellArea
}
global GtkCellRendererText: type <cimport,nodecl,forwarddecl> = @record{}
global GtkCellRendererTextClass: type <cimport,nodecl,forwarddecl> = @record{}
GtkCellRendererText = @record{
  parent: GtkCellRenderer
}
GtkCellRendererTextClass = @record{
  parent_class: GtkCellRendererClass,
  edited: function(cell_renderer_text: *GtkCellRendererText, path: cstring, new_text: cstring): void,
  padding: [8]gpointer
}
global GtkCellRendererAccel: type <cimport,nodecl,forwarddecl> = @record{}
global GtkCellRendererAccelMode: type <cimport,nodecl,using> = @enum(cint){
  GTK_CELL_RENDERER_ACCEL_MODE_GTK = 0,
  GTK_CELL_RENDERER_ACCEL_MODE_OTHER = 1
}
global GtkCellRendererCombo: type <cimport,nodecl,forwarddecl> = @record{}
global GtkCellRendererPixbuf: type <cimport,nodecl,forwarddecl> = @record{}
global GtkCellRendererProgress: type <cimport,nodecl,forwarddecl> = @record{}
global GtkCellRendererSpin: type <cimport,nodecl,forwarddecl> = @record{}
global GtkCellRendererSpinner: type <cimport,nodecl,forwarddecl> = @record{}
global GtkCellRendererToggle: type <cimport,nodecl,forwarddecl> = @record{}
global GtkCellView: type <cimport,nodecl,forwarddecl> = @record{}
global GtkCenterBox: type <cimport,nodecl,forwarddecl> = @record{}
global GtkCenterBoxClass: type <cimport,nodecl,forwarddecl> = @record{}
global GtkCenterLayout: type <cimport,nodecl,forwarddecl> = @record{}
global GtkCenterLayoutClass: type <cimport,nodecl> = @record{
  parent_class: GtkLayoutManagerClass
}
global GtkCenterLayout_autoptr: type <cimport,nodecl> = @*GtkCenterLayout
global GtkCenterLayout_listautoptr: type <cimport,nodecl> = @*GList
global GtkCenterLayout_slistautoptr: type <cimport,nodecl> = @*GSList
global GtkCenterLayout_queueautoptr: type <cimport,nodecl> = @*GQueue
global GtkCenterLayoutClass_autoptr: type <cimport,nodecl> = @*GtkCenterLayoutClass
global GtkCenterLayoutClass_listautoptr: type <cimport,nodecl> = @*GList
global GtkCenterLayoutClass_slistautoptr: type <cimport,nodecl> = @*GSList
global GtkCenterLayoutClass_queueautoptr: type <cimport,nodecl> = @*GQueue
global GtkToggleButton: type <cimport,nodecl,forwarddecl> = @record{}
global GtkToggleButtonClass: type <cimport,nodecl,forwarddecl> = @record{}
GtkToggleButton = @record{
  button: GtkButton
}
GtkToggleButtonClass = @record{
  parent_class: GtkButtonClass,
  toggled: function(toggle_button: *GtkToggleButton): void,
  padding: [8]gpointer
}
global GtkCheckButton: type <cimport,nodecl,forwarddecl> = @record{}
global GtkCheckButtonClass: type <cimport,nodecl,forwarddecl> = @record{}
GtkCheckButton = @record{
  parent_instance: GtkWidget
}
GtkCheckButtonClass = @record{
  parent_class: GtkWidgetClass,
  toggled: function(check_button: *GtkCheckButton): void,
  activate: function(check_button: *GtkCheckButton): void,
  padding: [7]gpointer
}
global GtkColorButton: type <cimport,nodecl,forwarddecl> = @record{}
global GtkColorChooser: type <cimport,nodecl,forwarddecl> = @record{}
global GtkColorChooserInterface: type <cimport,nodecl,forwarddecl> = @record{}
GtkColorChooserInterface = @record{
  base_interface: GTypeInterface,
  get_rgba: function(chooser: *GtkColorChooser, color: *GdkRGBA): void,
  set_rgba: function(chooser: *GtkColorChooser, color: *GdkRGBA): void,
  add_palette: function(chooser: *GtkColorChooser, orientation: GtkOrientation, colors_per_line: cint, n_colors: cint, colors: *GdkRGBA): void,
  color_activated: function(chooser: *GtkColorChooser, color: *GdkRGBA): void,
  padding: [12]gpointer
}
global GtkColorChooserDialog: type <cimport,nodecl,forwarddecl> = @record{}
global GtkColorChooserWidget: type <cimport,nodecl,forwarddecl> = @record{}
global GtkSorterOrder: type <cimport,nodecl,using> = @enum(cint){
  GTK_SORTER_ORDER_PARTIAL = 0,
  GTK_SORTER_ORDER_NONE = 1,
  GTK_SORTER_ORDER_TOTAL = 2
}
global GtkSorterChange: type <cimport,nodecl,using> = @enum(cint){
  GTK_SORTER_CHANGE_DIFFERENT = 0,
  GTK_SORTER_CHANGE_INVERTED = 1,
  GTK_SORTER_CHANGE_LESS_STRICT = 2,
  GTK_SORTER_CHANGE_MORE_STRICT = 3
}
global GtkSorter: type <cimport,nodecl,forwarddecl> = @record{}
global GtkSorterClass: type <cimport,nodecl,forwarddecl> = @record{}
GtkSorter = @record{
  parent_instance: GObject
}
global GtkSorter_autoptr: type <cimport,nodecl> = @*GtkSorter
global GtkSorter_listautoptr: type <cimport,nodecl> = @*GList
global GtkSorter_slistautoptr: type <cimport,nodecl> = @*GSList
global GtkSorter_queueautoptr: type <cimport,nodecl> = @*GQueue
global GtkSorterClass_autoptr: type <cimport,nodecl> = @*GtkSorterClass
global GtkSorterClass_listautoptr: type <cimport,nodecl> = @*GList
global GtkSorterClass_slistautoptr: type <cimport,nodecl> = @*GSList
global GtkSorterClass_queueautoptr: type <cimport,nodecl> = @*GQueue
GtkSorterClass = @record{
  parent_class: GObjectClass,
  compare: function(self: *GtkSorter, item1: gpointer, item2: gpointer): GtkOrdering,
  get_order: function(self: *GtkSorter): GtkSorterOrder,
  _gtk_reserved1: function(): void,
  _gtk_reserved2: function(): void,
  _gtk_reserved3: function(): void,
  _gtk_reserved4: function(): void,
  _gtk_reserved5: function(): void,
  _gtk_reserved6: function(): void,
  _gtk_reserved7: function(): void,
  _gtk_reserved8: function(): void
}
global GtkSortListModel: type <cimport,nodecl,forwarddecl> = @record{}
global GtkSortListModelClass: type <cimport,nodecl> = @record{
  parent_class: GObjectClass
}
global GtkSortListModel_autoptr: type <cimport,nodecl> = @*GtkSortListModel
global GtkSortListModel_listautoptr: type <cimport,nodecl> = @*GList
global GtkSortListModel_slistautoptr: type <cimport,nodecl> = @*GSList
global GtkSortListModel_queueautoptr: type <cimport,nodecl> = @*GQueue
global GtkSortListModelClass_autoptr: type <cimport,nodecl> = @*GtkSortListModelClass
global GtkSortListModelClass_listautoptr: type <cimport,nodecl> = @*GList
global GtkSortListModelClass_slistautoptr: type <cimport,nodecl> = @*GSList
global GtkSortListModelClass_queueautoptr: type <cimport,nodecl> = @*GQueue
global GtkSelectionModel: type <cimport,nodecl,forwarddecl> = @record{}
global GtkSelectionModelInterface: type <cimport,nodecl,forwarddecl> = @record{}
global GtkSelectionModel_autoptr: type <cimport,nodecl> = @*GtkSelectionModel
global GtkSelectionModel_listautoptr: type <cimport,nodecl> = @*GList
global GtkSelectionModel_slistautoptr: type <cimport,nodecl> = @*GSList
global GtkSelectionModel_queueautoptr: type <cimport,nodecl> = @*GQueue
GtkSelectionModelInterface = @record{
  g_iface: GTypeInterface,
  is_selected: function(model: *GtkSelectionModel, position: guint): gboolean,
  get_selection_in_range: function(model: *GtkSelectionModel, position: guint, n_items: guint): *GtkBitset,
  select_item: function(model: *GtkSelectionModel, position: guint, unselect_rest: gboolean): gboolean,
  unselect_item: function(model: *GtkSelectionModel, position: guint): gboolean,
  select_range: function(model: *GtkSelectionModel, position: guint, n_items: guint, unselect_rest: gboolean): gboolean,
  unselect_range: function(model: *GtkSelectionModel, position: guint, n_items: guint): gboolean,
  select_all: function(model: *GtkSelectionModel): gboolean,
  unselect_all: function(model: *GtkSelectionModel): gboolean,
  set_selection: function(model: *GtkSelectionModel, selected: *GtkBitset, mask: *GtkBitset): gboolean
}
global GtkColumnView: type <cimport,nodecl,forwarddecl> = @record{}
global GtkColumnViewClass: type <cimport,nodecl,forwarddecl> = @record{}
global GtkColumnViewColumn: type <cimport,nodecl,forwarddecl> = @record{}
global GtkColumnViewColumn_autoptr: type <cimport,nodecl> = @*GtkColumnViewColumn
global GtkColumnViewColumn_listautoptr: type <cimport,nodecl> = @*GList
global GtkColumnViewColumn_slistautoptr: type <cimport,nodecl> = @*GSList
global GtkColumnViewColumn_queueautoptr: type <cimport,nodecl> = @*GQueue
global GtkColumnViewColumnClass: type <cimport,nodecl,forwarddecl> = @record{}
global GtkTreeSortable: type <cimport,nodecl,forwarddecl> = @record{}
global GtkTreeSortableIface: type <cimport,nodecl,forwarddecl> = @record{}
global GtkTreeIterCompareFunc: type <cimport,nodecl> = @function(model: *GtkTreeModel, a: *GtkTreeIter, b: *GtkTreeIter, user_data: gpointer): cint
GtkTreeSortableIface = @record{
  g_iface: GTypeInterface,
  sort_column_changed: function(sortable: *GtkTreeSortable): void,
  get_sort_column_id: function(sortable: *GtkTreeSortable, sort_column_id: *cint, order: *GtkSortType): gboolean,
  set_sort_column_id: function(sortable: *GtkTreeSortable, sort_column_id: cint, order: GtkSortType): void,
  set_sort_func: function(sortable: *GtkTreeSortable, sort_column_id: cint, sort_func: GtkTreeIterCompareFunc, user_data: gpointer, destroy: GDestroyNotify): void,
  set_default_sort_func: function(sortable: *GtkTreeSortable, sort_func: GtkTreeIterCompareFunc, user_data: gpointer, destroy: GDestroyNotify): void,
  has_default_sort_func: function(sortable: *GtkTreeSortable): gboolean
}
global GtkTreeViewColumn: type <cimport,nodecl,forwarddecl> = @record{}
global GtkTreeViewColumnSizing: type <cimport,nodecl,using> = @enum(cint){
  GTK_TREE_VIEW_COLUMN_GROW_ONLY = 0,
  GTK_TREE_VIEW_COLUMN_AUTOSIZE = 1,
  GTK_TREE_VIEW_COLUMN_FIXED = 2
}
global GtkTreeCellDataFunc: type <cimport,nodecl> = @function(tree_column: *GtkTreeViewColumn, cell: *GtkCellRenderer, tree_model: *GtkTreeModel, iter: *GtkTreeIter, data: gpointer): void
global GtkEditable: type <cimport,nodecl,forwarddecl> = @record{}
global GtkEditableInterface: type <cimport,nodecl,forwarddecl> = @record{}
GtkEditableInterface = @record{
  base_iface: GTypeInterface,
  insert_text: function(editable: *GtkEditable, text: cstring, length: cint, position: *cint): void,
  delete_text: function(editable: *GtkEditable, start_pos: cint, end_pos: cint): void,
  changed: function(editable: *GtkEditable): void,
  get_text: function(editable: *GtkEditable): cstring,
  do_insert_text: function(editable: *GtkEditable, text: cstring, length: cint, position: *cint): void,
  do_delete_text: function(editable: *GtkEditable, start_pos: cint, end_pos: cint): void,
  get_selection_bounds: function(editable: *GtkEditable, start_pos: *cint, end_pos: *cint): gboolean,
  set_selection_bounds: function(editable: *GtkEditable, start_pos: cint, end_pos: cint): void,
  get_delegate: function(editable: *GtkEditable): *GtkEditable
}
global GtkEditableProperties: type <cimport,nodecl,using> = @enum(cint){
  GTK_EDITABLE_PROP_TEXT = 0,
  GTK_EDITABLE_PROP_CURSOR_POSITION = 1,
  GTK_EDITABLE_PROP_SELECTION_BOUND = 2,
  GTK_EDITABLE_PROP_EDITABLE = 3,
  GTK_EDITABLE_PROP_WIDTH_CHARS = 4,
  GTK_EDITABLE_PROP_MAX_WIDTH_CHARS = 5,
  GTK_EDITABLE_PROP_XALIGN = 6,
  GTK_EDITABLE_PROP_ENABLE_UNDO = 7,
  GTK_EDITABLE_NUM_PROPERTIES = 8
}
global GtkIMContext: type <cimport,nodecl,forwarddecl> = @record{}
global GtkIMContextClass: type <cimport,nodecl,forwarddecl> = @record{}
GtkIMContext = @record{
  parent_instance: GObject
}
GtkIMContextClass = @record{
  parent_class: GObjectClass,
  preedit_start: function(context: *GtkIMContext): void,
  preedit_end: function(context: *GtkIMContext): void,
  preedit_changed: function(context: *GtkIMContext): void,
  commit: function(context: *GtkIMContext, str: cstring): void,
  retrieve_surrounding: function(context: *GtkIMContext): gboolean,
  delete_surrounding: function(context: *GtkIMContext, offset: cint, n_chars: cint): gboolean,
  set_client_widget: function(context: *GtkIMContext, widget: *GtkWidget): void,
  get_preedit_string: function(context: *GtkIMContext, str: *cstring, attrs: **PangoAttrList, cursor_pos: *cint): void,
  filter_keypress: function(context: *GtkIMContext, event: *GdkEvent): gboolean,
  focus_in: function(context: *GtkIMContext): void,
  focus_out: function(context: *GtkIMContext): void,
  reset: function(context: *GtkIMContext): void,
  set_cursor_location: function(context: *GtkIMContext, area: *GdkRectangle): void,
  set_use_preedit: function(context: *GtkIMContext, use_preedit: gboolean): void,
  set_surrounding: function(context: *GtkIMContext, text: cstring, len: cint, cursor_index: cint): void,
  get_surrounding: function(context: *GtkIMContext, text: *cstring, cursor_index: *cint): gboolean,
  set_surrounding_with_selection: function(context: *GtkIMContext, text: cstring, len: cint, cursor_index: cint, anchor_index: cint): void,
  get_surrounding_with_selection: function(context: *GtkIMContext, text: *cstring, cursor_index: *cint, anchor_index: *cint): gboolean,
  _gtk_reserved1: function(): void,
  _gtk_reserved2: function(): void,
  _gtk_reserved3: function(): void,
  _gtk_reserved4: function(): void,
  _gtk_reserved5: function(): void
}
global GtkEntryBuffer: type <cimport,nodecl,forwarddecl> = @record{}
global GtkEntryBufferClass: type <cimport,nodecl,forwarddecl> = @record{}
GtkEntryBuffer = @record{
  parent_instance: GObject
}
GtkEntryBufferClass = @record{
  parent_class: GObjectClass,
  inserted_text: function(buffer: *GtkEntryBuffer, position: guint, chars: cstring, n_chars: guint): void,
  deleted_text: function(buffer: *GtkEntryBuffer, position: guint, n_chars: guint): void,
  get_text: function(buffer: *GtkEntryBuffer, n_bytes: *gsize): cstring,
  get_length: function(buffer: *GtkEntryBuffer): guint,
  insert_text: function(buffer: *GtkEntryBuffer, position: guint, chars: cstring, n_chars: guint): guint,
  delete_text: function(buffer: *GtkEntryBuffer, position: guint, n_chars: guint): guint,
  _gtk_reserved1: function(): void,
  _gtk_reserved2: function(): void,
  _gtk_reserved3: function(): void,
  _gtk_reserved4: function(): void,
  _gtk_reserved5: function(): void,
  _gtk_reserved6: function(): void,
  _gtk_reserved7: function(): void,
  _gtk_reserved8: function(): void
}
global GtkEntryBuffer_autoptr: type <cimport,nodecl> = @*GtkEntryBuffer
global GtkEntryBuffer_listautoptr: type <cimport,nodecl> = @*GList
global GtkEntryBuffer_slistautoptr: type <cimport,nodecl> = @*GSList
global GtkEntryBuffer_queueautoptr: type <cimport,nodecl> = @*GQueue
global GtkListStore: type <cimport,nodecl,forwarddecl> = @record{}
global GtkListStorePrivate: type <cimport,nodecl,forwarddecl> = @record{}
global GtkListStoreClass: type <cimport,nodecl,forwarddecl> = @record{}
GtkListStore = @record{
  parent: GObject,
  priv: *GtkListStorePrivate
}
GtkListStoreClass = @record{
  parent_class: GObjectClass,
  padding: [8]gpointer
}
global GtkTreeModelFilterVisibleFunc: type <cimport,nodecl> = @function(model: *GtkTreeModel, iter: *GtkTreeIter, data: gpointer): gboolean
global GtkTreeModelFilterModifyFunc: type <cimport,nodecl> = @function(model: *GtkTreeModel, iter: *GtkTreeIter, value: *GValue, column: cint, data: gpointer): void
global GtkTreeModelFilter: type <cimport,nodecl,forwarddecl> = @record{}
global GtkTreeModelFilterClass: type <cimport,nodecl,forwarddecl> = @record{}
global GtkTreeModelFilterPrivate: type <cimport,nodecl,forwarddecl> = @record{}
GtkTreeModelFilter = @record{
  parent: GObject,
  priv: *GtkTreeModelFilterPrivate
}
GtkTreeModelFilterClass = @record{
  parent_class: GObjectClass,
  visible: function(self: *GtkTreeModelFilter, child_model: *GtkTreeModel, iter: *GtkTreeIter): gboolean,
  modify: function(self: *GtkTreeModelFilter, child_model: *GtkTreeModel, iter: *GtkTreeIter, value: *GValue, column: cint): void,
  padding: [8]gpointer
}
global GtkEntryCompletion: type <cimport,nodecl,forwarddecl> = @record{}
global GtkEntryCompletionMatchFunc: type <cimport,nodecl> = @function(completion: *GtkEntryCompletion, key: cstring, iter: *GtkTreeIter, user_data: gpointer): gboolean
global GtkImage: type <cimport,nodecl,forwarddecl> = @record{}
global GtkImageType: type <cimport,nodecl,using> = @enum(cint){
  GTK_IMAGE_EMPTY = 0,
  GTK_IMAGE_ICON_NAME = 1,
  GTK_IMAGE_GICON = 2,
  GTK_IMAGE_PAINTABLE = 3
}
global GtkEntryIconPosition: type <cimport,nodecl,using> = @enum(cint){
  GTK_ENTRY_ICON_PRIMARY = 0,
  GTK_ENTRY_ICON_SECONDARY = 1
}
global GtkEntry: type <cimport,nodecl,forwarddecl> = @record{}
global GtkEntryClass: type <cimport,nodecl,forwarddecl> = @record{}
GtkEntry = @record{
  parent_instance: GtkWidget
}
GtkEntryClass = @record{
  parent_class: GtkWidgetClass,
  activate: function(entry: *GtkEntry): void,
  padding: [8]gpointer
}
global GtkTreeViewDropPosition: type <cimport,nodecl,using> = @enum(cint){
  GTK_TREE_VIEW_DROP_BEFORE = 0,
  GTK_TREE_VIEW_DROP_AFTER = 1,
  GTK_TREE_VIEW_DROP_INTO_OR_BEFORE = 2,
  GTK_TREE_VIEW_DROP_INTO_OR_AFTER = 3
}
global GtkTreeView: type <cimport,nodecl,forwarddecl> = @record{}
global GtkTreeViewClass: type <cimport,nodecl,forwarddecl> = @record{}
global GtkTreeSelection: type <cimport,nodecl,forwarddecl> = @record{}
global GtkTreeViewColumnDropFunc: type <cimport,nodecl> = @function(tree_view: *GtkTreeView, column: *GtkTreeViewColumn, prev_column: *GtkTreeViewColumn, next_column: *GtkTreeViewColumn, data: gpointer): gboolean
global GtkTreeViewMappingFunc: type <cimport,nodecl> = @function(tree_view: *GtkTreeView, path: *GtkTreePath, user_data: gpointer): void
global GtkTreeViewSearchEqualFunc: type <cimport,nodecl> = @function(model: *GtkTreeModel, column: cint, key: cstring, iter: *GtkTreeIter, search_data: gpointer): gboolean
global GtkTreeViewRowSeparatorFunc: type <cimport,nodecl> = @function(model: *GtkTreeModel, iter: *GtkTreeIter, data: gpointer): gboolean
GtkTreeView = @record{
  parent_instance: GtkWidget
}
GtkTreeViewClass = @record{
  parent_class: GtkWidgetClass,
  row_activated: function(tree_view: *GtkTreeView, path: *GtkTreePath, column: *GtkTreeViewColumn): void,
  test_expand_row: function(tree_view: *GtkTreeView, iter: *GtkTreeIter, path: *GtkTreePath): gboolean,
  test_collapse_row: function(tree_view: *GtkTreeView, iter: *GtkTreeIter, path: *GtkTreePath): gboolean,
  row_expanded: function(tree_view: *GtkTreeView, iter: *GtkTreeIter, path: *GtkTreePath): void,
  row_collapsed: function(tree_view: *GtkTreeView, iter: *GtkTreeIter, path: *GtkTreePath): void,
  columns_changed: function(tree_view: *GtkTreeView): void,
  cursor_changed: function(tree_view: *GtkTreeView): void,
  move_cursor: function(tree_view: *GtkTreeView, step: GtkMovementStep, count: cint, extend: gboolean, modify: gboolean): gboolean,
  select_all: function(tree_view: *GtkTreeView): gboolean,
  unselect_all: function(tree_view: *GtkTreeView): gboolean,
  select_cursor_row: function(tree_view: *GtkTreeView, start_editing: gboolean): gboolean,
  toggle_cursor_row: function(tree_view: *GtkTreeView): gboolean,
  expand_collapse_cursor_row: function(tree_view: *GtkTreeView, logical: gboolean, expand: gboolean, open_all: gboolean): gboolean,
  select_cursor_parent: function(tree_view: *GtkTreeView): gboolean,
  start_interactive_search: function(tree_view: *GtkTreeView): gboolean,
  _reserved: [16]gpointer
}
global GtkComboBox: type <cimport,nodecl,forwarddecl> = @record{}
global GtkComboBoxClass: type <cimport,nodecl,forwarddecl> = @record{}
GtkComboBox = @record{
  parent_instance: GtkWidget
}
GtkComboBoxClass = @record{
  parent_class: GtkWidgetClass,
  changed: function(combo_box: *GtkComboBox): void,
  format_entry_text: function(combo_box: *GtkComboBox, path: cstring): cstring,
  activate: function(combo_box: *GtkComboBox): void,
  padding: [7]gpointer
}
global GtkComboBoxText: type <cimport,nodecl,forwarddecl> = @record{}
global GtkConstraintTarget: type <cimport,nodecl,forwarddecl> = @record{}
global GtkConstraintTargetInterface: type <cimport,nodecl,forwarddecl> = @record{}
global GtkConstraintTarget_autoptr: type <cimport,nodecl> = @*GtkConstraintTarget
global GtkConstraintTarget_listautoptr: type <cimport,nodecl> = @*GList
global GtkConstraintTarget_slistautoptr: type <cimport,nodecl> = @*GSList
global GtkConstraintTarget_queueautoptr: type <cimport,nodecl> = @*GQueue
global GtkConstraint: type <cimport,nodecl,forwarddecl> = @record{}
global GtkConstraintClass: type <cimport,nodecl> = @record{
  parent_class: GObjectClass
}
global GtkConstraint_autoptr: type <cimport,nodecl> = @*GtkConstraint
global GtkConstraint_listautoptr: type <cimport,nodecl> = @*GList
global GtkConstraint_slistautoptr: type <cimport,nodecl> = @*GSList
global GtkConstraint_queueautoptr: type <cimport,nodecl> = @*GQueue
global GtkConstraintClass_autoptr: type <cimport,nodecl> = @*GtkConstraintClass
global GtkConstraintClass_listautoptr: type <cimport,nodecl> = @*GList
global GtkConstraintClass_slistautoptr: type <cimport,nodecl> = @*GSList
global GtkConstraintClass_queueautoptr: type <cimport,nodecl> = @*GQueue
global GtkConstraintGuide: type <cimport,nodecl,forwarddecl> = @record{}
global GtkConstraintGuideClass: type <cimport,nodecl> = @record{
  parent_class: GObjectClass
}
global GtkConstraintGuide_autoptr: type <cimport,nodecl> = @*GtkConstraintGuide
global GtkConstraintGuide_listautoptr: type <cimport,nodecl> = @*GList
global GtkConstraintGuide_slistautoptr: type <cimport,nodecl> = @*GSList
global GtkConstraintGuide_queueautoptr: type <cimport,nodecl> = @*GQueue
global GtkConstraintGuideClass_autoptr: type <cimport,nodecl> = @*GtkConstraintGuideClass
global GtkConstraintGuideClass_listautoptr: type <cimport,nodecl> = @*GList
global GtkConstraintGuideClass_slistautoptr: type <cimport,nodecl> = @*GSList
global GtkConstraintGuideClass_queueautoptr: type <cimport,nodecl> = @*GQueue
global GtkConstraintLayoutChild: type <cimport,nodecl,forwarddecl> = @record{}
global GtkConstraintLayoutChildClass: type <cimport,nodecl> = @record{
  parent_class: GtkLayoutChildClass
}
global GtkConstraintLayoutChild_autoptr: type <cimport,nodecl> = @*GtkConstraintLayoutChild
global GtkConstraintLayoutChild_listautoptr: type <cimport,nodecl> = @*GList
global GtkConstraintLayoutChild_slistautoptr: type <cimport,nodecl> = @*GSList
global GtkConstraintLayoutChild_queueautoptr: type <cimport,nodecl> = @*GQueue
global GtkConstraintLayoutChildClass_autoptr: type <cimport,nodecl> = @*GtkConstraintLayoutChildClass
global GtkConstraintLayoutChildClass_listautoptr: type <cimport,nodecl> = @*GList
global GtkConstraintLayoutChildClass_slistautoptr: type <cimport,nodecl> = @*GSList
global GtkConstraintLayoutChildClass_queueautoptr: type <cimport,nodecl> = @*GQueue
global GtkConstraintLayout: type <cimport,nodecl,forwarddecl> = @record{}
global GtkConstraintLayoutClass: type <cimport,nodecl> = @record{
  parent_class: GtkLayoutManagerClass
}
global GtkConstraintLayout_autoptr: type <cimport,nodecl> = @*GtkConstraintLayout
global GtkConstraintLayout_listautoptr: type <cimport,nodecl> = @*GList
global GtkConstraintLayout_slistautoptr: type <cimport,nodecl> = @*GSList
global GtkConstraintLayout_queueautoptr: type <cimport,nodecl> = @*GQueue
global GtkConstraintLayoutClass_autoptr: type <cimport,nodecl> = @*GtkConstraintLayoutClass
global GtkConstraintLayoutClass_listautoptr: type <cimport,nodecl> = @*GList
global GtkConstraintLayoutClass_slistautoptr: type <cimport,nodecl> = @*GSList
global GtkConstraintLayoutClass_queueautoptr: type <cimport,nodecl> = @*GQueue
global GtkCssProvider: type <cimport,nodecl,forwarddecl> = @record{}
global GtkCssProviderClass: type <cimport,nodecl,forwarddecl> = @record{}
global GtkCssProviderPrivate: type <cimport,nodecl,forwarddecl> = @record{}
GtkCssProvider = @record{
  parent_instance: GObject
}
global GtkCustomRequestModeFunc: type <cimport,nodecl> = @function(widget: *GtkWidget): GtkSizeRequestMode
global GtkCustomMeasureFunc: type <cimport,nodecl> = @function(widget: *GtkWidget, orientation: GtkOrientation, for_size: cint, minimum: *cint, natural: *cint, minimum_baseline: *cint, natural_baseline: *cint): void
global GtkCustomAllocateFunc: type <cimport,nodecl> = @function(widget: *GtkWidget, width: cint, height: cint, baseline: cint): void
global GtkCustomLayout: type <cimport,nodecl,forwarddecl> = @record{}
global GtkCustomLayoutClass: type <cimport,nodecl> = @record{
  parent_class: GtkLayoutManagerClass
}
global GtkCustomLayout_autoptr: type <cimport,nodecl> = @*GtkCustomLayout
global GtkCustomLayout_listautoptr: type <cimport,nodecl> = @*GList
global GtkCustomLayout_slistautoptr: type <cimport,nodecl> = @*GSList
global GtkCustomLayout_queueautoptr: type <cimport,nodecl> = @*GQueue
global GtkCustomLayoutClass_autoptr: type <cimport,nodecl> = @*GtkCustomLayoutClass
global GtkCustomLayoutClass_listautoptr: type <cimport,nodecl> = @*GList
global GtkCustomLayoutClass_slistautoptr: type <cimport,nodecl> = @*GSList
global GtkCustomLayoutClass_queueautoptr: type <cimport,nodecl> = @*GQueue
global GtkCustomSorter: type <cimport,nodecl,forwarddecl> = @record{}
global GtkCustomSorterClass: type <cimport,nodecl> = @record{
  parent_class: GtkSorterClass
}
global GtkCustomSorter_autoptr: type <cimport,nodecl> = @*GtkCustomSorter
global GtkCustomSorter_listautoptr: type <cimport,nodecl> = @*GList
global GtkCustomSorter_slistautoptr: type <cimport,nodecl> = @*GSList
global GtkCustomSorter_queueautoptr: type <cimport,nodecl> = @*GQueue
global GtkCustomSorterClass_autoptr: type <cimport,nodecl> = @*GtkCustomSorterClass
global GtkCustomSorterClass_listautoptr: type <cimport,nodecl> = @*GList
global GtkCustomSorterClass_slistautoptr: type <cimport,nodecl> = @*GSList
global GtkCustomSorterClass_queueautoptr: type <cimport,nodecl> = @*GQueue
global GtkDebugFlags: type <cimport,nodecl,using> = @enum(cint){
  GTK_DEBUG_TEXT = 1,
  GTK_DEBUG_TREE = 2,
  GTK_DEBUG_KEYBINDINGS = 4,
  GTK_DEBUG_MODULES = 8,
  GTK_DEBUG_GEOMETRY = 16,
  GTK_DEBUG_ICONTHEME = 32,
  GTK_DEBUG_PRINTING = 64,
  GTK_DEBUG_BUILDER = 128,
  GTK_DEBUG_SIZE_REQUEST = 256,
  GTK_DEBUG_NO_CSS_CACHE = 512,
  GTK_DEBUG_INTERACTIVE = 1024,
  GTK_DEBUG_TOUCHSCREEN = 2048,
  GTK_DEBUG_ACTIONS = 4096,
  GTK_DEBUG_LAYOUT = 8192,
  GTK_DEBUG_SNAPSHOT = 16384,
  GTK_DEBUG_CONSTRAINTS = 32768,
  GTK_DEBUG_BUILDER_OBJECTS = 65536,
  GTK_DEBUG_A11Y = 131072,
  GTK_DEBUG_ICONFALLBACK = 262144
}
global GtkDirectoryList: type <cimport,nodecl,forwarddecl> = @record{}
global GtkDirectoryListClass: type <cimport,nodecl> = @record{
  parent_class: GObjectClass
}
global GtkDirectoryList_autoptr: type <cimport,nodecl> = @*GtkDirectoryList
global GtkDirectoryList_listautoptr: type <cimport,nodecl> = @*GList
global GtkDirectoryList_slistautoptr: type <cimport,nodecl> = @*GSList
global GtkDirectoryList_queueautoptr: type <cimport,nodecl> = @*GQueue
global GtkDirectoryListClass_autoptr: type <cimport,nodecl> = @*GtkDirectoryListClass
global GtkDirectoryListClass_listautoptr: type <cimport,nodecl> = @*GList
global GtkDirectoryListClass_slistautoptr: type <cimport,nodecl> = @*GSList
global GtkDirectoryListClass_queueautoptr: type <cimport,nodecl> = @*GQueue
global GtkDragIcon: type <cimport,nodecl,forwarddecl> = @record{}
global GtkDragIconClass: type <cimport,nodecl> = @record{
  parent_class: GtkWidgetClass
}
global GtkDragIcon_autoptr: type <cimport,nodecl> = @*GtkDragIcon
global GtkDragIcon_listautoptr: type <cimport,nodecl> = @*GList
global GtkDragIcon_slistautoptr: type <cimport,nodecl> = @*GSList
global GtkDragIcon_queueautoptr: type <cimport,nodecl> = @*GQueue
global GtkDragIconClass_autoptr: type <cimport,nodecl> = @*GtkDragIconClass
global GtkDragIconClass_listautoptr: type <cimport,nodecl> = @*GList
global GtkDragIconClass_slistautoptr: type <cimport,nodecl> = @*GSList
global GtkDragIconClass_queueautoptr: type <cimport,nodecl> = @*GQueue
global GtkDragSource: type <cimport,nodecl,forwarddecl> = @record{}
global GtkDragSourceClass: type <cimport,nodecl,forwarddecl> = @record{}
global GtkDrawingArea: type <cimport,nodecl,forwarddecl> = @record{}
global GtkDrawingAreaClass: type <cimport,nodecl,forwarddecl> = @record{}
global GtkDrawingAreaDrawFunc: type <cimport,nodecl> = @function(drawing_area: *GtkDrawingArea, cr: *cairo_t, width: cint, height: cint, user_data: gpointer): void
GtkDrawingArea = @record{
  widget: GtkWidget
}
GtkDrawingAreaClass = @record{
  parent_class: GtkWidgetClass,
  resize: function(area: *GtkDrawingArea, width: cint, height: cint): void,
  padding: [8]gpointer
}
global GtkEventControllerClass: type <cimport,nodecl,forwarddecl> = @record{}
global GtkDropControllerMotion: type <cimport,nodecl,forwarddecl> = @record{}
global GtkDropControllerMotionClass: type <cimport,nodecl,forwarddecl> = @record{}
global GtkDropTarget: type <cimport,nodecl,forwarddecl> = @record{}
global GtkDropTargetClass: type <cimport,nodecl,forwarddecl> = @record{}
global GtkDropTargetAsync: type <cimport,nodecl,forwarddecl> = @record{}
global GtkDropTargetAsyncClass: type <cimport,nodecl,forwarddecl> = @record{}
global GtkDropDown: type <cimport,nodecl,forwarddecl> = @record{}
global GtkDropDownClass: type <cimport,nodecl> = @record{
  parent_class: GtkWidgetClass
}
global GtkDropDown_autoptr: type <cimport,nodecl> = @*GtkDropDown
global GtkDropDown_listautoptr: type <cimport,nodecl> = @*GList
global GtkDropDown_slistautoptr: type <cimport,nodecl> = @*GSList
global GtkDropDown_queueautoptr: type <cimport,nodecl> = @*GQueue
global GtkDropDownClass_autoptr: type <cimport,nodecl> = @*GtkDropDownClass
global GtkDropDownClass_listautoptr: type <cimport,nodecl> = @*GList
global GtkDropDownClass_slistautoptr: type <cimport,nodecl> = @*GSList
global GtkDropDownClass_queueautoptr: type <cimport,nodecl> = @*GQueue
global GtkEditableLabel: type <cimport,nodecl,forwarddecl> = @record{}
global GtkEditableLabelClass: type <cimport,nodecl> = @record{
  parent_class: GtkWidgetClass
}
global GtkEditableLabel_autoptr: type <cimport,nodecl> = @*GtkEditableLabel
global GtkEditableLabel_listautoptr: type <cimport,nodecl> = @*GList
global GtkEditableLabel_slistautoptr: type <cimport,nodecl> = @*GSList
global GtkEditableLabel_queueautoptr: type <cimport,nodecl> = @*GQueue
global GtkEditableLabelClass_autoptr: type <cimport,nodecl> = @*GtkEditableLabelClass
global GtkEditableLabelClass_listautoptr: type <cimport,nodecl> = @*GList
global GtkEditableLabelClass_slistautoptr: type <cimport,nodecl> = @*GSList
global GtkEditableLabelClass_queueautoptr: type <cimport,nodecl> = @*GQueue
global GtkEmojiChooser: type <cimport,nodecl,forwarddecl> = @record{}
global GtkEmojiChooserClass: type <cimport,nodecl,forwarddecl> = @record{}
global GtkEventControllerFocus: type <cimport,nodecl,forwarddecl> = @record{}
global GtkEventControllerFocusClass: type <cimport,nodecl,forwarddecl> = @record{}
global GtkEventControllerKey: type <cimport,nodecl,forwarddecl> = @record{}
global GtkEventControllerKeyClass: type <cimport,nodecl,forwarddecl> = @record{}
global GtkEventControllerLegacy: type <cimport,nodecl,forwarddecl> = @record{}
global GtkEventControllerLegacyClass: type <cimport,nodecl,forwarddecl> = @record{}
global GtkEventControllerMotion: type <cimport,nodecl,forwarddecl> = @record{}
global GtkEventControllerMotionClass: type <cimport,nodecl,forwarddecl> = @record{}
global GtkEventControllerScroll: type <cimport,nodecl,forwarddecl> = @record{}
global GtkEventControllerScrollClass: type <cimport,nodecl,forwarddecl> = @record{}
global GtkEventControllerScrollFlags: type <cimport,nodecl,using> = @enum(cint){
  GTK_EVENT_CONTROLLER_SCROLL_NONE = 0,
  GTK_EVENT_CONTROLLER_SCROLL_VERTICAL = 1,
  GTK_EVENT_CONTROLLER_SCROLL_HORIZONTAL = 2,
  GTK_EVENT_CONTROLLER_SCROLL_DISCRETE = 4,
  GTK_EVENT_CONTROLLER_SCROLL_KINETIC = 8,
  GTK_EVENT_CONTROLLER_SCROLL_BOTH_AXES = 3
}
global GtkExpander: type <cimport,nodecl,forwarddecl> = @record{}
global GtkFixed: type <cimport,nodecl,forwarddecl> = @record{}
global GtkFixedClass: type <cimport,nodecl,forwarddecl> = @record{}
GtkFixed = @record{
  parent_instance: GtkWidget
}
GtkFixedClass = @record{
  parent_class: GtkWidgetClass,
  padding: [8]gpointer
}
global GtkFixedLayout: type <cimport,nodecl,forwarddecl> = @record{}
global GtkFixedLayoutClass: type <cimport,nodecl> = @record{
  parent_class: GtkLayoutManagerClass
}
global GtkFixedLayout_autoptr: type <cimport,nodecl> = @*GtkFixedLayout
global GtkFixedLayout_listautoptr: type <cimport,nodecl> = @*GList
global GtkFixedLayout_slistautoptr: type <cimport,nodecl> = @*GSList
global GtkFixedLayout_queueautoptr: type <cimport,nodecl> = @*GQueue
global GtkFixedLayoutClass_autoptr: type <cimport,nodecl> = @*GtkFixedLayoutClass
global GtkFixedLayoutClass_listautoptr: type <cimport,nodecl> = @*GList
global GtkFixedLayoutClass_slistautoptr: type <cimport,nodecl> = @*GSList
global GtkFixedLayoutClass_queueautoptr: type <cimport,nodecl> = @*GQueue
global GtkFixedLayoutChild: type <cimport,nodecl,forwarddecl> = @record{}
global GtkFixedLayoutChildClass: type <cimport,nodecl> = @record{
  parent_class: GtkLayoutChildClass
}
global GtkFixedLayoutChild_autoptr: type <cimport,nodecl> = @*GtkFixedLayoutChild
global GtkFixedLayoutChild_listautoptr: type <cimport,nodecl> = @*GList
global GtkFixedLayoutChild_slistautoptr: type <cimport,nodecl> = @*GSList
global GtkFixedLayoutChild_queueautoptr: type <cimport,nodecl> = @*GQueue
global GtkFixedLayoutChildClass_autoptr: type <cimport,nodecl> = @*GtkFixedLayoutChildClass
global GtkFixedLayoutChildClass_listautoptr: type <cimport,nodecl> = @*GList
global GtkFixedLayoutChildClass_slistautoptr: type <cimport,nodecl> = @*GSList
global GtkFixedLayoutChildClass_queueautoptr: type <cimport,nodecl> = @*GQueue
global GtkFileFilter: type <cimport,nodecl,forwarddecl> = @record{}
global GtkFileChooser: type <cimport,nodecl,forwarddecl> = @record{}
global GtkFileChooserAction: type <cimport,nodecl,using> = @enum(cint){
  GTK_FILE_CHOOSER_ACTION_OPEN = 0,
  GTK_FILE_CHOOSER_ACTION_SAVE = 1,
  GTK_FILE_CHOOSER_ACTION_SELECT_FOLDER = 2
}
global GtkFileChooserError: type <cimport,nodecl,using> = @enum(cint){
  GTK_FILE_CHOOSER_ERROR_NONEXISTENT = 0,
  GTK_FILE_CHOOSER_ERROR_BAD_FILENAME = 1,
  GTK_FILE_CHOOSER_ERROR_ALREADY_EXISTS = 2,
  GTK_FILE_CHOOSER_ERROR_INCOMPLETE_HOSTNAME = 3
}
global GtkFileChooserDialog: type <cimport,nodecl,forwarddecl> = @record{}
global GtkNativeDialog: type <cimport,nodecl,forwarddecl> = @record{}
global GtkNativeDialogClass: type <cimport,nodecl,forwarddecl> = @record{}
GtkNativeDialog = @record{
  parent_instance: GObject
}
global GtkNativeDialog_autoptr: type <cimport,nodecl> = @*GtkNativeDialog
global GtkNativeDialog_listautoptr: type <cimport,nodecl> = @*GList
global GtkNativeDialog_slistautoptr: type <cimport,nodecl> = @*GSList
global GtkNativeDialog_queueautoptr: type <cimport,nodecl> = @*GQueue
global GtkNativeDialogClass_autoptr: type <cimport,nodecl> = @*GtkNativeDialogClass
global GtkNativeDialogClass_listautoptr: type <cimport,nodecl> = @*GList
global GtkNativeDialogClass_slistautoptr: type <cimport,nodecl> = @*GSList
global GtkNativeDialogClass_queueautoptr: type <cimport,nodecl> = @*GQueue
GtkNativeDialogClass = @record{
  parent_class: GObjectClass,
  response: function(self: *GtkNativeDialog, response_id: cint): void,
  show: function(self: *GtkNativeDialog): void,
  hide: function(self: *GtkNativeDialog): void,
  _gtk_reserved1: function(): void,
  _gtk_reserved2: function(): void,
  _gtk_reserved3: function(): void,
  _gtk_reserved4: function(): void
}
global GtkFileChooserNative: type <cimport,nodecl,forwarddecl> = @record{}
global GtkFileChooserNativeClass: type <cimport,nodecl> = @record{
  parent_class: GtkNativeDialogClass
}
global GtkFileChooserNative_autoptr: type <cimport,nodecl> = @*GtkFileChooserNative
global GtkFileChooserNative_listautoptr: type <cimport,nodecl> = @*GList
global GtkFileChooserNative_slistautoptr: type <cimport,nodecl> = @*GSList
global GtkFileChooserNative_queueautoptr: type <cimport,nodecl> = @*GQueue
global GtkFileChooserNativeClass_autoptr: type <cimport,nodecl> = @*GtkFileChooserNativeClass
global GtkFileChooserNativeClass_listautoptr: type <cimport,nodecl> = @*GList
global GtkFileChooserNativeClass_slistautoptr: type <cimport,nodecl> = @*GSList
global GtkFileChooserNativeClass_queueautoptr: type <cimport,nodecl> = @*GQueue
global GtkFileChooserWidget: type <cimport,nodecl,forwarddecl> = @record{}
global GtkFilterListModel: type <cimport,nodecl,forwarddecl> = @record{}
global GtkFilterListModelClass: type <cimport,nodecl> = @record{
  parent_class: GObjectClass
}
global GtkFilterListModel_autoptr: type <cimport,nodecl> = @*GtkFilterListModel
global GtkFilterListModel_listautoptr: type <cimport,nodecl> = @*GList
global GtkFilterListModel_slistautoptr: type <cimport,nodecl> = @*GSList
global GtkFilterListModel_queueautoptr: type <cimport,nodecl> = @*GQueue
global GtkFilterListModelClass_autoptr: type <cimport,nodecl> = @*GtkFilterListModelClass
global GtkFilterListModelClass_listautoptr: type <cimport,nodecl> = @*GList
global GtkFilterListModelClass_slistautoptr: type <cimport,nodecl> = @*GSList
global GtkFilterListModelClass_queueautoptr: type <cimport,nodecl> = @*GQueue
global GtkCustomFilterFunc: type <cimport,nodecl> = @function(item: gpointer, user_data: gpointer): gboolean
global GtkCustomFilter: type <cimport,nodecl,forwarddecl> = @record{}
global GtkCustomFilterClass: type <cimport,nodecl> = @record{
  parent_class: GtkFilterClass
}
global GtkCustomFilter_autoptr: type <cimport,nodecl> = @*GtkCustomFilter
global GtkCustomFilter_listautoptr: type <cimport,nodecl> = @*GList
global GtkCustomFilter_slistautoptr: type <cimport,nodecl> = @*GSList
global GtkCustomFilter_queueautoptr: type <cimport,nodecl> = @*GQueue
global GtkCustomFilterClass_autoptr: type <cimport,nodecl> = @*GtkCustomFilterClass
global GtkCustomFilterClass_listautoptr: type <cimport,nodecl> = @*GList
global GtkCustomFilterClass_slistautoptr: type <cimport,nodecl> = @*GSList
global GtkCustomFilterClass_queueautoptr: type <cimport,nodecl> = @*GQueue
global GtkFlattenListModel: type <cimport,nodecl,forwarddecl> = @record{}
global GtkFlattenListModelClass: type <cimport,nodecl> = @record{
  parent_class: GObjectClass
}
global GtkFlattenListModel_autoptr: type <cimport,nodecl> = @*GtkFlattenListModel
global GtkFlattenListModel_listautoptr: type <cimport,nodecl> = @*GList
global GtkFlattenListModel_slistautoptr: type <cimport,nodecl> = @*GSList
global GtkFlattenListModel_queueautoptr: type <cimport,nodecl> = @*GQueue
global GtkFlattenListModelClass_autoptr: type <cimport,nodecl> = @*GtkFlattenListModelClass
global GtkFlattenListModelClass_listautoptr: type <cimport,nodecl> = @*GList
global GtkFlattenListModelClass_slistautoptr: type <cimport,nodecl> = @*GSList
global GtkFlattenListModelClass_queueautoptr: type <cimport,nodecl> = @*GQueue
global GtkFlowBox: type <cimport,nodecl,forwarddecl> = @record{}
global GtkFlowBoxChild: type <cimport,nodecl,forwarddecl> = @record{}
global GtkFlowBoxChildClass: type <cimport,nodecl,forwarddecl> = @record{}
GtkFlowBoxChild = @record{
  parent_instance: GtkWidget
}
GtkFlowBoxChildClass = @record{
  parent_class: GtkWidgetClass,
  activate: function(child: *GtkFlowBoxChild): void,
  padding: [8]gpointer
}
global GtkFlowBoxCreateWidgetFunc: type <cimport,nodecl> = @function(item: gpointer, user_data: gpointer): *GtkWidget
global GtkFlowBoxForeachFunc: type <cimport,nodecl> = @function(box: *GtkFlowBox, child: *GtkFlowBoxChild, user_data: gpointer): void
global GtkFlowBoxFilterFunc: type <cimport,nodecl> = @function(child: *GtkFlowBoxChild, user_data: gpointer): gboolean
global GtkFlowBoxSortFunc: type <cimport,nodecl> = @function(child1: *GtkFlowBoxChild, child2: *GtkFlowBoxChild, user_data: gpointer): cint
global GtkFontButton: type <cimport,nodecl,forwarddecl> = @record{}
global GtkFontFilterFunc: type <cimport,nodecl> = @function(family: *PangoFontFamily, face: *PangoFontFace, data: gpointer): gboolean
global GtkFontChooserLevel: type <cimport,nodecl,using> = @enum(cint){
  GTK_FONT_CHOOSER_LEVEL_FAMILY = 0,
  GTK_FONT_CHOOSER_LEVEL_STYLE = 1,
  GTK_FONT_CHOOSER_LEVEL_SIZE = 2,
  GTK_FONT_CHOOSER_LEVEL_VARIATIONS = 4,
  GTK_FONT_CHOOSER_LEVEL_FEATURES = 8
}
global GtkFontChooser: type <cimport,nodecl,forwarddecl> = @record{}
global GtkFontChooserIface: type <cimport,nodecl,forwarddecl> = @record{}
GtkFontChooserIface = @record{
  base_iface: GTypeInterface,
  get_font_family: function(fontchooser: *GtkFontChooser): *PangoFontFamily,
  get_font_face: function(fontchooser: *GtkFontChooser): *PangoFontFace,
  get_font_size: function(fontchooser: *GtkFontChooser): cint,
  set_filter_func: function(fontchooser: *GtkFontChooser, filter: GtkFontFilterFunc, user_data: gpointer, destroy: GDestroyNotify): void,
  font_activated: function(chooser: *GtkFontChooser, fontname: cstring): void,
  set_font_map: function(fontchooser: *GtkFontChooser, fontmap: *PangoFontMap): void,
  get_font_map: function(fontchooser: *GtkFontChooser): *PangoFontMap,
  padding: [10]gpointer
}
global GtkFontChooserDialog: type <cimport,nodecl,forwarddecl> = @record{}
global GtkFontChooserWidget: type <cimport,nodecl,forwarddecl> = @record{}
global GtkFrame: type <cimport,nodecl,forwarddecl> = @record{}
global GtkFrameClass: type <cimport,nodecl,forwarddecl> = @record{}
GtkFrame = @record{
  parent_instance: GtkWidget
}
GtkFrameClass = @record{
  parent_class: GtkWidgetClass,
  compute_child_allocation: function(frame: *GtkFrame, allocation: *GtkAllocation): void,
  padding: [8]gpointer
}
global GtkGestureClass: type <cimport,nodecl,forwarddecl> = @record{}
global GtkGestureSingle: type <cimport,nodecl,forwarddecl> = @record{}
global GtkGestureSingleClass: type <cimport,nodecl,forwarddecl> = @record{}
global GtkGestureClick: type <cimport,nodecl,forwarddecl> = @record{}
global GtkGestureClickClass: type <cimport,nodecl,forwarddecl> = @record{}
global GtkGestureDrag: type <cimport,nodecl,forwarddecl> = @record{}
global GtkGestureDragClass: type <cimport,nodecl,forwarddecl> = @record{}
global GtkGestureLongPress: type <cimport,nodecl,forwarddecl> = @record{}
global GtkGestureLongPressClass: type <cimport,nodecl,forwarddecl> = @record{}
global GtkGesturePan: type <cimport,nodecl,forwarddecl> = @record{}
global GtkGesturePanClass: type <cimport,nodecl,forwarddecl> = @record{}
global GtkGestureRotate: type <cimport,nodecl,forwarddecl> = @record{}
global GtkGestureRotateClass: type <cimport,nodecl,forwarddecl> = @record{}
global GtkGestureStylus: type <cimport,nodecl,forwarddecl> = @record{}
global GtkGestureStylusClass: type <cimport,nodecl,forwarddecl> = @record{}
global GtkGestureSwipe: type <cimport,nodecl,forwarddecl> = @record{}
global GtkGestureSwipeClass: type <cimport,nodecl,forwarddecl> = @record{}
global GtkGestureZoom: type <cimport,nodecl,forwarddecl> = @record{}
global GtkGestureZoomClass: type <cimport,nodecl,forwarddecl> = @record{}
global GtkGLArea: type <cimport,nodecl,forwarddecl> = @record{}
global GtkGLAreaClass: type <cimport,nodecl,forwarddecl> = @record{}
GtkGLArea = @record{
  parent_instance: GtkWidget
}
GtkGLAreaClass = @record{
  parent_class: GtkWidgetClass,
  render: function(area: *GtkGLArea, context: *GdkGLContext): gboolean,
  resize: function(area: *GtkGLArea, width: cint, height: cint): void,
  create_context: function(area: *GtkGLArea): *GdkGLContext,
  _padding: [8]gpointer
}
global GtkGrid: type <cimport,nodecl,forwarddecl> = @record{}
global GtkGridClass: type <cimport,nodecl,forwarddecl> = @record{}
GtkGrid = @record{
  parent_instance: GtkWidget
}
GtkGridClass = @record{
  parent_class: GtkWidgetClass,
  padding: [8]gpointer
}
global GtkGridLayout: type <cimport,nodecl,forwarddecl> = @record{}
global GtkGridLayoutClass: type <cimport,nodecl> = @record{
  parent_class: GtkLayoutManagerClass
}
global GtkGridLayout_autoptr: type <cimport,nodecl> = @*GtkGridLayout
global GtkGridLayout_listautoptr: type <cimport,nodecl> = @*GList
global GtkGridLayout_slistautoptr: type <cimport,nodecl> = @*GSList
global GtkGridLayout_queueautoptr: type <cimport,nodecl> = @*GQueue
global GtkGridLayoutClass_autoptr: type <cimport,nodecl> = @*GtkGridLayoutClass
global GtkGridLayoutClass_listautoptr: type <cimport,nodecl> = @*GList
global GtkGridLayoutClass_slistautoptr: type <cimport,nodecl> = @*GSList
global GtkGridLayoutClass_queueautoptr: type <cimport,nodecl> = @*GQueue
global GtkGridLayoutChild: type <cimport,nodecl,forwarddecl> = @record{}
global GtkGridLayoutChildClass: type <cimport,nodecl> = @record{
  parent_class: GtkLayoutChildClass
}
global GtkGridLayoutChild_autoptr: type <cimport,nodecl> = @*GtkGridLayoutChild
global GtkGridLayoutChild_listautoptr: type <cimport,nodecl> = @*GList
global GtkGridLayoutChild_slistautoptr: type <cimport,nodecl> = @*GSList
global GtkGridLayoutChild_queueautoptr: type <cimport,nodecl> = @*GQueue
global GtkGridLayoutChildClass_autoptr: type <cimport,nodecl> = @*GtkGridLayoutChildClass
global GtkGridLayoutChildClass_listautoptr: type <cimport,nodecl> = @*GList
global GtkGridLayoutChildClass_slistautoptr: type <cimport,nodecl> = @*GSList
global GtkGridLayoutChildClass_queueautoptr: type <cimport,nodecl> = @*GQueue
global GtkListBase: type <cimport,nodecl,forwarddecl> = @record{}
global GtkListBaseClass: type <cimport,nodecl,forwarddecl> = @record{}
global GtkGridView: type <cimport,nodecl,forwarddecl> = @record{}
global GtkGridViewClass: type <cimport,nodecl,forwarddecl> = @record{}
global GtkHeaderBar: type <cimport,nodecl,forwarddecl> = @record{}
global GtkIconPaintable: type <cimport,nodecl,forwarddecl> = @record{}
global GtkIconTheme: type <cimport,nodecl,forwarddecl> = @record{}
global GtkIconLookupFlags: type <cimport,nodecl,using> = @enum(cint){
  GTK_ICON_LOOKUP_FORCE_REGULAR = 1,
  GTK_ICON_LOOKUP_FORCE_SYMBOLIC = 2,
  GTK_ICON_LOOKUP_PRELOAD = 4
}
global GtkIconThemeError: type <cimport,nodecl,using> = @enum(cint){
  GTK_ICON_THEME_NOT_FOUND = 0,
  GTK_ICON_THEME_FAILED = 1
}
global GtkIconView: type <cimport,nodecl,forwarddecl> = @record{}
global GtkIconViewForeachFunc: type <cimport,nodecl> = @function(icon_view: *GtkIconView, path: *GtkTreePath, data: gpointer): void
global GtkIconViewDropPosition: type <cimport,nodecl,using> = @enum(cint){
  GTK_ICON_VIEW_NO_DROP = 0,
  GTK_ICON_VIEW_DROP_INTO = 1,
  GTK_ICON_VIEW_DROP_LEFT = 2,
  GTK_ICON_VIEW_DROP_RIGHT = 3,
  GTK_ICON_VIEW_DROP_ABOVE = 4,
  GTK_ICON_VIEW_DROP_BELOW = 5
}
global GtkIMContextSimple: type <cimport,nodecl,forwarddecl> = @record{}
global GtkIMContextSimplePrivate: type <cimport,nodecl,forwarddecl> = @record{}
global GtkIMContextSimpleClass: type <cimport,nodecl,forwarddecl> = @record{}
GtkIMContextSimple = @record{
  object: GtkIMContext,
  priv: *GtkIMContextSimplePrivate
}
GtkIMContextSimpleClass = @record{
  parent_class: GtkIMContextClass
}
global GtkIMMulticontext: type <cimport,nodecl,forwarddecl> = @record{}
global GtkIMMulticontextClass: type <cimport,nodecl,forwarddecl> = @record{}
global GtkIMMulticontextPrivate: type <cimport,nodecl,forwarddecl> = @record{}
GtkIMMulticontext = @record{
  object: GtkIMContext,
  priv: *GtkIMMulticontextPrivate
}
GtkIMMulticontextClass = @record{
  parent_class: GtkIMContextClass,
  _gtk_reserved1: function(): void,
  _gtk_reserved2: function(): void,
  _gtk_reserved3: function(): void,
  _gtk_reserved4: function(): void
}
global GtkInfoBar: type <cimport,nodecl,forwarddecl> = @record{}
global GtkLabel: type <cimport,nodecl,forwarddecl> = @record{}
global GtkLabel_autoptr: type <cimport,nodecl> = @*GtkLabel
global GtkLabel_listautoptr: type <cimport,nodecl> = @*GList
global GtkLabel_slistautoptr: type <cimport,nodecl> = @*GSList
global GtkLabel_queueautoptr: type <cimport,nodecl> = @*GQueue
global GtkLevelBar: type <cimport,nodecl,forwarddecl> = @record{}
global GtkLinkButton: type <cimport,nodecl,forwarddecl> = @record{}
global GtkListBox: type <cimport,nodecl,forwarddecl> = @record{}
global GtkListBoxRow: type <cimport,nodecl,forwarddecl> = @record{}
global GtkListBoxRowClass: type <cimport,nodecl,forwarddecl> = @record{}
GtkListBoxRow = @record{
  parent_instance: GtkWidget
}
GtkListBoxRowClass = @record{
  parent_class: GtkWidgetClass,
  activate: function(row: *GtkListBoxRow): void,
  padding: [8]gpointer
}
global GtkListBoxFilterFunc: type <cimport,nodecl> = @function(row: *GtkListBoxRow, user_data: gpointer): gboolean
global GtkListBoxSortFunc: type <cimport,nodecl> = @function(row1: *GtkListBoxRow, row2: *GtkListBoxRow, user_data: gpointer): cint
global GtkListBoxUpdateHeaderFunc: type <cimport,nodecl> = @function(row: *GtkListBoxRow, before: *GtkListBoxRow, user_data: gpointer): void
global GtkListBoxCreateWidgetFunc: type <cimport,nodecl> = @function(item: gpointer, user_data: gpointer): *GtkWidget
global GtkListBoxForeachFunc: type <cimport,nodecl> = @function(box: *GtkListBox, row: *GtkListBoxRow, user_data: gpointer): void
global GtkListBox_autoptr: type <cimport,nodecl> = @*GtkListBox
global GtkListBox_listautoptr: type <cimport,nodecl> = @*GList
global GtkListBox_slistautoptr: type <cimport,nodecl> = @*GSList
global GtkListBox_queueautoptr: type <cimport,nodecl> = @*GQueue
global GtkListBoxRow_autoptr: type <cimport,nodecl> = @*GtkListBoxRow
global GtkListBoxRow_listautoptr: type <cimport,nodecl> = @*GList
global GtkListBoxRow_slistautoptr: type <cimport,nodecl> = @*GSList
global GtkListBoxRow_queueautoptr: type <cimport,nodecl> = @*GQueue
global GtkListItemClass: type <cimport,nodecl,forwarddecl> = @record{}
global GtkListView: type <cimport,nodecl,forwarddecl> = @record{}
global GtkListViewClass: type <cimport,nodecl,forwarddecl> = @record{}
global GtkListView_autoptr: type <cimport,nodecl> = @*GtkListView
global GtkListView_listautoptr: type <cimport,nodecl> = @*GList
global GtkListView_slistautoptr: type <cimport,nodecl> = @*GSList
global GtkListView_queueautoptr: type <cimport,nodecl> = @*GQueue
global GtkLockButton: type <cimport,nodecl,forwarddecl> = @record{}
global GtkMapListModel: type <cimport,nodecl,forwarddecl> = @record{}
global GtkMapListModelClass: type <cimport,nodecl> = @record{
  parent_class: GObjectClass
}
global GtkMapListModel_autoptr: type <cimport,nodecl> = @*GtkMapListModel
global GtkMapListModel_listautoptr: type <cimport,nodecl> = @*GList
global GtkMapListModel_slistautoptr: type <cimport,nodecl> = @*GSList
global GtkMapListModel_queueautoptr: type <cimport,nodecl> = @*GQueue
global GtkMapListModelClass_autoptr: type <cimport,nodecl> = @*GtkMapListModelClass
global GtkMapListModelClass_listautoptr: type <cimport,nodecl> = @*GList
global GtkMapListModelClass_slistautoptr: type <cimport,nodecl> = @*GSList
global GtkMapListModelClass_queueautoptr: type <cimport,nodecl> = @*GQueue
global GtkMapListModelMapFunc: type <cimport,nodecl> = @function(item: gpointer, user_data: gpointer): gpointer
global GtkMediaStream: type <cimport,nodecl,forwarddecl> = @record{}
global GtkMediaStreamClass: type <cimport,nodecl,forwarddecl> = @record{}
GtkMediaStream = @record{
  parent_instance: GObject
}
global GtkMediaStream_autoptr: type <cimport,nodecl> = @*GtkMediaStream
global GtkMediaStream_listautoptr: type <cimport,nodecl> = @*GList
global GtkMediaStream_slistautoptr: type <cimport,nodecl> = @*GSList
global GtkMediaStream_queueautoptr: type <cimport,nodecl> = @*GQueue
global GtkMediaStreamClass_autoptr: type <cimport,nodecl> = @*GtkMediaStreamClass
global GtkMediaStreamClass_listautoptr: type <cimport,nodecl> = @*GList
global GtkMediaStreamClass_slistautoptr: type <cimport,nodecl> = @*GSList
global GtkMediaStreamClass_queueautoptr: type <cimport,nodecl> = @*GQueue
GtkMediaStreamClass = @record{
  parent_class: GObjectClass,
  play: function(self: *GtkMediaStream): gboolean,
  pause: function(self: *GtkMediaStream): void,
  seek: function(self: *GtkMediaStream, timestamp: gint64): void,
  update_audio: function(self: *GtkMediaStream, muted: gboolean, volume: float64): void,
  realize: function(self: *GtkMediaStream, surface: *GdkSurface): void,
  unrealize: function(self: *GtkMediaStream, surface: *GdkSurface): void,
  _gtk_reserved1: function(): void,
  _gtk_reserved2: function(): void,
  _gtk_reserved3: function(): void,
  _gtk_reserved4: function(): void,
  _gtk_reserved5: function(): void,
  _gtk_reserved6: function(): void,
  _gtk_reserved7: function(): void,
  _gtk_reserved8: function(): void
}
global GtkMediaControls: type <cimport,nodecl,forwarddecl> = @record{}
global GtkMediaControlsClass: type <cimport,nodecl> = @record{
  parent_class: GtkWidgetClass
}
global GtkMediaControls_autoptr: type <cimport,nodecl> = @*GtkMediaControls
global GtkMediaControls_listautoptr: type <cimport,nodecl> = @*GList
global GtkMediaControls_slistautoptr: type <cimport,nodecl> = @*GSList
global GtkMediaControls_queueautoptr: type <cimport,nodecl> = @*GQueue
global GtkMediaControlsClass_autoptr: type <cimport,nodecl> = @*GtkMediaControlsClass
global GtkMediaControlsClass_listautoptr: type <cimport,nodecl> = @*GList
global GtkMediaControlsClass_slistautoptr: type <cimport,nodecl> = @*GSList
global GtkMediaControlsClass_queueautoptr: type <cimport,nodecl> = @*GQueue
global GtkMediaFile: type <cimport,nodecl,forwarddecl> = @record{}
global GtkMediaFileClass: type <cimport,nodecl,forwarddecl> = @record{}
GtkMediaFile = @record{
  parent_instance: GtkMediaStream
}
global GtkMediaFile_autoptr: type <cimport,nodecl> = @*GtkMediaFile
global GtkMediaFile_listautoptr: type <cimport,nodecl> = @*GList
global GtkMediaFile_slistautoptr: type <cimport,nodecl> = @*GSList
global GtkMediaFile_queueautoptr: type <cimport,nodecl> = @*GQueue
global GtkMediaFileClass_autoptr: type <cimport,nodecl> = @*GtkMediaFileClass
global GtkMediaFileClass_listautoptr: type <cimport,nodecl> = @*GList
global GtkMediaFileClass_slistautoptr: type <cimport,nodecl> = @*GSList
global GtkMediaFileClass_queueautoptr: type <cimport,nodecl> = @*GQueue
GtkMediaFileClass = @record{
  parent_class: GtkMediaStreamClass,
  open: function(self: *GtkMediaFile): void,
  close: function(self: *GtkMediaFile): void,
  _gtk_reserved1: function(): void,
  _gtk_reserved2: function(): void,
  _gtk_reserved3: function(): void,
  _gtk_reserved4: function(): void
}
global GtkPopover: type <cimport,nodecl,forwarddecl> = @record{}
global GtkPopoverClass: type <cimport,nodecl,forwarddecl> = @record{}
GtkPopover = @record{
  parent: GtkWidget
}
GtkPopoverClass = @record{
  parent_class: GtkWidgetClass,
  closed: function(popover: *GtkPopover): void,
  activate_default: function(popover: *GtkPopover): void,
  reserved: [8]gpointer
}
global GtkMenuButton: type <cimport,nodecl,forwarddecl> = @record{}
global GtkMenuButtonCreatePopupFunc: type <cimport,nodecl> = @function(menu_button: *GtkMenuButton, user_data: gpointer): void
global GtkMessageDialog: type <cimport,nodecl,forwarddecl> = @record{}
global GtkMessageDialogClass: type <cimport,nodecl,forwarddecl> = @record{}
GtkMessageDialog = @record{
  parent_instance: GtkDialog
}
global GtkButtonsType: type <cimport,nodecl,using> = @enum(cint){
  GTK_BUTTONS_NONE = 0,
  GTK_BUTTONS_OK = 1,
  GTK_BUTTONS_CLOSE = 2,
  GTK_BUTTONS_CANCEL = 3,
  GTK_BUTTONS_YES_NO = 4,
  GTK_BUTTONS_OK_CANCEL = 5
}
global GtkMountOperation: type <cimport,nodecl,forwarddecl> = @record{}
global GtkMountOperationClass: type <cimport,nodecl,forwarddecl> = @record{}
global GtkMountOperationPrivate: type <cimport,nodecl,forwarddecl> = @record{}
GtkMountOperation = @record{
  parent_instance: GMountOperation,
  priv: *GtkMountOperationPrivate
}
GtkMountOperationClass = @record{
  parent_class: GMountOperationClass,
  _gtk_reserved1: function(): void,
  _gtk_reserved2: function(): void,
  _gtk_reserved3: function(): void,
  _gtk_reserved4: function(): void
}
global GtkMultiFilter: type <cimport,nodecl,forwarddecl> = @record{}
global GtkMultiFilterClass: type <cimport,nodecl,forwarddecl> = @record{}
global GtkMultiFilter_autoptr: type <cimport,nodecl> = @*GtkMultiFilter
global GtkMultiFilter_listautoptr: type <cimport,nodecl> = @*GList
global GtkMultiFilter_slistautoptr: type <cimport,nodecl> = @*GSList
global GtkMultiFilter_queueautoptr: type <cimport,nodecl> = @*GQueue
global GtkMultiFilterClass_autoptr: type <cimport,nodecl> = @*GtkMultiFilterClass
global GtkMultiFilterClass_listautoptr: type <cimport,nodecl> = @*GList
global GtkMultiFilterClass_slistautoptr: type <cimport,nodecl> = @*GSList
global GtkMultiFilterClass_queueautoptr: type <cimport,nodecl> = @*GQueue
global GtkAnyFilter: type <cimport,nodecl,forwarddecl> = @record{}
global GtkAnyFilterClass: type <cimport,nodecl,forwarddecl> = @record{}
global GtkAnyFilter_autoptr: type <cimport,nodecl> = @*GtkAnyFilter
global GtkAnyFilter_listautoptr: type <cimport,nodecl> = @*GList
global GtkAnyFilter_slistautoptr: type <cimport,nodecl> = @*GSList
global GtkAnyFilter_queueautoptr: type <cimport,nodecl> = @*GQueue
global GtkAnyFilterClass_autoptr: type <cimport,nodecl> = @*GtkAnyFilterClass
global GtkAnyFilterClass_listautoptr: type <cimport,nodecl> = @*GList
global GtkAnyFilterClass_slistautoptr: type <cimport,nodecl> = @*GSList
global GtkAnyFilterClass_queueautoptr: type <cimport,nodecl> = @*GQueue
global GtkEveryFilter: type <cimport,nodecl,forwarddecl> = @record{}
global GtkEveryFilterClass: type <cimport,nodecl,forwarddecl> = @record{}
global GtkEveryFilter_autoptr: type <cimport,nodecl> = @*GtkEveryFilter
global GtkEveryFilter_listautoptr: type <cimport,nodecl> = @*GList
global GtkEveryFilter_slistautoptr: type <cimport,nodecl> = @*GSList
global GtkEveryFilter_queueautoptr: type <cimport,nodecl> = @*GQueue
global GtkEveryFilterClass_autoptr: type <cimport,nodecl> = @*GtkEveryFilterClass
global GtkEveryFilterClass_listautoptr: type <cimport,nodecl> = @*GList
global GtkEveryFilterClass_slistautoptr: type <cimport,nodecl> = @*GSList
global GtkEveryFilterClass_queueautoptr: type <cimport,nodecl> = @*GQueue
global GtkMultiSelection: type <cimport,nodecl,forwarddecl> = @record{}
global GtkMultiSelectionClass: type <cimport,nodecl> = @record{
  parent_class: GObjectClass
}
global GtkMultiSelection_autoptr: type <cimport,nodecl> = @*GtkMultiSelection
global GtkMultiSelection_listautoptr: type <cimport,nodecl> = @*GList
global GtkMultiSelection_slistautoptr: type <cimport,nodecl> = @*GSList
global GtkMultiSelection_queueautoptr: type <cimport,nodecl> = @*GQueue
global GtkMultiSelectionClass_autoptr: type <cimport,nodecl> = @*GtkMultiSelectionClass
global GtkMultiSelectionClass_listautoptr: type <cimport,nodecl> = @*GList
global GtkMultiSelectionClass_slistautoptr: type <cimport,nodecl> = @*GSList
global GtkMultiSelectionClass_queueautoptr: type <cimport,nodecl> = @*GQueue
global GtkMultiSorter: type <cimport,nodecl,forwarddecl> = @record{}
global GtkMultiSorterClass: type <cimport,nodecl> = @record{
  parent_class: GtkSorterClass
}
global GtkMultiSorter_autoptr: type <cimport,nodecl> = @*GtkMultiSorter
global GtkMultiSorter_listautoptr: type <cimport,nodecl> = @*GList
global GtkMultiSorter_slistautoptr: type <cimport,nodecl> = @*GSList
global GtkMultiSorter_queueautoptr: type <cimport,nodecl> = @*GQueue
global GtkMultiSorterClass_autoptr: type <cimport,nodecl> = @*GtkMultiSorterClass
global GtkMultiSorterClass_listautoptr: type <cimport,nodecl> = @*GList
global GtkMultiSorterClass_slistautoptr: type <cimport,nodecl> = @*GSList
global GtkMultiSorterClass_queueautoptr: type <cimport,nodecl> = @*GQueue
global GtkNativeInterface: type <cimport,nodecl,forwarddecl> = @record{}
global GtkNative_autoptr: type <cimport,nodecl> = @*GtkNative
global GtkNative_listautoptr: type <cimport,nodecl> = @*GList
global GtkNative_slistautoptr: type <cimport,nodecl> = @*GSList
global GtkNative_queueautoptr: type <cimport,nodecl> = @*GQueue
global GtkNoSelection: type <cimport,nodecl,forwarddecl> = @record{}
global GtkNoSelectionClass: type <cimport,nodecl> = @record{
  parent_class: GObjectClass
}
global GtkNoSelection_autoptr: type <cimport,nodecl> = @*GtkNoSelection
global GtkNoSelection_listautoptr: type <cimport,nodecl> = @*GList
global GtkNoSelection_slistautoptr: type <cimport,nodecl> = @*GSList
global GtkNoSelection_queueautoptr: type <cimport,nodecl> = @*GQueue
global GtkNoSelectionClass_autoptr: type <cimport,nodecl> = @*GtkNoSelectionClass
global GtkNoSelectionClass_listautoptr: type <cimport,nodecl> = @*GList
global GtkNoSelectionClass_slistautoptr: type <cimport,nodecl> = @*GSList
global GtkNoSelectionClass_queueautoptr: type <cimport,nodecl> = @*GQueue
global GtkNotebookPage: type <cimport,nodecl,forwarddecl> = @record{}
global GtkNotebookTab: type <cimport,nodecl,using> = @enum(cint){
  GTK_NOTEBOOK_TAB_FIRST = 0,
  GTK_NOTEBOOK_TAB_LAST = 1
}
global GtkNotebook: type <cimport,nodecl,forwarddecl> = @record{}
global GtkNumericSorter: type <cimport,nodecl,forwarddecl> = @record{}
global GtkNumericSorterClass: type <cimport,nodecl> = @record{
  parent_class: GtkSorterClass
}
global GtkNumericSorter_autoptr: type <cimport,nodecl> = @*GtkNumericSorter
global GtkNumericSorter_listautoptr: type <cimport,nodecl> = @*GList
global GtkNumericSorter_slistautoptr: type <cimport,nodecl> = @*GSList
global GtkNumericSorter_queueautoptr: type <cimport,nodecl> = @*GQueue
global GtkNumericSorterClass_autoptr: type <cimport,nodecl> = @*GtkNumericSorterClass
global GtkNumericSorterClass_listautoptr: type <cimport,nodecl> = @*GList
global GtkNumericSorterClass_slistautoptr: type <cimport,nodecl> = @*GSList
global GtkNumericSorterClass_queueautoptr: type <cimport,nodecl> = @*GQueue
global GtkOrientable: type <cimport,nodecl,forwarddecl> = @record{}
global GtkOrientableIface: type <cimport,nodecl,forwarddecl> = @record{}
GtkOrientableIface = @record{
  base_iface: GTypeInterface
}
global GtkOverlay: type <cimport,nodecl,forwarddecl> = @record{}
global GtkOverlayLayout: type <cimport,nodecl,forwarddecl> = @record{}
global GtkOverlayLayoutClass: type <cimport,nodecl> = @record{
  parent_class: GtkLayoutManagerClass
}
global GtkOverlayLayout_autoptr: type <cimport,nodecl> = @*GtkOverlayLayout
global GtkOverlayLayout_listautoptr: type <cimport,nodecl> = @*GList
global GtkOverlayLayout_slistautoptr: type <cimport,nodecl> = @*GSList
global GtkOverlayLayout_queueautoptr: type <cimport,nodecl> = @*GQueue
global GtkOverlayLayoutClass_autoptr: type <cimport,nodecl> = @*GtkOverlayLayoutClass
global GtkOverlayLayoutClass_listautoptr: type <cimport,nodecl> = @*GList
global GtkOverlayLayoutClass_slistautoptr: type <cimport,nodecl> = @*GSList
global GtkOverlayLayoutClass_queueautoptr: type <cimport,nodecl> = @*GQueue
global GtkOverlayLayoutChild: type <cimport,nodecl,forwarddecl> = @record{}
global GtkOverlayLayoutChildClass: type <cimport,nodecl> = @record{
  parent_class: GtkLayoutChildClass
}
global GtkOverlayLayoutChild_autoptr: type <cimport,nodecl> = @*GtkOverlayLayoutChild
global GtkOverlayLayoutChild_listautoptr: type <cimport,nodecl> = @*GList
global GtkOverlayLayoutChild_slistautoptr: type <cimport,nodecl> = @*GSList
global GtkOverlayLayoutChild_queueautoptr: type <cimport,nodecl> = @*GQueue
global GtkOverlayLayoutChildClass_autoptr: type <cimport,nodecl> = @*GtkOverlayLayoutChildClass
global GtkOverlayLayoutChildClass_listautoptr: type <cimport,nodecl> = @*GList
global GtkOverlayLayoutChildClass_slistautoptr: type <cimport,nodecl> = @*GSList
global GtkOverlayLayoutChildClass_queueautoptr: type <cimport,nodecl> = @*GQueue
global GtkPadController: type <cimport,nodecl,forwarddecl> = @record{}
global GtkPadControllerClass: type <cimport,nodecl,forwarddecl> = @record{}
global GtkPadActionEntry: type <cimport,nodecl,forwarddecl> = @record{}
global GtkPadActionType: type <cimport,nodecl,using> = @enum(cint){
  GTK_PAD_ACTION_BUTTON = 0,
  GTK_PAD_ACTION_RING = 1,
  GTK_PAD_ACTION_STRIP = 2
}
GtkPadActionEntry = @record{
  type: GtkPadActionType,
  index: cint,
  mode: cint,
  label: cstring,
  action_name: cstring
}
global GtkPaperSize: type <cimport,nodecl,forwarddecl> = @record{}
global GtkPageSetup: type <cimport,nodecl,forwarddecl> = @record{}
global GtkPaned: type <cimport,nodecl,forwarddecl> = @record{}
global GtkPasswordEntry: type <cimport,nodecl,forwarddecl> = @record{}
global GtkPasswordEntryClass: type <cimport,nodecl,forwarddecl> = @record{}
global GtkPasswordEntryBuffer: type <cimport,nodecl,forwarddecl> = @record{}
global GtkPasswordEntryBufferClass: type <cimport,nodecl> = @record{
  parent_class: GtkEntryBufferClass
}
global GtkPasswordEntryBuffer_autoptr: type <cimport,nodecl> = @*GtkPasswordEntryBuffer
global GtkPasswordEntryBuffer_listautoptr: type <cimport,nodecl> = @*GList
global GtkPasswordEntryBuffer_slistautoptr: type <cimport,nodecl> = @*GSList
global GtkPasswordEntryBuffer_queueautoptr: type <cimport,nodecl> = @*GQueue
global GtkPasswordEntryBufferClass_autoptr: type <cimport,nodecl> = @*GtkPasswordEntryBufferClass
global GtkPasswordEntryBufferClass_listautoptr: type <cimport,nodecl> = @*GList
global GtkPasswordEntryBufferClass_slistautoptr: type <cimport,nodecl> = @*GSList
global GtkPasswordEntryBufferClass_queueautoptr: type <cimport,nodecl> = @*GQueue
global GtkPicture: type <cimport,nodecl,forwarddecl> = @record{}
global GtkPictureClass: type <cimport,nodecl> = @record{
  parent_class: GtkWidgetClass
}
global GtkPicture_autoptr: type <cimport,nodecl> = @*GtkPicture
global GtkPicture_listautoptr: type <cimport,nodecl> = @*GList
global GtkPicture_slistautoptr: type <cimport,nodecl> = @*GSList
global GtkPicture_queueautoptr: type <cimport,nodecl> = @*GQueue
global GtkPictureClass_autoptr: type <cimport,nodecl> = @*GtkPictureClass
global GtkPictureClass_listautoptr: type <cimport,nodecl> = @*GList
global GtkPictureClass_slistautoptr: type <cimport,nodecl> = @*GSList
global GtkPictureClass_queueautoptr: type <cimport,nodecl> = @*GQueue
global GtkPopoverMenu: type <cimport,nodecl,forwarddecl> = @record{}
global GtkPopoverMenuFlags: type <cimport,nodecl,using> = @enum(cint){
  GTK_POPOVER_MENU_NESTED = 1
}
global GtkPopoverMenuBar: type <cimport,nodecl,forwarddecl> = @record{}
global GtkPrintContext: type <cimport,nodecl,forwarddecl> = @record{}
global GtkPrintSettings: type <cimport,nodecl,forwarddecl> = @record{}
global GtkPrintSettingsFunc: type <cimport,nodecl> = @function(key: cstring, value: cstring, user_data: gpointer): void
global GtkPageRange: type <cimport,nodecl,forwarddecl> = @record{}
GtkPageRange = @record{
  start: cint,
  end_: cint
}
global GtkPrintOperationPreview: type <cimport,nodecl,forwarddecl> = @record{}
global GtkPrintOperationPreviewIface: type <cimport,nodecl,forwarddecl> = @record{}
GtkPrintOperationPreviewIface = @record{
  g_iface: GTypeInterface,
  ready: function(preview: *GtkPrintOperationPreview, context: *GtkPrintContext): void,
  got_page_size: function(preview: *GtkPrintOperationPreview, context: *GtkPrintContext, page_setup: *GtkPageSetup): void,
  render_page: function(preview: *GtkPrintOperationPreview, page_nr: cint): void,
  is_selected: function(preview: *GtkPrintOperationPreview, page_nr: cint): gboolean,
  end_preview: function(preview: *GtkPrintOperationPreview): void,
  _gtk_reserved1: function(): void,
  _gtk_reserved2: function(): void,
  _gtk_reserved3: function(): void,
  _gtk_reserved4: function(): void,
  _gtk_reserved5: function(): void,
  _gtk_reserved6: function(): void,
  _gtk_reserved7: function(): void,
  _gtk_reserved8: function(): void
}
global GtkPrintOperationClass: type <cimport,nodecl,forwarddecl> = @record{}
global GtkPrintOperationPrivate: type <cimport,nodecl,forwarddecl> = @record{}
global GtkPrintOperation: type <cimport,nodecl,forwarddecl> = @record{}
global GtkPrintStatus: type <cimport,nodecl,using> = @enum(cint){
  GTK_PRINT_STATUS_INITIAL = 0,
  GTK_PRINT_STATUS_PREPARING = 1,
  GTK_PRINT_STATUS_GENERATING_DATA = 2,
  GTK_PRINT_STATUS_SENDING_DATA = 3,
  GTK_PRINT_STATUS_PENDING = 4,
  GTK_PRINT_STATUS_PENDING_ISSUE = 5,
  GTK_PRINT_STATUS_PRINTING = 6,
  GTK_PRINT_STATUS_FINISHED = 7,
  GTK_PRINT_STATUS_FINISHED_ABORTED = 8
}
global GtkPrintOperationResult: type <cimport,nodecl,using> = @enum(cint){
  GTK_PRINT_OPERATION_RESULT_ERROR = 0,
  GTK_PRINT_OPERATION_RESULT_APPLY = 1,
  GTK_PRINT_OPERATION_RESULT_CANCEL = 2,
  GTK_PRINT_OPERATION_RESULT_IN_PROGRESS = 3
}
global GtkPrintOperationAction: type <cimport,nodecl,using> = @enum(cint){
  GTK_PRINT_OPERATION_ACTION_PRINT_DIALOG = 0,
  GTK_PRINT_OPERATION_ACTION_PRINT = 1,
  GTK_PRINT_OPERATION_ACTION_PREVIEW = 2,
  GTK_PRINT_OPERATION_ACTION_EXPORT = 3
}
GtkPrintOperation = @record{
  parent_instance: GObject,
  priv: *GtkPrintOperationPrivate
}
GtkPrintOperationClass = @record{
  parent_class: GObjectClass,
  done: function(operation: *GtkPrintOperation, result: GtkPrintOperationResult): void,
  begin_print: function(operation: *GtkPrintOperation, context: *GtkPrintContext): void,
  paginate: function(operation: *GtkPrintOperation, context: *GtkPrintContext): gboolean,
  request_page_setup: function(operation: *GtkPrintOperation, context: *GtkPrintContext, page_nr: cint, setup: *GtkPageSetup): void,
  draw_page: function(operation: *GtkPrintOperation, context: *GtkPrintContext, page_nr: cint): void,
  end_print: function(operation: *GtkPrintOperation, context: *GtkPrintContext): void,
  status_changed: function(operation: *GtkPrintOperation): void,
  create_custom_widget: function(operation: *GtkPrintOperation): *GtkWidget,
  custom_widget_apply: function(operation: *GtkPrintOperation, widget: *GtkWidget): void,
  preview: function(operation: *GtkPrintOperation, preview: *GtkPrintOperationPreview, context: *GtkPrintContext, parent: *GtkWindow): gboolean,
  update_custom_widget: function(operation: *GtkPrintOperation, widget: *GtkWidget, setup: *GtkPageSetup, settings: *GtkPrintSettings): void,
  padding: [8]gpointer
}
global GtkPrintError: type <cimport,nodecl,using> = @enum(cint){
  GTK_PRINT_ERROR_GENERAL = 0,
  GTK_PRINT_ERROR_INTERNAL_ERROR = 1,
  GTK_PRINT_ERROR_NOMEM = 2,
  GTK_PRINT_ERROR_INVALID_FILE = 3
}
global GtkPageSetupDoneFunc: type <cimport,nodecl> = @function(page_setup: *GtkPageSetup, data: gpointer): void
global GtkProgressBar: type <cimport,nodecl,forwarddecl> = @record{}
global GtkRange: type <cimport,nodecl,forwarddecl> = @record{}
global GtkRangeClass: type <cimport,nodecl,forwarddecl> = @record{}
GtkRange = @record{
  parent_instance: GtkWidget
}
GtkRangeClass = @record{
  parent_class: GtkWidgetClass,
  value_changed: function(range: *GtkRange): void,
  adjust_bounds: function(range: *GtkRange, new_value: float64): void,
  move_slider: function(range: *GtkRange, scroll: GtkScrollType): void,
  get_range_border: function(range: *GtkRange, border_: *GtkBorder): void,
  change_value: function(range: *GtkRange, scroll: GtkScrollType, new_value: float64): gboolean,
  padding: [8]gpointer
}
global GtkRecentInfo: type <cimport,nodecl,forwarddecl> = @record{}
global GtkRecentData: type <cimport,nodecl,forwarddecl> = @record{}
global GtkRecentManager: type <cimport,nodecl,forwarddecl> = @record{}
global GtkRecentManagerClass: type <cimport,nodecl,forwarddecl> = @record{}
global GtkRecentManagerPrivate: type <cimport,nodecl,forwarddecl> = @record{}
GtkRecentData = @record{
  display_name: cstring,
  description: cstring,
  mime_type: cstring,
  app_name: cstring,
  app_exec: cstring,
  groups: *cstring,
  is_private: gboolean
}
GtkRecentManager = @record{
  parent_instance: GObject,
  priv: *GtkRecentManagerPrivate
}
GtkRecentManagerClass = @record{
  parent_class: GObjectClass,
  changed: function(manager: *GtkRecentManager): void,
  _gtk_recent1: function(): void,
  _gtk_recent2: function(): void,
  _gtk_recent3: function(): void,
  _gtk_recent4: function(): void
}
global GtkRecentManagerError: type <cimport,nodecl,using> = @enum(cint){
  GTK_RECENT_MANAGER_ERROR_NOT_FOUND = 0,
  GTK_RECENT_MANAGER_ERROR_INVALID_URI = 1,
  GTK_RECENT_MANAGER_ERROR_INVALID_ENCODING = 2,
  GTK_RECENT_MANAGER_ERROR_NOT_REGISTERED = 3,
  GTK_RECENT_MANAGER_ERROR_READ = 4,
  GTK_RECENT_MANAGER_ERROR_WRITE = 5,
  GTK_RECENT_MANAGER_ERROR_UNKNOWN = 6
}
global GtkRevealer: type <cimport,nodecl,forwarddecl> = @record{}
global GtkRevealerTransitionType: type <cimport,nodecl,using> = @enum(cint){
  GTK_REVEALER_TRANSITION_TYPE_NONE = 0,
  GTK_REVEALER_TRANSITION_TYPE_CROSSFADE = 1,
  GTK_REVEALER_TRANSITION_TYPE_SLIDE_RIGHT = 2,
  GTK_REVEALER_TRANSITION_TYPE_SLIDE_LEFT = 3,
  GTK_REVEALER_TRANSITION_TYPE_SLIDE_UP = 4,
  GTK_REVEALER_TRANSITION_TYPE_SLIDE_DOWN = 5,
  GTK_REVEALER_TRANSITION_TYPE_SWING_RIGHT = 6,
  GTK_REVEALER_TRANSITION_TYPE_SWING_LEFT = 7,
  GTK_REVEALER_TRANSITION_TYPE_SWING_UP = 8,
  GTK_REVEALER_TRANSITION_TYPE_SWING_DOWN = 9
}
global GtkRootInterface: type <cimport,nodecl,forwarddecl> = @record{}
global GtkRoot_autoptr: type <cimport,nodecl> = @*GtkRoot
global GtkRoot_listautoptr: type <cimport,nodecl> = @*GList
global GtkRoot_slistautoptr: type <cimport,nodecl> = @*GSList
global GtkRoot_queueautoptr: type <cimport,nodecl> = @*GQueue
global GtkScale: type <cimport,nodecl,forwarddecl> = @record{}
global GtkScaleClass: type <cimport,nodecl,forwarddecl> = @record{}
GtkScale = @record{
  parent_instance: GtkRange
}
GtkScaleClass = @record{
  parent_class: GtkRangeClass,
  get_layout_offsets: function(scale: *GtkScale, x: *cint, y: *cint): void,
  padding: [8]gpointer
}
global GtkScaleFormatValueFunc: type <cimport,nodecl> = @function(scale: *GtkScale, value: float64, user_data: gpointer): cstring
global GtkScaleButton: type <cimport,nodecl,forwarddecl> = @record{}
global GtkScaleButtonClass: type <cimport,nodecl,forwarddecl> = @record{}
GtkScaleButton = @record{
  parent_instance: GtkWidget
}
GtkScaleButtonClass = @record{
  parent_class: GtkWidgetClass,
  value_changed: function(button: *GtkScaleButton, value: float64): void,
  padding: [8]gpointer
}
global GtkScrollable: type <cimport,nodecl,forwarddecl> = @record{}
global GtkScrollableInterface: type <cimport,nodecl,forwarddecl> = @record{}
GtkScrollableInterface = @record{
  base_iface: GTypeInterface,
  get_border: function(scrollable: *GtkScrollable, border: *GtkBorder): gboolean
}
global GtkScrollbar: type <cimport,nodecl,forwarddecl> = @record{}
global GtkScrolledWindow: type <cimport,nodecl,forwarddecl> = @record{}
global GtkCornerType: type <cimport,nodecl,using> = @enum(cint){
  GTK_CORNER_TOP_LEFT = 0,
  GTK_CORNER_BOTTOM_LEFT = 1,
  GTK_CORNER_TOP_RIGHT = 2,
  GTK_CORNER_BOTTOM_RIGHT = 3
}
global GtkPolicyType: type <cimport,nodecl,using> = @enum(cint){
  GTK_POLICY_ALWAYS = 0,
  GTK_POLICY_AUTOMATIC = 1,
  GTK_POLICY_NEVER = 2,
  GTK_POLICY_EXTERNAL = 3
}
global GtkSearchBar: type <cimport,nodecl,forwarddecl> = @record{}
global GtkSearchEntry: type <cimport,nodecl,forwarddecl> = @record{}
global GtkSelectionFilterModel: type <cimport,nodecl,forwarddecl> = @record{}
global GtkSelectionFilterModelClass: type <cimport,nodecl> = @record{
  parent_class: GObjectClass
}
global GtkSelectionFilterModel_autoptr: type <cimport,nodecl> = @*GtkSelectionFilterModel
global GtkSelectionFilterModel_listautoptr: type <cimport,nodecl> = @*GList
global GtkSelectionFilterModel_slistautoptr: type <cimport,nodecl> = @*GSList
global GtkSelectionFilterModel_queueautoptr: type <cimport,nodecl> = @*GQueue
global GtkSelectionFilterModelClass_autoptr: type <cimport,nodecl> = @*GtkSelectionFilterModelClass
global GtkSelectionFilterModelClass_listautoptr: type <cimport,nodecl> = @*GList
global GtkSelectionFilterModelClass_slistautoptr: type <cimport,nodecl> = @*GSList
global GtkSelectionFilterModelClass_queueautoptr: type <cimport,nodecl> = @*GQueue
global GtkSeparator: type <cimport,nodecl,forwarddecl> = @record{}
global GtkShortcutController: type <cimport,nodecl,forwarddecl> = @record{}
global GtkShortcutControllerClass: type <cimport,nodecl,forwarddecl> = @record{}
global GtkShortcutLabel: type <cimport,nodecl,forwarddecl> = @record{}
global GtkShortcutLabelClass: type <cimport,nodecl,forwarddecl> = @record{}
global GtkShortcutManager: type <cimport,nodecl,forwarddecl> = @record{}
global GtkShortcutManagerInterface: type <cimport,nodecl,forwarddecl> = @record{}
global GtkShortcutManager_autoptr: type <cimport,nodecl> = @*GtkShortcutManager
global GtkShortcutManager_listautoptr: type <cimport,nodecl> = @*GList
global GtkShortcutManager_slistautoptr: type <cimport,nodecl> = @*GSList
global GtkShortcutManager_queueautoptr: type <cimport,nodecl> = @*GQueue
GtkShortcutManagerInterface = @record{
  g_iface: GTypeInterface,
  add_controller: function(self: *GtkShortcutManager, controller: *GtkShortcutController): void,
  remove_controller: function(self: *GtkShortcutManager, controller: *GtkShortcutController): void
}
global GtkShortcutsGroup: type <cimport,nodecl,forwarddecl> = @record{}
global GtkShortcutsGroupClass: type <cimport,nodecl,forwarddecl> = @record{}
global GtkShortcutsSection: type <cimport,nodecl,forwarddecl> = @record{}
global GtkShortcutsSectionClass: type <cimport,nodecl,forwarddecl> = @record{}
global GtkShortcutsShortcut: type <cimport,nodecl,forwarddecl> = @record{}
global GtkShortcutsShortcutClass: type <cimport,nodecl,forwarddecl> = @record{}
global GtkShortcutType: type <cimport,nodecl,using> = @enum(cint){
  GTK_SHORTCUT_ACCELERATOR = 0,
  GTK_SHORTCUT_GESTURE_PINCH = 1,
  GTK_SHORTCUT_GESTURE_STRETCH = 2,
  GTK_SHORTCUT_GESTURE_ROTATE_CLOCKWISE = 3,
  GTK_SHORTCUT_GESTURE_ROTATE_COUNTERCLOCKWISE = 4,
  GTK_SHORTCUT_GESTURE_TWO_FINGER_SWIPE_LEFT = 5,
  GTK_SHORTCUT_GESTURE_TWO_FINGER_SWIPE_RIGHT = 6,
  GTK_SHORTCUT_GESTURE = 7,
  GTK_SHORTCUT_GESTURE_SWIPE_LEFT = 8,
  GTK_SHORTCUT_GESTURE_SWIPE_RIGHT = 9
}
global GtkShortcutTriggerClass: type <cimport,nodecl,forwarddecl> = @record{}
global GtkShortcutTrigger_autoptr: type <cimport,nodecl> = @*GtkShortcutTrigger
global GtkShortcutTrigger_listautoptr: type <cimport,nodecl> = @*GList
global GtkShortcutTrigger_slistautoptr: type <cimport,nodecl> = @*GSList
global GtkShortcutTrigger_queueautoptr: type <cimport,nodecl> = @*GQueue
global GtkShortcutTriggerClass_autoptr: type <cimport,nodecl> = @*GtkShortcutTriggerClass
global GtkShortcutTriggerClass_listautoptr: type <cimport,nodecl> = @*GList
global GtkShortcutTriggerClass_slistautoptr: type <cimport,nodecl> = @*GSList
global GtkShortcutTriggerClass_queueautoptr: type <cimport,nodecl> = @*GQueue
global GtkNeverTrigger: type <cimport,nodecl,forwarddecl> = @record{}
global GtkNeverTriggerClass: type <cimport,nodecl,forwarddecl> = @record{}
global GtkNeverTrigger_autoptr: type <cimport,nodecl> = @*GtkNeverTrigger
global GtkNeverTrigger_listautoptr: type <cimport,nodecl> = @*GList
global GtkNeverTrigger_slistautoptr: type <cimport,nodecl> = @*GSList
global GtkNeverTrigger_queueautoptr: type <cimport,nodecl> = @*GQueue
global GtkNeverTriggerClass_autoptr: type <cimport,nodecl> = @*GtkNeverTriggerClass
global GtkNeverTriggerClass_listautoptr: type <cimport,nodecl> = @*GList
global GtkNeverTriggerClass_slistautoptr: type <cimport,nodecl> = @*GSList
global GtkNeverTriggerClass_queueautoptr: type <cimport,nodecl> = @*GQueue
global GtkKeyvalTrigger: type <cimport,nodecl,forwarddecl> = @record{}
global GtkKeyvalTriggerClass: type <cimport,nodecl,forwarddecl> = @record{}
global GtkKeyvalTrigger_autoptr: type <cimport,nodecl> = @*GtkKeyvalTrigger
global GtkKeyvalTrigger_listautoptr: type <cimport,nodecl> = @*GList
global GtkKeyvalTrigger_slistautoptr: type <cimport,nodecl> = @*GSList
global GtkKeyvalTrigger_queueautoptr: type <cimport,nodecl> = @*GQueue
global GtkKeyvalTriggerClass_autoptr: type <cimport,nodecl> = @*GtkKeyvalTriggerClass
global GtkKeyvalTriggerClass_listautoptr: type <cimport,nodecl> = @*GList
global GtkKeyvalTriggerClass_slistautoptr: type <cimport,nodecl> = @*GSList
global GtkKeyvalTriggerClass_queueautoptr: type <cimport,nodecl> = @*GQueue
global GtkMnemonicTrigger: type <cimport,nodecl,forwarddecl> = @record{}
global GtkMnemonicTriggerClass: type <cimport,nodecl,forwarddecl> = @record{}
global GtkMnemonicTrigger_autoptr: type <cimport,nodecl> = @*GtkMnemonicTrigger
global GtkMnemonicTrigger_listautoptr: type <cimport,nodecl> = @*GList
global GtkMnemonicTrigger_slistautoptr: type <cimport,nodecl> = @*GSList
global GtkMnemonicTrigger_queueautoptr: type <cimport,nodecl> = @*GQueue
global GtkMnemonicTriggerClass_autoptr: type <cimport,nodecl> = @*GtkMnemonicTriggerClass
global GtkMnemonicTriggerClass_listautoptr: type <cimport,nodecl> = @*GList
global GtkMnemonicTriggerClass_slistautoptr: type <cimport,nodecl> = @*GSList
global GtkMnemonicTriggerClass_queueautoptr: type <cimport,nodecl> = @*GQueue
global GtkAlternativeTrigger: type <cimport,nodecl,forwarddecl> = @record{}
global GtkAlternativeTriggerClass: type <cimport,nodecl,forwarddecl> = @record{}
global GtkAlternativeTrigger_autoptr: type <cimport,nodecl> = @*GtkAlternativeTrigger
global GtkAlternativeTrigger_listautoptr: type <cimport,nodecl> = @*GList
global GtkAlternativeTrigger_slistautoptr: type <cimport,nodecl> = @*GSList
global GtkAlternativeTrigger_queueautoptr: type <cimport,nodecl> = @*GQueue
global GtkAlternativeTriggerClass_autoptr: type <cimport,nodecl> = @*GtkAlternativeTriggerClass
global GtkAlternativeTriggerClass_listautoptr: type <cimport,nodecl> = @*GList
global GtkAlternativeTriggerClass_slistautoptr: type <cimport,nodecl> = @*GSList
global GtkAlternativeTriggerClass_queueautoptr: type <cimport,nodecl> = @*GQueue
global GtkSignalListItemFactory: type <cimport,nodecl,forwarddecl> = @record{}
global GtkSignalListItemFactoryClass: type <cimport,nodecl,forwarddecl> = @record{}
global GtkSingleSelection: type <cimport,nodecl,forwarddecl> = @record{}
global GtkSingleSelectionClass: type <cimport,nodecl> = @record{
  parent_class: GObjectClass
}
global GtkSingleSelection_autoptr: type <cimport,nodecl> = @*GtkSingleSelection
global GtkSingleSelection_listautoptr: type <cimport,nodecl> = @*GList
global GtkSingleSelection_slistautoptr: type <cimport,nodecl> = @*GSList
global GtkSingleSelection_queueautoptr: type <cimport,nodecl> = @*GQueue
global GtkSingleSelectionClass_autoptr: type <cimport,nodecl> = @*GtkSingleSelectionClass
global GtkSingleSelectionClass_listautoptr: type <cimport,nodecl> = @*GList
global GtkSingleSelectionClass_slistautoptr: type <cimport,nodecl> = @*GSList
global GtkSingleSelectionClass_queueautoptr: type <cimport,nodecl> = @*GQueue
global GtkSliceListModel: type <cimport,nodecl,forwarddecl> = @record{}
global GtkSliceListModelClass: type <cimport,nodecl> = @record{
  parent_class: GObjectClass
}
global GtkSliceListModel_autoptr: type <cimport,nodecl> = @*GtkSliceListModel
global GtkSliceListModel_listautoptr: type <cimport,nodecl> = @*GList
global GtkSliceListModel_slistautoptr: type <cimport,nodecl> = @*GSList
global GtkSliceListModel_queueautoptr: type <cimport,nodecl> = @*GQueue
global GtkSliceListModelClass_autoptr: type <cimport,nodecl> = @*GtkSliceListModelClass
global GtkSliceListModelClass_listautoptr: type <cimport,nodecl> = @*GList
global GtkSliceListModelClass_slistautoptr: type <cimport,nodecl> = @*GSList
global GtkSliceListModelClass_queueautoptr: type <cimport,nodecl> = @*GQueue
global GtkSnapshotClass: type <cimport,nodecl,forwarddecl> = @record{}
global GtkSnapshot_autoptr: type <cimport,nodecl> = @*GtkSnapshot
global GtkSnapshot_listautoptr: type <cimport,nodecl> = @*GList
global GtkSnapshot_slistautoptr: type <cimport,nodecl> = @*GSList
global GtkSnapshot_queueautoptr: type <cimport,nodecl> = @*GQueue
global GtkStack: type <cimport,nodecl,forwarddecl> = @record{}
global GtkStackPage: type <cimport,nodecl,forwarddecl> = @record{}
global GtkStackTransitionType: type <cimport,nodecl,using> = @enum(cint){
  GTK_STACK_TRANSITION_TYPE_NONE = 0,
  GTK_STACK_TRANSITION_TYPE_CROSSFADE = 1,
  GTK_STACK_TRANSITION_TYPE_SLIDE_RIGHT = 2,
  GTK_STACK_TRANSITION_TYPE_SLIDE_LEFT = 3,
  GTK_STACK_TRANSITION_TYPE_SLIDE_UP = 4,
  GTK_STACK_TRANSITION_TYPE_SLIDE_DOWN = 5,
  GTK_STACK_TRANSITION_TYPE_SLIDE_LEFT_RIGHT = 6,
  GTK_STACK_TRANSITION_TYPE_SLIDE_UP_DOWN = 7,
  GTK_STACK_TRANSITION_TYPE_OVER_UP = 8,
  GTK_STACK_TRANSITION_TYPE_OVER_DOWN = 9,
  GTK_STACK_TRANSITION_TYPE_OVER_LEFT = 10,
  GTK_STACK_TRANSITION_TYPE_OVER_RIGHT = 11,
  GTK_STACK_TRANSITION_TYPE_UNDER_UP = 12,
  GTK_STACK_TRANSITION_TYPE_UNDER_DOWN = 13,
  GTK_STACK_TRANSITION_TYPE_UNDER_LEFT = 14,
  GTK_STACK_TRANSITION_TYPE_UNDER_RIGHT = 15,
  GTK_STACK_TRANSITION_TYPE_OVER_UP_DOWN = 16,
  GTK_STACK_TRANSITION_TYPE_OVER_DOWN_UP = 17,
  GTK_STACK_TRANSITION_TYPE_OVER_LEFT_RIGHT = 18,
  GTK_STACK_TRANSITION_TYPE_OVER_RIGHT_LEFT = 19,
  GTK_STACK_TRANSITION_TYPE_ROTATE_LEFT = 20,
  GTK_STACK_TRANSITION_TYPE_ROTATE_RIGHT = 21,
  GTK_STACK_TRANSITION_TYPE_ROTATE_LEFT_RIGHT = 22
}
global GtkStackSidebar: type <cimport,nodecl,forwarddecl> = @record{}
global GtkSizeGroup: type <cimport,nodecl,forwarddecl> = @record{}
GtkSizeGroup = @record{
  parent_instance: GObject
}
global GtkRequestedSize: type <cimport,nodecl,forwarddecl> = @record{}
GtkRequestedSize = @record{
  data: gpointer,
  minimum_size: cint,
  natural_size: cint
}
global GtkSpinButtonUpdatePolicy: type <cimport,nodecl,using> = @enum(cint){
  GTK_UPDATE_ALWAYS = 0,
  GTK_UPDATE_IF_VALID = 1
}
global GtkSpinType: type <cimport,nodecl,using> = @enum(cint){
  GTK_SPIN_STEP_FORWARD = 0,
  GTK_SPIN_STEP_BACKWARD = 1,
  GTK_SPIN_PAGE_FORWARD = 2,
  GTK_SPIN_PAGE_BACKWARD = 3,
  GTK_SPIN_HOME = 4,
  GTK_SPIN_END = 5,
  GTK_SPIN_USER_DEFINED = 6
}
global GtkSpinButton: type <cimport,nodecl,forwarddecl> = @record{}
global GtkSpinner: type <cimport,nodecl,forwarddecl> = @record{}
global GtkStackSwitcher: type <cimport,nodecl,forwarddecl> = @record{}
global GtkStatusbar: type <cimport,nodecl,forwarddecl> = @record{}
global GtkStringFilterMatchMode: type <cimport,nodecl,using> = @enum(cint){
  GTK_STRING_FILTER_MATCH_MODE_EXACT = 0,
  GTK_STRING_FILTER_MATCH_MODE_SUBSTRING = 1,
  GTK_STRING_FILTER_MATCH_MODE_PREFIX = 2
}
global GtkStringFilter: type <cimport,nodecl,forwarddecl> = @record{}
global GtkStringFilterClass: type <cimport,nodecl> = @record{
  parent_class: GtkFilterClass
}
global GtkStringFilter_autoptr: type <cimport,nodecl> = @*GtkStringFilter
global GtkStringFilter_listautoptr: type <cimport,nodecl> = @*GList
global GtkStringFilter_slistautoptr: type <cimport,nodecl> = @*GSList
global GtkStringFilter_queueautoptr: type <cimport,nodecl> = @*GQueue
global GtkStringFilterClass_autoptr: type <cimport,nodecl> = @*GtkStringFilterClass
global GtkStringFilterClass_listautoptr: type <cimport,nodecl> = @*GList
global GtkStringFilterClass_slistautoptr: type <cimport,nodecl> = @*GSList
global GtkStringFilterClass_queueautoptr: type <cimport,nodecl> = @*GQueue
global GtkStringObject: type <cimport,nodecl,forwarddecl> = @record{}
global GtkStringObjectClass: type <cimport,nodecl> = @record{
  parent_class: GObjectClass
}
global GtkStringObject_autoptr: type <cimport,nodecl> = @*GtkStringObject
global GtkStringObject_listautoptr: type <cimport,nodecl> = @*GList
global GtkStringObject_slistautoptr: type <cimport,nodecl> = @*GSList
global GtkStringObject_queueautoptr: type <cimport,nodecl> = @*GQueue
global GtkStringObjectClass_autoptr: type <cimport,nodecl> = @*GtkStringObjectClass
global GtkStringObjectClass_listautoptr: type <cimport,nodecl> = @*GList
global GtkStringObjectClass_slistautoptr: type <cimport,nodecl> = @*GSList
global GtkStringObjectClass_queueautoptr: type <cimport,nodecl> = @*GQueue
global GtkStringList: type <cimport,nodecl,forwarddecl> = @record{}
global GtkStringListClass: type <cimport,nodecl> = @record{
  parent_class: GObjectClass
}
global GtkStringList_autoptr: type <cimport,nodecl> = @*GtkStringList
global GtkStringList_listautoptr: type <cimport,nodecl> = @*GList
global GtkStringList_slistautoptr: type <cimport,nodecl> = @*GSList
global GtkStringList_queueautoptr: type <cimport,nodecl> = @*GQueue
global GtkStringListClass_autoptr: type <cimport,nodecl> = @*GtkStringListClass
global GtkStringListClass_listautoptr: type <cimport,nodecl> = @*GList
global GtkStringListClass_slistautoptr: type <cimport,nodecl> = @*GSList
global GtkStringListClass_queueautoptr: type <cimport,nodecl> = @*GQueue
global GtkStringSorter: type <cimport,nodecl,forwarddecl> = @record{}
global GtkStringSorterClass: type <cimport,nodecl> = @record{
  parent_class: GtkSorterClass
}
global GtkStringSorter_autoptr: type <cimport,nodecl> = @*GtkStringSorter
global GtkStringSorter_listautoptr: type <cimport,nodecl> = @*GList
global GtkStringSorter_slistautoptr: type <cimport,nodecl> = @*GSList
global GtkStringSorter_queueautoptr: type <cimport,nodecl> = @*GQueue
global GtkStringSorterClass_autoptr: type <cimport,nodecl> = @*GtkStringSorterClass
global GtkStringSorterClass_listautoptr: type <cimport,nodecl> = @*GList
global GtkStringSorterClass_slistautoptr: type <cimport,nodecl> = @*GSList
global GtkStringSorterClass_queueautoptr: type <cimport,nodecl> = @*GQueue
global GtkStyleProvider: type <cimport,nodecl,forwarddecl> = @record{}
global GtkStyleContextClass: type <cimport,nodecl,forwarddecl> = @record{}
GtkStyleContext = @record{
  parent_object: GObject
}
GtkStyleContextClass = @record{
  parent_class: GObjectClass,
  changed: function(context: *GtkStyleContext): void,
  _gtk_reserved1: function(): void,
  _gtk_reserved2: function(): void,
  _gtk_reserved3: function(): void,
  _gtk_reserved4: function(): void
}
global GtkStyleContextPrintFlags: type <cimport,nodecl,using> = @enum(cint){
  GTK_STYLE_CONTEXT_PRINT_NONE = 0,
  GTK_STYLE_CONTEXT_PRINT_RECURSE = 1,
  GTK_STYLE_CONTEXT_PRINT_SHOW_STYLE = 2,
  GTK_STYLE_CONTEXT_PRINT_SHOW_CHANGE = 4
}
global GtkSwitch: type <cimport,nodecl,forwarddecl> = @record{}
global GtkSymbolicPaintable: type <cimport,nodecl,forwarddecl> = @record{}
global GtkSymbolicPaintableInterface: type <cimport,nodecl,forwarddecl> = @record{}
global GtkSymbolicPaintable_autoptr: type <cimport,nodecl> = @*GtkSymbolicPaintable
global GtkSymbolicPaintable_listautoptr: type <cimport,nodecl> = @*GList
global GtkSymbolicPaintable_slistautoptr: type <cimport,nodecl> = @*GSList
global GtkSymbolicPaintable_queueautoptr: type <cimport,nodecl> = @*GQueue
GtkSymbolicPaintableInterface = @record{
  g_iface: GTypeInterface,
  snapshot_symbolic: function(paintable: *GtkSymbolicPaintable, snapshot: *GdkSnapshot, width: float64, height: float64, colors: *GdkRGBA, n_colors: gsize): void
}
global GtkText: type <cimport,nodecl,forwarddecl> = @record{}
GtkText = @record{
  parent_instance: GtkWidget
}
global GtkTextIter: type <cimport,nodecl,forwarddecl> = @record{}
global GtkTextTagTable: type <cimport,nodecl,forwarddecl> = @record{}
global GtkTextTag: type <cimport,nodecl,forwarddecl> = @record{}
global GtkTextTagPrivate: type <cimport,nodecl,forwarddecl> = @record{}
global GtkTextTagClass: type <cimport,nodecl,forwarddecl> = @record{}
GtkTextTag = @record{
  parent_instance: GObject,
  priv: *GtkTextTagPrivate
}
GtkTextTagClass = @record{
  parent_class: GObjectClass,
  padding: [8]gpointer
}
global GtkTextTagTableForeach: type <cimport,nodecl> = @function(tag: *GtkTextTag, data: gpointer): void
global GtkTextChildAnchor: type <cimport,nodecl,forwarddecl> = @record{}
global GtkTextChildAnchorClass: type <cimport,nodecl,forwarddecl> = @record{}
GtkTextChildAnchor = @record{
  parent_instance: GObject,
  segment: gpointer
}
GtkTextChildAnchorClass = @record{
  parent_class: GObjectClass,
  _gtk_reserved1: function(): void,
  _gtk_reserved2: function(): void,
  _gtk_reserved3: function(): void,
  _gtk_reserved4: function(): void
}
global GtkTextSearchFlags: type <cimport,nodecl,using> = @enum(cint){
  GTK_TEXT_SEARCH_VISIBLE_ONLY = 1,
  GTK_TEXT_SEARCH_TEXT_ONLY = 2,
  GTK_TEXT_SEARCH_CASE_INSENSITIVE = 4
}
global GtkTextBuffer: type <cimport,nodecl,forwarddecl> = @record{}
GtkTextIter = @record{
  dummy1: gpointer,
  dummy2: gpointer,
  dummy3: cint,
  dummy4: cint,
  dummy5: cint,
  dummy6: cint,
  dummy7: cint,
  dummy8: cint,
  dummy9: gpointer,
  dummy10: gpointer,
  dummy11: cint,
  dummy12: cint,
  dummy13: cint,
  dummy14: gpointer
}
global GtkTextCharPredicate: type <cimport,nodecl> = @function(ch: gunichar, user_data: gpointer): gboolean
global GtkTextMark: type <cimport,nodecl,forwarddecl> = @record{}
global GtkTextMarkClass: type <cimport,nodecl,forwarddecl> = @record{}
GtkTextMark = @record{
  parent_instance: GObject,
  segment: gpointer
}
GtkTextMarkClass = @record{
  parent_class: GObjectClass,
  padding: [8]gpointer
}
global GtkTextBufferPrivate: type <cimport,nodecl,forwarddecl> = @record{}
global GtkTextBufferClass: type <cimport,nodecl,forwarddecl> = @record{}
GtkTextBuffer = @record{
  parent_instance: GObject,
  priv: *GtkTextBufferPrivate
}
GtkTextBufferClass = @record{
  parent_class: GObjectClass,
  insert_text: function(buffer: *GtkTextBuffer, pos: *GtkTextIter, new_text: cstring, new_text_length: cint): void,
  insert_paintable: function(buffer: *GtkTextBuffer, iter: *GtkTextIter, paintable: *GdkPaintable): void,
  insert_child_anchor: function(buffer: *GtkTextBuffer, iter: *GtkTextIter, anchor: *GtkTextChildAnchor): void,
  delete_range: function(buffer: *GtkTextBuffer, start: *GtkTextIter, end_: *GtkTextIter): void,
  changed: function(buffer: *GtkTextBuffer): void,
  modified_changed: function(buffer: *GtkTextBuffer): void,
  mark_set: function(buffer: *GtkTextBuffer, location: *GtkTextIter, mark: *GtkTextMark): void,
  mark_deleted: function(buffer: *GtkTextBuffer, mark: *GtkTextMark): void,
  apply_tag: function(buffer: *GtkTextBuffer, tag: *GtkTextTag, start: *GtkTextIter, end_: *GtkTextIter): void,
  remove_tag: function(buffer: *GtkTextBuffer, tag: *GtkTextTag, start: *GtkTextIter, end_: *GtkTextIter): void,
  begin_user_action: function(buffer: *GtkTextBuffer): void,
  end_user_action: function(buffer: *GtkTextBuffer): void,
  paste_done: function(buffer: *GtkTextBuffer, clipboard: *GdkClipboard): void,
  undo: function(buffer: *GtkTextBuffer): void,
  redo: function(buffer: *GtkTextBuffer): void,
  _gtk_reserved1: function(): void,
  _gtk_reserved2: function(): void,
  _gtk_reserved3: function(): void,
  _gtk_reserved4: function(): void
}
global GtkTextWindowType: type <cimport,nodecl,using> = @enum(cint){
  GTK_TEXT_WINDOW_WIDGET = 1,
  GTK_TEXT_WINDOW_TEXT = 2,
  GTK_TEXT_WINDOW_LEFT = 3,
  GTK_TEXT_WINDOW_RIGHT = 4,
  GTK_TEXT_WINDOW_TOP = 5,
  GTK_TEXT_WINDOW_BOTTOM = 6
}
global GtkTextViewLayer: type <cimport,nodecl,using> = @enum(cint){
  GTK_TEXT_VIEW_LAYER_BELOW_TEXT = 0,
  GTK_TEXT_VIEW_LAYER_ABOVE_TEXT = 1
}
global GtkTextExtendSelection: type <cimport,nodecl,using> = @enum(cint){
  GTK_TEXT_EXTEND_SELECTION_WORD = 0,
  GTK_TEXT_EXTEND_SELECTION_LINE = 1
}
global GtkTextView: type <cimport,nodecl,forwarddecl> = @record{}
global GtkTextViewPrivate: type <cimport,nodecl,forwarddecl> = @record{}
global GtkTextViewClass: type <cimport,nodecl,forwarddecl> = @record{}
GtkTextView = @record{
  parent_instance: GtkWidget,
  priv: *GtkTextViewPrivate
}
GtkTextViewClass = @record{
  parent_class: GtkWidgetClass,
  move_cursor: function(text_view: *GtkTextView, step: GtkMovementStep, count: cint, extend_selection: gboolean): void,
  set_anchor: function(text_view: *GtkTextView): void,
  insert_at_cursor: function(text_view: *GtkTextView, str: cstring): void,
  delete_from_cursor: function(text_view: *GtkTextView, type: GtkDeleteType, count: cint): void,
  backspace: function(text_view: *GtkTextView): void,
  cut_clipboard: function(text_view: *GtkTextView): void,
  copy_clipboard: function(text_view: *GtkTextView): void,
  paste_clipboard: function(text_view: *GtkTextView): void,
  toggle_overwrite: function(text_view: *GtkTextView): void,
  create_buffer: function(text_view: *GtkTextView): *GtkTextBuffer,
  snapshot_layer: function(text_view: *GtkTextView, layer: GtkTextViewLayer, snapshot: *GtkSnapshot): void,
  extend_selection: function(text_view: *GtkTextView, granularity: GtkTextExtendSelection, location: *GtkTextIter, start: *GtkTextIter, end_: *GtkTextIter): gboolean,
  insert_emoji: function(text_view: *GtkTextView): void,
  padding: [8]gpointer
}
global GtkTreeDragSource: type <cimport,nodecl,forwarddecl> = @record{}
global GtkTreeDragSourceIface: type <cimport,nodecl,forwarddecl> = @record{}
GtkTreeDragSourceIface = @record{
  g_iface: GTypeInterface,
  row_draggable: function(drag_source: *GtkTreeDragSource, path: *GtkTreePath): gboolean,
  drag_data_get: function(drag_source: *GtkTreeDragSource, path: *GtkTreePath): *GdkContentProvider,
  drag_data_delete: function(drag_source: *GtkTreeDragSource, path: *GtkTreePath): gboolean
}
global GtkTreeDragDest: type <cimport,nodecl,forwarddecl> = @record{}
global GtkTreeDragDestIface: type <cimport,nodecl,forwarddecl> = @record{}
GtkTreeDragDestIface = @record{
  g_iface: GTypeInterface,
  drag_data_received: function(drag_dest: *GtkTreeDragDest, dest: *GtkTreePath, value: *GValue): gboolean,
  row_drop_possible: function(drag_dest: *GtkTreeDragDest, dest_path: *GtkTreePath, value: *GValue): gboolean
}
global GtkTreeListModel: type <cimport,nodecl,forwarddecl> = @record{}
global GtkTreeListModelClass: type <cimport,nodecl> = @record{
  parent_class: GObjectClass
}
global GtkTreeListModel_autoptr: type <cimport,nodecl> = @*GtkTreeListModel
global GtkTreeListModel_listautoptr: type <cimport,nodecl> = @*GList
global GtkTreeListModel_slistautoptr: type <cimport,nodecl> = @*GSList
global GtkTreeListModel_queueautoptr: type <cimport,nodecl> = @*GQueue
global GtkTreeListModelClass_autoptr: type <cimport,nodecl> = @*GtkTreeListModelClass
global GtkTreeListModelClass_listautoptr: type <cimport,nodecl> = @*GList
global GtkTreeListModelClass_slistautoptr: type <cimport,nodecl> = @*GSList
global GtkTreeListModelClass_queueautoptr: type <cimport,nodecl> = @*GQueue
global GtkTreeListRow: type <cimport,nodecl,forwarddecl> = @record{}
global GtkTreeListRowClass: type <cimport,nodecl> = @record{
  parent_class: GObjectClass
}
global GtkTreeListRow_autoptr: type <cimport,nodecl> = @*GtkTreeListRow
global GtkTreeListRow_listautoptr: type <cimport,nodecl> = @*GList
global GtkTreeListRow_slistautoptr: type <cimport,nodecl> = @*GSList
global GtkTreeListRow_queueautoptr: type <cimport,nodecl> = @*GQueue
global GtkTreeListRowClass_autoptr: type <cimport,nodecl> = @*GtkTreeListRowClass
global GtkTreeListRowClass_listautoptr: type <cimport,nodecl> = @*GList
global GtkTreeListRowClass_slistautoptr: type <cimport,nodecl> = @*GSList
global GtkTreeListRowClass_queueautoptr: type <cimport,nodecl> = @*GQueue
global GtkTreeListModelCreateModelFunc: type <cimport,nodecl> = @function(item: gpointer, user_data: gpointer): *GListModel
global GtkTreeExpander: type <cimport,nodecl,forwarddecl> = @record{}
global GtkTreeExpanderClass: type <cimport,nodecl> = @record{
  parent_class: GtkWidgetClass
}
global GtkTreeExpander_autoptr: type <cimport,nodecl> = @*GtkTreeExpander
global GtkTreeExpander_listautoptr: type <cimport,nodecl> = @*GList
global GtkTreeExpander_slistautoptr: type <cimport,nodecl> = @*GSList
global GtkTreeExpander_queueautoptr: type <cimport,nodecl> = @*GQueue
global GtkTreeExpanderClass_autoptr: type <cimport,nodecl> = @*GtkTreeExpanderClass
global GtkTreeExpanderClass_listautoptr: type <cimport,nodecl> = @*GList
global GtkTreeExpanderClass_slistautoptr: type <cimport,nodecl> = @*GSList
global GtkTreeExpanderClass_queueautoptr: type <cimport,nodecl> = @*GQueue
global GtkTreeListRowSorter: type <cimport,nodecl,forwarddecl> = @record{}
global GtkTreeListRowSorterClass: type <cimport,nodecl> = @record{
  parent_class: GtkSorterClass
}
global GtkTreeListRowSorter_autoptr: type <cimport,nodecl> = @*GtkTreeListRowSorter
global GtkTreeListRowSorter_listautoptr: type <cimport,nodecl> = @*GList
global GtkTreeListRowSorter_slistautoptr: type <cimport,nodecl> = @*GSList
global GtkTreeListRowSorter_queueautoptr: type <cimport,nodecl> = @*GQueue
global GtkTreeListRowSorterClass_autoptr: type <cimport,nodecl> = @*GtkTreeListRowSorterClass
global GtkTreeListRowSorterClass_listautoptr: type <cimport,nodecl> = @*GList
global GtkTreeListRowSorterClass_slistautoptr: type <cimport,nodecl> = @*GSList
global GtkTreeListRowSorterClass_queueautoptr: type <cimport,nodecl> = @*GQueue
global GtkTreeModelSort: type <cimport,nodecl,forwarddecl> = @record{}
global GtkTreeModelSortClass: type <cimport,nodecl,forwarddecl> = @record{}
global GtkTreeModelSortPrivate: type <cimport,nodecl,forwarddecl> = @record{}
GtkTreeModelSort = @record{
  parent: GObject,
  priv: *GtkTreeModelSortPrivate
}
GtkTreeModelSortClass = @record{
  parent_class: GObjectClass,
  padding: [8]gpointer
}
global GtkTreeSelectionFunc: type <cimport,nodecl> = @function(selection: *GtkTreeSelection, model: *GtkTreeModel, path: *GtkTreePath, path_currently_selected: gboolean, data: gpointer): gboolean
global GtkTreeSelectionForeachFunc: type <cimport,nodecl> = @function(model: *GtkTreeModel, path: *GtkTreePath, iter: *GtkTreeIter, data: gpointer): void
global GtkTreeStore: type <cimport,nodecl,forwarddecl> = @record{}
global GtkTreeStoreClass: type <cimport,nodecl,forwarddecl> = @record{}
global GtkTreeStorePrivate: type <cimport,nodecl,forwarddecl> = @record{}
GtkTreeStore = @record{
  parent: GObject,
  priv: *GtkTreeStorePrivate
}
GtkTreeStoreClass = @record{
  parent_class: GObjectClass,
  padding: [8]gpointer
}
global GtkVideo: type <cimport,nodecl,forwarddecl> = @record{}
global GtkVideoClass: type <cimport,nodecl> = @record{
  parent_class: GtkWidgetClass
}
global GtkVideo_autoptr: type <cimport,nodecl> = @*GtkVideo
global GtkVideo_listautoptr: type <cimport,nodecl> = @*GList
global GtkVideo_slistautoptr: type <cimport,nodecl> = @*GSList
global GtkVideo_queueautoptr: type <cimport,nodecl> = @*GQueue
global GtkVideoClass_autoptr: type <cimport,nodecl> = @*GtkVideoClass
global GtkVideoClass_listautoptr: type <cimport,nodecl> = @*GList
global GtkVideoClass_slistautoptr: type <cimport,nodecl> = @*GSList
global GtkVideoClass_queueautoptr: type <cimport,nodecl> = @*GQueue
global GtkViewport: type <cimport,nodecl,forwarddecl> = @record{}
global GtkVolumeButton: type <cimport,nodecl,forwarddecl> = @record{}
GtkVolumeButton = @record{
  parent: GtkScaleButton
}
global GtkWidgetPaintable: type <cimport,nodecl,forwarddecl> = @record{}
global GtkWidgetPaintableClass: type <cimport,nodecl> = @record{
  parent_class: GObjectClass
}
global GtkWidgetPaintable_autoptr: type <cimport,nodecl> = @*GtkWidgetPaintable
global GtkWidgetPaintable_listautoptr: type <cimport,nodecl> = @*GList
global GtkWidgetPaintable_slistautoptr: type <cimport,nodecl> = @*GSList
global GtkWidgetPaintable_queueautoptr: type <cimport,nodecl> = @*GQueue
global GtkWidgetPaintableClass_autoptr: type <cimport,nodecl> = @*GtkWidgetPaintableClass
global GtkWidgetPaintableClass_listautoptr: type <cimport,nodecl> = @*GList
global GtkWidgetPaintableClass_slistautoptr: type <cimport,nodecl> = @*GSList
global GtkWidgetPaintableClass_queueautoptr: type <cimport,nodecl> = @*GQueue
global GtkWindowControls: type <cimport,nodecl,forwarddecl> = @record{}
global GtkWindowControlsClass: type <cimport,nodecl> = @record{
  parent_class: GtkWidgetClass
}
global GtkWindowControls_autoptr: type <cimport,nodecl> = @*GtkWindowControls
global GtkWindowControls_listautoptr: type <cimport,nodecl> = @*GList
global GtkWindowControls_slistautoptr: type <cimport,nodecl> = @*GSList
global GtkWindowControls_queueautoptr: type <cimport,nodecl> = @*GQueue
global GtkWindowControlsClass_autoptr: type <cimport,nodecl> = @*GtkWindowControlsClass
global GtkWindowControlsClass_listautoptr: type <cimport,nodecl> = @*GList
global GtkWindowControlsClass_slistautoptr: type <cimport,nodecl> = @*GSList
global GtkWindowControlsClass_queueautoptr: type <cimport,nodecl> = @*GQueue
GtkWindowGroup = @record{
  parent_instance: GObject,
  priv: *GtkWindowGroupPrivate
}
GtkWindowGroupClass = @record{
  parent_class: GObjectClass,
  _gtk_reserved1: function(): void,
  _gtk_reserved2: function(): void,
  _gtk_reserved3: function(): void,
  _gtk_reserved4: function(): void
}
global GtkWindowHandle: type <cimport,nodecl,forwarddecl> = @record{}
global GtkWindowHandleClass: type <cimport,nodecl> = @record{
  parent_class: GtkWidgetClass
}
global GtkWindowHandle_autoptr: type <cimport,nodecl> = @*GtkWindowHandle
global GtkWindowHandle_listautoptr: type <cimport,nodecl> = @*GList
global GtkWindowHandle_slistautoptr: type <cimport,nodecl> = @*GSList
global GtkWindowHandle_queueautoptr: type <cimport,nodecl> = @*GQueue
global GtkWindowHandleClass_autoptr: type <cimport,nodecl> = @*GtkWindowHandleClass
global GtkWindowHandleClass_listautoptr: type <cimport,nodecl> = @*GList
global GtkWindowHandleClass_slistautoptr: type <cimport,nodecl> = @*GSList
global GtkWindowHandleClass_queueautoptr: type <cimport,nodecl> = @*GQueue
global GtkActionBar_autoptr: type <cimport,nodecl> = @*GtkActionBar
global GtkActionBar_listautoptr: type <cimport,nodecl> = @*GList
global GtkActionBar_slistautoptr: type <cimport,nodecl> = @*GSList
global GtkActionBar_queueautoptr: type <cimport,nodecl> = @*GQueue
global GtkActionable_autoptr: type <cimport,nodecl> = @*GtkActionable
global GtkActionable_listautoptr: type <cimport,nodecl> = @*GList
global GtkActionable_slistautoptr: type <cimport,nodecl> = @*GSList
global GtkActionable_queueautoptr: type <cimport,nodecl> = @*GQueue
global GtkAdjustment_autoptr: type <cimport,nodecl> = @*GtkAdjustment
global GtkAdjustment_listautoptr: type <cimport,nodecl> = @*GList
global GtkAdjustment_slistautoptr: type <cimport,nodecl> = @*GSList
global GtkAdjustment_queueautoptr: type <cimport,nodecl> = @*GQueue
global GtkAppChooser_autoptr: type <cimport,nodecl> = @*GtkAppChooser
global GtkAppChooser_listautoptr: type <cimport,nodecl> = @*GList
global GtkAppChooser_slistautoptr: type <cimport,nodecl> = @*GSList
global GtkAppChooser_queueautoptr: type <cimport,nodecl> = @*GQueue
global GtkAppChooserButton_autoptr: type <cimport,nodecl> = @*GtkAppChooserButton
global GtkAppChooserButton_listautoptr: type <cimport,nodecl> = @*GList
global GtkAppChooserButton_slistautoptr: type <cimport,nodecl> = @*GSList
global GtkAppChooserButton_queueautoptr: type <cimport,nodecl> = @*GQueue
global GtkAppChooserDialog_autoptr: type <cimport,nodecl> = @*GtkAppChooserDialog
global GtkAppChooserDialog_listautoptr: type <cimport,nodecl> = @*GList
global GtkAppChooserDialog_slistautoptr: type <cimport,nodecl> = @*GSList
global GtkAppChooserDialog_queueautoptr: type <cimport,nodecl> = @*GQueue
global GtkAppChooserWidget_autoptr: type <cimport,nodecl> = @*GtkAppChooserWidget
global GtkAppChooserWidget_listautoptr: type <cimport,nodecl> = @*GList
global GtkAppChooserWidget_slistautoptr: type <cimport,nodecl> = @*GSList
global GtkAppChooserWidget_queueautoptr: type <cimport,nodecl> = @*GQueue
global GtkApplicationWindow_autoptr: type <cimport,nodecl> = @*GtkApplicationWindow
global GtkApplicationWindow_listautoptr: type <cimport,nodecl> = @*GList
global GtkApplicationWindow_slistautoptr: type <cimport,nodecl> = @*GSList
global GtkApplicationWindow_queueautoptr: type <cimport,nodecl> = @*GQueue
global GtkAspectFrame_autoptr: type <cimport,nodecl> = @*GtkAspectFrame
global GtkAspectFrame_listautoptr: type <cimport,nodecl> = @*GList
global GtkAspectFrame_slistautoptr: type <cimport,nodecl> = @*GSList
global GtkAspectFrame_queueautoptr: type <cimport,nodecl> = @*GQueue
global GtkAssistant_autoptr: type <cimport,nodecl> = @*GtkAssistant
global GtkAssistant_listautoptr: type <cimport,nodecl> = @*GList
global GtkAssistant_slistautoptr: type <cimport,nodecl> = @*GSList
global GtkAssistant_queueautoptr: type <cimport,nodecl> = @*GQueue
global GtkBox_autoptr: type <cimport,nodecl> = @*GtkBox
global GtkBox_listautoptr: type <cimport,nodecl> = @*GList
global GtkBox_slistautoptr: type <cimport,nodecl> = @*GSList
global GtkBox_queueautoptr: type <cimport,nodecl> = @*GQueue
global GtkBuildable_autoptr: type <cimport,nodecl> = @*GtkBuildable
global GtkBuildable_listautoptr: type <cimport,nodecl> = @*GList
global GtkBuildable_slistautoptr: type <cimport,nodecl> = @*GSList
global GtkBuildable_queueautoptr: type <cimport,nodecl> = @*GQueue
global GtkBuilder_autoptr: type <cimport,nodecl> = @*GtkBuilder
global GtkBuilder_listautoptr: type <cimport,nodecl> = @*GList
global GtkBuilder_slistautoptr: type <cimport,nodecl> = @*GSList
global GtkBuilder_queueautoptr: type <cimport,nodecl> = @*GQueue
global GtkButton_autoptr: type <cimport,nodecl> = @*GtkButton
global GtkButton_listautoptr: type <cimport,nodecl> = @*GList
global GtkButton_slistautoptr: type <cimport,nodecl> = @*GSList
global GtkButton_queueautoptr: type <cimport,nodecl> = @*GQueue
global GtkCalendar_autoptr: type <cimport,nodecl> = @*GtkCalendar
global GtkCalendar_listautoptr: type <cimport,nodecl> = @*GList
global GtkCalendar_slistautoptr: type <cimport,nodecl> = @*GSList
global GtkCalendar_queueautoptr: type <cimport,nodecl> = @*GQueue
global GtkCellArea_autoptr: type <cimport,nodecl> = @*GtkCellArea
global GtkCellArea_listautoptr: type <cimport,nodecl> = @*GList
global GtkCellArea_slistautoptr: type <cimport,nodecl> = @*GSList
global GtkCellArea_queueautoptr: type <cimport,nodecl> = @*GQueue
global GtkCellAreaBox_autoptr: type <cimport,nodecl> = @*GtkCellAreaBox
global GtkCellAreaBox_listautoptr: type <cimport,nodecl> = @*GList
global GtkCellAreaBox_slistautoptr: type <cimport,nodecl> = @*GSList
global GtkCellAreaBox_queueautoptr: type <cimport,nodecl> = @*GQueue
global GtkCellAreaContext_autoptr: type <cimport,nodecl> = @*GtkCellAreaContext
global GtkCellAreaContext_listautoptr: type <cimport,nodecl> = @*GList
global GtkCellAreaContext_slistautoptr: type <cimport,nodecl> = @*GSList
global GtkCellAreaContext_queueautoptr: type <cimport,nodecl> = @*GQueue
global GtkCellEditable_autoptr: type <cimport,nodecl> = @*GtkCellEditable
global GtkCellEditable_listautoptr: type <cimport,nodecl> = @*GList
global GtkCellEditable_slistautoptr: type <cimport,nodecl> = @*GSList
global GtkCellEditable_queueautoptr: type <cimport,nodecl> = @*GQueue
global GtkCellLayout_autoptr: type <cimport,nodecl> = @*GtkCellLayout
global GtkCellLayout_listautoptr: type <cimport,nodecl> = @*GList
global GtkCellLayout_slistautoptr: type <cimport,nodecl> = @*GSList
global GtkCellLayout_queueautoptr: type <cimport,nodecl> = @*GQueue
global GtkCellRenderer_autoptr: type <cimport,nodecl> = @*GtkCellRenderer
global GtkCellRenderer_listautoptr: type <cimport,nodecl> = @*GList
global GtkCellRenderer_slistautoptr: type <cimport,nodecl> = @*GSList
global GtkCellRenderer_queueautoptr: type <cimport,nodecl> = @*GQueue
global GtkCellRendererAccel_autoptr: type <cimport,nodecl> = @*GtkCellRendererAccel
global GtkCellRendererAccel_listautoptr: type <cimport,nodecl> = @*GList
global GtkCellRendererAccel_slistautoptr: type <cimport,nodecl> = @*GSList
global GtkCellRendererAccel_queueautoptr: type <cimport,nodecl> = @*GQueue
global GtkCellRendererCombo_autoptr: type <cimport,nodecl> = @*GtkCellRendererCombo
global GtkCellRendererCombo_listautoptr: type <cimport,nodecl> = @*GList
global GtkCellRendererCombo_slistautoptr: type <cimport,nodecl> = @*GSList
global GtkCellRendererCombo_queueautoptr: type <cimport,nodecl> = @*GQueue
global GtkCellRendererPixbuf_autoptr: type <cimport,nodecl> = @*GtkCellRendererPixbuf
global GtkCellRendererPixbuf_listautoptr: type <cimport,nodecl> = @*GList
global GtkCellRendererPixbuf_slistautoptr: type <cimport,nodecl> = @*GSList
global GtkCellRendererPixbuf_queueautoptr: type <cimport,nodecl> = @*GQueue
global GtkCellRendererProgress_autoptr: type <cimport,nodecl> = @*GtkCellRendererProgress
global GtkCellRendererProgress_listautoptr: type <cimport,nodecl> = @*GList
global GtkCellRendererProgress_slistautoptr: type <cimport,nodecl> = @*GSList
global GtkCellRendererProgress_queueautoptr: type <cimport,nodecl> = @*GQueue
global GtkCellRendererSpin_autoptr: type <cimport,nodecl> = @*GtkCellRendererSpin
global GtkCellRendererSpin_listautoptr: type <cimport,nodecl> = @*GList
global GtkCellRendererSpin_slistautoptr: type <cimport,nodecl> = @*GSList
global GtkCellRendererSpin_queueautoptr: type <cimport,nodecl> = @*GQueue
global GtkCellRendererSpinner_autoptr: type <cimport,nodecl> = @*GtkCellRendererSpinner
global GtkCellRendererSpinner_listautoptr: type <cimport,nodecl> = @*GList
global GtkCellRendererSpinner_slistautoptr: type <cimport,nodecl> = @*GSList
global GtkCellRendererSpinner_queueautoptr: type <cimport,nodecl> = @*GQueue
global GtkCellRendererText_autoptr: type <cimport,nodecl> = @*GtkCellRendererText
global GtkCellRendererText_listautoptr: type <cimport,nodecl> = @*GList
global GtkCellRendererText_slistautoptr: type <cimport,nodecl> = @*GSList
global GtkCellRendererText_queueautoptr: type <cimport,nodecl> = @*GQueue
global GtkCellRendererToggle_autoptr: type <cimport,nodecl> = @*GtkCellRendererToggle
global GtkCellRendererToggle_listautoptr: type <cimport,nodecl> = @*GList
global GtkCellRendererToggle_slistautoptr: type <cimport,nodecl> = @*GSList
global GtkCellRendererToggle_queueautoptr: type <cimport,nodecl> = @*GQueue
global GtkCellView_autoptr: type <cimport,nodecl> = @*GtkCellView
global GtkCellView_listautoptr: type <cimport,nodecl> = @*GList
global GtkCellView_slistautoptr: type <cimport,nodecl> = @*GSList
global GtkCellView_queueautoptr: type <cimport,nodecl> = @*GQueue
global GtkCheckButton_autoptr: type <cimport,nodecl> = @*GtkCheckButton
global GtkCheckButton_listautoptr: type <cimport,nodecl> = @*GList
global GtkCheckButton_slistautoptr: type <cimport,nodecl> = @*GSList
global GtkCheckButton_queueautoptr: type <cimport,nodecl> = @*GQueue
global GtkColorButton_autoptr: type <cimport,nodecl> = @*GtkColorButton
global GtkColorButton_listautoptr: type <cimport,nodecl> = @*GList
global GtkColorButton_slistautoptr: type <cimport,nodecl> = @*GSList
global GtkColorButton_queueautoptr: type <cimport,nodecl> = @*GQueue
global GtkColorChooser_autoptr: type <cimport,nodecl> = @*GtkColorChooser
global GtkColorChooser_listautoptr: type <cimport,nodecl> = @*GList
global GtkColorChooser_slistautoptr: type <cimport,nodecl> = @*GSList
global GtkColorChooser_queueautoptr: type <cimport,nodecl> = @*GQueue
global GtkColorChooserDialog_autoptr: type <cimport,nodecl> = @*GtkColorChooserDialog
global GtkColorChooserDialog_listautoptr: type <cimport,nodecl> = @*GList
global GtkColorChooserDialog_slistautoptr: type <cimport,nodecl> = @*GSList
global GtkColorChooserDialog_queueautoptr: type <cimport,nodecl> = @*GQueue
global GtkColorChooserWidget_autoptr: type <cimport,nodecl> = @*GtkColorChooserWidget
global GtkColorChooserWidget_listautoptr: type <cimport,nodecl> = @*GList
global GtkColorChooserWidget_slistautoptr: type <cimport,nodecl> = @*GSList
global GtkColorChooserWidget_queueautoptr: type <cimport,nodecl> = @*GQueue
global GtkComboBox_autoptr: type <cimport,nodecl> = @*GtkComboBox
global GtkComboBox_listautoptr: type <cimport,nodecl> = @*GList
global GtkComboBox_slistautoptr: type <cimport,nodecl> = @*GSList
global GtkComboBox_queueautoptr: type <cimport,nodecl> = @*GQueue
global GtkComboBoxText_autoptr: type <cimport,nodecl> = @*GtkComboBoxText
global GtkComboBoxText_listautoptr: type <cimport,nodecl> = @*GList
global GtkComboBoxText_slistautoptr: type <cimport,nodecl> = @*GSList
global GtkComboBoxText_queueautoptr: type <cimport,nodecl> = @*GQueue
global GtkCssProvider_autoptr: type <cimport,nodecl> = @*GtkCssProvider
global GtkCssProvider_listautoptr: type <cimport,nodecl> = @*GList
global GtkCssProvider_slistautoptr: type <cimport,nodecl> = @*GSList
global GtkCssProvider_queueautoptr: type <cimport,nodecl> = @*GQueue
global GtkDrawingArea_autoptr: type <cimport,nodecl> = @*GtkDrawingArea
global GtkDrawingArea_listautoptr: type <cimport,nodecl> = @*GList
global GtkDrawingArea_slistautoptr: type <cimport,nodecl> = @*GSList
global GtkDrawingArea_queueautoptr: type <cimport,nodecl> = @*GQueue
global GtkEditable_autoptr: type <cimport,nodecl> = @*GtkEditable
global GtkEditable_listautoptr: type <cimport,nodecl> = @*GList
global GtkEditable_slistautoptr: type <cimport,nodecl> = @*GSList
global GtkEditable_queueautoptr: type <cimport,nodecl> = @*GQueue
global GtkEntry_autoptr: type <cimport,nodecl> = @*GtkEntry
global GtkEntry_listautoptr: type <cimport,nodecl> = @*GList
global GtkEntry_slistautoptr: type <cimport,nodecl> = @*GSList
global GtkEntry_queueautoptr: type <cimport,nodecl> = @*GQueue
global GtkEntryCompletion_autoptr: type <cimport,nodecl> = @*GtkEntryCompletion
global GtkEntryCompletion_listautoptr: type <cimport,nodecl> = @*GList
global GtkEntryCompletion_slistautoptr: type <cimport,nodecl> = @*GSList
global GtkEntryCompletion_queueautoptr: type <cimport,nodecl> = @*GQueue
global GtkEventController_autoptr: type <cimport,nodecl> = @*GtkEventController
global GtkEventController_listautoptr: type <cimport,nodecl> = @*GList
global GtkEventController_slistautoptr: type <cimport,nodecl> = @*GSList
global GtkEventController_queueautoptr: type <cimport,nodecl> = @*GQueue
global GtkExpander_autoptr: type <cimport,nodecl> = @*GtkExpander
global GtkExpander_listautoptr: type <cimport,nodecl> = @*GList
global GtkExpander_slistautoptr: type <cimport,nodecl> = @*GSList
global GtkExpander_queueautoptr: type <cimport,nodecl> = @*GQueue
global GtkFileChooserDialog_autoptr: type <cimport,nodecl> = @*GtkFileChooserDialog
global GtkFileChooserDialog_listautoptr: type <cimport,nodecl> = @*GList
global GtkFileChooserDialog_slistautoptr: type <cimport,nodecl> = @*GSList
global GtkFileChooserDialog_queueautoptr: type <cimport,nodecl> = @*GQueue
global GtkFileChooserWidget_autoptr: type <cimport,nodecl> = @*GtkFileChooserWidget
global GtkFileChooserWidget_listautoptr: type <cimport,nodecl> = @*GList
global GtkFileChooserWidget_slistautoptr: type <cimport,nodecl> = @*GSList
global GtkFileChooserWidget_queueautoptr: type <cimport,nodecl> = @*GQueue
global GtkFileFilter_autoptr: type <cimport,nodecl> = @*GtkFileFilter
global GtkFileFilter_listautoptr: type <cimport,nodecl> = @*GList
global GtkFileFilter_slistautoptr: type <cimport,nodecl> = @*GSList
global GtkFileFilter_queueautoptr: type <cimport,nodecl> = @*GQueue
global GtkFixed_autoptr: type <cimport,nodecl> = @*GtkFixed
global GtkFixed_listautoptr: type <cimport,nodecl> = @*GList
global GtkFixed_slistautoptr: type <cimport,nodecl> = @*GSList
global GtkFixed_queueautoptr: type <cimport,nodecl> = @*GQueue
global GtkFlowBox_autoptr: type <cimport,nodecl> = @*GtkFlowBox
global GtkFlowBox_listautoptr: type <cimport,nodecl> = @*GList
global GtkFlowBox_slistautoptr: type <cimport,nodecl> = @*GSList
global GtkFlowBox_queueautoptr: type <cimport,nodecl> = @*GQueue
global GtkFlowBoxChild_autoptr: type <cimport,nodecl> = @*GtkFlowBoxChild
global GtkFlowBoxChild_listautoptr: type <cimport,nodecl> = @*GList
global GtkFlowBoxChild_slistautoptr: type <cimport,nodecl> = @*GSList
global GtkFlowBoxChild_queueautoptr: type <cimport,nodecl> = @*GQueue
global GtkFontButton_autoptr: type <cimport,nodecl> = @*GtkFontButton
global GtkFontButton_listautoptr: type <cimport,nodecl> = @*GList
global GtkFontButton_slistautoptr: type <cimport,nodecl> = @*GSList
global GtkFontButton_queueautoptr: type <cimport,nodecl> = @*GQueue
global GtkFontChooser_autoptr: type <cimport,nodecl> = @*GtkFontChooser
global GtkFontChooser_listautoptr: type <cimport,nodecl> = @*GList
global GtkFontChooser_slistautoptr: type <cimport,nodecl> = @*GSList
global GtkFontChooser_queueautoptr: type <cimport,nodecl> = @*GQueue
global GtkFontChooserDialog_autoptr: type <cimport,nodecl> = @*GtkFontChooserDialog
global GtkFontChooserDialog_listautoptr: type <cimport,nodecl> = @*GList
global GtkFontChooserDialog_slistautoptr: type <cimport,nodecl> = @*GSList
global GtkFontChooserDialog_queueautoptr: type <cimport,nodecl> = @*GQueue
global GtkFontChooserWidget_autoptr: type <cimport,nodecl> = @*GtkFontChooserWidget
global GtkFontChooserWidget_listautoptr: type <cimport,nodecl> = @*GList
global GtkFontChooserWidget_slistautoptr: type <cimport,nodecl> = @*GSList
global GtkFontChooserWidget_queueautoptr: type <cimport,nodecl> = @*GQueue
global GtkFrame_autoptr: type <cimport,nodecl> = @*GtkFrame
global GtkFrame_listautoptr: type <cimport,nodecl> = @*GList
global GtkFrame_slistautoptr: type <cimport,nodecl> = @*GSList
global GtkFrame_queueautoptr: type <cimport,nodecl> = @*GQueue
global GtkGLArea_autoptr: type <cimport,nodecl> = @*GtkGLArea
global GtkGLArea_listautoptr: type <cimport,nodecl> = @*GList
global GtkGLArea_slistautoptr: type <cimport,nodecl> = @*GSList
global GtkGLArea_queueautoptr: type <cimport,nodecl> = @*GQueue
global GtkGesture_autoptr: type <cimport,nodecl> = @*GtkGesture
global GtkGesture_listautoptr: type <cimport,nodecl> = @*GList
global GtkGesture_slistautoptr: type <cimport,nodecl> = @*GSList
global GtkGesture_queueautoptr: type <cimport,nodecl> = @*GQueue
global GtkGestureDrag_autoptr: type <cimport,nodecl> = @*GtkGestureDrag
global GtkGestureDrag_listautoptr: type <cimport,nodecl> = @*GList
global GtkGestureDrag_slistautoptr: type <cimport,nodecl> = @*GSList
global GtkGestureDrag_queueautoptr: type <cimport,nodecl> = @*GQueue
global GtkGestureLongPress_autoptr: type <cimport,nodecl> = @*GtkGestureLongPress
global GtkGestureLongPress_listautoptr: type <cimport,nodecl> = @*GList
global GtkGestureLongPress_slistautoptr: type <cimport,nodecl> = @*GSList
global GtkGestureLongPress_queueautoptr: type <cimport,nodecl> = @*GQueue
global GtkGestureClick_autoptr: type <cimport,nodecl> = @*GtkGestureClick
global GtkGestureClick_listautoptr: type <cimport,nodecl> = @*GList
global GtkGestureClick_slistautoptr: type <cimport,nodecl> = @*GSList
global GtkGestureClick_queueautoptr: type <cimport,nodecl> = @*GQueue
global GtkGesturePan_autoptr: type <cimport,nodecl> = @*GtkGesturePan
global GtkGesturePan_listautoptr: type <cimport,nodecl> = @*GList
global GtkGesturePan_slistautoptr: type <cimport,nodecl> = @*GSList
global GtkGesturePan_queueautoptr: type <cimport,nodecl> = @*GQueue
global GtkGestureRotate_autoptr: type <cimport,nodecl> = @*GtkGestureRotate
global GtkGestureRotate_listautoptr: type <cimport,nodecl> = @*GList
global GtkGestureRotate_slistautoptr: type <cimport,nodecl> = @*GSList
global GtkGestureRotate_queueautoptr: type <cimport,nodecl> = @*GQueue
global GtkGestureSingle_autoptr: type <cimport,nodecl> = @*GtkGestureSingle
global GtkGestureSingle_listautoptr: type <cimport,nodecl> = @*GList
global GtkGestureSingle_slistautoptr: type <cimport,nodecl> = @*GSList
global GtkGestureSingle_queueautoptr: type <cimport,nodecl> = @*GQueue
global GtkGestureSwipe_autoptr: type <cimport,nodecl> = @*GtkGestureSwipe
global GtkGestureSwipe_listautoptr: type <cimport,nodecl> = @*GList
global GtkGestureSwipe_slistautoptr: type <cimport,nodecl> = @*GSList
global GtkGestureSwipe_queueautoptr: type <cimport,nodecl> = @*GQueue
global GtkGestureZoom_autoptr: type <cimport,nodecl> = @*GtkGestureZoom
global GtkGestureZoom_listautoptr: type <cimport,nodecl> = @*GList
global GtkGestureZoom_slistautoptr: type <cimport,nodecl> = @*GSList
global GtkGestureZoom_queueautoptr: type <cimport,nodecl> = @*GQueue
global GtkGrid_autoptr: type <cimport,nodecl> = @*GtkGrid
global GtkGrid_listautoptr: type <cimport,nodecl> = @*GList
global GtkGrid_slistautoptr: type <cimport,nodecl> = @*GSList
global GtkGrid_queueautoptr: type <cimport,nodecl> = @*GQueue
global GtkGridView_autoptr: type <cimport,nodecl> = @*GtkGridView
global GtkGridView_listautoptr: type <cimport,nodecl> = @*GList
global GtkGridView_slistautoptr: type <cimport,nodecl> = @*GSList
global GtkGridView_queueautoptr: type <cimport,nodecl> = @*GQueue
global GtkHeaderBar_autoptr: type <cimport,nodecl> = @*GtkHeaderBar
global GtkHeaderBar_listautoptr: type <cimport,nodecl> = @*GList
global GtkHeaderBar_slistautoptr: type <cimport,nodecl> = @*GSList
global GtkHeaderBar_queueautoptr: type <cimport,nodecl> = @*GQueue
global GtkIMContext_autoptr: type <cimport,nodecl> = @*GtkIMContext
global GtkIMContext_listautoptr: type <cimport,nodecl> = @*GList
global GtkIMContext_slistautoptr: type <cimport,nodecl> = @*GSList
global GtkIMContext_queueautoptr: type <cimport,nodecl> = @*GQueue
global GtkIMContextSimple_autoptr: type <cimport,nodecl> = @*GtkIMContextSimple
global GtkIMContextSimple_listautoptr: type <cimport,nodecl> = @*GList
global GtkIMContextSimple_slistautoptr: type <cimport,nodecl> = @*GSList
global GtkIMContextSimple_queueautoptr: type <cimport,nodecl> = @*GQueue
global GtkIMMulticontext_autoptr: type <cimport,nodecl> = @*GtkIMMulticontext
global GtkIMMulticontext_listautoptr: type <cimport,nodecl> = @*GList
global GtkIMMulticontext_slistautoptr: type <cimport,nodecl> = @*GSList
global GtkIMMulticontext_queueautoptr: type <cimport,nodecl> = @*GQueue
global GtkIconPaintable_autoptr: type <cimport,nodecl> = @*GtkIconPaintable
global GtkIconPaintable_listautoptr: type <cimport,nodecl> = @*GList
global GtkIconPaintable_slistautoptr: type <cimport,nodecl> = @*GSList
global GtkIconPaintable_queueautoptr: type <cimport,nodecl> = @*GQueue
global GtkIconTheme_autoptr: type <cimport,nodecl> = @*GtkIconTheme
global GtkIconTheme_listautoptr: type <cimport,nodecl> = @*GList
global GtkIconTheme_slistautoptr: type <cimport,nodecl> = @*GSList
global GtkIconTheme_queueautoptr: type <cimport,nodecl> = @*GQueue
global GtkIconView_autoptr: type <cimport,nodecl> = @*GtkIconView
global GtkIconView_listautoptr: type <cimport,nodecl> = @*GList
global GtkIconView_slistautoptr: type <cimport,nodecl> = @*GSList
global GtkIconView_queueautoptr: type <cimport,nodecl> = @*GQueue
global GtkImage_autoptr: type <cimport,nodecl> = @*GtkImage
global GtkImage_listautoptr: type <cimport,nodecl> = @*GList
global GtkImage_slistautoptr: type <cimport,nodecl> = @*GSList
global GtkImage_queueautoptr: type <cimport,nodecl> = @*GQueue
global GtkInfoBar_autoptr: type <cimport,nodecl> = @*GtkInfoBar
global GtkInfoBar_listautoptr: type <cimport,nodecl> = @*GList
global GtkInfoBar_slistautoptr: type <cimport,nodecl> = @*GSList
global GtkInfoBar_queueautoptr: type <cimport,nodecl> = @*GQueue
global GtkLevelBar_autoptr: type <cimport,nodecl> = @*GtkLevelBar
global GtkLevelBar_listautoptr: type <cimport,nodecl> = @*GList
global GtkLevelBar_slistautoptr: type <cimport,nodecl> = @*GSList
global GtkLevelBar_queueautoptr: type <cimport,nodecl> = @*GQueue
global GtkLinkButton_autoptr: type <cimport,nodecl> = @*GtkLinkButton
global GtkLinkButton_listautoptr: type <cimport,nodecl> = @*GList
global GtkLinkButton_slistautoptr: type <cimport,nodecl> = @*GSList
global GtkLinkButton_queueautoptr: type <cimport,nodecl> = @*GQueue
global GtkListItem_autoptr: type <cimport,nodecl> = @*GtkListItem
global GtkListItem_listautoptr: type <cimport,nodecl> = @*GList
global GtkListItem_slistautoptr: type <cimport,nodecl> = @*GSList
global GtkListItem_queueautoptr: type <cimport,nodecl> = @*GQueue
global GtkListItemFactory_autoptr: type <cimport,nodecl> = @*GtkListItemFactory
global GtkListItemFactory_listautoptr: type <cimport,nodecl> = @*GList
global GtkListItemFactory_slistautoptr: type <cimport,nodecl> = @*GSList
global GtkListItemFactory_queueautoptr: type <cimport,nodecl> = @*GQueue
global GtkListStore_autoptr: type <cimport,nodecl> = @*GtkListStore
global GtkListStore_listautoptr: type <cimport,nodecl> = @*GList
global GtkListStore_slistautoptr: type <cimport,nodecl> = @*GSList
global GtkListStore_queueautoptr: type <cimport,nodecl> = @*GQueue
global GtkLockButton_autoptr: type <cimport,nodecl> = @*GtkLockButton
global GtkLockButton_listautoptr: type <cimport,nodecl> = @*GList
global GtkLockButton_slistautoptr: type <cimport,nodecl> = @*GSList
global GtkLockButton_queueautoptr: type <cimport,nodecl> = @*GQueue
global GtkMenuButton_autoptr: type <cimport,nodecl> = @*GtkMenuButton
global GtkMenuButton_listautoptr: type <cimport,nodecl> = @*GList
global GtkMenuButton_slistautoptr: type <cimport,nodecl> = @*GSList
global GtkMenuButton_queueautoptr: type <cimport,nodecl> = @*GQueue
global GtkMessageDialog_autoptr: type <cimport,nodecl> = @*GtkMessageDialog
global GtkMessageDialog_listautoptr: type <cimport,nodecl> = @*GList
global GtkMessageDialog_slistautoptr: type <cimport,nodecl> = @*GSList
global GtkMessageDialog_queueautoptr: type <cimport,nodecl> = @*GQueue
global GtkMountOperation_autoptr: type <cimport,nodecl> = @*GtkMountOperation
global GtkMountOperation_listautoptr: type <cimport,nodecl> = @*GList
global GtkMountOperation_slistautoptr: type <cimport,nodecl> = @*GSList
global GtkMountOperation_queueautoptr: type <cimport,nodecl> = @*GQueue
global GtkNotebook_autoptr: type <cimport,nodecl> = @*GtkNotebook
global GtkNotebook_listautoptr: type <cimport,nodecl> = @*GList
global GtkNotebook_slistautoptr: type <cimport,nodecl> = @*GSList
global GtkNotebook_queueautoptr: type <cimport,nodecl> = @*GQueue
global GtkOrientable_autoptr: type <cimport,nodecl> = @*GtkOrientable
global GtkOrientable_listautoptr: type <cimport,nodecl> = @*GList
global GtkOrientable_slistautoptr: type <cimport,nodecl> = @*GSList
global GtkOrientable_queueautoptr: type <cimport,nodecl> = @*GQueue
global GtkOverlay_autoptr: type <cimport,nodecl> = @*GtkOverlay
global GtkOverlay_listautoptr: type <cimport,nodecl> = @*GList
global GtkOverlay_slistautoptr: type <cimport,nodecl> = @*GSList
global GtkOverlay_queueautoptr: type <cimport,nodecl> = @*GQueue
global GtkPageSetup_autoptr: type <cimport,nodecl> = @*GtkPageSetup
global GtkPageSetup_listautoptr: type <cimport,nodecl> = @*GList
global GtkPageSetup_slistautoptr: type <cimport,nodecl> = @*GSList
global GtkPageSetup_queueautoptr: type <cimport,nodecl> = @*GQueue
global GtkPaned_autoptr: type <cimport,nodecl> = @*GtkPaned
global GtkPaned_listautoptr: type <cimport,nodecl> = @*GList
global GtkPaned_slistautoptr: type <cimport,nodecl> = @*GSList
global GtkPaned_queueautoptr: type <cimport,nodecl> = @*GQueue
global GtkPopover_autoptr: type <cimport,nodecl> = @*GtkPopover
global GtkPopover_listautoptr: type <cimport,nodecl> = @*GList
global GtkPopover_slistautoptr: type <cimport,nodecl> = @*GSList
global GtkPopover_queueautoptr: type <cimport,nodecl> = @*GQueue
global GtkPopoverMenu_autoptr: type <cimport,nodecl> = @*GtkPopoverMenu
global GtkPopoverMenu_listautoptr: type <cimport,nodecl> = @*GList
global GtkPopoverMenu_slistautoptr: type <cimport,nodecl> = @*GSList
global GtkPopoverMenu_queueautoptr: type <cimport,nodecl> = @*GQueue
global GtkPrintContext_autoptr: type <cimport,nodecl> = @*GtkPrintContext
global GtkPrintContext_listautoptr: type <cimport,nodecl> = @*GList
global GtkPrintContext_slistautoptr: type <cimport,nodecl> = @*GSList
global GtkPrintContext_queueautoptr: type <cimport,nodecl> = @*GQueue
global GtkPrintOperation_autoptr: type <cimport,nodecl> = @*GtkPrintOperation
global GtkPrintOperation_listautoptr: type <cimport,nodecl> = @*GList
global GtkPrintOperation_slistautoptr: type <cimport,nodecl> = @*GSList
global GtkPrintOperation_queueautoptr: type <cimport,nodecl> = @*GQueue
global GtkPrintOperationPreview_autoptr: type <cimport,nodecl> = @*GtkPrintOperationPreview
global GtkPrintOperationPreview_listautoptr: type <cimport,nodecl> = @*GList
global GtkPrintOperationPreview_slistautoptr: type <cimport,nodecl> = @*GSList
global GtkPrintOperationPreview_queueautoptr: type <cimport,nodecl> = @*GQueue
global GtkPrintSettings_autoptr: type <cimport,nodecl> = @*GtkPrintSettings
global GtkPrintSettings_listautoptr: type <cimport,nodecl> = @*GList
global GtkPrintSettings_slistautoptr: type <cimport,nodecl> = @*GSList
global GtkPrintSettings_queueautoptr: type <cimport,nodecl> = @*GQueue
global GtkProgressBar_autoptr: type <cimport,nodecl> = @*GtkProgressBar
global GtkProgressBar_listautoptr: type <cimport,nodecl> = @*GList
global GtkProgressBar_slistautoptr: type <cimport,nodecl> = @*GSList
global GtkProgressBar_queueautoptr: type <cimport,nodecl> = @*GQueue
global GtkRange_autoptr: type <cimport,nodecl> = @*GtkRange
global GtkRange_listautoptr: type <cimport,nodecl> = @*GList
global GtkRange_slistautoptr: type <cimport,nodecl> = @*GSList
global GtkRange_queueautoptr: type <cimport,nodecl> = @*GQueue
global GtkRecentManager_autoptr: type <cimport,nodecl> = @*GtkRecentManager
global GtkRecentManager_listautoptr: type <cimport,nodecl> = @*GList
global GtkRecentManager_slistautoptr: type <cimport,nodecl> = @*GSList
global GtkRecentManager_queueautoptr: type <cimport,nodecl> = @*GQueue
global GtkRevealer_autoptr: type <cimport,nodecl> = @*GtkRevealer
global GtkRevealer_listautoptr: type <cimport,nodecl> = @*GList
global GtkRevealer_slistautoptr: type <cimport,nodecl> = @*GSList
global GtkRevealer_queueautoptr: type <cimport,nodecl> = @*GQueue
global GtkScale_autoptr: type <cimport,nodecl> = @*GtkScale
global GtkScale_listautoptr: type <cimport,nodecl> = @*GList
global GtkScale_slistautoptr: type <cimport,nodecl> = @*GSList
global GtkScale_queueautoptr: type <cimport,nodecl> = @*GQueue
global GtkScaleButton_autoptr: type <cimport,nodecl> = @*GtkScaleButton
global GtkScaleButton_listautoptr: type <cimport,nodecl> = @*GList
global GtkScaleButton_slistautoptr: type <cimport,nodecl> = @*GSList
global GtkScaleButton_queueautoptr: type <cimport,nodecl> = @*GQueue
global GtkScrollable_autoptr: type <cimport,nodecl> = @*GtkScrollable
global GtkScrollable_listautoptr: type <cimport,nodecl> = @*GList
global GtkScrollable_slistautoptr: type <cimport,nodecl> = @*GSList
global GtkScrollable_queueautoptr: type <cimport,nodecl> = @*GQueue
global GtkScrollbar_autoptr: type <cimport,nodecl> = @*GtkScrollbar
global GtkScrollbar_listautoptr: type <cimport,nodecl> = @*GList
global GtkScrollbar_slistautoptr: type <cimport,nodecl> = @*GSList
global GtkScrollbar_queueautoptr: type <cimport,nodecl> = @*GQueue
global GtkScrolledWindow_autoptr: type <cimport,nodecl> = @*GtkScrolledWindow
global GtkScrolledWindow_listautoptr: type <cimport,nodecl> = @*GList
global GtkScrolledWindow_slistautoptr: type <cimport,nodecl> = @*GSList
global GtkScrolledWindow_queueautoptr: type <cimport,nodecl> = @*GQueue
global GtkSearchBar_autoptr: type <cimport,nodecl> = @*GtkSearchBar
global GtkSearchBar_listautoptr: type <cimport,nodecl> = @*GList
global GtkSearchBar_slistautoptr: type <cimport,nodecl> = @*GSList
global GtkSearchBar_queueautoptr: type <cimport,nodecl> = @*GQueue
global GtkSearchEntry_autoptr: type <cimport,nodecl> = @*GtkSearchEntry
global GtkSearchEntry_listautoptr: type <cimport,nodecl> = @*GList
global GtkSearchEntry_slistautoptr: type <cimport,nodecl> = @*GSList
global GtkSearchEntry_queueautoptr: type <cimport,nodecl> = @*GQueue
global GtkSeparator_autoptr: type <cimport,nodecl> = @*GtkSeparator
global GtkSeparator_listautoptr: type <cimport,nodecl> = @*GList
global GtkSeparator_slistautoptr: type <cimport,nodecl> = @*GSList
global GtkSeparator_queueautoptr: type <cimport,nodecl> = @*GQueue
global GtkSettings_autoptr: type <cimport,nodecl> = @*GtkSettings
global GtkSettings_listautoptr: type <cimport,nodecl> = @*GList
global GtkSettings_slistautoptr: type <cimport,nodecl> = @*GSList
global GtkSettings_queueautoptr: type <cimport,nodecl> = @*GQueue
global GtkStackSidebar_autoptr: type <cimport,nodecl> = @*GtkStackSidebar
global GtkStackSidebar_listautoptr: type <cimport,nodecl> = @*GList
global GtkStackSidebar_slistautoptr: type <cimport,nodecl> = @*GSList
global GtkStackSidebar_queueautoptr: type <cimport,nodecl> = @*GQueue
global GtkSizeGroup_autoptr: type <cimport,nodecl> = @*GtkSizeGroup
global GtkSizeGroup_listautoptr: type <cimport,nodecl> = @*GList
global GtkSizeGroup_slistautoptr: type <cimport,nodecl> = @*GSList
global GtkSizeGroup_queueautoptr: type <cimport,nodecl> = @*GQueue
global GtkSpinButton_autoptr: type <cimport,nodecl> = @*GtkSpinButton
global GtkSpinButton_listautoptr: type <cimport,nodecl> = @*GList
global GtkSpinButton_slistautoptr: type <cimport,nodecl> = @*GSList
global GtkSpinButton_queueautoptr: type <cimport,nodecl> = @*GQueue
global GtkSpinner_autoptr: type <cimport,nodecl> = @*GtkSpinner
global GtkSpinner_listautoptr: type <cimport,nodecl> = @*GList
global GtkSpinner_slistautoptr: type <cimport,nodecl> = @*GSList
global GtkSpinner_queueautoptr: type <cimport,nodecl> = @*GQueue
global GtkStack_autoptr: type <cimport,nodecl> = @*GtkStack
global GtkStack_listautoptr: type <cimport,nodecl> = @*GList
global GtkStack_slistautoptr: type <cimport,nodecl> = @*GSList
global GtkStack_queueautoptr: type <cimport,nodecl> = @*GQueue
global GtkStackSwitcher_autoptr: type <cimport,nodecl> = @*GtkStackSwitcher
global GtkStackSwitcher_listautoptr: type <cimport,nodecl> = @*GList
global GtkStackSwitcher_slistautoptr: type <cimport,nodecl> = @*GSList
global GtkStackSwitcher_queueautoptr: type <cimport,nodecl> = @*GQueue
global GtkStatusbar_autoptr: type <cimport,nodecl> = @*GtkStatusbar
global GtkStatusbar_listautoptr: type <cimport,nodecl> = @*GList
global GtkStatusbar_slistautoptr: type <cimport,nodecl> = @*GSList
global GtkStatusbar_queueautoptr: type <cimport,nodecl> = @*GQueue
global GtkStyleContext_autoptr: type <cimport,nodecl> = @*GtkStyleContext
global GtkStyleContext_listautoptr: type <cimport,nodecl> = @*GList
global GtkStyleContext_slistautoptr: type <cimport,nodecl> = @*GSList
global GtkStyleContext_queueautoptr: type <cimport,nodecl> = @*GQueue
global GtkStyleProvider_autoptr: type <cimport,nodecl> = @*GtkStyleProvider
global GtkStyleProvider_listautoptr: type <cimport,nodecl> = @*GList
global GtkStyleProvider_slistautoptr: type <cimport,nodecl> = @*GSList
global GtkStyleProvider_queueautoptr: type <cimport,nodecl> = @*GQueue
global GtkSwitch_autoptr: type <cimport,nodecl> = @*GtkSwitch
global GtkSwitch_listautoptr: type <cimport,nodecl> = @*GList
global GtkSwitch_slistautoptr: type <cimport,nodecl> = @*GSList
global GtkSwitch_queueautoptr: type <cimport,nodecl> = @*GQueue
global GtkTextBuffer_autoptr: type <cimport,nodecl> = @*GtkTextBuffer
global GtkTextBuffer_listautoptr: type <cimport,nodecl> = @*GList
global GtkTextBuffer_slistautoptr: type <cimport,nodecl> = @*GSList
global GtkTextBuffer_queueautoptr: type <cimport,nodecl> = @*GQueue
global GtkTextChildAnchor_autoptr: type <cimport,nodecl> = @*GtkTextChildAnchor
global GtkTextChildAnchor_listautoptr: type <cimport,nodecl> = @*GList
global GtkTextChildAnchor_slistautoptr: type <cimport,nodecl> = @*GSList
global GtkTextChildAnchor_queueautoptr: type <cimport,nodecl> = @*GQueue
global GtkTextMark_autoptr: type <cimport,nodecl> = @*GtkTextMark
global GtkTextMark_listautoptr: type <cimport,nodecl> = @*GList
global GtkTextMark_slistautoptr: type <cimport,nodecl> = @*GSList
global GtkTextMark_queueautoptr: type <cimport,nodecl> = @*GQueue
global GtkTextTag_autoptr: type <cimport,nodecl> = @*GtkTextTag
global GtkTextTag_listautoptr: type <cimport,nodecl> = @*GList
global GtkTextTag_slistautoptr: type <cimport,nodecl> = @*GSList
global GtkTextTag_queueautoptr: type <cimport,nodecl> = @*GQueue
global GtkTextTagTable_autoptr: type <cimport,nodecl> = @*GtkTextTagTable
global GtkTextTagTable_listautoptr: type <cimport,nodecl> = @*GList
global GtkTextTagTable_slistautoptr: type <cimport,nodecl> = @*GSList
global GtkTextTagTable_queueautoptr: type <cimport,nodecl> = @*GQueue
global GtkTextView_autoptr: type <cimport,nodecl> = @*GtkTextView
global GtkTextView_listautoptr: type <cimport,nodecl> = @*GList
global GtkTextView_slistautoptr: type <cimport,nodecl> = @*GSList
global GtkTextView_queueautoptr: type <cimport,nodecl> = @*GQueue
global GtkToggleButton_autoptr: type <cimport,nodecl> = @*GtkToggleButton
global GtkToggleButton_listautoptr: type <cimport,nodecl> = @*GList
global GtkToggleButton_slistautoptr: type <cimport,nodecl> = @*GSList
global GtkToggleButton_queueautoptr: type <cimport,nodecl> = @*GQueue
global GtkTooltip_autoptr: type <cimport,nodecl> = @*GtkTooltip
global GtkTooltip_listautoptr: type <cimport,nodecl> = @*GList
global GtkTooltip_slistautoptr: type <cimport,nodecl> = @*GSList
global GtkTooltip_queueautoptr: type <cimport,nodecl> = @*GQueue
global GtkTreeDragDest_autoptr: type <cimport,nodecl> = @*GtkTreeDragDest
global GtkTreeDragDest_listautoptr: type <cimport,nodecl> = @*GList
global GtkTreeDragDest_slistautoptr: type <cimport,nodecl> = @*GSList
global GtkTreeDragDest_queueautoptr: type <cimport,nodecl> = @*GQueue
global GtkTreeDragSource_autoptr: type <cimport,nodecl> = @*GtkTreeDragSource
global GtkTreeDragSource_listautoptr: type <cimport,nodecl> = @*GList
global GtkTreeDragSource_slistautoptr: type <cimport,nodecl> = @*GSList
global GtkTreeDragSource_queueautoptr: type <cimport,nodecl> = @*GQueue
global GtkTreeModel_autoptr: type <cimport,nodecl> = @*GtkTreeModel
global GtkTreeModel_listautoptr: type <cimport,nodecl> = @*GList
global GtkTreeModel_slistautoptr: type <cimport,nodecl> = @*GSList
global GtkTreeModel_queueautoptr: type <cimport,nodecl> = @*GQueue
global GtkTreeModelFilter_autoptr: type <cimport,nodecl> = @*GtkTreeModelFilter
global GtkTreeModelFilter_listautoptr: type <cimport,nodecl> = @*GList
global GtkTreeModelFilter_slistautoptr: type <cimport,nodecl> = @*GSList
global GtkTreeModelFilter_queueautoptr: type <cimport,nodecl> = @*GQueue
global GtkTreeModelSort_autoptr: type <cimport,nodecl> = @*GtkTreeModelSort
global GtkTreeModelSort_listautoptr: type <cimport,nodecl> = @*GList
global GtkTreeModelSort_slistautoptr: type <cimport,nodecl> = @*GSList
global GtkTreeModelSort_queueautoptr: type <cimport,nodecl> = @*GQueue
global GtkTreeSelection_autoptr: type <cimport,nodecl> = @*GtkTreeSelection
global GtkTreeSelection_listautoptr: type <cimport,nodecl> = @*GList
global GtkTreeSelection_slistautoptr: type <cimport,nodecl> = @*GSList
global GtkTreeSelection_queueautoptr: type <cimport,nodecl> = @*GQueue
global GtkTreeSortable_autoptr: type <cimport,nodecl> = @*GtkTreeSortable
global GtkTreeSortable_listautoptr: type <cimport,nodecl> = @*GList
global GtkTreeSortable_slistautoptr: type <cimport,nodecl> = @*GSList
global GtkTreeSortable_queueautoptr: type <cimport,nodecl> = @*GQueue
global GtkTreeStore_autoptr: type <cimport,nodecl> = @*GtkTreeStore
global GtkTreeStore_listautoptr: type <cimport,nodecl> = @*GList
global GtkTreeStore_slistautoptr: type <cimport,nodecl> = @*GSList
global GtkTreeStore_queueautoptr: type <cimport,nodecl> = @*GQueue
global GtkTreeView_autoptr: type <cimport,nodecl> = @*GtkTreeView
global GtkTreeView_listautoptr: type <cimport,nodecl> = @*GList
global GtkTreeView_slistautoptr: type <cimport,nodecl> = @*GSList
global GtkTreeView_queueautoptr: type <cimport,nodecl> = @*GQueue
global GtkTreeViewColumn_autoptr: type <cimport,nodecl> = @*GtkTreeViewColumn
global GtkTreeViewColumn_listautoptr: type <cimport,nodecl> = @*GList
global GtkTreeViewColumn_slistautoptr: type <cimport,nodecl> = @*GSList
global GtkTreeViewColumn_queueautoptr: type <cimport,nodecl> = @*GQueue
global GtkViewport_autoptr: type <cimport,nodecl> = @*GtkViewport
global GtkViewport_listautoptr: type <cimport,nodecl> = @*GList
global GtkViewport_slistautoptr: type <cimport,nodecl> = @*GSList
global GtkViewport_queueautoptr: type <cimport,nodecl> = @*GQueue
global GtkVolumeButton_autoptr: type <cimport,nodecl> = @*GtkVolumeButton
global GtkVolumeButton_listautoptr: type <cimport,nodecl> = @*GList
global GtkVolumeButton_slistautoptr: type <cimport,nodecl> = @*GSList
global GtkVolumeButton_queueautoptr: type <cimport,nodecl> = @*GQueue
global GtkPaperSize_autoptr: type <cimport,nodecl> = @*GtkPaperSize
global GtkPaperSize_listautoptr: type <cimport,nodecl> = @*GList
global GtkPaperSize_slistautoptr: type <cimport,nodecl> = @*GSList
global GtkPaperSize_queueautoptr: type <cimport,nodecl> = @*GQueue
global GtkRecentInfo_autoptr: type <cimport,nodecl> = @*GtkRecentInfo
global GtkRecentInfo_listautoptr: type <cimport,nodecl> = @*GList
global GtkRecentInfo_slistautoptr: type <cimport,nodecl> = @*GSList
global GtkRecentInfo_queueautoptr: type <cimport,nodecl> = @*GQueue
global GtkTextIter_autoptr: type <cimport,nodecl> = @*GtkTextIter
global GtkTextIter_listautoptr: type <cimport,nodecl> = @*GList
global GtkTextIter_slistautoptr: type <cimport,nodecl> = @*GSList
global GtkTextIter_queueautoptr: type <cimport,nodecl> = @*GQueue
global GtkTreeIter_autoptr: type <cimport,nodecl> = @*GtkTreeIter
global GtkTreeIter_listautoptr: type <cimport,nodecl> = @*GList
global GtkTreeIter_slistautoptr: type <cimport,nodecl> = @*GSList
global GtkTreeIter_queueautoptr: type <cimport,nodecl> = @*GQueue
global GtkTreePath_autoptr: type <cimport,nodecl> = @*GtkTreePath
global GtkTreePath_listautoptr: type <cimport,nodecl> = @*GList
global GtkTreePath_slistautoptr: type <cimport,nodecl> = @*GSList
global GtkTreePath_queueautoptr: type <cimport,nodecl> = @*GQueue
global GtkTreeRowReference_autoptr: type <cimport,nodecl> = @*GtkTreeRowReference
global GtkTreeRowReference_listautoptr: type <cimport,nodecl> = @*GList
global GtkTreeRowReference_slistautoptr: type <cimport,nodecl> = @*GSList
global GtkTreeRowReference_queueautoptr: type <cimport,nodecl> = @*GQueue
global AdwPreferencesRow: type <cimport,nodecl,forwarddecl> = @record{}
global AdwPreferencesRowClass: type <cimport,nodecl,forwarddecl> = @record{}
AdwPreferencesRow = @record{
  parent_instance: GtkListBoxRow
}
global AdwPreferencesRow_autoptr: type <cimport,nodecl> = @*AdwPreferencesRow
global AdwPreferencesRow_listautoptr: type <cimport,nodecl> = @*GList
global AdwPreferencesRow_slistautoptr: type <cimport,nodecl> = @*GSList
global AdwPreferencesRow_queueautoptr: type <cimport,nodecl> = @*GQueue
global AdwPreferencesRowClass_autoptr: type <cimport,nodecl> = @*AdwPreferencesRowClass
global AdwPreferencesRowClass_listautoptr: type <cimport,nodecl> = @*GList
global AdwPreferencesRowClass_slistautoptr: type <cimport,nodecl> = @*GSList
global AdwPreferencesRowClass_queueautoptr: type <cimport,nodecl> = @*GQueue
AdwPreferencesRowClass = @record{
  parent_class: GtkListBoxRowClass,
  padding: [4]gpointer
}
global AdwActionRow: type <cimport,nodecl,forwarddecl> = @record{}
global AdwActionRowClass: type <cimport,nodecl,forwarddecl> = @record{}
AdwActionRow = @record{
  parent_instance: AdwPreferencesRow
}
global AdwActionRow_autoptr: type <cimport,nodecl> = @*AdwActionRow
global AdwActionRow_listautoptr: type <cimport,nodecl> = @*GList
global AdwActionRow_slistautoptr: type <cimport,nodecl> = @*GSList
global AdwActionRow_queueautoptr: type <cimport,nodecl> = @*GQueue
global AdwActionRowClass_autoptr: type <cimport,nodecl> = @*AdwActionRowClass
global AdwActionRowClass_listautoptr: type <cimport,nodecl> = @*GList
global AdwActionRowClass_slistautoptr: type <cimport,nodecl> = @*GSList
global AdwActionRowClass_queueautoptr: type <cimport,nodecl> = @*GQueue
AdwActionRowClass = @record{
  parent_class: AdwPreferencesRowClass,
  activate: function(self: *AdwActionRow): void,
  padding: [4]gpointer
}
global AdwAnimationTarget: type <cimport,nodecl,forwarddecl> = @record{}
global AdwAnimationTargetClass: type <cimport,nodecl,forwarddecl> = @record{}
global AdwAnimationTarget_autoptr: type <cimport,nodecl> = @*AdwAnimationTarget
global AdwAnimationTarget_listautoptr: type <cimport,nodecl> = @*GList
global AdwAnimationTarget_slistautoptr: type <cimport,nodecl> = @*GSList
global AdwAnimationTarget_queueautoptr: type <cimport,nodecl> = @*GQueue
global AdwAnimationTargetClass_autoptr: type <cimport,nodecl> = @*AdwAnimationTargetClass
global AdwAnimationTargetClass_listautoptr: type <cimport,nodecl> = @*GList
global AdwAnimationTargetClass_slistautoptr: type <cimport,nodecl> = @*GSList
global AdwAnimationTargetClass_queueautoptr: type <cimport,nodecl> = @*GQueue
global AdwAnimationTargetFunc: type <cimport,nodecl> = @function(value: float64, user_data: gpointer): void
global AdwCallbackAnimationTarget: type <cimport,nodecl,forwarddecl> = @record{}
global AdwCallbackAnimationTargetClass: type <cimport,nodecl,forwarddecl> = @record{}
global AdwCallbackAnimationTarget_autoptr: type <cimport,nodecl> = @*AdwCallbackAnimationTarget
global AdwCallbackAnimationTarget_listautoptr: type <cimport,nodecl> = @*GList
global AdwCallbackAnimationTarget_slistautoptr: type <cimport,nodecl> = @*GSList
global AdwCallbackAnimationTarget_queueautoptr: type <cimport,nodecl> = @*GQueue
global AdwCallbackAnimationTargetClass_autoptr: type <cimport,nodecl> = @*AdwCallbackAnimationTargetClass
global AdwCallbackAnimationTargetClass_listautoptr: type <cimport,nodecl> = @*GList
global AdwCallbackAnimationTargetClass_slistautoptr: type <cimport,nodecl> = @*GSList
global AdwCallbackAnimationTargetClass_queueautoptr: type <cimport,nodecl> = @*GQueue
global AdwAnimation: type <cimport,nodecl,forwarddecl> = @record{}
global AdwAnimationClass: type <cimport,nodecl,forwarddecl> = @record{}
AdwAnimation = @record{
  parent_instance: GObject
}
global AdwAnimation_autoptr: type <cimport,nodecl> = @*AdwAnimation
global AdwAnimation_listautoptr: type <cimport,nodecl> = @*GList
global AdwAnimation_slistautoptr: type <cimport,nodecl> = @*GSList
global AdwAnimation_queueautoptr: type <cimport,nodecl> = @*GQueue
global AdwAnimationClass_autoptr: type <cimport,nodecl> = @*AdwAnimationClass
global AdwAnimationClass_listautoptr: type <cimport,nodecl> = @*GList
global AdwAnimationClass_slistautoptr: type <cimport,nodecl> = @*GSList
global AdwAnimationClass_queueautoptr: type <cimport,nodecl> = @*GQueue
global AdwAnimationState: type <cimport,nodecl,using> = @enum(cint){
  ADW_ANIMATION_IDLE = 0,
  ADW_ANIMATION_PAUSED = 1,
  ADW_ANIMATION_PLAYING = 2,
  ADW_ANIMATION_FINISHED = 3
}
global AdwColorScheme: type <cimport,nodecl,using> = @enum(cint){
  ADW_COLOR_SCHEME_DEFAULT = 0,
  ADW_COLOR_SCHEME_FORCE_LIGHT = 1,
  ADW_COLOR_SCHEME_PREFER_LIGHT = 2,
  ADW_COLOR_SCHEME_PREFER_DARK = 3,
  ADW_COLOR_SCHEME_FORCE_DARK = 4
}
global AdwStyleManager: type <cimport,nodecl,forwarddecl> = @record{}
global AdwStyleManagerClass: type <cimport,nodecl> = @record{
  parent_class: GObjectClass
}
global AdwStyleManager_autoptr: type <cimport,nodecl> = @*AdwStyleManager
global AdwStyleManager_listautoptr: type <cimport,nodecl> = @*GList
global AdwStyleManager_slistautoptr: type <cimport,nodecl> = @*GSList
global AdwStyleManager_queueautoptr: type <cimport,nodecl> = @*GQueue
global AdwStyleManagerClass_autoptr: type <cimport,nodecl> = @*AdwStyleManagerClass
global AdwStyleManagerClass_listautoptr: type <cimport,nodecl> = @*GList
global AdwStyleManagerClass_slistautoptr: type <cimport,nodecl> = @*GSList
global AdwStyleManagerClass_queueautoptr: type <cimport,nodecl> = @*GQueue
global AdwApplication: type <cimport,nodecl,forwarddecl> = @record{}
global AdwApplicationClass: type <cimport,nodecl,forwarddecl> = @record{}
AdwApplication = @record{
  parent_instance: GtkApplication
}
global AdwApplication_autoptr: type <cimport,nodecl> = @*AdwApplication
global AdwApplication_listautoptr: type <cimport,nodecl> = @*GList
global AdwApplication_slistautoptr: type <cimport,nodecl> = @*GSList
global AdwApplication_queueautoptr: type <cimport,nodecl> = @*GQueue
global AdwApplicationClass_autoptr: type <cimport,nodecl> = @*AdwApplicationClass
global AdwApplicationClass_listautoptr: type <cimport,nodecl> = @*GList
global AdwApplicationClass_slistautoptr: type <cimport,nodecl> = @*GSList
global AdwApplicationClass_queueautoptr: type <cimport,nodecl> = @*GQueue
AdwApplicationClass = @record{
  parent_class: GtkApplicationClass,
  padding: [4]gpointer
}
global AdwApplicationWindow: type <cimport,nodecl,forwarddecl> = @record{}
global AdwApplicationWindowClass: type <cimport,nodecl,forwarddecl> = @record{}
AdwApplicationWindow = @record{
  parent_instance: GtkApplicationWindow
}
global AdwApplicationWindow_autoptr: type <cimport,nodecl> = @*AdwApplicationWindow
global AdwApplicationWindow_listautoptr: type <cimport,nodecl> = @*GList
global AdwApplicationWindow_slistautoptr: type <cimport,nodecl> = @*GSList
global AdwApplicationWindow_queueautoptr: type <cimport,nodecl> = @*GQueue
global AdwApplicationWindowClass_autoptr: type <cimport,nodecl> = @*AdwApplicationWindowClass
global AdwApplicationWindowClass_listautoptr: type <cimport,nodecl> = @*GList
global AdwApplicationWindowClass_slistautoptr: type <cimport,nodecl> = @*GSList
global AdwApplicationWindowClass_queueautoptr: type <cimport,nodecl> = @*GQueue
AdwApplicationWindowClass = @record{
  parent_class: GtkApplicationWindowClass,
  padding: [4]gpointer
}
global AdwAvatar: type <cimport,nodecl,forwarddecl> = @record{}
global AdwAvatarClass: type <cimport,nodecl> = @record{
  parent_class: GtkWidgetClass
}
global AdwAvatar_autoptr: type <cimport,nodecl> = @*AdwAvatar
global AdwAvatar_listautoptr: type <cimport,nodecl> = @*GList
global AdwAvatar_slistautoptr: type <cimport,nodecl> = @*GSList
global AdwAvatar_queueautoptr: type <cimport,nodecl> = @*GQueue
global AdwAvatarClass_autoptr: type <cimport,nodecl> = @*AdwAvatarClass
global AdwAvatarClass_listautoptr: type <cimport,nodecl> = @*GList
global AdwAvatarClass_slistautoptr: type <cimport,nodecl> = @*GSList
global AdwAvatarClass_queueautoptr: type <cimport,nodecl> = @*GQueue
global AdwBin: type <cimport,nodecl,forwarddecl> = @record{}
global AdwBinClass: type <cimport,nodecl,forwarddecl> = @record{}
AdwBin = @record{
  parent_instance: GtkWidget
}
global AdwBin_autoptr: type <cimport,nodecl> = @*AdwBin
global AdwBin_listautoptr: type <cimport,nodecl> = @*GList
global AdwBin_slistautoptr: type <cimport,nodecl> = @*GSList
global AdwBin_queueautoptr: type <cimport,nodecl> = @*GQueue
global AdwBinClass_autoptr: type <cimport,nodecl> = @*AdwBinClass
global AdwBinClass_listautoptr: type <cimport,nodecl> = @*GList
global AdwBinClass_slistautoptr: type <cimport,nodecl> = @*GSList
global AdwBinClass_queueautoptr: type <cimport,nodecl> = @*GQueue
AdwBinClass = @record{
  parent_class: GtkWidgetClass
}
global AdwButtonContent: type <cimport,nodecl,forwarddecl> = @record{}
global AdwButtonContentClass: type <cimport,nodecl> = @record{
  parent_class: GtkWidgetClass
}
global AdwButtonContent_autoptr: type <cimport,nodecl> = @*AdwButtonContent
global AdwButtonContent_listautoptr: type <cimport,nodecl> = @*GList
global AdwButtonContent_slistautoptr: type <cimport,nodecl> = @*GSList
global AdwButtonContent_queueautoptr: type <cimport,nodecl> = @*GQueue
global AdwButtonContentClass_autoptr: type <cimport,nodecl> = @*AdwButtonContentClass
global AdwButtonContentClass_listautoptr: type <cimport,nodecl> = @*GList
global AdwButtonContentClass_slistautoptr: type <cimport,nodecl> = @*GSList
global AdwButtonContentClass_queueautoptr: type <cimport,nodecl> = @*GQueue
global AdwSpringParams: type <cimport,nodecl,forwarddecl> = @record{}
global AdwSpringParams_autoptr: type <cimport,nodecl> = @*AdwSpringParams
global AdwSpringParams_listautoptr: type <cimport,nodecl> = @*GList
global AdwSpringParams_slistautoptr: type <cimport,nodecl> = @*GSList
global AdwSpringParams_queueautoptr: type <cimport,nodecl> = @*GQueue
global AdwCarousel: type <cimport,nodecl,forwarddecl> = @record{}
global AdwCarouselClass: type <cimport,nodecl> = @record{
  parent_class: GtkWidgetClass
}
global AdwCarousel_autoptr: type <cimport,nodecl> = @*AdwCarousel
global AdwCarousel_listautoptr: type <cimport,nodecl> = @*GList
global AdwCarousel_slistautoptr: type <cimport,nodecl> = @*GSList
global AdwCarousel_queueautoptr: type <cimport,nodecl> = @*GQueue
global AdwCarouselClass_autoptr: type <cimport,nodecl> = @*AdwCarouselClass
global AdwCarouselClass_listautoptr: type <cimport,nodecl> = @*GList
global AdwCarouselClass_slistautoptr: type <cimport,nodecl> = @*GSList
global AdwCarouselClass_queueautoptr: type <cimport,nodecl> = @*GQueue
global AdwCarouselIndicatorDots: type <cimport,nodecl,forwarddecl> = @record{}
global AdwCarouselIndicatorDotsClass: type <cimport,nodecl> = @record{
  parent_class: GtkWidgetClass
}
global AdwCarouselIndicatorDots_autoptr: type <cimport,nodecl> = @*AdwCarouselIndicatorDots
global AdwCarouselIndicatorDots_listautoptr: type <cimport,nodecl> = @*GList
global AdwCarouselIndicatorDots_slistautoptr: type <cimport,nodecl> = @*GSList
global AdwCarouselIndicatorDots_queueautoptr: type <cimport,nodecl> = @*GQueue
global AdwCarouselIndicatorDotsClass_autoptr: type <cimport,nodecl> = @*AdwCarouselIndicatorDotsClass
global AdwCarouselIndicatorDotsClass_listautoptr: type <cimport,nodecl> = @*GList
global AdwCarouselIndicatorDotsClass_slistautoptr: type <cimport,nodecl> = @*GSList
global AdwCarouselIndicatorDotsClass_queueautoptr: type <cimport,nodecl> = @*GQueue
global AdwCarouselIndicatorLines: type <cimport,nodecl,forwarddecl> = @record{}
global AdwCarouselIndicatorLinesClass: type <cimport,nodecl> = @record{
  parent_class: GtkWidgetClass
}
global AdwCarouselIndicatorLines_autoptr: type <cimport,nodecl> = @*AdwCarouselIndicatorLines
global AdwCarouselIndicatorLines_listautoptr: type <cimport,nodecl> = @*GList
global AdwCarouselIndicatorLines_slistautoptr: type <cimport,nodecl> = @*GSList
global AdwCarouselIndicatorLines_queueautoptr: type <cimport,nodecl> = @*GQueue
global AdwCarouselIndicatorLinesClass_autoptr: type <cimport,nodecl> = @*AdwCarouselIndicatorLinesClass
global AdwCarouselIndicatorLinesClass_listautoptr: type <cimport,nodecl> = @*GList
global AdwCarouselIndicatorLinesClass_slistautoptr: type <cimport,nodecl> = @*GSList
global AdwCarouselIndicatorLinesClass_queueautoptr: type <cimport,nodecl> = @*GQueue
global AdwClamp: type <cimport,nodecl,forwarddecl> = @record{}
global AdwClampClass: type <cimport,nodecl> = @record{
  parent_class: GtkWidgetClass
}
global AdwClamp_autoptr: type <cimport,nodecl> = @*AdwClamp
global AdwClamp_listautoptr: type <cimport,nodecl> = @*GList
global AdwClamp_slistautoptr: type <cimport,nodecl> = @*GSList
global AdwClamp_queueautoptr: type <cimport,nodecl> = @*GQueue
global AdwClampClass_autoptr: type <cimport,nodecl> = @*AdwClampClass
global AdwClampClass_listautoptr: type <cimport,nodecl> = @*GList
global AdwClampClass_slistautoptr: type <cimport,nodecl> = @*GSList
global AdwClampClass_queueautoptr: type <cimport,nodecl> = @*GQueue
global AdwClampLayout: type <cimport,nodecl,forwarddecl> = @record{}
global AdwClampLayoutClass: type <cimport,nodecl> = @record{
  parent_class: GtkLayoutManagerClass
}
global AdwClampLayout_autoptr: type <cimport,nodecl> = @*AdwClampLayout
global AdwClampLayout_listautoptr: type <cimport,nodecl> = @*GList
global AdwClampLayout_slistautoptr: type <cimport,nodecl> = @*GSList
global AdwClampLayout_queueautoptr: type <cimport,nodecl> = @*GQueue
global AdwClampLayoutClass_autoptr: type <cimport,nodecl> = @*AdwClampLayoutClass
global AdwClampLayoutClass_listautoptr: type <cimport,nodecl> = @*GList
global AdwClampLayoutClass_slistautoptr: type <cimport,nodecl> = @*GSList
global AdwClampLayoutClass_queueautoptr: type <cimport,nodecl> = @*GQueue
global AdwClampScrollable: type <cimport,nodecl,forwarddecl> = @record{}
global AdwClampScrollableClass: type <cimport,nodecl> = @record{
  parent_class: GtkWidgetClass
}
global AdwClampScrollable_autoptr: type <cimport,nodecl> = @*AdwClampScrollable
global AdwClampScrollable_listautoptr: type <cimport,nodecl> = @*GList
global AdwClampScrollable_slistautoptr: type <cimport,nodecl> = @*GSList
global AdwClampScrollable_queueautoptr: type <cimport,nodecl> = @*GQueue
global AdwClampScrollableClass_autoptr: type <cimport,nodecl> = @*AdwClampScrollableClass
global AdwClampScrollableClass_listautoptr: type <cimport,nodecl> = @*GList
global AdwClampScrollableClass_slistautoptr: type <cimport,nodecl> = @*GSList
global AdwClampScrollableClass_queueautoptr: type <cimport,nodecl> = @*GQueue
global AdwComboRow: type <cimport,nodecl,forwarddecl> = @record{}
global AdwComboRowClass: type <cimport,nodecl,forwarddecl> = @record{}
AdwComboRow = @record{
  parent_instance: AdwActionRow
}
global AdwComboRow_autoptr: type <cimport,nodecl> = @*AdwComboRow
global AdwComboRow_listautoptr: type <cimport,nodecl> = @*GList
global AdwComboRow_slistautoptr: type <cimport,nodecl> = @*GSList
global AdwComboRow_queueautoptr: type <cimport,nodecl> = @*GQueue
global AdwComboRowClass_autoptr: type <cimport,nodecl> = @*AdwComboRowClass
global AdwComboRowClass_listautoptr: type <cimport,nodecl> = @*GList
global AdwComboRowClass_slistautoptr: type <cimport,nodecl> = @*GSList
global AdwComboRowClass_queueautoptr: type <cimport,nodecl> = @*GQueue
AdwComboRowClass = @record{
  parent_class: AdwActionRowClass,
  padding: [4]gpointer
}
global AdwEasing: type <cimport,nodecl,using> = @enum(cint){
  ADW_LINEAR = 0,
  ADW_EASE_IN_QUAD = 1,
  ADW_EASE_OUT_QUAD = 2,
  ADW_EASE_IN_OUT_QUAD = 3,
  ADW_EASE_IN_CUBIC = 4,
  ADW_EASE_OUT_CUBIC = 5,
  ADW_EASE_IN_OUT_CUBIC = 6,
  ADW_EASE_IN_QUART = 7,
  ADW_EASE_OUT_QUART = 8,
  ADW_EASE_IN_OUT_QUART = 9,
  ADW_EASE_IN_QUINT = 10,
  ADW_EASE_OUT_QUINT = 11,
  ADW_EASE_IN_OUT_QUINT = 12,
  ADW_EASE_IN_SINE = 13,
  ADW_EASE_OUT_SINE = 14,
  ADW_EASE_IN_OUT_SINE = 15,
  ADW_EASE_IN_EXPO = 16,
  ADW_EASE_OUT_EXPO = 17,
  ADW_EASE_IN_OUT_EXPO = 18,
  ADW_EASE_IN_CIRC = 19,
  ADW_EASE_OUT_CIRC = 20,
  ADW_EASE_IN_OUT_CIRC = 21,
  ADW_EASE_IN_ELASTIC = 22,
  ADW_EASE_OUT_ELASTIC = 23,
  ADW_EASE_IN_OUT_ELASTIC = 24,
  ADW_EASE_IN_BACK = 25,
  ADW_EASE_OUT_BACK = 26,
  ADW_EASE_IN_OUT_BACK = 27,
  ADW_EASE_IN_BOUNCE = 28,
  ADW_EASE_OUT_BOUNCE = 29,
  ADW_EASE_IN_OUT_BOUNCE = 30
}
global AdwEnumListItem: type <cimport,nodecl,forwarddecl> = @record{}
global AdwEnumListItemClass: type <cimport,nodecl> = @record{
  parent_class: GObjectClass
}
global AdwEnumListItem_autoptr: type <cimport,nodecl> = @*AdwEnumListItem
global AdwEnumListItem_listautoptr: type <cimport,nodecl> = @*GList
global AdwEnumListItem_slistautoptr: type <cimport,nodecl> = @*GSList
global AdwEnumListItem_queueautoptr: type <cimport,nodecl> = @*GQueue
global AdwEnumListItemClass_autoptr: type <cimport,nodecl> = @*AdwEnumListItemClass
global AdwEnumListItemClass_listautoptr: type <cimport,nodecl> = @*GList
global AdwEnumListItemClass_slistautoptr: type <cimport,nodecl> = @*GSList
global AdwEnumListItemClass_queueautoptr: type <cimport,nodecl> = @*GQueue
global AdwEnumListModel: type <cimport,nodecl,forwarddecl> = @record{}
global AdwEnumListModelClass: type <cimport,nodecl> = @record{
  parent_class: GObjectClass
}
global AdwEnumListModel_autoptr: type <cimport,nodecl> = @*AdwEnumListModel
global AdwEnumListModel_listautoptr: type <cimport,nodecl> = @*GList
global AdwEnumListModel_slistautoptr: type <cimport,nodecl> = @*GSList
global AdwEnumListModel_queueautoptr: type <cimport,nodecl> = @*GQueue
global AdwEnumListModelClass_autoptr: type <cimport,nodecl> = @*AdwEnumListModelClass
global AdwEnumListModelClass_listautoptr: type <cimport,nodecl> = @*GList
global AdwEnumListModelClass_slistautoptr: type <cimport,nodecl> = @*GSList
global AdwEnumListModelClass_queueautoptr: type <cimport,nodecl> = @*GQueue
global AdwExpanderRow: type <cimport,nodecl,forwarddecl> = @record{}
global AdwExpanderRowClass: type <cimport,nodecl,forwarddecl> = @record{}
AdwExpanderRow = @record{
  parent_instance: AdwPreferencesRow
}
global AdwExpanderRow_autoptr: type <cimport,nodecl> = @*AdwExpanderRow
global AdwExpanderRow_listautoptr: type <cimport,nodecl> = @*GList
global AdwExpanderRow_slistautoptr: type <cimport,nodecl> = @*GSList
global AdwExpanderRow_queueautoptr: type <cimport,nodecl> = @*GQueue
global AdwExpanderRowClass_autoptr: type <cimport,nodecl> = @*AdwExpanderRowClass
global AdwExpanderRowClass_listautoptr: type <cimport,nodecl> = @*GList
global AdwExpanderRowClass_slistautoptr: type <cimport,nodecl> = @*GSList
global AdwExpanderRowClass_queueautoptr: type <cimport,nodecl> = @*GQueue
AdwExpanderRowClass = @record{
  parent_class: AdwPreferencesRowClass,
  padding: [4]gpointer
}
global AdwFoldThresholdPolicy: type <cimport,nodecl,using> = @enum(cint){
  ADW_FOLD_THRESHOLD_POLICY_MINIMUM = 0,
  ADW_FOLD_THRESHOLD_POLICY_NATURAL = 1
}
global AdwFlap: type <cimport,nodecl,forwarddecl> = @record{}
global AdwFlapClass: type <cimport,nodecl> = @record{
  parent_class: GtkWidgetClass
}
global AdwFlap_autoptr: type <cimport,nodecl> = @*AdwFlap
global AdwFlap_listautoptr: type <cimport,nodecl> = @*GList
global AdwFlap_slistautoptr: type <cimport,nodecl> = @*GSList
global AdwFlap_queueautoptr: type <cimport,nodecl> = @*GQueue
global AdwFlapClass_autoptr: type <cimport,nodecl> = @*AdwFlapClass
global AdwFlapClass_listautoptr: type <cimport,nodecl> = @*GList
global AdwFlapClass_slistautoptr: type <cimport,nodecl> = @*GSList
global AdwFlapClass_queueautoptr: type <cimport,nodecl> = @*GQueue
global AdwFlapFoldPolicy: type <cimport,nodecl,using> = @enum(cint){
  ADW_FLAP_FOLD_POLICY_NEVER = 0,
  ADW_FLAP_FOLD_POLICY_ALWAYS = 1,
  ADW_FLAP_FOLD_POLICY_AUTO = 2
}
global AdwFlapTransitionType: type <cimport,nodecl,using> = @enum(cint){
  ADW_FLAP_TRANSITION_TYPE_OVER = 0,
  ADW_FLAP_TRANSITION_TYPE_UNDER = 1,
  ADW_FLAP_TRANSITION_TYPE_SLIDE = 2
}
global AdwHeaderBar: type <cimport,nodecl,forwarddecl> = @record{}
global AdwHeaderBarClass: type <cimport,nodecl> = @record{
  parent_class: GtkWidgetClass
}
global AdwHeaderBar_autoptr: type <cimport,nodecl> = @*AdwHeaderBar
global AdwHeaderBar_listautoptr: type <cimport,nodecl> = @*GList
global AdwHeaderBar_slistautoptr: type <cimport,nodecl> = @*GSList
global AdwHeaderBar_queueautoptr: type <cimport,nodecl> = @*GQueue
global AdwHeaderBarClass_autoptr: type <cimport,nodecl> = @*AdwHeaderBarClass
global AdwHeaderBarClass_listautoptr: type <cimport,nodecl> = @*GList
global AdwHeaderBarClass_slistautoptr: type <cimport,nodecl> = @*GSList
global AdwHeaderBarClass_queueautoptr: type <cimport,nodecl> = @*GQueue
global AdwCenteringPolicy: type <cimport,nodecl,using> = @enum(cint){
  ADW_CENTERING_POLICY_LOOSE = 0,
  ADW_CENTERING_POLICY_STRICT = 1
}
global AdwNavigationDirection: type <cimport,nodecl,using> = @enum(cint){
  ADW_NAVIGATION_DIRECTION_BACK = 0,
  ADW_NAVIGATION_DIRECTION_FORWARD = 1
}
global AdwLeafletPage: type <cimport,nodecl,forwarddecl> = @record{}
global AdwLeafletPageClass: type <cimport,nodecl> = @record{
  parent_class: GObjectClass
}
global AdwLeafletPage_autoptr: type <cimport,nodecl> = @*AdwLeafletPage
global AdwLeafletPage_listautoptr: type <cimport,nodecl> = @*GList
global AdwLeafletPage_slistautoptr: type <cimport,nodecl> = @*GSList
global AdwLeafletPage_queueautoptr: type <cimport,nodecl> = @*GQueue
global AdwLeafletPageClass_autoptr: type <cimport,nodecl> = @*AdwLeafletPageClass
global AdwLeafletPageClass_listautoptr: type <cimport,nodecl> = @*GList
global AdwLeafletPageClass_slistautoptr: type <cimport,nodecl> = @*GSList
global AdwLeafletPageClass_queueautoptr: type <cimport,nodecl> = @*GQueue
global AdwLeaflet: type <cimport,nodecl,forwarddecl> = @record{}
global AdwLeafletClass: type <cimport,nodecl> = @record{
  parent_class: GtkWidgetClass
}
global AdwLeaflet_autoptr: type <cimport,nodecl> = @*AdwLeaflet
global AdwLeaflet_listautoptr: type <cimport,nodecl> = @*GList
global AdwLeaflet_slistautoptr: type <cimport,nodecl> = @*GSList
global AdwLeaflet_queueautoptr: type <cimport,nodecl> = @*GQueue
global AdwLeafletClass_autoptr: type <cimport,nodecl> = @*AdwLeafletClass
global AdwLeafletClass_listautoptr: type <cimport,nodecl> = @*GList
global AdwLeafletClass_slistautoptr: type <cimport,nodecl> = @*GSList
global AdwLeafletClass_queueautoptr: type <cimport,nodecl> = @*GQueue
global AdwLeafletTransitionType: type <cimport,nodecl,using> = @enum(cint){
  ADW_LEAFLET_TRANSITION_TYPE_OVER = 0,
  ADW_LEAFLET_TRANSITION_TYPE_UNDER = 1,
  ADW_LEAFLET_TRANSITION_TYPE_SLIDE = 2
}
global AdwPreferencesGroup: type <cimport,nodecl,forwarddecl> = @record{}
global AdwPreferencesGroupClass: type <cimport,nodecl,forwarddecl> = @record{}
AdwPreferencesGroup = @record{
  parent_instance: GtkWidget
}
global AdwPreferencesGroup_autoptr: type <cimport,nodecl> = @*AdwPreferencesGroup
global AdwPreferencesGroup_listautoptr: type <cimport,nodecl> = @*GList
global AdwPreferencesGroup_slistautoptr: type <cimport,nodecl> = @*GSList
global AdwPreferencesGroup_queueautoptr: type <cimport,nodecl> = @*GQueue
global AdwPreferencesGroupClass_autoptr: type <cimport,nodecl> = @*AdwPreferencesGroupClass
global AdwPreferencesGroupClass_listautoptr: type <cimport,nodecl> = @*GList
global AdwPreferencesGroupClass_slistautoptr: type <cimport,nodecl> = @*GSList
global AdwPreferencesGroupClass_queueautoptr: type <cimport,nodecl> = @*GQueue
AdwPreferencesGroupClass = @record{
  parent_class: GtkWidgetClass,
  padding: [4]gpointer
}
global AdwPreferencesPage: type <cimport,nodecl,forwarddecl> = @record{}
global AdwPreferencesPageClass: type <cimport,nodecl,forwarddecl> = @record{}
AdwPreferencesPage = @record{
  parent_instance: GtkWidget
}
global AdwPreferencesPage_autoptr: type <cimport,nodecl> = @*AdwPreferencesPage
global AdwPreferencesPage_listautoptr: type <cimport,nodecl> = @*GList
global AdwPreferencesPage_slistautoptr: type <cimport,nodecl> = @*GSList
global AdwPreferencesPage_queueautoptr: type <cimport,nodecl> = @*GQueue
global AdwPreferencesPageClass_autoptr: type <cimport,nodecl> = @*AdwPreferencesPageClass
global AdwPreferencesPageClass_listautoptr: type <cimport,nodecl> = @*GList
global AdwPreferencesPageClass_slistautoptr: type <cimport,nodecl> = @*GSList
global AdwPreferencesPageClass_queueautoptr: type <cimport,nodecl> = @*GQueue
AdwPreferencesPageClass = @record{
  parent_class: GtkWidgetClass,
  padding: [4]gpointer
}
global AdwToastPriority: type <cimport,nodecl,using> = @enum(cint){
  ADW_TOAST_PRIORITY_NORMAL = 0,
  ADW_TOAST_PRIORITY_HIGH = 1
}
global AdwToast: type <cimport,nodecl,forwarddecl> = @record{}
global AdwToastClass: type <cimport,nodecl> = @record{
  parent_class: GObjectClass
}
global AdwToast_autoptr: type <cimport,nodecl> = @*AdwToast
global AdwToast_listautoptr: type <cimport,nodecl> = @*GList
global AdwToast_slistautoptr: type <cimport,nodecl> = @*GSList
global AdwToast_queueautoptr: type <cimport,nodecl> = @*GQueue
global AdwToastClass_autoptr: type <cimport,nodecl> = @*AdwToastClass
global AdwToastClass_listautoptr: type <cimport,nodecl> = @*GList
global AdwToastClass_slistautoptr: type <cimport,nodecl> = @*GSList
global AdwToastClass_queueautoptr: type <cimport,nodecl> = @*GQueue
global AdwWindow: type <cimport,nodecl,forwarddecl> = @record{}
global AdwWindowClass: type <cimport,nodecl,forwarddecl> = @record{}
AdwWindow = @record{
  parent_instance: GtkWindow
}
global AdwWindow_autoptr: type <cimport,nodecl> = @*AdwWindow
global AdwWindow_listautoptr: type <cimport,nodecl> = @*GList
global AdwWindow_slistautoptr: type <cimport,nodecl> = @*GSList
global AdwWindow_queueautoptr: type <cimport,nodecl> = @*GQueue
global AdwWindowClass_autoptr: type <cimport,nodecl> = @*AdwWindowClass
global AdwWindowClass_listautoptr: type <cimport,nodecl> = @*GList
global AdwWindowClass_slistautoptr: type <cimport,nodecl> = @*GSList
global AdwWindowClass_queueautoptr: type <cimport,nodecl> = @*GQueue
AdwWindowClass = @record{
  parent_class: GtkWindowClass,
  padding: [4]gpointer
}
global AdwPreferencesWindow: type <cimport,nodecl,forwarddecl> = @record{}
global AdwPreferencesWindowClass: type <cimport,nodecl,forwarddecl> = @record{}
AdwPreferencesWindow = @record{
  parent_instance: AdwWindow
}
global AdwPreferencesWindow_autoptr: type <cimport,nodecl> = @*AdwPreferencesWindow
global AdwPreferencesWindow_listautoptr: type <cimport,nodecl> = @*GList
global AdwPreferencesWindow_slistautoptr: type <cimport,nodecl> = @*GSList
global AdwPreferencesWindow_queueautoptr: type <cimport,nodecl> = @*GQueue
global AdwPreferencesWindowClass_autoptr: type <cimport,nodecl> = @*AdwPreferencesWindowClass
global AdwPreferencesWindowClass_listautoptr: type <cimport,nodecl> = @*GList
global AdwPreferencesWindowClass_slistautoptr: type <cimport,nodecl> = @*GSList
global AdwPreferencesWindowClass_queueautoptr: type <cimport,nodecl> = @*GQueue
AdwPreferencesWindowClass = @record{
  parent_class: AdwWindowClass,
  padding: [4]gpointer
}
global AdwSplitButton: type <cimport,nodecl,forwarddecl> = @record{}
global AdwSplitButtonClass: type <cimport,nodecl> = @record{
  parent_class: GtkWidgetClass
}
global AdwSplitButton_autoptr: type <cimport,nodecl> = @*AdwSplitButton
global AdwSplitButton_listautoptr: type <cimport,nodecl> = @*GList
global AdwSplitButton_slistautoptr: type <cimport,nodecl> = @*GSList
global AdwSplitButton_queueautoptr: type <cimport,nodecl> = @*GQueue
global AdwSplitButtonClass_autoptr: type <cimport,nodecl> = @*AdwSplitButtonClass
global AdwSplitButtonClass_listautoptr: type <cimport,nodecl> = @*GList
global AdwSplitButtonClass_slistautoptr: type <cimport,nodecl> = @*GSList
global AdwSplitButtonClass_queueautoptr: type <cimport,nodecl> = @*GQueue
global AdwSpringAnimation: type <cimport,nodecl,forwarddecl> = @record{}
global AdwSpringAnimationClass: type <cimport,nodecl,forwarddecl> = @record{}
global AdwSpringAnimation_autoptr: type <cimport,nodecl> = @*AdwSpringAnimation
global AdwSpringAnimation_listautoptr: type <cimport,nodecl> = @*GList
global AdwSpringAnimation_slistautoptr: type <cimport,nodecl> = @*GSList
global AdwSpringAnimation_queueautoptr: type <cimport,nodecl> = @*GQueue
global AdwSpringAnimationClass_autoptr: type <cimport,nodecl> = @*AdwSpringAnimationClass
global AdwSpringAnimationClass_listautoptr: type <cimport,nodecl> = @*GList
global AdwSpringAnimationClass_slistautoptr: type <cimport,nodecl> = @*GSList
global AdwSpringAnimationClass_queueautoptr: type <cimport,nodecl> = @*GQueue
global AdwSqueezerPage: type <cimport,nodecl,forwarddecl> = @record{}
global AdwSqueezerPageClass: type <cimport,nodecl> = @record{
  parent_class: GObjectClass
}
global AdwSqueezerPage_autoptr: type <cimport,nodecl> = @*AdwSqueezerPage
global AdwSqueezerPage_listautoptr: type <cimport,nodecl> = @*GList
global AdwSqueezerPage_slistautoptr: type <cimport,nodecl> = @*GSList
global AdwSqueezerPage_queueautoptr: type <cimport,nodecl> = @*GQueue
global AdwSqueezerPageClass_autoptr: type <cimport,nodecl> = @*AdwSqueezerPageClass
global AdwSqueezerPageClass_listautoptr: type <cimport,nodecl> = @*GList
global AdwSqueezerPageClass_slistautoptr: type <cimport,nodecl> = @*GSList
global AdwSqueezerPageClass_queueautoptr: type <cimport,nodecl> = @*GQueue
global AdwSqueezer: type <cimport,nodecl,forwarddecl> = @record{}
global AdwSqueezerClass: type <cimport,nodecl> = @record{
  parent_class: GtkWidgetClass
}
global AdwSqueezer_autoptr: type <cimport,nodecl> = @*AdwSqueezer
global AdwSqueezer_listautoptr: type <cimport,nodecl> = @*GList
global AdwSqueezer_slistautoptr: type <cimport,nodecl> = @*GSList
global AdwSqueezer_queueautoptr: type <cimport,nodecl> = @*GQueue
global AdwSqueezerClass_autoptr: type <cimport,nodecl> = @*AdwSqueezerClass
global AdwSqueezerClass_listautoptr: type <cimport,nodecl> = @*GList
global AdwSqueezerClass_slistautoptr: type <cimport,nodecl> = @*GSList
global AdwSqueezerClass_queueautoptr: type <cimport,nodecl> = @*GQueue
global AdwSqueezerTransitionType: type <cimport,nodecl,using> = @enum(cint){
  ADW_SQUEEZER_TRANSITION_TYPE_NONE = 0,
  ADW_SQUEEZER_TRANSITION_TYPE_CROSSFADE = 1
}
global AdwStatusPage: type <cimport,nodecl,forwarddecl> = @record{}
global AdwStatusPageClass: type <cimport,nodecl> = @record{
  parent_class: GtkWidgetClass
}
global AdwStatusPage_autoptr: type <cimport,nodecl> = @*AdwStatusPage
global AdwStatusPage_listautoptr: type <cimport,nodecl> = @*GList
global AdwStatusPage_slistautoptr: type <cimport,nodecl> = @*GSList
global AdwStatusPage_queueautoptr: type <cimport,nodecl> = @*GQueue
global AdwStatusPageClass_autoptr: type <cimport,nodecl> = @*AdwStatusPageClass
global AdwStatusPageClass_listautoptr: type <cimport,nodecl> = @*GList
global AdwStatusPageClass_slistautoptr: type <cimport,nodecl> = @*GSList
global AdwStatusPageClass_queueautoptr: type <cimport,nodecl> = @*GQueue
global AdwSwipeable: type <cimport,nodecl,forwarddecl> = @record{}
global AdwSwipeableInterface: type <cimport,nodecl,forwarddecl> = @record{}
global AdwSwipeable_autoptr: type <cimport,nodecl> = @*AdwSwipeable
global AdwSwipeable_listautoptr: type <cimport,nodecl> = @*GList
global AdwSwipeable_slistautoptr: type <cimport,nodecl> = @*GSList
global AdwSwipeable_queueautoptr: type <cimport,nodecl> = @*GQueue
AdwSwipeableInterface = @record{
  parent: GTypeInterface,
  get_distance: function(self: *AdwSwipeable): float64,
  get_snap_points: function(self: *AdwSwipeable, n_snap_points: *cint): *float64,
  get_progress: function(self: *AdwSwipeable): float64,
  get_cancel_progress: function(self: *AdwSwipeable): float64,
  get_swipe_area: function(self: *AdwSwipeable, navigation_direction: AdwNavigationDirection, is_drag: gboolean, rect: *GdkRectangle): void,
  padding: [4]gpointer
}
global AdwSwipeTracker: type <cimport,nodecl,forwarddecl> = @record{}
global AdwSwipeTrackerClass: type <cimport,nodecl> = @record{
  parent_class: GObjectClass
}
global AdwSwipeTracker_autoptr: type <cimport,nodecl> = @*AdwSwipeTracker
global AdwSwipeTracker_listautoptr: type <cimport,nodecl> = @*GList
global AdwSwipeTracker_slistautoptr: type <cimport,nodecl> = @*GSList
global AdwSwipeTracker_queueautoptr: type <cimport,nodecl> = @*GQueue
global AdwSwipeTrackerClass_autoptr: type <cimport,nodecl> = @*AdwSwipeTrackerClass
global AdwSwipeTrackerClass_listautoptr: type <cimport,nodecl> = @*GList
global AdwSwipeTrackerClass_slistautoptr: type <cimport,nodecl> = @*GSList
global AdwSwipeTrackerClass_queueautoptr: type <cimport,nodecl> = @*GQueue
global AdwTabPage: type <cimport,nodecl,forwarddecl> = @record{}
global AdwTabPageClass: type <cimport,nodecl> = @record{
  parent_class: GObjectClass
}
global AdwTabPage_autoptr: type <cimport,nodecl> = @*AdwTabPage
global AdwTabPage_listautoptr: type <cimport,nodecl> = @*GList
global AdwTabPage_slistautoptr: type <cimport,nodecl> = @*GSList
global AdwTabPage_queueautoptr: type <cimport,nodecl> = @*GQueue
global AdwTabPageClass_autoptr: type <cimport,nodecl> = @*AdwTabPageClass
global AdwTabPageClass_listautoptr: type <cimport,nodecl> = @*GList
global AdwTabPageClass_slistautoptr: type <cimport,nodecl> = @*GSList
global AdwTabPageClass_queueautoptr: type <cimport,nodecl> = @*GQueue
global AdwTabView: type <cimport,nodecl,forwarddecl> = @record{}
global AdwTabViewClass: type <cimport,nodecl> = @record{
  parent_class: GtkWidgetClass
}
global AdwTabView_autoptr: type <cimport,nodecl> = @*AdwTabView
global AdwTabView_listautoptr: type <cimport,nodecl> = @*GList
global AdwTabView_slistautoptr: type <cimport,nodecl> = @*GSList
global AdwTabView_queueautoptr: type <cimport,nodecl> = @*GQueue
global AdwTabViewClass_autoptr: type <cimport,nodecl> = @*AdwTabViewClass
global AdwTabViewClass_listautoptr: type <cimport,nodecl> = @*GList
global AdwTabViewClass_slistautoptr: type <cimport,nodecl> = @*GSList
global AdwTabViewClass_queueautoptr: type <cimport,nodecl> = @*GQueue
global AdwTabBar: type <cimport,nodecl,forwarddecl> = @record{}
global AdwTabBarClass: type <cimport,nodecl> = @record{
  parent_class: GtkWidgetClass
}
global AdwTabBar_autoptr: type <cimport,nodecl> = @*AdwTabBar
global AdwTabBar_listautoptr: type <cimport,nodecl> = @*GList
global AdwTabBar_slistautoptr: type <cimport,nodecl> = @*GSList
global AdwTabBar_queueautoptr: type <cimport,nodecl> = @*GQueue
global AdwTabBarClass_autoptr: type <cimport,nodecl> = @*AdwTabBarClass
global AdwTabBarClass_listautoptr: type <cimport,nodecl> = @*GList
global AdwTabBarClass_slistautoptr: type <cimport,nodecl> = @*GSList
global AdwTabBarClass_queueautoptr: type <cimport,nodecl> = @*GQueue
global AdwTimedAnimation: type <cimport,nodecl,forwarddecl> = @record{}
global AdwTimedAnimationClass: type <cimport,nodecl,forwarddecl> = @record{}
global AdwTimedAnimation_autoptr: type <cimport,nodecl> = @*AdwTimedAnimation
global AdwTimedAnimation_listautoptr: type <cimport,nodecl> = @*GList
global AdwTimedAnimation_slistautoptr: type <cimport,nodecl> = @*GSList
global AdwTimedAnimation_queueautoptr: type <cimport,nodecl> = @*GQueue
global AdwTimedAnimationClass_autoptr: type <cimport,nodecl> = @*AdwTimedAnimationClass
global AdwTimedAnimationClass_listautoptr: type <cimport,nodecl> = @*GList
global AdwTimedAnimationClass_slistautoptr: type <cimport,nodecl> = @*GSList
global AdwTimedAnimationClass_queueautoptr: type <cimport,nodecl> = @*GQueue
global AdwToastOverlay: type <cimport,nodecl,forwarddecl> = @record{}
global AdwToastOverlayClass: type <cimport,nodecl> = @record{
  parent_class: GtkWidgetClass
}
global AdwToastOverlay_autoptr: type <cimport,nodecl> = @*AdwToastOverlay
global AdwToastOverlay_listautoptr: type <cimport,nodecl> = @*GList
global AdwToastOverlay_slistautoptr: type <cimport,nodecl> = @*GSList
global AdwToastOverlay_queueautoptr: type <cimport,nodecl> = @*GQueue
global AdwToastOverlayClass_autoptr: type <cimport,nodecl> = @*AdwToastOverlayClass
global AdwToastOverlayClass_listautoptr: type <cimport,nodecl> = @*GList
global AdwToastOverlayClass_slistautoptr: type <cimport,nodecl> = @*GSList
global AdwToastOverlayClass_queueautoptr: type <cimport,nodecl> = @*GQueue
global AdwViewStackPage: type <cimport,nodecl,forwarddecl> = @record{}
global AdwViewStackPageClass: type <cimport,nodecl> = @record{
  parent_class: GObjectClass
}
global AdwViewStackPage_autoptr: type <cimport,nodecl> = @*AdwViewStackPage
global AdwViewStackPage_listautoptr: type <cimport,nodecl> = @*GList
global AdwViewStackPage_slistautoptr: type <cimport,nodecl> = @*GSList
global AdwViewStackPage_queueautoptr: type <cimport,nodecl> = @*GQueue
global AdwViewStackPageClass_autoptr: type <cimport,nodecl> = @*AdwViewStackPageClass
global AdwViewStackPageClass_listautoptr: type <cimport,nodecl> = @*GList
global AdwViewStackPageClass_slistautoptr: type <cimport,nodecl> = @*GSList
global AdwViewStackPageClass_queueautoptr: type <cimport,nodecl> = @*GQueue
global AdwViewStack: type <cimport,nodecl,forwarddecl> = @record{}
global AdwViewStackClass: type <cimport,nodecl> = @record{
  parent_class: GtkWidgetClass
}
global AdwViewStack_autoptr: type <cimport,nodecl> = @*AdwViewStack
global AdwViewStack_listautoptr: type <cimport,nodecl> = @*GList
global AdwViewStack_slistautoptr: type <cimport,nodecl> = @*GSList
global AdwViewStack_queueautoptr: type <cimport,nodecl> = @*GQueue
global AdwViewStackClass_autoptr: type <cimport,nodecl> = @*AdwViewStackClass
global AdwViewStackClass_listautoptr: type <cimport,nodecl> = @*GList
global AdwViewStackClass_slistautoptr: type <cimport,nodecl> = @*GSList
global AdwViewStackClass_queueautoptr: type <cimport,nodecl> = @*GQueue
global AdwViewSwitcher: type <cimport,nodecl,forwarddecl> = @record{}
global AdwViewSwitcherClass: type <cimport,nodecl> = @record{
  parent_class: GtkWidgetClass
}
global AdwViewSwitcher_autoptr: type <cimport,nodecl> = @*AdwViewSwitcher
global AdwViewSwitcher_listautoptr: type <cimport,nodecl> = @*GList
global AdwViewSwitcher_slistautoptr: type <cimport,nodecl> = @*GSList
global AdwViewSwitcher_queueautoptr: type <cimport,nodecl> = @*GQueue
global AdwViewSwitcherClass_autoptr: type <cimport,nodecl> = @*AdwViewSwitcherClass
global AdwViewSwitcherClass_listautoptr: type <cimport,nodecl> = @*GList
global AdwViewSwitcherClass_slistautoptr: type <cimport,nodecl> = @*GSList
global AdwViewSwitcherClass_queueautoptr: type <cimport,nodecl> = @*GQueue
global AdwViewSwitcherPolicy: type <cimport,nodecl,using> = @enum(cint){
  ADW_VIEW_SWITCHER_POLICY_NARROW = 0,
  ADW_VIEW_SWITCHER_POLICY_WIDE = 1
}
global AdwViewSwitcherBar: type <cimport,nodecl,forwarddecl> = @record{}
global AdwViewSwitcherBarClass: type <cimport,nodecl> = @record{
  parent_class: GtkWidgetClass
}
global AdwViewSwitcherBar_autoptr: type <cimport,nodecl> = @*AdwViewSwitcherBar
global AdwViewSwitcherBar_listautoptr: type <cimport,nodecl> = @*GList
global AdwViewSwitcherBar_slistautoptr: type <cimport,nodecl> = @*GSList
global AdwViewSwitcherBar_queueautoptr: type <cimport,nodecl> = @*GQueue
global AdwViewSwitcherBarClass_autoptr: type <cimport,nodecl> = @*AdwViewSwitcherBarClass
global AdwViewSwitcherBarClass_listautoptr: type <cimport,nodecl> = @*GList
global AdwViewSwitcherBarClass_slistautoptr: type <cimport,nodecl> = @*GSList
global AdwViewSwitcherBarClass_queueautoptr: type <cimport,nodecl> = @*GQueue
global AdwViewSwitcherTitle: type <cimport,nodecl,forwarddecl> = @record{}
global AdwViewSwitcherTitleClass: type <cimport,nodecl> = @record{
  parent_class: GtkWidgetClass
}
global AdwViewSwitcherTitle_autoptr: type <cimport,nodecl> = @*AdwViewSwitcherTitle
global AdwViewSwitcherTitle_listautoptr: type <cimport,nodecl> = @*GList
global AdwViewSwitcherTitle_slistautoptr: type <cimport,nodecl> = @*GSList
global AdwViewSwitcherTitle_queueautoptr: type <cimport,nodecl> = @*GQueue
global AdwViewSwitcherTitleClass_autoptr: type <cimport,nodecl> = @*AdwViewSwitcherTitleClass
global AdwViewSwitcherTitleClass_listautoptr: type <cimport,nodecl> = @*GList
global AdwViewSwitcherTitleClass_slistautoptr: type <cimport,nodecl> = @*GSList
global AdwViewSwitcherTitleClass_queueautoptr: type <cimport,nodecl> = @*GQueue
global AdwWindowTitle: type <cimport,nodecl,forwarddecl> = @record{}
global AdwWindowTitleClass: type <cimport,nodecl> = @record{
  parent_class: GtkWidgetClass
}
global AdwWindowTitle_autoptr: type <cimport,nodecl> = @*AdwWindowTitle
global AdwWindowTitle_listautoptr: type <cimport,nodecl> = @*GList
global AdwWindowTitle_slistautoptr: type <cimport,nodecl> = @*GSList
global AdwWindowTitle_queueautoptr: type <cimport,nodecl> = @*GQueue
global AdwWindowTitleClass_autoptr: type <cimport,nodecl> = @*AdwWindowTitleClass
global AdwWindowTitleClass_listautoptr: type <cimport,nodecl> = @*GList
global AdwWindowTitleClass_slistautoptr: type <cimport,nodecl> = @*GSList
global AdwWindowTitleClass_queueautoptr: type <cimport,nodecl> = @*GQueue
global function clock(): cclock_t <cimport,nodecl> end
global function time(timer: *ctime_t): ctime_t <cimport,nodecl> end
global function difftime(time1: ctime_t, time0: ctime_t): float64 <cimport,nodecl> end
global function mktime(tp: *tm): ctime_t <cimport,nodecl> end
global function strftime(s: cstring, maxsize: csize, format: cstring, tp: *tm): csize <cimport,nodecl> end
global function strftime_l(s: cstring, maxsize: csize, format: cstring, tp: *tm, loc: locale_t): csize <cimport,nodecl> end
global function gmtime(timer: *ctime_t): *tm <cimport,nodecl> end
global function localtime(timer: *ctime_t): *tm <cimport,nodecl> end
global function gmtime_r(timer: *ctime_t, tp: *tm): *tm <cimport,nodecl> end
global function localtime_r(timer: *ctime_t, tp: *tm): *tm <cimport,nodecl> end
global function asctime(tp: *tm): cstring <cimport,nodecl> end
global function ctime(timer: *ctime_t): cstring <cimport,nodecl> end
global function asctime_r(tp: *tm, buf: cstring): cstring <cimport,nodecl> end
global function ctime_r(timer: *ctime_t, buf: cstring): cstring <cimport,nodecl> end
global tzname: [2]cstring <cimport,nodecl>
global function tzset(): void <cimport,nodecl> end
global daylight: cint <cimport,nodecl>
global timezone: clong <cimport,nodecl>
global function timegm(tp: *tm): ctime_t <cimport,nodecl> end
global function timelocal(tp: *tm): ctime_t <cimport,nodecl> end
global function dysize(year: cint): cint <cimport,nodecl> end
global function nanosleep(requested_time: *timespec, remaining: *timespec): cint <cimport,nodecl> end
global function clock_getres(clock_id: clockid_t, res: *timespec): cint <cimport,nodecl> end
global function clock_gettime(clock_id: clockid_t, tp: *timespec): cint <cimport,nodecl> end
global function clock_settime(clock_id: clockid_t, tp: *timespec): cint <cimport,nodecl> end
global function clock_nanosleep(clock_id: clockid_t, flags: cint, req: *timespec, rem: *timespec): cint <cimport,nodecl> end
global function clock_getcpuclockid(pid: pid_t, clock_id: *clockid_t): cint <cimport,nodecl> end
global function timer_create(clock_id: clockid_t, evp: *sigevent_t, timerid: *timer_t): cint <cimport,nodecl> end
global function timer_delete(timerid: timer_t): cint <cimport,nodecl> end
global function timer_settime(timerid: timer_t, flags: cint, value: *itimerspec, ovalue: *itimerspec): cint <cimport,nodecl> end
global function timer_gettime(timerid: timer_t, value: *itimerspec): cint <cimport,nodecl> end
global function timer_getoverrun(timerid: timer_t): cint <cimport,nodecl> end
global function timespec_get(ts: *timespec, base: cint): cint <cimport,nodecl> end
global function _GLIB_CHECKED_ADD_U32(dest: *guint32, a: guint32, b: guint32): gboolean <cimport,nodecl> end
global function _GLIB_CHECKED_MUL_U32(dest: *guint32, a: guint32, b: guint32): gboolean <cimport,nodecl> end
global function _GLIB_CHECKED_ADD_U64(dest: *guint64, a: guint64, b: guint64): gboolean <cimport,nodecl> end
global function _GLIB_CHECKED_MUL_U64(dest: *guint64, a: guint64, b: guint64): gboolean <cimport,nodecl> end
global function g_array_new(zero_terminated: gboolean, clear_: gboolean, element_size: guint): *GArray <cimport,nodecl> end
global function g_array_steal(array: *GArray, len: *gsize): gpointer <cimport,nodecl> end
global function g_array_sized_new(zero_terminated: gboolean, clear_: gboolean, element_size: guint, reserved_size: guint): *GArray <cimport,nodecl> end
global function g_array_copy(array: *GArray): *GArray <cimport,nodecl> end
global function g_array_free(array: *GArray, free_segment: gboolean): *gchar <cimport,nodecl> end
global function g_array_ref(array: *GArray): *GArray <cimport,nodecl> end
global function g_array_unref(array: *GArray): void <cimport,nodecl> end
global function g_array_get_element_size(array: *GArray): guint <cimport,nodecl> end
global function g_array_append_vals(array: *GArray, data: gconstpointer, len: guint): *GArray <cimport,nodecl> end
global function g_array_prepend_vals(array: *GArray, data: gconstpointer, len: guint): *GArray <cimport,nodecl> end
global function g_array_insert_vals(array: *GArray, index_: guint, data: gconstpointer, len: guint): *GArray <cimport,nodecl> end
global function g_array_set_size(array: *GArray, length: guint): *GArray <cimport,nodecl> end
global function g_array_remove_index(array: *GArray, index_: guint): *GArray <cimport,nodecl> end
global function g_array_remove_index_fast(array: *GArray, index_: guint): *GArray <cimport,nodecl> end
global function g_array_remove_range(array: *GArray, index_: guint, length: guint): *GArray <cimport,nodecl> end
global function g_array_sort(array: *GArray, compare_func: GCompareFunc): void <cimport,nodecl> end
global function g_array_sort_with_data(array: *GArray, compare_func: GCompareDataFunc, user_data: gpointer): void <cimport,nodecl> end
global function g_array_binary_search(array: *GArray, target: gconstpointer, compare_func: GCompareFunc, out_match_index: *guint): gboolean <cimport,nodecl> end
global function g_array_set_clear_func(array: *GArray, clear_func: GDestroyNotify): void <cimport,nodecl> end
global function g_ptr_array_new(): *GPtrArray <cimport,nodecl> end
global function g_ptr_array_new_with_free_func(element_free_func: GDestroyNotify): *GPtrArray <cimport,nodecl> end
global function g_ptr_array_steal(array: *GPtrArray, len: *gsize): *gpointer <cimport,nodecl> end
global function g_ptr_array_copy(array: *GPtrArray, func: GCopyFunc, user_data: gpointer): *GPtrArray <cimport,nodecl> end
global function g_ptr_array_sized_new(reserved_size: guint): *GPtrArray <cimport,nodecl> end
global function g_ptr_array_new_full(reserved_size: guint, element_free_func: GDestroyNotify): *GPtrArray <cimport,nodecl> end
global function g_ptr_array_free(array: *GPtrArray, free_seg: gboolean): *gpointer <cimport,nodecl> end
global function g_ptr_array_ref(array: *GPtrArray): *GPtrArray <cimport,nodecl> end
global function g_ptr_array_unref(array: *GPtrArray): void <cimport,nodecl> end
global function g_ptr_array_set_free_func(array: *GPtrArray, element_free_func: GDestroyNotify): void <cimport,nodecl> end
global function g_ptr_array_set_size(array: *GPtrArray, length: gint): void <cimport,nodecl> end
global function g_ptr_array_remove_index(array: *GPtrArray, index_: guint): gpointer <cimport,nodecl> end
global function g_ptr_array_remove_index_fast(array: *GPtrArray, index_: guint): gpointer <cimport,nodecl> end
global function g_ptr_array_steal_index(array: *GPtrArray, index_: guint): gpointer <cimport,nodecl> end
global function g_ptr_array_steal_index_fast(array: *GPtrArray, index_: guint): gpointer <cimport,nodecl> end
global function g_ptr_array_remove(array: *GPtrArray, data: gpointer): gboolean <cimport,nodecl> end
global function g_ptr_array_remove_fast(array: *GPtrArray, data: gpointer): gboolean <cimport,nodecl> end
global function g_ptr_array_remove_range(array: *GPtrArray, index_: guint, length: guint): *GPtrArray <cimport,nodecl> end
global function g_ptr_array_add(array: *GPtrArray, data: gpointer): void <cimport,nodecl> end
global function g_ptr_array_extend(array_to_extend: *GPtrArray, array: *GPtrArray, func: GCopyFunc, user_data: gpointer): void <cimport,nodecl> end
global function g_ptr_array_extend_and_steal(array_to_extend: *GPtrArray, array: *GPtrArray): void <cimport,nodecl> end
global function g_ptr_array_insert(array: *GPtrArray, index_: gint, data: gpointer): void <cimport,nodecl> end
global function g_ptr_array_sort(array: *GPtrArray, compare_func: GCompareFunc): void <cimport,nodecl> end
global function g_ptr_array_sort_with_data(array: *GPtrArray, compare_func: GCompareDataFunc, user_data: gpointer): void <cimport,nodecl> end
global function g_ptr_array_foreach(array: *GPtrArray, func: GFunc, user_data: gpointer): void <cimport,nodecl> end
global function g_ptr_array_find(haystack: *GPtrArray, needle: gconstpointer, index_: *guint): gboolean <cimport,nodecl> end
global function g_ptr_array_find_with_equal_func(haystack: *GPtrArray, needle: gconstpointer, equal_func: GEqualFunc, index_: *guint): gboolean <cimport,nodecl> end
global function g_byte_array_new(): *GByteArray <cimport,nodecl> end
global function g_byte_array_new_take(data: *guint8, len: gsize): *GByteArray <cimport,nodecl> end
global function g_byte_array_steal(array: *GByteArray, len: *gsize): *guint8 <cimport,nodecl> end
global function g_byte_array_sized_new(reserved_size: guint): *GByteArray <cimport,nodecl> end
global function g_byte_array_free(array: *GByteArray, free_segment: gboolean): *guint8 <cimport,nodecl> end
global function g_byte_array_free_to_bytes(array: *GByteArray): *GBytes <cimport,nodecl> end
global function g_byte_array_ref(array: *GByteArray): *GByteArray <cimport,nodecl> end
global function g_byte_array_unref(array: *GByteArray): void <cimport,nodecl> end
global function g_byte_array_append(array: *GByteArray, data: *guint8, len: guint): *GByteArray <cimport,nodecl> end
global function g_byte_array_prepend(array: *GByteArray, data: *guint8, len: guint): *GByteArray <cimport,nodecl> end
global function g_byte_array_set_size(array: *GByteArray, length: guint): *GByteArray <cimport,nodecl> end
global function g_byte_array_remove_index(array: *GByteArray, index_: guint): *GByteArray <cimport,nodecl> end
global function g_byte_array_remove_index_fast(array: *GByteArray, index_: guint): *GByteArray <cimport,nodecl> end
global function g_byte_array_remove_range(array: *GByteArray, index_: guint, length: guint): *GByteArray <cimport,nodecl> end
global function g_byte_array_sort(array: *GByteArray, compare_func: GCompareFunc): void <cimport,nodecl> end
global function g_byte_array_sort_with_data(array: *GByteArray, compare_func: GCompareDataFunc, user_data: gpointer): void <cimport,nodecl> end
global function g_atomic_int_get(atomic: *gint): gint <cimport,nodecl> end
global function g_atomic_int_set(atomic: *gint, newval: gint): void <cimport,nodecl> end
global function g_atomic_int_inc(atomic: *gint): void <cimport,nodecl> end
global function g_atomic_int_dec_and_test(atomic: *gint): gboolean <cimport,nodecl> end
global function g_atomic_int_compare_and_exchange(atomic: *gint, oldval: gint, newval: gint): gboolean <cimport,nodecl> end
global function g_atomic_int_add(atomic: *gint, val: gint): gint <cimport,nodecl> end
global function g_atomic_int_and(atomic: *guint, val: guint): guint <cimport,nodecl> end
global function g_atomic_int_or(atomic: *guint, val: guint): guint <cimport,nodecl> end
global function g_atomic_int_xor(atomic: *guint, val: guint): guint <cimport,nodecl> end
global function g_atomic_pointer_get(atomic: pointer): gpointer <cimport,nodecl> end
global function g_atomic_pointer_set(atomic: pointer, newval: gpointer): void <cimport,nodecl> end
global function g_atomic_pointer_compare_and_exchange(atomic: pointer, oldval: gpointer, newval: gpointer): gboolean <cimport,nodecl> end
global function g_atomic_pointer_add(atomic: pointer, val: gssize): gssize <cimport,nodecl> end
global function g_atomic_pointer_and(atomic: pointer, val: gsize): gsize <cimport,nodecl> end
global function g_atomic_pointer_or(atomic: pointer, val: gsize): gsize <cimport,nodecl> end
global function g_atomic_pointer_xor(atomic: pointer, val: gsize): gsize <cimport,nodecl> end
global function g_atomic_int_exchange_and_add(atomic: *gint, val: gint): gint <cimport,nodecl> end
global function g_quark_try_string(string: *gchar): GQuark <cimport,nodecl> end
global function g_quark_from_static_string(string: *gchar): GQuark <cimport,nodecl> end
global function g_quark_from_string(string: *gchar): GQuark <cimport,nodecl> end
global function g_quark_to_string(quark: GQuark): *gchar <cimport,nodecl> end
global function g_intern_string(string: *gchar): *gchar <cimport,nodecl> end
global function g_intern_static_string(string: *gchar): *gchar <cimport,nodecl> end
global function g_error_domain_register_static(error_type_name: cstring, error_type_private_size: gsize, error_type_init: GErrorInitFunc, error_type_copy: GErrorCopyFunc, error_type_clear: GErrorClearFunc): GQuark <cimport,nodecl> end
global function g_error_domain_register(error_type_name: cstring, error_type_private_size: gsize, error_type_init: GErrorInitFunc, error_type_copy: GErrorCopyFunc, error_type_clear: GErrorClearFunc): GQuark <cimport,nodecl> end
global function g_error_new(domain: GQuark, code: gint, format: *gchar, ...: cvarargs): *GError <cimport,nodecl> end
global function g_error_new_literal(domain: GQuark, code: gint, message: *gchar): *GError <cimport,nodecl> end
global function g_error_new_valist(domain: GQuark, code: gint, format: *gchar, args: cvalist): *GError <cimport,nodecl> end
global function g_error_free(error: *GError): void <cimport,nodecl> end
global function g_error_copy(error: *GError): *GError <cimport,nodecl> end
global function g_error_matches(error: *GError, domain: GQuark, code: gint): gboolean <cimport,nodecl> end
global function g_set_error(err: **GError, domain: GQuark, code: gint, format: *gchar, ...: cvarargs): void <cimport,nodecl> end
global function g_set_error_literal(err: **GError, domain: GQuark, code: gint, message: *gchar): void <cimport,nodecl> end
global function g_propagate_error(dest: **GError, src: *GError): void <cimport,nodecl> end
global function g_clear_error(err: **GError): void <cimport,nodecl> end
global function g_prefix_error(err: **GError, format: *gchar, ...: cvarargs): void <cimport,nodecl> end
global function g_prefix_error_literal(err: **GError, prefix: *gchar): void <cimport,nodecl> end
global function g_propagate_prefixed_error(dest: **GError, src: *GError, format: *gchar, ...: cvarargs): void <cimport,nodecl> end
global function g_get_user_name(): *gchar <cimport,nodecl> end
global function g_get_real_name(): *gchar <cimport,nodecl> end
global function g_get_home_dir(): *gchar <cimport,nodecl> end
global function g_get_tmp_dir(): *gchar <cimport,nodecl> end
global function g_get_host_name(): *gchar <cimport,nodecl> end
global function g_get_prgname(): *gchar <cimport,nodecl> end
global function g_set_prgname(prgname: *gchar): void <cimport,nodecl> end
global function g_get_application_name(): *gchar <cimport,nodecl> end
global function g_set_application_name(application_name: *gchar): void <cimport,nodecl> end
global function g_get_os_info(key_name: *gchar): *gchar <cimport,nodecl> end
global function g_reload_user_special_dirs_cache(): void <cimport,nodecl> end
global function g_get_user_data_dir(): *gchar <cimport,nodecl> end
global function g_get_user_config_dir(): *gchar <cimport,nodecl> end
global function g_get_user_cache_dir(): *gchar <cimport,nodecl> end
global function g_get_system_data_dirs(): **gchar <cimport,nodecl> end
global function g_get_system_config_dirs(): **gchar <cimport,nodecl> end
global function g_get_user_runtime_dir(): *gchar <cimport,nodecl> end
global function g_get_user_special_dir(directory: GUserDirectory): *gchar <cimport,nodecl> end
global function g_parse_debug_string(string: *gchar, keys: *GDebugKey, nkeys: guint): guint <cimport,nodecl> end
global function g_snprintf(string: *gchar, n: gulong, format: *gchar, ...: cvarargs): gint <cimport,nodecl> end
global function g_vsnprintf(string: *gchar, n: gulong, format: *gchar, args: cvalist): gint <cimport,nodecl> end
global function g_nullify_pointer(nullify_location: *gpointer): void <cimport,nodecl> end
global function g_format_size_full(size: guint64, flags: GFormatSizeFlags): *gchar <cimport,nodecl> end
global function g_format_size(size: guint64): *gchar <cimport,nodecl> end
global function g_format_size_for_display(size: goffset): *gchar <cimport,nodecl> end
global function g_atexit(func: GVoidFunc): void <cimport,nodecl> end
global function g_find_program_in_path(program: *gchar): *gchar <cimport,nodecl> end
global function g_bit_nth_lsf(mask: gulong, nth_bit: gint): gint <cimport,nodecl> end
global function g_bit_nth_msf(mask: gulong, nth_bit: gint): gint <cimport,nodecl> end
global function g_bit_storage(number: gulong): guint <cimport,nodecl> end
global function g_bit_nth_lsf_impl(mask: gulong, nth_bit: gint): gint <cimport,nodecl> end
global function g_bit_nth_msf_impl(mask: gulong, nth_bit: gint): gint <cimport,nodecl> end
global function g_bit_storage_impl(number: gulong): guint <cimport,nodecl> end
global function atof(nptr: cstring): float64 <cimport,nodecl> end
global function atoi(nptr: cstring): cint <cimport,nodecl> end
global function atol(nptr: cstring): clong <cimport,nodecl> end
global function atoll(nptr: cstring): clonglong <cimport,nodecl> end
global function strtod(nptr: cstring, endptr: *cstring): float64 <cimport,nodecl> end
global function strtof(nptr: cstring, endptr: *cstring): float32 <cimport,nodecl> end
global function strtold(nptr: cstring, endptr: *cstring): clongdouble <cimport,nodecl> end
global function strtol(nptr: cstring, endptr: *cstring, base: cint): clong <cimport,nodecl> end
global function strtoul(nptr: cstring, endptr: *cstring, base: cint): culong <cimport,nodecl> end
global function strtoq(nptr: cstring, endptr: *cstring, base: cint): clonglong <cimport,nodecl> end
global function strtouq(nptr: cstring, endptr: *cstring, base: cint): culonglong <cimport,nodecl> end
global function strtoll(nptr: cstring, endptr: *cstring, base: cint): clonglong <cimport,nodecl> end
global function strtoull(nptr: cstring, endptr: *cstring, base: cint): culonglong <cimport,nodecl> end
global function l64a(n: clong): cstring <cimport,nodecl> end
global function a64l(s: cstring): clong <cimport,nodecl> end
global function select(nfds: cint, readfds: *fd_set, writefds: *fd_set, exceptfds: *fd_set, timeout: *timeval): cint <cimport,nodecl> end
global function pselect(nfds: cint, readfds: *fd_set, writefds: *fd_set, exceptfds: *fd_set, timeout: *timespec, sigmask: *sigset_t): cint <cimport,nodecl> end
global function random(): clong <cimport,nodecl> end
global function srandom(seed: cuint): void <cimport,nodecl> end
global function initstate(seed: cuint, statebuf: cstring, statelen: csize): cstring <cimport,nodecl> end
global function setstate(statebuf: cstring): cstring <cimport,nodecl> end
global function random_r(buf: *random_data, result: *int32): cint <cimport,nodecl> end
global function srandom_r(seed: cuint, buf: *random_data): cint <cimport,nodecl> end
global function initstate_r(seed: cuint, statebuf: cstring, statelen: csize, buf: *random_data): cint <cimport,nodecl> end
global function setstate_r(statebuf: cstring, buf: *random_data): cint <cimport,nodecl> end
global function rand(): cint <cimport,nodecl> end
global function srand(seed: cuint): void <cimport,nodecl> end
global function rand_r(seed: *cuint): cint <cimport,nodecl> end
global function drand48(): float64 <cimport,nodecl> end
global function erand48(xsubi: *[3]cushort): float64 <cimport,nodecl> end
global function lrand48(): clong <cimport,nodecl> end
global function nrand48(xsubi: *[3]cushort): clong <cimport,nodecl> end
global function mrand48(): clong <cimport,nodecl> end
global function jrand48(xsubi: *[3]cushort): clong <cimport,nodecl> end
global function srand48(seedval: clong): void <cimport,nodecl> end
global function seed48(seed16v: *[3]cushort): *cushort <cimport,nodecl> end
global function lcong48(param: *[7]cushort): void <cimport,nodecl> end
global function drand48_r(buffer: *drand48_data, result: *float64): cint <cimport,nodecl> end
global function erand48_r(xsubi: *[3]cushort, buffer: *drand48_data, result: *float64): cint <cimport,nodecl> end
global function lrand48_r(buffer: *drand48_data, result: *clong): cint <cimport,nodecl> end
global function nrand48_r(xsubi: *[3]cushort, buffer: *drand48_data, result: *clong): cint <cimport,nodecl> end
global function mrand48_r(buffer: *drand48_data, result: *clong): cint <cimport,nodecl> end
global function jrand48_r(xsubi: *[3]cushort, buffer: *drand48_data, result: *clong): cint <cimport,nodecl> end
global function srand48_r(seedval: clong, buffer: *drand48_data): cint <cimport,nodecl> end
global function seed48_r(seed16v: *[3]cushort, buffer: *drand48_data): cint <cimport,nodecl> end
global function lcong48_r(param: *[7]cushort, buffer: *drand48_data): cint <cimport,nodecl> end
global function malloc(size: csize): pointer <cimport,nodecl> end
global function calloc(nmemb: csize, size: csize): pointer <cimport,nodecl> end
global function realloc(ptr: pointer, size: csize): pointer <cimport,nodecl> end
global function free(ptr: pointer): void <cimport,nodecl> end
global function reallocarray(ptr: pointer, nmemb: csize, size: csize): pointer <cimport,nodecl> end
global function alloca(size: csize): pointer <cimport,nodecl> end
global function valloc(size: csize): pointer <cimport,nodecl> end
global function aligned_alloc(alignment: csize, size: csize): pointer <cimport,nodecl> end
global function abort(): void <cimport,nodecl> end
global function atexit(func: function(): void): cint <cimport,nodecl> end
global function at_quick_exit(func: function(): void): cint <cimport,nodecl> end
global function on_exit(func: function(status: cint, arg: pointer): void, arg: pointer): cint <cimport,nodecl> end
global function exit(status: cint): void <cimport,nodecl> end
global function quick_exit(status: cint): void <cimport,nodecl> end
global function _Exit(status: cint): void <cimport,nodecl> end
global function getenv(name: cstring): cstring <cimport,nodecl> end
global function putenv(string: cstring): cint <cimport,nodecl> end
global function setenv(name: cstring, value: cstring, replace: cint): cint <cimport,nodecl> end
global function unsetenv(name: cstring): cint <cimport,nodecl> end
global function clearenv(): cint <cimport,nodecl> end
global function mktemp(template: cstring): cstring <cimport,nodecl> end
global function mkstemp(template: cstring): cint <cimport,nodecl> end
global function mkstemps(template: cstring, suffixlen: cint): cint <cimport,nodecl> end
global function mkdtemp(template: cstring): cstring <cimport,nodecl> end
global function system(command: cstring): cint <cimport,nodecl> end
global function realpath(name: cstring, resolved: cstring): cstring <cimport,nodecl> end
global function bsearch(key: pointer, base: pointer, nmemb: csize, size: csize, compar: function(a1: pointer, a2: pointer): cint): pointer <cimport,nodecl> end
global function qsort(base: pointer, nmemb: csize, size: csize, compar: function(a1: pointer, a2: pointer): cint): void <cimport,nodecl> end
global function abs(x: cint): cint <cimport,nodecl> end
global function labs(x: clong): clong <cimport,nodecl> end
global function llabs(x: clonglong): clonglong <cimport,nodecl> end
global function div(numer: cint, denom: cint): div_t <cimport,nodecl> end
global function ldiv(numer: clong, denom: clong): ldiv_t <cimport,nodecl> end
global function lldiv(numer: clonglong, denom: clonglong): lldiv_t <cimport,nodecl> end
global function ecvt(value: float64, ndigit: cint, decpt: *cint, sign: *cint): cstring <cimport,nodecl> end
global function fcvt(value: float64, ndigit: cint, decpt: *cint, sign: *cint): cstring <cimport,nodecl> end
global function gcvt(value: float64, ndigit: cint, buf: cstring): cstring <cimport,nodecl> end
global function qecvt(value: clongdouble, ndigit: cint, decpt: *cint, sign: *cint): cstring <cimport,nodecl> end
global function qfcvt(value: clongdouble, ndigit: cint, decpt: *cint, sign: *cint): cstring <cimport,nodecl> end
global function qgcvt(value: clongdouble, ndigit: cint, buf: cstring): cstring <cimport,nodecl> end
global function ecvt_r(value: float64, ndigit: cint, decpt: *cint, sign: *cint, buf: cstring, len: csize): cint <cimport,nodecl> end
global function fcvt_r(value: float64, ndigit: cint, decpt: *cint, sign: *cint, buf: cstring, len: csize): cint <cimport,nodecl> end
global function qecvt_r(value: clongdouble, ndigit: cint, decpt: *cint, sign: *cint, buf: cstring, len: csize): cint <cimport,nodecl> end
global function qfcvt_r(value: clongdouble, ndigit: cint, decpt: *cint, sign: *cint, buf: cstring, len: csize): cint <cimport,nodecl> end
global function mblen(s: cstring, n: csize): cint <cimport,nodecl> end
global function mbtowc(pwc: *cwchar_t, s: cstring, n: csize): cint <cimport,nodecl> end
global function wctomb(s: cstring, wchar: cwchar_t): cint <cimport,nodecl> end
global function mbstowcs(pwcs: *cwchar_t, s: cstring, n: csize): csize <cimport,nodecl> end
global function wcstombs(s: cstring, pwcs: *cwchar_t, n: csize): csize <cimport,nodecl> end
global function rpmatch(response: cstring): cint <cimport,nodecl> end
global function getsubopt(optionp: *cstring, tokens: *cstring, valuep: *cstring): cint <cimport,nodecl> end
global function getloadavg(loadavg: *[0]float64, nelem: cint): cint <cimport,nodecl> end
global function g_thread_error_quark(): GQuark <cimport,nodecl> end
global function g_thread_ref(thread: *GThread): *GThread <cimport,nodecl> end
global function g_thread_unref(thread: *GThread): void <cimport,nodecl> end
global function g_thread_new(name: *gchar, func: GThreadFunc, data: gpointer): *GThread <cimport,nodecl> end
global function g_thread_try_new(name: *gchar, func: GThreadFunc, data: gpointer, error: **GError): *GThread <cimport,nodecl> end
global function g_thread_self(): *GThread <cimport,nodecl> end
global function g_thread_exit(retval: gpointer): void <cimport,nodecl> end
global function g_thread_join(thread: *GThread): gpointer <cimport,nodecl> end
global function g_thread_yield(): void <cimport,nodecl> end
global function g_mutex_init(mutex: *GMutex): void <cimport,nodecl> end
global function g_mutex_clear(mutex: *GMutex): void <cimport,nodecl> end
global function g_mutex_lock(mutex: *GMutex): void <cimport,nodecl> end
global function g_mutex_trylock(mutex: *GMutex): gboolean <cimport,nodecl> end
global function g_mutex_unlock(mutex: *GMutex): void <cimport,nodecl> end
global function g_rw_lock_init(rw_lock: *GRWLock): void <cimport,nodecl> end
global function g_rw_lock_clear(rw_lock: *GRWLock): void <cimport,nodecl> end
global function g_rw_lock_writer_lock(rw_lock: *GRWLock): void <cimport,nodecl> end
global function g_rw_lock_writer_trylock(rw_lock: *GRWLock): gboolean <cimport,nodecl> end
global function g_rw_lock_writer_unlock(rw_lock: *GRWLock): void <cimport,nodecl> end
global function g_rw_lock_reader_lock(rw_lock: *GRWLock): void <cimport,nodecl> end
global function g_rw_lock_reader_trylock(rw_lock: *GRWLock): gboolean <cimport,nodecl> end
global function g_rw_lock_reader_unlock(rw_lock: *GRWLock): void <cimport,nodecl> end
global function g_rec_mutex_init(rec_mutex: *GRecMutex): void <cimport,nodecl> end
global function g_rec_mutex_clear(rec_mutex: *GRecMutex): void <cimport,nodecl> end
global function g_rec_mutex_lock(rec_mutex: *GRecMutex): void <cimport,nodecl> end
global function g_rec_mutex_trylock(rec_mutex: *GRecMutex): gboolean <cimport,nodecl> end
global function g_rec_mutex_unlock(rec_mutex: *GRecMutex): void <cimport,nodecl> end
global function g_cond_init(cond: *GCond): void <cimport,nodecl> end
global function g_cond_clear(cond: *GCond): void <cimport,nodecl> end
global function g_cond_wait(cond: *GCond, mutex: *GMutex): void <cimport,nodecl> end
global function g_cond_signal(cond: *GCond): void <cimport,nodecl> end
global function g_cond_broadcast(cond: *GCond): void <cimport,nodecl> end
global function g_cond_wait_until(cond: *GCond, mutex: *GMutex, end_time: gint64): gboolean <cimport,nodecl> end
global function g_private_get(key: *GPrivate): gpointer <cimport,nodecl> end
global function g_private_set(key: *GPrivate, value: gpointer): void <cimport,nodecl> end
global function g_private_replace(key: *GPrivate, value: gpointer): void <cimport,nodecl> end
global function g_once_impl(once: *GOnce, func: GThreadFunc, arg: gpointer): gpointer <cimport,nodecl> end
global function g_once_init_enter(location: pointer): gboolean <cimport,nodecl> end
global function g_once_init_leave(location: pointer, result: gsize): void <cimport,nodecl> end
global function g_get_num_processors(): guint <cimport,nodecl> end
global function g_mutex_locker_new(mutex: *GMutex): *GMutexLocker <cimport,nodecl> end
global function g_mutex_locker_free(locker: *GMutexLocker): void <cimport,nodecl> end
global function g_rec_mutex_locker_new(rec_mutex: *GRecMutex): *GRecMutexLocker <cimport,nodecl> end
global function g_rec_mutex_locker_free(locker: *GRecMutexLocker): void <cimport,nodecl> end
global function g_rw_lock_writer_locker_new(rw_lock: *GRWLock): *GRWLockWriterLocker <cimport,nodecl> end
global function g_rw_lock_writer_locker_free(locker: *GRWLockWriterLocker): void <cimport,nodecl> end
global function g_rw_lock_reader_locker_new(rw_lock: *GRWLock): *GRWLockReaderLocker <cimport,nodecl> end
global function g_rw_lock_reader_locker_free(locker: *GRWLockReaderLocker): void <cimport,nodecl> end
global function g_async_queue_new(): *GAsyncQueue <cimport,nodecl> end
global function g_async_queue_new_full(item_free_func: GDestroyNotify): *GAsyncQueue <cimport,nodecl> end
global function g_async_queue_lock(queue: *GAsyncQueue): void <cimport,nodecl> end
global function g_async_queue_unlock(queue: *GAsyncQueue): void <cimport,nodecl> end
global function g_async_queue_ref(queue: *GAsyncQueue): *GAsyncQueue <cimport,nodecl> end
global function g_async_queue_unref(queue: *GAsyncQueue): void <cimport,nodecl> end
global function g_async_queue_ref_unlocked(queue: *GAsyncQueue): void <cimport,nodecl> end
global function g_async_queue_unref_and_unlock(queue: *GAsyncQueue): void <cimport,nodecl> end
global function g_async_queue_push(queue: *GAsyncQueue, data: gpointer): void <cimport,nodecl> end
global function g_async_queue_push_unlocked(queue: *GAsyncQueue, data: gpointer): void <cimport,nodecl> end
global function g_async_queue_push_sorted(queue: *GAsyncQueue, data: gpointer, func: GCompareDataFunc, user_data: gpointer): void <cimport,nodecl> end
global function g_async_queue_push_sorted_unlocked(queue: *GAsyncQueue, data: gpointer, func: GCompareDataFunc, user_data: gpointer): void <cimport,nodecl> end
global function g_async_queue_pop(queue: *GAsyncQueue): gpointer <cimport,nodecl> end
global function g_async_queue_pop_unlocked(queue: *GAsyncQueue): gpointer <cimport,nodecl> end
global function g_async_queue_try_pop(queue: *GAsyncQueue): gpointer <cimport,nodecl> end
global function g_async_queue_try_pop_unlocked(queue: *GAsyncQueue): gpointer <cimport,nodecl> end
global function g_async_queue_timeout_pop(queue: *GAsyncQueue, timeout: guint64): gpointer <cimport,nodecl> end
global function g_async_queue_timeout_pop_unlocked(queue: *GAsyncQueue, timeout: guint64): gpointer <cimport,nodecl> end
global function g_async_queue_length(queue: *GAsyncQueue): gint <cimport,nodecl> end
global function g_async_queue_length_unlocked(queue: *GAsyncQueue): gint <cimport,nodecl> end
global function g_async_queue_sort(queue: *GAsyncQueue, func: GCompareDataFunc, user_data: gpointer): void <cimport,nodecl> end
global function g_async_queue_sort_unlocked(queue: *GAsyncQueue, func: GCompareDataFunc, user_data: gpointer): void <cimport,nodecl> end
global function g_async_queue_remove(queue: *GAsyncQueue, item: gpointer): gboolean <cimport,nodecl> end
global function g_async_queue_remove_unlocked(queue: *GAsyncQueue, item: gpointer): gboolean <cimport,nodecl> end
global function g_async_queue_push_front(queue: *GAsyncQueue, item: gpointer): void <cimport,nodecl> end
global function g_async_queue_push_front_unlocked(queue: *GAsyncQueue, item: gpointer): void <cimport,nodecl> end
global function g_async_queue_timed_pop(queue: *GAsyncQueue, end_time: *GTimeVal): gpointer <cimport,nodecl> end
global function g_async_queue_timed_pop_unlocked(queue: *GAsyncQueue, end_time: *GTimeVal): gpointer <cimport,nodecl> end
global function signal(sig: cint, handler: function(a1: cint): void): function(a1: cint): void <cimport,nodecl> end
global function kill(pid: cint, sig: cint): cint <cimport,nodecl> end
global function killpg(pgrp: cint, sig: cint): cint <cimport,nodecl> end
global function raise(sig: cint): cint <cimport,nodecl> end
global function ssignal(sig: cint, handler: function(a1: cint): void): function(a1: cint): void <cimport,nodecl> end
global function gsignal(sig: cint): cint <cimport,nodecl> end
global function psignal(sig: cint, s: cstring): void <cimport,nodecl> end
global function psiginfo(pinfo: *siginfo_t, s: cstring): void <cimport,nodecl> end
global function sigblock(mask: cint): cint <cimport,nodecl> end
global function sigsetmask(mask: cint): cint <cimport,nodecl> end
global function siggetmask(): cint <cimport,nodecl> end
global function sigemptyset(set: *sigset_t): cint <cimport,nodecl> end
global function sigfillset(set: *sigset_t): cint <cimport,nodecl> end
global function sigaddset(set: *sigset_t, signo: cint): cint <cimport,nodecl> end
global function sigdelset(set: *sigset_t, signo: cint): cint <cimport,nodecl> end
global function sigismember(set: *sigset_t, signo: cint): cint <cimport,nodecl> end
global function sigprocmask(how: cint, set: *sigset_t, oset: *sigset_t): cint <cimport,nodecl> end
global function sigsuspend(set: *sigset_t): cint <cimport,nodecl> end
global function sigaction(sig: cint, act: *sigaction_t, oact: *sigaction_t): cint <cimport,nodecl> end
global function sigpending(set: *sigset_t): cint <cimport,nodecl> end
global function sigwait(set: *sigset_t, sig: *cint): cint <cimport,nodecl> end
global function sigwaitinfo(set: *sigset_t, info: *siginfo_t): cint <cimport,nodecl> end
global function sigtimedwait(set: *sigset_t, info: *siginfo_t, timeout: *timespec): cint <cimport,nodecl> end
global function sigqueue(pid: cint, sig: cint, val: sigval_t): cint <cimport,nodecl> end
global function sigreturn(scp: *sigcontext): cint <cimport,nodecl> end
global function siginterrupt(sig: cint, interrupt: cint): cint <cimport,nodecl> end
global function sigaltstack(ss: *stack_t, oss: *stack_t): cint <cimport,nodecl> end
global function sigstack(ss: *sigstack_t, oss: *sigstack_t): cint <cimport,nodecl> end
global function pthread_sigmask(how: cint, newmask: *sigset_t, oldmask: *sigset_t): cint <cimport,nodecl> end
global function pthread_kill(threadid: pthread_t, signo: cint): cint <cimport,nodecl> end
global function g_on_error_query(prg_name: *gchar): void <cimport,nodecl> end
global function g_on_error_stack_trace(prg_name: *gchar): void <cimport,nodecl> end
global function g_base64_encode_step(in_: *guchar, len: gsize, break_lines: gboolean, out: *gchar, state: *gint, save: *gint): gsize <cimport,nodecl> end
global function g_base64_encode_close(break_lines: gboolean, out: *gchar, state: *gint, save: *gint): gsize <cimport,nodecl> end
global function g_base64_encode(data: *guchar, len: gsize): *gchar <cimport,nodecl> end
global function g_base64_decode_step(in_: *gchar, len: gsize, out: *guchar, state: *gint, save: *guint): gsize <cimport,nodecl> end
global function g_base64_decode(text: *gchar, out_len: *gsize): *guchar <cimport,nodecl> end
global function g_base64_decode_inplace(text: *gchar, out_len: *gsize): *guchar <cimport,nodecl> end
global function g_bit_lock(address: *gint, lock_bit: gint): void <cimport,nodecl> end
global function g_bit_trylock(address: *gint, lock_bit: gint): gboolean <cimport,nodecl> end
global function g_bit_unlock(address: *gint, lock_bit: gint): void <cimport,nodecl> end
global function g_pointer_bit_lock(address: pointer, lock_bit: gint): void <cimport,nodecl> end
global function g_pointer_bit_trylock(address: pointer, lock_bit: gint): gboolean <cimport,nodecl> end
global function g_pointer_bit_unlock(address: pointer, lock_bit: gint): void <cimport,nodecl> end
global function g_time_zone_new(identifier: *gchar): *GTimeZone <cimport,nodecl> end
global function g_time_zone_new_identifier(identifier: *gchar): *GTimeZone <cimport,nodecl> end
global function g_time_zone_new_utc(): *GTimeZone <cimport,nodecl> end
global function g_time_zone_new_local(): *GTimeZone <cimport,nodecl> end
global function g_time_zone_new_offset(seconds: gint32): *GTimeZone <cimport,nodecl> end
global function g_time_zone_ref(tz: *GTimeZone): *GTimeZone <cimport,nodecl> end
global function g_time_zone_unref(tz: *GTimeZone): void <cimport,nodecl> end
global function g_time_zone_find_interval(tz: *GTimeZone, type: GTimeType, time_: gint64): gint <cimport,nodecl> end
global function g_time_zone_adjust_time(tz: *GTimeZone, type: GTimeType, time_: *gint64): gint <cimport,nodecl> end
global function g_time_zone_get_abbreviation(tz: *GTimeZone, interval: gint): *gchar <cimport,nodecl> end
global function g_time_zone_get_offset(tz: *GTimeZone, interval: gint): gint32 <cimport,nodecl> end
global function g_time_zone_is_dst(tz: *GTimeZone, interval: gint): gboolean <cimport,nodecl> end
global function g_time_zone_get_identifier(tz: *GTimeZone): *gchar <cimport,nodecl> end
global function g_date_time_unref(datetime: *GDateTime): void <cimport,nodecl> end
global function g_date_time_ref(datetime: *GDateTime): *GDateTime <cimport,nodecl> end
global function g_date_time_new_now(tz: *GTimeZone): *GDateTime <cimport,nodecl> end
global function g_date_time_new_now_local(): *GDateTime <cimport,nodecl> end
global function g_date_time_new_now_utc(): *GDateTime <cimport,nodecl> end
global function g_date_time_new_from_unix_local(t: gint64): *GDateTime <cimport,nodecl> end
global function g_date_time_new_from_unix_utc(t: gint64): *GDateTime <cimport,nodecl> end
global function g_date_time_new_from_timeval_local(tv: *GTimeVal): *GDateTime <cimport,nodecl> end
global function g_date_time_new_from_timeval_utc(tv: *GTimeVal): *GDateTime <cimport,nodecl> end
global function g_date_time_new_from_iso8601(text: *gchar, default_tz: *GTimeZone): *GDateTime <cimport,nodecl> end
global function g_date_time_new(tz: *GTimeZone, year: gint, month: gint, day: gint, hour: gint, minute: gint, seconds: gdouble): *GDateTime <cimport,nodecl> end
global function g_date_time_new_local(year: gint, month: gint, day: gint, hour: gint, minute: gint, seconds: gdouble): *GDateTime <cimport,nodecl> end
global function g_date_time_new_utc(year: gint, month: gint, day: gint, hour: gint, minute: gint, seconds: gdouble): *GDateTime <cimport,nodecl> end
global function g_date_time_add(datetime: *GDateTime, timespan: GTimeSpan): *GDateTime <cimport,nodecl> end
global function g_date_time_add_years(datetime: *GDateTime, years: gint): *GDateTime <cimport,nodecl> end
global function g_date_time_add_months(datetime: *GDateTime, months: gint): *GDateTime <cimport,nodecl> end
global function g_date_time_add_weeks(datetime: *GDateTime, weeks: gint): *GDateTime <cimport,nodecl> end
global function g_date_time_add_days(datetime: *GDateTime, days: gint): *GDateTime <cimport,nodecl> end
global function g_date_time_add_hours(datetime: *GDateTime, hours: gint): *GDateTime <cimport,nodecl> end
global function g_date_time_add_minutes(datetime: *GDateTime, minutes: gint): *GDateTime <cimport,nodecl> end
global function g_date_time_add_seconds(datetime: *GDateTime, seconds: gdouble): *GDateTime <cimport,nodecl> end
global function g_date_time_add_full(datetime: *GDateTime, years: gint, months: gint, days: gint, hours: gint, minutes: gint, seconds: gdouble): *GDateTime <cimport,nodecl> end
global function g_date_time_compare(dt1: gconstpointer, dt2: gconstpointer): gint <cimport,nodecl> end
global function g_date_time_difference(end_: *GDateTime, begin: *GDateTime): GTimeSpan <cimport,nodecl> end
global function g_date_time_hash(datetime: gconstpointer): guint <cimport,nodecl> end
global function g_date_time_equal(dt1: gconstpointer, dt2: gconstpointer): gboolean <cimport,nodecl> end
global function g_date_time_get_ymd(datetime: *GDateTime, year: *gint, month: *gint, day: *gint): void <cimport,nodecl> end
global function g_date_time_get_year(datetime: *GDateTime): gint <cimport,nodecl> end
global function g_date_time_get_month(datetime: *GDateTime): gint <cimport,nodecl> end
global function g_date_time_get_day_of_month(datetime: *GDateTime): gint <cimport,nodecl> end
global function g_date_time_get_week_numbering_year(datetime: *GDateTime): gint <cimport,nodecl> end
global function g_date_time_get_week_of_year(datetime: *GDateTime): gint <cimport,nodecl> end
global function g_date_time_get_day_of_week(datetime: *GDateTime): gint <cimport,nodecl> end
global function g_date_time_get_day_of_year(datetime: *GDateTime): gint <cimport,nodecl> end
global function g_date_time_get_hour(datetime: *GDateTime): gint <cimport,nodecl> end
global function g_date_time_get_minute(datetime: *GDateTime): gint <cimport,nodecl> end
global function g_date_time_get_second(datetime: *GDateTime): gint <cimport,nodecl> end
global function g_date_time_get_microsecond(datetime: *GDateTime): gint <cimport,nodecl> end
global function g_date_time_get_seconds(datetime: *GDateTime): gdouble <cimport,nodecl> end
global function g_date_time_to_unix(datetime: *GDateTime): gint64 <cimport,nodecl> end
global function g_date_time_to_timeval(datetime: *GDateTime, tv: *GTimeVal): gboolean <cimport,nodecl> end
global function g_date_time_get_utc_offset(datetime: *GDateTime): GTimeSpan <cimport,nodecl> end
global function g_date_time_get_timezone(datetime: *GDateTime): *GTimeZone <cimport,nodecl> end
global function g_date_time_get_timezone_abbreviation(datetime: *GDateTime): *gchar <cimport,nodecl> end
global function g_date_time_is_daylight_savings(datetime: *GDateTime): gboolean <cimport,nodecl> end
global function g_date_time_to_timezone(datetime: *GDateTime, tz: *GTimeZone): *GDateTime <cimport,nodecl> end
global function g_date_time_to_local(datetime: *GDateTime): *GDateTime <cimport,nodecl> end
global function g_date_time_to_utc(datetime: *GDateTime): *GDateTime <cimport,nodecl> end
global function g_date_time_format(datetime: *GDateTime, format: *gchar): *gchar <cimport,nodecl> end
global function g_date_time_format_iso8601(datetime: *GDateTime): *gchar <cimport,nodecl> end
global function g_bookmark_file_error_quark(): GQuark <cimport,nodecl> end
global function g_bookmark_file_new(): *GBookmarkFile <cimport,nodecl> end
global function g_bookmark_file_free(bookmark: *GBookmarkFile): void <cimport,nodecl> end
global function g_bookmark_file_load_from_file(bookmark: *GBookmarkFile, filename: *gchar, error: **GError): gboolean <cimport,nodecl> end
global function g_bookmark_file_load_from_data(bookmark: *GBookmarkFile, data: *gchar, length: gsize, error: **GError): gboolean <cimport,nodecl> end
global function g_bookmark_file_load_from_data_dirs(bookmark: *GBookmarkFile, file: *gchar, full_path: **gchar, error: **GError): gboolean <cimport,nodecl> end
global function g_bookmark_file_to_data(bookmark: *GBookmarkFile, length: *gsize, error: **GError): *gchar <cimport,nodecl> end
global function g_bookmark_file_to_file(bookmark: *GBookmarkFile, filename: *gchar, error: **GError): gboolean <cimport,nodecl> end
global function g_bookmark_file_set_title(bookmark: *GBookmarkFile, uri: *gchar, title: *gchar): void <cimport,nodecl> end
global function g_bookmark_file_get_title(bookmark: *GBookmarkFile, uri: *gchar, error: **GError): *gchar <cimport,nodecl> end
global function g_bookmark_file_set_description(bookmark: *GBookmarkFile, uri: *gchar, description: *gchar): void <cimport,nodecl> end
global function g_bookmark_file_get_description(bookmark: *GBookmarkFile, uri: *gchar, error: **GError): *gchar <cimport,nodecl> end
global function g_bookmark_file_set_mime_type(bookmark: *GBookmarkFile, uri: *gchar, mime_type: *gchar): void <cimport,nodecl> end
global function g_bookmark_file_get_mime_type(bookmark: *GBookmarkFile, uri: *gchar, error: **GError): *gchar <cimport,nodecl> end
global function g_bookmark_file_set_groups(bookmark: *GBookmarkFile, uri: *gchar, groups: **gchar, length: gsize): void <cimport,nodecl> end
global function g_bookmark_file_add_group(bookmark: *GBookmarkFile, uri: *gchar, group: *gchar): void <cimport,nodecl> end
global function g_bookmark_file_has_group(bookmark: *GBookmarkFile, uri: *gchar, group: *gchar, error: **GError): gboolean <cimport,nodecl> end
global function g_bookmark_file_get_groups(bookmark: *GBookmarkFile, uri: *gchar, length: *gsize, error: **GError): **gchar <cimport,nodecl> end
global function g_bookmark_file_add_application(bookmark: *GBookmarkFile, uri: *gchar, name: *gchar, exec: *gchar): void <cimport,nodecl> end
global function g_bookmark_file_has_application(bookmark: *GBookmarkFile, uri: *gchar, name: *gchar, error: **GError): gboolean <cimport,nodecl> end
global function g_bookmark_file_get_applications(bookmark: *GBookmarkFile, uri: *gchar, length: *gsize, error: **GError): **gchar <cimport,nodecl> end
global function g_bookmark_file_set_app_info(bookmark: *GBookmarkFile, uri: *gchar, name: *gchar, exec: *gchar, count: gint, stamp: ctime_t, error: **GError): gboolean <cimport,nodecl> end
global function g_bookmark_file_set_application_info(bookmark: *GBookmarkFile, uri: cstring, name: cstring, exec: cstring, count: cint, stamp: *GDateTime, error: **GError): gboolean <cimport,nodecl> end
global function g_bookmark_file_get_app_info(bookmark: *GBookmarkFile, uri: *gchar, name: *gchar, exec: **gchar, count: *guint, stamp: *ctime_t, error: **GError): gboolean <cimport,nodecl> end
global function g_bookmark_file_get_application_info(bookmark: *GBookmarkFile, uri: cstring, name: cstring, exec: *cstring, count: *cuint, stamp: **GDateTime, error: **GError): gboolean <cimport,nodecl> end
global function g_bookmark_file_set_is_private(bookmark: *GBookmarkFile, uri: *gchar, is_private: gboolean): void <cimport,nodecl> end
global function g_bookmark_file_get_is_private(bookmark: *GBookmarkFile, uri: *gchar, error: **GError): gboolean <cimport,nodecl> end
global function g_bookmark_file_set_icon(bookmark: *GBookmarkFile, uri: *gchar, href: *gchar, mime_type: *gchar): void <cimport,nodecl> end
global function g_bookmark_file_get_icon(bookmark: *GBookmarkFile, uri: *gchar, href: **gchar, mime_type: **gchar, error: **GError): gboolean <cimport,nodecl> end
global function g_bookmark_file_set_added(bookmark: *GBookmarkFile, uri: *gchar, added: ctime_t): void <cimport,nodecl> end
global function g_bookmark_file_set_added_date_time(bookmark: *GBookmarkFile, uri: cstring, added: *GDateTime): void <cimport,nodecl> end
global function g_bookmark_file_get_added(bookmark: *GBookmarkFile, uri: *gchar, error: **GError): ctime_t <cimport,nodecl> end
global function g_bookmark_file_get_added_date_time(bookmark: *GBookmarkFile, uri: cstring, error: **GError): *GDateTime <cimport,nodecl> end
global function g_bookmark_file_set_modified(bookmark: *GBookmarkFile, uri: *gchar, modified: ctime_t): void <cimport,nodecl> end
global function g_bookmark_file_set_modified_date_time(bookmark: *GBookmarkFile, uri: cstring, modified: *GDateTime): void <cimport,nodecl> end
global function g_bookmark_file_get_modified(bookmark: *GBookmarkFile, uri: *gchar, error: **GError): ctime_t <cimport,nodecl> end
global function g_bookmark_file_get_modified_date_time(bookmark: *GBookmarkFile, uri: cstring, error: **GError): *GDateTime <cimport,nodecl> end
global function g_bookmark_file_set_visited(bookmark: *GBookmarkFile, uri: *gchar, visited: ctime_t): void <cimport,nodecl> end
global function g_bookmark_file_set_visited_date_time(bookmark: *GBookmarkFile, uri: cstring, visited: *GDateTime): void <cimport,nodecl> end
global function g_bookmark_file_get_visited(bookmark: *GBookmarkFile, uri: *gchar, error: **GError): ctime_t <cimport,nodecl> end
global function g_bookmark_file_get_visited_date_time(bookmark: *GBookmarkFile, uri: cstring, error: **GError): *GDateTime <cimport,nodecl> end
global function g_bookmark_file_has_item(bookmark: *GBookmarkFile, uri: *gchar): gboolean <cimport,nodecl> end
global function g_bookmark_file_get_size(bookmark: *GBookmarkFile): gint <cimport,nodecl> end
global function g_bookmark_file_get_uris(bookmark: *GBookmarkFile, length: *gsize): **gchar <cimport,nodecl> end
global function g_bookmark_file_remove_group(bookmark: *GBookmarkFile, uri: *gchar, group: *gchar, error: **GError): gboolean <cimport,nodecl> end
global function g_bookmark_file_remove_application(bookmark: *GBookmarkFile, uri: *gchar, name: *gchar, error: **GError): gboolean <cimport,nodecl> end
global function g_bookmark_file_remove_item(bookmark: *GBookmarkFile, uri: *gchar, error: **GError): gboolean <cimport,nodecl> end
global function g_bookmark_file_move_item(bookmark: *GBookmarkFile, old_uri: *gchar, new_uri: *gchar, error: **GError): gboolean <cimport,nodecl> end
global function g_bytes_new(data: gconstpointer, size: gsize): *GBytes <cimport,nodecl> end
global function g_bytes_new_take(data: gpointer, size: gsize): *GBytes <cimport,nodecl> end
global function g_bytes_new_static(data: gconstpointer, size: gsize): *GBytes <cimport,nodecl> end
global function g_bytes_new_with_free_func(data: gconstpointer, size: gsize, free_func: GDestroyNotify, user_data: gpointer): *GBytes <cimport,nodecl> end
global function g_bytes_new_from_bytes(bytes: *GBytes, offset: gsize, length: gsize): *GBytes <cimport,nodecl> end
global function g_bytes_get_data(bytes: *GBytes, size: *gsize): gconstpointer <cimport,nodecl> end
global function g_bytes_get_size(bytes: *GBytes): gsize <cimport,nodecl> end
global function g_bytes_ref(bytes: *GBytes): *GBytes <cimport,nodecl> end
global function g_bytes_unref(bytes: *GBytes): void <cimport,nodecl> end
global function g_bytes_unref_to_data(bytes: *GBytes, size: *gsize): gpointer <cimport,nodecl> end
global function g_bytes_unref_to_array(bytes: *GBytes): *GByteArray <cimport,nodecl> end
global function g_bytes_hash(bytes: gconstpointer): guint <cimport,nodecl> end
global function g_bytes_equal(bytes1: gconstpointer, bytes2: gconstpointer): gboolean <cimport,nodecl> end
global function g_bytes_compare(bytes1: gconstpointer, bytes2: gconstpointer): gint <cimport,nodecl> end
global function g_bytes_get_region(bytes: *GBytes, element_size: gsize, offset: gsize, n_elements: gsize): gconstpointer <cimport,nodecl> end
global function g_get_charset(charset: *cstring): gboolean <cimport,nodecl> end
global function g_get_codeset(): *gchar <cimport,nodecl> end
global function g_get_console_charset(charset: *cstring): gboolean <cimport,nodecl> end
global function g_get_language_names(): **gchar <cimport,nodecl> end
global function g_get_language_names_with_category(category_name: *gchar): **gchar <cimport,nodecl> end
global function g_get_locale_variants(locale: *gchar): **gchar <cimport,nodecl> end
global function g_checksum_type_get_length(checksum_type: GChecksumType): gssize <cimport,nodecl> end
global function g_checksum_new(checksum_type: GChecksumType): *GChecksum <cimport,nodecl> end
global function g_checksum_reset(checksum: *GChecksum): void <cimport,nodecl> end
global function g_checksum_copy(checksum: *GChecksum): *GChecksum <cimport,nodecl> end
global function g_checksum_free(checksum: *GChecksum): void <cimport,nodecl> end
global function g_checksum_update(checksum: *GChecksum, data: *guchar, length: gssize): void <cimport,nodecl> end
global function g_checksum_get_string(checksum: *GChecksum): *gchar <cimport,nodecl> end
global function g_checksum_get_digest(checksum: *GChecksum, buffer: *guint8, digest_len: *gsize): void <cimport,nodecl> end
global function g_compute_checksum_for_data(checksum_type: GChecksumType, data: *guchar, length: gsize): *gchar <cimport,nodecl> end
global function g_compute_checksum_for_string(checksum_type: GChecksumType, str: *gchar, length: gssize): *gchar <cimport,nodecl> end
global function g_compute_checksum_for_bytes(checksum_type: GChecksumType, data: *GBytes): *gchar <cimport,nodecl> end
global function g_convert_error_quark(): GQuark <cimport,nodecl> end
global function g_iconv_open(to_codeset: *gchar, from_codeset: *gchar): GIConv <cimport,nodecl> end
global function g_iconv(converter: GIConv, inbuf: **gchar, inbytes_left: *gsize, outbuf: **gchar, outbytes_left: *gsize): gsize <cimport,nodecl> end
global function g_iconv_close(converter: GIConv): gint <cimport,nodecl> end
global function g_convert(str: *gchar, len: gssize, to_codeset: *gchar, from_codeset: *gchar, bytes_read: *gsize, bytes_written: *gsize, error: **GError): *gchar <cimport,nodecl> end
global function g_convert_with_iconv(str: *gchar, len: gssize, converter: GIConv, bytes_read: *gsize, bytes_written: *gsize, error: **GError): *gchar <cimport,nodecl> end
global function g_convert_with_fallback(str: *gchar, len: gssize, to_codeset: *gchar, from_codeset: *gchar, fallback: *gchar, bytes_read: *gsize, bytes_written: *gsize, error: **GError): *gchar <cimport,nodecl> end
global function g_locale_to_utf8(opsysstring: *gchar, len: gssize, bytes_read: *gsize, bytes_written: *gsize, error: **GError): *gchar <cimport,nodecl> end
global function g_locale_from_utf8(utf8string: *gchar, len: gssize, bytes_read: *gsize, bytes_written: *gsize, error: **GError): *gchar <cimport,nodecl> end
global function g_filename_to_utf8(opsysstring: *gchar, len: gssize, bytes_read: *gsize, bytes_written: *gsize, error: **GError): *gchar <cimport,nodecl> end
global function g_filename_from_utf8(utf8string: *gchar, len: gssize, bytes_read: *gsize, bytes_written: *gsize, error: **GError): *gchar <cimport,nodecl> end
global function g_filename_from_uri(uri: *gchar, hostname: **gchar, error: **GError): *gchar <cimport,nodecl> end
global function g_filename_to_uri(filename: *gchar, hostname: *gchar, error: **GError): *gchar <cimport,nodecl> end
global function g_filename_display_name(filename: *gchar): *gchar <cimport,nodecl> end
global function g_get_filename_charsets(filename_charsets: ***gchar): gboolean <cimport,nodecl> end
global function g_filename_display_basename(filename: *gchar): *gchar <cimport,nodecl> end
global function g_uri_list_extract_uris(uri_list: *gchar): **gchar <cimport,nodecl> end
global function g_datalist_init(datalist: **GData): void <cimport,nodecl> end
global function g_datalist_clear(datalist: **GData): void <cimport,nodecl> end
global function g_datalist_id_get_data(datalist: **GData, key_id: GQuark): gpointer <cimport,nodecl> end
global function g_datalist_id_set_data_full(datalist: **GData, key_id: GQuark, data: gpointer, destroy_func: GDestroyNotify): void <cimport,nodecl> end
global function g_datalist_id_dup_data(datalist: **GData, key_id: GQuark, dup_func: GDuplicateFunc, user_data: gpointer): gpointer <cimport,nodecl> end
global function g_datalist_id_replace_data(datalist: **GData, key_id: GQuark, oldval: gpointer, newval: gpointer, destroy: GDestroyNotify, old_destroy: *GDestroyNotify): gboolean <cimport,nodecl> end
global function g_datalist_id_remove_no_notify(datalist: **GData, key_id: GQuark): gpointer <cimport,nodecl> end
global function g_datalist_foreach(datalist: **GData, func: GDataForeachFunc, user_data: gpointer): void <cimport,nodecl> end
global function g_datalist_set_flags(datalist: **GData, flags: guint): void <cimport,nodecl> end
global function g_datalist_unset_flags(datalist: **GData, flags: guint): void <cimport,nodecl> end
global function g_datalist_get_flags(datalist: **GData): guint <cimport,nodecl> end
global function g_dataset_destroy(dataset_location: gconstpointer): void <cimport,nodecl> end
global function g_dataset_id_get_data(dataset_location: gconstpointer, key_id: GQuark): gpointer <cimport,nodecl> end
global function g_datalist_get_data(datalist: **GData, key: *gchar): gpointer <cimport,nodecl> end
global function g_dataset_id_set_data_full(dataset_location: gconstpointer, key_id: GQuark, data: gpointer, destroy_func: GDestroyNotify): void <cimport,nodecl> end
global function g_dataset_id_remove_no_notify(dataset_location: gconstpointer, key_id: GQuark): gpointer <cimport,nodecl> end
global function g_dataset_foreach(dataset_location: gconstpointer, func: GDataForeachFunc, user_data: gpointer): void <cimport,nodecl> end
global function g_date_new(): *GDate <cimport,nodecl> end
global function g_date_new_dmy(day: GDateDay, month: GDateMonth, year: GDateYear): *GDate <cimport,nodecl> end
global function g_date_new_julian(julian_day: guint32): *GDate <cimport,nodecl> end
global function g_date_free(date: *GDate): void <cimport,nodecl> end
global function g_date_copy(date: *GDate): *GDate <cimport,nodecl> end
global function g_date_valid(date: *GDate): gboolean <cimport,nodecl> end
global function g_date_valid_day(day: GDateDay): gboolean <cimport,nodecl> end
global function g_date_valid_month(month: GDateMonth): gboolean <cimport,nodecl> end
global function g_date_valid_year(year: GDateYear): gboolean <cimport,nodecl> end
global function g_date_valid_weekday(weekday: GDateWeekday): gboolean <cimport,nodecl> end
global function g_date_valid_julian(julian_date: guint32): gboolean <cimport,nodecl> end
global function g_date_valid_dmy(day: GDateDay, month: GDateMonth, year: GDateYear): gboolean <cimport,nodecl> end
global function g_date_get_weekday(date: *GDate): GDateWeekday <cimport,nodecl> end
global function g_date_get_month(date: *GDate): GDateMonth <cimport,nodecl> end
global function g_date_get_year(date: *GDate): GDateYear <cimport,nodecl> end
global function g_date_get_day(date: *GDate): GDateDay <cimport,nodecl> end
global function g_date_get_julian(date: *GDate): guint32 <cimport,nodecl> end
global function g_date_get_day_of_year(date: *GDate): guint <cimport,nodecl> end
global function g_date_get_monday_week_of_year(date: *GDate): guint <cimport,nodecl> end
global function g_date_get_sunday_week_of_year(date: *GDate): guint <cimport,nodecl> end
global function g_date_get_iso8601_week_of_year(date: *GDate): guint <cimport,nodecl> end
global function g_date_clear(date: *GDate, n_dates: guint): void <cimport,nodecl> end
global function g_date_set_parse(date: *GDate, str: *gchar): void <cimport,nodecl> end
global function g_date_set_time_t(date: *GDate, timet: ctime_t): void <cimport,nodecl> end
global function g_date_set_time_val(date: *GDate, _timeval: *GTimeVal): void <cimport,nodecl> end
global function g_date_set_time(date: *GDate, time_: GTime): void <cimport,nodecl> end
global function g_date_set_month(date: *GDate, month: GDateMonth): void <cimport,nodecl> end
global function g_date_set_day(date: *GDate, day: GDateDay): void <cimport,nodecl> end
global function g_date_set_year(date: *GDate, year: GDateYear): void <cimport,nodecl> end
global function g_date_set_dmy(date: *GDate, day: GDateDay, month: GDateMonth, y: GDateYear): void <cimport,nodecl> end
global function g_date_set_julian(date: *GDate, julian_date: guint32): void <cimport,nodecl> end
global function g_date_is_first_of_month(date: *GDate): gboolean <cimport,nodecl> end
global function g_date_is_last_of_month(date: *GDate): gboolean <cimport,nodecl> end
global function g_date_add_days(date: *GDate, n_days: guint): void <cimport,nodecl> end
global function g_date_subtract_days(date: *GDate, n_days: guint): void <cimport,nodecl> end
global function g_date_add_months(date: *GDate, n_months: guint): void <cimport,nodecl> end
global function g_date_subtract_months(date: *GDate, n_months: guint): void <cimport,nodecl> end
global function g_date_add_years(date: *GDate, n_years: guint): void <cimport,nodecl> end
global function g_date_subtract_years(date: *GDate, n_years: guint): void <cimport,nodecl> end
global function g_date_is_leap_year(year: GDateYear): gboolean <cimport,nodecl> end
global function g_date_get_days_in_month(month: GDateMonth, year: GDateYear): guint8 <cimport,nodecl> end
global function g_date_get_monday_weeks_in_year(year: GDateYear): guint8 <cimport,nodecl> end
global function g_date_get_sunday_weeks_in_year(year: GDateYear): guint8 <cimport,nodecl> end
global function g_date_days_between(date1: *GDate, date2: *GDate): gint <cimport,nodecl> end
global function g_date_compare(lhs: *GDate, rhs: *GDate): gint <cimport,nodecl> end
global function g_date_to_struct_tm(date: *GDate, _tm: *tm): void <cimport,nodecl> end
global function g_date_clamp(date: *GDate, min_date: *GDate, max_date: *GDate): void <cimport,nodecl> end
global function g_date_order(date1: *GDate, date2: *GDate): void <cimport,nodecl> end
global function g_date_strftime(s: *gchar, slen: gsize, format: *gchar, date: *GDate): gsize <cimport,nodecl> end
global function opendir(name: cstring): *DIR <cimport,nodecl> end
global function fdopendir(fd: cint): *DIR <cimport,nodecl> end
global function closedir(dirp: *DIR): cint <cimport,nodecl> end
global function readdir(dirp: *DIR): *dirent <cimport,nodecl> end
global function readdir_r(dirp: *DIR, entry: *dirent, result: **dirent): cint <cimport,nodecl> end
global function rewinddir(dirp: *DIR): void <cimport,nodecl> end
global function seekdir(dirp: *DIR, pos: clong): void <cimport,nodecl> end
global function telldir(dirp: *DIR): clong <cimport,nodecl> end
global function dirfd(dirp: *DIR): cint <cimport,nodecl> end
global function scandir(dir: cstring, namelist: ***dirent, selector: function(a1: *dirent): cint, cmp: function(a1: **dirent, a2: **dirent): cint): cint <cimport,nodecl> end
global function alphasort(e1: **dirent, e2: **dirent): cint <cimport,nodecl> end
global function getdirentries(fd: cint, buf: cstring, nbytes: csize, basep: *clong): clong <cimport,nodecl> end
global function g_dir_open(path: *gchar, flags: guint, error: **GError): *GDir <cimport,nodecl> end
global function g_dir_read_name(dir: *GDir): *gchar <cimport,nodecl> end
global function g_dir_rewind(dir: *GDir): void <cimport,nodecl> end
global function g_dir_close(dir: *GDir): void <cimport,nodecl> end
global function g_getenv(variable: *gchar): *gchar <cimport,nodecl> end
global function g_setenv(variable: *gchar, value: *gchar, overwrite: gboolean): gboolean <cimport,nodecl> end
global function g_unsetenv(variable: *gchar): void <cimport,nodecl> end
global function g_listenv(): **gchar <cimport,nodecl> end
global function g_get_environ(): **gchar <cimport,nodecl> end
global function g_environ_getenv(envp: **gchar, variable: *gchar): *gchar <cimport,nodecl> end
global function g_environ_setenv(envp: **gchar, variable: *gchar, value: *gchar, overwrite: gboolean): **gchar <cimport,nodecl> end
global function g_environ_unsetenv(envp: **gchar, variable: *gchar): **gchar <cimport,nodecl> end
global function g_file_error_quark(): GQuark <cimport,nodecl> end
global function g_file_error_from_errno(err_no: gint): GFileError <cimport,nodecl> end
global function g_file_test(filename: *gchar, test: GFileTest): gboolean <cimport,nodecl> end
global function g_file_get_contents(filename: *gchar, contents: **gchar, length: *gsize, error: **GError): gboolean <cimport,nodecl> end
global function g_file_set_contents(filename: *gchar, contents: *gchar, length: gssize, error: **GError): gboolean <cimport,nodecl> end
global function g_file_set_contents_full(filename: *gchar, contents: *gchar, length: gssize, flags: GFileSetContentsFlags, mode: cint, error: **GError): gboolean <cimport,nodecl> end
global function g_file_read_link(filename: *gchar, error: **GError): *gchar <cimport,nodecl> end
global function g_mkdtemp(tmpl: *gchar): *gchar <cimport,nodecl> end
global function g_mkdtemp_full(tmpl: *gchar, mode: gint): *gchar <cimport,nodecl> end
global function g_mkstemp(tmpl: *gchar): gint <cimport,nodecl> end
global function g_mkstemp_full(tmpl: *gchar, flags: gint, mode: gint): gint <cimport,nodecl> end
global function g_file_open_tmp(tmpl: *gchar, name_used: **gchar, error: **GError): gint <cimport,nodecl> end
global function g_dir_make_tmp(tmpl: *gchar, error: **GError): *gchar <cimport,nodecl> end
global function g_build_path(separator: *gchar, first_element: *gchar, ...: cvarargs): *gchar <cimport,nodecl> end
global function g_build_pathv(separator: *gchar, args: **gchar): *gchar <cimport,nodecl> end
global function g_build_filename(first_element: *gchar, ...: cvarargs): *gchar <cimport,nodecl> end
global function g_build_filenamev(args: **gchar): *gchar <cimport,nodecl> end
global function g_build_filename_valist(first_element: *gchar, args: *cvalist): *gchar <cimport,nodecl> end
global function g_mkdir_with_parents(pathname: *gchar, mode: gint): gint <cimport,nodecl> end
global function g_path_is_absolute(file_name: *gchar): gboolean <cimport,nodecl> end
global function g_path_skip_root(file_name: *gchar): *gchar <cimport,nodecl> end
global function g_basename(file_name: *gchar): *gchar <cimport,nodecl> end
global function g_get_current_dir(): *gchar <cimport,nodecl> end
global function g_path_get_basename(file_name: *gchar): *gchar <cimport,nodecl> end
global function g_path_get_dirname(file_name: *gchar): *gchar <cimport,nodecl> end
global function g_canonicalize_filename(filename: *gchar, relative_to: *gchar): *gchar <cimport,nodecl> end
global function g_strip_context(msgid: *gchar, msgval: *gchar): *gchar <cimport,nodecl> end
global function g_dgettext(domain: *gchar, msgid: *gchar): *gchar <cimport,nodecl> end
global function g_dcgettext(domain: *gchar, msgid: *gchar, category: gint): *gchar <cimport,nodecl> end
global function g_dngettext(domain: *gchar, msgid: *gchar, msgid_plural: *gchar, n: gulong): *gchar <cimport,nodecl> end
global function g_dpgettext(domain: *gchar, msgctxtid: *gchar, msgidoffset: gsize): *gchar <cimport,nodecl> end
global function g_dpgettext2(domain: *gchar, context: *gchar, msgid: *gchar): *gchar <cimport,nodecl> end
global function g_free(mem: gpointer): void <cimport,nodecl> end
global function g_clear_pointer(pp: *gpointer, destroy: GDestroyNotify): void <cimport,nodecl> end
global function g_malloc(n_bytes: gsize): gpointer <cimport,nodecl> end
global function g_malloc0(n_bytes: gsize): gpointer <cimport,nodecl> end
global function g_realloc(mem: gpointer, n_bytes: gsize): gpointer <cimport,nodecl> end
global function g_try_malloc(n_bytes: gsize): gpointer <cimport,nodecl> end
global function g_try_malloc0(n_bytes: gsize): gpointer <cimport,nodecl> end
global function g_try_realloc(mem: gpointer, n_bytes: gsize): gpointer <cimport,nodecl> end
global function g_malloc_n(n_blocks: gsize, n_block_bytes: gsize): gpointer <cimport,nodecl> end
global function g_malloc0_n(n_blocks: gsize, n_block_bytes: gsize): gpointer <cimport,nodecl> end
global function g_realloc_n(mem: gpointer, n_blocks: gsize, n_block_bytes: gsize): gpointer <cimport,nodecl> end
global function g_try_malloc_n(n_blocks: gsize, n_block_bytes: gsize): gpointer <cimport,nodecl> end
global function g_try_malloc0_n(n_blocks: gsize, n_block_bytes: gsize): gpointer <cimport,nodecl> end
global function g_try_realloc_n(mem: gpointer, n_blocks: gsize, n_block_bytes: gsize): gpointer <cimport,nodecl> end
global function g_steal_pointer(pp: gpointer): gpointer <cimport,nodecl> end
global function g_mem_set_vtable(vtable: *GMemVTable): void <cimport,nodecl> end
global function g_mem_is_system_malloc(): gboolean <cimport,nodecl> end
global g_mem_gc_friendly: gboolean <cimport,nodecl>
global glib_mem_profiler_table: *GMemVTable <cimport,nodecl>
global function g_mem_profile(): void <cimport,nodecl> end
global function g_node_new(data: gpointer): *GNode <cimport,nodecl> end
global function g_node_destroy(root: *GNode): void <cimport,nodecl> end
global function g_node_unlink(node: *GNode): void <cimport,nodecl> end
global function g_node_copy_deep(node: *GNode, copy_func: GCopyFunc, data: gpointer): *GNode <cimport,nodecl> end
global function g_node_copy(node: *GNode): *GNode <cimport,nodecl> end
global function g_node_insert(parent: *GNode, position: gint, node: *GNode): *GNode <cimport,nodecl> end
global function g_node_insert_before(parent: *GNode, sibling: *GNode, node: *GNode): *GNode <cimport,nodecl> end
global function g_node_insert_after(parent: *GNode, sibling: *GNode, node: *GNode): *GNode <cimport,nodecl> end
global function g_node_prepend(parent: *GNode, node: *GNode): *GNode <cimport,nodecl> end
global function g_node_n_nodes(root: *GNode, flags: GTraverseFlags): guint <cimport,nodecl> end
global function g_node_get_root(node: *GNode): *GNode <cimport,nodecl> end
global function g_node_is_ancestor(node: *GNode, descendant: *GNode): gboolean <cimport,nodecl> end
global function g_node_depth(node: *GNode): guint <cimport,nodecl> end
global function g_node_find(root: *GNode, order: GTraverseType, flags: GTraverseFlags, data: gpointer): *GNode <cimport,nodecl> end
global function g_node_traverse(root: *GNode, order: GTraverseType, flags: GTraverseFlags, max_depth: gint, func: GNodeTraverseFunc, data: gpointer): void <cimport,nodecl> end
global function g_node_max_height(root: *GNode): guint <cimport,nodecl> end
global function g_node_children_foreach(node: *GNode, flags: GTraverseFlags, func: GNodeForeachFunc, data: gpointer): void <cimport,nodecl> end
global function g_node_reverse_children(node: *GNode): void <cimport,nodecl> end
global function g_node_n_children(node: *GNode): guint <cimport,nodecl> end
global function g_node_nth_child(node: *GNode, n: guint): *GNode <cimport,nodecl> end
global function g_node_last_child(node: *GNode): *GNode <cimport,nodecl> end
global function g_node_find_child(node: *GNode, flags: GTraverseFlags, data: gpointer): *GNode <cimport,nodecl> end
global function g_node_child_position(node: *GNode, child: *GNode): gint <cimport,nodecl> end
global function g_node_child_index(node: *GNode, data: gpointer): gint <cimport,nodecl> end
global function g_node_first_sibling(node: *GNode): *GNode <cimport,nodecl> end
global function g_node_last_sibling(node: *GNode): *GNode <cimport,nodecl> end
global function g_list_alloc(): *GList <cimport,nodecl> end
global function g_list_free(list: *GList): void <cimport,nodecl> end
global function g_list_free_1(list: *GList): void <cimport,nodecl> end
global function g_list_free_full(list: *GList, free_func: GDestroyNotify): void <cimport,nodecl> end
global function g_list_append(list: *GList, data: gpointer): *GList <cimport,nodecl> end
global function g_list_prepend(list: *GList, data: gpointer): *GList <cimport,nodecl> end
global function g_list_insert(list: *GList, data: gpointer, position: gint): *GList <cimport,nodecl> end
global function g_list_insert_sorted(list: *GList, data: gpointer, func: GCompareFunc): *GList <cimport,nodecl> end
global function g_list_insert_sorted_with_data(list: *GList, data: gpointer, func: GCompareDataFunc, user_data: gpointer): *GList <cimport,nodecl> end
global function g_list_insert_before(list: *GList, sibling: *GList, data: gpointer): *GList <cimport,nodecl> end
global function g_list_insert_before_link(list: *GList, sibling: *GList, link_: *GList): *GList <cimport,nodecl> end
global function g_list_concat(list1: *GList, list2: *GList): *GList <cimport,nodecl> end
global function g_list_remove(list: *GList, data: gconstpointer): *GList <cimport,nodecl> end
global function g_list_remove_all(list: *GList, data: gconstpointer): *GList <cimport,nodecl> end
global function g_list_remove_link(list: *GList, llink: *GList): *GList <cimport,nodecl> end
global function g_list_delete_link(list: *GList, link_: *GList): *GList <cimport,nodecl> end
global function g_list_reverse(list: *GList): *GList <cimport,nodecl> end
global function g_list_copy(list: *GList): *GList <cimport,nodecl> end
global function g_list_copy_deep(list: *GList, func: GCopyFunc, user_data: gpointer): *GList <cimport,nodecl> end
global function g_list_nth(list: *GList, n: guint): *GList <cimport,nodecl> end
global function g_list_nth_prev(list: *GList, n: guint): *GList <cimport,nodecl> end
global function g_list_find(list: *GList, data: gconstpointer): *GList <cimport,nodecl> end
global function g_list_find_custom(list: *GList, data: gconstpointer, func: GCompareFunc): *GList <cimport,nodecl> end
global function g_list_position(list: *GList, llink: *GList): gint <cimport,nodecl> end
global function g_list_index(list: *GList, data: gconstpointer): gint <cimport,nodecl> end
global function g_list_last(list: *GList): *GList <cimport,nodecl> end
global function g_list_first(list: *GList): *GList <cimport,nodecl> end
global function g_list_length(list: *GList): guint <cimport,nodecl> end
global function g_list_foreach(list: *GList, func: GFunc, user_data: gpointer): void <cimport,nodecl> end
global function g_list_sort(list: *GList, compare_func: GCompareFunc): *GList <cimport,nodecl> end
global function g_list_sort_with_data(list: *GList, compare_func: GCompareDataFunc, user_data: gpointer): *GList <cimport,nodecl> end
global function g_list_nth_data(list: *GList, n: guint): gpointer <cimport,nodecl> end
global function g_clear_list(list_ptr: **GList, destroy: GDestroyNotify): void <cimport,nodecl> end
global function g_hash_table_new(hash_func: GHashFunc, key_equal_func: GEqualFunc): *GHashTable <cimport,nodecl> end
global function g_hash_table_new_full(hash_func: GHashFunc, key_equal_func: GEqualFunc, key_destroy_func: GDestroyNotify, value_destroy_func: GDestroyNotify): *GHashTable <cimport,nodecl> end
global function g_hash_table_destroy(hash_table: *GHashTable): void <cimport,nodecl> end
global function g_hash_table_insert(hash_table: *GHashTable, key: gpointer, value: gpointer): gboolean <cimport,nodecl> end
global function g_hash_table_replace(hash_table: *GHashTable, key: gpointer, value: gpointer): gboolean <cimport,nodecl> end
global function g_hash_table_add(hash_table: *GHashTable, key: gpointer): gboolean <cimport,nodecl> end
global function g_hash_table_remove(hash_table: *GHashTable, key: gconstpointer): gboolean <cimport,nodecl> end
global function g_hash_table_remove_all(hash_table: *GHashTable): void <cimport,nodecl> end
global function g_hash_table_steal(hash_table: *GHashTable, key: gconstpointer): gboolean <cimport,nodecl> end
global function g_hash_table_steal_extended(hash_table: *GHashTable, lookup_key: gconstpointer, stolen_key: *gpointer, stolen_value: *gpointer): gboolean <cimport,nodecl> end
global function g_hash_table_steal_all(hash_table: *GHashTable): void <cimport,nodecl> end
global function g_hash_table_lookup(hash_table: *GHashTable, key: gconstpointer): gpointer <cimport,nodecl> end
global function g_hash_table_contains(hash_table: *GHashTable, key: gconstpointer): gboolean <cimport,nodecl> end
global function g_hash_table_lookup_extended(hash_table: *GHashTable, lookup_key: gconstpointer, orig_key: *gpointer, value: *gpointer): gboolean <cimport,nodecl> end
global function g_hash_table_foreach(hash_table: *GHashTable, func: GHFunc, user_data: gpointer): void <cimport,nodecl> end
global function g_hash_table_find(hash_table: *GHashTable, predicate: GHRFunc, user_data: gpointer): gpointer <cimport,nodecl> end
global function g_hash_table_foreach_remove(hash_table: *GHashTable, func: GHRFunc, user_data: gpointer): guint <cimport,nodecl> end
global function g_hash_table_foreach_steal(hash_table: *GHashTable, func: GHRFunc, user_data: gpointer): guint <cimport,nodecl> end
global function g_hash_table_size(hash_table: *GHashTable): guint <cimport,nodecl> end
global function g_hash_table_get_keys(hash_table: *GHashTable): *GList <cimport,nodecl> end
global function g_hash_table_get_values(hash_table: *GHashTable): *GList <cimport,nodecl> end
global function g_hash_table_get_keys_as_array(hash_table: *GHashTable, length: *guint): *gpointer <cimport,nodecl> end
global function g_hash_table_iter_init(iter: *GHashTableIter, hash_table: *GHashTable): void <cimport,nodecl> end
global function g_hash_table_iter_next(iter: *GHashTableIter, key: *gpointer, value: *gpointer): gboolean <cimport,nodecl> end
global function g_hash_table_iter_get_hash_table(iter: *GHashTableIter): *GHashTable <cimport,nodecl> end
global function g_hash_table_iter_remove(iter: *GHashTableIter): void <cimport,nodecl> end
global function g_hash_table_iter_replace(iter: *GHashTableIter, value: gpointer): void <cimport,nodecl> end
global function g_hash_table_iter_steal(iter: *GHashTableIter): void <cimport,nodecl> end
global function g_hash_table_ref(hash_table: *GHashTable): *GHashTable <cimport,nodecl> end
global function g_hash_table_unref(hash_table: *GHashTable): void <cimport,nodecl> end
global function g_str_equal(v1: gconstpointer, v2: gconstpointer): gboolean <cimport,nodecl> end
global function g_str_hash(v: gconstpointer): guint <cimport,nodecl> end
global function g_int_equal(v1: gconstpointer, v2: gconstpointer): gboolean <cimport,nodecl> end
global function g_int_hash(v: gconstpointer): guint <cimport,nodecl> end
global function g_int64_equal(v1: gconstpointer, v2: gconstpointer): gboolean <cimport,nodecl> end
global function g_int64_hash(v: gconstpointer): guint <cimport,nodecl> end
global function g_double_equal(v1: gconstpointer, v2: gconstpointer): gboolean <cimport,nodecl> end
global function g_double_hash(v: gconstpointer): guint <cimport,nodecl> end
global function g_direct_hash(v: gconstpointer): guint <cimport,nodecl> end
global function g_direct_equal(v1: gconstpointer, v2: gconstpointer): gboolean <cimport,nodecl> end
global function g_hmac_new(digest_type: GChecksumType, key: *guchar, key_len: gsize): *GHmac <cimport,nodecl> end
global function g_hmac_copy(hmac: *GHmac): *GHmac <cimport,nodecl> end
global function g_hmac_ref(hmac: *GHmac): *GHmac <cimport,nodecl> end
global function g_hmac_unref(hmac: *GHmac): void <cimport,nodecl> end
global function g_hmac_update(hmac: *GHmac, data: *guchar, length: gssize): void <cimport,nodecl> end
global function g_hmac_get_string(hmac: *GHmac): *gchar <cimport,nodecl> end
global function g_hmac_get_digest(hmac: *GHmac, buffer: *guint8, digest_len: *gsize): void <cimport,nodecl> end
global function g_compute_hmac_for_data(digest_type: GChecksumType, key: *guchar, key_len: gsize, data: *guchar, length: gsize): *gchar <cimport,nodecl> end
global function g_compute_hmac_for_string(digest_type: GChecksumType, key: *guchar, key_len: gsize, str: *gchar, length: gssize): *gchar <cimport,nodecl> end
global function g_compute_hmac_for_bytes(digest_type: GChecksumType, key: *GBytes, data: *GBytes): *gchar <cimport,nodecl> end
global function g_hook_list_init(hook_list: *GHookList, hook_size: guint): void <cimport,nodecl> end
global function g_hook_list_clear(hook_list: *GHookList): void <cimport,nodecl> end
global function g_hook_alloc(hook_list: *GHookList): *GHook <cimport,nodecl> end
global function g_hook_free(hook_list: *GHookList, hook: *GHook): void <cimport,nodecl> end
global function g_hook_ref(hook_list: *GHookList, hook: *GHook): *GHook <cimport,nodecl> end
global function g_hook_unref(hook_list: *GHookList, hook: *GHook): void <cimport,nodecl> end
global function g_hook_destroy(hook_list: *GHookList, hook_id: gulong): gboolean <cimport,nodecl> end
global function g_hook_destroy_link(hook_list: *GHookList, hook: *GHook): void <cimport,nodecl> end
global function g_hook_prepend(hook_list: *GHookList, hook: *GHook): void <cimport,nodecl> end
global function g_hook_insert_before(hook_list: *GHookList, sibling: *GHook, hook: *GHook): void <cimport,nodecl> end
global function g_hook_insert_sorted(hook_list: *GHookList, hook: *GHook, func: GHookCompareFunc): void <cimport,nodecl> end
global function g_hook_get(hook_list: *GHookList, hook_id: gulong): *GHook <cimport,nodecl> end
global function g_hook_find(hook_list: *GHookList, need_valids: gboolean, func: GHookFindFunc, data: gpointer): *GHook <cimport,nodecl> end
global function g_hook_find_data(hook_list: *GHookList, need_valids: gboolean, data: gpointer): *GHook <cimport,nodecl> end
global function g_hook_find_func(hook_list: *GHookList, need_valids: gboolean, func: gpointer): *GHook <cimport,nodecl> end
global function g_hook_find_func_data(hook_list: *GHookList, need_valids: gboolean, func: gpointer, data: gpointer): *GHook <cimport,nodecl> end
global function g_hook_first_valid(hook_list: *GHookList, may_be_in_call: gboolean): *GHook <cimport,nodecl> end
global function g_hook_next_valid(hook_list: *GHookList, hook: *GHook, may_be_in_call: gboolean): *GHook <cimport,nodecl> end
global function g_hook_compare_ids(new_hook: *GHook, sibling: *GHook): gint <cimport,nodecl> end
global function g_hook_list_invoke(hook_list: *GHookList, may_recurse: gboolean): void <cimport,nodecl> end
global function g_hook_list_invoke_check(hook_list: *GHookList, may_recurse: gboolean): void <cimport,nodecl> end
global function g_hook_list_marshal(hook_list: *GHookList, may_recurse: gboolean, marshaller: GHookMarshaller, marshal_data: gpointer): void <cimport,nodecl> end
global function g_hook_list_marshal_check(hook_list: *GHookList, may_recurse: gboolean, marshaller: GHookCheckMarshaller, marshal_data: gpointer): void <cimport,nodecl> end
global function g_hostname_is_non_ascii(hostname: *gchar): gboolean <cimport,nodecl> end
global function g_hostname_is_ascii_encoded(hostname: *gchar): gboolean <cimport,nodecl> end
global function g_hostname_is_ip_address(hostname: *gchar): gboolean <cimport,nodecl> end
global function g_hostname_to_ascii(hostname: *gchar): *gchar <cimport,nodecl> end
global function g_hostname_to_unicode(hostname: *gchar): *gchar <cimport,nodecl> end
global function g_poll(fds: *GPollFD, nfds: guint, timeout: gint): gint <cimport,nodecl> end
global function g_slist_alloc(): *GSList <cimport,nodecl> end
global function g_slist_free(list: *GSList): void <cimport,nodecl> end
global function g_slist_free_1(list: *GSList): void <cimport,nodecl> end
global function g_slist_free_full(list: *GSList, free_func: GDestroyNotify): void <cimport,nodecl> end
global function g_slist_append(list: *GSList, data: gpointer): *GSList <cimport,nodecl> end
global function g_slist_prepend(list: *GSList, data: gpointer): *GSList <cimport,nodecl> end
global function g_slist_insert(list: *GSList, data: gpointer, position: gint): *GSList <cimport,nodecl> end
global function g_slist_insert_sorted(list: *GSList, data: gpointer, func: GCompareFunc): *GSList <cimport,nodecl> end
global function g_slist_insert_sorted_with_data(list: *GSList, data: gpointer, func: GCompareDataFunc, user_data: gpointer): *GSList <cimport,nodecl> end
global function g_slist_insert_before(slist: *GSList, sibling: *GSList, data: gpointer): *GSList <cimport,nodecl> end
global function g_slist_concat(list1: *GSList, list2: *GSList): *GSList <cimport,nodecl> end
global function g_slist_remove(list: *GSList, data: gconstpointer): *GSList <cimport,nodecl> end
global function g_slist_remove_all(list: *GSList, data: gconstpointer): *GSList <cimport,nodecl> end
global function g_slist_remove_link(list: *GSList, link_: *GSList): *GSList <cimport,nodecl> end
global function g_slist_delete_link(list: *GSList, link_: *GSList): *GSList <cimport,nodecl> end
global function g_slist_reverse(list: *GSList): *GSList <cimport,nodecl> end
global function g_slist_copy(list: *GSList): *GSList <cimport,nodecl> end
global function g_slist_copy_deep(list: *GSList, func: GCopyFunc, user_data: gpointer): *GSList <cimport,nodecl> end
global function g_slist_nth(list: *GSList, n: guint): *GSList <cimport,nodecl> end
global function g_slist_find(list: *GSList, data: gconstpointer): *GSList <cimport,nodecl> end
global function g_slist_find_custom(list: *GSList, data: gconstpointer, func: GCompareFunc): *GSList <cimport,nodecl> end
global function g_slist_position(list: *GSList, llink: *GSList): gint <cimport,nodecl> end
global function g_slist_index(list: *GSList, data: gconstpointer): gint <cimport,nodecl> end
global function g_slist_last(list: *GSList): *GSList <cimport,nodecl> end
global function g_slist_length(list: *GSList): guint <cimport,nodecl> end
global function g_slist_foreach(list: *GSList, func: GFunc, user_data: gpointer): void <cimport,nodecl> end
global function g_slist_sort(list: *GSList, compare_func: GCompareFunc): *GSList <cimport,nodecl> end
global function g_slist_sort_with_data(list: *GSList, compare_func: GCompareDataFunc, user_data: gpointer): *GSList <cimport,nodecl> end
global function g_slist_nth_data(list: *GSList, n: guint): gpointer <cimport,nodecl> end
global function g_clear_slist(slist_ptr: **GSList, destroy: GDestroyNotify): void <cimport,nodecl> end
global function g_main_context_new(): *GMainContext <cimport,nodecl> end
global function g_main_context_ref(context: *GMainContext): *GMainContext <cimport,nodecl> end
global function g_main_context_unref(context: *GMainContext): void <cimport,nodecl> end
global function g_main_context_default(): *GMainContext <cimport,nodecl> end
global function g_main_context_iteration(context: *GMainContext, may_block: gboolean): gboolean <cimport,nodecl> end
global function g_main_context_pending(context: *GMainContext): gboolean <cimport,nodecl> end
global function g_main_context_find_source_by_id(context: *GMainContext, source_id: guint): *GSource <cimport,nodecl> end
global function g_main_context_find_source_by_user_data(context: *GMainContext, user_data: gpointer): *GSource <cimport,nodecl> end
global function g_main_context_find_source_by_funcs_user_data(context: *GMainContext, funcs: *GSourceFuncs, user_data: gpointer): *GSource <cimport,nodecl> end
global function g_main_context_wakeup(context: *GMainContext): void <cimport,nodecl> end
global function g_main_context_acquire(context: *GMainContext): gboolean <cimport,nodecl> end
global function g_main_context_release(context: *GMainContext): void <cimport,nodecl> end
global function g_main_context_is_owner(context: *GMainContext): gboolean <cimport,nodecl> end
global function g_main_context_wait(context: *GMainContext, cond: *GCond, mutex: *GMutex): gboolean <cimport,nodecl> end
global function g_main_context_prepare(context: *GMainContext, priority: *gint): gboolean <cimport,nodecl> end
global function g_main_context_query(context: *GMainContext, max_priority: gint, timeout_: *gint, fds: *GPollFD, n_fds: gint): gint <cimport,nodecl> end
global function g_main_context_check(context: *GMainContext, max_priority: gint, fds: *GPollFD, n_fds: gint): gboolean <cimport,nodecl> end
global function g_main_context_dispatch(context: *GMainContext): void <cimport,nodecl> end
global function g_main_context_set_poll_func(context: *GMainContext, func: GPollFunc): void <cimport,nodecl> end
global function g_main_context_get_poll_func(context: *GMainContext): GPollFunc <cimport,nodecl> end
global function g_main_context_add_poll(context: *GMainContext, fd: *GPollFD, priority: gint): void <cimport,nodecl> end
global function g_main_context_remove_poll(context: *GMainContext, fd: *GPollFD): void <cimport,nodecl> end
global function g_main_depth(): gint <cimport,nodecl> end
global function g_main_current_source(): *GSource <cimport,nodecl> end
global function g_main_context_push_thread_default(context: *GMainContext): void <cimport,nodecl> end
global function g_main_context_pop_thread_default(context: *GMainContext): void <cimport,nodecl> end
global function g_main_context_get_thread_default(): *GMainContext <cimport,nodecl> end
global function g_main_context_ref_thread_default(): *GMainContext <cimport,nodecl> end
global function g_main_context_pusher_new(main_context: *GMainContext): *GMainContextPusher <cimport,nodecl> end
global function g_main_context_pusher_free(pusher: *GMainContextPusher): void <cimport,nodecl> end
global function g_main_loop_new(context: *GMainContext, is_running: gboolean): *GMainLoop <cimport,nodecl> end
global function g_main_loop_run(loop: *GMainLoop): void <cimport,nodecl> end
global function g_main_loop_quit(loop: *GMainLoop): void <cimport,nodecl> end
global function g_main_loop_ref(loop: *GMainLoop): *GMainLoop <cimport,nodecl> end
global function g_main_loop_unref(loop: *GMainLoop): void <cimport,nodecl> end
global function g_main_loop_is_running(loop: *GMainLoop): gboolean <cimport,nodecl> end
global function g_main_loop_get_context(loop: *GMainLoop): *GMainContext <cimport,nodecl> end
global function g_source_new(source_funcs: *GSourceFuncs, struct_size: guint): *GSource <cimport,nodecl> end
global function g_source_set_dispose_function(source: *GSource, dispose: GSourceDisposeFunc): void <cimport,nodecl> end
global function g_source_ref(source: *GSource): *GSource <cimport,nodecl> end
global function g_source_unref(source: *GSource): void <cimport,nodecl> end
global function g_source_attach(source: *GSource, context: *GMainContext): guint <cimport,nodecl> end
global function g_source_destroy(source: *GSource): void <cimport,nodecl> end
global function g_source_set_priority(source: *GSource, priority: gint): void <cimport,nodecl> end
global function g_source_get_priority(source: *GSource): gint <cimport,nodecl> end
global function g_source_set_can_recurse(source: *GSource, can_recurse: gboolean): void <cimport,nodecl> end
global function g_source_get_can_recurse(source: *GSource): gboolean <cimport,nodecl> end
global function g_source_get_id(source: *GSource): guint <cimport,nodecl> end
global function g_source_get_context(source: *GSource): *GMainContext <cimport,nodecl> end
global function g_source_set_callback(source: *GSource, func: GSourceFunc, data: gpointer, notify: GDestroyNotify): void <cimport,nodecl> end
global function g_source_set_funcs(source: *GSource, funcs: *GSourceFuncs): void <cimport,nodecl> end
global function g_source_is_destroyed(source: *GSource): gboolean <cimport,nodecl> end
global function g_source_set_name(source: *GSource, name: cstring): void <cimport,nodecl> end
global function g_source_set_static_name(source: *GSource, name: cstring): void <cimport,nodecl> end
global function g_source_get_name(source: *GSource): cstring <cimport,nodecl> end
global function g_source_set_name_by_id(tag: guint, name: cstring): void <cimport,nodecl> end
global function g_source_set_ready_time(source: *GSource, ready_time: gint64): void <cimport,nodecl> end
global function g_source_get_ready_time(source: *GSource): gint64 <cimport,nodecl> end
global function g_source_add_unix_fd(source: *GSource, fd: gint, events: GIOCondition): gpointer <cimport,nodecl> end
global function g_source_modify_unix_fd(source: *GSource, tag: gpointer, new_events: GIOCondition): void <cimport,nodecl> end
global function g_source_remove_unix_fd(source: *GSource, tag: gpointer): void <cimport,nodecl> end
global function g_source_query_unix_fd(source: *GSource, tag: gpointer): GIOCondition <cimport,nodecl> end
global function g_source_set_callback_indirect(source: *GSource, callback_data: gpointer, callback_funcs: *GSourceCallbackFuncs): void <cimport,nodecl> end
global function g_source_add_poll(source: *GSource, fd: *GPollFD): void <cimport,nodecl> end
global function g_source_remove_poll(source: *GSource, fd: *GPollFD): void <cimport,nodecl> end
global function g_source_add_child_source(source: *GSource, child_source: *GSource): void <cimport,nodecl> end
global function g_source_remove_child_source(source: *GSource, child_source: *GSource): void <cimport,nodecl> end
global function g_source_get_current_time(source: *GSource, _timeval: *GTimeVal): void <cimport,nodecl> end
global function g_source_get_time(source: *GSource): gint64 <cimport,nodecl> end
global function g_idle_source_new(): *GSource <cimport,nodecl> end
global function g_child_watch_source_new(pid: GPid): *GSource <cimport,nodecl> end
global function g_timeout_source_new(interval: guint): *GSource <cimport,nodecl> end
global function g_timeout_source_new_seconds(interval: guint): *GSource <cimport,nodecl> end
global function g_get_current_time(result: *GTimeVal): void <cimport,nodecl> end
global function g_get_monotonic_time(): gint64 <cimport,nodecl> end
global function g_get_real_time(): gint64 <cimport,nodecl> end
global function g_source_remove(tag: guint): gboolean <cimport,nodecl> end
global function g_source_remove_by_user_data(user_data: gpointer): gboolean <cimport,nodecl> end
global function g_source_remove_by_funcs_user_data(funcs: *GSourceFuncs, user_data: gpointer): gboolean <cimport,nodecl> end
global function g_clear_handle_id(tag_ptr: *guint, clear_func: GClearHandleFunc): void <cimport,nodecl> end
global function g_timeout_add_full(priority: gint, interval: guint, function_: GSourceFunc, data: gpointer, notify: GDestroyNotify): guint <cimport,nodecl> end
global function g_timeout_add(interval: guint, function_: GSourceFunc, data: gpointer): guint <cimport,nodecl> end
global function g_timeout_add_seconds_full(priority: gint, interval: guint, function_: GSourceFunc, data: gpointer, notify: GDestroyNotify): guint <cimport,nodecl> end
global function g_timeout_add_seconds(interval: guint, function_: GSourceFunc, data: gpointer): guint <cimport,nodecl> end
global function g_child_watch_add_full(priority: gint, pid: GPid, function_: GChildWatchFunc, data: gpointer, notify: GDestroyNotify): guint <cimport,nodecl> end
global function g_child_watch_add(pid: GPid, function_: GChildWatchFunc, data: gpointer): guint <cimport,nodecl> end
global function g_idle_add(function_: GSourceFunc, data: gpointer): guint <cimport,nodecl> end
global function g_idle_add_full(priority: gint, function_: GSourceFunc, data: gpointer, notify: GDestroyNotify): guint <cimport,nodecl> end
global function g_idle_remove_by_data(data: gpointer): gboolean <cimport,nodecl> end
global function g_main_context_invoke_full(context: *GMainContext, priority: gint, function_: GSourceFunc, data: gpointer, notify: GDestroyNotify): void <cimport,nodecl> end
global function g_main_context_invoke(context: *GMainContext, function_: GSourceFunc, data: gpointer): void <cimport,nodecl> end
global function g_steal_fd(fd_ptr: *cint): cint <cimport,nodecl> end
global g_timeout_funcs: GSourceFuncs <cimport,nodecl>
global g_child_watch_funcs: GSourceFuncs <cimport,nodecl>
global g_idle_funcs: GSourceFuncs <cimport,nodecl>
global g_unix_signal_funcs: GSourceFuncs <cimport,nodecl>
global g_unix_fd_source_funcs: GSourceFuncs <cimport,nodecl>
global function g_unicode_script_to_iso15924(script: GUnicodeScript): guint32 <cimport,nodecl> end
global function g_unicode_script_from_iso15924(iso15924: guint32): GUnicodeScript <cimport,nodecl> end
global function g_unichar_isalnum(c: gunichar): gboolean <cimport,nodecl> end
global function g_unichar_isalpha(c: gunichar): gboolean <cimport,nodecl> end
global function g_unichar_iscntrl(c: gunichar): gboolean <cimport,nodecl> end
global function g_unichar_isdigit(c: gunichar): gboolean <cimport,nodecl> end
global function g_unichar_isgraph(c: gunichar): gboolean <cimport,nodecl> end
global function g_unichar_islower(c: gunichar): gboolean <cimport,nodecl> end
global function g_unichar_isprint(c: gunichar): gboolean <cimport,nodecl> end
global function g_unichar_ispunct(c: gunichar): gboolean <cimport,nodecl> end
global function g_unichar_isspace(c: gunichar): gboolean <cimport,nodecl> end
global function g_unichar_isupper(c: gunichar): gboolean <cimport,nodecl> end
global function g_unichar_isxdigit(c: gunichar): gboolean <cimport,nodecl> end
global function g_unichar_istitle(c: gunichar): gboolean <cimport,nodecl> end
global function g_unichar_isdefined(c: gunichar): gboolean <cimport,nodecl> end
global function g_unichar_iswide(c: gunichar): gboolean <cimport,nodecl> end
global function g_unichar_iswide_cjk(c: gunichar): gboolean <cimport,nodecl> end
global function g_unichar_iszerowidth(c: gunichar): gboolean <cimport,nodecl> end
global function g_unichar_ismark(c: gunichar): gboolean <cimport,nodecl> end
global function g_unichar_toupper(c: gunichar): gunichar <cimport,nodecl> end
global function g_unichar_tolower(c: gunichar): gunichar <cimport,nodecl> end
global function g_unichar_totitle(c: gunichar): gunichar <cimport,nodecl> end
global function g_unichar_digit_value(c: gunichar): gint <cimport,nodecl> end
global function g_unichar_xdigit_value(c: gunichar): gint <cimport,nodecl> end
global function g_unichar_type(c: gunichar): GUnicodeType <cimport,nodecl> end
global function g_unichar_break_type(c: gunichar): GUnicodeBreakType <cimport,nodecl> end
global function g_unichar_combining_class(uc: gunichar): gint <cimport,nodecl> end
global function g_unichar_get_mirror_char(ch: gunichar, mirrored_ch: *gunichar): gboolean <cimport,nodecl> end
global function g_unichar_get_script(ch: gunichar): GUnicodeScript <cimport,nodecl> end
global function g_unichar_validate(ch: gunichar): gboolean <cimport,nodecl> end
global function g_unichar_compose(a: gunichar, b: gunichar, ch: *gunichar): gboolean <cimport,nodecl> end
global function g_unichar_decompose(ch: gunichar, a: *gunichar, b: *gunichar): gboolean <cimport,nodecl> end
global function g_unichar_fully_decompose(ch: gunichar, compat: gboolean, result: *gunichar, result_len: gsize): gsize <cimport,nodecl> end
global function g_unicode_canonical_ordering(string: *gunichar, len: gsize): void <cimport,nodecl> end
global function g_unicode_canonical_decomposition(ch: gunichar, result_len: *gsize): *gunichar <cimport,nodecl> end
global g_utf8_skip: *gchar <cimport,nodecl>
global function g_utf8_get_char(p: *gchar): gunichar <cimport,nodecl> end
global function g_utf8_get_char_validated(p: *gchar, max_len: gssize): gunichar <cimport,nodecl> end
global function g_utf8_offset_to_pointer(str: *gchar, offset: glong): *gchar <cimport,nodecl> end
global function g_utf8_pointer_to_offset(str: *gchar, pos: *gchar): glong <cimport,nodecl> end
global function g_utf8_prev_char(p: *gchar): *gchar <cimport,nodecl> end
global function g_utf8_find_next_char(p: *gchar, end_: *gchar): *gchar <cimport,nodecl> end
global function g_utf8_find_prev_char(str: *gchar, p: *gchar): *gchar <cimport,nodecl> end
global function g_utf8_strlen(p: *gchar, max: gssize): glong <cimport,nodecl> end
global function g_utf8_substring(str: *gchar, start_pos: glong, end_pos: glong): *gchar <cimport,nodecl> end
global function g_utf8_strncpy(dest: *gchar, src: *gchar, n: gsize): *gchar <cimport,nodecl> end
global function g_utf8_strchr(p: *gchar, len: gssize, c: gunichar): *gchar <cimport,nodecl> end
global function g_utf8_strrchr(p: *gchar, len: gssize, c: gunichar): *gchar <cimport,nodecl> end
global function g_utf8_strreverse(str: *gchar, len: gssize): *gchar <cimport,nodecl> end
global function g_utf8_to_utf16(str: *gchar, len: glong, items_read: *glong, items_written: *glong, error: **GError): *gunichar2 <cimport,nodecl> end
global function g_utf8_to_ucs4(str: *gchar, len: glong, items_read: *glong, items_written: *glong, error: **GError): *gunichar <cimport,nodecl> end
global function g_utf8_to_ucs4_fast(str: *gchar, len: glong, items_written: *glong): *gunichar <cimport,nodecl> end
global function g_utf16_to_ucs4(str: *gunichar2, len: glong, items_read: *glong, items_written: *glong, error: **GError): *gunichar <cimport,nodecl> end
global function g_utf16_to_utf8(str: *gunichar2, len: glong, items_read: *glong, items_written: *glong, error: **GError): *gchar <cimport,nodecl> end
global function g_ucs4_to_utf16(str: *gunichar, len: glong, items_read: *glong, items_written: *glong, error: **GError): *gunichar2 <cimport,nodecl> end
global function g_ucs4_to_utf8(str: *gunichar, len: glong, items_read: *glong, items_written: *glong, error: **GError): *gchar <cimport,nodecl> end
global function g_unichar_to_utf8(c: gunichar, outbuf: *gchar): gint <cimport,nodecl> end
global function g_utf8_validate(str: *gchar, max_len: gssize, end_: **gchar): gboolean <cimport,nodecl> end
global function g_utf8_validate_len(str: *gchar, max_len: gsize, end_: **gchar): gboolean <cimport,nodecl> end
global function g_utf8_strup(str: *gchar, len: gssize): *gchar <cimport,nodecl> end
global function g_utf8_strdown(str: *gchar, len: gssize): *gchar <cimport,nodecl> end
global function g_utf8_casefold(str: *gchar, len: gssize): *gchar <cimport,nodecl> end
global function g_utf8_normalize(str: *gchar, len: gssize, mode: GNormalizeMode): *gchar <cimport,nodecl> end
global function g_utf8_collate(str1: *gchar, str2: *gchar): gint <cimport,nodecl> end
global function g_utf8_collate_key(str: *gchar, len: gssize): *gchar <cimport,nodecl> end
global function g_utf8_collate_key_for_filename(str: *gchar, len: gssize): *gchar <cimport,nodecl> end
global function g_utf8_make_valid(str: *gchar, len: gssize): *gchar <cimport,nodecl> end
global function g_string_new(init: *gchar): *GString <cimport,nodecl> end
global function g_string_new_len(init: *gchar, len: gssize): *GString <cimport,nodecl> end
global function g_string_sized_new(dfl_size: gsize): *GString <cimport,nodecl> end
global function g_string_free(string: *GString, free_segment: gboolean): *gchar <cimport,nodecl> end
global function g_string_free_to_bytes(string: *GString): *GBytes <cimport,nodecl> end
global function g_string_equal(v: *GString, v2: *GString): gboolean <cimport,nodecl> end
global function g_string_hash(str: *GString): guint <cimport,nodecl> end
global function g_string_assign(string: *GString, rval: *gchar): *GString <cimport,nodecl> end
global function g_string_truncate(string: *GString, len: gsize): *GString <cimport,nodecl> end
global function g_string_set_size(string: *GString, len: gsize): *GString <cimport,nodecl> end
global function g_string_insert_len(string: *GString, pos: gssize, val: *gchar, len: gssize): *GString <cimport,nodecl> end
global function g_string_append(string: *GString, val: *gchar): *GString <cimport,nodecl> end
global function g_string_append_len(string: *GString, val: *gchar, len: gssize): *GString <cimport,nodecl> end
global function g_string_append_c(string: *GString, c: gchar): *GString <cimport,nodecl> end
global function g_string_append_unichar(string: *GString, wc: gunichar): *GString <cimport,nodecl> end
global function g_string_prepend(string: *GString, val: *gchar): *GString <cimport,nodecl> end
global function g_string_prepend_c(string: *GString, c: gchar): *GString <cimport,nodecl> end
global function g_string_prepend_unichar(string: *GString, wc: gunichar): *GString <cimport,nodecl> end
global function g_string_prepend_len(string: *GString, val: *gchar, len: gssize): *GString <cimport,nodecl> end
global function g_string_insert(string: *GString, pos: gssize, val: *gchar): *GString <cimport,nodecl> end
global function g_string_insert_c(string: *GString, pos: gssize, c: gchar): *GString <cimport,nodecl> end
global function g_string_insert_unichar(string: *GString, pos: gssize, wc: gunichar): *GString <cimport,nodecl> end
global function g_string_overwrite(string: *GString, pos: gsize, val: *gchar): *GString <cimport,nodecl> end
global function g_string_overwrite_len(string: *GString, pos: gsize, val: *gchar, len: gssize): *GString <cimport,nodecl> end
global function g_string_erase(string: *GString, pos: gssize, len: gssize): *GString <cimport,nodecl> end
global function g_string_replace(string: *GString, find: *gchar, replace: *gchar, limit: guint): guint <cimport,nodecl> end
global function g_string_ascii_down(string: *GString): *GString <cimport,nodecl> end
global function g_string_ascii_up(string: *GString): *GString <cimport,nodecl> end
global function g_string_vprintf(string: *GString, format: *gchar, args: cvalist): void <cimport,nodecl> end
global function g_string_printf(string: *GString, format: *gchar, ...: cvarargs): void <cimport,nodecl> end
global function g_string_append_vprintf(string: *GString, format: *gchar, args: cvalist): void <cimport,nodecl> end
global function g_string_append_printf(string: *GString, format: *gchar, ...: cvarargs): void <cimport,nodecl> end
global function g_string_append_uri_escaped(string: *GString, unescaped: *gchar, reserved_chars_allowed: *gchar, allow_utf8: gboolean): *GString <cimport,nodecl> end
global function g_string_append_c_inline(gstring: *GString, c: gchar): *GString <cimport,nodecl> end
global function g_string_down(string: *GString): *GString <cimport,nodecl> end
global function g_string_up(string: *GString): *GString <cimport,nodecl> end
global function g_io_channel_init(channel: *GIOChannel): void <cimport,nodecl> end
global function g_io_channel_ref(channel: *GIOChannel): *GIOChannel <cimport,nodecl> end
global function g_io_channel_unref(channel: *GIOChannel): void <cimport,nodecl> end
global function g_io_channel_read(channel: *GIOChannel, buf: *gchar, count: gsize, bytes_read: *gsize): GIOError <cimport,nodecl> end
global function g_io_channel_write(channel: *GIOChannel, buf: *gchar, count: gsize, bytes_written: *gsize): GIOError <cimport,nodecl> end
global function g_io_channel_seek(channel: *GIOChannel, offset: gint64, type: GSeekType): GIOError <cimport,nodecl> end
global function g_io_channel_close(channel: *GIOChannel): void <cimport,nodecl> end
global function g_io_channel_shutdown(channel: *GIOChannel, flush: gboolean, err: **GError): GIOStatus <cimport,nodecl> end
global function g_io_add_watch_full(channel: *GIOChannel, priority: gint, condition: GIOCondition, func: GIOFunc, user_data: gpointer, notify: GDestroyNotify): guint <cimport,nodecl> end
global function g_io_create_watch(channel: *GIOChannel, condition: GIOCondition): *GSource <cimport,nodecl> end
global function g_io_add_watch(channel: *GIOChannel, condition: GIOCondition, func: GIOFunc, user_data: gpointer): guint <cimport,nodecl> end
global function g_io_channel_set_buffer_size(channel: *GIOChannel, size: gsize): void <cimport,nodecl> end
global function g_io_channel_get_buffer_size(channel: *GIOChannel): gsize <cimport,nodecl> end
global function g_io_channel_get_buffer_condition(channel: *GIOChannel): GIOCondition <cimport,nodecl> end
global function g_io_channel_set_flags(channel: *GIOChannel, flags: GIOFlags, error: **GError): GIOStatus <cimport,nodecl> end
global function g_io_channel_get_flags(channel: *GIOChannel): GIOFlags <cimport,nodecl> end
global function g_io_channel_set_line_term(channel: *GIOChannel, line_term: *gchar, length: gint): void <cimport,nodecl> end
global function g_io_channel_get_line_term(channel: *GIOChannel, length: *gint): *gchar <cimport,nodecl> end
global function g_io_channel_set_buffered(channel: *GIOChannel, buffered: gboolean): void <cimport,nodecl> end
global function g_io_channel_get_buffered(channel: *GIOChannel): gboolean <cimport,nodecl> end
global function g_io_channel_set_encoding(channel: *GIOChannel, encoding: *gchar, error: **GError): GIOStatus <cimport,nodecl> end
global function g_io_channel_get_encoding(channel: *GIOChannel): *gchar <cimport,nodecl> end
global function g_io_channel_set_close_on_unref(channel: *GIOChannel, do_close: gboolean): void <cimport,nodecl> end
global function g_io_channel_get_close_on_unref(channel: *GIOChannel): gboolean <cimport,nodecl> end
global function g_io_channel_flush(channel: *GIOChannel, error: **GError): GIOStatus <cimport,nodecl> end
global function g_io_channel_read_line(channel: *GIOChannel, str_return: **gchar, length: *gsize, terminator_pos: *gsize, error: **GError): GIOStatus <cimport,nodecl> end
global function g_io_channel_read_line_string(channel: *GIOChannel, buffer: *GString, terminator_pos: *gsize, error: **GError): GIOStatus <cimport,nodecl> end
global function g_io_channel_read_to_end(channel: *GIOChannel, str_return: **gchar, length: *gsize, error: **GError): GIOStatus <cimport,nodecl> end
global function g_io_channel_read_chars(channel: *GIOChannel, buf: *gchar, count: gsize, bytes_read: *gsize, error: **GError): GIOStatus <cimport,nodecl> end
global function g_io_channel_read_unichar(channel: *GIOChannel, thechar: *gunichar, error: **GError): GIOStatus <cimport,nodecl> end
global function g_io_channel_write_chars(channel: *GIOChannel, buf: *gchar, count: gssize, bytes_written: *gsize, error: **GError): GIOStatus <cimport,nodecl> end
global function g_io_channel_write_unichar(channel: *GIOChannel, thechar: gunichar, error: **GError): GIOStatus <cimport,nodecl> end
global function g_io_channel_seek_position(channel: *GIOChannel, offset: gint64, type: GSeekType, error: **GError): GIOStatus <cimport,nodecl> end
global function g_io_channel_new_file(filename: *gchar, mode: *gchar, error: **GError): *GIOChannel <cimport,nodecl> end
global function g_io_channel_error_quark(): GQuark <cimport,nodecl> end
global function g_io_channel_error_from_errno(en: gint): GIOChannelError <cimport,nodecl> end
global function g_io_channel_unix_new(fd: cint): *GIOChannel <cimport,nodecl> end
global function g_io_channel_unix_get_fd(channel: *GIOChannel): gint <cimport,nodecl> end
global g_io_watch_funcs: GSourceFuncs <cimport,nodecl>
global function g_key_file_error_quark(): GQuark <cimport,nodecl> end
global function g_key_file_new(): *GKeyFile <cimport,nodecl> end
global function g_key_file_ref(key_file: *GKeyFile): *GKeyFile <cimport,nodecl> end
global function g_key_file_unref(key_file: *GKeyFile): void <cimport,nodecl> end
global function g_key_file_free(key_file: *GKeyFile): void <cimport,nodecl> end
global function g_key_file_set_list_separator(key_file: *GKeyFile, separator: gchar): void <cimport,nodecl> end
global function g_key_file_load_from_file(key_file: *GKeyFile, file: *gchar, flags: GKeyFileFlags, error: **GError): gboolean <cimport,nodecl> end
global function g_key_file_load_from_data(key_file: *GKeyFile, data: *gchar, length: gsize, flags: GKeyFileFlags, error: **GError): gboolean <cimport,nodecl> end
global function g_key_file_load_from_bytes(key_file: *GKeyFile, bytes: *GBytes, flags: GKeyFileFlags, error: **GError): gboolean <cimport,nodecl> end
global function g_key_file_load_from_dirs(key_file: *GKeyFile, file: *gchar, search_dirs: **gchar, full_path: **gchar, flags: GKeyFileFlags, error: **GError): gboolean <cimport,nodecl> end
global function g_key_file_load_from_data_dirs(key_file: *GKeyFile, file: *gchar, full_path: **gchar, flags: GKeyFileFlags, error: **GError): gboolean <cimport,nodecl> end
global function g_key_file_to_data(key_file: *GKeyFile, length: *gsize, error: **GError): *gchar <cimport,nodecl> end
global function g_key_file_save_to_file(key_file: *GKeyFile, filename: *gchar, error: **GError): gboolean <cimport,nodecl> end
global function g_key_file_get_start_group(key_file: *GKeyFile): *gchar <cimport,nodecl> end
global function g_key_file_get_groups(key_file: *GKeyFile, length: *gsize): **gchar <cimport,nodecl> end
global function g_key_file_get_keys(key_file: *GKeyFile, group_name: *gchar, length: *gsize, error: **GError): **gchar <cimport,nodecl> end
global function g_key_file_has_group(key_file: *GKeyFile, group_name: *gchar): gboolean <cimport,nodecl> end
global function g_key_file_has_key(key_file: *GKeyFile, group_name: *gchar, key: *gchar, error: **GError): gboolean <cimport,nodecl> end
global function g_key_file_get_value(key_file: *GKeyFile, group_name: *gchar, key: *gchar, error: **GError): *gchar <cimport,nodecl> end
global function g_key_file_set_value(key_file: *GKeyFile, group_name: *gchar, key: *gchar, value: *gchar): void <cimport,nodecl> end
global function g_key_file_get_string(key_file: *GKeyFile, group_name: *gchar, key: *gchar, error: **GError): *gchar <cimport,nodecl> end
global function g_key_file_set_string(key_file: *GKeyFile, group_name: *gchar, key: *gchar, string: *gchar): void <cimport,nodecl> end
global function g_key_file_get_locale_string(key_file: *GKeyFile, group_name: *gchar, key: *gchar, locale: *gchar, error: **GError): *gchar <cimport,nodecl> end
global function g_key_file_get_locale_for_key(key_file: *GKeyFile, group_name: *gchar, key: *gchar, locale: *gchar): *gchar <cimport,nodecl> end
global function g_key_file_set_locale_string(key_file: *GKeyFile, group_name: *gchar, key: *gchar, locale: *gchar, string: *gchar): void <cimport,nodecl> end
global function g_key_file_get_boolean(key_file: *GKeyFile, group_name: *gchar, key: *gchar, error: **GError): gboolean <cimport,nodecl> end
global function g_key_file_set_boolean(key_file: *GKeyFile, group_name: *gchar, key: *gchar, value: gboolean): void <cimport,nodecl> end
global function g_key_file_get_integer(key_file: *GKeyFile, group_name: *gchar, key: *gchar, error: **GError): gint <cimport,nodecl> end
global function g_key_file_set_integer(key_file: *GKeyFile, group_name: *gchar, key: *gchar, value: gint): void <cimport,nodecl> end
global function g_key_file_get_int64(key_file: *GKeyFile, group_name: *gchar, key: *gchar, error: **GError): gint64 <cimport,nodecl> end
global function g_key_file_set_int64(key_file: *GKeyFile, group_name: *gchar, key: *gchar, value: gint64): void <cimport,nodecl> end
global function g_key_file_get_uint64(key_file: *GKeyFile, group_name: *gchar, key: *gchar, error: **GError): guint64 <cimport,nodecl> end
global function g_key_file_set_uint64(key_file: *GKeyFile, group_name: *gchar, key: *gchar, value: guint64): void <cimport,nodecl> end
global function g_key_file_get_double(key_file: *GKeyFile, group_name: *gchar, key: *gchar, error: **GError): gdouble <cimport,nodecl> end
global function g_key_file_set_double(key_file: *GKeyFile, group_name: *gchar, key: *gchar, value: gdouble): void <cimport,nodecl> end
global function g_key_file_get_string_list(key_file: *GKeyFile, group_name: *gchar, key: *gchar, length: *gsize, error: **GError): **gchar <cimport,nodecl> end
global function g_key_file_set_string_list(key_file: *GKeyFile, group_name: *gchar, key: *gchar, list: *[0]*gchar, length: gsize): void <cimport,nodecl> end
global function g_key_file_get_locale_string_list(key_file: *GKeyFile, group_name: *gchar, key: *gchar, locale: *gchar, length: *gsize, error: **GError): **gchar <cimport,nodecl> end
global function g_key_file_set_locale_string_list(key_file: *GKeyFile, group_name: *gchar, key: *gchar, locale: *gchar, list: *[0]*gchar, length: gsize): void <cimport,nodecl> end
global function g_key_file_get_boolean_list(key_file: *GKeyFile, group_name: *gchar, key: *gchar, length: *gsize, error: **GError): *gboolean <cimport,nodecl> end
global function g_key_file_set_boolean_list(key_file: *GKeyFile, group_name: *gchar, key: *gchar, list: *[0]gboolean, length: gsize): void <cimport,nodecl> end
global function g_key_file_get_integer_list(key_file: *GKeyFile, group_name: *gchar, key: *gchar, length: *gsize, error: **GError): *gint <cimport,nodecl> end
global function g_key_file_set_double_list(key_file: *GKeyFile, group_name: *gchar, key: *gchar, list: *[0]gdouble, length: gsize): void <cimport,nodecl> end
global function g_key_file_get_double_list(key_file: *GKeyFile, group_name: *gchar, key: *gchar, length: *gsize, error: **GError): *gdouble <cimport,nodecl> end
global function g_key_file_set_integer_list(key_file: *GKeyFile, group_name: *gchar, key: *gchar, list: *[0]gint, length: gsize): void <cimport,nodecl> end
global function g_key_file_set_comment(key_file: *GKeyFile, group_name: *gchar, key: *gchar, comment: *gchar, error: **GError): gboolean <cimport,nodecl> end
global function g_key_file_get_comment(key_file: *GKeyFile, group_name: *gchar, key: *gchar, error: **GError): *gchar <cimport,nodecl> end
global function g_key_file_remove_comment(key_file: *GKeyFile, group_name: *gchar, key: *gchar, error: **GError): gboolean <cimport,nodecl> end
global function g_key_file_remove_key(key_file: *GKeyFile, group_name: *gchar, key: *gchar, error: **GError): gboolean <cimport,nodecl> end
global function g_key_file_remove_group(key_file: *GKeyFile, group_name: *gchar, error: **GError): gboolean <cimport,nodecl> end
global function g_mapped_file_new(filename: *gchar, writable: gboolean, error: **GError): *GMappedFile <cimport,nodecl> end
global function g_mapped_file_new_from_fd(fd: gint, writable: gboolean, error: **GError): *GMappedFile <cimport,nodecl> end
global function g_mapped_file_get_length(file: *GMappedFile): gsize <cimport,nodecl> end
global function g_mapped_file_get_contents(file: *GMappedFile): *gchar <cimport,nodecl> end
global function g_mapped_file_get_bytes(file: *GMappedFile): *GBytes <cimport,nodecl> end
global function g_mapped_file_ref(file: *GMappedFile): *GMappedFile <cimport,nodecl> end
global function g_mapped_file_unref(file: *GMappedFile): void <cimport,nodecl> end
global function g_mapped_file_free(file: *GMappedFile): void <cimport,nodecl> end
global function g_markup_error_quark(): GQuark <cimport,nodecl> end
global function g_markup_parse_context_new(parser: *GMarkupParser, flags: GMarkupParseFlags, user_data: gpointer, user_data_dnotify: GDestroyNotify): *GMarkupParseContext <cimport,nodecl> end
global function g_markup_parse_context_ref(context: *GMarkupParseContext): *GMarkupParseContext <cimport,nodecl> end
global function g_markup_parse_context_unref(context: *GMarkupParseContext): void <cimport,nodecl> end
global function g_markup_parse_context_free(context: *GMarkupParseContext): void <cimport,nodecl> end
global function g_markup_parse_context_parse(context: *GMarkupParseContext, text: *gchar, text_len: gssize, error: **GError): gboolean <cimport,nodecl> end
global function g_markup_parse_context_push(context: *GMarkupParseContext, parser: *GMarkupParser, user_data: gpointer): void <cimport,nodecl> end
global function g_markup_parse_context_pop(context: *GMarkupParseContext): gpointer <cimport,nodecl> end
global function g_markup_parse_context_end_parse(context: *GMarkupParseContext, error: **GError): gboolean <cimport,nodecl> end
global function g_markup_parse_context_get_element(context: *GMarkupParseContext): *gchar <cimport,nodecl> end
global function g_markup_parse_context_get_element_stack(context: *GMarkupParseContext): *GSList <cimport,nodecl> end
global function g_markup_parse_context_get_position(context: *GMarkupParseContext, line_number: *gint, char_number: *gint): void <cimport,nodecl> end
global function g_markup_parse_context_get_user_data(context: *GMarkupParseContext): gpointer <cimport,nodecl> end
global function g_markup_escape_text(text: *gchar, length: gssize): *gchar <cimport,nodecl> end
global function g_markup_printf_escaped(format: cstring, ...: cvarargs): *gchar <cimport,nodecl> end
global function g_markup_vprintf_escaped(format: cstring, args: cvalist): *gchar <cimport,nodecl> end
global function g_markup_collect_attributes(element_name: *gchar, attribute_names: **gchar, attribute_values: **gchar, error: **GError, first_type: GMarkupCollectType, first_attr: *gchar, ...: cvarargs): gboolean <cimport,nodecl> end
global function g_variant_type_string_is_valid(type_string: *gchar): gboolean <cimport,nodecl> end
global function g_variant_type_string_scan(string: *gchar, limit: *gchar, endptr: **gchar): gboolean <cimport,nodecl> end
global function g_variant_type_free(type: *GVariantType): void <cimport,nodecl> end
global function g_variant_type_copy(type: *GVariantType): *GVariantType <cimport,nodecl> end
global function g_variant_type_new(type_string: *gchar): *GVariantType <cimport,nodecl> end
global function g_variant_type_get_string_length(type: *GVariantType): gsize <cimport,nodecl> end
global function g_variant_type_peek_string(type: *GVariantType): *gchar <cimport,nodecl> end
global function g_variant_type_dup_string(type: *GVariantType): *gchar <cimport,nodecl> end
global function g_variant_type_is_definite(type: *GVariantType): gboolean <cimport,nodecl> end
global function g_variant_type_is_container(type: *GVariantType): gboolean <cimport,nodecl> end
global function g_variant_type_is_basic(type: *GVariantType): gboolean <cimport,nodecl> end
global function g_variant_type_is_maybe(type: *GVariantType): gboolean <cimport,nodecl> end
global function g_variant_type_is_array(type: *GVariantType): gboolean <cimport,nodecl> end
global function g_variant_type_is_tuple(type: *GVariantType): gboolean <cimport,nodecl> end
global function g_variant_type_is_dict_entry(type: *GVariantType): gboolean <cimport,nodecl> end
global function g_variant_type_is_variant(type: *GVariantType): gboolean <cimport,nodecl> end
global function g_variant_type_hash(type: gconstpointer): guint <cimport,nodecl> end
global function g_variant_type_equal(type1: gconstpointer, type2: gconstpointer): gboolean <cimport,nodecl> end
global function g_variant_type_is_subtype_of(type: *GVariantType, supertype: *GVariantType): gboolean <cimport,nodecl> end
global function g_variant_type_element(type: *GVariantType): *GVariantType <cimport,nodecl> end
global function g_variant_type_first(type: *GVariantType): *GVariantType <cimport,nodecl> end
global function g_variant_type_next(type: *GVariantType): *GVariantType <cimport,nodecl> end
global function g_variant_type_n_items(type: *GVariantType): gsize <cimport,nodecl> end
global function g_variant_type_key(type: *GVariantType): *GVariantType <cimport,nodecl> end
global function g_variant_type_value(type: *GVariantType): *GVariantType <cimport,nodecl> end
global function g_variant_type_new_array(element: *GVariantType): *GVariantType <cimport,nodecl> end
global function g_variant_type_new_maybe(element: *GVariantType): *GVariantType <cimport,nodecl> end
global function g_variant_type_new_tuple(items: **GVariantType, length: gint): *GVariantType <cimport,nodecl> end
global function g_variant_type_new_dict_entry(key: *GVariantType, value: *GVariantType): *GVariantType <cimport,nodecl> end
global function g_variant_type_checked_(a1: *gchar): *GVariantType <cimport,nodecl> end
global function g_variant_type_string_get_depth_(type_string: *gchar): gsize <cimport,nodecl> end
global function g_variant_unref(value: *GVariant): void <cimport,nodecl> end
global function g_variant_ref(value: *GVariant): *GVariant <cimport,nodecl> end
global function g_variant_ref_sink(value: *GVariant): *GVariant <cimport,nodecl> end
global function g_variant_is_floating(value: *GVariant): gboolean <cimport,nodecl> end
global function g_variant_take_ref(value: *GVariant): *GVariant <cimport,nodecl> end
global function g_variant_get_type(value: *GVariant): *GVariantType <cimport,nodecl> end
global function g_variant_get_type_string(value: *GVariant): *gchar <cimport,nodecl> end
global function g_variant_is_of_type(value: *GVariant, type: *GVariantType): gboolean <cimport,nodecl> end
global function g_variant_is_container(value: *GVariant): gboolean <cimport,nodecl> end
global function g_variant_classify(value: *GVariant): GVariantClass <cimport,nodecl> end
global function g_variant_new_boolean(value: gboolean): *GVariant <cimport,nodecl> end
global function g_variant_new_byte(value: guint8): *GVariant <cimport,nodecl> end
global function g_variant_new_int16(value: gint16): *GVariant <cimport,nodecl> end
global function g_variant_new_uint16(value: guint16): *GVariant <cimport,nodecl> end
global function g_variant_new_int32(value: gint32): *GVariant <cimport,nodecl> end
global function g_variant_new_uint32(value: guint32): *GVariant <cimport,nodecl> end
global function g_variant_new_int64(value: gint64): *GVariant <cimport,nodecl> end
global function g_variant_new_uint64(value: guint64): *GVariant <cimport,nodecl> end
global function g_variant_new_handle(value: gint32): *GVariant <cimport,nodecl> end
global function g_variant_new_double(value: gdouble): *GVariant <cimport,nodecl> end
global function g_variant_new_string(string: *gchar): *GVariant <cimport,nodecl> end
global function g_variant_new_take_string(string: *gchar): *GVariant <cimport,nodecl> end
global function g_variant_new_printf(format_string: *gchar, ...: cvarargs): *GVariant <cimport,nodecl> end
global function g_variant_new_object_path(object_path: *gchar): *GVariant <cimport,nodecl> end
global function g_variant_is_object_path(string: *gchar): gboolean <cimport,nodecl> end
global function g_variant_new_signature(signature: *gchar): *GVariant <cimport,nodecl> end
global function g_variant_is_signature(string: *gchar): gboolean <cimport,nodecl> end
global function g_variant_new_variant(value: *GVariant): *GVariant <cimport,nodecl> end
global function g_variant_new_strv(strv: **gchar, length: gssize): *GVariant <cimport,nodecl> end
global function g_variant_new_objv(strv: **gchar, length: gssize): *GVariant <cimport,nodecl> end
global function g_variant_new_bytestring(string: *gchar): *GVariant <cimport,nodecl> end
global function g_variant_new_bytestring_array(strv: **gchar, length: gssize): *GVariant <cimport,nodecl> end
global function g_variant_new_fixed_array(element_type: *GVariantType, elements: gconstpointer, n_elements: gsize, element_size: gsize): *GVariant <cimport,nodecl> end
global function g_variant_get_boolean(value: *GVariant): gboolean <cimport,nodecl> end
global function g_variant_get_byte(value: *GVariant): guint8 <cimport,nodecl> end
global function g_variant_get_int16(value: *GVariant): gint16 <cimport,nodecl> end
global function g_variant_get_uint16(value: *GVariant): guint16 <cimport,nodecl> end
global function g_variant_get_int32(value: *GVariant): gint32 <cimport,nodecl> end
global function g_variant_get_uint32(value: *GVariant): guint32 <cimport,nodecl> end
global function g_variant_get_int64(value: *GVariant): gint64 <cimport,nodecl> end
global function g_variant_get_uint64(value: *GVariant): guint64 <cimport,nodecl> end
global function g_variant_get_handle(value: *GVariant): gint32 <cimport,nodecl> end
global function g_variant_get_double(value: *GVariant): gdouble <cimport,nodecl> end
global function g_variant_get_variant(value: *GVariant): *GVariant <cimport,nodecl> end
global function g_variant_get_string(value: *GVariant, length: *gsize): *gchar <cimport,nodecl> end
global function g_variant_dup_string(value: *GVariant, length: *gsize): *gchar <cimport,nodecl> end
global function g_variant_get_strv(value: *GVariant, length: *gsize): **gchar <cimport,nodecl> end
global function g_variant_dup_strv(value: *GVariant, length: *gsize): **gchar <cimport,nodecl> end
global function g_variant_get_objv(value: *GVariant, length: *gsize): **gchar <cimport,nodecl> end
global function g_variant_dup_objv(value: *GVariant, length: *gsize): **gchar <cimport,nodecl> end
global function g_variant_get_bytestring(value: *GVariant): *gchar <cimport,nodecl> end
global function g_variant_dup_bytestring(value: *GVariant, length: *gsize): *gchar <cimport,nodecl> end
global function g_variant_get_bytestring_array(value: *GVariant, length: *gsize): **gchar <cimport,nodecl> end
global function g_variant_dup_bytestring_array(value: *GVariant, length: *gsize): **gchar <cimport,nodecl> end
global function g_variant_new_maybe(child_type: *GVariantType, child: *GVariant): *GVariant <cimport,nodecl> end
global function g_variant_new_array(child_type: *GVariantType, children: **GVariant, n_children: gsize): *GVariant <cimport,nodecl> end
global function g_variant_new_tuple(children: **GVariant, n_children: gsize): *GVariant <cimport,nodecl> end
global function g_variant_new_dict_entry(key: *GVariant, value: *GVariant): *GVariant <cimport,nodecl> end
global function g_variant_get_maybe(value: *GVariant): *GVariant <cimport,nodecl> end
global function g_variant_n_children(value: *GVariant): gsize <cimport,nodecl> end
global function g_variant_get_child(value: *GVariant, index_: gsize, format_string: *gchar, ...: cvarargs): void <cimport,nodecl> end
global function g_variant_get_child_value(value: *GVariant, index_: gsize): *GVariant <cimport,nodecl> end
global function g_variant_lookup(dictionary: *GVariant, key: *gchar, format_string: *gchar, ...: cvarargs): gboolean <cimport,nodecl> end
global function g_variant_lookup_value(dictionary: *GVariant, key: *gchar, expected_type: *GVariantType): *GVariant <cimport,nodecl> end
global function g_variant_get_fixed_array(value: *GVariant, n_elements: *gsize, element_size: gsize): gconstpointer <cimport,nodecl> end
global function g_variant_get_size(value: *GVariant): gsize <cimport,nodecl> end
global function g_variant_get_data(value: *GVariant): gconstpointer <cimport,nodecl> end
global function g_variant_get_data_as_bytes(value: *GVariant): *GBytes <cimport,nodecl> end
global function g_variant_store(value: *GVariant, data: gpointer): void <cimport,nodecl> end
global function g_variant_print(value: *GVariant, type_annotate: gboolean): *gchar <cimport,nodecl> end
global function g_variant_print_string(value: *GVariant, string: *GString, type_annotate: gboolean): *GString <cimport,nodecl> end
global function g_variant_hash(value: gconstpointer): guint <cimport,nodecl> end
global function g_variant_equal(one: gconstpointer, two: gconstpointer): gboolean <cimport,nodecl> end
global function g_variant_get_normal_form(value: *GVariant): *GVariant <cimport,nodecl> end
global function g_variant_is_normal_form(value: *GVariant): gboolean <cimport,nodecl> end
global function g_variant_byteswap(value: *GVariant): *GVariant <cimport,nodecl> end
global function g_variant_new_from_bytes(type: *GVariantType, bytes: *GBytes, trusted: gboolean): *GVariant <cimport,nodecl> end
global function g_variant_new_from_data(type: *GVariantType, data: gconstpointer, size: gsize, trusted: gboolean, notify: GDestroyNotify, user_data: gpointer): *GVariant <cimport,nodecl> end
global function g_variant_iter_new(value: *GVariant): *GVariantIter <cimport,nodecl> end
global function g_variant_iter_init(iter: *GVariantIter, value: *GVariant): gsize <cimport,nodecl> end
global function g_variant_iter_copy(iter: *GVariantIter): *GVariantIter <cimport,nodecl> end
global function g_variant_iter_n_children(iter: *GVariantIter): gsize <cimport,nodecl> end
global function g_variant_iter_free(iter: *GVariantIter): void <cimport,nodecl> end
global function g_variant_iter_next_value(iter: *GVariantIter): *GVariant <cimport,nodecl> end
global function g_variant_iter_next(iter: *GVariantIter, format_string: *gchar, ...: cvarargs): gboolean <cimport,nodecl> end
global function g_variant_iter_loop(iter: *GVariantIter, format_string: *gchar, ...: cvarargs): gboolean <cimport,nodecl> end
global function g_variant_parser_get_error_quark(): GQuark <cimport,nodecl> end
global function g_variant_parse_error_quark(): GQuark <cimport,nodecl> end
global function g_variant_builder_new(type: *GVariantType): *GVariantBuilder <cimport,nodecl> end
global function g_variant_builder_unref(builder: *GVariantBuilder): void <cimport,nodecl> end
global function g_variant_builder_ref(builder: *GVariantBuilder): *GVariantBuilder <cimport,nodecl> end
global function g_variant_builder_init(builder: *GVariantBuilder, type: *GVariantType): void <cimport,nodecl> end
global function g_variant_builder_end(builder: *GVariantBuilder): *GVariant <cimport,nodecl> end
global function g_variant_builder_clear(builder: *GVariantBuilder): void <cimport,nodecl> end
global function g_variant_builder_open(builder: *GVariantBuilder, type: *GVariantType): void <cimport,nodecl> end
global function g_variant_builder_close(builder: *GVariantBuilder): void <cimport,nodecl> end
global function g_variant_builder_add_value(builder: *GVariantBuilder, value: *GVariant): void <cimport,nodecl> end
global function g_variant_builder_add(builder: *GVariantBuilder, format_string: *gchar, ...: cvarargs): void <cimport,nodecl> end
global function g_variant_builder_add_parsed(builder: *GVariantBuilder, format: *gchar, ...: cvarargs): void <cimport,nodecl> end
global function g_variant_new(format_string: *gchar, ...: cvarargs): *GVariant <cimport,nodecl> end
global function g_variant_get(value: *GVariant, format_string: *gchar, ...: cvarargs): void <cimport,nodecl> end
global function g_variant_new_va(format_string: *gchar, endptr: **gchar, app: *cvalist): *GVariant <cimport,nodecl> end
global function g_variant_get_va(value: *GVariant, format_string: *gchar, endptr: **gchar, app: *cvalist): void <cimport,nodecl> end
global function g_variant_check_format_string(value: *GVariant, format_string: *gchar, copy_only: gboolean): gboolean <cimport,nodecl> end
global function g_variant_parse(type: *GVariantType, text: *gchar, limit: *gchar, endptr: **gchar, error: **GError): *GVariant <cimport,nodecl> end
global function g_variant_new_parsed(format: *gchar, ...: cvarargs): *GVariant <cimport,nodecl> end
global function g_variant_new_parsed_va(format: *gchar, app: *cvalist): *GVariant <cimport,nodecl> end
global function g_variant_parse_error_print_context(error: *GError, source_str: *gchar): *gchar <cimport,nodecl> end
global function g_variant_compare(one: gconstpointer, two: gconstpointer): gint <cimport,nodecl> end
global function g_variant_dict_new(from_asv: *GVariant): *GVariantDict <cimport,nodecl> end
global function g_variant_dict_init(dict: *GVariantDict, from_asv: *GVariant): void <cimport,nodecl> end
global function g_variant_dict_lookup(dict: *GVariantDict, key: *gchar, format_string: *gchar, ...: cvarargs): gboolean <cimport,nodecl> end
global function g_variant_dict_lookup_value(dict: *GVariantDict, key: *gchar, expected_type: *GVariantType): *GVariant <cimport,nodecl> end
global function g_variant_dict_contains(dict: *GVariantDict, key: *gchar): gboolean <cimport,nodecl> end
global function g_variant_dict_insert(dict: *GVariantDict, key: *gchar, format_string: *gchar, ...: cvarargs): void <cimport,nodecl> end
global function g_variant_dict_insert_value(dict: *GVariantDict, key: *gchar, value: *GVariant): void <cimport,nodecl> end
global function g_variant_dict_remove(dict: *GVariantDict, key: *gchar): gboolean <cimport,nodecl> end
global function g_variant_dict_clear(dict: *GVariantDict): void <cimport,nodecl> end
global function g_variant_dict_end(dict: *GVariantDict): *GVariant <cimport,nodecl> end
global function g_variant_dict_ref(dict: *GVariantDict): *GVariantDict <cimport,nodecl> end
global function g_variant_dict_unref(dict: *GVariantDict): void <cimport,nodecl> end
global function g_printf_string_upper_bound(format: *gchar, args: cvalist): gsize <cimport,nodecl> end
global function g_log_set_handler(log_domain: *gchar, log_levels: GLogLevelFlags, log_func: GLogFunc, user_data: gpointer): guint <cimport,nodecl> end
global function g_log_set_handler_full(log_domain: *gchar, log_levels: GLogLevelFlags, log_func: GLogFunc, user_data: gpointer, destroy: GDestroyNotify): guint <cimport,nodecl> end
global function g_log_remove_handler(log_domain: *gchar, handler_id: guint): void <cimport,nodecl> end
global function g_log_default_handler(log_domain: *gchar, log_level: GLogLevelFlags, message: *gchar, unused_data: gpointer): void <cimport,nodecl> end
global function g_log_set_default_handler(log_func: GLogFunc, user_data: gpointer): GLogFunc <cimport,nodecl> end
global function g_log(log_domain: *gchar, log_level: GLogLevelFlags, format: *gchar, ...: cvarargs): void <cimport,nodecl> end
global function g_logv(log_domain: *gchar, log_level: GLogLevelFlags, format: *gchar, args: cvalist): void <cimport,nodecl> end
global function g_log_set_fatal_mask(log_domain: *gchar, fatal_mask: GLogLevelFlags): GLogLevelFlags <cimport,nodecl> end
global function g_log_set_always_fatal(fatal_mask: GLogLevelFlags): GLogLevelFlags <cimport,nodecl> end
global function g_log_structured(log_domain: *gchar, log_level: GLogLevelFlags, ...: cvarargs): void <cimport,nodecl> end
global function g_log_structured_array(log_level: GLogLevelFlags, fields: *GLogField, n_fields: gsize): void <cimport,nodecl> end
global function g_log_variant(log_domain: *gchar, log_level: GLogLevelFlags, fields: *GVariant): void <cimport,nodecl> end
global function g_log_set_writer_func(func: GLogWriterFunc, user_data: gpointer, user_data_free: GDestroyNotify): void <cimport,nodecl> end
global function g_log_writer_supports_color(output_fd: gint): gboolean <cimport,nodecl> end
global function g_log_writer_is_journald(output_fd: gint): gboolean <cimport,nodecl> end
global function g_log_writer_format_fields(log_level: GLogLevelFlags, fields: *GLogField, n_fields: gsize, use_color: gboolean): *gchar <cimport,nodecl> end
global function g_log_writer_journald(log_level: GLogLevelFlags, fields: *GLogField, n_fields: gsize, user_data: gpointer): GLogWriterOutput <cimport,nodecl> end
global function g_log_writer_standard_streams(log_level: GLogLevelFlags, fields: *GLogField, n_fields: gsize, user_data: gpointer): GLogWriterOutput <cimport,nodecl> end
global function g_log_writer_default(log_level: GLogLevelFlags, fields: *GLogField, n_fields: gsize, user_data: gpointer): GLogWriterOutput <cimport,nodecl> end
global function g_log_writer_default_set_use_stderr(use_stderr: gboolean): void <cimport,nodecl> end
global function g_log_writer_default_would_drop(log_level: GLogLevelFlags, log_domain: cstring): gboolean <cimport,nodecl> end
global function _g_log_fallback_handler(log_domain: *gchar, log_level: GLogLevelFlags, message: *gchar, unused_data: gpointer): void <cimport,nodecl> end
global function g_return_if_fail_warning(log_domain: cstring, pretty_function: cstring, expression: cstring): void <cimport,nodecl> end
global function g_warn_message(domain: cstring, file: cstring, line: cint, func: cstring, warnexpr: cstring): void <cimport,nodecl> end
global function g_assert_warning(log_domain: cstring, file: cstring, line: cint, pretty_function: cstring, expression: cstring): void <cimport,nodecl> end
global function g_log_structured_standard(log_domain: *gchar, log_level: GLogLevelFlags, file: *gchar, line: *gchar, func: *gchar, message_format: *gchar, ...: cvarargs): void <cimport,nodecl> end
global function g_print(format: *gchar, ...: cvarargs): void <cimport,nodecl> end
global function g_set_print_handler(func: GPrintFunc): GPrintFunc <cimport,nodecl> end
global function g_printerr(format: *gchar, ...: cvarargs): void <cimport,nodecl> end
global function g_set_printerr_handler(func: GPrintFunc): GPrintFunc <cimport,nodecl> end
global function g_option_error_quark(): GQuark <cimport,nodecl> end
global function g_option_context_new(parameter_string: *gchar): *GOptionContext <cimport,nodecl> end
global function g_option_context_set_summary(context: *GOptionContext, summary: *gchar): void <cimport,nodecl> end
global function g_option_context_get_summary(context: *GOptionContext): *gchar <cimport,nodecl> end
global function g_option_context_set_description(context: *GOptionContext, description: *gchar): void <cimport,nodecl> end
global function g_option_context_get_description(context: *GOptionContext): *gchar <cimport,nodecl> end
global function g_option_context_free(context: *GOptionContext): void <cimport,nodecl> end
global function g_option_context_set_help_enabled(context: *GOptionContext, help_enabled: gboolean): void <cimport,nodecl> end
global function g_option_context_get_help_enabled(context: *GOptionContext): gboolean <cimport,nodecl> end
global function g_option_context_set_ignore_unknown_options(context: *GOptionContext, ignore_unknown: gboolean): void <cimport,nodecl> end
global function g_option_context_get_ignore_unknown_options(context: *GOptionContext): gboolean <cimport,nodecl> end
global function g_option_context_set_strict_posix(context: *GOptionContext, strict_posix: gboolean): void <cimport,nodecl> end
global function g_option_context_get_strict_posix(context: *GOptionContext): gboolean <cimport,nodecl> end
global function g_option_context_add_main_entries(context: *GOptionContext, entries: *GOptionEntry, translation_domain: *gchar): void <cimport,nodecl> end
global function g_option_context_parse(context: *GOptionContext, argc: *gint, argv: ***gchar, error: **GError): gboolean <cimport,nodecl> end
global function g_option_context_parse_strv(context: *GOptionContext, arguments: ***gchar, error: **GError): gboolean <cimport,nodecl> end
global function g_option_context_set_translate_func(context: *GOptionContext, func: GTranslateFunc, data: gpointer, destroy_notify: GDestroyNotify): void <cimport,nodecl> end
global function g_option_context_set_translation_domain(context: *GOptionContext, domain: *gchar): void <cimport,nodecl> end
global function g_option_context_add_group(context: *GOptionContext, group: *GOptionGroup): void <cimport,nodecl> end
global function g_option_context_set_main_group(context: *GOptionContext, group: *GOptionGroup): void <cimport,nodecl> end
global function g_option_context_get_main_group(context: *GOptionContext): *GOptionGroup <cimport,nodecl> end
global function g_option_context_get_help(context: *GOptionContext, main_help: gboolean, group: *GOptionGroup): *gchar <cimport,nodecl> end
global function g_option_group_new(name: *gchar, description: *gchar, help_description: *gchar, user_data: gpointer, destroy: GDestroyNotify): *GOptionGroup <cimport,nodecl> end
global function g_option_group_set_parse_hooks(group: *GOptionGroup, pre_parse_func: GOptionParseFunc, post_parse_func: GOptionParseFunc): void <cimport,nodecl> end
global function g_option_group_set_error_hook(group: *GOptionGroup, error_func: GOptionErrorFunc): void <cimport,nodecl> end
global function g_option_group_free(group: *GOptionGroup): void <cimport,nodecl> end
global function g_option_group_ref(group: *GOptionGroup): *GOptionGroup <cimport,nodecl> end
global function g_option_group_unref(group: *GOptionGroup): void <cimport,nodecl> end
global function g_option_group_add_entries(group: *GOptionGroup, entries: *GOptionEntry): void <cimport,nodecl> end
global function g_option_group_set_translate_func(group: *GOptionGroup, func: GTranslateFunc, data: gpointer, destroy_notify: GDestroyNotify): void <cimport,nodecl> end
global function g_option_group_set_translation_domain(group: *GOptionGroup, domain: *gchar): void <cimport,nodecl> end
global function g_pattern_spec_new(pattern: *gchar): *GPatternSpec <cimport,nodecl> end
global function g_pattern_spec_free(pspec: *GPatternSpec): void <cimport,nodecl> end
global function g_pattern_spec_copy(pspec: *GPatternSpec): *GPatternSpec <cimport,nodecl> end
global function g_pattern_spec_equal(pspec1: *GPatternSpec, pspec2: *GPatternSpec): gboolean <cimport,nodecl> end
global function g_pattern_spec_match(pspec: *GPatternSpec, string_length: gsize, string: *gchar, string_reversed: *gchar): gboolean <cimport,nodecl> end
global function g_pattern_spec_match_string(pspec: *GPatternSpec, string: *gchar): gboolean <cimport,nodecl> end
global function g_pattern_match(pspec: *GPatternSpec, string_length: guint, string: *gchar, string_reversed: *gchar): gboolean <cimport,nodecl> end
global function g_pattern_match_string(pspec: *GPatternSpec, string: *gchar): gboolean <cimport,nodecl> end
global function g_pattern_match_simple(pattern: *gchar, string: *gchar): gboolean <cimport,nodecl> end
global function g_spaced_primes_closest(num: guint): guint <cimport,nodecl> end
global function g_qsort_with_data(pbase: gconstpointer, total_elems: gint, size: gsize, compare_func: GCompareDataFunc, user_data: gpointer): void <cimport,nodecl> end
global function g_queue_new(): *GQueue <cimport,nodecl> end
global function g_queue_free(queue: *GQueue): void <cimport,nodecl> end
global function g_queue_free_full(queue: *GQueue, free_func: GDestroyNotify): void <cimport,nodecl> end
global function g_queue_init(queue: *GQueue): void <cimport,nodecl> end
global function g_queue_clear(queue: *GQueue): void <cimport,nodecl> end
global function g_queue_is_empty(queue: *GQueue): gboolean <cimport,nodecl> end
global function g_queue_clear_full(queue: *GQueue, free_func: GDestroyNotify): void <cimport,nodecl> end
global function g_queue_get_length(queue: *GQueue): guint <cimport,nodecl> end
global function g_queue_reverse(queue: *GQueue): void <cimport,nodecl> end
global function g_queue_copy(queue: *GQueue): *GQueue <cimport,nodecl> end
global function g_queue_foreach(queue: *GQueue, func: GFunc, user_data: gpointer): void <cimport,nodecl> end
global function g_queue_find(queue: *GQueue, data: gconstpointer): *GList <cimport,nodecl> end
global function g_queue_find_custom(queue: *GQueue, data: gconstpointer, func: GCompareFunc): *GList <cimport,nodecl> end
global function g_queue_sort(queue: *GQueue, compare_func: GCompareDataFunc, user_data: gpointer): void <cimport,nodecl> end
global function g_queue_push_head(queue: *GQueue, data: gpointer): void <cimport,nodecl> end
global function g_queue_push_tail(queue: *GQueue, data: gpointer): void <cimport,nodecl> end
global function g_queue_push_nth(queue: *GQueue, data: gpointer, n: gint): void <cimport,nodecl> end
global function g_queue_pop_head(queue: *GQueue): gpointer <cimport,nodecl> end
global function g_queue_pop_tail(queue: *GQueue): gpointer <cimport,nodecl> end
global function g_queue_pop_nth(queue: *GQueue, n: guint): gpointer <cimport,nodecl> end
global function g_queue_peek_head(queue: *GQueue): gpointer <cimport,nodecl> end
global function g_queue_peek_tail(queue: *GQueue): gpointer <cimport,nodecl> end
global function g_queue_peek_nth(queue: *GQueue, n: guint): gpointer <cimport,nodecl> end
global function g_queue_index(queue: *GQueue, data: gconstpointer): gint <cimport,nodecl> end
global function g_queue_remove(queue: *GQueue, data: gconstpointer): gboolean <cimport,nodecl> end
global function g_queue_remove_all(queue: *GQueue, data: gconstpointer): guint <cimport,nodecl> end
global function g_queue_insert_before(queue: *GQueue, sibling: *GList, data: gpointer): void <cimport,nodecl> end
global function g_queue_insert_before_link(queue: *GQueue, sibling: *GList, link_: *GList): void <cimport,nodecl> end
global function g_queue_insert_after(queue: *GQueue, sibling: *GList, data: gpointer): void <cimport,nodecl> end
global function g_queue_insert_after_link(queue: *GQueue, sibling: *GList, link_: *GList): void <cimport,nodecl> end
global function g_queue_insert_sorted(queue: *GQueue, data: gpointer, func: GCompareDataFunc, user_data: gpointer): void <cimport,nodecl> end
global function g_queue_push_head_link(queue: *GQueue, link_: *GList): void <cimport,nodecl> end
global function g_queue_push_tail_link(queue: *GQueue, link_: *GList): void <cimport,nodecl> end
global function g_queue_push_nth_link(queue: *GQueue, n: gint, link_: *GList): void <cimport,nodecl> end
global function g_queue_pop_head_link(queue: *GQueue): *GList <cimport,nodecl> end
global function g_queue_pop_tail_link(queue: *GQueue): *GList <cimport,nodecl> end
global function g_queue_pop_nth_link(queue: *GQueue, n: guint): *GList <cimport,nodecl> end
global function g_queue_peek_head_link(queue: *GQueue): *GList <cimport,nodecl> end
global function g_queue_peek_tail_link(queue: *GQueue): *GList <cimport,nodecl> end
global function g_queue_peek_nth_link(queue: *GQueue, n: guint): *GList <cimport,nodecl> end
global function g_queue_link_index(queue: *GQueue, link_: *GList): gint <cimport,nodecl> end
global function g_queue_unlink(queue: *GQueue, link_: *GList): void <cimport,nodecl> end
global function g_queue_delete_link(queue: *GQueue, link_: *GList): void <cimport,nodecl> end
global function g_rand_new_with_seed(seed: guint32): *GRand <cimport,nodecl> end
global function g_rand_new_with_seed_array(seed: *guint32, seed_length: guint): *GRand <cimport,nodecl> end
global function g_rand_new(): *GRand <cimport,nodecl> end
global function g_rand_free(rand_: *GRand): void <cimport,nodecl> end
global function g_rand_copy(rand_: *GRand): *GRand <cimport,nodecl> end
global function g_rand_set_seed(rand_: *GRand, seed: guint32): void <cimport,nodecl> end
global function g_rand_set_seed_array(rand_: *GRand, seed: *guint32, seed_length: guint): void <cimport,nodecl> end
global function g_rand_int(rand_: *GRand): guint32 <cimport,nodecl> end
global function g_rand_int_range(rand_: *GRand, begin: gint32, end_: gint32): gint32 <cimport,nodecl> end
global function g_rand_double(rand_: *GRand): gdouble <cimport,nodecl> end
global function g_rand_double_range(rand_: *GRand, begin: gdouble, end_: gdouble): gdouble <cimport,nodecl> end
global function g_random_set_seed(seed: guint32): void <cimport,nodecl> end
global function g_random_int(): guint32 <cimport,nodecl> end
global function g_random_int_range(begin: gint32, end_: gint32): gint32 <cimport,nodecl> end
global function g_random_double(): gdouble <cimport,nodecl> end
global function g_random_double_range(begin: gdouble, end_: gdouble): gdouble <cimport,nodecl> end
global function g_rc_box_alloc(block_size: gsize): gpointer <cimport,nodecl> end
global function g_rc_box_alloc0(block_size: gsize): gpointer <cimport,nodecl> end
global function g_rc_box_dup(block_size: gsize, mem_block: gconstpointer): gpointer <cimport,nodecl> end
global function g_rc_box_acquire(mem_block: gpointer): gpointer <cimport,nodecl> end
global function g_rc_box_release(mem_block: gpointer): void <cimport,nodecl> end
global function g_rc_box_release_full(mem_block: gpointer, clear_func: GDestroyNotify): void <cimport,nodecl> end
global function g_rc_box_get_size(mem_block: gpointer): gsize <cimport,nodecl> end
global function g_atomic_rc_box_alloc(block_size: gsize): gpointer <cimport,nodecl> end
global function g_atomic_rc_box_alloc0(block_size: gsize): gpointer <cimport,nodecl> end
global function g_atomic_rc_box_dup(block_size: gsize, mem_block: gconstpointer): gpointer <cimport,nodecl> end
global function g_atomic_rc_box_acquire(mem_block: gpointer): gpointer <cimport,nodecl> end
global function g_atomic_rc_box_release(mem_block: gpointer): void <cimport,nodecl> end
global function g_atomic_rc_box_release_full(mem_block: gpointer, clear_func: GDestroyNotify): void <cimport,nodecl> end
global function g_atomic_rc_box_get_size(mem_block: gpointer): gsize <cimport,nodecl> end
global function g_ref_count_init(rc: *grefcount): void <cimport,nodecl> end
global function g_ref_count_inc(rc: *grefcount): void <cimport,nodecl> end
global function g_ref_count_dec(rc: *grefcount): gboolean <cimport,nodecl> end
global function g_ref_count_compare(rc: *grefcount, val: gint): gboolean <cimport,nodecl> end
global function g_atomic_ref_count_init(arc: *gatomicrefcount): void <cimport,nodecl> end
global function g_atomic_ref_count_inc(arc: *gatomicrefcount): void <cimport,nodecl> end
global function g_atomic_ref_count_dec(arc: *gatomicrefcount): gboolean <cimport,nodecl> end
global function g_atomic_ref_count_compare(arc: *gatomicrefcount, val: gint): gboolean <cimport,nodecl> end
global function g_ref_string_new(str: cstring): cstring <cimport,nodecl> end
global function g_ref_string_new_len(str: cstring, len: gssize): cstring <cimport,nodecl> end
global function g_ref_string_new_intern(str: cstring): cstring <cimport,nodecl> end
global function g_ref_string_acquire(str: cstring): cstring <cimport,nodecl> end
global function g_ref_string_release(str: cstring): void <cimport,nodecl> end
global function g_ref_string_length(str: cstring): gsize <cimport,nodecl> end
global function g_regex_error_quark(): GQuark <cimport,nodecl> end
global function g_regex_new(pattern: *gchar, compile_options: GRegexCompileFlags, match_options: GRegexMatchFlags, error: **GError): *GRegex <cimport,nodecl> end
global function g_regex_ref(regex: *GRegex): *GRegex <cimport,nodecl> end
global function g_regex_unref(regex: *GRegex): void <cimport,nodecl> end
global function g_regex_get_pattern(regex: *GRegex): *gchar <cimport,nodecl> end
global function g_regex_get_max_backref(regex: *GRegex): gint <cimport,nodecl> end
global function g_regex_get_capture_count(regex: *GRegex): gint <cimport,nodecl> end
global function g_regex_get_has_cr_or_lf(regex: *GRegex): gboolean <cimport,nodecl> end
global function g_regex_get_max_lookbehind(regex: *GRegex): gint <cimport,nodecl> end
global function g_regex_get_string_number(regex: *GRegex, name: *gchar): gint <cimport,nodecl> end
global function g_regex_escape_string(string: *gchar, length: gint): *gchar <cimport,nodecl> end
global function g_regex_escape_nul(string: *gchar, length: gint): *gchar <cimport,nodecl> end
global function g_regex_get_compile_flags(regex: *GRegex): GRegexCompileFlags <cimport,nodecl> end
global function g_regex_get_match_flags(regex: *GRegex): GRegexMatchFlags <cimport,nodecl> end
global function g_regex_match_simple(pattern: *gchar, string: *gchar, compile_options: GRegexCompileFlags, match_options: GRegexMatchFlags): gboolean <cimport,nodecl> end
global function g_regex_match(regex: *GRegex, string: *gchar, match_options: GRegexMatchFlags, match_info: **GMatchInfo): gboolean <cimport,nodecl> end
global function g_regex_match_full(regex: *GRegex, string: *gchar, string_len: gssize, start_position: gint, match_options: GRegexMatchFlags, match_info: **GMatchInfo, error: **GError): gboolean <cimport,nodecl> end
global function g_regex_match_all(regex: *GRegex, string: *gchar, match_options: GRegexMatchFlags, match_info: **GMatchInfo): gboolean <cimport,nodecl> end
global function g_regex_match_all_full(regex: *GRegex, string: *gchar, string_len: gssize, start_position: gint, match_options: GRegexMatchFlags, match_info: **GMatchInfo, error: **GError): gboolean <cimport,nodecl> end
global function g_regex_split_simple(pattern: *gchar, string: *gchar, compile_options: GRegexCompileFlags, match_options: GRegexMatchFlags): **gchar <cimport,nodecl> end
global function g_regex_split(regex: *GRegex, string: *gchar, match_options: GRegexMatchFlags): **gchar <cimport,nodecl> end
global function g_regex_split_full(regex: *GRegex, string: *gchar, string_len: gssize, start_position: gint, match_options: GRegexMatchFlags, max_tokens: gint, error: **GError): **gchar <cimport,nodecl> end
global function g_regex_replace(regex: *GRegex, string: *gchar, string_len: gssize, start_position: gint, replacement: *gchar, match_options: GRegexMatchFlags, error: **GError): *gchar <cimport,nodecl> end
global function g_regex_replace_literal(regex: *GRegex, string: *gchar, string_len: gssize, start_position: gint, replacement: *gchar, match_options: GRegexMatchFlags, error: **GError): *gchar <cimport,nodecl> end
global function g_regex_replace_eval(regex: *GRegex, string: *gchar, string_len: gssize, start_position: gint, match_options: GRegexMatchFlags, eval: GRegexEvalCallback, user_data: gpointer, error: **GError): *gchar <cimport,nodecl> end
global function g_regex_check_replacement(replacement: *gchar, has_references: *gboolean, error: **GError): gboolean <cimport,nodecl> end
global function g_match_info_get_regex(match_info: *GMatchInfo): *GRegex <cimport,nodecl> end
global function g_match_info_get_string(match_info: *GMatchInfo): *gchar <cimport,nodecl> end
global function g_match_info_ref(match_info: *GMatchInfo): *GMatchInfo <cimport,nodecl> end
global function g_match_info_unref(match_info: *GMatchInfo): void <cimport,nodecl> end
global function g_match_info_free(match_info: *GMatchInfo): void <cimport,nodecl> end
global function g_match_info_next(match_info: *GMatchInfo, error: **GError): gboolean <cimport,nodecl> end
global function g_match_info_matches(match_info: *GMatchInfo): gboolean <cimport,nodecl> end
global function g_match_info_get_match_count(match_info: *GMatchInfo): gint <cimport,nodecl> end
global function g_match_info_is_partial_match(match_info: *GMatchInfo): gboolean <cimport,nodecl> end
global function g_match_info_expand_references(match_info: *GMatchInfo, string_to_expand: *gchar, error: **GError): *gchar <cimport,nodecl> end
global function g_match_info_fetch(match_info: *GMatchInfo, match_num: gint): *gchar <cimport,nodecl> end
global function g_match_info_fetch_pos(match_info: *GMatchInfo, match_num: gint, start_pos: *gint, end_pos: *gint): gboolean <cimport,nodecl> end
global function g_match_info_fetch_named(match_info: *GMatchInfo, name: *gchar): *gchar <cimport,nodecl> end
global function g_match_info_fetch_named_pos(match_info: *GMatchInfo, name: *gchar, start_pos: *gint, end_pos: *gint): gboolean <cimport,nodecl> end
global function g_match_info_fetch_all(match_info: *GMatchInfo): **gchar <cimport,nodecl> end
global function g_scanner_new(config_templ: *GScannerConfig): *GScanner <cimport,nodecl> end
global function g_scanner_destroy(scanner: *GScanner): void <cimport,nodecl> end
global function g_scanner_input_file(scanner: *GScanner, input_fd: gint): void <cimport,nodecl> end
global function g_scanner_sync_file_offset(scanner: *GScanner): void <cimport,nodecl> end
global function g_scanner_input_text(scanner: *GScanner, text: *gchar, text_len: guint): void <cimport,nodecl> end
global function g_scanner_get_next_token(scanner: *GScanner): GTokenType <cimport,nodecl> end
global function g_scanner_peek_next_token(scanner: *GScanner): GTokenType <cimport,nodecl> end
global function g_scanner_cur_token(scanner: *GScanner): GTokenType <cimport,nodecl> end
global function g_scanner_cur_value(scanner: *GScanner): GTokenValue <cimport,nodecl> end
global function g_scanner_cur_line(scanner: *GScanner): guint <cimport,nodecl> end
global function g_scanner_cur_position(scanner: *GScanner): guint <cimport,nodecl> end
global function g_scanner_eof(scanner: *GScanner): gboolean <cimport,nodecl> end
global function g_scanner_set_scope(scanner: *GScanner, scope_id: guint): guint <cimport,nodecl> end
global function g_scanner_scope_add_symbol(scanner: *GScanner, scope_id: guint, symbol: *gchar, value: gpointer): void <cimport,nodecl> end
global function g_scanner_scope_remove_symbol(scanner: *GScanner, scope_id: guint, symbol: *gchar): void <cimport,nodecl> end
global function g_scanner_scope_lookup_symbol(scanner: *GScanner, scope_id: guint, symbol: *gchar): gpointer <cimport,nodecl> end
global function g_scanner_scope_foreach_symbol(scanner: *GScanner, scope_id: guint, func: GHFunc, user_data: gpointer): void <cimport,nodecl> end
global function g_scanner_lookup_symbol(scanner: *GScanner, symbol: *gchar): gpointer <cimport,nodecl> end
global function g_scanner_unexp_token(scanner: *GScanner, expected_token: GTokenType, identifier_spec: *gchar, symbol_spec: *gchar, symbol_name: *gchar, message: *gchar, is_error: gint): void <cimport,nodecl> end
global function g_scanner_error(scanner: *GScanner, format: *gchar, ...: cvarargs): void <cimport,nodecl> end
global function g_scanner_warn(scanner: *GScanner, format: *gchar, ...: cvarargs): void <cimport,nodecl> end
global function g_sequence_new(data_destroy: GDestroyNotify): *GSequence <cimport,nodecl> end
global function g_sequence_free(seq: *GSequence): void <cimport,nodecl> end
global function g_sequence_get_length(seq: *GSequence): gint <cimport,nodecl> end
global function g_sequence_foreach(seq: *GSequence, func: GFunc, user_data: gpointer): void <cimport,nodecl> end
global function g_sequence_foreach_range(begin: *GSequenceIter, end_: *GSequenceIter, func: GFunc, user_data: gpointer): void <cimport,nodecl> end
global function g_sequence_sort(seq: *GSequence, cmp_func: GCompareDataFunc, cmp_data: gpointer): void <cimport,nodecl> end
global function g_sequence_sort_iter(seq: *GSequence, cmp_func: GSequenceIterCompareFunc, cmp_data: gpointer): void <cimport,nodecl> end
global function g_sequence_is_empty(seq: *GSequence): gboolean <cimport,nodecl> end
global function g_sequence_get_begin_iter(seq: *GSequence): *GSequenceIter <cimport,nodecl> end
global function g_sequence_get_end_iter(seq: *GSequence): *GSequenceIter <cimport,nodecl> end
global function g_sequence_get_iter_at_pos(seq: *GSequence, pos: gint): *GSequenceIter <cimport,nodecl> end
global function g_sequence_append(seq: *GSequence, data: gpointer): *GSequenceIter <cimport,nodecl> end
global function g_sequence_prepend(seq: *GSequence, data: gpointer): *GSequenceIter <cimport,nodecl> end
global function g_sequence_insert_before(iter: *GSequenceIter, data: gpointer): *GSequenceIter <cimport,nodecl> end
global function g_sequence_move(src: *GSequenceIter, dest: *GSequenceIter): void <cimport,nodecl> end
global function g_sequence_swap(a: *GSequenceIter, b: *GSequenceIter): void <cimport,nodecl> end
global function g_sequence_insert_sorted(seq: *GSequence, data: gpointer, cmp_func: GCompareDataFunc, cmp_data: gpointer): *GSequenceIter <cimport,nodecl> end
global function g_sequence_insert_sorted_iter(seq: *GSequence, data: gpointer, iter_cmp: GSequenceIterCompareFunc, cmp_data: gpointer): *GSequenceIter <cimport,nodecl> end
global function g_sequence_sort_changed(iter: *GSequenceIter, cmp_func: GCompareDataFunc, cmp_data: gpointer): void <cimport,nodecl> end
global function g_sequence_sort_changed_iter(iter: *GSequenceIter, iter_cmp: GSequenceIterCompareFunc, cmp_data: gpointer): void <cimport,nodecl> end
global function g_sequence_remove(iter: *GSequenceIter): void <cimport,nodecl> end
global function g_sequence_remove_range(begin: *GSequenceIter, end_: *GSequenceIter): void <cimport,nodecl> end
global function g_sequence_move_range(dest: *GSequenceIter, begin: *GSequenceIter, end_: *GSequenceIter): void <cimport,nodecl> end
global function g_sequence_search(seq: *GSequence, data: gpointer, cmp_func: GCompareDataFunc, cmp_data: gpointer): *GSequenceIter <cimport,nodecl> end
global function g_sequence_search_iter(seq: *GSequence, data: gpointer, iter_cmp: GSequenceIterCompareFunc, cmp_data: gpointer): *GSequenceIter <cimport,nodecl> end
global function g_sequence_lookup(seq: *GSequence, data: gpointer, cmp_func: GCompareDataFunc, cmp_data: gpointer): *GSequenceIter <cimport,nodecl> end
global function g_sequence_lookup_iter(seq: *GSequence, data: gpointer, iter_cmp: GSequenceIterCompareFunc, cmp_data: gpointer): *GSequenceIter <cimport,nodecl> end
global function g_sequence_get(iter: *GSequenceIter): gpointer <cimport,nodecl> end
global function g_sequence_set(iter: *GSequenceIter, data: gpointer): void <cimport,nodecl> end
global function g_sequence_iter_is_begin(iter: *GSequenceIter): gboolean <cimport,nodecl> end
global function g_sequence_iter_is_end(iter: *GSequenceIter): gboolean <cimport,nodecl> end
global function g_sequence_iter_next(iter: *GSequenceIter): *GSequenceIter <cimport,nodecl> end
global function g_sequence_iter_prev(iter: *GSequenceIter): *GSequenceIter <cimport,nodecl> end
global function g_sequence_iter_get_position(iter: *GSequenceIter): gint <cimport,nodecl> end
global function g_sequence_iter_move(iter: *GSequenceIter, delta: gint): *GSequenceIter <cimport,nodecl> end
global function g_sequence_iter_get_sequence(iter: *GSequenceIter): *GSequence <cimport,nodecl> end
global function g_sequence_iter_compare(a: *GSequenceIter, b: *GSequenceIter): gint <cimport,nodecl> end
global function g_sequence_range_get_midpoint(begin: *GSequenceIter, end_: *GSequenceIter): *GSequenceIter <cimport,nodecl> end
global function g_shell_error_quark(): GQuark <cimport,nodecl> end
global function g_shell_quote(unquoted_string: *gchar): *gchar <cimport,nodecl> end
global function g_shell_unquote(quoted_string: *gchar, error: **GError): *gchar <cimport,nodecl> end
global function g_shell_parse_argv(command_line: *gchar, argcp: *gint, argvp: ***gchar, error: **GError): gboolean <cimport,nodecl> end
global function memcpy(dest: pointer, src: pointer, n: csize): pointer <cimport,nodecl> end
global function memmove(dest: pointer, src: pointer, n: csize): pointer <cimport,nodecl> end
global function memccpy(dest: pointer, src: pointer, c: cint, n: csize): pointer <cimport,nodecl> end
global function memset(s: pointer, c: cint, n: csize): pointer <cimport,nodecl> end
global function memcmp(s1: pointer, s2: pointer, n: csize): cint <cimport,nodecl> end
global function memchr(s: pointer, c: cint, n: csize): pointer <cimport,nodecl> end
global function strcpy(dest: cstring, src: cstring): cstring <cimport,nodecl> end
global function strncpy(dest: cstring, src: cstring, n: csize): cstring <cimport,nodecl> end
global function strcat(dest: cstring, src: cstring): cstring <cimport,nodecl> end
global function strncat(dest: cstring, src: cstring, n: csize): cstring <cimport,nodecl> end
global function strcmp(s1: cstring, s2: cstring): cint <cimport,nodecl> end
global function strncmp(s1: cstring, s2: cstring, n: csize): cint <cimport,nodecl> end
global function strcoll(s1: cstring, s2: cstring): cint <cimport,nodecl> end
global function strxfrm(dest: cstring, src: cstring, n: csize): csize <cimport,nodecl> end
global function strcoll_l(s1: cstring, s2: cstring, l: locale_t): cint <cimport,nodecl> end
global function strxfrm_l(dest: cstring, src: cstring, n: csize, l: locale_t): csize <cimport,nodecl> end
global function strdup(s: cstring): cstring <cimport,nodecl> end
global function strndup(string: cstring, n: csize): cstring <cimport,nodecl> end
global function strchr(s: cstring, c: cint): cstring <cimport,nodecl> end
global function strrchr(s: cstring, c: cint): cstring <cimport,nodecl> end
global function strcspn(s: cstring, reject: cstring): csize <cimport,nodecl> end
global function strspn(s: cstring, accept: cstring): csize <cimport,nodecl> end
global function strpbrk(s: cstring, accept: cstring): cstring <cimport,nodecl> end
global function strstr(haystack: cstring, needle: cstring): cstring <cimport,nodecl> end
global function strtok(s: cstring, delim: cstring): cstring <cimport,nodecl> end
global function strtok_r(s: cstring, delim: cstring, save_ptr: *cstring): cstring <cimport,nodecl> end
global function strlen(s: cstring): csize <cimport,nodecl> end
global function strnlen(string: cstring, maxlen: csize): csize <cimport,nodecl> end
global function strerror(errnum: cint): cstring <cimport,nodecl> end
global function strerror_r(errnum: cint, buf: cstring, buflen: csize): cint <cimport,nodecl> end
global function strerror_l(errnum: cint, l: locale_t): cstring <cimport,nodecl> end
global function bcmp(s1: pointer, s2: pointer, n: csize): cint <cimport,nodecl> end
global function bcopy(src: pointer, dest: pointer, n: csize): void <cimport,nodecl> end
global function bzero(s: pointer, n: csize): void <cimport,nodecl> end
global function index(s: cstring, c: cint): cstring <cimport,nodecl> end
global function rindex(s: cstring, c: cint): cstring <cimport,nodecl> end
global function ffs(i: cint): cint <cimport,nodecl> end
global function ffsl(l: clong): cint <cimport,nodecl> end
global function ffsll(ll: clonglong): cint <cimport,nodecl> end
global function strcasecmp(s1: cstring, s2: cstring): cint <cimport,nodecl> end
global function strncasecmp(s1: cstring, s2: cstring, n: csize): cint <cimport,nodecl> end
global function strcasecmp_l(s1: cstring, s2: cstring, loc: locale_t): cint <cimport,nodecl> end
global function strncasecmp_l(s1: cstring, s2: cstring, n: csize, loc: locale_t): cint <cimport,nodecl> end
global function explicit_bzero(s: pointer, n: csize): void <cimport,nodecl> end
global function strsep(stringp: *cstring, delim: cstring): cstring <cimport,nodecl> end
global function strsignal(sig: cint): cstring <cimport,nodecl> end
global function stpcpy(dest: cstring, src: cstring): cstring <cimport,nodecl> end
global function stpncpy(dest: cstring, src: cstring, n: csize): cstring <cimport,nodecl> end
global function g_slice_alloc(block_size: gsize): gpointer <cimport,nodecl> end
global function g_slice_alloc0(block_size: gsize): gpointer <cimport,nodecl> end
global function g_slice_copy(block_size: gsize, mem_block: gconstpointer): gpointer <cimport,nodecl> end
global function g_slice_free1(block_size: gsize, mem_block: gpointer): void <cimport,nodecl> end
global function g_slice_free_chain_with_offset(block_size: gsize, mem_chain: gpointer, next_offset: gsize): void <cimport,nodecl> end
global function g_slice_set_config(ckey: GSliceConfig, value: gint64): void <cimport,nodecl> end
global function g_slice_get_config(ckey: GSliceConfig): gint64 <cimport,nodecl> end
global function g_slice_get_config_state(ckey: GSliceConfig, address: gint64, n_values: *guint): *gint64 <cimport,nodecl> end
global function g_spawn_error_quark(): GQuark <cimport,nodecl> end
global function g_spawn_exit_error_quark(): GQuark <cimport,nodecl> end
global function g_spawn_async(working_directory: *gchar, argv: **gchar, envp: **gchar, flags: GSpawnFlags, child_setup: GSpawnChildSetupFunc, user_data: gpointer, child_pid: *GPid, error: **GError): gboolean <cimport,nodecl> end
global function g_spawn_async_with_pipes(working_directory: *gchar, argv: **gchar, envp: **gchar, flags: GSpawnFlags, child_setup: GSpawnChildSetupFunc, user_data: gpointer, child_pid: *GPid, standard_input: *gint, standard_output: *gint, standard_error: *gint, error: **GError): gboolean <cimport,nodecl> end
global function g_spawn_async_with_pipes_and_fds(working_directory: *gchar, argv: **gchar, envp: **gchar, flags: GSpawnFlags, child_setup: GSpawnChildSetupFunc, user_data: gpointer, stdin_fd: gint, stdout_fd: gint, stderr_fd: gint, source_fds: *gint, target_fds: *gint, n_fds: gsize, child_pid_out: *GPid, stdin_pipe_out: *gint, stdout_pipe_out: *gint, stderr_pipe_out: *gint, error: **GError): gboolean <cimport,nodecl> end
global function g_spawn_async_with_fds(working_directory: *gchar, argv: **gchar, envp: **gchar, flags: GSpawnFlags, child_setup: GSpawnChildSetupFunc, user_data: gpointer, child_pid: *GPid, stdin_fd: gint, stdout_fd: gint, stderr_fd: gint, error: **GError): gboolean <cimport,nodecl> end
global function g_spawn_sync(working_directory: *gchar, argv: **gchar, envp: **gchar, flags: GSpawnFlags, child_setup: GSpawnChildSetupFunc, user_data: gpointer, standard_output: **gchar, standard_error: **gchar, wait_status: *gint, error: **GError): gboolean <cimport,nodecl> end
global function g_spawn_command_line_sync(command_line: *gchar, standard_output: **gchar, standard_error: **gchar, wait_status: *gint, error: **GError): gboolean <cimport,nodecl> end
global function g_spawn_command_line_async(command_line: *gchar, error: **GError): gboolean <cimport,nodecl> end
global function g_spawn_check_wait_status(wait_status: gint, error: **GError): gboolean <cimport,nodecl> end
global function g_spawn_check_exit_status(wait_status: gint, error: **GError): gboolean <cimport,nodecl> end
global function g_spawn_close_pid(pid: GPid): void <cimport,nodecl> end
global g_ascii_table: *guint16 <cimport,nodecl>
global function g_ascii_tolower(c: gchar): gchar <cimport,nodecl> end
global function g_ascii_toupper(c: gchar): gchar <cimport,nodecl> end
global function g_ascii_digit_value(c: gchar): gint <cimport,nodecl> end
global function g_ascii_xdigit_value(c: gchar): gint <cimport,nodecl> end
global function g_strdelimit(string: *gchar, delimiters: *gchar, new_delimiter: gchar): *gchar <cimport,nodecl> end
global function g_strcanon(string: *gchar, valid_chars: *gchar, substitutor: gchar): *gchar <cimport,nodecl> end
global function g_strerror(errnum: gint): *gchar <cimport,nodecl> end
global function g_strsignal(signum: gint): *gchar <cimport,nodecl> end
global function g_strreverse(string: *gchar): *gchar <cimport,nodecl> end
global function g_strlcpy(dest: *gchar, src: *gchar, dest_size: gsize): gsize <cimport,nodecl> end
global function g_strlcat(dest: *gchar, src: *gchar, dest_size: gsize): gsize <cimport,nodecl> end
global function g_strstr_len(haystack: *gchar, haystack_len: gssize, needle: *gchar): *gchar <cimport,nodecl> end
global function g_strrstr(haystack: *gchar, needle: *gchar): *gchar <cimport,nodecl> end
global function g_strrstr_len(haystack: *gchar, haystack_len: gssize, needle: *gchar): *gchar <cimport,nodecl> end
global function g_str_has_suffix(str: *gchar, suffix: *gchar): gboolean <cimport,nodecl> end
global function g_str_has_prefix(str: *gchar, prefix: *gchar): gboolean <cimport,nodecl> end
global function g_strtod(nptr: *gchar, endptr: **gchar): gdouble <cimport,nodecl> end
global function g_ascii_strtod(nptr: *gchar, endptr: **gchar): gdouble <cimport,nodecl> end
global function g_ascii_strtoull(nptr: *gchar, endptr: **gchar, base: guint): guint64 <cimport,nodecl> end
global function g_ascii_strtoll(nptr: *gchar, endptr: **gchar, base: guint): gint64 <cimport,nodecl> end
global function g_ascii_dtostr(buffer: *gchar, buf_len: gint, d: gdouble): *gchar <cimport,nodecl> end
global function g_ascii_formatd(buffer: *gchar, buf_len: gint, format: *gchar, d: gdouble): *gchar <cimport,nodecl> end
global function g_strchug(string: *gchar): *gchar <cimport,nodecl> end
global function g_strchomp(string: *gchar): *gchar <cimport,nodecl> end
global function g_ascii_strcasecmp(s1: *gchar, s2: *gchar): gint <cimport,nodecl> end
global function g_ascii_strncasecmp(s1: *gchar, s2: *gchar, n: gsize): gint <cimport,nodecl> end
global function g_ascii_strdown(str: *gchar, len: gssize): *gchar <cimport,nodecl> end
global function g_ascii_strup(str: *gchar, len: gssize): *gchar <cimport,nodecl> end
global function g_str_is_ascii(str: *gchar): gboolean <cimport,nodecl> end
global function g_strcasecmp(s1: *gchar, s2: *gchar): gint <cimport,nodecl> end
global function g_strncasecmp(s1: *gchar, s2: *gchar, n: guint): gint <cimport,nodecl> end
global function g_strdown(string: *gchar): *gchar <cimport,nodecl> end
global function g_strup(string: *gchar): *gchar <cimport,nodecl> end
global function g_strdup(str: *gchar): *gchar <cimport,nodecl> end
global function g_strdup_printf(format: *gchar, ...: cvarargs): *gchar <cimport,nodecl> end
global function g_strdup_vprintf(format: *gchar, args: cvalist): *gchar <cimport,nodecl> end
global function g_strndup(str: *gchar, n: gsize): *gchar <cimport,nodecl> end
global function g_strnfill(length: gsize, fill_char: gchar): *gchar <cimport,nodecl> end
global function g_strconcat(string1: *gchar, ...: cvarargs): *gchar <cimport,nodecl> end
global function g_strjoin(separator: *gchar, ...: cvarargs): *gchar <cimport,nodecl> end
global function g_strcompress(source: *gchar): *gchar <cimport,nodecl> end
global function g_strescape(source: *gchar, exceptions: *gchar): *gchar <cimport,nodecl> end
global function g_memdup(mem: gconstpointer, byte_size: guint): gpointer <cimport,nodecl> end
global function g_memdup2(mem: gconstpointer, byte_size: gsize): gpointer <cimport,nodecl> end
global function g_strsplit(string: *gchar, delimiter: *gchar, max_tokens: gint): **gchar <cimport,nodecl> end
global function g_strsplit_set(string: *gchar, delimiters: *gchar, max_tokens: gint): **gchar <cimport,nodecl> end
global function g_strjoinv(separator: *gchar, str_array: **gchar): *gchar <cimport,nodecl> end
global function g_strfreev(str_array: **gchar): void <cimport,nodecl> end
global function g_strdupv(str_array: **gchar): **gchar <cimport,nodecl> end
global function g_strv_length(str_array: **gchar): guint <cimport,nodecl> end
global function g_stpcpy(dest: *gchar, src: cstring): *gchar <cimport,nodecl> end
global function g_str_to_ascii(str: *gchar, from_locale: *gchar): *gchar <cimport,nodecl> end
global function g_str_tokenize_and_fold(string: *gchar, translit_locale: *gchar, ascii_alternates: ***gchar): **gchar <cimport,nodecl> end
global function g_str_match_string(search_term: *gchar, potential_hit: *gchar, accept_alternates: gboolean): gboolean <cimport,nodecl> end
global function g_strv_contains(strv: **gchar, str: *gchar): gboolean <cimport,nodecl> end
global function g_strv_equal(strv1: **gchar, strv2: **gchar): gboolean <cimport,nodecl> end
global function g_number_parser_error_quark(): GQuark <cimport,nodecl> end
global function g_ascii_string_to_signed(str: *gchar, base: guint, min: gint64, max: gint64, out_num: *gint64, error: **GError): gboolean <cimport,nodecl> end
global function g_ascii_string_to_unsigned(str: *gchar, base: guint, min: guint64, max: guint64, out_num: *guint64, error: **GError): gboolean <cimport,nodecl> end
global function g_string_chunk_new(size: gsize): *GStringChunk <cimport,nodecl> end
global function g_string_chunk_free(chunk: *GStringChunk): void <cimport,nodecl> end
global function g_string_chunk_clear(chunk: *GStringChunk): void <cimport,nodecl> end
global function g_string_chunk_insert(chunk: *GStringChunk, string: *gchar): *gchar <cimport,nodecl> end
global function g_string_chunk_insert_len(chunk: *GStringChunk, string: *gchar, len: gssize): *gchar <cimport,nodecl> end
global function g_string_chunk_insert_const(chunk: *GStringChunk, string: *gchar): *gchar <cimport,nodecl> end
global function g_strv_builder_new(): *GStrvBuilder <cimport,nodecl> end
global function g_strv_builder_unref(builder: *GStrvBuilder): void <cimport,nodecl> end
global function g_strv_builder_ref(builder: *GStrvBuilder): *GStrvBuilder <cimport,nodecl> end
global function g_strv_builder_add(builder: *GStrvBuilder, value: cstring): void <cimport,nodecl> end
global function g_strv_builder_addv(builder: *GStrvBuilder, value: *cstring): void <cimport,nodecl> end
global function g_strv_builder_add_many(builder: *GStrvBuilder, ...: cvarargs): void <cimport,nodecl> end
global function g_strv_builder_end(builder: *GStrvBuilder): GStrv <cimport,nodecl> end
global function g_strcmp0(str1: cstring, str2: cstring): cint <cimport,nodecl> end
global function g_test_minimized_result(minimized_quantity: float64, format: cstring, ...: cvarargs): void <cimport,nodecl> end
global function g_test_maximized_result(maximized_quantity: float64, format: cstring, ...: cvarargs): void <cimport,nodecl> end
global function g_test_init(argc: *cint, argv: **cstring, ...: cvarargs): void <cimport,nodecl> end
global function g_test_subprocess(): gboolean <cimport,nodecl> end
global function g_test_run(): cint <cimport,nodecl> end
global function g_test_add_func(testpath: cstring, test_func: GTestFunc): void <cimport,nodecl> end
global function g_test_add_data_func(testpath: cstring, test_data: gconstpointer, test_func: GTestDataFunc): void <cimport,nodecl> end
global function g_test_add_data_func_full(testpath: cstring, test_data: gpointer, test_func: GTestDataFunc, data_free_func: GDestroyNotify): void <cimport,nodecl> end
global function g_test_get_path(): cstring <cimport,nodecl> end
global function g_test_fail(): void <cimport,nodecl> end
global function g_test_fail_printf(format: cstring, ...: cvarargs): void <cimport,nodecl> end
global function g_test_incomplete(msg: *gchar): void <cimport,nodecl> end
global function g_test_incomplete_printf(format: cstring, ...: cvarargs): void <cimport,nodecl> end
global function g_test_skip(msg: *gchar): void <cimport,nodecl> end
global function g_test_skip_printf(format: cstring, ...: cvarargs): void <cimport,nodecl> end
global function g_test_failed(): gboolean <cimport,nodecl> end
global function g_test_set_nonfatal_assertions(): void <cimport,nodecl> end
global function g_test_message(format: cstring, ...: cvarargs): void <cimport,nodecl> end
global function g_test_bug_base(uri_pattern: cstring): void <cimport,nodecl> end
global function g_test_bug(bug_uri_snippet: cstring): void <cimport,nodecl> end
global function g_test_summary(summary: cstring): void <cimport,nodecl> end
global function g_test_timer_start(): void <cimport,nodecl> end
global function g_test_timer_elapsed(): float64 <cimport,nodecl> end
global function g_test_timer_last(): float64 <cimport,nodecl> end
global function g_test_queue_free(gfree_pointer: gpointer): void <cimport,nodecl> end
global function g_test_queue_destroy(destroy_func: GDestroyNotify, destroy_data: gpointer): void <cimport,nodecl> end
global function g_test_trap_fork(usec_timeout: guint64, test_trap_flags: GTestTrapFlags): gboolean <cimport,nodecl> end
global function g_test_trap_subprocess(test_path: cstring, usec_timeout: guint64, test_flags: GTestSubprocessFlags): void <cimport,nodecl> end
global function g_test_trap_has_passed(): gboolean <cimport,nodecl> end
global function g_test_trap_reached_timeout(): gboolean <cimport,nodecl> end
global function g_test_rand_int(): gint32 <cimport,nodecl> end
global function g_test_rand_int_range(begin: gint32, end_: gint32): gint32 <cimport,nodecl> end
global function g_test_rand_double(): float64 <cimport,nodecl> end
global function g_test_rand_double_range(range_start: float64, range_end: float64): float64 <cimport,nodecl> end
global function g_test_create_case(test_name: cstring, data_size: gsize, test_data: gconstpointer, data_setup: GTestFixtureFunc, data_test: GTestFixtureFunc, data_teardown: GTestFixtureFunc): *GTestCase <cimport,nodecl> end
global function g_test_create_suite(suite_name: cstring): *GTestSuite <cimport,nodecl> end
global function g_test_get_root(): *GTestSuite <cimport,nodecl> end
global function g_test_suite_add(suite: *GTestSuite, test_case: *GTestCase): void <cimport,nodecl> end
global function g_test_suite_add_suite(suite: *GTestSuite, nestedsuite: *GTestSuite): void <cimport,nodecl> end
global function g_test_run_suite(suite: *GTestSuite): cint <cimport,nodecl> end
global function g_test_case_free(test_case: *GTestCase): void <cimport,nodecl> end
global function g_test_suite_free(suite: *GTestSuite): void <cimport,nodecl> end
global function g_test_trap_assertions(domain: cstring, file: cstring, line: cint, func: cstring, assertion_flags: guint64, pattern: cstring): void <cimport,nodecl> end
global function g_assertion_message(domain: cstring, file: cstring, line: cint, func: cstring, message: cstring): void <cimport,nodecl> end
global function g_assertion_message_expr(domain: cstring, file: cstring, line: cint, func: cstring, expr: cstring): void <cimport,nodecl> end
global function g_assertion_message_cmpstr(domain: cstring, file: cstring, line: cint, func: cstring, expr: cstring, arg1: cstring, cmp: cstring, arg2: cstring): void <cimport,nodecl> end
global function g_assertion_message_cmpstrv(domain: cstring, file: cstring, line: cint, func: cstring, expr: cstring, arg1: *cstring, arg2: *cstring, first_wrong_idx: gsize): void <cimport,nodecl> end
global function g_assertion_message_cmpnum(domain: cstring, file: cstring, line: cint, func: cstring, expr: cstring, arg1: clongdouble, cmp: cstring, arg2: clongdouble, numtype: cchar): void <cimport,nodecl> end
global function g_assertion_message_error(domain: cstring, file: cstring, line: cint, func: cstring, expr: cstring, error: *GError, error_domain: GQuark, error_code: cint): void <cimport,nodecl> end
global function g_test_add_vtable(testpath: cstring, data_size: gsize, test_data: gconstpointer, data_setup: GTestFixtureFunc, data_test: GTestFixtureFunc, data_teardown: GTestFixtureFunc): void <cimport,nodecl> end
global g_test_config_vars: *GTestConfig <cimport,nodecl>
global function g_test_log_type_name(log_type: GTestLogType): cstring <cimport,nodecl> end
global function g_test_log_buffer_new(): *GTestLogBuffer <cimport,nodecl> end
global function g_test_log_buffer_free(tbuffer: *GTestLogBuffer): void <cimport,nodecl> end
global function g_test_log_buffer_push(tbuffer: *GTestLogBuffer, n_bytes: guint, bytes: *guint8): void <cimport,nodecl> end
global function g_test_log_buffer_pop(tbuffer: *GTestLogBuffer): *GTestLogMsg <cimport,nodecl> end
global function g_test_log_msg_free(tmsg: *GTestLogMsg): void <cimport,nodecl> end
global function g_test_log_set_fatal_handler(log_func: GTestLogFatalFunc, user_data: gpointer): void <cimport,nodecl> end
global function g_test_expect_message(log_domain: *gchar, log_level: GLogLevelFlags, pattern: *gchar): void <cimport,nodecl> end
global function g_test_assert_expected_messages_internal(domain: cstring, file: cstring, line: cint, func: cstring): void <cimport,nodecl> end
global function g_test_build_filename(file_type: GTestFileType, first_path: *gchar, ...: cvarargs): *gchar <cimport,nodecl> end
global function g_test_get_dir(file_type: GTestFileType): *gchar <cimport,nodecl> end
global function g_test_get_filename(file_type: GTestFileType, first_path: *gchar, ...: cvarargs): *gchar <cimport,nodecl> end
global function g_thread_pool_new(func: GFunc, user_data: gpointer, max_threads: gint, exclusive: gboolean, error: **GError): *GThreadPool <cimport,nodecl> end
global function g_thread_pool_new_full(func: GFunc, user_data: gpointer, item_free_func: GDestroyNotify, max_threads: gint, exclusive: gboolean, error: **GError): *GThreadPool <cimport,nodecl> end
global function g_thread_pool_free(pool: *GThreadPool, immediate: gboolean, wait_: gboolean): void <cimport,nodecl> end
global function g_thread_pool_push(pool: *GThreadPool, data: gpointer, error: **GError): gboolean <cimport,nodecl> end
global function g_thread_pool_unprocessed(pool: *GThreadPool): guint <cimport,nodecl> end
global function g_thread_pool_set_sort_function(pool: *GThreadPool, func: GCompareDataFunc, user_data: gpointer): void <cimport,nodecl> end
global function g_thread_pool_move_to_front(pool: *GThreadPool, data: gpointer): gboolean <cimport,nodecl> end
global function g_thread_pool_set_max_threads(pool: *GThreadPool, max_threads: gint, error: **GError): gboolean <cimport,nodecl> end
global function g_thread_pool_get_max_threads(pool: *GThreadPool): gint <cimport,nodecl> end
global function g_thread_pool_get_num_threads(pool: *GThreadPool): guint <cimport,nodecl> end
global function g_thread_pool_set_max_unused_threads(max_threads: gint): void <cimport,nodecl> end
global function g_thread_pool_get_max_unused_threads(): gint <cimport,nodecl> end
global function g_thread_pool_get_num_unused_threads(): guint <cimport,nodecl> end
global function g_thread_pool_stop_unused_threads(): void <cimport,nodecl> end
global function g_thread_pool_set_max_idle_time(interval: guint): void <cimport,nodecl> end
global function g_thread_pool_get_max_idle_time(): guint <cimport,nodecl> end
global function g_timer_new(): *GTimer <cimport,nodecl> end
global function g_timer_destroy(timer: *GTimer): void <cimport,nodecl> end
global function g_timer_start(timer: *GTimer): void <cimport,nodecl> end
global function g_timer_stop(timer: *GTimer): void <cimport,nodecl> end
global function g_timer_reset(timer: *GTimer): void <cimport,nodecl> end
global function g_timer_continue(timer: *GTimer): void <cimport,nodecl> end
global function g_timer_elapsed(timer: *GTimer, microseconds: *gulong): gdouble <cimport,nodecl> end
global function g_timer_is_active(timer: *GTimer): gboolean <cimport,nodecl> end
global function g_usleep(microseconds: gulong): void <cimport,nodecl> end
global function g_time_val_add(time_: *GTimeVal, microseconds: glong): void <cimport,nodecl> end
global function g_time_val_from_iso8601(iso_date: *gchar, time_: *GTimeVal): gboolean <cimport,nodecl> end
global function g_time_val_to_iso8601(time_: *GTimeVal): *gchar <cimport,nodecl> end
global function g_trash_stack_push(stack_p: **GTrashStack, data_p: gpointer): void <cimport,nodecl> end
global function g_trash_stack_pop(stack_p: **GTrashStack): gpointer <cimport,nodecl> end
global function g_trash_stack_peek(stack_p: **GTrashStack): gpointer <cimport,nodecl> end
global function g_trash_stack_height(stack_p: **GTrashStack): guint <cimport,nodecl> end
global function g_tree_new(key_compare_func: GCompareFunc): *GTree <cimport,nodecl> end
global function g_tree_new_with_data(key_compare_func: GCompareDataFunc, key_compare_data: gpointer): *GTree <cimport,nodecl> end
global function g_tree_new_full(key_compare_func: GCompareDataFunc, key_compare_data: gpointer, key_destroy_func: GDestroyNotify, value_destroy_func: GDestroyNotify): *GTree <cimport,nodecl> end
global function g_tree_node_first(tree: *GTree): *GTreeNode <cimport,nodecl> end
global function g_tree_node_last(tree: *GTree): *GTreeNode <cimport,nodecl> end
global function g_tree_node_previous(node: *GTreeNode): *GTreeNode <cimport,nodecl> end
global function g_tree_node_next(node: *GTreeNode): *GTreeNode <cimport,nodecl> end
global function g_tree_ref(tree: *GTree): *GTree <cimport,nodecl> end
global function g_tree_unref(tree: *GTree): void <cimport,nodecl> end
global function g_tree_destroy(tree: *GTree): void <cimport,nodecl> end
global function g_tree_insert_node(tree: *GTree, key: gpointer, value: gpointer): *GTreeNode <cimport,nodecl> end
global function g_tree_insert(tree: *GTree, key: gpointer, value: gpointer): void <cimport,nodecl> end
global function g_tree_replace_node(tree: *GTree, key: gpointer, value: gpointer): *GTreeNode <cimport,nodecl> end
global function g_tree_replace(tree: *GTree, key: gpointer, value: gpointer): void <cimport,nodecl> end
global function g_tree_remove(tree: *GTree, key: gconstpointer): gboolean <cimport,nodecl> end
global function g_tree_remove_all(tree: *GTree): void <cimport,nodecl> end
global function g_tree_steal(tree: *GTree, key: gconstpointer): gboolean <cimport,nodecl> end
global function g_tree_node_key(node: *GTreeNode): gpointer <cimport,nodecl> end
global function g_tree_node_value(node: *GTreeNode): gpointer <cimport,nodecl> end
global function g_tree_lookup_node(tree: *GTree, key: gconstpointer): *GTreeNode <cimport,nodecl> end
global function g_tree_lookup(tree: *GTree, key: gconstpointer): gpointer <cimport,nodecl> end
global function g_tree_lookup_extended(tree: *GTree, lookup_key: gconstpointer, orig_key: *gpointer, value: *gpointer): gboolean <cimport,nodecl> end
global function g_tree_foreach(tree: *GTree, func: GTraverseFunc, user_data: gpointer): void <cimport,nodecl> end
global function g_tree_foreach_node(tree: *GTree, func: GTraverseNodeFunc, user_data: gpointer): void <cimport,nodecl> end
global function g_tree_traverse(tree: *GTree, traverse_func: GTraverseFunc, traverse_type: GTraverseType, user_data: gpointer): void <cimport,nodecl> end
global function g_tree_search_node(tree: *GTree, search_func: GCompareFunc, user_data: gconstpointer): *GTreeNode <cimport,nodecl> end
global function g_tree_search(tree: *GTree, search_func: GCompareFunc, user_data: gconstpointer): gpointer <cimport,nodecl> end
global function g_tree_lower_bound(tree: *GTree, key: gconstpointer): *GTreeNode <cimport,nodecl> end
global function g_tree_upper_bound(tree: *GTree, key: gconstpointer): *GTreeNode <cimport,nodecl> end
global function g_tree_height(tree: *GTree): gint <cimport,nodecl> end
global function g_tree_nnodes(tree: *GTree): gint <cimport,nodecl> end
global function g_uri_ref(uri: *GUri): *GUri <cimport,nodecl> end
global function g_uri_unref(uri: *GUri): void <cimport,nodecl> end
global function g_uri_split(uri_ref: *gchar, flags: GUriFlags, scheme: **gchar, userinfo: **gchar, host: **gchar, port: *gint, path: **gchar, query: **gchar, fragment: **gchar, error: **GError): gboolean <cimport,nodecl> end
global function g_uri_split_with_user(uri_ref: *gchar, flags: GUriFlags, scheme: **gchar, user: **gchar, password: **gchar, auth_params: **gchar, host: **gchar, port: *gint, path: **gchar, query: **gchar, fragment: **gchar, error: **GError): gboolean <cimport,nodecl> end
global function g_uri_split_network(uri_string: *gchar, flags: GUriFlags, scheme: **gchar, host: **gchar, port: *gint, error: **GError): gboolean <cimport,nodecl> end
global function g_uri_is_valid(uri_string: *gchar, flags: GUriFlags, error: **GError): gboolean <cimport,nodecl> end
global function g_uri_join(flags: GUriFlags, scheme: *gchar, userinfo: *gchar, host: *gchar, port: gint, path: *gchar, query: *gchar, fragment: *gchar): *gchar <cimport,nodecl> end
global function g_uri_join_with_user(flags: GUriFlags, scheme: *gchar, user: *gchar, password: *gchar, auth_params: *gchar, host: *gchar, port: gint, path: *gchar, query: *gchar, fragment: *gchar): *gchar <cimport,nodecl> end
global function g_uri_parse(uri_string: *gchar, flags: GUriFlags, error: **GError): *GUri <cimport,nodecl> end
global function g_uri_parse_relative(base_uri: *GUri, uri_ref: *gchar, flags: GUriFlags, error: **GError): *GUri <cimport,nodecl> end
global function g_uri_resolve_relative(base_uri_string: *gchar, uri_ref: *gchar, flags: GUriFlags, error: **GError): *gchar <cimport,nodecl> end
global function g_uri_build(flags: GUriFlags, scheme: *gchar, userinfo: *gchar, host: *gchar, port: gint, path: *gchar, query: *gchar, fragment: *gchar): *GUri <cimport,nodecl> end
global function g_uri_build_with_user(flags: GUriFlags, scheme: *gchar, user: *gchar, password: *gchar, auth_params: *gchar, host: *gchar, port: gint, path: *gchar, query: *gchar, fragment: *gchar): *GUri <cimport,nodecl> end
global function g_uri_to_string(uri: *GUri): cstring <cimport,nodecl> end
global function g_uri_to_string_partial(uri: *GUri, flags: GUriHideFlags): cstring <cimport,nodecl> end
global function g_uri_get_scheme(uri: *GUri): *gchar <cimport,nodecl> end
global function g_uri_get_userinfo(uri: *GUri): *gchar <cimport,nodecl> end
global function g_uri_get_user(uri: *GUri): *gchar <cimport,nodecl> end
global function g_uri_get_password(uri: *GUri): *gchar <cimport,nodecl> end
global function g_uri_get_auth_params(uri: *GUri): *gchar <cimport,nodecl> end
global function g_uri_get_host(uri: *GUri): *gchar <cimport,nodecl> end
global function g_uri_get_port(uri: *GUri): gint <cimport,nodecl> end
global function g_uri_get_path(uri: *GUri): *gchar <cimport,nodecl> end
global function g_uri_get_query(uri: *GUri): *gchar <cimport,nodecl> end
global function g_uri_get_fragment(uri: *GUri): *gchar <cimport,nodecl> end
global function g_uri_get_flags(uri: *GUri): GUriFlags <cimport,nodecl> end
global function g_uri_parse_params(params: *gchar, length: gssize, separators: *gchar, flags: GUriParamsFlags, error: **GError): *GHashTable <cimport,nodecl> end
global function g_uri_params_iter_init(iter: *GUriParamsIter, params: *gchar, length: gssize, separators: *gchar, flags: GUriParamsFlags): void <cimport,nodecl> end
global function g_uri_params_iter_next(iter: *GUriParamsIter, attribute: **gchar, value: **gchar, error: **GError): gboolean <cimport,nodecl> end
global function g_uri_error_quark(): GQuark <cimport,nodecl> end
global function g_uri_unescape_string(escaped_string: cstring, illegal_characters: cstring): cstring <cimport,nodecl> end
global function g_uri_unescape_segment(escaped_string: cstring, escaped_string_end: cstring, illegal_characters: cstring): cstring <cimport,nodecl> end
global function g_uri_parse_scheme(uri: cstring): cstring <cimport,nodecl> end
global function g_uri_peek_scheme(uri: cstring): cstring <cimport,nodecl> end
global function g_uri_escape_string(unescaped: cstring, reserved_chars_allowed: cstring, allow_utf8: gboolean): cstring <cimport,nodecl> end
global function g_uri_unescape_bytes(escaped_string: cstring, length: gssize, illegal_characters: cstring, error: **GError): *GBytes <cimport,nodecl> end
global function g_uri_escape_bytes(unescaped: *guint8, length: gsize, reserved_chars_allowed: cstring): cstring <cimport,nodecl> end
global function g_uuid_string_is_valid(str: *gchar): gboolean <cimport,nodecl> end
global function g_uuid_string_random(): *gchar <cimport,nodecl> end
global glib_major_version: guint <cimport,nodecl>
global glib_minor_version: guint <cimport,nodecl>
global glib_micro_version: guint <cimport,nodecl>
global glib_interface_age: guint <cimport,nodecl>
global glib_binary_age: guint <cimport,nodecl>
global function glib_check_version(required_major: guint, required_minor: guint, required_micro: guint): *gchar <cimport,nodecl> end
global function g_mem_chunk_new(name: *gchar, atom_size: gint, area_size: gsize, type: gint): *GMemChunk <cimport,nodecl> end
global function g_mem_chunk_destroy(mem_chunk: *GMemChunk): void <cimport,nodecl> end
global function g_mem_chunk_alloc(mem_chunk: *GMemChunk): gpointer <cimport,nodecl> end
global function g_mem_chunk_alloc0(mem_chunk: *GMemChunk): gpointer <cimport,nodecl> end
global function g_mem_chunk_free(mem_chunk: *GMemChunk, mem: gpointer): void <cimport,nodecl> end
global function g_mem_chunk_clean(mem_chunk: *GMemChunk): void <cimport,nodecl> end
global function g_mem_chunk_reset(mem_chunk: *GMemChunk): void <cimport,nodecl> end
global function g_mem_chunk_print(mem_chunk: *GMemChunk): void <cimport,nodecl> end
global function g_mem_chunk_info(): void <cimport,nodecl> end
global function g_blow_chunks(): void <cimport,nodecl> end
global function g_allocator_new(name: *gchar, n_preallocs: guint): *GAllocator <cimport,nodecl> end
global function g_allocator_free(allocator: *GAllocator): void <cimport,nodecl> end
global function g_list_push_allocator(allocator: *GAllocator): void <cimport,nodecl> end
global function g_list_pop_allocator(): void <cimport,nodecl> end
global function g_slist_push_allocator(allocator: *GAllocator): void <cimport,nodecl> end
global function g_slist_pop_allocator(): void <cimport,nodecl> end
global function g_node_push_allocator(allocator: *GAllocator): void <cimport,nodecl> end
global function g_node_pop_allocator(): void <cimport,nodecl> end
global function g_cache_new(value_new_func: GCacheNewFunc, value_destroy_func: GCacheDestroyFunc, key_dup_func: GCacheDupFunc, key_destroy_func: GCacheDestroyFunc, hash_key_func: GHashFunc, hash_value_func: GHashFunc, key_equal_func: GEqualFunc): *GCache <cimport,nodecl> end
global function g_cache_destroy(cache: *GCache): void <cimport,nodecl> end
global function g_cache_insert(cache: *GCache, key: gpointer): gpointer <cimport,nodecl> end
global function g_cache_remove(cache: *GCache, value: gconstpointer): void <cimport,nodecl> end
global function g_cache_key_foreach(cache: *GCache, func: GHFunc, user_data: gpointer): void <cimport,nodecl> end
global function g_cache_value_foreach(cache: *GCache, func: GHFunc, user_data: gpointer): void <cimport,nodecl> end
global function g_completion_new(func: GCompletionFunc): *GCompletion <cimport,nodecl> end
global function g_completion_add_items(cmp: *GCompletion, items: *GList): void <cimport,nodecl> end
global function g_completion_remove_items(cmp: *GCompletion, items: *GList): void <cimport,nodecl> end
global function g_completion_clear_items(cmp: *GCompletion): void <cimport,nodecl> end
global function g_completion_complete(cmp: *GCompletion, prefix: *gchar, new_prefix: **gchar): *GList <cimport,nodecl> end
global function g_completion_complete_utf8(cmp: *GCompletion, prefix: *gchar, new_prefix: **gchar): *GList <cimport,nodecl> end
global function g_completion_set_compare(cmp: *GCompletion, strncmp_func: GCompletionStrncmpFunc): void <cimport,nodecl> end
global function g_completion_free(cmp: *GCompletion): void <cimport,nodecl> end
global function g_relation_new(fields: gint): *GRelation <cimport,nodecl> end
global function g_relation_destroy(relation: *GRelation): void <cimport,nodecl> end
global function g_relation_index(relation: *GRelation, field: gint, hash_func: GHashFunc, key_equal_func: GEqualFunc): void <cimport,nodecl> end
global function g_relation_insert(relation: *GRelation, ...: cvarargs): void <cimport,nodecl> end
global function g_relation_delete(relation: *GRelation, key: gconstpointer, field: gint): gint <cimport,nodecl> end
global function g_relation_select(relation: *GRelation, key: gconstpointer, field: gint): *GTuples <cimport,nodecl> end
global function g_relation_count(relation: *GRelation, key: gconstpointer, field: gint): gint <cimport,nodecl> end
global function g_relation_exists(relation: *GRelation, ...: cvarargs): gboolean <cimport,nodecl> end
global function g_relation_print(relation: *GRelation): void <cimport,nodecl> end
global function g_tuples_destroy(tuples: *GTuples): void <cimport,nodecl> end
global function g_tuples_index(tuples: *GTuples, index_: gint, field: gint): gpointer <cimport,nodecl> end
global g_thread_functions_for_glib_use: GThreadFunctions <cimport,nodecl>
global g_thread_use_default_impl: gboolean <cimport,nodecl>
global g_thread_gettime: function(): guint64 <cimport,nodecl>
global function g_thread_create(func: GThreadFunc, data: gpointer, joinable: gboolean, error: **GError): *GThread <cimport,nodecl> end
global function g_thread_create_full(func: GThreadFunc, data: gpointer, stack_size: gulong, joinable: gboolean, bound: gboolean, priority: GThreadPriority, error: **GError): *GThread <cimport,nodecl> end
global function g_thread_set_priority(thread: *GThread, priority: GThreadPriority): void <cimport,nodecl> end
global function g_thread_foreach(thread_func: GFunc, user_data: gpointer): void <cimport,nodecl> end
global function sched_setparam(pid: cint, param: *sched_param): cint <cimport,nodecl> end
global function sched_getparam(pid: cint, param: *sched_param): cint <cimport,nodecl> end
global function sched_setscheduler(pid: cint, policy: cint, param: *sched_param): cint <cimport,nodecl> end
global function sched_getscheduler(pid: cint): cint <cimport,nodecl> end
global function sched_yield(): cint <cimport,nodecl> end
global function sched_get_priority_max(algorithm: cint): cint <cimport,nodecl> end
global function sched_get_priority_min(algorithm: cint): cint <cimport,nodecl> end
global function sched_rr_get_interval(pid: cint, t: *timespec): cint <cimport,nodecl> end
global function pthread_create(newthread: *pthread_t, attr: *pthread_attr_t, start_routine: function(a1: pointer): pointer, arg: pointer): cint <cimport,nodecl> end
global function pthread_exit(retval: pointer): void <cimport,nodecl> end
global function pthread_join(th: pthread_t, thread_return: *pointer): cint <cimport,nodecl> end
global function pthread_detach(th: pthread_t): cint <cimport,nodecl> end
global function pthread_self(): pthread_t <cimport,nodecl> end
global function pthread_equal(thread1: pthread_t, thread2: pthread_t): cint <cimport,nodecl> end
global function pthread_attr_init(attr: *pthread_attr_t): cint <cimport,nodecl> end
global function pthread_attr_destroy(attr: *pthread_attr_t): cint <cimport,nodecl> end
global function pthread_attr_getdetachstate(attr: *pthread_attr_t, detachstate: *cint): cint <cimport,nodecl> end
global function pthread_attr_setdetachstate(attr: *pthread_attr_t, detachstate: cint): cint <cimport,nodecl> end
global function pthread_attr_getguardsize(attr: *pthread_attr_t, guardsize: *csize): cint <cimport,nodecl> end
global function pthread_attr_setguardsize(attr: *pthread_attr_t, guardsize: csize): cint <cimport,nodecl> end
global function pthread_attr_getschedparam(attr: *pthread_attr_t, param: *sched_param): cint <cimport,nodecl> end
global function pthread_attr_setschedparam(attr: *pthread_attr_t, param: *sched_param): cint <cimport,nodecl> end
global function pthread_attr_getschedpolicy(attr: *pthread_attr_t, policy: *cint): cint <cimport,nodecl> end
global function pthread_attr_setschedpolicy(attr: *pthread_attr_t, policy: cint): cint <cimport,nodecl> end
global function pthread_attr_getinheritsched(attr: *pthread_attr_t, inherit: *cint): cint <cimport,nodecl> end
global function pthread_attr_setinheritsched(attr: *pthread_attr_t, inherit: cint): cint <cimport,nodecl> end
global function pthread_attr_getscope(attr: *pthread_attr_t, scope: *cint): cint <cimport,nodecl> end
global function pthread_attr_setscope(attr: *pthread_attr_t, scope: cint): cint <cimport,nodecl> end
global function pthread_attr_getstackaddr(attr: *pthread_attr_t, stackaddr: *pointer): cint <cimport,nodecl> end
global function pthread_attr_setstackaddr(attr: *pthread_attr_t, stackaddr: pointer): cint <cimport,nodecl> end
global function pthread_attr_getstacksize(attr: *pthread_attr_t, stacksize: *csize): cint <cimport,nodecl> end
global function pthread_attr_setstacksize(attr: *pthread_attr_t, stacksize: csize): cint <cimport,nodecl> end
global function pthread_attr_getstack(attr: *pthread_attr_t, stackaddr: *pointer, stacksize: *csize): cint <cimport,nodecl> end
global function pthread_attr_setstack(attr: *pthread_attr_t, stackaddr: pointer, stacksize: csize): cint <cimport,nodecl> end
global function pthread_setschedparam(target_thread: pthread_t, policy: cint, param: *sched_param): cint <cimport,nodecl> end
global function pthread_getschedparam(target_thread: pthread_t, policy: *cint, param: *sched_param): cint <cimport,nodecl> end
global function pthread_setschedprio(target_thread: pthread_t, prio: cint): cint <cimport,nodecl> end
global function pthread_once(once_control: *pthread_once_t, init_routine: function(): void): cint <cimport,nodecl> end
global function pthread_setcancelstate(state: cint, oldstate: *cint): cint <cimport,nodecl> end
global function pthread_setcanceltype(type: cint, oldtype: *cint): cint <cimport,nodecl> end
global function pthread_cancel(th: pthread_t): cint <cimport,nodecl> end
global function pthread_testcancel(): void <cimport,nodecl> end
global function pthread_mutex_init(mutex: *pthread_mutex_t, mutexattr: *pthread_mutexattr_t): cint <cimport,nodecl> end
global function pthread_mutex_destroy(mutex: *pthread_mutex_t): cint <cimport,nodecl> end
global function pthread_mutex_trylock(mutex: *pthread_mutex_t): cint <cimport,nodecl> end
global function pthread_mutex_lock(mutex: *pthread_mutex_t): cint <cimport,nodecl> end
global function pthread_mutex_timedlock(mutex: *pthread_mutex_t, abstime: *timespec): cint <cimport,nodecl> end
global function pthread_mutex_unlock(mutex: *pthread_mutex_t): cint <cimport,nodecl> end
global function pthread_mutex_getprioceiling(mutex: *pthread_mutex_t, prioceiling: *cint): cint <cimport,nodecl> end
global function pthread_mutex_setprioceiling(mutex: *pthread_mutex_t, prioceiling: cint, old_ceiling: *cint): cint <cimport,nodecl> end
global function pthread_mutex_consistent(mutex: *pthread_mutex_t): cint <cimport,nodecl> end
global function pthread_mutexattr_init(attr: *pthread_mutexattr_t): cint <cimport,nodecl> end
global function pthread_mutexattr_destroy(attr: *pthread_mutexattr_t): cint <cimport,nodecl> end
global function pthread_mutexattr_getpshared(attr: *pthread_mutexattr_t, pshared: *cint): cint <cimport,nodecl> end
global function pthread_mutexattr_setpshared(attr: *pthread_mutexattr_t, pshared: cint): cint <cimport,nodecl> end
global function pthread_mutexattr_gettype(attr: *pthread_mutexattr_t, kind: *cint): cint <cimport,nodecl> end
global function pthread_mutexattr_settype(attr: *pthread_mutexattr_t, kind: cint): cint <cimport,nodecl> end
global function pthread_mutexattr_getprotocol(attr: *pthread_mutexattr_t, protocol: *cint): cint <cimport,nodecl> end
global function pthread_mutexattr_setprotocol(attr: *pthread_mutexattr_t, protocol: cint): cint <cimport,nodecl> end
global function pthread_mutexattr_getprioceiling(attr: *pthread_mutexattr_t, prioceiling: *cint): cint <cimport,nodecl> end
global function pthread_mutexattr_setprioceiling(attr: *pthread_mutexattr_t, prioceiling: cint): cint <cimport,nodecl> end
global function pthread_mutexattr_getrobust(attr: *pthread_mutexattr_t, robustness: *cint): cint <cimport,nodecl> end
global function pthread_mutexattr_setrobust(attr: *pthread_mutexattr_t, robustness: cint): cint <cimport,nodecl> end
global function pthread_rwlock_init(rwlock: *pthread_rwlock_t, attr: *pthread_rwlockattr_t): cint <cimport,nodecl> end
global function pthread_rwlock_destroy(rwlock: *pthread_rwlock_t): cint <cimport,nodecl> end
global function pthread_rwlock_rdlock(rwlock: *pthread_rwlock_t): cint <cimport,nodecl> end
global function pthread_rwlock_tryrdlock(rwlock: *pthread_rwlock_t): cint <cimport,nodecl> end
global function pthread_rwlock_timedrdlock(rwlock: *pthread_rwlock_t, abstime: *timespec): cint <cimport,nodecl> end
global function pthread_rwlock_wrlock(rwlock: *pthread_rwlock_t): cint <cimport,nodecl> end
global function pthread_rwlock_trywrlock(rwlock: *pthread_rwlock_t): cint <cimport,nodecl> end
global function pthread_rwlock_timedwrlock(rwlock: *pthread_rwlock_t, abstime: *timespec): cint <cimport,nodecl> end
global function pthread_rwlock_unlock(rwlock: *pthread_rwlock_t): cint <cimport,nodecl> end
global function pthread_rwlockattr_init(attr: *pthread_rwlockattr_t): cint <cimport,nodecl> end
global function pthread_rwlockattr_destroy(attr: *pthread_rwlockattr_t): cint <cimport,nodecl> end
global function pthread_rwlockattr_getpshared(attr: *pthread_rwlockattr_t, pshared: *cint): cint <cimport,nodecl> end
global function pthread_rwlockattr_setpshared(attr: *pthread_rwlockattr_t, pshared: cint): cint <cimport,nodecl> end
global function pthread_rwlockattr_getkind_np(attr: *pthread_rwlockattr_t, pref: *cint): cint <cimport,nodecl> end
global function pthread_rwlockattr_setkind_np(attr: *pthread_rwlockattr_t, pref: cint): cint <cimport,nodecl> end
global function pthread_cond_init(cond: *pthread_cond_t, cond_attr: *pthread_condattr_t): cint <cimport,nodecl> end
global function pthread_cond_destroy(cond: *pthread_cond_t): cint <cimport,nodecl> end
global function pthread_cond_signal(cond: *pthread_cond_t): cint <cimport,nodecl> end
global function pthread_cond_broadcast(cond: *pthread_cond_t): cint <cimport,nodecl> end
global function pthread_cond_wait(cond: *pthread_cond_t, mutex: *pthread_mutex_t): cint <cimport,nodecl> end
global function pthread_cond_timedwait(cond: *pthread_cond_t, mutex: *pthread_mutex_t, abstime: *timespec): cint <cimport,nodecl> end
global function pthread_condattr_init(attr: *pthread_condattr_t): cint <cimport,nodecl> end
global function pthread_condattr_destroy(attr: *pthread_condattr_t): cint <cimport,nodecl> end
global function pthread_condattr_getpshared(attr: *pthread_condattr_t, pshared: *cint): cint <cimport,nodecl> end
global function pthread_condattr_setpshared(attr: *pthread_condattr_t, pshared: cint): cint <cimport,nodecl> end
global function pthread_condattr_getclock(attr: *pthread_condattr_t, clock_id: *cint): cint <cimport,nodecl> end
global function pthread_condattr_setclock(attr: *pthread_condattr_t, clock_id: cint): cint <cimport,nodecl> end
global function pthread_spin_init(lock: *pthread_spinlock_t, pshared: cint): cint <cimport,nodecl> end
global function pthread_spin_destroy(lock: *pthread_spinlock_t): cint <cimport,nodecl> end
global function pthread_spin_lock(lock: *pthread_spinlock_t): cint <cimport,nodecl> end
global function pthread_spin_trylock(lock: *pthread_spinlock_t): cint <cimport,nodecl> end
global function pthread_spin_unlock(lock: *pthread_spinlock_t): cint <cimport,nodecl> end
global function pthread_barrier_init(barrier: *pthread_barrier_t, attr: *pthread_barrierattr_t, count: cuint): cint <cimport,nodecl> end
global function pthread_barrier_destroy(barrier: *pthread_barrier_t): cint <cimport,nodecl> end
global function pthread_barrier_wait(barrier: *pthread_barrier_t): cint <cimport,nodecl> end
global function pthread_barrierattr_init(attr: *pthread_barrierattr_t): cint <cimport,nodecl> end
global function pthread_barrierattr_destroy(attr: *pthread_barrierattr_t): cint <cimport,nodecl> end
global function pthread_barrierattr_getpshared(attr: *pthread_barrierattr_t, pshared: *cint): cint <cimport,nodecl> end
global function pthread_barrierattr_setpshared(attr: *pthread_barrierattr_t, pshared: cint): cint <cimport,nodecl> end
global function pthread_key_create(key: *pthread_key_t, destr_function: function(a1: pointer): void): cint <cimport,nodecl> end
global function pthread_key_delete(key: pthread_key_t): cint <cimport,nodecl> end
global function pthread_getspecific(key: pthread_key_t): pointer <cimport,nodecl> end
global function pthread_setspecific(key: pthread_key_t, pointer: pointer): cint <cimport,nodecl> end
global function pthread_getcpuclockid(thread_id: pthread_t, clock_id: *cint): cint <cimport,nodecl> end
global function pthread_atfork(prepare: function(): void, parent: function(): void, child: function(): void): cint <cimport,nodecl> end
global function g_static_mutex_init(mutex: *GStaticMutex): void <cimport,nodecl> end
global function g_static_mutex_free(mutex: *GStaticMutex): void <cimport,nodecl> end
global function g_static_mutex_get_mutex_impl(mutex: *GStaticMutex): *GMutex <cimport,nodecl> end
global function g_static_rec_mutex_init(mutex: *GStaticRecMutex): void <cimport,nodecl> end
global function g_static_rec_mutex_lock(mutex: *GStaticRecMutex): void <cimport,nodecl> end
global function g_static_rec_mutex_trylock(mutex: *GStaticRecMutex): gboolean <cimport,nodecl> end
global function g_static_rec_mutex_unlock(mutex: *GStaticRecMutex): void <cimport,nodecl> end
global function g_static_rec_mutex_lock_full(mutex: *GStaticRecMutex, depth: guint): void <cimport,nodecl> end
global function g_static_rec_mutex_unlock_full(mutex: *GStaticRecMutex): guint <cimport,nodecl> end
global function g_static_rec_mutex_free(mutex: *GStaticRecMutex): void <cimport,nodecl> end
global function g_static_rw_lock_init(lock: *GStaticRWLock): void <cimport,nodecl> end
global function g_static_rw_lock_reader_lock(lock: *GStaticRWLock): void <cimport,nodecl> end
global function g_static_rw_lock_reader_trylock(lock: *GStaticRWLock): gboolean <cimport,nodecl> end
global function g_static_rw_lock_reader_unlock(lock: *GStaticRWLock): void <cimport,nodecl> end
global function g_static_rw_lock_writer_lock(lock: *GStaticRWLock): void <cimport,nodecl> end
global function g_static_rw_lock_writer_trylock(lock: *GStaticRWLock): gboolean <cimport,nodecl> end
global function g_static_rw_lock_writer_unlock(lock: *GStaticRWLock): void <cimport,nodecl> end
global function g_static_rw_lock_free(lock: *GStaticRWLock): void <cimport,nodecl> end
global function g_private_new(notify: GDestroyNotify): *GPrivate <cimport,nodecl> end
global function g_static_private_init(private_key: *GStaticPrivate): void <cimport,nodecl> end
global function g_static_private_get(private_key: *GStaticPrivate): gpointer <cimport,nodecl> end
global function g_static_private_set(private_key: *GStaticPrivate, data: gpointer, notify: GDestroyNotify): void <cimport,nodecl> end
global function g_static_private_free(private_key: *GStaticPrivate): void <cimport,nodecl> end
global function g_once_init_enter_impl(location: *gsize): gboolean <cimport,nodecl> end
global function g_thread_init(vtable: gpointer): void <cimport,nodecl> end
global function g_thread_init_with_errorcheck_mutexes(vtable: gpointer): void <cimport,nodecl> end
global function g_thread_get_initialized(): gboolean <cimport,nodecl> end
global g_threads_got_initialized: gboolean <cimport,nodecl>
global function g_mutex_new(): *GMutex <cimport,nodecl> end
global function g_mutex_free(mutex: *GMutex): void <cimport,nodecl> end
global function g_cond_new(): *GCond <cimport,nodecl> end
global function g_cond_free(cond: *GCond): void <cimport,nodecl> end
global function g_cond_timed_wait(cond: *GCond, mutex: *GMutex, _timeval: *GTimeVal): gboolean <cimport,nodecl> end
global function g_autoptr_cleanup_generic_gfree(p: pointer): void <cimport,nodecl> end
global function g_autoptr_cleanup_gstring_free(string: *GString): void <cimport,nodecl> end
global function glib_autoptr_clear_GAsyncQueue(_ptr: *GAsyncQueue): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GAsyncQueue(_ptr: **GAsyncQueue): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GAsyncQueue(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GAsyncQueue(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GAsyncQueue(_q: **GQueue): void <cimport,nodecl> end
global function glib_autoptr_clear_GBookmarkFile(_ptr: *GBookmarkFile): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GBookmarkFile(_ptr: **GBookmarkFile): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GBookmarkFile(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GBookmarkFile(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GBookmarkFile(_q: **GQueue): void <cimport,nodecl> end
global function glib_autoptr_clear_GBytes(_ptr: *GBytes): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GBytes(_ptr: **GBytes): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GBytes(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GBytes(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GBytes(_q: **GQueue): void <cimport,nodecl> end
global function glib_autoptr_clear_GChecksum(_ptr: *GChecksum): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GChecksum(_ptr: **GChecksum): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GChecksum(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GChecksum(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GChecksum(_q: **GQueue): void <cimport,nodecl> end
global function glib_autoptr_clear_GDateTime(_ptr: *GDateTime): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GDateTime(_ptr: **GDateTime): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GDateTime(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GDateTime(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GDateTime(_q: **GQueue): void <cimport,nodecl> end
global function glib_autoptr_clear_GDate(_ptr: *GDate): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GDate(_ptr: **GDate): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GDate(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GDate(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GDate(_q: **GQueue): void <cimport,nodecl> end
global function glib_autoptr_clear_GDir(_ptr: *GDir): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GDir(_ptr: **GDir): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GDir(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GDir(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GDir(_q: **GQueue): void <cimport,nodecl> end
global function glib_autoptr_clear_GError(_ptr: *GError): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GError(_ptr: **GError): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GError(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GError(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GError(_q: **GQueue): void <cimport,nodecl> end
global function glib_autoptr_clear_GHashTable(_ptr: *GHashTable): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GHashTable(_ptr: **GHashTable): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GHashTable(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GHashTable(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GHashTable(_q: **GQueue): void <cimport,nodecl> end
global function glib_autoptr_clear_GHmac(_ptr: *GHmac): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GHmac(_ptr: **GHmac): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GHmac(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GHmac(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GHmac(_q: **GQueue): void <cimport,nodecl> end
global function glib_autoptr_clear_GIOChannel(_ptr: *GIOChannel): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GIOChannel(_ptr: **GIOChannel): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GIOChannel(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GIOChannel(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GIOChannel(_q: **GQueue): void <cimport,nodecl> end
global function glib_autoptr_clear_GKeyFile(_ptr: *GKeyFile): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GKeyFile(_ptr: **GKeyFile): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GKeyFile(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GKeyFile(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GKeyFile(_q: **GQueue): void <cimport,nodecl> end
global function glib_autoptr_clear_GList(_ptr: *GList): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GList(_ptr: **GList): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GList(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GList(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GList(_q: **GQueue): void <cimport,nodecl> end
global function glib_autoptr_clear_GArray(_ptr: *GArray): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GArray(_ptr: **GArray): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GArray(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GArray(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GArray(_q: **GQueue): void <cimport,nodecl> end
global function glib_autoptr_clear_GPtrArray(_ptr: *GPtrArray): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GPtrArray(_ptr: **GPtrArray): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GPtrArray(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GPtrArray(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GPtrArray(_q: **GQueue): void <cimport,nodecl> end
global function glib_autoptr_clear_GByteArray(_ptr: *GByteArray): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GByteArray(_ptr: **GByteArray): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GByteArray(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GByteArray(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GByteArray(_q: **GQueue): void <cimport,nodecl> end
global function glib_autoptr_clear_GMainContext(_ptr: *GMainContext): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GMainContext(_ptr: **GMainContext): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GMainContext(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GMainContext(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GMainContext(_q: **GQueue): void <cimport,nodecl> end
global function glib_autoptr_clear_GMainContextPusher(_ptr: *GMainContextPusher): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GMainContextPusher(_ptr: **GMainContextPusher): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GMainContextPusher(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GMainContextPusher(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GMainContextPusher(_q: **GQueue): void <cimport,nodecl> end
global function glib_autoptr_clear_GMainLoop(_ptr: *GMainLoop): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GMainLoop(_ptr: **GMainLoop): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GMainLoop(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GMainLoop(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GMainLoop(_q: **GQueue): void <cimport,nodecl> end
global function glib_autoptr_clear_GSource(_ptr: *GSource): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GSource(_ptr: **GSource): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GSource(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GSource(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GSource(_q: **GQueue): void <cimport,nodecl> end
global function glib_autoptr_clear_GMappedFile(_ptr: *GMappedFile): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GMappedFile(_ptr: **GMappedFile): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GMappedFile(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GMappedFile(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GMappedFile(_q: **GQueue): void <cimport,nodecl> end
global function glib_autoptr_clear_GMarkupParseContext(_ptr: *GMarkupParseContext): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GMarkupParseContext(_ptr: **GMarkupParseContext): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GMarkupParseContext(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GMarkupParseContext(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GMarkupParseContext(_q: **GQueue): void <cimport,nodecl> end
global function glib_autoptr_clear_GNode(_ptr: *GNode): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GNode(_ptr: **GNode): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GNode(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GNode(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GNode(_q: **GQueue): void <cimport,nodecl> end
global function glib_autoptr_clear_GOptionContext(_ptr: *GOptionContext): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GOptionContext(_ptr: **GOptionContext): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GOptionContext(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GOptionContext(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GOptionContext(_q: **GQueue): void <cimport,nodecl> end
global function glib_autoptr_clear_GOptionGroup(_ptr: *GOptionGroup): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GOptionGroup(_ptr: **GOptionGroup): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GOptionGroup(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GOptionGroup(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GOptionGroup(_q: **GQueue): void <cimport,nodecl> end
global function glib_autoptr_clear_GPatternSpec(_ptr: *GPatternSpec): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GPatternSpec(_ptr: **GPatternSpec): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GPatternSpec(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GPatternSpec(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GPatternSpec(_q: **GQueue): void <cimport,nodecl> end
global function glib_autoptr_clear_GQueue(_ptr: *GQueue): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GQueue(_ptr: **GQueue): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GQueue(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GQueue(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GQueue(_q: **GQueue): void <cimport,nodecl> end
global function glib_auto_cleanup_GQueue(_ptr: *GQueue): void <cimport,nodecl> end
global function glib_autoptr_clear_GRand(_ptr: *GRand): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GRand(_ptr: **GRand): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GRand(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GRand(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GRand(_q: **GQueue): void <cimport,nodecl> end
global function glib_autoptr_clear_GRegex(_ptr: *GRegex): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GRegex(_ptr: **GRegex): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GRegex(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GRegex(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GRegex(_q: **GQueue): void <cimport,nodecl> end
global function glib_autoptr_clear_GMatchInfo(_ptr: *GMatchInfo): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GMatchInfo(_ptr: **GMatchInfo): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GMatchInfo(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GMatchInfo(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GMatchInfo(_q: **GQueue): void <cimport,nodecl> end
global function glib_autoptr_clear_GScanner(_ptr: *GScanner): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GScanner(_ptr: **GScanner): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GScanner(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GScanner(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GScanner(_q: **GQueue): void <cimport,nodecl> end
global function glib_autoptr_clear_GSequence(_ptr: *GSequence): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GSequence(_ptr: **GSequence): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GSequence(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GSequence(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GSequence(_q: **GQueue): void <cimport,nodecl> end
global function glib_autoptr_clear_GSList(_ptr: *GSList): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GSList(_ptr: **GSList): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GSList(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GSList(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GSList(_q: **GQueue): void <cimport,nodecl> end
global function glib_autoptr_clear_GString(_ptr: *GString): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GString(_ptr: **GString): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GString(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GString(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GString(_q: **GQueue): void <cimport,nodecl> end
global function glib_autoptr_clear_GStringChunk(_ptr: *GStringChunk): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GStringChunk(_ptr: **GStringChunk): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GStringChunk(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GStringChunk(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GStringChunk(_q: **GQueue): void <cimport,nodecl> end
global function glib_autoptr_clear_GStrvBuilder(_ptr: *GStrvBuilder): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GStrvBuilder(_ptr: **GStrvBuilder): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GStrvBuilder(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GStrvBuilder(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GStrvBuilder(_q: **GQueue): void <cimport,nodecl> end
global function glib_autoptr_clear_GThread(_ptr: *GThread): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GThread(_ptr: **GThread): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GThread(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GThread(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GThread(_q: **GQueue): void <cimport,nodecl> end
global function glib_auto_cleanup_GMutex(_ptr: *GMutex): void <cimport,nodecl> end
global function glib_autoptr_clear_GMutexLocker(_ptr: *GMutexLocker): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GMutexLocker(_ptr: **GMutexLocker): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GMutexLocker(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GMutexLocker(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GMutexLocker(_q: **GQueue): void <cimport,nodecl> end
global function glib_autoptr_clear_GRecMutexLocker(_ptr: *GRecMutexLocker): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GRecMutexLocker(_ptr: **GRecMutexLocker): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GRecMutexLocker(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GRecMutexLocker(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GRecMutexLocker(_q: **GQueue): void <cimport,nodecl> end
global function glib_autoptr_clear_GRWLockWriterLocker(_ptr: *GRWLockWriterLocker): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GRWLockWriterLocker(_ptr: **GRWLockWriterLocker): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GRWLockWriterLocker(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GRWLockWriterLocker(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GRWLockWriterLocker(_q: **GQueue): void <cimport,nodecl> end
global function glib_autoptr_clear_GRWLockReaderLocker(_ptr: *GRWLockReaderLocker): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GRWLockReaderLocker(_ptr: **GRWLockReaderLocker): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GRWLockReaderLocker(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GRWLockReaderLocker(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GRWLockReaderLocker(_q: **GQueue): void <cimport,nodecl> end
global function glib_auto_cleanup_GCond(_ptr: *GCond): void <cimport,nodecl> end
global function glib_autoptr_clear_GTimer(_ptr: *GTimer): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GTimer(_ptr: **GTimer): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GTimer(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GTimer(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GTimer(_q: **GQueue): void <cimport,nodecl> end
global function glib_autoptr_clear_GTimeZone(_ptr: *GTimeZone): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GTimeZone(_ptr: **GTimeZone): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GTimeZone(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GTimeZone(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GTimeZone(_q: **GQueue): void <cimport,nodecl> end
global function glib_autoptr_clear_GTree(_ptr: *GTree): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GTree(_ptr: **GTree): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GTree(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GTree(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GTree(_q: **GQueue): void <cimport,nodecl> end
global function glib_autoptr_clear_GVariant(_ptr: *GVariant): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GVariant(_ptr: **GVariant): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GVariant(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GVariant(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GVariant(_q: **GQueue): void <cimport,nodecl> end
global function glib_autoptr_clear_GVariantBuilder(_ptr: *GVariantBuilder): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GVariantBuilder(_ptr: **GVariantBuilder): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GVariantBuilder(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GVariantBuilder(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GVariantBuilder(_q: **GQueue): void <cimport,nodecl> end
global function glib_auto_cleanup_GVariantBuilder(_ptr: *GVariantBuilder): void <cimport,nodecl> end
global function glib_autoptr_clear_GVariantIter(_ptr: *GVariantIter): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GVariantIter(_ptr: **GVariantIter): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GVariantIter(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GVariantIter(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GVariantIter(_q: **GQueue): void <cimport,nodecl> end
global function glib_autoptr_clear_GVariantDict(_ptr: *GVariantDict): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GVariantDict(_ptr: **GVariantDict): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GVariantDict(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GVariantDict(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GVariantDict(_q: **GQueue): void <cimport,nodecl> end
global function glib_auto_cleanup_GVariantDict(_ptr: *GVariantDict): void <cimport,nodecl> end
global function glib_autoptr_clear_GVariantType(_ptr: *GVariantType): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GVariantType(_ptr: **GVariantType): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GVariantType(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GVariantType(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GVariantType(_q: **GQueue): void <cimport,nodecl> end
global function glib_auto_cleanup_GStrv(_ptr: *GStrv): void <cimport,nodecl> end
global function glib_autoptr_clear_GRefString(_ptr: *GRefString): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GRefString(_ptr: **GRefString): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GRefString(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GRefString(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GRefString(_q: **GQueue): void <cimport,nodecl> end
global function glib_autoptr_clear_GUri(_ptr: *GUri): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GUri(_ptr: **GUri): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GUri(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GUri(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GUri(_q: **GQueue): void <cimport,nodecl> end
global function g_type_init(): void <cimport,nodecl> end
global function g_type_init_with_debug_flags(debug_flags: GTypeDebugFlags): void <cimport,nodecl> end
global function g_type_name(type: GType): *gchar <cimport,nodecl> end
global function g_type_qname(type: GType): GQuark <cimport,nodecl> end
global function g_type_from_name(name: *gchar): GType <cimport,nodecl> end
global function g_type_parent(type: GType): GType <cimport,nodecl> end
global function g_type_depth(type: GType): guint <cimport,nodecl> end
global function g_type_next_base(leaf_type: GType, root_type: GType): GType <cimport,nodecl> end
global function g_type_is_a(type: GType, is_a_type: GType): gboolean <cimport,nodecl> end
global function g_type_class_ref(type: GType): gpointer <cimport,nodecl> end
global function g_type_class_peek(type: GType): gpointer <cimport,nodecl> end
global function g_type_class_peek_static(type: GType): gpointer <cimport,nodecl> end
global function g_type_class_unref(g_class: gpointer): void <cimport,nodecl> end
global function g_type_class_peek_parent(g_class: gpointer): gpointer <cimport,nodecl> end
global function g_type_interface_peek(instance_class: gpointer, iface_type: GType): gpointer <cimport,nodecl> end
global function g_type_interface_peek_parent(g_iface: gpointer): gpointer <cimport,nodecl> end
global function g_type_default_interface_ref(g_type: GType): gpointer <cimport,nodecl> end
global function g_type_default_interface_peek(g_type: GType): gpointer <cimport,nodecl> end
global function g_type_default_interface_unref(g_iface: gpointer): void <cimport,nodecl> end
global function g_type_children(type: GType, n_children: *guint): *GType <cimport,nodecl> end
global function g_type_interfaces(type: GType, n_interfaces: *guint): *GType <cimport,nodecl> end
global function g_type_set_qdata(type: GType, quark: GQuark, data: gpointer): void <cimport,nodecl> end
global function g_type_get_qdata(type: GType, quark: GQuark): gpointer <cimport,nodecl> end
global function g_type_query(type: GType, query: *GTypeQuery): void <cimport,nodecl> end
global function g_type_get_instance_count(type: GType): cint <cimport,nodecl> end
global function g_type_register_static(parent_type: GType, type_name: *gchar, info: *GTypeInfo, flags: GTypeFlags): GType <cimport,nodecl> end
global function g_type_register_static_simple(parent_type: GType, type_name: *gchar, class_size: guint, class_init: GClassInitFunc, instance_size: guint, instance_init: GInstanceInitFunc, flags: GTypeFlags): GType <cimport,nodecl> end
global function g_type_register_dynamic(parent_type: GType, type_name: *gchar, plugin: *GTypePlugin, flags: GTypeFlags): GType <cimport,nodecl> end
global function g_type_register_fundamental(type_id: GType, type_name: *gchar, info: *GTypeInfo, finfo: *GTypeFundamentalInfo, flags: GTypeFlags): GType <cimport,nodecl> end
global function g_type_add_interface_static(instance_type: GType, interface_type: GType, info: *GInterfaceInfo): void <cimport,nodecl> end
global function g_type_add_interface_dynamic(instance_type: GType, interface_type: GType, plugin: *GTypePlugin): void <cimport,nodecl> end
global function g_type_interface_add_prerequisite(interface_type: GType, prerequisite_type: GType): void <cimport,nodecl> end
global function g_type_interface_prerequisites(interface_type: GType, n_prerequisites: *guint): *GType <cimport,nodecl> end
global function g_type_interface_instantiatable_prerequisite(interface_type: GType): GType <cimport,nodecl> end
global function g_type_class_add_private(g_class: gpointer, private_size: gsize): void <cimport,nodecl> end
global function g_type_add_instance_private(class_type: GType, private_size: gsize): gint <cimport,nodecl> end
global function g_type_instance_get_private(instance: *GTypeInstance, private_type: GType): gpointer <cimport,nodecl> end
global function g_type_class_adjust_private_offset(g_class: gpointer, private_size_or_offset: *gint): void <cimport,nodecl> end
global function g_type_add_class_private(class_type: GType, private_size: gsize): void <cimport,nodecl> end
global function g_type_class_get_private(klass: *GTypeClass, private_type: GType): gpointer <cimport,nodecl> end
global function g_type_class_get_instance_private_offset(g_class: gpointer): gint <cimport,nodecl> end
global function g_type_ensure(type: GType): void <cimport,nodecl> end
global function g_type_get_type_registration_serial(): guint <cimport,nodecl> end
global function g_type_get_plugin(type: GType): *GTypePlugin <cimport,nodecl> end
global function g_type_interface_get_plugin(instance_type: GType, interface_type: GType): *GTypePlugin <cimport,nodecl> end
global function g_type_fundamental_next(): GType <cimport,nodecl> end
global function g_type_fundamental(type_id: GType): GType <cimport,nodecl> end
global function g_type_create_instance(type: GType): *GTypeInstance <cimport,nodecl> end
global function g_type_free_instance(instance: *GTypeInstance): void <cimport,nodecl> end
global function g_type_add_class_cache_func(cache_data: gpointer, cache_func: GTypeClassCacheFunc): void <cimport,nodecl> end
global function g_type_remove_class_cache_func(cache_data: gpointer, cache_func: GTypeClassCacheFunc): void <cimport,nodecl> end
global function g_type_class_unref_uncached(g_class: gpointer): void <cimport,nodecl> end
global function g_type_add_interface_check(check_data: gpointer, check_func: GTypeInterfaceCheckFunc): void <cimport,nodecl> end
global function g_type_remove_interface_check(check_data: gpointer, check_func: GTypeInterfaceCheckFunc): void <cimport,nodecl> end
global function g_type_value_table_peek(type: GType): *GTypeValueTable <cimport,nodecl> end
global function g_type_check_instance(instance: *GTypeInstance): gboolean <cimport,nodecl> end
global function g_type_check_instance_cast(instance: *GTypeInstance, iface_type: GType): *GTypeInstance <cimport,nodecl> end
global function g_type_check_instance_is_a(instance: *GTypeInstance, iface_type: GType): gboolean <cimport,nodecl> end
global function g_type_check_instance_is_fundamentally_a(instance: *GTypeInstance, fundamental_type: GType): gboolean <cimport,nodecl> end
global function g_type_check_class_cast(g_class: *GTypeClass, is_a_type: GType): *GTypeClass <cimport,nodecl> end
global function g_type_check_class_is_a(g_class: *GTypeClass, is_a_type: GType): gboolean <cimport,nodecl> end
global function g_type_check_is_value_type(type: GType): gboolean <cimport,nodecl> end
global function g_type_check_value(value: *GValue): gboolean <cimport,nodecl> end
global function g_type_check_value_holds(value: *GValue, type: GType): gboolean <cimport,nodecl> end
global function g_type_test_flags(type: GType, flags: guint): gboolean <cimport,nodecl> end
global function g_type_name_from_instance(instance: *GTypeInstance): *gchar <cimport,nodecl> end
global function g_type_name_from_class(g_class: *GTypeClass): *gchar <cimport,nodecl> end
global function g_value_init(value: *GValue, g_type: GType): *GValue <cimport,nodecl> end
global function g_value_copy(src_value: *GValue, dest_value: *GValue): void <cimport,nodecl> end
global function g_value_reset(value: *GValue): *GValue <cimport,nodecl> end
global function g_value_unset(value: *GValue): void <cimport,nodecl> end
global function g_value_set_instance(value: *GValue, instance: gpointer): void <cimport,nodecl> end
global function g_value_init_from_instance(value: *GValue, instance: gpointer): void <cimport,nodecl> end
global function g_value_fits_pointer(value: *GValue): gboolean <cimport,nodecl> end
global function g_value_peek_pointer(value: *GValue): gpointer <cimport,nodecl> end
global function g_value_type_compatible(src_type: GType, dest_type: GType): gboolean <cimport,nodecl> end
global function g_value_type_transformable(src_type: GType, dest_type: GType): gboolean <cimport,nodecl> end
global function g_value_transform(src_value: *GValue, dest_value: *GValue): gboolean <cimport,nodecl> end
global function g_value_register_transform_func(src_type: GType, dest_type: GType, transform_func: GValueTransform): void <cimport,nodecl> end
global function g_param_spec_ref(pspec: *GParamSpec): *GParamSpec <cimport,nodecl> end
global function g_param_spec_unref(pspec: *GParamSpec): void <cimport,nodecl> end
global function g_param_spec_sink(pspec: *GParamSpec): void <cimport,nodecl> end
global function g_param_spec_ref_sink(pspec: *GParamSpec): *GParamSpec <cimport,nodecl> end
global function g_param_spec_get_qdata(pspec: *GParamSpec, quark: GQuark): gpointer <cimport,nodecl> end
global function g_param_spec_set_qdata(pspec: *GParamSpec, quark: GQuark, data: gpointer): void <cimport,nodecl> end
global function g_param_spec_set_qdata_full(pspec: *GParamSpec, quark: GQuark, data: gpointer, destroy: GDestroyNotify): void <cimport,nodecl> end
global function g_param_spec_steal_qdata(pspec: *GParamSpec, quark: GQuark): gpointer <cimport,nodecl> end
global function g_param_spec_get_redirect_target(pspec: *GParamSpec): *GParamSpec <cimport,nodecl> end
global function g_param_value_set_default(pspec: *GParamSpec, value: *GValue): void <cimport,nodecl> end
global function g_param_value_defaults(pspec: *GParamSpec, value: *GValue): gboolean <cimport,nodecl> end
global function g_param_value_validate(pspec: *GParamSpec, value: *GValue): gboolean <cimport,nodecl> end
global function g_param_value_convert(pspec: *GParamSpec, src_value: *GValue, dest_value: *GValue, strict_validation: gboolean): gboolean <cimport,nodecl> end
global function g_param_values_cmp(pspec: *GParamSpec, value1: *GValue, value2: *GValue): gint <cimport,nodecl> end
global function g_param_spec_get_name(pspec: *GParamSpec): *gchar <cimport,nodecl> end
global function g_param_spec_get_nick(pspec: *GParamSpec): *gchar <cimport,nodecl> end
global function g_param_spec_get_blurb(pspec: *GParamSpec): *gchar <cimport,nodecl> end
global function g_value_set_param(value: *GValue, param: *GParamSpec): void <cimport,nodecl> end
global function g_value_get_param(value: *GValue): *GParamSpec <cimport,nodecl> end
global function g_value_dup_param(value: *GValue): *GParamSpec <cimport,nodecl> end
global function g_value_take_param(value: *GValue, param: *GParamSpec): void <cimport,nodecl> end
global function g_value_set_param_take_ownership(value: *GValue, param: *GParamSpec): void <cimport,nodecl> end
global function g_param_spec_get_default_value(pspec: *GParamSpec): *GValue <cimport,nodecl> end
global function g_param_spec_get_name_quark(pspec: *GParamSpec): GQuark <cimport,nodecl> end
global function g_param_type_register_static(name: *gchar, pspec_info: *GParamSpecTypeInfo): GType <cimport,nodecl> end
global function g_param_spec_is_valid_name(name: *gchar): gboolean <cimport,nodecl> end
global function _g_param_type_register_static_constant(name: *gchar, pspec_info: *GParamSpecTypeInfo, opt_type: GType): GType <cimport,nodecl> end
global function g_param_spec_internal(param_type: GType, name: *gchar, nick: *gchar, blurb: *gchar, flags: GParamFlags): gpointer <cimport,nodecl> end
global function g_param_spec_pool_new(type_prefixing: gboolean): *GParamSpecPool <cimport,nodecl> end
global function g_param_spec_pool_insert(pool: *GParamSpecPool, pspec: *GParamSpec, owner_type: GType): void <cimport,nodecl> end
global function g_param_spec_pool_remove(pool: *GParamSpecPool, pspec: *GParamSpec): void <cimport,nodecl> end
global function g_param_spec_pool_lookup(pool: *GParamSpecPool, param_name: *gchar, owner_type: GType, walk_ancestors: gboolean): *GParamSpec <cimport,nodecl> end
global function g_param_spec_pool_list_owned(pool: *GParamSpecPool, owner_type: GType): *GList <cimport,nodecl> end
global function g_param_spec_pool_list(pool: *GParamSpecPool, owner_type: GType, n_pspecs_p: *guint): **GParamSpec <cimport,nodecl> end
global function g_cclosure_new(callback_func: GCallback, user_data: gpointer, destroy_data: GClosureNotify): *GClosure <cimport,nodecl> end
global function g_cclosure_new_swap(callback_func: GCallback, user_data: gpointer, destroy_data: GClosureNotify): *GClosure <cimport,nodecl> end
global function g_signal_type_cclosure_new(itype: GType, struct_offset: guint): *GClosure <cimport,nodecl> end
global function g_closure_ref(closure: *GClosure): *GClosure <cimport,nodecl> end
global function g_closure_sink(closure: *GClosure): void <cimport,nodecl> end
global function g_closure_unref(closure: *GClosure): void <cimport,nodecl> end
global function g_closure_new_simple(sizeof_closure: guint, data: gpointer): *GClosure <cimport,nodecl> end
global function g_closure_add_finalize_notifier(closure: *GClosure, notify_data: gpointer, notify_func: GClosureNotify): void <cimport,nodecl> end
global function g_closure_remove_finalize_notifier(closure: *GClosure, notify_data: gpointer, notify_func: GClosureNotify): void <cimport,nodecl> end
global function g_closure_add_invalidate_notifier(closure: *GClosure, notify_data: gpointer, notify_func: GClosureNotify): void <cimport,nodecl> end
global function g_closure_remove_invalidate_notifier(closure: *GClosure, notify_data: gpointer, notify_func: GClosureNotify): void <cimport,nodecl> end
global function g_closure_add_marshal_guards(closure: *GClosure, pre_marshal_data: gpointer, pre_marshal_notify: GClosureNotify, post_marshal_data: gpointer, post_marshal_notify: GClosureNotify): void <cimport,nodecl> end
global function g_closure_set_marshal(closure: *GClosure, marshal: GClosureMarshal): void <cimport,nodecl> end
global function g_closure_set_meta_marshal(closure: *GClosure, marshal_data: gpointer, meta_marshal: GClosureMarshal): void <cimport,nodecl> end
global function g_closure_invalidate(closure: *GClosure): void <cimport,nodecl> end
global function g_closure_invoke(closure: *GClosure, return_value: *GValue, n_param_values: guint, param_values: *GValue, invocation_hint: gpointer): void <cimport,nodecl> end
global function g_cclosure_marshal_generic(closure: *GClosure, return_gvalue: *GValue, n_param_values: guint, param_values: *GValue, invocation_hint: gpointer, marshal_data: gpointer): void <cimport,nodecl> end
global function g_cclosure_marshal_generic_va(closure: *GClosure, return_value: *GValue, instance: gpointer, args_list: cvalist, marshal_data: gpointer, n_params: cint, param_types: *GType): void <cimport,nodecl> end
global function g_cclosure_marshal_VOID__VOID(closure: *GClosure, return_value: *GValue, n_param_values: guint, param_values: *GValue, invocation_hint: gpointer, marshal_data: gpointer): void <cimport,nodecl> end
global function g_cclosure_marshal_VOID__VOIDv(closure: *GClosure, return_value: *GValue, instance: gpointer, args: cvalist, marshal_data: gpointer, n_params: cint, param_types: *GType): void <cimport,nodecl> end
global function g_cclosure_marshal_VOID__BOOLEAN(closure: *GClosure, return_value: *GValue, n_param_values: guint, param_values: *GValue, invocation_hint: gpointer, marshal_data: gpointer): void <cimport,nodecl> end
global function g_cclosure_marshal_VOID__BOOLEANv(closure: *GClosure, return_value: *GValue, instance: gpointer, args: cvalist, marshal_data: gpointer, n_params: cint, param_types: *GType): void <cimport,nodecl> end
global function g_cclosure_marshal_VOID__CHAR(closure: *GClosure, return_value: *GValue, n_param_values: guint, param_values: *GValue, invocation_hint: gpointer, marshal_data: gpointer): void <cimport,nodecl> end
global function g_cclosure_marshal_VOID__CHARv(closure: *GClosure, return_value: *GValue, instance: gpointer, args: cvalist, marshal_data: gpointer, n_params: cint, param_types: *GType): void <cimport,nodecl> end
global function g_cclosure_marshal_VOID__UCHAR(closure: *GClosure, return_value: *GValue, n_param_values: guint, param_values: *GValue, invocation_hint: gpointer, marshal_data: gpointer): void <cimport,nodecl> end
global function g_cclosure_marshal_VOID__UCHARv(closure: *GClosure, return_value: *GValue, instance: gpointer, args: cvalist, marshal_data: gpointer, n_params: cint, param_types: *GType): void <cimport,nodecl> end
global function g_cclosure_marshal_VOID__INT(closure: *GClosure, return_value: *GValue, n_param_values: guint, param_values: *GValue, invocation_hint: gpointer, marshal_data: gpointer): void <cimport,nodecl> end
global function g_cclosure_marshal_VOID__INTv(closure: *GClosure, return_value: *GValue, instance: gpointer, args: cvalist, marshal_data: gpointer, n_params: cint, param_types: *GType): void <cimport,nodecl> end
global function g_cclosure_marshal_VOID__UINT(closure: *GClosure, return_value: *GValue, n_param_values: guint, param_values: *GValue, invocation_hint: gpointer, marshal_data: gpointer): void <cimport,nodecl> end
global function g_cclosure_marshal_VOID__UINTv(closure: *GClosure, return_value: *GValue, instance: gpointer, args: cvalist, marshal_data: gpointer, n_params: cint, param_types: *GType): void <cimport,nodecl> end
global function g_cclosure_marshal_VOID__LONG(closure: *GClosure, return_value: *GValue, n_param_values: guint, param_values: *GValue, invocation_hint: gpointer, marshal_data: gpointer): void <cimport,nodecl> end
global function g_cclosure_marshal_VOID__LONGv(closure: *GClosure, return_value: *GValue, instance: gpointer, args: cvalist, marshal_data: gpointer, n_params: cint, param_types: *GType): void <cimport,nodecl> end
global function g_cclosure_marshal_VOID__ULONG(closure: *GClosure, return_value: *GValue, n_param_values: guint, param_values: *GValue, invocation_hint: gpointer, marshal_data: gpointer): void <cimport,nodecl> end
global function g_cclosure_marshal_VOID__ULONGv(closure: *GClosure, return_value: *GValue, instance: gpointer, args: cvalist, marshal_data: gpointer, n_params: cint, param_types: *GType): void <cimport,nodecl> end
global function g_cclosure_marshal_VOID__ENUM(closure: *GClosure, return_value: *GValue, n_param_values: guint, param_values: *GValue, invocation_hint: gpointer, marshal_data: gpointer): void <cimport,nodecl> end
global function g_cclosure_marshal_VOID__ENUMv(closure: *GClosure, return_value: *GValue, instance: gpointer, args: cvalist, marshal_data: gpointer, n_params: cint, param_types: *GType): void <cimport,nodecl> end
global function g_cclosure_marshal_VOID__FLAGS(closure: *GClosure, return_value: *GValue, n_param_values: guint, param_values: *GValue, invocation_hint: gpointer, marshal_data: gpointer): void <cimport,nodecl> end
global function g_cclosure_marshal_VOID__FLAGSv(closure: *GClosure, return_value: *GValue, instance: gpointer, args: cvalist, marshal_data: gpointer, n_params: cint, param_types: *GType): void <cimport,nodecl> end
global function g_cclosure_marshal_VOID__FLOAT(closure: *GClosure, return_value: *GValue, n_param_values: guint, param_values: *GValue, invocation_hint: gpointer, marshal_data: gpointer): void <cimport,nodecl> end
global function g_cclosure_marshal_VOID__FLOATv(closure: *GClosure, return_value: *GValue, instance: gpointer, args: cvalist, marshal_data: gpointer, n_params: cint, param_types: *GType): void <cimport,nodecl> end
global function g_cclosure_marshal_VOID__DOUBLE(closure: *GClosure, return_value: *GValue, n_param_values: guint, param_values: *GValue, invocation_hint: gpointer, marshal_data: gpointer): void <cimport,nodecl> end
global function g_cclosure_marshal_VOID__DOUBLEv(closure: *GClosure, return_value: *GValue, instance: gpointer, args: cvalist, marshal_data: gpointer, n_params: cint, param_types: *GType): void <cimport,nodecl> end
global function g_cclosure_marshal_VOID__STRING(closure: *GClosure, return_value: *GValue, n_param_values: guint, param_values: *GValue, invocation_hint: gpointer, marshal_data: gpointer): void <cimport,nodecl> end
global function g_cclosure_marshal_VOID__STRINGv(closure: *GClosure, return_value: *GValue, instance: gpointer, args: cvalist, marshal_data: gpointer, n_params: cint, param_types: *GType): void <cimport,nodecl> end
global function g_cclosure_marshal_VOID__PARAM(closure: *GClosure, return_value: *GValue, n_param_values: guint, param_values: *GValue, invocation_hint: gpointer, marshal_data: gpointer): void <cimport,nodecl> end
global function g_cclosure_marshal_VOID__PARAMv(closure: *GClosure, return_value: *GValue, instance: gpointer, args: cvalist, marshal_data: gpointer, n_params: cint, param_types: *GType): void <cimport,nodecl> end
global function g_cclosure_marshal_VOID__BOXED(closure: *GClosure, return_value: *GValue, n_param_values: guint, param_values: *GValue, invocation_hint: gpointer, marshal_data: gpointer): void <cimport,nodecl> end
global function g_cclosure_marshal_VOID__BOXEDv(closure: *GClosure, return_value: *GValue, instance: gpointer, args: cvalist, marshal_data: gpointer, n_params: cint, param_types: *GType): void <cimport,nodecl> end
global function g_cclosure_marshal_VOID__POINTER(closure: *GClosure, return_value: *GValue, n_param_values: guint, param_values: *GValue, invocation_hint: gpointer, marshal_data: gpointer): void <cimport,nodecl> end
global function g_cclosure_marshal_VOID__POINTERv(closure: *GClosure, return_value: *GValue, instance: gpointer, args: cvalist, marshal_data: gpointer, n_params: cint, param_types: *GType): void <cimport,nodecl> end
global function g_cclosure_marshal_VOID__OBJECT(closure: *GClosure, return_value: *GValue, n_param_values: guint, param_values: *GValue, invocation_hint: gpointer, marshal_data: gpointer): void <cimport,nodecl> end
global function g_cclosure_marshal_VOID__OBJECTv(closure: *GClosure, return_value: *GValue, instance: gpointer, args: cvalist, marshal_data: gpointer, n_params: cint, param_types: *GType): void <cimport,nodecl> end
global function g_cclosure_marshal_VOID__VARIANT(closure: *GClosure, return_value: *GValue, n_param_values: guint, param_values: *GValue, invocation_hint: gpointer, marshal_data: gpointer): void <cimport,nodecl> end
global function g_cclosure_marshal_VOID__VARIANTv(closure: *GClosure, return_value: *GValue, instance: gpointer, args: cvalist, marshal_data: gpointer, n_params: cint, param_types: *GType): void <cimport,nodecl> end
global function g_cclosure_marshal_VOID__UINT_POINTER(closure: *GClosure, return_value: *GValue, n_param_values: guint, param_values: *GValue, invocation_hint: gpointer, marshal_data: gpointer): void <cimport,nodecl> end
global function g_cclosure_marshal_VOID__UINT_POINTERv(closure: *GClosure, return_value: *GValue, instance: gpointer, args: cvalist, marshal_data: gpointer, n_params: cint, param_types: *GType): void <cimport,nodecl> end
global function g_cclosure_marshal_BOOLEAN__FLAGS(closure: *GClosure, return_value: *GValue, n_param_values: guint, param_values: *GValue, invocation_hint: gpointer, marshal_data: gpointer): void <cimport,nodecl> end
global function g_cclosure_marshal_BOOLEAN__FLAGSv(closure: *GClosure, return_value: *GValue, instance: gpointer, args: cvalist, marshal_data: gpointer, n_params: cint, param_types: *GType): void <cimport,nodecl> end
global function g_cclosure_marshal_STRING__OBJECT_POINTER(closure: *GClosure, return_value: *GValue, n_param_values: guint, param_values: *GValue, invocation_hint: gpointer, marshal_data: gpointer): void <cimport,nodecl> end
global function g_cclosure_marshal_STRING__OBJECT_POINTERv(closure: *GClosure, return_value: *GValue, instance: gpointer, args: cvalist, marshal_data: gpointer, n_params: cint, param_types: *GType): void <cimport,nodecl> end
global function g_cclosure_marshal_BOOLEAN__BOXED_BOXED(closure: *GClosure, return_value: *GValue, n_param_values: guint, param_values: *GValue, invocation_hint: gpointer, marshal_data: gpointer): void <cimport,nodecl> end
global function g_cclosure_marshal_BOOLEAN__BOXED_BOXEDv(closure: *GClosure, return_value: *GValue, instance: gpointer, args: cvalist, marshal_data: gpointer, n_params: cint, param_types: *GType): void <cimport,nodecl> end
global function g_signal_newv(signal_name: *gchar, itype: GType, signal_flags: GSignalFlags, class_closure: *GClosure, accumulator: GSignalAccumulator, accu_data: gpointer, c_marshaller: GSignalCMarshaller, return_type: GType, n_params: guint, param_types: *GType): guint <cimport,nodecl> end
global function g_signal_new_valist(signal_name: *gchar, itype: GType, signal_flags: GSignalFlags, class_closure: *GClosure, accumulator: GSignalAccumulator, accu_data: gpointer, c_marshaller: GSignalCMarshaller, return_type: GType, n_params: guint, args: cvalist): guint <cimport,nodecl> end
global function g_signal_new(signal_name: *gchar, itype: GType, signal_flags: GSignalFlags, class_offset: guint, accumulator: GSignalAccumulator, accu_data: gpointer, c_marshaller: GSignalCMarshaller, return_type: GType, n_params: guint, ...: cvarargs): guint <cimport,nodecl> end
global function g_signal_new_class_handler(signal_name: *gchar, itype: GType, signal_flags: GSignalFlags, class_handler: GCallback, accumulator: GSignalAccumulator, accu_data: gpointer, c_marshaller: GSignalCMarshaller, return_type: GType, n_params: guint, ...: cvarargs): guint <cimport,nodecl> end
global function g_signal_set_va_marshaller(signal_id: guint, instance_type: GType, va_marshaller: GSignalCVaMarshaller): void <cimport,nodecl> end
global function g_signal_emitv(instance_and_params: *GValue, signal_id: guint, detail: GQuark, return_value: *GValue): void <cimport,nodecl> end
global function g_signal_emit_valist(instance: gpointer, signal_id: guint, detail: GQuark, var_args: cvalist): void <cimport,nodecl> end
global function g_signal_emit(instance: gpointer, signal_id: guint, detail: GQuark, ...: cvarargs): void <cimport,nodecl> end
global function g_signal_emit_by_name(instance: gpointer, detailed_signal: *gchar, ...: cvarargs): void <cimport,nodecl> end
global function g_signal_lookup(name: *gchar, itype: GType): guint <cimport,nodecl> end
global function g_signal_name(signal_id: guint): *gchar <cimport,nodecl> end
global function g_signal_query(signal_id: guint, query: *GSignalQuery): void <cimport,nodecl> end
global function g_signal_list_ids(itype: GType, n_ids: *guint): *guint <cimport,nodecl> end
global function g_signal_is_valid_name(name: *gchar): gboolean <cimport,nodecl> end
global function g_signal_parse_name(detailed_signal: *gchar, itype: GType, signal_id_p: *guint, detail_p: *GQuark, force_detail_quark: gboolean): gboolean <cimport,nodecl> end
global function g_signal_get_invocation_hint(instance: gpointer): *GSignalInvocationHint <cimport,nodecl> end
global function g_signal_stop_emission(instance: gpointer, signal_id: guint, detail: GQuark): void <cimport,nodecl> end
global function g_signal_stop_emission_by_name(instance: gpointer, detailed_signal: *gchar): void <cimport,nodecl> end
global function g_signal_add_emission_hook(signal_id: guint, detail: GQuark, hook_func: GSignalEmissionHook, hook_data: gpointer, data_destroy: GDestroyNotify): gulong <cimport,nodecl> end
global function g_signal_remove_emission_hook(signal_id: guint, hook_id: gulong): void <cimport,nodecl> end
global function g_signal_has_handler_pending(instance: gpointer, signal_id: guint, detail: GQuark, may_be_blocked: gboolean): gboolean <cimport,nodecl> end
global function g_signal_connect_closure_by_id(instance: gpointer, signal_id: guint, detail: GQuark, closure: *GClosure, after: gboolean): gulong <cimport,nodecl> end
global function g_signal_connect_closure(instance: gpointer, detailed_signal: *gchar, closure: *GClosure, after: gboolean): gulong <cimport,nodecl> end
global function g_signal_connect_data(instance: gpointer, detailed_signal: *gchar, c_handler: GCallback, data: gpointer, destroy_data: GClosureNotify, connect_flags: GConnectFlags): gulong <cimport,nodecl> end
global function g_signal_handler_block(instance: gpointer, handler_id: gulong): void <cimport,nodecl> end
global function g_signal_handler_unblock(instance: gpointer, handler_id: gulong): void <cimport,nodecl> end
global function g_signal_handler_disconnect(instance: gpointer, handler_id: gulong): void <cimport,nodecl> end
global function g_signal_handler_is_connected(instance: gpointer, handler_id: gulong): gboolean <cimport,nodecl> end
global function g_signal_handler_find(instance: gpointer, mask: GSignalMatchType, signal_id: guint, detail: GQuark, closure: *GClosure, func: gpointer, data: gpointer): gulong <cimport,nodecl> end
global function g_signal_handlers_block_matched(instance: gpointer, mask: GSignalMatchType, signal_id: guint, detail: GQuark, closure: *GClosure, func: gpointer, data: gpointer): guint <cimport,nodecl> end
global function g_signal_handlers_unblock_matched(instance: gpointer, mask: GSignalMatchType, signal_id: guint, detail: GQuark, closure: *GClosure, func: gpointer, data: gpointer): guint <cimport,nodecl> end
global function g_signal_handlers_disconnect_matched(instance: gpointer, mask: GSignalMatchType, signal_id: guint, detail: GQuark, closure: *GClosure, func: gpointer, data: gpointer): guint <cimport,nodecl> end
global function g_clear_signal_handler(handler_id_ptr: *gulong, instance: gpointer): void <cimport,nodecl> end
global function g_signal_override_class_closure(signal_id: guint, instance_type: GType, class_closure: *GClosure): void <cimport,nodecl> end
global function g_signal_override_class_handler(signal_name: *gchar, instance_type: GType, class_handler: GCallback): void <cimport,nodecl> end
global function g_signal_chain_from_overridden(instance_and_params: *GValue, return_value: *GValue): void <cimport,nodecl> end
global function g_signal_chain_from_overridden_handler(instance: gpointer, ...: cvarargs): void <cimport,nodecl> end
global function g_signal_accumulator_true_handled(ihint: *GSignalInvocationHint, return_accu: *GValue, handler_return: *GValue, dummy: gpointer): gboolean <cimport,nodecl> end
global function g_signal_accumulator_first_wins(ihint: *GSignalInvocationHint, return_accu: *GValue, handler_return: *GValue, dummy: gpointer): gboolean <cimport,nodecl> end
global function g_signal_handlers_destroy(instance: gpointer): void <cimport,nodecl> end
global function _g_signals_destroy(itype: GType): void <cimport,nodecl> end
global function g_date_get_type(): GType <cimport,nodecl> end
global function g_strv_get_type(): GType <cimport,nodecl> end
global function g_gstring_get_type(): GType <cimport,nodecl> end
global function g_hash_table_get_type(): GType <cimport,nodecl> end
global function g_array_get_type(): GType <cimport,nodecl> end
global function g_byte_array_get_type(): GType <cimport,nodecl> end
global function g_ptr_array_get_type(): GType <cimport,nodecl> end
global function g_bytes_get_type(): GType <cimport,nodecl> end
global function g_variant_type_get_gtype(): GType <cimport,nodecl> end
global function g_regex_get_type(): GType <cimport,nodecl> end
global function g_match_info_get_type(): GType <cimport,nodecl> end
global function g_error_get_type(): GType <cimport,nodecl> end
global function g_date_time_get_type(): GType <cimport,nodecl> end
global function g_time_zone_get_type(): GType <cimport,nodecl> end
global function g_io_channel_get_type(): GType <cimport,nodecl> end
global function g_io_condition_get_type(): GType <cimport,nodecl> end
global function g_variant_builder_get_type(): GType <cimport,nodecl> end
global function g_variant_dict_get_type(): GType <cimport,nodecl> end
global function g_key_file_get_type(): GType <cimport,nodecl> end
global function g_main_loop_get_type(): GType <cimport,nodecl> end
global function g_main_context_get_type(): GType <cimport,nodecl> end
global function g_source_get_type(): GType <cimport,nodecl> end
global function g_pollfd_get_type(): GType <cimport,nodecl> end
global function g_thread_get_type(): GType <cimport,nodecl> end
global function g_checksum_get_type(): GType <cimport,nodecl> end
global function g_markup_parse_context_get_type(): GType <cimport,nodecl> end
global function g_mapped_file_get_type(): GType <cimport,nodecl> end
global function g_option_group_get_type(): GType <cimport,nodecl> end
global function g_uri_get_type(): GType <cimport,nodecl> end
global function g_tree_get_type(): GType <cimport,nodecl> end
global function g_pattern_spec_get_type(): GType <cimport,nodecl> end
global function g_variant_get_gtype(): GType <cimport,nodecl> end
global function g_boxed_copy(boxed_type: GType, src_boxed: gconstpointer): gpointer <cimport,nodecl> end
global function g_boxed_free(boxed_type: GType, boxed: gpointer): void <cimport,nodecl> end
global function g_value_set_boxed(value: *GValue, v_boxed: gconstpointer): void <cimport,nodecl> end
global function g_value_set_static_boxed(value: *GValue, v_boxed: gconstpointer): void <cimport,nodecl> end
global function g_value_take_boxed(value: *GValue, v_boxed: gconstpointer): void <cimport,nodecl> end
global function g_value_set_boxed_take_ownership(value: *GValue, v_boxed: gconstpointer): void <cimport,nodecl> end
global function g_value_get_boxed(value: *GValue): gpointer <cimport,nodecl> end
global function g_value_dup_boxed(value: *GValue): gpointer <cimport,nodecl> end
global function g_boxed_type_register_static(name: *gchar, boxed_copy: GBoxedCopyFunc, boxed_free: GBoxedFreeFunc): GType <cimport,nodecl> end
global function g_closure_get_type(): GType <cimport,nodecl> end
global function g_value_get_type(): GType <cimport,nodecl> end
global function g_initially_unowned_get_type(): GType <cimport,nodecl> end
global function g_object_class_install_property(oclass: *GObjectClass, property_id: guint, pspec: *GParamSpec): void <cimport,nodecl> end
global function g_object_class_find_property(oclass: *GObjectClass, property_name: *gchar): *GParamSpec <cimport,nodecl> end
global function g_object_class_list_properties(oclass: *GObjectClass, n_properties: *guint): **GParamSpec <cimport,nodecl> end
global function g_object_class_override_property(oclass: *GObjectClass, property_id: guint, name: *gchar): void <cimport,nodecl> end
global function g_object_class_install_properties(oclass: *GObjectClass, n_pspecs: guint, pspecs: **GParamSpec): void <cimport,nodecl> end
global function g_object_interface_install_property(g_iface: gpointer, pspec: *GParamSpec): void <cimport,nodecl> end
global function g_object_interface_find_property(g_iface: gpointer, property_name: *gchar): *GParamSpec <cimport,nodecl> end
global function g_object_interface_list_properties(g_iface: gpointer, n_properties_p: *guint): **GParamSpec <cimport,nodecl> end
global function g_object_get_type(): GType <cimport,nodecl> end
global function g_object_new(object_type: GType, first_property_name: *gchar, ...: cvarargs): gpointer <cimport,nodecl> end
global function g_object_new_with_properties(object_type: GType, n_properties: guint, names: *[0]cstring, values: *[0]GValue): *GObject <cimport,nodecl> end
global function g_object_newv(object_type: GType, n_parameters: guint, parameters: *GParameter): gpointer <cimport,nodecl> end
global function g_object_new_valist(object_type: GType, first_property_name: *gchar, var_args: cvalist): *GObject <cimport,nodecl> end
global function g_object_set(object: gpointer, first_property_name: *gchar, ...: cvarargs): void <cimport,nodecl> end
global function g_object_get(object: gpointer, first_property_name: *gchar, ...: cvarargs): void <cimport,nodecl> end
global function g_object_connect(object: gpointer, signal_spec: *gchar, ...: cvarargs): gpointer <cimport,nodecl> end
global function g_object_disconnect(object: gpointer, signal_spec: *gchar, ...: cvarargs): void <cimport,nodecl> end
global function g_object_setv(object: *GObject, n_properties: guint, names: *[0]*gchar, values: *[0]GValue): void <cimport,nodecl> end
global function g_object_set_valist(object: *GObject, first_property_name: *gchar, var_args: cvalist): void <cimport,nodecl> end
global function g_object_getv(object: *GObject, n_properties: guint, names: *[0]*gchar, values: *[0]GValue): void <cimport,nodecl> end
global function g_object_get_valist(object: *GObject, first_property_name: *gchar, var_args: cvalist): void <cimport,nodecl> end
global function g_object_set_property(object: *GObject, property_name: *gchar, value: *GValue): void <cimport,nodecl> end
global function g_object_get_property(object: *GObject, property_name: *gchar, value: *GValue): void <cimport,nodecl> end
global function g_object_freeze_notify(object: *GObject): void <cimport,nodecl> end
global function g_object_notify(object: *GObject, property_name: *gchar): void <cimport,nodecl> end
global function g_object_notify_by_pspec(object: *GObject, pspec: *GParamSpec): void <cimport,nodecl> end
global function g_object_thaw_notify(object: *GObject): void <cimport,nodecl> end
global function g_object_is_floating(object: gpointer): gboolean <cimport,nodecl> end
global function g_object_ref_sink(object: gpointer): gpointer <cimport,nodecl> end
global function g_object_take_ref(object: gpointer): gpointer <cimport,nodecl> end
global function g_object_ref(object: gpointer): gpointer <cimport,nodecl> end
global function g_object_unref(object: gpointer): void <cimport,nodecl> end
global function g_object_weak_ref(object: *GObject, notify: GWeakNotify, data: gpointer): void <cimport,nodecl> end
global function g_object_weak_unref(object: *GObject, notify: GWeakNotify, data: gpointer): void <cimport,nodecl> end
global function g_object_add_weak_pointer(object: *GObject, weak_pointer_location: *gpointer): void <cimport,nodecl> end
global function g_object_remove_weak_pointer(object: *GObject, weak_pointer_location: *gpointer): void <cimport,nodecl> end
global function g_object_add_toggle_ref(object: *GObject, notify: GToggleNotify, data: gpointer): void <cimport,nodecl> end
global function g_object_remove_toggle_ref(object: *GObject, notify: GToggleNotify, data: gpointer): void <cimport,nodecl> end
global function g_object_get_qdata(object: *GObject, quark: GQuark): gpointer <cimport,nodecl> end
global function g_object_set_qdata(object: *GObject, quark: GQuark, data: gpointer): void <cimport,nodecl> end
global function g_object_set_qdata_full(object: *GObject, quark: GQuark, data: gpointer, destroy: GDestroyNotify): void <cimport,nodecl> end
global function g_object_steal_qdata(object: *GObject, quark: GQuark): gpointer <cimport,nodecl> end
global function g_object_dup_qdata(object: *GObject, quark: GQuark, dup_func: GDuplicateFunc, user_data: gpointer): gpointer <cimport,nodecl> end
global function g_object_replace_qdata(object: *GObject, quark: GQuark, oldval: gpointer, newval: gpointer, destroy: GDestroyNotify, old_destroy: *GDestroyNotify): gboolean <cimport,nodecl> end
global function g_object_get_data(object: *GObject, key: *gchar): gpointer <cimport,nodecl> end
global function g_object_set_data(object: *GObject, key: *gchar, data: gpointer): void <cimport,nodecl> end
global function g_object_set_data_full(object: *GObject, key: *gchar, data: gpointer, destroy: GDestroyNotify): void <cimport,nodecl> end
global function g_object_steal_data(object: *GObject, key: *gchar): gpointer <cimport,nodecl> end
global function g_object_dup_data(object: *GObject, key: *gchar, dup_func: GDuplicateFunc, user_data: gpointer): gpointer <cimport,nodecl> end
global function g_object_replace_data(object: *GObject, key: *gchar, oldval: gpointer, newval: gpointer, destroy: GDestroyNotify, old_destroy: *GDestroyNotify): gboolean <cimport,nodecl> end
global function g_object_watch_closure(object: *GObject, closure: *GClosure): void <cimport,nodecl> end
global function g_cclosure_new_object(callback_func: GCallback, object: *GObject): *GClosure <cimport,nodecl> end
global function g_cclosure_new_object_swap(callback_func: GCallback, object: *GObject): *GClosure <cimport,nodecl> end
global function g_closure_new_object(sizeof_closure: guint, object: *GObject): *GClosure <cimport,nodecl> end
global function g_value_set_object(value: *GValue, v_object: gpointer): void <cimport,nodecl> end
global function g_value_get_object(value: *GValue): gpointer <cimport,nodecl> end
global function g_value_dup_object(value: *GValue): gpointer <cimport,nodecl> end
global function g_signal_connect_object(instance: gpointer, detailed_signal: *gchar, c_handler: GCallback, gobject: gpointer, connect_flags: GConnectFlags): gulong <cimport,nodecl> end
global function g_object_force_floating(object: *GObject): void <cimport,nodecl> end
global function g_object_run_dispose(object: *GObject): void <cimport,nodecl> end
global function g_value_take_object(value: *GValue, v_object: gpointer): void <cimport,nodecl> end
global function g_value_set_object_take_ownership(value: *GValue, v_object: gpointer): void <cimport,nodecl> end
global function g_object_compat_control(what: gsize, data: gpointer): gsize <cimport,nodecl> end
global function g_clear_object(object_ptr: **GObject): void <cimport,nodecl> end
global function g_set_object(object_ptr: **GObject, new_object: *GObject): gboolean <cimport,nodecl> end
global function g_assert_finalize_object(object: *GObject): void <cimport,nodecl> end
global function g_clear_weak_pointer(weak_pointer_location: *gpointer): void <cimport,nodecl> end
global function g_set_weak_pointer(weak_pointer_location: *gpointer, new_object: *GObject): gboolean <cimport,nodecl> end
global function g_weak_ref_init(weak_ref: *GWeakRef, object: gpointer): void <cimport,nodecl> end
global function g_weak_ref_clear(weak_ref: *GWeakRef): void <cimport,nodecl> end
global function g_weak_ref_get(weak_ref: *GWeakRef): gpointer <cimport,nodecl> end
global function g_weak_ref_set(weak_ref: *GWeakRef, object: gpointer): void <cimport,nodecl> end
global function g_binding_flags_get_type(): GType <cimport,nodecl> end
global function g_binding_get_type(): GType <cimport,nodecl> end
global function g_binding_get_flags(binding: *GBinding): GBindingFlags <cimport,nodecl> end
global function g_binding_get_source(binding: *GBinding): *GObject <cimport,nodecl> end
global function g_binding_dup_source(binding: *GBinding): *GObject <cimport,nodecl> end
global function g_binding_get_target(binding: *GBinding): *GObject <cimport,nodecl> end
global function g_binding_dup_target(binding: *GBinding): *GObject <cimport,nodecl> end
global function g_binding_get_source_property(binding: *GBinding): *gchar <cimport,nodecl> end
global function g_binding_get_target_property(binding: *GBinding): *gchar <cimport,nodecl> end
global function g_binding_unbind(binding: *GBinding): void <cimport,nodecl> end
global function g_object_bind_property(source: gpointer, source_property: *gchar, target: gpointer, target_property: *gchar, flags: GBindingFlags): *GBinding <cimport,nodecl> end
global function g_object_bind_property_full(source: gpointer, source_property: *gchar, target: gpointer, target_property: *gchar, flags: GBindingFlags, transform_to: GBindingTransformFunc, transform_from: GBindingTransformFunc, user_data: gpointer, notify: GDestroyNotify): *GBinding <cimport,nodecl> end
global function g_object_bind_property_with_closures(source: gpointer, source_property: *gchar, target: gpointer, target_property: *gchar, flags: GBindingFlags, transform_to: *GClosure, transform_from: *GClosure): *GBinding <cimport,nodecl> end
global function g_enum_get_value(enum_class: *GEnumClass, value: gint): *GEnumValue <cimport,nodecl> end
global function g_enum_get_value_by_name(enum_class: *GEnumClass, name: *gchar): *GEnumValue <cimport,nodecl> end
global function g_enum_get_value_by_nick(enum_class: *GEnumClass, nick: *gchar): *GEnumValue <cimport,nodecl> end
global function g_flags_get_first_value(flags_class: *GFlagsClass, value: guint): *GFlagsValue <cimport,nodecl> end
global function g_flags_get_value_by_name(flags_class: *GFlagsClass, name: *gchar): *GFlagsValue <cimport,nodecl> end
global function g_flags_get_value_by_nick(flags_class: *GFlagsClass, nick: *gchar): *GFlagsValue <cimport,nodecl> end
global function g_enum_to_string(g_enum_type: GType, value: gint): *gchar <cimport,nodecl> end
global function g_flags_to_string(flags_type: GType, value: guint): *gchar <cimport,nodecl> end
global function g_value_set_enum(value: *GValue, v_enum: gint): void <cimport,nodecl> end
global function g_value_get_enum(value: *GValue): gint <cimport,nodecl> end
global function g_value_set_flags(value: *GValue, v_flags: guint): void <cimport,nodecl> end
global function g_value_get_flags(value: *GValue): guint <cimport,nodecl> end
global function g_enum_register_static(name: *gchar, const_static_values: *GEnumValue): GType <cimport,nodecl> end
global function g_flags_register_static(name: *gchar, const_static_values: *GFlagsValue): GType <cimport,nodecl> end
global function g_enum_complete_type_info(g_enum_type: GType, info: *GTypeInfo, const_values: *GEnumValue): void <cimport,nodecl> end
global function g_flags_complete_type_info(g_flags_type: GType, info: *GTypeInfo, const_values: *GFlagsValue): void <cimport,nodecl> end
global function g_unicode_type_get_type(): GType <cimport,nodecl> end
global function g_unicode_break_type_get_type(): GType <cimport,nodecl> end
global function g_unicode_script_get_type(): GType <cimport,nodecl> end
global function g_normalize_mode_get_type(): GType <cimport,nodecl> end
global function g_param_spec_char(name: *gchar, nick: *gchar, blurb: *gchar, minimum: gint8, maximum: gint8, default_value: gint8, flags: GParamFlags): *GParamSpec <cimport,nodecl> end
global function g_param_spec_uchar(name: *gchar, nick: *gchar, blurb: *gchar, minimum: guint8, maximum: guint8, default_value: guint8, flags: GParamFlags): *GParamSpec <cimport,nodecl> end
global function g_param_spec_boolean(name: *gchar, nick: *gchar, blurb: *gchar, default_value: gboolean, flags: GParamFlags): *GParamSpec <cimport,nodecl> end
global function g_param_spec_int(name: *gchar, nick: *gchar, blurb: *gchar, minimum: gint, maximum: gint, default_value: gint, flags: GParamFlags): *GParamSpec <cimport,nodecl> end
global function g_param_spec_uint(name: *gchar, nick: *gchar, blurb: *gchar, minimum: guint, maximum: guint, default_value: guint, flags: GParamFlags): *GParamSpec <cimport,nodecl> end
global function g_param_spec_long(name: *gchar, nick: *gchar, blurb: *gchar, minimum: glong, maximum: glong, default_value: glong, flags: GParamFlags): *GParamSpec <cimport,nodecl> end
global function g_param_spec_ulong(name: *gchar, nick: *gchar, blurb: *gchar, minimum: gulong, maximum: gulong, default_value: gulong, flags: GParamFlags): *GParamSpec <cimport,nodecl> end
global function g_param_spec_int64(name: *gchar, nick: *gchar, blurb: *gchar, minimum: gint64, maximum: gint64, default_value: gint64, flags: GParamFlags): *GParamSpec <cimport,nodecl> end
global function g_param_spec_uint64(name: *gchar, nick: *gchar, blurb: *gchar, minimum: guint64, maximum: guint64, default_value: guint64, flags: GParamFlags): *GParamSpec <cimport,nodecl> end
global function g_param_spec_unichar(name: *gchar, nick: *gchar, blurb: *gchar, default_value: gunichar, flags: GParamFlags): *GParamSpec <cimport,nodecl> end
global function g_param_spec_enum(name: *gchar, nick: *gchar, blurb: *gchar, enum_type: GType, default_value: gint, flags: GParamFlags): *GParamSpec <cimport,nodecl> end
global function g_param_spec_flags(name: *gchar, nick: *gchar, blurb: *gchar, flags_type: GType, default_value: guint, flags: GParamFlags): *GParamSpec <cimport,nodecl> end
global function g_param_spec_float(name: *gchar, nick: *gchar, blurb: *gchar, minimum: gfloat, maximum: gfloat, default_value: gfloat, flags: GParamFlags): *GParamSpec <cimport,nodecl> end
global function g_param_spec_double(name: *gchar, nick: *gchar, blurb: *gchar, minimum: gdouble, maximum: gdouble, default_value: gdouble, flags: GParamFlags): *GParamSpec <cimport,nodecl> end
global function g_param_spec_string(name: *gchar, nick: *gchar, blurb: *gchar, default_value: *gchar, flags: GParamFlags): *GParamSpec <cimport,nodecl> end
global function g_param_spec_param(name: *gchar, nick: *gchar, blurb: *gchar, param_type: GType, flags: GParamFlags): *GParamSpec <cimport,nodecl> end
global function g_param_spec_boxed(name: *gchar, nick: *gchar, blurb: *gchar, boxed_type: GType, flags: GParamFlags): *GParamSpec <cimport,nodecl> end
global function g_param_spec_pointer(name: *gchar, nick: *gchar, blurb: *gchar, flags: GParamFlags): *GParamSpec <cimport,nodecl> end
global function g_param_spec_value_array(name: *gchar, nick: *gchar, blurb: *gchar, element_spec: *GParamSpec, flags: GParamFlags): *GParamSpec <cimport,nodecl> end
global function g_param_spec_object(name: *gchar, nick: *gchar, blurb: *gchar, object_type: GType, flags: GParamFlags): *GParamSpec <cimport,nodecl> end
global function g_param_spec_override(name: *gchar, overridden: *GParamSpec): *GParamSpec <cimport,nodecl> end
global function g_param_spec_gtype(name: *gchar, nick: *gchar, blurb: *gchar, is_a_type: GType, flags: GParamFlags): *GParamSpec <cimport,nodecl> end
global function g_param_spec_variant(name: *gchar, nick: *gchar, blurb: *gchar, type: *GVariantType, default_value: *GVariant, flags: GParamFlags): *GParamSpec <cimport,nodecl> end
global g_param_spec_types: *GType <cimport,nodecl>
global function g_source_set_closure(source: *GSource, closure: *GClosure): void <cimport,nodecl> end
global function g_source_set_dummy_callback(source: *GSource): void <cimport,nodecl> end
global function glib_autoptr_clear_GTypeModule(_ptr: *GTypeModule): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GTypeModule(_ptr: **GTypeModule): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GTypeModule(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GTypeModule(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GTypeModule(_q: **GQueue): void <cimport,nodecl> end
global function g_type_module_get_type(): GType <cimport,nodecl> end
global function g_type_module_use(module: *GTypeModule): gboolean <cimport,nodecl> end
global function g_type_module_unuse(module: *GTypeModule): void <cimport,nodecl> end
global function g_type_module_set_name(module: *GTypeModule, name: *gchar): void <cimport,nodecl> end
global function g_type_module_register_type(module: *GTypeModule, parent_type: GType, type_name: *gchar, type_info: *GTypeInfo, flags: GTypeFlags): GType <cimport,nodecl> end
global function g_type_module_add_interface(module: *GTypeModule, instance_type: GType, interface_type: GType, interface_info: *GInterfaceInfo): void <cimport,nodecl> end
global function g_type_module_register_enum(module: *GTypeModule, name: *gchar, const_static_values: *GEnumValue): GType <cimport,nodecl> end
global function g_type_module_register_flags(module: *GTypeModule, name: *gchar, const_static_values: *GFlagsValue): GType <cimport,nodecl> end
global function g_type_plugin_get_type(): GType <cimport,nodecl> end
global function g_type_plugin_use(plugin: *GTypePlugin): void <cimport,nodecl> end
global function g_type_plugin_unuse(plugin: *GTypePlugin): void <cimport,nodecl> end
global function g_type_plugin_complete_type_info(plugin: *GTypePlugin, g_type: GType, info: *GTypeInfo, value_table: *GTypeValueTable): void <cimport,nodecl> end
global function g_type_plugin_complete_interface_info(plugin: *GTypePlugin, instance_type: GType, interface_type: GType, info: *GInterfaceInfo): void <cimport,nodecl> end
global function g_value_array_get_type(): GType <cimport,nodecl> end
global function g_value_array_get_nth(value_array: *GValueArray, index_: guint): *GValue <cimport,nodecl> end
global function g_value_array_new(n_prealloced: guint): *GValueArray <cimport,nodecl> end
global function g_value_array_free(value_array: *GValueArray): void <cimport,nodecl> end
global function g_value_array_copy(value_array: *GValueArray): *GValueArray <cimport,nodecl> end
global function g_value_array_prepend(value_array: *GValueArray, value: *GValue): *GValueArray <cimport,nodecl> end
global function g_value_array_append(value_array: *GValueArray, value: *GValue): *GValueArray <cimport,nodecl> end
global function g_value_array_insert(value_array: *GValueArray, index_: guint, value: *GValue): *GValueArray <cimport,nodecl> end
global function g_value_array_remove(value_array: *GValueArray, index_: guint): *GValueArray <cimport,nodecl> end
global function g_value_array_sort(value_array: *GValueArray, compare_func: GCompareFunc): *GValueArray <cimport,nodecl> end
global function g_value_array_sort_with_data(value_array: *GValueArray, compare_func: GCompareDataFunc, user_data: gpointer): *GValueArray <cimport,nodecl> end
global function g_value_set_char(value: *GValue, v_char: gchar): void <cimport,nodecl> end
global function g_value_get_char(value: *GValue): gchar <cimport,nodecl> end
global function g_value_set_schar(value: *GValue, v_char: gint8): void <cimport,nodecl> end
global function g_value_get_schar(value: *GValue): gint8 <cimport,nodecl> end
global function g_value_set_uchar(value: *GValue, v_uchar: guchar): void <cimport,nodecl> end
global function g_value_get_uchar(value: *GValue): guchar <cimport,nodecl> end
global function g_value_set_boolean(value: *GValue, v_boolean: gboolean): void <cimport,nodecl> end
global function g_value_get_boolean(value: *GValue): gboolean <cimport,nodecl> end
global function g_value_set_int(value: *GValue, v_int: gint): void <cimport,nodecl> end
global function g_value_get_int(value: *GValue): gint <cimport,nodecl> end
global function g_value_set_uint(value: *GValue, v_uint: guint): void <cimport,nodecl> end
global function g_value_get_uint(value: *GValue): guint <cimport,nodecl> end
global function g_value_set_long(value: *GValue, v_long: glong): void <cimport,nodecl> end
global function g_value_get_long(value: *GValue): glong <cimport,nodecl> end
global function g_value_set_ulong(value: *GValue, v_ulong: gulong): void <cimport,nodecl> end
global function g_value_get_ulong(value: *GValue): gulong <cimport,nodecl> end
global function g_value_set_int64(value: *GValue, v_int64: gint64): void <cimport,nodecl> end
global function g_value_get_int64(value: *GValue): gint64 <cimport,nodecl> end
global function g_value_set_uint64(value: *GValue, v_uint64: guint64): void <cimport,nodecl> end
global function g_value_get_uint64(value: *GValue): guint64 <cimport,nodecl> end
global function g_value_set_float(value: *GValue, v_float: gfloat): void <cimport,nodecl> end
global function g_value_get_float(value: *GValue): gfloat <cimport,nodecl> end
global function g_value_set_double(value: *GValue, v_double: gdouble): void <cimport,nodecl> end
global function g_value_get_double(value: *GValue): gdouble <cimport,nodecl> end
global function g_value_set_string(value: *GValue, v_string: *gchar): void <cimport,nodecl> end
global function g_value_set_static_string(value: *GValue, v_string: *gchar): void <cimport,nodecl> end
global function g_value_set_interned_string(value: *GValue, v_string: *gchar): void <cimport,nodecl> end
global function g_value_get_string(value: *GValue): *gchar <cimport,nodecl> end
global function g_value_dup_string(value: *GValue): *gchar <cimport,nodecl> end
global function g_value_set_pointer(value: *GValue, v_pointer: gpointer): void <cimport,nodecl> end
global function g_value_get_pointer(value: *GValue): gpointer <cimport,nodecl> end
global function g_gtype_get_type(): GType <cimport,nodecl> end
global function g_value_set_gtype(value: *GValue, v_gtype: GType): void <cimport,nodecl> end
global function g_value_get_gtype(value: *GValue): GType <cimport,nodecl> end
global function g_value_set_variant(value: *GValue, variant: *GVariant): void <cimport,nodecl> end
global function g_value_take_variant(value: *GValue, variant: *GVariant): void <cimport,nodecl> end
global function g_value_get_variant(value: *GValue): *GVariant <cimport,nodecl> end
global function g_value_dup_variant(value: *GValue): *GVariant <cimport,nodecl> end
global function g_pointer_type_register_static(name: *gchar): GType <cimport,nodecl> end
global function g_strdup_value_contents(value: *GValue): *gchar <cimport,nodecl> end
global function g_value_take_string(value: *GValue, v_string: *gchar): void <cimport,nodecl> end
global function g_value_set_string_take_ownership(value: *GValue, v_string: *gchar): void <cimport,nodecl> end
global function glib_autoptr_clear_GClosure(_ptr: *GClosure): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GClosure(_ptr: **GClosure): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GClosure(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GClosure(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GClosure(_q: **GQueue): void <cimport,nodecl> end
global function glib_autoptr_clear_GEnumClass(_ptr: *GEnumClass): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GEnumClass(_ptr: **GEnumClass): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GEnumClass(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GEnumClass(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GEnumClass(_q: **GQueue): void <cimport,nodecl> end
global function glib_autoptr_clear_GFlagsClass(_ptr: *GFlagsClass): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GFlagsClass(_ptr: **GFlagsClass): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GFlagsClass(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GFlagsClass(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GFlagsClass(_q: **GQueue): void <cimport,nodecl> end
global function glib_autoptr_clear_GObject(_ptr: *GObject): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GObject(_ptr: **GObject): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GObject(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GObject(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GObject(_q: **GQueue): void <cimport,nodecl> end
global function glib_autoptr_clear_GInitiallyUnowned(_ptr: *GInitiallyUnowned): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GInitiallyUnowned(_ptr: **GInitiallyUnowned): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GInitiallyUnowned(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GInitiallyUnowned(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GInitiallyUnowned(_q: **GQueue): void <cimport,nodecl> end
global function glib_autoptr_clear_GParamSpec(_ptr: *GParamSpec): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GParamSpec(_ptr: **GParamSpec): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GParamSpec(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GParamSpec(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GParamSpec(_q: **GQueue): void <cimport,nodecl> end
global function glib_autoptr_clear_GTypeClass(_ptr: *GTypeClass): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GTypeClass(_ptr: **GTypeClass): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GTypeClass(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GTypeClass(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GTypeClass(_q: **GQueue): void <cimport,nodecl> end
global function glib_auto_cleanup_GValue(_ptr: *GValue): void <cimport,nodecl> end
global function gtk_css_parser_error_get_type(): GType <cimport,nodecl> end
global function gtk_css_parser_warning_get_type(): GType <cimport,nodecl> end
global function gtk_css_parser_error_quark(): GQuark <cimport,nodecl> end
global function gtk_css_parser_warning_quark(): GQuark <cimport,nodecl> end
global function g_action_get_type(): GType <cimport,nodecl> end
global function g_action_get_name(action: *GAction): *gchar <cimport,nodecl> end
global function g_action_get_parameter_type(action: *GAction): *GVariantType <cimport,nodecl> end
global function g_action_get_state_type(action: *GAction): *GVariantType <cimport,nodecl> end
global function g_action_get_state_hint(action: *GAction): *GVariant <cimport,nodecl> end
global function g_action_get_enabled(action: *GAction): gboolean <cimport,nodecl> end
global function g_action_get_state(action: *GAction): *GVariant <cimport,nodecl> end
global function g_action_change_state(action: *GAction, value: *GVariant): void <cimport,nodecl> end
global function g_action_activate(action: *GAction, parameter: *GVariant): void <cimport,nodecl> end
global function g_action_name_is_valid(action_name: *gchar): gboolean <cimport,nodecl> end
global function g_action_parse_detailed_name(detailed_name: *gchar, action_name: **gchar, target_value: **GVariant, error: **GError): gboolean <cimport,nodecl> end
global function g_action_print_detailed_name(action_name: *gchar, target_value: *GVariant): *gchar <cimport,nodecl> end
global function g_action_group_get_type(): GType <cimport,nodecl> end
global function g_action_group_has_action(action_group: *GActionGroup, action_name: *gchar): gboolean <cimport,nodecl> end
global function g_action_group_list_actions(action_group: *GActionGroup): **gchar <cimport,nodecl> end
global function g_action_group_get_action_parameter_type(action_group: *GActionGroup, action_name: *gchar): *GVariantType <cimport,nodecl> end
global function g_action_group_get_action_state_type(action_group: *GActionGroup, action_name: *gchar): *GVariantType <cimport,nodecl> end
global function g_action_group_get_action_state_hint(action_group: *GActionGroup, action_name: *gchar): *GVariant <cimport,nodecl> end
global function g_action_group_get_action_enabled(action_group: *GActionGroup, action_name: *gchar): gboolean <cimport,nodecl> end
global function g_action_group_get_action_state(action_group: *GActionGroup, action_name: *gchar): *GVariant <cimport,nodecl> end
global function g_action_group_change_action_state(action_group: *GActionGroup, action_name: *gchar, value: *GVariant): void <cimport,nodecl> end
global function g_action_group_activate_action(action_group: *GActionGroup, action_name: *gchar, parameter: *GVariant): void <cimport,nodecl> end
global function g_action_group_action_added(action_group: *GActionGroup, action_name: *gchar): void <cimport,nodecl> end
global function g_action_group_action_removed(action_group: *GActionGroup, action_name: *gchar): void <cimport,nodecl> end
global function g_action_group_action_enabled_changed(action_group: *GActionGroup, action_name: *gchar, enabled: gboolean): void <cimport,nodecl> end
global function g_action_group_action_state_changed(action_group: *GActionGroup, action_name: *gchar, state: *GVariant): void <cimport,nodecl> end
global function g_action_group_query_action(action_group: *GActionGroup, action_name: *gchar, enabled: *gboolean, parameter_type: **GVariantType, state_type: **GVariantType, state_hint: **GVariant, state: **GVariant): gboolean <cimport,nodecl> end
global function g_dbus_connection_export_action_group(connection: *GDBusConnection, object_path: *gchar, action_group: *GActionGroup, error: **GError): guint <cimport,nodecl> end
global function g_dbus_connection_unexport_action_group(connection: *GDBusConnection, export_id: guint): void <cimport,nodecl> end
global function g_action_map_get_type(): GType <cimport,nodecl> end
global function g_action_map_lookup_action(action_map: *GActionMap, action_name: *gchar): *GAction <cimport,nodecl> end
global function g_action_map_add_action(action_map: *GActionMap, action: *GAction): void <cimport,nodecl> end
global function g_action_map_remove_action(action_map: *GActionMap, action_name: *gchar): void <cimport,nodecl> end
global function g_action_map_add_action_entries(action_map: *GActionMap, entries: *GActionEntry, n_entries: gint, user_data: gpointer): void <cimport,nodecl> end
global function g_app_info_get_type(): GType <cimport,nodecl> end
global function g_app_info_create_from_commandline(commandline: cstring, application_name: cstring, flags: GAppInfoCreateFlags, error: **GError): *GAppInfo <cimport,nodecl> end
global function g_app_info_dup(appinfo: *GAppInfo): *GAppInfo <cimport,nodecl> end
global function g_app_info_equal(appinfo1: *GAppInfo, appinfo2: *GAppInfo): gboolean <cimport,nodecl> end
global function g_app_info_get_id(appinfo: *GAppInfo): cstring <cimport,nodecl> end
global function g_app_info_get_name(appinfo: *GAppInfo): cstring <cimport,nodecl> end
global function g_app_info_get_display_name(appinfo: *GAppInfo): cstring <cimport,nodecl> end
global function g_app_info_get_description(appinfo: *GAppInfo): cstring <cimport,nodecl> end
global function g_app_info_get_executable(appinfo: *GAppInfo): cstring <cimport,nodecl> end
global function g_app_info_get_commandline(appinfo: *GAppInfo): cstring <cimport,nodecl> end
global function g_app_info_get_icon(appinfo: *GAppInfo): *GIcon <cimport,nodecl> end
global function g_app_info_launch(appinfo: *GAppInfo, files: *GList, context: *GAppLaunchContext, error: **GError): gboolean <cimport,nodecl> end
global function g_app_info_supports_uris(appinfo: *GAppInfo): gboolean <cimport,nodecl> end
global function g_app_info_supports_files(appinfo: *GAppInfo): gboolean <cimport,nodecl> end
global function g_app_info_launch_uris(appinfo: *GAppInfo, uris: *GList, context: *GAppLaunchContext, error: **GError): gboolean <cimport,nodecl> end
global function g_app_info_launch_uris_async(appinfo: *GAppInfo, uris: *GList, context: *GAppLaunchContext, cancellable: *GCancellable, callback: GAsyncReadyCallback, user_data: gpointer): void <cimport,nodecl> end
global function g_app_info_launch_uris_finish(appinfo: *GAppInfo, result: *GAsyncResult, error: **GError): gboolean <cimport,nodecl> end
global function g_app_info_should_show(appinfo: *GAppInfo): gboolean <cimport,nodecl> end
global function g_app_info_set_as_default_for_type(appinfo: *GAppInfo, content_type: cstring, error: **GError): gboolean <cimport,nodecl> end
global function g_app_info_set_as_default_for_extension(appinfo: *GAppInfo, extension: cstring, error: **GError): gboolean <cimport,nodecl> end
global function g_app_info_add_supports_type(appinfo: *GAppInfo, content_type: cstring, error: **GError): gboolean <cimport,nodecl> end
global function g_app_info_can_remove_supports_type(appinfo: *GAppInfo): gboolean <cimport,nodecl> end
global function g_app_info_remove_supports_type(appinfo: *GAppInfo, content_type: cstring, error: **GError): gboolean <cimport,nodecl> end
global function g_app_info_get_supported_types(appinfo: *GAppInfo): *cstring <cimport,nodecl> end
global function g_app_info_can_delete(appinfo: *GAppInfo): gboolean <cimport,nodecl> end
global function g_app_info_delete(appinfo: *GAppInfo): gboolean <cimport,nodecl> end
global function g_app_info_set_as_last_used_for_type(appinfo: *GAppInfo, content_type: cstring, error: **GError): gboolean <cimport,nodecl> end
global function g_app_info_get_all(): *GList <cimport,nodecl> end
global function g_app_info_get_all_for_type(content_type: cstring): *GList <cimport,nodecl> end
global function g_app_info_get_recommended_for_type(content_type: *gchar): *GList <cimport,nodecl> end
global function g_app_info_get_fallback_for_type(content_type: *gchar): *GList <cimport,nodecl> end
global function g_app_info_reset_type_associations(content_type: cstring): void <cimport,nodecl> end
global function g_app_info_get_default_for_type(content_type: cstring, must_support_uris: gboolean): *GAppInfo <cimport,nodecl> end
global function g_app_info_get_default_for_uri_scheme(uri_scheme: cstring): *GAppInfo <cimport,nodecl> end
global function g_app_info_launch_default_for_uri(uri: cstring, context: *GAppLaunchContext, error: **GError): gboolean <cimport,nodecl> end
global function g_app_info_launch_default_for_uri_async(uri: cstring, context: *GAppLaunchContext, cancellable: *GCancellable, callback: GAsyncReadyCallback, user_data: gpointer): void <cimport,nodecl> end
global function g_app_info_launch_default_for_uri_finish(result: *GAsyncResult, error: **GError): gboolean <cimport,nodecl> end
global function g_app_launch_context_get_type(): GType <cimport,nodecl> end
global function g_app_launch_context_new(): *GAppLaunchContext <cimport,nodecl> end
global function g_app_launch_context_setenv(context: *GAppLaunchContext, variable: cstring, value: cstring): void <cimport,nodecl> end
global function g_app_launch_context_unsetenv(context: *GAppLaunchContext, variable: cstring): void <cimport,nodecl> end
global function g_app_launch_context_get_environment(context: *GAppLaunchContext): *cstring <cimport,nodecl> end
global function g_app_launch_context_get_display(context: *GAppLaunchContext, info: *GAppInfo, files: *GList): cstring <cimport,nodecl> end
global function g_app_launch_context_get_startup_notify_id(context: *GAppLaunchContext, info: *GAppInfo, files: *GList): cstring <cimport,nodecl> end
global function g_app_launch_context_launch_failed(context: *GAppLaunchContext, startup_notify_id: cstring): void <cimport,nodecl> end
global function g_app_info_monitor_get_type(): GType <cimport,nodecl> end
global function g_app_info_monitor_get(): *GAppInfoMonitor <cimport,nodecl> end
global function g_application_get_type(): GType <cimport,nodecl> end
global function g_application_id_is_valid(application_id: *gchar): gboolean <cimport,nodecl> end
global function g_application_new(application_id: *gchar, flags: GApplicationFlags): *GApplication <cimport,nodecl> end
global function g_application_get_application_id(application: *GApplication): *gchar <cimport,nodecl> end
global function g_application_set_application_id(application: *GApplication, application_id: *gchar): void <cimport,nodecl> end
global function g_application_get_dbus_connection(application: *GApplication): *GDBusConnection <cimport,nodecl> end
global function g_application_get_dbus_object_path(application: *GApplication): *gchar <cimport,nodecl> end
global function g_application_get_inactivity_timeout(application: *GApplication): guint <cimport,nodecl> end
global function g_application_set_inactivity_timeout(application: *GApplication, inactivity_timeout: guint): void <cimport,nodecl> end
global function g_application_get_flags(application: *GApplication): GApplicationFlags <cimport,nodecl> end
global function g_application_set_flags(application: *GApplication, flags: GApplicationFlags): void <cimport,nodecl> end
global function g_application_get_resource_base_path(application: *GApplication): *gchar <cimport,nodecl> end
global function g_application_set_resource_base_path(application: *GApplication, resource_path: *gchar): void <cimport,nodecl> end
global function g_application_set_action_group(application: *GApplication, action_group: *GActionGroup): void <cimport,nodecl> end
global function g_application_add_main_option_entries(application: *GApplication, entries: *GOptionEntry): void <cimport,nodecl> end
global function g_application_add_main_option(application: *GApplication, long_name: cstring, short_name: cchar, flags: GOptionFlags, arg: GOptionArg, description: cstring, arg_description: cstring): void <cimport,nodecl> end
global function g_application_add_option_group(application: *GApplication, group: *GOptionGroup): void <cimport,nodecl> end
global function g_application_set_option_context_parameter_string(application: *GApplication, parameter_string: *gchar): void <cimport,nodecl> end
global function g_application_set_option_context_summary(application: *GApplication, summary: *gchar): void <cimport,nodecl> end
global function g_application_set_option_context_description(application: *GApplication, description: *gchar): void <cimport,nodecl> end
global function g_application_get_is_registered(application: *GApplication): gboolean <cimport,nodecl> end
global function g_application_get_is_remote(application: *GApplication): gboolean <cimport,nodecl> end
global function g_application_register(application: *GApplication, cancellable: *GCancellable, error: **GError): gboolean <cimport,nodecl> end
global function g_application_hold(application: *GApplication): void <cimport,nodecl> end
global function g_application_release(application: *GApplication): void <cimport,nodecl> end
global function g_application_activate(application: *GApplication): void <cimport,nodecl> end
global function g_application_open(application: *GApplication, files: **GFile, n_files: gint, hint: *gchar): void <cimport,nodecl> end
global function g_application_run(application: *GApplication, argc: cint, argv: *cstring): cint <cimport,nodecl> end
global function g_application_quit(application: *GApplication): void <cimport,nodecl> end
global function g_application_get_default(): *GApplication <cimport,nodecl> end
global function g_application_set_default(application: *GApplication): void <cimport,nodecl> end
global function g_application_mark_busy(application: *GApplication): void <cimport,nodecl> end
global function g_application_unmark_busy(application: *GApplication): void <cimport,nodecl> end
global function g_application_get_is_busy(application: *GApplication): gboolean <cimport,nodecl> end
global function g_application_send_notification(application: *GApplication, id: *gchar, notification: *GNotification): void <cimport,nodecl> end
global function g_application_withdraw_notification(application: *GApplication, id: *gchar): void <cimport,nodecl> end
global function g_application_bind_busy_property(application: *GApplication, object: gpointer, property: *gchar): void <cimport,nodecl> end
global function g_application_unbind_busy_property(application: *GApplication, object: gpointer, property: *gchar): void <cimport,nodecl> end
global function g_application_command_line_get_type(): GType <cimport,nodecl> end
global function g_application_command_line_get_arguments(cmdline: *GApplicationCommandLine, argc: *cint): **gchar <cimport,nodecl> end
global function g_application_command_line_get_options_dict(cmdline: *GApplicationCommandLine): *GVariantDict <cimport,nodecl> end
global function g_application_command_line_get_stdin(cmdline: *GApplicationCommandLine): *GInputStream <cimport,nodecl> end
global function g_application_command_line_get_environ(cmdline: *GApplicationCommandLine): **gchar <cimport,nodecl> end
global function g_application_command_line_getenv(cmdline: *GApplicationCommandLine, name: *gchar): *gchar <cimport,nodecl> end
global function g_application_command_line_get_cwd(cmdline: *GApplicationCommandLine): *gchar <cimport,nodecl> end
global function g_application_command_line_get_is_remote(cmdline: *GApplicationCommandLine): gboolean <cimport,nodecl> end
global function g_application_command_line_print(cmdline: *GApplicationCommandLine, format: *gchar, ...: cvarargs): void <cimport,nodecl> end
global function g_application_command_line_printerr(cmdline: *GApplicationCommandLine, format: *gchar, ...: cvarargs): void <cimport,nodecl> end
global function g_application_command_line_get_exit_status(cmdline: *GApplicationCommandLine): cint <cimport,nodecl> end
global function g_application_command_line_set_exit_status(cmdline: *GApplicationCommandLine, exit_status: cint): void <cimport,nodecl> end
global function g_application_command_line_get_platform_data(cmdline: *GApplicationCommandLine): *GVariant <cimport,nodecl> end
global function g_application_command_line_create_file_for_arg(cmdline: *GApplicationCommandLine, arg: *gchar): *GFile <cimport,nodecl> end
global function g_initable_get_type(): GType <cimport,nodecl> end
global function g_initable_init(initable: *GInitable, cancellable: *GCancellable, error: **GError): gboolean <cimport,nodecl> end
global function g_initable_new(object_type: GType, cancellable: *GCancellable, error: **GError, first_property_name: *gchar, ...: cvarargs): gpointer <cimport,nodecl> end
global function g_initable_newv(object_type: GType, n_parameters: guint, parameters: *GParameter, cancellable: *GCancellable, error: **GError): gpointer <cimport,nodecl> end
global function g_initable_new_valist(object_type: GType, first_property_name: *gchar, var_args: cvalist, cancellable: *GCancellable, error: **GError): *GObject <cimport,nodecl> end
global function g_async_initable_get_type(): GType <cimport,nodecl> end
global function g_async_initable_init_async(initable: *GAsyncInitable, io_priority: cint, cancellable: *GCancellable, callback: GAsyncReadyCallback, user_data: gpointer): void <cimport,nodecl> end
global function g_async_initable_init_finish(initable: *GAsyncInitable, res: *GAsyncResult, error: **GError): gboolean <cimport,nodecl> end
global function g_async_initable_new_async(object_type: GType, io_priority: cint, cancellable: *GCancellable, callback: GAsyncReadyCallback, user_data: gpointer, first_property_name: *gchar, ...: cvarargs): void <cimport,nodecl> end
global function g_async_initable_newv_async(object_type: GType, n_parameters: guint, parameters: *GParameter, io_priority: cint, cancellable: *GCancellable, callback: GAsyncReadyCallback, user_data: gpointer): void <cimport,nodecl> end
global function g_async_initable_new_valist_async(object_type: GType, first_property_name: *gchar, var_args: cvalist, io_priority: cint, cancellable: *GCancellable, callback: GAsyncReadyCallback, user_data: gpointer): void <cimport,nodecl> end
global function g_async_initable_new_finish(initable: *GAsyncInitable, res: *GAsyncResult, error: **GError): *GObject <cimport,nodecl> end
global function g_async_result_get_type(): GType <cimport,nodecl> end
global function g_async_result_get_user_data(res: *GAsyncResult): gpointer <cimport,nodecl> end
global function g_async_result_get_source_object(res: *GAsyncResult): *GObject <cimport,nodecl> end
global function g_async_result_legacy_propagate_error(res: *GAsyncResult, error: **GError): gboolean <cimport,nodecl> end
global function g_async_result_is_tagged(res: *GAsyncResult, source_tag: gpointer): gboolean <cimport,nodecl> end
global function g_input_stream_get_type(): GType <cimport,nodecl> end
global function g_input_stream_read(stream: *GInputStream, buffer: pointer, count: gsize, cancellable: *GCancellable, error: **GError): gssize <cimport,nodecl> end
global function g_input_stream_read_all(stream: *GInputStream, buffer: pointer, count: gsize, bytes_read: *gsize, cancellable: *GCancellable, error: **GError): gboolean <cimport,nodecl> end
global function g_input_stream_read_bytes(stream: *GInputStream, count: gsize, cancellable: *GCancellable, error: **GError): *GBytes <cimport,nodecl> end
global function g_input_stream_skip(stream: *GInputStream, count: gsize, cancellable: *GCancellable, error: **GError): gssize <cimport,nodecl> end
global function g_input_stream_close(stream: *GInputStream, cancellable: *GCancellable, error: **GError): gboolean <cimport,nodecl> end
global function g_input_stream_read_async(stream: *GInputStream, buffer: pointer, count: gsize, io_priority: cint, cancellable: *GCancellable, callback: GAsyncReadyCallback, user_data: gpointer): void <cimport,nodecl> end
global function g_input_stream_read_finish(stream: *GInputStream, result: *GAsyncResult, error: **GError): gssize <cimport,nodecl> end
global function g_input_stream_read_all_async(stream: *GInputStream, buffer: pointer, count: gsize, io_priority: cint, cancellable: *GCancellable, callback: GAsyncReadyCallback, user_data: gpointer): void <cimport,nodecl> end
global function g_input_stream_read_all_finish(stream: *GInputStream, result: *GAsyncResult, bytes_read: *gsize, error: **GError): gboolean <cimport,nodecl> end
global function g_input_stream_read_bytes_async(stream: *GInputStream, count: gsize, io_priority: cint, cancellable: *GCancellable, callback: GAsyncReadyCallback, user_data: gpointer): void <cimport,nodecl> end
global function g_input_stream_read_bytes_finish(stream: *GInputStream, result: *GAsyncResult, error: **GError): *GBytes <cimport,nodecl> end
global function g_input_stream_skip_async(stream: *GInputStream, count: gsize, io_priority: cint, cancellable: *GCancellable, callback: GAsyncReadyCallback, user_data: gpointer): void <cimport,nodecl> end
global function g_input_stream_skip_finish(stream: *GInputStream, result: *GAsyncResult, error: **GError): gssize <cimport,nodecl> end
global function g_input_stream_close_async(stream: *GInputStream, io_priority: cint, cancellable: *GCancellable, callback: GAsyncReadyCallback, user_data: gpointer): void <cimport,nodecl> end
global function g_input_stream_close_finish(stream: *GInputStream, result: *GAsyncResult, error: **GError): gboolean <cimport,nodecl> end
global function g_input_stream_is_closed(stream: *GInputStream): gboolean <cimport,nodecl> end
global function g_input_stream_has_pending(stream: *GInputStream): gboolean <cimport,nodecl> end
global function g_input_stream_set_pending(stream: *GInputStream, error: **GError): gboolean <cimport,nodecl> end
global function g_input_stream_clear_pending(stream: *GInputStream): void <cimport,nodecl> end
global function g_filter_input_stream_get_type(): GType <cimport,nodecl> end
global function g_filter_input_stream_get_base_stream(stream: *GFilterInputStream): *GInputStream <cimport,nodecl> end
global function g_filter_input_stream_get_close_base_stream(stream: *GFilterInputStream): gboolean <cimport,nodecl> end
global function g_filter_input_stream_set_close_base_stream(stream: *GFilterInputStream, close_base: gboolean): void <cimport,nodecl> end
global function g_buffered_input_stream_get_type(): GType <cimport,nodecl> end
global function g_buffered_input_stream_new(base_stream: *GInputStream): *GInputStream <cimport,nodecl> end
global function g_buffered_input_stream_new_sized(base_stream: *GInputStream, size: gsize): *GInputStream <cimport,nodecl> end
global function g_buffered_input_stream_get_buffer_size(stream: *GBufferedInputStream): gsize <cimport,nodecl> end
global function g_buffered_input_stream_set_buffer_size(stream: *GBufferedInputStream, size: gsize): void <cimport,nodecl> end
global function g_buffered_input_stream_get_available(stream: *GBufferedInputStream): gsize <cimport,nodecl> end
global function g_buffered_input_stream_peek(stream: *GBufferedInputStream, buffer: pointer, offset: gsize, count: gsize): gsize <cimport,nodecl> end
global function g_buffered_input_stream_peek_buffer(stream: *GBufferedInputStream, count: *gsize): pointer <cimport,nodecl> end
global function g_buffered_input_stream_fill(stream: *GBufferedInputStream, count: gssize, cancellable: *GCancellable, error: **GError): gssize <cimport,nodecl> end
global function g_buffered_input_stream_fill_async(stream: *GBufferedInputStream, count: gssize, io_priority: cint, cancellable: *GCancellable, callback: GAsyncReadyCallback, user_data: gpointer): void <cimport,nodecl> end
global function g_buffered_input_stream_fill_finish(stream: *GBufferedInputStream, result: *GAsyncResult, error: **GError): gssize <cimport,nodecl> end
global function g_buffered_input_stream_read_byte(stream: *GBufferedInputStream, cancellable: *GCancellable, error: **GError): cint <cimport,nodecl> end
global function g_output_stream_get_type(): GType <cimport,nodecl> end
global function g_output_stream_write(stream: *GOutputStream, buffer: pointer, count: gsize, cancellable: *GCancellable, error: **GError): gssize <cimport,nodecl> end
global function g_output_stream_write_all(stream: *GOutputStream, buffer: pointer, count: gsize, bytes_written: *gsize, cancellable: *GCancellable, error: **GError): gboolean <cimport,nodecl> end
global function g_output_stream_writev(stream: *GOutputStream, vectors: *GOutputVector, n_vectors: gsize, bytes_written: *gsize, cancellable: *GCancellable, error: **GError): gboolean <cimport,nodecl> end
global function g_output_stream_writev_all(stream: *GOutputStream, vectors: *GOutputVector, n_vectors: gsize, bytes_written: *gsize, cancellable: *GCancellable, error: **GError): gboolean <cimport,nodecl> end
global function g_output_stream_printf(stream: *GOutputStream, bytes_written: *gsize, cancellable: *GCancellable, error: **GError, format: *gchar, ...: cvarargs): gboolean <cimport,nodecl> end
global function g_output_stream_vprintf(stream: *GOutputStream, bytes_written: *gsize, cancellable: *GCancellable, error: **GError, format: *gchar, args: cvalist): gboolean <cimport,nodecl> end
global function g_output_stream_write_bytes(stream: *GOutputStream, bytes: *GBytes, cancellable: *GCancellable, error: **GError): gssize <cimport,nodecl> end
global function g_output_stream_splice(stream: *GOutputStream, source: *GInputStream, flags: GOutputStreamSpliceFlags, cancellable: *GCancellable, error: **GError): gssize <cimport,nodecl> end
global function g_output_stream_flush(stream: *GOutputStream, cancellable: *GCancellable, error: **GError): gboolean <cimport,nodecl> end
global function g_output_stream_close(stream: *GOutputStream, cancellable: *GCancellable, error: **GError): gboolean <cimport,nodecl> end
global function g_output_stream_write_async(stream: *GOutputStream, buffer: pointer, count: gsize, io_priority: cint, cancellable: *GCancellable, callback: GAsyncReadyCallback, user_data: gpointer): void <cimport,nodecl> end
global function g_output_stream_write_finish(stream: *GOutputStream, result: *GAsyncResult, error: **GError): gssize <cimport,nodecl> end
global function g_output_stream_write_all_async(stream: *GOutputStream, buffer: pointer, count: gsize, io_priority: cint, cancellable: *GCancellable, callback: GAsyncReadyCallback, user_data: gpointer): void <cimport,nodecl> end
global function g_output_stream_write_all_finish(stream: *GOutputStream, result: *GAsyncResult, bytes_written: *gsize, error: **GError): gboolean <cimport,nodecl> end
global function g_output_stream_writev_async(stream: *GOutputStream, vectors: *GOutputVector, n_vectors: gsize, io_priority: cint, cancellable: *GCancellable, callback: GAsyncReadyCallback, user_data: gpointer): void <cimport,nodecl> end
global function g_output_stream_writev_finish(stream: *GOutputStream, result: *GAsyncResult, bytes_written: *gsize, error: **GError): gboolean <cimport,nodecl> end
global function g_output_stream_writev_all_async(stream: *GOutputStream, vectors: *GOutputVector, n_vectors: gsize, io_priority: cint, cancellable: *GCancellable, callback: GAsyncReadyCallback, user_data: gpointer): void <cimport,nodecl> end
global function g_output_stream_writev_all_finish(stream: *GOutputStream, result: *GAsyncResult, bytes_written: *gsize, error: **GError): gboolean <cimport,nodecl> end
global function g_output_stream_write_bytes_async(stream: *GOutputStream, bytes: *GBytes, io_priority: cint, cancellable: *GCancellable, callback: GAsyncReadyCallback, user_data: gpointer): void <cimport,nodecl> end
global function g_output_stream_write_bytes_finish(stream: *GOutputStream, result: *GAsyncResult, error: **GError): gssize <cimport,nodecl> end
global function g_output_stream_splice_async(stream: *GOutputStream, source: *GInputStream, flags: GOutputStreamSpliceFlags, io_priority: cint, cancellable: *GCancellable, callback: GAsyncReadyCallback, user_data: gpointer): void <cimport,nodecl> end
global function g_output_stream_splice_finish(stream: *GOutputStream, result: *GAsyncResult, error: **GError): gssize <cimport,nodecl> end
global function g_output_stream_flush_async(stream: *GOutputStream, io_priority: cint, cancellable: *GCancellable, callback: GAsyncReadyCallback, user_data: gpointer): void <cimport,nodecl> end
global function g_output_stream_flush_finish(stream: *GOutputStream, result: *GAsyncResult, error: **GError): gboolean <cimport,nodecl> end
global function g_output_stream_close_async(stream: *GOutputStream, io_priority: cint, cancellable: *GCancellable, callback: GAsyncReadyCallback, user_data: gpointer): void <cimport,nodecl> end
global function g_output_stream_close_finish(stream: *GOutputStream, result: *GAsyncResult, error: **GError): gboolean <cimport,nodecl> end
global function g_output_stream_is_closed(stream: *GOutputStream): gboolean <cimport,nodecl> end
global function g_output_stream_is_closing(stream: *GOutputStream): gboolean <cimport,nodecl> end
global function g_output_stream_has_pending(stream: *GOutputStream): gboolean <cimport,nodecl> end
global function g_output_stream_set_pending(stream: *GOutputStream, error: **GError): gboolean <cimport,nodecl> end
global function g_output_stream_clear_pending(stream: *GOutputStream): void <cimport,nodecl> end
global function g_filter_output_stream_get_type(): GType <cimport,nodecl> end
global function g_filter_output_stream_get_base_stream(stream: *GFilterOutputStream): *GOutputStream <cimport,nodecl> end
global function g_filter_output_stream_get_close_base_stream(stream: *GFilterOutputStream): gboolean <cimport,nodecl> end
global function g_filter_output_stream_set_close_base_stream(stream: *GFilterOutputStream, close_base: gboolean): void <cimport,nodecl> end
global function g_buffered_output_stream_get_type(): GType <cimport,nodecl> end
global function g_buffered_output_stream_new(base_stream: *GOutputStream): *GOutputStream <cimport,nodecl> end
global function g_buffered_output_stream_new_sized(base_stream: *GOutputStream, size: gsize): *GOutputStream <cimport,nodecl> end
global function g_buffered_output_stream_get_buffer_size(stream: *GBufferedOutputStream): gsize <cimport,nodecl> end
global function g_buffered_output_stream_set_buffer_size(stream: *GBufferedOutputStream, size: gsize): void <cimport,nodecl> end
global function g_buffered_output_stream_get_auto_grow(stream: *GBufferedOutputStream): gboolean <cimport,nodecl> end
global function g_buffered_output_stream_set_auto_grow(stream: *GBufferedOutputStream, auto_grow: gboolean): void <cimport,nodecl> end
global function g_bytes_icon_get_type(): GType <cimport,nodecl> end
global function g_bytes_icon_new(bytes: *GBytes): *GIcon <cimport,nodecl> end
global function g_bytes_icon_get_bytes(icon: *GBytesIcon): *GBytes <cimport,nodecl> end
global function g_cancellable_get_type(): GType <cimport,nodecl> end
global function g_cancellable_new(): *GCancellable <cimport,nodecl> end
global function g_cancellable_is_cancelled(cancellable: *GCancellable): gboolean <cimport,nodecl> end
global function g_cancellable_set_error_if_cancelled(cancellable: *GCancellable, error: **GError): gboolean <cimport,nodecl> end
global function g_cancellable_get_fd(cancellable: *GCancellable): cint <cimport,nodecl> end
global function g_cancellable_make_pollfd(cancellable: *GCancellable, pollfd: *GPollFD): gboolean <cimport,nodecl> end
global function g_cancellable_release_fd(cancellable: *GCancellable): void <cimport,nodecl> end
global function g_cancellable_source_new(cancellable: *GCancellable): *GSource <cimport,nodecl> end
global function g_cancellable_get_current(): *GCancellable <cimport,nodecl> end
global function g_cancellable_push_current(cancellable: *GCancellable): void <cimport,nodecl> end
global function g_cancellable_pop_current(cancellable: *GCancellable): void <cimport,nodecl> end
global function g_cancellable_reset(cancellable: *GCancellable): void <cimport,nodecl> end
global function g_cancellable_connect(cancellable: *GCancellable, callback: GCallback, data: gpointer, data_destroy_func: GDestroyNotify): gulong <cimport,nodecl> end
global function g_cancellable_disconnect(cancellable: *GCancellable, handler_id: gulong): void <cimport,nodecl> end
global function g_cancellable_cancel(cancellable: *GCancellable): void <cimport,nodecl> end
global function g_converter_get_type(): GType <cimport,nodecl> end
global function g_converter_convert(converter: *GConverter, inbuf: pointer, inbuf_size: gsize, outbuf: pointer, outbuf_size: gsize, flags: GConverterFlags, bytes_read: *gsize, bytes_written: *gsize, error: **GError): GConverterResult <cimport,nodecl> end
global function g_converter_reset(converter: *GConverter): void <cimport,nodecl> end
global function g_charset_converter_get_type(): GType <cimport,nodecl> end
global function g_charset_converter_new(to_charset: *gchar, from_charset: *gchar, error: **GError): *GCharsetConverter <cimport,nodecl> end
global function g_charset_converter_set_use_fallback(converter: *GCharsetConverter, use_fallback: gboolean): void <cimport,nodecl> end
global function g_charset_converter_get_use_fallback(converter: *GCharsetConverter): gboolean <cimport,nodecl> end
global function g_charset_converter_get_num_fallbacks(converter: *GCharsetConverter): guint <cimport,nodecl> end
global function g_content_type_equals(type1: *gchar, type2: *gchar): gboolean <cimport,nodecl> end
global function g_content_type_is_a(type: *gchar, supertype: *gchar): gboolean <cimport,nodecl> end
global function g_content_type_is_mime_type(type: *gchar, mime_type: *gchar): gboolean <cimport,nodecl> end
global function g_content_type_is_unknown(type: *gchar): gboolean <cimport,nodecl> end
global function g_content_type_get_description(type: *gchar): *gchar <cimport,nodecl> end
global function g_content_type_get_mime_type(type: *gchar): *gchar <cimport,nodecl> end
global function g_content_type_get_icon(type: *gchar): *GIcon <cimport,nodecl> end
global function g_content_type_get_symbolic_icon(type: *gchar): *GIcon <cimport,nodecl> end
global function g_content_type_get_generic_icon_name(type: *gchar): *gchar <cimport,nodecl> end
global function g_content_type_can_be_executable(type: *gchar): gboolean <cimport,nodecl> end
global function g_content_type_from_mime_type(mime_type: *gchar): *gchar <cimport,nodecl> end
global function g_content_type_guess(filename: *gchar, data: *guchar, data_size: gsize, result_uncertain: *gboolean): *gchar <cimport,nodecl> end
global function g_content_type_guess_for_tree(root: *GFile): **gchar <cimport,nodecl> end
global function g_content_types_get_registered(): *GList <cimport,nodecl> end
global function g_content_type_get_mime_dirs(): **gchar <cimport,nodecl> end
global function g_content_type_set_mime_dirs(dirs: **gchar): void <cimport,nodecl> end
global function g_converter_input_stream_get_type(): GType <cimport,nodecl> end
global function g_converter_input_stream_new(base_stream: *GInputStream, converter: *GConverter): *GInputStream <cimport,nodecl> end
global function g_converter_input_stream_get_converter(converter_stream: *GConverterInputStream): *GConverter <cimport,nodecl> end
global function g_converter_output_stream_get_type(): GType <cimport,nodecl> end
global function g_converter_output_stream_new(base_stream: *GOutputStream, converter: *GConverter): *GOutputStream <cimport,nodecl> end
global function g_converter_output_stream_get_converter(converter_stream: *GConverterOutputStream): *GConverter <cimport,nodecl> end
global function access(name: cstring, type: cint): cint <cimport,nodecl> end
global function faccessat(fd: cint, file: cstring, type: cint, flag: cint): cint <cimport,nodecl> end
global function lseek(fd: cint, offset: clong, whence: cint): clong <cimport,nodecl> end
global function close(fd: cint): cint <cimport,nodecl> end
global function closefrom(lowfd: cint): void <cimport,nodecl> end
global function read(fd: cint, buf: pointer, nbytes: csize): ssize_t <cimport,nodecl> end
global function write(fd: cint, buf: pointer, n: csize): ssize_t <cimport,nodecl> end
global function pread(fd: cint, buf: pointer, nbytes: csize, offset: clong): ssize_t <cimport,nodecl> end
global function pwrite(fd: cint, buf: pointer, n: csize, offset: clong): ssize_t <cimport,nodecl> end
global function pipe(pipedes: *[2]cint): cint <cimport,nodecl> end
global function alarm(seconds: cuint): cuint <cimport,nodecl> end
global function sleep(seconds: cuint): cuint <cimport,nodecl> end
global function ualarm(value: cuint, interval: cuint): cuint <cimport,nodecl> end
global function usleep(useconds: cuint): cint <cimport,nodecl> end
global function pause(): cint <cimport,nodecl> end
global function chown(file: cstring, owner: cuint, group: cuint): cint <cimport,nodecl> end
global function fchown(fd: cint, owner: cuint, group: cuint): cint <cimport,nodecl> end
global function lchown(file: cstring, owner: cuint, group: cuint): cint <cimport,nodecl> end
global function fchownat(fd: cint, file: cstring, owner: cuint, group: cuint, flag: cint): cint <cimport,nodecl> end
global function chdir(path: cstring): cint <cimport,nodecl> end
global function fchdir(fd: cint): cint <cimport,nodecl> end
global function getcwd(buf: cstring, size: csize): cstring <cimport,nodecl> end
global function getwd(buf: cstring): cstring <cimport,nodecl> end
global function dup(fd: cint): cint <cimport,nodecl> end
global function dup2(fd: cint, fd2: cint): cint <cimport,nodecl> end
global function execve(path: cstring, argv: *[0]cstring, envp: *[0]cstring): cint <cimport,nodecl> end
global function fexecve(fd: cint, argv: *[0]cstring, envp: *[0]cstring): cint <cimport,nodecl> end
global function execv(path: cstring, argv: *[0]cstring): cint <cimport,nodecl> end
global function execle(path: cstring, arg: cstring, ...: cvarargs): cint <cimport,nodecl> end
global function execl(path: cstring, arg: cstring, ...: cvarargs): cint <cimport,nodecl> end
global function execvp(file: cstring, argv: *[0]cstring): cint <cimport,nodecl> end
global function execlp(file: cstring, arg: cstring, ...: cvarargs): cint <cimport,nodecl> end
global function nice(inc: cint): cint <cimport,nodecl> end
global function _exit(status: cint): void <cimport,nodecl> end
global function pathconf(path: cstring, name: cint): clong <cimport,nodecl> end
global function fpathconf(fd: cint, name: cint): clong <cimport,nodecl> end
global function sysconf(name: cint): clong <cimport,nodecl> end
global function confstr(name: cint, buf: cstring, len: csize): csize <cimport,nodecl> end
global function getpid(): cint <cimport,nodecl> end
global function getppid(): cint <cimport,nodecl> end
global function getpgrp(): cint <cimport,nodecl> end
global function getpgid(pid: cint): cint <cimport,nodecl> end
global function setpgid(pid: cint, pgid: cint): cint <cimport,nodecl> end
global function setpgrp(): cint <cimport,nodecl> end
global function setsid(): cint <cimport,nodecl> end
global function getsid(pid: cint): cint <cimport,nodecl> end
global function getuid(): cuint <cimport,nodecl> end
global function geteuid(): cuint <cimport,nodecl> end
global function getgid(): cuint <cimport,nodecl> end
global function getegid(): cuint <cimport,nodecl> end
global function getgroups(size: cint, list: *[0]cuint): cint <cimport,nodecl> end
global function setuid(uid: cuint): cint <cimport,nodecl> end
global function setreuid(ruid: cuint, euid: cuint): cint <cimport,nodecl> end
global function seteuid(uid: cuint): cint <cimport,nodecl> end
global function setgid(gid: cuint): cint <cimport,nodecl> end
global function setregid(rgid: cuint, egid: cuint): cint <cimport,nodecl> end
global function setegid(gid: cuint): cint <cimport,nodecl> end
global function fork(): cint <cimport,nodecl> end
global function vfork(): cint <cimport,nodecl> end
global function ttyname(fd: cint): cstring <cimport,nodecl> end
global function ttyname_r(fd: cint, buf: cstring, buflen: csize): cint <cimport,nodecl> end
global function isatty(fd: cint): cint <cimport,nodecl> end
global function ttyslot(): cint <cimport,nodecl> end
global function link(from: cstring, to: cstring): cint <cimport,nodecl> end
global function linkat(fromfd: cint, from: cstring, tofd: cint, to: cstring, flags: cint): cint <cimport,nodecl> end
global function symlink(from: cstring, to: cstring): cint <cimport,nodecl> end
global function readlink(path: cstring, buf: cstring, len: csize): ssize_t <cimport,nodecl> end
global function symlinkat(from: cstring, tofd: cint, to: cstring): cint <cimport,nodecl> end
global function readlinkat(fd: cint, path: cstring, buf: cstring, len: csize): ssize_t <cimport,nodecl> end
global function unlink(name: cstring): cint <cimport,nodecl> end
global function unlinkat(fd: cint, name: cstring, flag: cint): cint <cimport,nodecl> end
global function rmdir(path: cstring): cint <cimport,nodecl> end
global function tcgetpgrp(fd: cint): cint <cimport,nodecl> end
global function tcsetpgrp(fd: cint, pgrp_id: cint): cint <cimport,nodecl> end
global function getlogin(): cstring <cimport,nodecl> end
global function getlogin_r(name: cstring, name_len: csize): cint <cimport,nodecl> end
global function setlogin(name: cstring): cint <cimport,nodecl> end
global optarg: cstring <cimport,nodecl>
global optind: cint <cimport,nodecl>
global opterr: cint <cimport,nodecl>
global optopt: cint <cimport,nodecl>
global function getopt(_argc: cint, _argv: *cstring, shortopts: cstring): cint <cimport,nodecl> end
global function gethostname(name: cstring, len: csize): cint <cimport,nodecl> end
global function sethostname(name: cstring, len: csize): cint <cimport,nodecl> end
global function sethostid(id: clong): cint <cimport,nodecl> end
global function getdomainname(name: cstring, len: csize): cint <cimport,nodecl> end
global function setdomainname(name: cstring, len: csize): cint <cimport,nodecl> end
global function vhangup(): cint <cimport,nodecl> end
global function revoke(file: cstring): cint <cimport,nodecl> end
global function profil(sample_buffer: *cushort, size: csize, offset: csize, scale: cuint): cint <cimport,nodecl> end
global function acct(name: cstring): cint <cimport,nodecl> end
global function getusershell(): cstring <cimport,nodecl> end
global function endusershell(): void <cimport,nodecl> end
global function setusershell(): void <cimport,nodecl> end
global function daemon(nochdir: cint, noclose: cint): cint <cimport,nodecl> end
global function chroot(path: cstring): cint <cimport,nodecl> end
global function getpass(prompt: cstring): cstring <cimport,nodecl> end
global function fsync(fd: cint): cint <cimport,nodecl> end
global function gethostid(): clong <cimport,nodecl> end
global function sync(): void <cimport,nodecl> end
global function getpagesize(): cint <cimport,nodecl> end
global function getdtablesize(): cint <cimport,nodecl> end
global function truncate(file: cstring, length: clong): cint <cimport,nodecl> end
global function ftruncate(fd: cint, length: clong): cint <cimport,nodecl> end
global function brk(addr: pointer): cint <cimport,nodecl> end
global function sbrk(delta: isize): pointer <cimport,nodecl> end
global function syscall(sysno: clong, ...: cvarargs): clong <cimport,nodecl> end
global function lockf(fd: cint, cmd: cint, len: clong): cint <cimport,nodecl> end
global function fdatasync(fildes: cint): cint <cimport,nodecl> end
global function crypt(key: cstring, salt: cstring): cstring <cimport,nodecl> end
global function getentropy(buffer: pointer, length: csize): cint <cimport,nodecl> end
global function g_credentials_get_type(): GType <cimport,nodecl> end
global function g_credentials_new(): *GCredentials <cimport,nodecl> end
global function g_credentials_to_string(credentials: *GCredentials): *gchar <cimport,nodecl> end
global function g_credentials_get_native(credentials: *GCredentials, native_type: GCredentialsType): gpointer <cimport,nodecl> end
global function g_credentials_set_native(credentials: *GCredentials, native_type: GCredentialsType, native: gpointer): void <cimport,nodecl> end
global function g_credentials_is_same_user(credentials: *GCredentials, other_credentials: *GCredentials, error: **GError): gboolean <cimport,nodecl> end
global function g_credentials_get_unix_pid(credentials: *GCredentials, error: **GError): pid_t <cimport,nodecl> end
global function g_credentials_get_unix_user(credentials: *GCredentials, error: **GError): uid_t <cimport,nodecl> end
global function g_credentials_set_unix_user(credentials: *GCredentials, uid: uid_t, error: **GError): gboolean <cimport,nodecl> end
global function g_datagram_based_get_type(): GType <cimport,nodecl> end
global function g_datagram_based_receive_messages(datagram_based: *GDatagramBased, messages: *GInputMessage, num_messages: guint, flags: gint, timeout: gint64, cancellable: *GCancellable, error: **GError): gint <cimport,nodecl> end
global function g_datagram_based_send_messages(datagram_based: *GDatagramBased, messages: *GOutputMessage, num_messages: guint, flags: gint, timeout: gint64, cancellable: *GCancellable, error: **GError): gint <cimport,nodecl> end
global function g_datagram_based_create_source(datagram_based: *GDatagramBased, condition: GIOCondition, cancellable: *GCancellable): *GSource <cimport,nodecl> end
global function g_datagram_based_condition_check(datagram_based: *GDatagramBased, condition: GIOCondition): GIOCondition <cimport,nodecl> end
global function g_datagram_based_condition_wait(datagram_based: *GDatagramBased, condition: GIOCondition, timeout: gint64, cancellable: *GCancellable, error: **GError): gboolean <cimport,nodecl> end
global function g_data_input_stream_get_type(): GType <cimport,nodecl> end
global function g_data_input_stream_new(base_stream: *GInputStream): *GDataInputStream <cimport,nodecl> end
global function g_data_input_stream_set_byte_order(stream: *GDataInputStream, order: GDataStreamByteOrder): void <cimport,nodecl> end
global function g_data_input_stream_get_byte_order(stream: *GDataInputStream): GDataStreamByteOrder <cimport,nodecl> end
global function g_data_input_stream_set_newline_type(stream: *GDataInputStream, type: GDataStreamNewlineType): void <cimport,nodecl> end
global function g_data_input_stream_get_newline_type(stream: *GDataInputStream): GDataStreamNewlineType <cimport,nodecl> end
global function g_data_input_stream_read_byte(stream: *GDataInputStream, cancellable: *GCancellable, error: **GError): guchar <cimport,nodecl> end
global function g_data_input_stream_read_int16(stream: *GDataInputStream, cancellable: *GCancellable, error: **GError): gint16 <cimport,nodecl> end
global function g_data_input_stream_read_uint16(stream: *GDataInputStream, cancellable: *GCancellable, error: **GError): guint16 <cimport,nodecl> end
global function g_data_input_stream_read_int32(stream: *GDataInputStream, cancellable: *GCancellable, error: **GError): gint32 <cimport,nodecl> end
global function g_data_input_stream_read_uint32(stream: *GDataInputStream, cancellable: *GCancellable, error: **GError): guint32 <cimport,nodecl> end
global function g_data_input_stream_read_int64(stream: *GDataInputStream, cancellable: *GCancellable, error: **GError): gint64 <cimport,nodecl> end
global function g_data_input_stream_read_uint64(stream: *GDataInputStream, cancellable: *GCancellable, error: **GError): guint64 <cimport,nodecl> end
global function g_data_input_stream_read_line(stream: *GDataInputStream, length: *gsize, cancellable: *GCancellable, error: **GError): cstring <cimport,nodecl> end
global function g_data_input_stream_read_line_utf8(stream: *GDataInputStream, length: *gsize, cancellable: *GCancellable, error: **GError): cstring <cimport,nodecl> end
global function g_data_input_stream_read_line_async(stream: *GDataInputStream, io_priority: gint, cancellable: *GCancellable, callback: GAsyncReadyCallback, user_data: gpointer): void <cimport,nodecl> end
global function g_data_input_stream_read_line_finish(stream: *GDataInputStream, result: *GAsyncResult, length: *gsize, error: **GError): cstring <cimport,nodecl> end
global function g_data_input_stream_read_line_finish_utf8(stream: *GDataInputStream, result: *GAsyncResult, length: *gsize, error: **GError): cstring <cimport,nodecl> end
global function g_data_input_stream_read_until(stream: *GDataInputStream, stop_chars: *gchar, length: *gsize, cancellable: *GCancellable, error: **GError): cstring <cimport,nodecl> end
global function g_data_input_stream_read_until_async(stream: *GDataInputStream, stop_chars: *gchar, io_priority: gint, cancellable: *GCancellable, callback: GAsyncReadyCallback, user_data: gpointer): void <cimport,nodecl> end
global function g_data_input_stream_read_until_finish(stream: *GDataInputStream, result: *GAsyncResult, length: *gsize, error: **GError): cstring <cimport,nodecl> end
global function g_data_input_stream_read_upto(stream: *GDataInputStream, stop_chars: *gchar, stop_chars_len: gssize, length: *gsize, cancellable: *GCancellable, error: **GError): cstring <cimport,nodecl> end
global function g_data_input_stream_read_upto_async(stream: *GDataInputStream, stop_chars: *gchar, stop_chars_len: gssize, io_priority: gint, cancellable: *GCancellable, callback: GAsyncReadyCallback, user_data: gpointer): void <cimport,nodecl> end
global function g_data_input_stream_read_upto_finish(stream: *GDataInputStream, result: *GAsyncResult, length: *gsize, error: **GError): cstring <cimport,nodecl> end
global function g_data_output_stream_get_type(): GType <cimport,nodecl> end
global function g_data_output_stream_new(base_stream: *GOutputStream): *GDataOutputStream <cimport,nodecl> end
global function g_data_output_stream_set_byte_order(stream: *GDataOutputStream, order: GDataStreamByteOrder): void <cimport,nodecl> end
global function g_data_output_stream_get_byte_order(stream: *GDataOutputStream): GDataStreamByteOrder <cimport,nodecl> end
global function g_data_output_stream_put_byte(stream: *GDataOutputStream, data: guchar, cancellable: *GCancellable, error: **GError): gboolean <cimport,nodecl> end
global function g_data_output_stream_put_int16(stream: *GDataOutputStream, data: gint16, cancellable: *GCancellable, error: **GError): gboolean <cimport,nodecl> end
global function g_data_output_stream_put_uint16(stream: *GDataOutputStream, data: guint16, cancellable: *GCancellable, error: **GError): gboolean <cimport,nodecl> end
global function g_data_output_stream_put_int32(stream: *GDataOutputStream, data: gint32, cancellable: *GCancellable, error: **GError): gboolean <cimport,nodecl> end
global function g_data_output_stream_put_uint32(stream: *GDataOutputStream, data: guint32, cancellable: *GCancellable, error: **GError): gboolean <cimport,nodecl> end
global function g_data_output_stream_put_int64(stream: *GDataOutputStream, data: gint64, cancellable: *GCancellable, error: **GError): gboolean <cimport,nodecl> end
global function g_data_output_stream_put_uint64(stream: *GDataOutputStream, data: guint64, cancellable: *GCancellable, error: **GError): gboolean <cimport,nodecl> end
global function g_data_output_stream_put_string(stream: *GDataOutputStream, str: cstring, cancellable: *GCancellable, error: **GError): gboolean <cimport,nodecl> end
global function g_dbus_action_group_get_type(): GType <cimport,nodecl> end
global function g_dbus_action_group_get(connection: *GDBusConnection, bus_name: *gchar, object_path: *gchar): *GDBusActionGroup <cimport,nodecl> end
global function g_dbus_address_escape_value(string: *gchar): *gchar <cimport,nodecl> end
global function g_dbus_is_address(string: *gchar): gboolean <cimport,nodecl> end
global function g_dbus_is_supported_address(string: *gchar, error: **GError): gboolean <cimport,nodecl> end
global function g_dbus_address_get_stream(address: *gchar, cancellable: *GCancellable, callback: GAsyncReadyCallback, user_data: gpointer): void <cimport,nodecl> end
global function g_dbus_address_get_stream_finish(res: *GAsyncResult, out_guid: **gchar, error: **GError): *GIOStream <cimport,nodecl> end
global function g_dbus_address_get_stream_sync(address: *gchar, out_guid: **gchar, cancellable: *GCancellable, error: **GError): *GIOStream <cimport,nodecl> end
global function g_dbus_address_get_for_bus_sync(bus_type: GBusType, cancellable: *GCancellable, error: **GError): *gchar <cimport,nodecl> end
global function g_dbus_auth_observer_get_type(): GType <cimport,nodecl> end
global function g_dbus_auth_observer_new(): *GDBusAuthObserver <cimport,nodecl> end
global function g_dbus_auth_observer_authorize_authenticated_peer(observer: *GDBusAuthObserver, stream: *GIOStream, credentials: *GCredentials): gboolean <cimport,nodecl> end
global function g_dbus_auth_observer_allow_mechanism(observer: *GDBusAuthObserver, mechanism: *gchar): gboolean <cimport,nodecl> end
global function g_dbus_connection_get_type(): GType <cimport,nodecl> end
global function g_bus_get(bus_type: GBusType, cancellable: *GCancellable, callback: GAsyncReadyCallback, user_data: gpointer): void <cimport,nodecl> end
global function g_bus_get_finish(res: *GAsyncResult, error: **GError): *GDBusConnection <cimport,nodecl> end
global function g_bus_get_sync(bus_type: GBusType, cancellable: *GCancellable, error: **GError): *GDBusConnection <cimport,nodecl> end
global function g_dbus_connection_new(stream: *GIOStream, guid: *gchar, flags: GDBusConnectionFlags, observer: *GDBusAuthObserver, cancellable: *GCancellable, callback: GAsyncReadyCallback, user_data: gpointer): void <cimport,nodecl> end
global function g_dbus_connection_new_finish(res: *GAsyncResult, error: **GError): *GDBusConnection <cimport,nodecl> end
global function g_dbus_connection_new_sync(stream: *GIOStream, guid: *gchar, flags: GDBusConnectionFlags, observer: *GDBusAuthObserver, cancellable: *GCancellable, error: **GError): *GDBusConnection <cimport,nodecl> end
global function g_dbus_connection_new_for_address(address: *gchar, flags: GDBusConnectionFlags, observer: *GDBusAuthObserver, cancellable: *GCancellable, callback: GAsyncReadyCallback, user_data: gpointer): void <cimport,nodecl> end
global function g_dbus_connection_new_for_address_finish(res: *GAsyncResult, error: **GError): *GDBusConnection <cimport,nodecl> end
global function g_dbus_connection_new_for_address_sync(address: *gchar, flags: GDBusConnectionFlags, observer: *GDBusAuthObserver, cancellable: *GCancellable, error: **GError): *GDBusConnection <cimport,nodecl> end
global function g_dbus_connection_start_message_processing(connection: *GDBusConnection): void <cimport,nodecl> end
global function g_dbus_connection_is_closed(connection: *GDBusConnection): gboolean <cimport,nodecl> end
global function g_dbus_connection_get_stream(connection: *GDBusConnection): *GIOStream <cimport,nodecl> end
global function g_dbus_connection_get_guid(connection: *GDBusConnection): *gchar <cimport,nodecl> end
global function g_dbus_connection_get_unique_name(connection: *GDBusConnection): *gchar <cimport,nodecl> end
global function g_dbus_connection_get_peer_credentials(connection: *GDBusConnection): *GCredentials <cimport,nodecl> end
global function g_dbus_connection_get_last_serial(connection: *GDBusConnection): guint32 <cimport,nodecl> end
global function g_dbus_connection_get_exit_on_close(connection: *GDBusConnection): gboolean <cimport,nodecl> end
global function g_dbus_connection_set_exit_on_close(connection: *GDBusConnection, exit_on_close: gboolean): void <cimport,nodecl> end
global function g_dbus_connection_get_capabilities(connection: *GDBusConnection): GDBusCapabilityFlags <cimport,nodecl> end
global function g_dbus_connection_get_flags(connection: *GDBusConnection): GDBusConnectionFlags <cimport,nodecl> end
global function g_dbus_connection_close(connection: *GDBusConnection, cancellable: *GCancellable, callback: GAsyncReadyCallback, user_data: gpointer): void <cimport,nodecl> end
global function g_dbus_connection_close_finish(connection: *GDBusConnection, res: *GAsyncResult, error: **GError): gboolean <cimport,nodecl> end
global function g_dbus_connection_close_sync(connection: *GDBusConnection, cancellable: *GCancellable, error: **GError): gboolean <cimport,nodecl> end
global function g_dbus_connection_flush(connection: *GDBusConnection, cancellable: *GCancellable, callback: GAsyncReadyCallback, user_data: gpointer): void <cimport,nodecl> end
global function g_dbus_connection_flush_finish(connection: *GDBusConnection, res: *GAsyncResult, error: **GError): gboolean <cimport,nodecl> end
global function g_dbus_connection_flush_sync(connection: *GDBusConnection, cancellable: *GCancellable, error: **GError): gboolean <cimport,nodecl> end
global function g_dbus_connection_send_message(connection: *GDBusConnection, message: *GDBusMessage, flags: GDBusSendMessageFlags, out_serial: *guint32, error: **GError): gboolean <cimport,nodecl> end
global function g_dbus_connection_send_message_with_reply(connection: *GDBusConnection, message: *GDBusMessage, flags: GDBusSendMessageFlags, timeout_msec: gint, out_serial: *guint32, cancellable: *GCancellable, callback: GAsyncReadyCallback, user_data: gpointer): void <cimport,nodecl> end
global function g_dbus_connection_send_message_with_reply_finish(connection: *GDBusConnection, res: *GAsyncResult, error: **GError): *GDBusMessage <cimport,nodecl> end
global function g_dbus_connection_send_message_with_reply_sync(connection: *GDBusConnection, message: *GDBusMessage, flags: GDBusSendMessageFlags, timeout_msec: gint, out_serial: *guint32, cancellable: *GCancellable, error: **GError): *GDBusMessage <cimport,nodecl> end
global function g_dbus_connection_emit_signal(connection: *GDBusConnection, destination_bus_name: *gchar, object_path: *gchar, interface_name: *gchar, signal_name: *gchar, parameters: *GVariant, error: **GError): gboolean <cimport,nodecl> end
global function g_dbus_connection_call(connection: *GDBusConnection, bus_name: *gchar, object_path: *gchar, interface_name: *gchar, method_name: *gchar, parameters: *GVariant, reply_type: *GVariantType, flags: GDBusCallFlags, timeout_msec: gint, cancellable: *GCancellable, callback: GAsyncReadyCallback, user_data: gpointer): void <cimport,nodecl> end
global function g_dbus_connection_call_finish(connection: *GDBusConnection, res: *GAsyncResult, error: **GError): *GVariant <cimport,nodecl> end
global function g_dbus_connection_call_sync(connection: *GDBusConnection, bus_name: *gchar, object_path: *gchar, interface_name: *gchar, method_name: *gchar, parameters: *GVariant, reply_type: *GVariantType, flags: GDBusCallFlags, timeout_msec: gint, cancellable: *GCancellable, error: **GError): *GVariant <cimport,nodecl> end
global function g_dbus_connection_call_with_unix_fd_list(connection: *GDBusConnection, bus_name: *gchar, object_path: *gchar, interface_name: *gchar, method_name: *gchar, parameters: *GVariant, reply_type: *GVariantType, flags: GDBusCallFlags, timeout_msec: gint, fd_list: *GUnixFDList, cancellable: *GCancellable, callback: GAsyncReadyCallback, user_data: gpointer): void <cimport,nodecl> end
global function g_dbus_connection_call_with_unix_fd_list_finish(connection: *GDBusConnection, out_fd_list: **GUnixFDList, res: *GAsyncResult, error: **GError): *GVariant <cimport,nodecl> end
global function g_dbus_connection_call_with_unix_fd_list_sync(connection: *GDBusConnection, bus_name: *gchar, object_path: *gchar, interface_name: *gchar, method_name: *gchar, parameters: *GVariant, reply_type: *GVariantType, flags: GDBusCallFlags, timeout_msec: gint, fd_list: *GUnixFDList, out_fd_list: **GUnixFDList, cancellable: *GCancellable, error: **GError): *GVariant <cimport,nodecl> end
global function g_dbus_connection_register_object(connection: *GDBusConnection, object_path: *gchar, interface_info: *GDBusInterfaceInfo, vtable: *GDBusInterfaceVTable, user_data: gpointer, user_data_free_func: GDestroyNotify, error: **GError): guint <cimport,nodecl> end
global function g_dbus_connection_register_object_with_closures(connection: *GDBusConnection, object_path: *gchar, interface_info: *GDBusInterfaceInfo, method_call_closure: *GClosure, get_property_closure: *GClosure, set_property_closure: *GClosure, error: **GError): guint <cimport,nodecl> end
global function g_dbus_connection_unregister_object(connection: *GDBusConnection, registration_id: guint): gboolean <cimport,nodecl> end
global function g_dbus_connection_register_subtree(connection: *GDBusConnection, object_path: *gchar, vtable: *GDBusSubtreeVTable, flags: GDBusSubtreeFlags, user_data: gpointer, user_data_free_func: GDestroyNotify, error: **GError): guint <cimport,nodecl> end
global function g_dbus_connection_unregister_subtree(connection: *GDBusConnection, registration_id: guint): gboolean <cimport,nodecl> end
global function g_dbus_connection_signal_subscribe(connection: *GDBusConnection, sender: *gchar, interface_name: *gchar, member: *gchar, object_path: *gchar, arg0: *gchar, flags: GDBusSignalFlags, callback: GDBusSignalCallback, user_data: gpointer, user_data_free_func: GDestroyNotify): guint <cimport,nodecl> end
global function g_dbus_connection_signal_unsubscribe(connection: *GDBusConnection, subscription_id: guint): void <cimport,nodecl> end
global function g_dbus_connection_add_filter(connection: *GDBusConnection, filter_function: GDBusMessageFilterFunction, user_data: gpointer, user_data_free_func: GDestroyNotify): guint <cimport,nodecl> end
global function g_dbus_connection_remove_filter(connection: *GDBusConnection, filter_id: guint): void <cimport,nodecl> end
global function g_dbus_error_quark(): GQuark <cimport,nodecl> end
global function g_dbus_error_is_remote_error(error: *GError): gboolean <cimport,nodecl> end
global function g_dbus_error_get_remote_error(error: *GError): *gchar <cimport,nodecl> end
global function g_dbus_error_strip_remote_error(error: *GError): gboolean <cimport,nodecl> end
global function g_dbus_error_register_error(error_domain: GQuark, error_code: gint, dbus_error_name: *gchar): gboolean <cimport,nodecl> end
global function g_dbus_error_unregister_error(error_domain: GQuark, error_code: gint, dbus_error_name: *gchar): gboolean <cimport,nodecl> end
global function g_dbus_error_register_error_domain(error_domain_quark_name: *gchar, quark_volatile: *gsize, entries: *GDBusErrorEntry, num_entries: guint): void <cimport,nodecl> end
global function g_dbus_error_new_for_dbus_error(dbus_error_name: *gchar, dbus_error_message: *gchar): *GError <cimport,nodecl> end
global function g_dbus_error_set_dbus_error(error: **GError, dbus_error_name: *gchar, dbus_error_message: *gchar, format: *gchar, ...: cvarargs): void <cimport,nodecl> end
global function g_dbus_error_set_dbus_error_valist(error: **GError, dbus_error_name: *gchar, dbus_error_message: *gchar, format: *gchar, var_args: cvalist): void <cimport,nodecl> end
global function g_dbus_error_encode_gerror(error: *GError): *gchar <cimport,nodecl> end
global function g_dbus_interface_get_type(): GType <cimport,nodecl> end
global function g_dbus_interface_get_info(interface_: *GDBusInterface): *GDBusInterfaceInfo <cimport,nodecl> end
global function g_dbus_interface_get_object(interface_: *GDBusInterface): *GDBusObject <cimport,nodecl> end
global function g_dbus_interface_set_object(interface_: *GDBusInterface, object: *GDBusObject): void <cimport,nodecl> end
global function g_dbus_interface_dup_object(interface_: *GDBusInterface): *GDBusObject <cimport,nodecl> end
global function g_dbus_interface_skeleton_get_type(): GType <cimport,nodecl> end
global function g_dbus_interface_skeleton_get_flags(interface_: *GDBusInterfaceSkeleton): GDBusInterfaceSkeletonFlags <cimport,nodecl> end
global function g_dbus_interface_skeleton_set_flags(interface_: *GDBusInterfaceSkeleton, flags: GDBusInterfaceSkeletonFlags): void <cimport,nodecl> end
global function g_dbus_interface_skeleton_get_info(interface_: *GDBusInterfaceSkeleton): *GDBusInterfaceInfo <cimport,nodecl> end
global function g_dbus_interface_skeleton_get_vtable(interface_: *GDBusInterfaceSkeleton): *GDBusInterfaceVTable <cimport,nodecl> end
global function g_dbus_interface_skeleton_get_properties(interface_: *GDBusInterfaceSkeleton): *GVariant <cimport,nodecl> end
global function g_dbus_interface_skeleton_flush(interface_: *GDBusInterfaceSkeleton): void <cimport,nodecl> end
global function g_dbus_interface_skeleton_export(interface_: *GDBusInterfaceSkeleton, connection: *GDBusConnection, object_path: *gchar, error: **GError): gboolean <cimport,nodecl> end
global function g_dbus_interface_skeleton_unexport(interface_: *GDBusInterfaceSkeleton): void <cimport,nodecl> end
global function g_dbus_interface_skeleton_unexport_from_connection(interface_: *GDBusInterfaceSkeleton, connection: *GDBusConnection): void <cimport,nodecl> end
global function g_dbus_interface_skeleton_get_connection(interface_: *GDBusInterfaceSkeleton): *GDBusConnection <cimport,nodecl> end
global function g_dbus_interface_skeleton_get_connections(interface_: *GDBusInterfaceSkeleton): *GList <cimport,nodecl> end
global function g_dbus_interface_skeleton_has_connection(interface_: *GDBusInterfaceSkeleton, connection: *GDBusConnection): gboolean <cimport,nodecl> end
global function g_dbus_interface_skeleton_get_object_path(interface_: *GDBusInterfaceSkeleton): *gchar <cimport,nodecl> end
global function g_dbus_annotation_info_lookup(annotations: **GDBusAnnotationInfo, name: *gchar): *gchar <cimport,nodecl> end
global function g_dbus_interface_info_lookup_method(info: *GDBusInterfaceInfo, name: *gchar): *GDBusMethodInfo <cimport,nodecl> end
global function g_dbus_interface_info_lookup_signal(info: *GDBusInterfaceInfo, name: *gchar): *GDBusSignalInfo <cimport,nodecl> end
global function g_dbus_interface_info_lookup_property(info: *GDBusInterfaceInfo, name: *gchar): *GDBusPropertyInfo <cimport,nodecl> end
global function g_dbus_interface_info_cache_build(info: *GDBusInterfaceInfo): void <cimport,nodecl> end
global function g_dbus_interface_info_cache_release(info: *GDBusInterfaceInfo): void <cimport,nodecl> end
global function g_dbus_interface_info_generate_xml(info: *GDBusInterfaceInfo, indent: guint, string_builder: *GString): void <cimport,nodecl> end
global function g_dbus_node_info_new_for_xml(xml_data: *gchar, error: **GError): *GDBusNodeInfo <cimport,nodecl> end
global function g_dbus_node_info_lookup_interface(info: *GDBusNodeInfo, name: *gchar): *GDBusInterfaceInfo <cimport,nodecl> end
global function g_dbus_node_info_generate_xml(info: *GDBusNodeInfo, indent: guint, string_builder: *GString): void <cimport,nodecl> end
global function g_dbus_node_info_ref(info: *GDBusNodeInfo): *GDBusNodeInfo <cimport,nodecl> end
global function g_dbus_interface_info_ref(info: *GDBusInterfaceInfo): *GDBusInterfaceInfo <cimport,nodecl> end
global function g_dbus_method_info_ref(info: *GDBusMethodInfo): *GDBusMethodInfo <cimport,nodecl> end
global function g_dbus_signal_info_ref(info: *GDBusSignalInfo): *GDBusSignalInfo <cimport,nodecl> end
global function g_dbus_property_info_ref(info: *GDBusPropertyInfo): *GDBusPropertyInfo <cimport,nodecl> end
global function g_dbus_arg_info_ref(info: *GDBusArgInfo): *GDBusArgInfo <cimport,nodecl> end
global function g_dbus_annotation_info_ref(info: *GDBusAnnotationInfo): *GDBusAnnotationInfo <cimport,nodecl> end
global function g_dbus_node_info_unref(info: *GDBusNodeInfo): void <cimport,nodecl> end
global function g_dbus_interface_info_unref(info: *GDBusInterfaceInfo): void <cimport,nodecl> end
global function g_dbus_method_info_unref(info: *GDBusMethodInfo): void <cimport,nodecl> end
global function g_dbus_signal_info_unref(info: *GDBusSignalInfo): void <cimport,nodecl> end
global function g_dbus_property_info_unref(info: *GDBusPropertyInfo): void <cimport,nodecl> end
global function g_dbus_arg_info_unref(info: *GDBusArgInfo): void <cimport,nodecl> end
global function g_dbus_annotation_info_unref(info: *GDBusAnnotationInfo): void <cimport,nodecl> end
global function g_dbus_node_info_get_type(): GType <cimport,nodecl> end
global function g_dbus_interface_info_get_type(): GType <cimport,nodecl> end
global function g_dbus_method_info_get_type(): GType <cimport,nodecl> end
global function g_dbus_signal_info_get_type(): GType <cimport,nodecl> end
global function g_dbus_property_info_get_type(): GType <cimport,nodecl> end
global function g_dbus_arg_info_get_type(): GType <cimport,nodecl> end
global function g_dbus_annotation_info_get_type(): GType <cimport,nodecl> end
global function g_dbus_menu_model_get_type(): GType <cimport,nodecl> end
global function g_dbus_menu_model_get(connection: *GDBusConnection, bus_name: *gchar, object_path: *gchar): *GDBusMenuModel <cimport,nodecl> end
global function g_dbus_message_get_type(): GType <cimport,nodecl> end
global function g_dbus_message_new(): *GDBusMessage <cimport,nodecl> end
global function g_dbus_message_new_signal(path: *gchar, interface_: *gchar, signal: *gchar): *GDBusMessage <cimport,nodecl> end
global function g_dbus_message_new_method_call(name: *gchar, path: *gchar, interface_: *gchar, method: *gchar): *GDBusMessage <cimport,nodecl> end
global function g_dbus_message_new_method_reply(method_call_message: *GDBusMessage): *GDBusMessage <cimport,nodecl> end
global function g_dbus_message_new_method_error(method_call_message: *GDBusMessage, error_name: *gchar, error_message_format: *gchar, ...: cvarargs): *GDBusMessage <cimport,nodecl> end
global function g_dbus_message_new_method_error_valist(method_call_message: *GDBusMessage, error_name: *gchar, error_message_format: *gchar, var_args: cvalist): *GDBusMessage <cimport,nodecl> end
global function g_dbus_message_new_method_error_literal(method_call_message: *GDBusMessage, error_name: *gchar, error_message: *gchar): *GDBusMessage <cimport,nodecl> end
global function g_dbus_message_print(message: *GDBusMessage, indent: guint): *gchar <cimport,nodecl> end
global function g_dbus_message_get_locked(message: *GDBusMessage): gboolean <cimport,nodecl> end
global function g_dbus_message_lock(message: *GDBusMessage): void <cimport,nodecl> end
global function g_dbus_message_copy(message: *GDBusMessage, error: **GError): *GDBusMessage <cimport,nodecl> end
global function g_dbus_message_get_byte_order(message: *GDBusMessage): GDBusMessageByteOrder <cimport,nodecl> end
global function g_dbus_message_set_byte_order(message: *GDBusMessage, byte_order: GDBusMessageByteOrder): void <cimport,nodecl> end
global function g_dbus_message_get_message_type(message: *GDBusMessage): GDBusMessageType <cimport,nodecl> end
global function g_dbus_message_set_message_type(message: *GDBusMessage, type: GDBusMessageType): void <cimport,nodecl> end
global function g_dbus_message_get_flags(message: *GDBusMessage): GDBusMessageFlags <cimport,nodecl> end
global function g_dbus_message_set_flags(message: *GDBusMessage, flags: GDBusMessageFlags): void <cimport,nodecl> end
global function g_dbus_message_get_serial(message: *GDBusMessage): guint32 <cimport,nodecl> end
global function g_dbus_message_set_serial(message: *GDBusMessage, serial: guint32): void <cimport,nodecl> end
global function g_dbus_message_get_header(message: *GDBusMessage, header_field: GDBusMessageHeaderField): *GVariant <cimport,nodecl> end
global function g_dbus_message_set_header(message: *GDBusMessage, header_field: GDBusMessageHeaderField, value: *GVariant): void <cimport,nodecl> end
global function g_dbus_message_get_header_fields(message: *GDBusMessage): *guchar <cimport,nodecl> end
global function g_dbus_message_get_body(message: *GDBusMessage): *GVariant <cimport,nodecl> end
global function g_dbus_message_set_body(message: *GDBusMessage, body: *GVariant): void <cimport,nodecl> end
global function g_dbus_message_get_unix_fd_list(message: *GDBusMessage): *GUnixFDList <cimport,nodecl> end
global function g_dbus_message_set_unix_fd_list(message: *GDBusMessage, fd_list: *GUnixFDList): void <cimport,nodecl> end
global function g_dbus_message_get_reply_serial(message: *GDBusMessage): guint32 <cimport,nodecl> end
global function g_dbus_message_set_reply_serial(message: *GDBusMessage, value: guint32): void <cimport,nodecl> end
global function g_dbus_message_get_interface(message: *GDBusMessage): *gchar <cimport,nodecl> end
global function g_dbus_message_set_interface(message: *GDBusMessage, value: *gchar): void <cimport,nodecl> end
global function g_dbus_message_get_member(message: *GDBusMessage): *gchar <cimport,nodecl> end
global function g_dbus_message_set_member(message: *GDBusMessage, value: *gchar): void <cimport,nodecl> end
global function g_dbus_message_get_path(message: *GDBusMessage): *gchar <cimport,nodecl> end
global function g_dbus_message_set_path(message: *GDBusMessage, value: *gchar): void <cimport,nodecl> end
global function g_dbus_message_get_sender(message: *GDBusMessage): *gchar <cimport,nodecl> end
global function g_dbus_message_set_sender(message: *GDBusMessage, value: *gchar): void <cimport,nodecl> end
global function g_dbus_message_get_destination(message: *GDBusMessage): *gchar <cimport,nodecl> end
global function g_dbus_message_set_destination(message: *GDBusMessage, value: *gchar): void <cimport,nodecl> end
global function g_dbus_message_get_error_name(message: *GDBusMessage): *gchar <cimport,nodecl> end
global function g_dbus_message_set_error_name(message: *GDBusMessage, value: *gchar): void <cimport,nodecl> end
global function g_dbus_message_get_signature(message: *GDBusMessage): *gchar <cimport,nodecl> end
global function g_dbus_message_set_signature(message: *GDBusMessage, value: *gchar): void <cimport,nodecl> end
global function g_dbus_message_get_num_unix_fds(message: *GDBusMessage): guint32 <cimport,nodecl> end
global function g_dbus_message_set_num_unix_fds(message: *GDBusMessage, value: guint32): void <cimport,nodecl> end
global function g_dbus_message_get_arg0(message: *GDBusMessage): *gchar <cimport,nodecl> end
global function g_dbus_message_new_from_blob(blob: *guchar, blob_len: gsize, capabilities: GDBusCapabilityFlags, error: **GError): *GDBusMessage <cimport,nodecl> end
global function g_dbus_message_bytes_needed(blob: *guchar, blob_len: gsize, error: **GError): gssize <cimport,nodecl> end
global function g_dbus_message_to_blob(message: *GDBusMessage, out_size: *gsize, capabilities: GDBusCapabilityFlags, error: **GError): *guchar <cimport,nodecl> end
global function g_dbus_message_to_gerror(message: *GDBusMessage, error: **GError): gboolean <cimport,nodecl> end
global function g_dbus_method_invocation_get_type(): GType <cimport,nodecl> end
global function g_dbus_method_invocation_get_sender(invocation: *GDBusMethodInvocation): *gchar <cimport,nodecl> end
global function g_dbus_method_invocation_get_object_path(invocation: *GDBusMethodInvocation): *gchar <cimport,nodecl> end
global function g_dbus_method_invocation_get_interface_name(invocation: *GDBusMethodInvocation): *gchar <cimport,nodecl> end
global function g_dbus_method_invocation_get_method_name(invocation: *GDBusMethodInvocation): *gchar <cimport,nodecl> end
global function g_dbus_method_invocation_get_method_info(invocation: *GDBusMethodInvocation): *GDBusMethodInfo <cimport,nodecl> end
global function g_dbus_method_invocation_get_property_info(invocation: *GDBusMethodInvocation): *GDBusPropertyInfo <cimport,nodecl> end
global function g_dbus_method_invocation_get_connection(invocation: *GDBusMethodInvocation): *GDBusConnection <cimport,nodecl> end
global function g_dbus_method_invocation_get_message(invocation: *GDBusMethodInvocation): *GDBusMessage <cimport,nodecl> end
global function g_dbus_method_invocation_get_parameters(invocation: *GDBusMethodInvocation): *GVariant <cimport,nodecl> end
global function g_dbus_method_invocation_get_user_data(invocation: *GDBusMethodInvocation): gpointer <cimport,nodecl> end
global function g_dbus_method_invocation_return_value(invocation: *GDBusMethodInvocation, parameters: *GVariant): void <cimport,nodecl> end
global function g_dbus_method_invocation_return_value_with_unix_fd_list(invocation: *GDBusMethodInvocation, parameters: *GVariant, fd_list: *GUnixFDList): void <cimport,nodecl> end
global function g_dbus_method_invocation_return_error(invocation: *GDBusMethodInvocation, domain: GQuark, code: gint, format: *gchar, ...: cvarargs): void <cimport,nodecl> end
global function g_dbus_method_invocation_return_error_valist(invocation: *GDBusMethodInvocation, domain: GQuark, code: gint, format: *gchar, var_args: cvalist): void <cimport,nodecl> end
global function g_dbus_method_invocation_return_error_literal(invocation: *GDBusMethodInvocation, domain: GQuark, code: gint, message: *gchar): void <cimport,nodecl> end
global function g_dbus_method_invocation_return_gerror(invocation: *GDBusMethodInvocation, error: *GError): void <cimport,nodecl> end
global function g_dbus_method_invocation_take_error(invocation: *GDBusMethodInvocation, error: *GError): void <cimport,nodecl> end
global function g_dbus_method_invocation_return_dbus_error(invocation: *GDBusMethodInvocation, error_name: *gchar, error_message: *gchar): void <cimport,nodecl> end
global function g_bus_own_name(bus_type: GBusType, name: *gchar, flags: GBusNameOwnerFlags, bus_acquired_handler: GBusAcquiredCallback, name_acquired_handler: GBusNameAcquiredCallback, name_lost_handler: GBusNameLostCallback, user_data: gpointer, user_data_free_func: GDestroyNotify): guint <cimport,nodecl> end
global function g_bus_own_name_on_connection(connection: *GDBusConnection, name: *gchar, flags: GBusNameOwnerFlags, name_acquired_handler: GBusNameAcquiredCallback, name_lost_handler: GBusNameLostCallback, user_data: gpointer, user_data_free_func: GDestroyNotify): guint <cimport,nodecl> end
global function g_bus_own_name_with_closures(bus_type: GBusType, name: *gchar, flags: GBusNameOwnerFlags, bus_acquired_closure: *GClosure, name_acquired_closure: *GClosure, name_lost_closure: *GClosure): guint <cimport,nodecl> end
global function g_bus_own_name_on_connection_with_closures(connection: *GDBusConnection, name: *gchar, flags: GBusNameOwnerFlags, name_acquired_closure: *GClosure, name_lost_closure: *GClosure): guint <cimport,nodecl> end
global function g_bus_unown_name(owner_id: guint): void <cimport,nodecl> end
global function g_bus_watch_name(bus_type: GBusType, name: *gchar, flags: GBusNameWatcherFlags, name_appeared_handler: GBusNameAppearedCallback, name_vanished_handler: GBusNameVanishedCallback, user_data: gpointer, user_data_free_func: GDestroyNotify): guint <cimport,nodecl> end
global function g_bus_watch_name_on_connection(connection: *GDBusConnection, name: *gchar, flags: GBusNameWatcherFlags, name_appeared_handler: GBusNameAppearedCallback, name_vanished_handler: GBusNameVanishedCallback, user_data: gpointer, user_data_free_func: GDestroyNotify): guint <cimport,nodecl> end
global function g_bus_watch_name_with_closures(bus_type: GBusType, name: *gchar, flags: GBusNameWatcherFlags, name_appeared_closure: *GClosure, name_vanished_closure: *GClosure): guint <cimport,nodecl> end
global function g_bus_watch_name_on_connection_with_closures(connection: *GDBusConnection, name: *gchar, flags: GBusNameWatcherFlags, name_appeared_closure: *GClosure, name_vanished_closure: *GClosure): guint <cimport,nodecl> end
global function g_bus_unwatch_name(watcher_id: guint): void <cimport,nodecl> end
global function g_dbus_object_get_type(): GType <cimport,nodecl> end
global function g_dbus_object_get_object_path(object: *GDBusObject): *gchar <cimport,nodecl> end
global function g_dbus_object_get_interfaces(object: *GDBusObject): *GList <cimport,nodecl> end
global function g_dbus_object_get_interface(object: *GDBusObject, interface_name: *gchar): *GDBusInterface <cimport,nodecl> end
global function g_dbus_object_manager_get_type(): GType <cimport,nodecl> end
global function g_dbus_object_manager_get_object_path(manager: *GDBusObjectManager): *gchar <cimport,nodecl> end
global function g_dbus_object_manager_get_objects(manager: *GDBusObjectManager): *GList <cimport,nodecl> end
global function g_dbus_object_manager_get_object(manager: *GDBusObjectManager, object_path: *gchar): *GDBusObject <cimport,nodecl> end
global function g_dbus_object_manager_get_interface(manager: *GDBusObjectManager, object_path: *gchar, interface_name: *gchar): *GDBusInterface <cimport,nodecl> end
global function g_dbus_object_manager_client_get_type(): GType <cimport,nodecl> end
global function g_dbus_object_manager_client_new(connection: *GDBusConnection, flags: GDBusObjectManagerClientFlags, name: *gchar, object_path: *gchar, get_proxy_type_func: GDBusProxyTypeFunc, get_proxy_type_user_data: gpointer, get_proxy_type_destroy_notify: GDestroyNotify, cancellable: *GCancellable, callback: GAsyncReadyCallback, user_data: gpointer): void <cimport,nodecl> end
global function g_dbus_object_manager_client_new_finish(res: *GAsyncResult, error: **GError): *GDBusObjectManager <cimport,nodecl> end
global function g_dbus_object_manager_client_new_sync(connection: *GDBusConnection, flags: GDBusObjectManagerClientFlags, name: *gchar, object_path: *gchar, get_proxy_type_func: GDBusProxyTypeFunc, get_proxy_type_user_data: gpointer, get_proxy_type_destroy_notify: GDestroyNotify, cancellable: *GCancellable, error: **GError): *GDBusObjectManager <cimport,nodecl> end
global function g_dbus_object_manager_client_new_for_bus(bus_type: GBusType, flags: GDBusObjectManagerClientFlags, name: *gchar, object_path: *gchar, get_proxy_type_func: GDBusProxyTypeFunc, get_proxy_type_user_data: gpointer, get_proxy_type_destroy_notify: GDestroyNotify, cancellable: *GCancellable, callback: GAsyncReadyCallback, user_data: gpointer): void <cimport,nodecl> end
global function g_dbus_object_manager_client_new_for_bus_finish(res: *GAsyncResult, error: **GError): *GDBusObjectManager <cimport,nodecl> end
global function g_dbus_object_manager_client_new_for_bus_sync(bus_type: GBusType, flags: GDBusObjectManagerClientFlags, name: *gchar, object_path: *gchar, get_proxy_type_func: GDBusProxyTypeFunc, get_proxy_type_user_data: gpointer, get_proxy_type_destroy_notify: GDestroyNotify, cancellable: *GCancellable, error: **GError): *GDBusObjectManager <cimport,nodecl> end
global function g_dbus_object_manager_client_get_connection(manager: *GDBusObjectManagerClient): *GDBusConnection <cimport,nodecl> end
global function g_dbus_object_manager_client_get_flags(manager: *GDBusObjectManagerClient): GDBusObjectManagerClientFlags <cimport,nodecl> end
global function g_dbus_object_manager_client_get_name(manager: *GDBusObjectManagerClient): *gchar <cimport,nodecl> end
global function g_dbus_object_manager_client_get_name_owner(manager: *GDBusObjectManagerClient): *gchar <cimport,nodecl> end
global function g_dbus_object_manager_server_get_type(): GType <cimport,nodecl> end
global function g_dbus_object_manager_server_new(object_path: *gchar): *GDBusObjectManagerServer <cimport,nodecl> end
global function g_dbus_object_manager_server_get_connection(manager: *GDBusObjectManagerServer): *GDBusConnection <cimport,nodecl> end
global function g_dbus_object_manager_server_set_connection(manager: *GDBusObjectManagerServer, connection: *GDBusConnection): void <cimport,nodecl> end
global function g_dbus_object_manager_server_export(manager: *GDBusObjectManagerServer, object: *GDBusObjectSkeleton): void <cimport,nodecl> end
global function g_dbus_object_manager_server_export_uniquely(manager: *GDBusObjectManagerServer, object: *GDBusObjectSkeleton): void <cimport,nodecl> end
global function g_dbus_object_manager_server_is_exported(manager: *GDBusObjectManagerServer, object: *GDBusObjectSkeleton): gboolean <cimport,nodecl> end
global function g_dbus_object_manager_server_unexport(manager: *GDBusObjectManagerServer, object_path: *gchar): gboolean <cimport,nodecl> end
global function g_dbus_object_proxy_get_type(): GType <cimport,nodecl> end
global function g_dbus_object_proxy_new(connection: *GDBusConnection, object_path: *gchar): *GDBusObjectProxy <cimport,nodecl> end
global function g_dbus_object_proxy_get_connection(proxy: *GDBusObjectProxy): *GDBusConnection <cimport,nodecl> end
global function g_dbus_object_skeleton_get_type(): GType <cimport,nodecl> end
global function g_dbus_object_skeleton_new(object_path: *gchar): *GDBusObjectSkeleton <cimport,nodecl> end
global function g_dbus_object_skeleton_flush(object: *GDBusObjectSkeleton): void <cimport,nodecl> end
global function g_dbus_object_skeleton_add_interface(object: *GDBusObjectSkeleton, interface_: *GDBusInterfaceSkeleton): void <cimport,nodecl> end
global function g_dbus_object_skeleton_remove_interface(object: *GDBusObjectSkeleton, interface_: *GDBusInterfaceSkeleton): void <cimport,nodecl> end
global function g_dbus_object_skeleton_remove_interface_by_name(object: *GDBusObjectSkeleton, interface_name: *gchar): void <cimport,nodecl> end
global function g_dbus_object_skeleton_set_object_path(object: *GDBusObjectSkeleton, object_path: *gchar): void <cimport,nodecl> end
global function g_dbus_proxy_get_type(): GType <cimport,nodecl> end
global function g_dbus_proxy_new(connection: *GDBusConnection, flags: GDBusProxyFlags, info: *GDBusInterfaceInfo, name: *gchar, object_path: *gchar, interface_name: *gchar, cancellable: *GCancellable, callback: GAsyncReadyCallback, user_data: gpointer): void <cimport,nodecl> end
global function g_dbus_proxy_new_finish(res: *GAsyncResult, error: **GError): *GDBusProxy <cimport,nodecl> end
global function g_dbus_proxy_new_sync(connection: *GDBusConnection, flags: GDBusProxyFlags, info: *GDBusInterfaceInfo, name: *gchar, object_path: *gchar, interface_name: *gchar, cancellable: *GCancellable, error: **GError): *GDBusProxy <cimport,nodecl> end
global function g_dbus_proxy_new_for_bus(bus_type: GBusType, flags: GDBusProxyFlags, info: *GDBusInterfaceInfo, name: *gchar, object_path: *gchar, interface_name: *gchar, cancellable: *GCancellable, callback: GAsyncReadyCallback, user_data: gpointer): void <cimport,nodecl> end
global function g_dbus_proxy_new_for_bus_finish(res: *GAsyncResult, error: **GError): *GDBusProxy <cimport,nodecl> end
global function g_dbus_proxy_new_for_bus_sync(bus_type: GBusType, flags: GDBusProxyFlags, info: *GDBusInterfaceInfo, name: *gchar, object_path: *gchar, interface_name: *gchar, cancellable: *GCancellable, error: **GError): *GDBusProxy <cimport,nodecl> end
global function g_dbus_proxy_get_connection(proxy: *GDBusProxy): *GDBusConnection <cimport,nodecl> end
global function g_dbus_proxy_get_flags(proxy: *GDBusProxy): GDBusProxyFlags <cimport,nodecl> end
global function g_dbus_proxy_get_name(proxy: *GDBusProxy): *gchar <cimport,nodecl> end
global function g_dbus_proxy_get_name_owner(proxy: *GDBusProxy): *gchar <cimport,nodecl> end
global function g_dbus_proxy_get_object_path(proxy: *GDBusProxy): *gchar <cimport,nodecl> end
global function g_dbus_proxy_get_interface_name(proxy: *GDBusProxy): *gchar <cimport,nodecl> end
global function g_dbus_proxy_get_default_timeout(proxy: *GDBusProxy): gint <cimport,nodecl> end
global function g_dbus_proxy_set_default_timeout(proxy: *GDBusProxy, timeout_msec: gint): void <cimport,nodecl> end
global function g_dbus_proxy_get_interface_info(proxy: *GDBusProxy): *GDBusInterfaceInfo <cimport,nodecl> end
global function g_dbus_proxy_set_interface_info(proxy: *GDBusProxy, info: *GDBusInterfaceInfo): void <cimport,nodecl> end
global function g_dbus_proxy_get_cached_property(proxy: *GDBusProxy, property_name: *gchar): *GVariant <cimport,nodecl> end
global function g_dbus_proxy_set_cached_property(proxy: *GDBusProxy, property_name: *gchar, value: *GVariant): void <cimport,nodecl> end
global function g_dbus_proxy_get_cached_property_names(proxy: *GDBusProxy): **gchar <cimport,nodecl> end
global function g_dbus_proxy_call(proxy: *GDBusProxy, method_name: *gchar, parameters: *GVariant, flags: GDBusCallFlags, timeout_msec: gint, cancellable: *GCancellable, callback: GAsyncReadyCallback, user_data: gpointer): void <cimport,nodecl> end
global function g_dbus_proxy_call_finish(proxy: *GDBusProxy, res: *GAsyncResult, error: **GError): *GVariant <cimport,nodecl> end
global function g_dbus_proxy_call_sync(proxy: *GDBusProxy, method_name: *gchar, parameters: *GVariant, flags: GDBusCallFlags, timeout_msec: gint, cancellable: *GCancellable, error: **GError): *GVariant <cimport,nodecl> end
global function g_dbus_proxy_call_with_unix_fd_list(proxy: *GDBusProxy, method_name: *gchar, parameters: *GVariant, flags: GDBusCallFlags, timeout_msec: gint, fd_list: *GUnixFDList, cancellable: *GCancellable, callback: GAsyncReadyCallback, user_data: gpointer): void <cimport,nodecl> end
global function g_dbus_proxy_call_with_unix_fd_list_finish(proxy: *GDBusProxy, out_fd_list: **GUnixFDList, res: *GAsyncResult, error: **GError): *GVariant <cimport,nodecl> end
global function g_dbus_proxy_call_with_unix_fd_list_sync(proxy: *GDBusProxy, method_name: *gchar, parameters: *GVariant, flags: GDBusCallFlags, timeout_msec: gint, fd_list: *GUnixFDList, out_fd_list: **GUnixFDList, cancellable: *GCancellable, error: **GError): *GVariant <cimport,nodecl> end
global function g_dbus_server_get_type(): GType <cimport,nodecl> end
global function g_dbus_server_new_sync(address: *gchar, flags: GDBusServerFlags, guid: *gchar, observer: *GDBusAuthObserver, cancellable: *GCancellable, error: **GError): *GDBusServer <cimport,nodecl> end
global function g_dbus_server_get_client_address(server: *GDBusServer): *gchar <cimport,nodecl> end
global function g_dbus_server_get_guid(server: *GDBusServer): *gchar <cimport,nodecl> end
global function g_dbus_server_get_flags(server: *GDBusServer): GDBusServerFlags <cimport,nodecl> end
global function g_dbus_server_start(server: *GDBusServer): void <cimport,nodecl> end
global function g_dbus_server_stop(server: *GDBusServer): void <cimport,nodecl> end
global function g_dbus_server_is_active(server: *GDBusServer): gboolean <cimport,nodecl> end
global function g_dbus_is_guid(string: *gchar): gboolean <cimport,nodecl> end
global function g_dbus_generate_guid(): *gchar <cimport,nodecl> end
global function g_dbus_is_name(string: *gchar): gboolean <cimport,nodecl> end
global function g_dbus_is_unique_name(string: *gchar): gboolean <cimport,nodecl> end
global function g_dbus_is_member_name(string: *gchar): gboolean <cimport,nodecl> end
global function g_dbus_is_interface_name(string: *gchar): gboolean <cimport,nodecl> end
global function g_dbus_is_error_name(string: *gchar): gboolean <cimport,nodecl> end
global function g_dbus_gvariant_to_gvalue(value: *GVariant, out_gvalue: *GValue): void <cimport,nodecl> end
global function g_dbus_gvalue_to_gvariant(gvalue: *GValue, type: *GVariantType): *GVariant <cimport,nodecl> end
global function g_dbus_escape_object_path_bytestring(bytes: *guint8): *gchar <cimport,nodecl> end
global function g_dbus_escape_object_path(s: *gchar): *gchar <cimport,nodecl> end
global function g_dbus_unescape_object_path(s: *gchar): *guint8 <cimport,nodecl> end
global function g_drive_get_type(): GType <cimport,nodecl> end
global function g_drive_get_name(drive: *GDrive): cstring <cimport,nodecl> end
global function g_drive_get_icon(drive: *GDrive): *GIcon <cimport,nodecl> end
global function g_drive_get_symbolic_icon(drive: *GDrive): *GIcon <cimport,nodecl> end
global function g_drive_has_volumes(drive: *GDrive): gboolean <cimport,nodecl> end
global function g_drive_get_volumes(drive: *GDrive): *GList <cimport,nodecl> end
global function g_drive_is_removable(drive: *GDrive): gboolean <cimport,nodecl> end
global function g_drive_is_media_removable(drive: *GDrive): gboolean <cimport,nodecl> end
global function g_drive_has_media(drive: *GDrive): gboolean <cimport,nodecl> end
global function g_drive_is_media_check_automatic(drive: *GDrive): gboolean <cimport,nodecl> end
global function g_drive_can_poll_for_media(drive: *GDrive): gboolean <cimport,nodecl> end
global function g_drive_can_eject(drive: *GDrive): gboolean <cimport,nodecl> end
global function g_drive_eject(drive: *GDrive, flags: GMountUnmountFlags, cancellable: *GCancellable, callback: GAsyncReadyCallback, user_data: gpointer): void <cimport,nodecl> end
global function g_drive_eject_finish(drive: *GDrive, result: *GAsyncResult, error: **GError): gboolean <cimport,nodecl> end
global function g_drive_poll_for_media(drive: *GDrive, cancellable: *GCancellable, callback: GAsyncReadyCallback, user_data: gpointer): void <cimport,nodecl> end
global function g_drive_poll_for_media_finish(drive: *GDrive, result: *GAsyncResult, error: **GError): gboolean <cimport,nodecl> end
global function g_drive_get_identifier(drive: *GDrive, kind: cstring): cstring <cimport,nodecl> end
global function g_drive_enumerate_identifiers(drive: *GDrive): *cstring <cimport,nodecl> end
global function g_drive_get_start_stop_type(drive: *GDrive): GDriveStartStopType <cimport,nodecl> end
global function g_drive_can_start(drive: *GDrive): gboolean <cimport,nodecl> end
global function g_drive_can_start_degraded(drive: *GDrive): gboolean <cimport,nodecl> end
global function g_drive_start(drive: *GDrive, flags: GDriveStartFlags, mount_operation: *GMountOperation, cancellable: *GCancellable, callback: GAsyncReadyCallback, user_data: gpointer): void <cimport,nodecl> end
global function g_drive_start_finish(drive: *GDrive, result: *GAsyncResult, error: **GError): gboolean <cimport,nodecl> end
global function g_drive_can_stop(drive: *GDrive): gboolean <cimport,nodecl> end
global function g_drive_stop(drive: *GDrive, flags: GMountUnmountFlags, mount_operation: *GMountOperation, cancellable: *GCancellable, callback: GAsyncReadyCallback, user_data: gpointer): void <cimport,nodecl> end
global function g_drive_stop_finish(drive: *GDrive, result: *GAsyncResult, error: **GError): gboolean <cimport,nodecl> end
global function g_drive_eject_with_operation(drive: *GDrive, flags: GMountUnmountFlags, mount_operation: *GMountOperation, cancellable: *GCancellable, callback: GAsyncReadyCallback, user_data: gpointer): void <cimport,nodecl> end
global function g_drive_eject_with_operation_finish(drive: *GDrive, result: *GAsyncResult, error: **GError): gboolean <cimport,nodecl> end
global function g_drive_get_sort_key(drive: *GDrive): *gchar <cimport,nodecl> end
global function g_dtls_connection_get_type(): GType <cimport,nodecl> end
global function g_dtls_connection_set_database(conn: *GDtlsConnection, database: *GTlsDatabase): void <cimport,nodecl> end
global function g_dtls_connection_get_database(conn: *GDtlsConnection): *GTlsDatabase <cimport,nodecl> end
global function g_dtls_connection_set_certificate(conn: *GDtlsConnection, certificate: *GTlsCertificate): void <cimport,nodecl> end
global function g_dtls_connection_get_certificate(conn: *GDtlsConnection): *GTlsCertificate <cimport,nodecl> end
global function g_dtls_connection_set_interaction(conn: *GDtlsConnection, interaction: *GTlsInteraction): void <cimport,nodecl> end
global function g_dtls_connection_get_interaction(conn: *GDtlsConnection): *GTlsInteraction <cimport,nodecl> end
global function g_dtls_connection_get_peer_certificate(conn: *GDtlsConnection): *GTlsCertificate <cimport,nodecl> end
global function g_dtls_connection_get_peer_certificate_errors(conn: *GDtlsConnection): GTlsCertificateFlags <cimport,nodecl> end
global function g_dtls_connection_set_require_close_notify(conn: *GDtlsConnection, require_close_notify: gboolean): void <cimport,nodecl> end
global function g_dtls_connection_get_require_close_notify(conn: *GDtlsConnection): gboolean <cimport,nodecl> end
global function g_dtls_connection_set_rehandshake_mode(conn: *GDtlsConnection, mode: GTlsRehandshakeMode): void <cimport,nodecl> end
global function g_dtls_connection_get_rehandshake_mode(conn: *GDtlsConnection): GTlsRehandshakeMode <cimport,nodecl> end
global function g_dtls_connection_handshake(conn: *GDtlsConnection, cancellable: *GCancellable, error: **GError): gboolean <cimport,nodecl> end
global function g_dtls_connection_handshake_async(conn: *GDtlsConnection, io_priority: cint, cancellable: *GCancellable, callback: GAsyncReadyCallback, user_data: gpointer): void <cimport,nodecl> end
global function g_dtls_connection_handshake_finish(conn: *GDtlsConnection, result: *GAsyncResult, error: **GError): gboolean <cimport,nodecl> end
global function g_dtls_connection_shutdown(conn: *GDtlsConnection, shutdown_read: gboolean, shutdown_write: gboolean, cancellable: *GCancellable, error: **GError): gboolean <cimport,nodecl> end
global function g_dtls_connection_shutdown_async(conn: *GDtlsConnection, shutdown_read: gboolean, shutdown_write: gboolean, io_priority: cint, cancellable: *GCancellable, callback: GAsyncReadyCallback, user_data: gpointer): void <cimport,nodecl> end
global function g_dtls_connection_shutdown_finish(conn: *GDtlsConnection, result: *GAsyncResult, error: **GError): gboolean <cimport,nodecl> end
global function g_dtls_connection_close(conn: *GDtlsConnection, cancellable: *GCancellable, error: **GError): gboolean <cimport,nodecl> end
global function g_dtls_connection_close_async(conn: *GDtlsConnection, io_priority: cint, cancellable: *GCancellable, callback: GAsyncReadyCallback, user_data: gpointer): void <cimport,nodecl> end
global function g_dtls_connection_close_finish(conn: *GDtlsConnection, result: *GAsyncResult, error: **GError): gboolean <cimport,nodecl> end
global function g_dtls_connection_emit_accept_certificate(conn: *GDtlsConnection, peer_cert: *GTlsCertificate, errors: GTlsCertificateFlags): gboolean <cimport,nodecl> end
global function g_dtls_connection_set_advertised_protocols(conn: *GDtlsConnection, protocols: **gchar): void <cimport,nodecl> end
global function g_dtls_connection_get_negotiated_protocol(conn: *GDtlsConnection): *gchar <cimport,nodecl> end
global function g_dtls_connection_get_channel_binding_data(conn: *GDtlsConnection, type: GTlsChannelBindingType, data: *GByteArray, error: **GError): gboolean <cimport,nodecl> end
global function g_dtls_connection_get_protocol_version(conn: *GDtlsConnection): GTlsProtocolVersion <cimport,nodecl> end
global function g_dtls_connection_get_ciphersuite_name(conn: *GDtlsConnection): *gchar <cimport,nodecl> end
global function g_dtls_client_connection_get_type(): GType <cimport,nodecl> end
global function g_dtls_client_connection_new(base_socket: *GDatagramBased, server_identity: *GSocketConnectable, error: **GError): *GDatagramBased <cimport,nodecl> end
global function g_dtls_client_connection_get_validation_flags(conn: *GDtlsClientConnection): GTlsCertificateFlags <cimport,nodecl> end
global function g_dtls_client_connection_set_validation_flags(conn: *GDtlsClientConnection, flags: GTlsCertificateFlags): void <cimport,nodecl> end
global function g_dtls_client_connection_get_server_identity(conn: *GDtlsClientConnection): *GSocketConnectable <cimport,nodecl> end
global function g_dtls_client_connection_set_server_identity(conn: *GDtlsClientConnection, identity: *GSocketConnectable): void <cimport,nodecl> end
global function g_dtls_client_connection_get_accepted_cas(conn: *GDtlsClientConnection): *GList <cimport,nodecl> end
global function g_dtls_server_connection_get_type(): GType <cimport,nodecl> end
global function g_dtls_server_connection_new(base_socket: *GDatagramBased, certificate: *GTlsCertificate, error: **GError): *GDatagramBased <cimport,nodecl> end
global function g_icon_get_type(): GType <cimport,nodecl> end
global function g_icon_hash(icon: gconstpointer): guint <cimport,nodecl> end
global function g_icon_equal(icon1: *GIcon, icon2: *GIcon): gboolean <cimport,nodecl> end
global function g_icon_to_string(icon: *GIcon): *gchar <cimport,nodecl> end
global function g_icon_new_for_string(str: *gchar, error: **GError): *GIcon <cimport,nodecl> end
global function g_icon_serialize(icon: *GIcon): *GVariant <cimport,nodecl> end
global function g_icon_deserialize(value: *GVariant): *GIcon <cimport,nodecl> end
global function g_emblem_get_type(): GType <cimport,nodecl> end
global function g_emblem_new(icon: *GIcon): *GEmblem <cimport,nodecl> end
global function g_emblem_new_with_origin(icon: *GIcon, origin: GEmblemOrigin): *GEmblem <cimport,nodecl> end
global function g_emblem_get_icon(emblem: *GEmblem): *GIcon <cimport,nodecl> end
global function g_emblem_get_origin(emblem: *GEmblem): GEmblemOrigin <cimport,nodecl> end
global function g_emblemed_icon_get_type(): GType <cimport,nodecl> end
global function g_emblemed_icon_new(icon: *GIcon, emblem: *GEmblem): *GIcon <cimport,nodecl> end
global function g_emblemed_icon_get_icon(emblemed: *GEmblemedIcon): *GIcon <cimport,nodecl> end
global function g_emblemed_icon_get_emblems(emblemed: *GEmblemedIcon): *GList <cimport,nodecl> end
global function g_emblemed_icon_add_emblem(emblemed: *GEmblemedIcon, emblem: *GEmblem): void <cimport,nodecl> end
global function g_emblemed_icon_clear_emblems(emblemed: *GEmblemedIcon): void <cimport,nodecl> end
global function g_file_get_type(): GType <cimport,nodecl> end
global function g_file_new_for_path(path: cstring): *GFile <cimport,nodecl> end
global function g_file_new_for_uri(uri: cstring): *GFile <cimport,nodecl> end
global function g_file_new_for_commandline_arg(arg: cstring): *GFile <cimport,nodecl> end
global function g_file_new_for_commandline_arg_and_cwd(arg: *gchar, cwd: *gchar): *GFile <cimport,nodecl> end
global function g_file_new_tmp(tmpl: cstring, iostream: **GFileIOStream, error: **GError): *GFile <cimport,nodecl> end
global function g_file_parse_name(parse_name: cstring): *GFile <cimport,nodecl> end
global function g_file_new_build_filename(first_element: *gchar, ...: cvarargs): *GFile <cimport,nodecl> end
global function g_file_dup(file: *GFile): *GFile <cimport,nodecl> end
global function g_file_hash(file: gconstpointer): guint <cimport,nodecl> end
global function g_file_equal(file1: *GFile, file2: *GFile): gboolean <cimport,nodecl> end
global function g_file_get_basename(file: *GFile): cstring <cimport,nodecl> end
global function g_file_get_path(file: *GFile): cstring <cimport,nodecl> end
global function g_file_peek_path(file: *GFile): cstring <cimport,nodecl> end
global function g_file_get_uri(file: *GFile): cstring <cimport,nodecl> end
global function g_file_get_parse_name(file: *GFile): cstring <cimport,nodecl> end
global function g_file_get_parent(file: *GFile): *GFile <cimport,nodecl> end
global function g_file_has_parent(file: *GFile, parent: *GFile): gboolean <cimport,nodecl> end
global function g_file_get_child(file: *GFile, name: cstring): *GFile <cimport,nodecl> end
global function g_file_get_child_for_display_name(file: *GFile, display_name: cstring, error: **GError): *GFile <cimport,nodecl> end
global function g_file_has_prefix(file: *GFile, prefix: *GFile): gboolean <cimport,nodecl> end
global function g_file_get_relative_path(parent: *GFile, descendant: *GFile): cstring <cimport,nodecl> end
global function g_file_resolve_relative_path(file: *GFile, relative_path: cstring): *GFile <cimport,nodecl> end
global function g_file_is_native(file: *GFile): gboolean <cimport,nodecl> end
global function g_file_has_uri_scheme(file: *GFile, uri_scheme: cstring): gboolean <cimport,nodecl> end
global function g_file_get_uri_scheme(file: *GFile): cstring <cimport,nodecl> end
global function g_file_read(file: *GFile, cancellable: *GCancellable, error: **GError): *GFileInputStream <cimport,nodecl> end
global function g_file_read_async(file: *GFile, io_priority: cint, cancellable: *GCancellable, callback: GAsyncReadyCallback, user_data: gpointer): void <cimport,nodecl> end
global function g_file_read_finish(file: *GFile, res: *GAsyncResult, error: **GError): *GFileInputStream <cimport,nodecl> end
global function g_file_append_to(file: *GFile, flags: GFileCreateFlags, cancellable: *GCancellable, error: **GError): *GFileOutputStream <cimport,nodecl> end
global function g_file_create(file: *GFile, flags: GFileCreateFlags, cancellable: *GCancellable, error: **GError): *GFileOutputStream <cimport,nodecl> end
global function g_file_replace(file: *GFile, etag: cstring, make_backup: gboolean, flags: GFileCreateFlags, cancellable: *GCancellable, error: **GError): *GFileOutputStream <cimport,nodecl> end
global function g_file_append_to_async(file: *GFile, flags: GFileCreateFlags, io_priority: cint, cancellable: *GCancellable, callback: GAsyncReadyCallback, user_data: gpointer): void <cimport,nodecl> end
global function g_file_append_to_finish(file: *GFile, res: *GAsyncResult, error: **GError): *GFileOutputStream <cimport,nodecl> end
global function g_file_create_async(file: *GFile, flags: GFileCreateFlags, io_priority: cint, cancellable: *GCancellable, callback: GAsyncReadyCallback, user_data: gpointer): void <cimport,nodecl> end
global function g_file_create_finish(file: *GFile, res: *GAsyncResult, error: **GError): *GFileOutputStream <cimport,nodecl> end
global function g_file_replace_async(file: *GFile, etag: cstring, make_backup: gboolean, flags: GFileCreateFlags, io_priority: cint, cancellable: *GCancellable, callback: GAsyncReadyCallback, user_data: gpointer): void <cimport,nodecl> end
global function g_file_replace_finish(file: *GFile, res: *GAsyncResult, error: **GError): *GFileOutputStream <cimport,nodecl> end
global function g_file_open_readwrite(file: *GFile, cancellable: *GCancellable, error: **GError): *GFileIOStream <cimport,nodecl> end
global function g_file_open_readwrite_async(file: *GFile, io_priority: cint, cancellable: *GCancellable, callback: GAsyncReadyCallback, user_data: gpointer): void <cimport,nodecl> end
global function g_file_open_readwrite_finish(file: *GFile, res: *GAsyncResult, error: **GError): *GFileIOStream <cimport,nodecl> end
global function g_file_create_readwrite(file: *GFile, flags: GFileCreateFlags, cancellable: *GCancellable, error: **GError): *GFileIOStream <cimport,nodecl> end
global function g_file_create_readwrite_async(file: *GFile, flags: GFileCreateFlags, io_priority: cint, cancellable: *GCancellable, callback: GAsyncReadyCallback, user_data: gpointer): void <cimport,nodecl> end
global function g_file_create_readwrite_finish(file: *GFile, res: *GAsyncResult, error: **GError): *GFileIOStream <cimport,nodecl> end
global function g_file_replace_readwrite(file: *GFile, etag: cstring, make_backup: gboolean, flags: GFileCreateFlags, cancellable: *GCancellable, error: **GError): *GFileIOStream <cimport,nodecl> end
global function g_file_replace_readwrite_async(file: *GFile, etag: cstring, make_backup: gboolean, flags: GFileCreateFlags, io_priority: cint, cancellable: *GCancellable, callback: GAsyncReadyCallback, user_data: gpointer): void <cimport,nodecl> end
global function g_file_replace_readwrite_finish(file: *GFile, res: *GAsyncResult, error: **GError): *GFileIOStream <cimport,nodecl> end
global function g_file_query_exists(file: *GFile, cancellable: *GCancellable): gboolean <cimport,nodecl> end
global function g_file_query_file_type(file: *GFile, flags: GFileQueryInfoFlags, cancellable: *GCancellable): GFileType <cimport,nodecl> end
global function g_file_query_info(file: *GFile, attributes: cstring, flags: GFileQueryInfoFlags, cancellable: *GCancellable, error: **GError): *GFileInfo <cimport,nodecl> end
global function g_file_query_info_async(file: *GFile, attributes: cstring, flags: GFileQueryInfoFlags, io_priority: cint, cancellable: *GCancellable, callback: GAsyncReadyCallback, user_data: gpointer): void <cimport,nodecl> end
global function g_file_query_info_finish(file: *GFile, res: *GAsyncResult, error: **GError): *GFileInfo <cimport,nodecl> end
global function g_file_query_filesystem_info(file: *GFile, attributes: cstring, cancellable: *GCancellable, error: **GError): *GFileInfo <cimport,nodecl> end
global function g_file_query_filesystem_info_async(file: *GFile, attributes: cstring, io_priority: cint, cancellable: *GCancellable, callback: GAsyncReadyCallback, user_data: gpointer): void <cimport,nodecl> end
global function g_file_query_filesystem_info_finish(file: *GFile, res: *GAsyncResult, error: **GError): *GFileInfo <cimport,nodecl> end
global function g_file_find_enclosing_mount(file: *GFile, cancellable: *GCancellable, error: **GError): *GMount <cimport,nodecl> end
global function g_file_find_enclosing_mount_async(file: *GFile, io_priority: cint, cancellable: *GCancellable, callback: GAsyncReadyCallback, user_data: gpointer): void <cimport,nodecl> end
global function g_file_find_enclosing_mount_finish(file: *GFile, res: *GAsyncResult, error: **GError): *GMount <cimport,nodecl> end
global function g_file_enumerate_children(file: *GFile, attributes: cstring, flags: GFileQueryInfoFlags, cancellable: *GCancellable, error: **GError): *GFileEnumerator <cimport,nodecl> end
global function g_file_enumerate_children_async(file: *GFile, attributes: cstring, flags: GFileQueryInfoFlags, io_priority: cint, cancellable: *GCancellable, callback: GAsyncReadyCallback, user_data: gpointer): void <cimport,nodecl> end
global function g_file_enumerate_children_finish(file: *GFile, res: *GAsyncResult, error: **GError): *GFileEnumerator <cimport,nodecl> end
global function g_file_set_display_name(file: *GFile, display_name: cstring, cancellable: *GCancellable, error: **GError): *GFile <cimport,nodecl> end
global function g_file_set_display_name_async(file: *GFile, display_name: cstring, io_priority: cint, cancellable: *GCancellable, callback: GAsyncReadyCallback, user_data: gpointer): void <cimport,nodecl> end
global function g_file_set_display_name_finish(file: *GFile, res: *GAsyncResult, error: **GError): *GFile <cimport,nodecl> end
global function g_file_delete(file: *GFile, cancellable: *GCancellable, error: **GError): gboolean <cimport,nodecl> end
global function g_file_delete_async(file: *GFile, io_priority: cint, cancellable: *GCancellable, callback: GAsyncReadyCallback, user_data: gpointer): void <cimport,nodecl> end
global function g_file_delete_finish(file: *GFile, result: *GAsyncResult, error: **GError): gboolean <cimport,nodecl> end
global function g_file_trash(file: *GFile, cancellable: *GCancellable, error: **GError): gboolean <cimport,nodecl> end
global function g_file_trash_async(file: *GFile, io_priority: cint, cancellable: *GCancellable, callback: GAsyncReadyCallback, user_data: gpointer): void <cimport,nodecl> end
global function g_file_trash_finish(file: *GFile, result: *GAsyncResult, error: **GError): gboolean <cimport,nodecl> end
global function g_file_copy(source: *GFile, destination: *GFile, flags: GFileCopyFlags, cancellable: *GCancellable, progress_callback: GFileProgressCallback, progress_callback_data: gpointer, error: **GError): gboolean <cimport,nodecl> end
global function g_file_copy_async(source: *GFile, destination: *GFile, flags: GFileCopyFlags, io_priority: cint, cancellable: *GCancellable, progress_callback: GFileProgressCallback, progress_callback_data: gpointer, callback: GAsyncReadyCallback, user_data: gpointer): void <cimport,nodecl> end
global function g_file_copy_finish(file: *GFile, res: *GAsyncResult, error: **GError): gboolean <cimport,nodecl> end
global function g_file_move(source: *GFile, destination: *GFile, flags: GFileCopyFlags, cancellable: *GCancellable, progress_callback: GFileProgressCallback, progress_callback_data: gpointer, error: **GError): gboolean <cimport,nodecl> end
global function g_file_make_directory(file: *GFile, cancellable: *GCancellable, error: **GError): gboolean <cimport,nodecl> end
global function g_file_make_directory_async(file: *GFile, io_priority: cint, cancellable: *GCancellable, callback: GAsyncReadyCallback, user_data: gpointer): void <cimport,nodecl> end
global function g_file_make_directory_finish(file: *GFile, result: *GAsyncResult, error: **GError): gboolean <cimport,nodecl> end
global function g_file_make_directory_with_parents(file: *GFile, cancellable: *GCancellable, error: **GError): gboolean <cimport,nodecl> end
global function g_file_make_symbolic_link(file: *GFile, symlink_value: cstring, cancellable: *GCancellable, error: **GError): gboolean <cimport,nodecl> end
global function g_file_query_settable_attributes(file: *GFile, cancellable: *GCancellable, error: **GError): *GFileAttributeInfoList <cimport,nodecl> end
global function g_file_query_writable_namespaces(file: *GFile, cancellable: *GCancellable, error: **GError): *GFileAttributeInfoList <cimport,nodecl> end
global function g_file_set_attribute(file: *GFile, attribute: cstring, type: GFileAttributeType, value_p: gpointer, flags: GFileQueryInfoFlags, cancellable: *GCancellable, error: **GError): gboolean <cimport,nodecl> end
global function g_file_set_attributes_from_info(file: *GFile, info: *GFileInfo, flags: GFileQueryInfoFlags, cancellable: *GCancellable, error: **GError): gboolean <cimport,nodecl> end
global function g_file_set_attributes_async(file: *GFile, info: *GFileInfo, flags: GFileQueryInfoFlags, io_priority: cint, cancellable: *GCancellable, callback: GAsyncReadyCallback, user_data: gpointer): void <cimport,nodecl> end
global function g_file_set_attributes_finish(file: *GFile, result: *GAsyncResult, info: **GFileInfo, error: **GError): gboolean <cimport,nodecl> end
global function g_file_set_attribute_string(file: *GFile, attribute: cstring, value: cstring, flags: GFileQueryInfoFlags, cancellable: *GCancellable, error: **GError): gboolean <cimport,nodecl> end
global function g_file_set_attribute_byte_string(file: *GFile, attribute: cstring, value: cstring, flags: GFileQueryInfoFlags, cancellable: *GCancellable, error: **GError): gboolean <cimport,nodecl> end
global function g_file_set_attribute_uint32(file: *GFile, attribute: cstring, value: guint32, flags: GFileQueryInfoFlags, cancellable: *GCancellable, error: **GError): gboolean <cimport,nodecl> end
global function g_file_set_attribute_int32(file: *GFile, attribute: cstring, value: gint32, flags: GFileQueryInfoFlags, cancellable: *GCancellable, error: **GError): gboolean <cimport,nodecl> end
global function g_file_set_attribute_uint64(file: *GFile, attribute: cstring, value: guint64, flags: GFileQueryInfoFlags, cancellable: *GCancellable, error: **GError): gboolean <cimport,nodecl> end
global function g_file_set_attribute_int64(file: *GFile, attribute: cstring, value: gint64, flags: GFileQueryInfoFlags, cancellable: *GCancellable, error: **GError): gboolean <cimport,nodecl> end
global function g_file_mount_enclosing_volume(location: *GFile, flags: GMountMountFlags, mount_operation: *GMountOperation, cancellable: *GCancellable, callback: GAsyncReadyCallback, user_data: gpointer): void <cimport,nodecl> end
global function g_file_mount_enclosing_volume_finish(location: *GFile, result: *GAsyncResult, error: **GError): gboolean <cimport,nodecl> end
global function g_file_mount_mountable(file: *GFile, flags: GMountMountFlags, mount_operation: *GMountOperation, cancellable: *GCancellable, callback: GAsyncReadyCallback, user_data: gpointer): void <cimport,nodecl> end
global function g_file_mount_mountable_finish(file: *GFile, result: *GAsyncResult, error: **GError): *GFile <cimport,nodecl> end
global function g_file_unmount_mountable(file: *GFile, flags: GMountUnmountFlags, cancellable: *GCancellable, callback: GAsyncReadyCallback, user_data: gpointer): void <cimport,nodecl> end
global function g_file_unmount_mountable_finish(file: *GFile, result: *GAsyncResult, error: **GError): gboolean <cimport,nodecl> end
global function g_file_unmount_mountable_with_operation(file: *GFile, flags: GMountUnmountFlags, mount_operation: *GMountOperation, cancellable: *GCancellable, callback: GAsyncReadyCallback, user_data: gpointer): void <cimport,nodecl> end
global function g_file_unmount_mountable_with_operation_finish(file: *GFile, result: *GAsyncResult, error: **GError): gboolean <cimport,nodecl> end
global function g_file_eject_mountable(file: *GFile, flags: GMountUnmountFlags, cancellable: *GCancellable, callback: GAsyncReadyCallback, user_data: gpointer): void <cimport,nodecl> end
global function g_file_eject_mountable_finish(file: *GFile, result: *GAsyncResult, error: **GError): gboolean <cimport,nodecl> end
global function g_file_eject_mountable_with_operation(file: *GFile, flags: GMountUnmountFlags, mount_operation: *GMountOperation, cancellable: *GCancellable, callback: GAsyncReadyCallback, user_data: gpointer): void <cimport,nodecl> end
global function g_file_eject_mountable_with_operation_finish(file: *GFile, result: *GAsyncResult, error: **GError): gboolean <cimport,nodecl> end
global function g_file_build_attribute_list_for_copy(file: *GFile, flags: GFileCopyFlags, cancellable: *GCancellable, error: **GError): cstring <cimport,nodecl> end
global function g_file_copy_attributes(source: *GFile, destination: *GFile, flags: GFileCopyFlags, cancellable: *GCancellable, error: **GError): gboolean <cimport,nodecl> end
global function g_file_monitor_directory(file: *GFile, flags: GFileMonitorFlags, cancellable: *GCancellable, error: **GError): *GFileMonitor <cimport,nodecl> end
global function g_file_monitor_file(file: *GFile, flags: GFileMonitorFlags, cancellable: *GCancellable, error: **GError): *GFileMonitor <cimport,nodecl> end
global function g_file_monitor(file: *GFile, flags: GFileMonitorFlags, cancellable: *GCancellable, error: **GError): *GFileMonitor <cimport,nodecl> end
global function g_file_measure_disk_usage(file: *GFile, flags: GFileMeasureFlags, cancellable: *GCancellable, progress_callback: GFileMeasureProgressCallback, progress_data: gpointer, disk_usage: *guint64, num_dirs: *guint64, num_files: *guint64, error: **GError): gboolean <cimport,nodecl> end
global function g_file_measure_disk_usage_async(file: *GFile, flags: GFileMeasureFlags, io_priority: gint, cancellable: *GCancellable, progress_callback: GFileMeasureProgressCallback, progress_data: gpointer, callback: GAsyncReadyCallback, user_data: gpointer): void <cimport,nodecl> end
global function g_file_measure_disk_usage_finish(file: *GFile, result: *GAsyncResult, disk_usage: *guint64, num_dirs: *guint64, num_files: *guint64, error: **GError): gboolean <cimport,nodecl> end
global function g_file_start_mountable(file: *GFile, flags: GDriveStartFlags, start_operation: *GMountOperation, cancellable: *GCancellable, callback: GAsyncReadyCallback, user_data: gpointer): void <cimport,nodecl> end
global function g_file_start_mountable_finish(file: *GFile, result: *GAsyncResult, error: **GError): gboolean <cimport,nodecl> end
global function g_file_stop_mountable(file: *GFile, flags: GMountUnmountFlags, mount_operation: *GMountOperation, cancellable: *GCancellable, callback: GAsyncReadyCallback, user_data: gpointer): void <cimport,nodecl> end
global function g_file_stop_mountable_finish(file: *GFile, result: *GAsyncResult, error: **GError): gboolean <cimport,nodecl> end
global function g_file_poll_mountable(file: *GFile, cancellable: *GCancellable, callback: GAsyncReadyCallback, user_data: gpointer): void <cimport,nodecl> end
global function g_file_poll_mountable_finish(file: *GFile, result: *GAsyncResult, error: **GError): gboolean <cimport,nodecl> end
global function g_file_query_default_handler(file: *GFile, cancellable: *GCancellable, error: **GError): *GAppInfo <cimport,nodecl> end
global function g_file_query_default_handler_async(file: *GFile, io_priority: cint, cancellable: *GCancellable, callback: GAsyncReadyCallback, user_data: gpointer): void <cimport,nodecl> end
global function g_file_query_default_handler_finish(file: *GFile, result: *GAsyncResult, error: **GError): *GAppInfo <cimport,nodecl> end
global function g_file_load_contents(file: *GFile, cancellable: *GCancellable, contents: *cstring, length: *gsize, etag_out: *cstring, error: **GError): gboolean <cimport,nodecl> end
global function g_file_load_contents_async(file: *GFile, cancellable: *GCancellable, callback: GAsyncReadyCallback, user_data: gpointer): void <cimport,nodecl> end
global function g_file_load_contents_finish(file: *GFile, res: *GAsyncResult, contents: *cstring, length: *gsize, etag_out: *cstring, error: **GError): gboolean <cimport,nodecl> end
global function g_file_load_partial_contents_async(file: *GFile, cancellable: *GCancellable, read_more_callback: GFileReadMoreCallback, callback: GAsyncReadyCallback, user_data: gpointer): void <cimport,nodecl> end
global function g_file_load_partial_contents_finish(file: *GFile, res: *GAsyncResult, contents: *cstring, length: *gsize, etag_out: *cstring, error: **GError): gboolean <cimport,nodecl> end
global function g_file_replace_contents(file: *GFile, contents: cstring, length: gsize, etag: cstring, make_backup: gboolean, flags: GFileCreateFlags, new_etag: *cstring, cancellable: *GCancellable, error: **GError): gboolean <cimport,nodecl> end
global function g_file_replace_contents_async(file: *GFile, contents: cstring, length: gsize, etag: cstring, make_backup: gboolean, flags: GFileCreateFlags, cancellable: *GCancellable, callback: GAsyncReadyCallback, user_data: gpointer): void <cimport,nodecl> end
global function g_file_replace_contents_bytes_async(file: *GFile, contents: *GBytes, etag: cstring, make_backup: gboolean, flags: GFileCreateFlags, cancellable: *GCancellable, callback: GAsyncReadyCallback, user_data: gpointer): void <cimport,nodecl> end
global function g_file_replace_contents_finish(file: *GFile, res: *GAsyncResult, new_etag: *cstring, error: **GError): gboolean <cimport,nodecl> end
global function g_file_supports_thread_contexts(file: *GFile): gboolean <cimport,nodecl> end
global function g_file_load_bytes(file: *GFile, cancellable: *GCancellable, etag_out: **gchar, error: **GError): *GBytes <cimport,nodecl> end
global function g_file_load_bytes_async(file: *GFile, cancellable: *GCancellable, callback: GAsyncReadyCallback, user_data: gpointer): void <cimport,nodecl> end
global function g_file_load_bytes_finish(file: *GFile, result: *GAsyncResult, etag_out: **gchar, error: **GError): *GBytes <cimport,nodecl> end
global function g_file_attribute_info_list_get_type(): GType <cimport,nodecl> end
global function g_file_attribute_info_list_new(): *GFileAttributeInfoList <cimport,nodecl> end
global function g_file_attribute_info_list_ref(list: *GFileAttributeInfoList): *GFileAttributeInfoList <cimport,nodecl> end
global function g_file_attribute_info_list_unref(list: *GFileAttributeInfoList): void <cimport,nodecl> end
global function g_file_attribute_info_list_dup(list: *GFileAttributeInfoList): *GFileAttributeInfoList <cimport,nodecl> end
global function g_file_attribute_info_list_lookup(list: *GFileAttributeInfoList, name: cstring): *GFileAttributeInfo <cimport,nodecl> end
global function g_file_attribute_info_list_add(list: *GFileAttributeInfoList, name: cstring, type: GFileAttributeType, flags: GFileAttributeInfoFlags): void <cimport,nodecl> end
global function g_file_enumerator_get_type(): GType <cimport,nodecl> end
global function g_file_enumerator_next_file(enumerator: *GFileEnumerator, cancellable: *GCancellable, error: **GError): *GFileInfo <cimport,nodecl> end
global function g_file_enumerator_close(enumerator: *GFileEnumerator, cancellable: *GCancellable, error: **GError): gboolean <cimport,nodecl> end
global function g_file_enumerator_next_files_async(enumerator: *GFileEnumerator, num_files: cint, io_priority: cint, cancellable: *GCancellable, callback: GAsyncReadyCallback, user_data: gpointer): void <cimport,nodecl> end
global function g_file_enumerator_next_files_finish(enumerator: *GFileEnumerator, result: *GAsyncResult, error: **GError): *GList <cimport,nodecl> end
global function g_file_enumerator_close_async(enumerator: *GFileEnumerator, io_priority: cint, cancellable: *GCancellable, callback: GAsyncReadyCallback, user_data: gpointer): void <cimport,nodecl> end
global function g_file_enumerator_close_finish(enumerator: *GFileEnumerator, result: *GAsyncResult, error: **GError): gboolean <cimport,nodecl> end
global function g_file_enumerator_is_closed(enumerator: *GFileEnumerator): gboolean <cimport,nodecl> end
global function g_file_enumerator_has_pending(enumerator: *GFileEnumerator): gboolean <cimport,nodecl> end
global function g_file_enumerator_set_pending(enumerator: *GFileEnumerator, pending: gboolean): void <cimport,nodecl> end
global function g_file_enumerator_get_container(enumerator: *GFileEnumerator): *GFile <cimport,nodecl> end
global function g_file_enumerator_get_child(enumerator: *GFileEnumerator, info: *GFileInfo): *GFile <cimport,nodecl> end
global function g_file_enumerator_iterate(direnum: *GFileEnumerator, out_info: **GFileInfo, out_child: **GFile, cancellable: *GCancellable, error: **GError): gboolean <cimport,nodecl> end
global function g_file_icon_get_type(): GType <cimport,nodecl> end
global function g_file_icon_new(file: *GFile): *GIcon <cimport,nodecl> end
global function g_file_icon_get_file(icon: *GFileIcon): *GFile <cimport,nodecl> end
global function g_file_info_get_type(): GType <cimport,nodecl> end
global function g_file_info_new(): *GFileInfo <cimport,nodecl> end
global function g_file_info_dup(other: *GFileInfo): *GFileInfo <cimport,nodecl> end
global function g_file_info_copy_into(src_info: *GFileInfo, dest_info: *GFileInfo): void <cimport,nodecl> end
global function g_file_info_has_attribute(info: *GFileInfo, attribute: cstring): gboolean <cimport,nodecl> end
global function g_file_info_has_namespace(info: *GFileInfo, name_space: cstring): gboolean <cimport,nodecl> end
global function g_file_info_list_attributes(info: *GFileInfo, name_space: cstring): *cstring <cimport,nodecl> end
global function g_file_info_get_attribute_data(info: *GFileInfo, attribute: cstring, type: *GFileAttributeType, value_pp: *gpointer, status: *GFileAttributeStatus): gboolean <cimport,nodecl> end
global function g_file_info_get_attribute_type(info: *GFileInfo, attribute: cstring): GFileAttributeType <cimport,nodecl> end
global function g_file_info_remove_attribute(info: *GFileInfo, attribute: cstring): void <cimport,nodecl> end
global function g_file_info_get_attribute_status(info: *GFileInfo, attribute: cstring): GFileAttributeStatus <cimport,nodecl> end
global function g_file_info_set_attribute_status(info: *GFileInfo, attribute: cstring, status: GFileAttributeStatus): gboolean <cimport,nodecl> end
global function g_file_info_get_attribute_as_string(info: *GFileInfo, attribute: cstring): cstring <cimport,nodecl> end
global function g_file_info_get_attribute_string(info: *GFileInfo, attribute: cstring): cstring <cimport,nodecl> end
global function g_file_info_get_attribute_byte_string(info: *GFileInfo, attribute: cstring): cstring <cimport,nodecl> end
global function g_file_info_get_attribute_boolean(info: *GFileInfo, attribute: cstring): gboolean <cimport,nodecl> end
global function g_file_info_get_attribute_uint32(info: *GFileInfo, attribute: cstring): guint32 <cimport,nodecl> end
global function g_file_info_get_attribute_int32(info: *GFileInfo, attribute: cstring): gint32 <cimport,nodecl> end
global function g_file_info_get_attribute_uint64(info: *GFileInfo, attribute: cstring): guint64 <cimport,nodecl> end
global function g_file_info_get_attribute_int64(info: *GFileInfo, attribute: cstring): gint64 <cimport,nodecl> end
global function g_file_info_get_attribute_object(info: *GFileInfo, attribute: cstring): *GObject <cimport,nodecl> end
global function g_file_info_get_attribute_stringv(info: *GFileInfo, attribute: cstring): *cstring <cimport,nodecl> end
global function g_file_info_set_attribute(info: *GFileInfo, attribute: cstring, type: GFileAttributeType, value_p: gpointer): void <cimport,nodecl> end
global function g_file_info_set_attribute_string(info: *GFileInfo, attribute: cstring, attr_value: cstring): void <cimport,nodecl> end
global function g_file_info_set_attribute_byte_string(info: *GFileInfo, attribute: cstring, attr_value: cstring): void <cimport,nodecl> end
global function g_file_info_set_attribute_boolean(info: *GFileInfo, attribute: cstring, attr_value: gboolean): void <cimport,nodecl> end
global function g_file_info_set_attribute_uint32(info: *GFileInfo, attribute: cstring, attr_value: guint32): void <cimport,nodecl> end
global function g_file_info_set_attribute_int32(info: *GFileInfo, attribute: cstring, attr_value: gint32): void <cimport,nodecl> end
global function g_file_info_set_attribute_uint64(info: *GFileInfo, attribute: cstring, attr_value: guint64): void <cimport,nodecl> end
global function g_file_info_set_attribute_int64(info: *GFileInfo, attribute: cstring, attr_value: gint64): void <cimport,nodecl> end
global function g_file_info_set_attribute_object(info: *GFileInfo, attribute: cstring, attr_value: *GObject): void <cimport,nodecl> end
global function g_file_info_set_attribute_stringv(info: *GFileInfo, attribute: cstring, attr_value: *cstring): void <cimport,nodecl> end
global function g_file_info_clear_status(info: *GFileInfo): void <cimport,nodecl> end
global function g_file_info_get_deletion_date(info: *GFileInfo): *GDateTime <cimport,nodecl> end
global function g_file_info_get_file_type(info: *GFileInfo): GFileType <cimport,nodecl> end
global function g_file_info_get_is_hidden(info: *GFileInfo): gboolean <cimport,nodecl> end
global function g_file_info_get_is_backup(info: *GFileInfo): gboolean <cimport,nodecl> end
global function g_file_info_get_is_symlink(info: *GFileInfo): gboolean <cimport,nodecl> end
global function g_file_info_get_name(info: *GFileInfo): cstring <cimport,nodecl> end
global function g_file_info_get_display_name(info: *GFileInfo): cstring <cimport,nodecl> end
global function g_file_info_get_edit_name(info: *GFileInfo): cstring <cimport,nodecl> end
global function g_file_info_get_icon(info: *GFileInfo): *GIcon <cimport,nodecl> end
global function g_file_info_get_symbolic_icon(info: *GFileInfo): *GIcon <cimport,nodecl> end
global function g_file_info_get_content_type(info: *GFileInfo): cstring <cimport,nodecl> end
global function g_file_info_get_size(info: *GFileInfo): goffset <cimport,nodecl> end
global function g_file_info_get_modification_time(info: *GFileInfo, result: *GTimeVal): void <cimport,nodecl> end
global function g_file_info_get_modification_date_time(info: *GFileInfo): *GDateTime <cimport,nodecl> end
global function g_file_info_get_access_date_time(info: *GFileInfo): *GDateTime <cimport,nodecl> end
global function g_file_info_get_creation_date_time(info: *GFileInfo): *GDateTime <cimport,nodecl> end
global function g_file_info_get_symlink_target(info: *GFileInfo): cstring <cimport,nodecl> end
global function g_file_info_get_etag(info: *GFileInfo): cstring <cimport,nodecl> end
global function g_file_info_get_sort_order(info: *GFileInfo): gint32 <cimport,nodecl> end
global function g_file_info_set_attribute_mask(info: *GFileInfo, mask: *GFileAttributeMatcher): void <cimport,nodecl> end
global function g_file_info_unset_attribute_mask(info: *GFileInfo): void <cimport,nodecl> end
global function g_file_info_set_file_type(info: *GFileInfo, type: GFileType): void <cimport,nodecl> end
global function g_file_info_set_is_hidden(info: *GFileInfo, is_hidden: gboolean): void <cimport,nodecl> end
global function g_file_info_set_is_symlink(info: *GFileInfo, is_symlink: gboolean): void <cimport,nodecl> end
global function g_file_info_set_name(info: *GFileInfo, name: cstring): void <cimport,nodecl> end
global function g_file_info_set_display_name(info: *GFileInfo, display_name: cstring): void <cimport,nodecl> end
global function g_file_info_set_edit_name(info: *GFileInfo, edit_name: cstring): void <cimport,nodecl> end
global function g_file_info_set_icon(info: *GFileInfo, icon: *GIcon): void <cimport,nodecl> end
global function g_file_info_set_symbolic_icon(info: *GFileInfo, icon: *GIcon): void <cimport,nodecl> end
global function g_file_info_set_content_type(info: *GFileInfo, content_type: cstring): void <cimport,nodecl> end
global function g_file_info_set_size(info: *GFileInfo, size: goffset): void <cimport,nodecl> end
global function g_file_info_set_modification_time(info: *GFileInfo, mtime: *GTimeVal): void <cimport,nodecl> end
global function g_file_info_set_modification_date_time(info: *GFileInfo, mtime: *GDateTime): void <cimport,nodecl> end
global function g_file_info_set_access_date_time(info: *GFileInfo, atime: *GDateTime): void <cimport,nodecl> end
global function g_file_info_set_creation_date_time(info: *GFileInfo, creation_time: *GDateTime): void <cimport,nodecl> end
global function g_file_info_set_symlink_target(info: *GFileInfo, symlink_target: cstring): void <cimport,nodecl> end
global function g_file_info_set_sort_order(info: *GFileInfo, sort_order: gint32): void <cimport,nodecl> end
global function g_file_attribute_matcher_get_type(): GType <cimport,nodecl> end
global function g_file_attribute_matcher_new(attributes: cstring): *GFileAttributeMatcher <cimport,nodecl> end
global function g_file_attribute_matcher_ref(matcher: *GFileAttributeMatcher): *GFileAttributeMatcher <cimport,nodecl> end
global function g_file_attribute_matcher_unref(matcher: *GFileAttributeMatcher): void <cimport,nodecl> end
global function g_file_attribute_matcher_subtract(matcher: *GFileAttributeMatcher, subtract: *GFileAttributeMatcher): *GFileAttributeMatcher <cimport,nodecl> end
global function g_file_attribute_matcher_matches(matcher: *GFileAttributeMatcher, attribute: cstring): gboolean <cimport,nodecl> end
global function g_file_attribute_matcher_matches_only(matcher: *GFileAttributeMatcher, attribute: cstring): gboolean <cimport,nodecl> end
global function g_file_attribute_matcher_enumerate_namespace(matcher: *GFileAttributeMatcher, ns: cstring): gboolean <cimport,nodecl> end
global function g_file_attribute_matcher_enumerate_next(matcher: *GFileAttributeMatcher): cstring <cimport,nodecl> end
global function g_file_attribute_matcher_to_string(matcher: *GFileAttributeMatcher): cstring <cimport,nodecl> end
global function g_file_input_stream_get_type(): GType <cimport,nodecl> end
global function g_file_input_stream_query_info(stream: *GFileInputStream, attributes: cstring, cancellable: *GCancellable, error: **GError): *GFileInfo <cimport,nodecl> end
global function g_file_input_stream_query_info_async(stream: *GFileInputStream, attributes: cstring, io_priority: cint, cancellable: *GCancellable, callback: GAsyncReadyCallback, user_data: gpointer): void <cimport,nodecl> end
global function g_file_input_stream_query_info_finish(stream: *GFileInputStream, result: *GAsyncResult, error: **GError): *GFileInfo <cimport,nodecl> end
global function g_io_error_quark(): GQuark <cimport,nodecl> end
global function g_io_error_from_errno(err_no: gint): GIOErrorEnum <cimport,nodecl> end
global function g_io_stream_get_type(): GType <cimport,nodecl> end
global function g_io_stream_get_input_stream(stream: *GIOStream): *GInputStream <cimport,nodecl> end
global function g_io_stream_get_output_stream(stream: *GIOStream): *GOutputStream <cimport,nodecl> end
global function g_io_stream_splice_async(stream1: *GIOStream, stream2: *GIOStream, flags: GIOStreamSpliceFlags, io_priority: cint, cancellable: *GCancellable, callback: GAsyncReadyCallback, user_data: gpointer): void <cimport,nodecl> end
global function g_io_stream_splice_finish(result: *GAsyncResult, error: **GError): gboolean <cimport,nodecl> end
global function g_io_stream_close(stream: *GIOStream, cancellable: *GCancellable, error: **GError): gboolean <cimport,nodecl> end
global function g_io_stream_close_async(stream: *GIOStream, io_priority: cint, cancellable: *GCancellable, callback: GAsyncReadyCallback, user_data: gpointer): void <cimport,nodecl> end
global function g_io_stream_close_finish(stream: *GIOStream, result: *GAsyncResult, error: **GError): gboolean <cimport,nodecl> end
global function g_io_stream_is_closed(stream: *GIOStream): gboolean <cimport,nodecl> end
global function g_io_stream_has_pending(stream: *GIOStream): gboolean <cimport,nodecl> end
global function g_io_stream_set_pending(stream: *GIOStream, error: **GError): gboolean <cimport,nodecl> end
global function g_io_stream_clear_pending(stream: *GIOStream): void <cimport,nodecl> end
global function g_file_io_stream_get_type(): GType <cimport,nodecl> end
global function g_file_io_stream_query_info(stream: *GFileIOStream, attributes: cstring, cancellable: *GCancellable, error: **GError): *GFileInfo <cimport,nodecl> end
global function g_file_io_stream_query_info_async(stream: *GFileIOStream, attributes: cstring, io_priority: cint, cancellable: *GCancellable, callback: GAsyncReadyCallback, user_data: gpointer): void <cimport,nodecl> end
global function g_file_io_stream_query_info_finish(stream: *GFileIOStream, result: *GAsyncResult, error: **GError): *GFileInfo <cimport,nodecl> end
global function g_file_io_stream_get_etag(stream: *GFileIOStream): cstring <cimport,nodecl> end
global function g_file_monitor_get_type(): GType <cimport,nodecl> end
global function g_file_monitor_cancel(monitor: *GFileMonitor): gboolean <cimport,nodecl> end
global function g_file_monitor_is_cancelled(monitor: *GFileMonitor): gboolean <cimport,nodecl> end
global function g_file_monitor_set_rate_limit(monitor: *GFileMonitor, limit_msecs: gint): void <cimport,nodecl> end
global function g_file_monitor_emit_event(monitor: *GFileMonitor, child: *GFile, other_file: *GFile, event_type: GFileMonitorEvent): void <cimport,nodecl> end
global function g_filename_completer_get_type(): GType <cimport,nodecl> end
global function g_filename_completer_new(): *GFilenameCompleter <cimport,nodecl> end
global function g_filename_completer_get_completion_suffix(completer: *GFilenameCompleter, initial_text: cstring): cstring <cimport,nodecl> end
global function g_filename_completer_get_completions(completer: *GFilenameCompleter, initial_text: cstring): *cstring <cimport,nodecl> end
global function g_filename_completer_set_dirs_only(completer: *GFilenameCompleter, dirs_only: gboolean): void <cimport,nodecl> end
global function g_file_output_stream_get_type(): GType <cimport,nodecl> end
global function g_file_output_stream_query_info(stream: *GFileOutputStream, attributes: cstring, cancellable: *GCancellable, error: **GError): *GFileInfo <cimport,nodecl> end
global function g_file_output_stream_query_info_async(stream: *GFileOutputStream, attributes: cstring, io_priority: cint, cancellable: *GCancellable, callback: GAsyncReadyCallback, user_data: gpointer): void <cimport,nodecl> end
global function g_file_output_stream_query_info_finish(stream: *GFileOutputStream, result: *GAsyncResult, error: **GError): *GFileInfo <cimport,nodecl> end
global function g_file_output_stream_get_etag(stream: *GFileOutputStream): cstring <cimport,nodecl> end
global function g_inet_address_get_type(): GType <cimport,nodecl> end
global function g_inet_address_new_from_string(string: *gchar): *GInetAddress <cimport,nodecl> end
global function g_inet_address_new_from_bytes(bytes: *guint8, family: GSocketFamily): *GInetAddress <cimport,nodecl> end
global function g_inet_address_new_loopback(family: GSocketFamily): *GInetAddress <cimport,nodecl> end
global function g_inet_address_new_any(family: GSocketFamily): *GInetAddress <cimport,nodecl> end
global function g_inet_address_equal(address: *GInetAddress, other_address: *GInetAddress): gboolean <cimport,nodecl> end
global function g_inet_address_to_string(address: *GInetAddress): *gchar <cimport,nodecl> end
global function g_inet_address_to_bytes(address: *GInetAddress): *guint8 <cimport,nodecl> end
global function g_inet_address_get_native_size(address: *GInetAddress): gsize <cimport,nodecl> end
global function g_inet_address_get_family(address: *GInetAddress): GSocketFamily <cimport,nodecl> end
global function g_inet_address_get_is_any(address: *GInetAddress): gboolean <cimport,nodecl> end
global function g_inet_address_get_is_loopback(address: *GInetAddress): gboolean <cimport,nodecl> end
global function g_inet_address_get_is_link_local(address: *GInetAddress): gboolean <cimport,nodecl> end
global function g_inet_address_get_is_site_local(address: *GInetAddress): gboolean <cimport,nodecl> end
global function g_inet_address_get_is_multicast(address: *GInetAddress): gboolean <cimport,nodecl> end
global function g_inet_address_get_is_mc_global(address: *GInetAddress): gboolean <cimport,nodecl> end
global function g_inet_address_get_is_mc_link_local(address: *GInetAddress): gboolean <cimport,nodecl> end
global function g_inet_address_get_is_mc_node_local(address: *GInetAddress): gboolean <cimport,nodecl> end
global function g_inet_address_get_is_mc_org_local(address: *GInetAddress): gboolean <cimport,nodecl> end
global function g_inet_address_get_is_mc_site_local(address: *GInetAddress): gboolean <cimport,nodecl> end
global function g_inet_address_mask_get_type(): GType <cimport,nodecl> end
global function g_inet_address_mask_new(addr: *GInetAddress, length: guint, error: **GError): *GInetAddressMask <cimport,nodecl> end
global function g_inet_address_mask_new_from_string(mask_string: *gchar, error: **GError): *GInetAddressMask <cimport,nodecl> end
global function g_inet_address_mask_to_string(mask: *GInetAddressMask): *gchar <cimport,nodecl> end
global function g_inet_address_mask_get_family(mask: *GInetAddressMask): GSocketFamily <cimport,nodecl> end
global function g_inet_address_mask_get_address(mask: *GInetAddressMask): *GInetAddress <cimport,nodecl> end
global function g_inet_address_mask_get_length(mask: *GInetAddressMask): guint <cimport,nodecl> end
global function g_inet_address_mask_matches(mask: *GInetAddressMask, address: *GInetAddress): gboolean <cimport,nodecl> end
global function g_inet_address_mask_equal(mask: *GInetAddressMask, mask2: *GInetAddressMask): gboolean <cimport,nodecl> end
global function g_socket_address_get_type(): GType <cimport,nodecl> end
global function g_socket_address_get_family(address: *GSocketAddress): GSocketFamily <cimport,nodecl> end
global function g_socket_address_new_from_native(native: gpointer, len: gsize): *GSocketAddress <cimport,nodecl> end
global function g_socket_address_to_native(address: *GSocketAddress, dest: gpointer, destlen: gsize, error: **GError): gboolean <cimport,nodecl> end
global function g_socket_address_get_native_size(address: *GSocketAddress): gssize <cimport,nodecl> end
global function g_inet_socket_address_get_type(): GType <cimport,nodecl> end
global function g_inet_socket_address_new(address: *GInetAddress, port: guint16): *GSocketAddress <cimport,nodecl> end
global function g_inet_socket_address_new_from_string(address: cstring, port: guint): *GSocketAddress <cimport,nodecl> end
global function g_inet_socket_address_get_address(address: *GInetSocketAddress): *GInetAddress <cimport,nodecl> end
global function g_inet_socket_address_get_port(address: *GInetSocketAddress): guint16 <cimport,nodecl> end
global function g_inet_socket_address_get_flowinfo(address: *GInetSocketAddress): guint32 <cimport,nodecl> end
global function g_inet_socket_address_get_scope_id(address: *GInetSocketAddress): guint32 <cimport,nodecl> end
global function g_app_info_create_flags_get_type(): GType <cimport,nodecl> end
global function g_converter_flags_get_type(): GType <cimport,nodecl> end
global function g_converter_result_get_type(): GType <cimport,nodecl> end
global function g_data_stream_byte_order_get_type(): GType <cimport,nodecl> end
global function g_data_stream_newline_type_get_type(): GType <cimport,nodecl> end
global function g_file_attribute_type_get_type(): GType <cimport,nodecl> end
global function g_file_attribute_info_flags_get_type(): GType <cimport,nodecl> end
global function g_file_attribute_status_get_type(): GType <cimport,nodecl> end
global function g_file_query_info_flags_get_type(): GType <cimport,nodecl> end
global function g_file_create_flags_get_type(): GType <cimport,nodecl> end
global function g_file_measure_flags_get_type(): GType <cimport,nodecl> end
global function g_mount_mount_flags_get_type(): GType <cimport,nodecl> end
global function g_mount_unmount_flags_get_type(): GType <cimport,nodecl> end
global function g_drive_start_flags_get_type(): GType <cimport,nodecl> end
global function g_drive_start_stop_type_get_type(): GType <cimport,nodecl> end
global function g_file_copy_flags_get_type(): GType <cimport,nodecl> end
global function g_file_monitor_flags_get_type(): GType <cimport,nodecl> end
global function g_file_type_get_type(): GType <cimport,nodecl> end
global function g_filesystem_preview_type_get_type(): GType <cimport,nodecl> end
global function g_file_monitor_event_get_type(): GType <cimport,nodecl> end
global function g_io_error_enum_get_type(): GType <cimport,nodecl> end
global function g_ask_password_flags_get_type(): GType <cimport,nodecl> end
global function g_password_save_get_type(): GType <cimport,nodecl> end
global function g_mount_operation_result_get_type(): GType <cimport,nodecl> end
global function g_output_stream_splice_flags_get_type(): GType <cimport,nodecl> end
global function g_io_stream_splice_flags_get_type(): GType <cimport,nodecl> end
global function g_emblem_origin_get_type(): GType <cimport,nodecl> end
global function g_resolver_error_get_type(): GType <cimport,nodecl> end
global function g_resolver_record_type_get_type(): GType <cimport,nodecl> end
global function g_resource_error_get_type(): GType <cimport,nodecl> end
global function g_resource_flags_get_type(): GType <cimport,nodecl> end
global function g_resource_lookup_flags_get_type(): GType <cimport,nodecl> end
global function g_socket_family_get_type(): GType <cimport,nodecl> end
global function g_socket_type_get_type(): GType <cimport,nodecl> end
global function g_socket_msg_flags_get_type(): GType <cimport,nodecl> end
global function g_socket_protocol_get_type(): GType <cimport,nodecl> end
global function g_zlib_compressor_format_get_type(): GType <cimport,nodecl> end
global function g_unix_socket_address_type_get_type(): GType <cimport,nodecl> end
global function g_bus_type_get_type(): GType <cimport,nodecl> end
global function g_bus_name_owner_flags_get_type(): GType <cimport,nodecl> end
global function g_bus_name_watcher_flags_get_type(): GType <cimport,nodecl> end
global function g_dbus_proxy_flags_get_type(): GType <cimport,nodecl> end
global function g_dbus_error_get_type(): GType <cimport,nodecl> end
global function g_dbus_connection_flags_get_type(): GType <cimport,nodecl> end
global function g_dbus_capability_flags_get_type(): GType <cimport,nodecl> end
global function g_dbus_call_flags_get_type(): GType <cimport,nodecl> end
global function g_dbus_message_type_get_type(): GType <cimport,nodecl> end
global function g_dbus_message_flags_get_type(): GType <cimport,nodecl> end
global function g_dbus_message_header_field_get_type(): GType <cimport,nodecl> end
global function g_dbus_property_info_flags_get_type(): GType <cimport,nodecl> end
global function g_dbus_subtree_flags_get_type(): GType <cimport,nodecl> end
global function g_dbus_server_flags_get_type(): GType <cimport,nodecl> end
global function g_dbus_signal_flags_get_type(): GType <cimport,nodecl> end
global function g_dbus_send_message_flags_get_type(): GType <cimport,nodecl> end
global function g_credentials_type_get_type(): GType <cimport,nodecl> end
global function g_dbus_message_byte_order_get_type(): GType <cimport,nodecl> end
global function g_application_flags_get_type(): GType <cimport,nodecl> end
global function g_tls_error_get_type(): GType <cimport,nodecl> end
global function g_tls_certificate_flags_get_type(): GType <cimport,nodecl> end
global function g_tls_authentication_mode_get_type(): GType <cimport,nodecl> end
global function g_tls_channel_binding_type_get_type(): GType <cimport,nodecl> end
global function g_tls_channel_binding_error_get_type(): GType <cimport,nodecl> end
global function g_tls_rehandshake_mode_get_type(): GType <cimport,nodecl> end
global function g_tls_password_flags_get_type(): GType <cimport,nodecl> end
global function g_tls_interaction_result_get_type(): GType <cimport,nodecl> end
global function g_dbus_interface_skeleton_flags_get_type(): GType <cimport,nodecl> end
global function g_dbus_object_manager_client_flags_get_type(): GType <cimport,nodecl> end
global function g_tls_database_verify_flags_get_type(): GType <cimport,nodecl> end
global function g_tls_database_lookup_flags_get_type(): GType <cimport,nodecl> end
global function g_tls_certificate_request_flags_get_type(): GType <cimport,nodecl> end
global function g_tls_protocol_version_get_type(): GType <cimport,nodecl> end
global function g_io_module_scope_flags_get_type(): GType <cimport,nodecl> end
global function g_socket_client_event_get_type(): GType <cimport,nodecl> end
global function g_socket_listener_event_get_type(): GType <cimport,nodecl> end
global function g_test_dbus_flags_get_type(): GType <cimport,nodecl> end
global function g_subprocess_flags_get_type(): GType <cimport,nodecl> end
global function g_notification_priority_get_type(): GType <cimport,nodecl> end
global function g_network_connectivity_get_type(): GType <cimport,nodecl> end
global function g_pollable_return_get_type(): GType <cimport,nodecl> end
global function g_memory_monitor_warning_level_get_type(): GType <cimport,nodecl> end
global function g_resolver_name_lookup_flags_get_type(): GType <cimport,nodecl> end
global function g_settings_bind_flags_get_type(): GType <cimport,nodecl> end
global function g_module_error_quark(): GQuark <cimport,nodecl> end
global function g_module_supported(): gboolean <cimport,nodecl> end
global function g_module_open(file_name: *gchar, flags: GModuleFlags): *GModule <cimport,nodecl> end
global function g_module_open_full(file_name: *gchar, flags: GModuleFlags, error: **GError): *GModule <cimport,nodecl> end
global function g_module_close(module: *GModule): gboolean <cimport,nodecl> end
global function g_module_make_resident(module: *GModule): void <cimport,nodecl> end
global function g_module_error(): *gchar <cimport,nodecl> end
global function g_module_symbol(module: *GModule, symbol_name: *gchar, symbol: *gpointer): gboolean <cimport,nodecl> end
global function g_module_name(module: *GModule): *gchar <cimport,nodecl> end
global function g_module_build_path(directory: *gchar, module_name: *gchar): *gchar <cimport,nodecl> end
global function g_io_module_scope_new(flags: GIOModuleScopeFlags): *GIOModuleScope <cimport,nodecl> end
global function g_io_module_scope_free(scope: *GIOModuleScope): void <cimport,nodecl> end
global function g_io_module_scope_block(scope: *GIOModuleScope, basename: *gchar): void <cimport,nodecl> end
global function g_io_module_get_type(): GType <cimport,nodecl> end
global function g_io_module_new(filename: *gchar): *GIOModule <cimport,nodecl> end
global function g_io_modules_scan_all_in_directory(dirname: cstring): void <cimport,nodecl> end
global function g_io_modules_load_all_in_directory(dirname: *gchar): *GList <cimport,nodecl> end
global function g_io_modules_scan_all_in_directory_with_scope(dirname: *gchar, scope: *GIOModuleScope): void <cimport,nodecl> end
global function g_io_modules_load_all_in_directory_with_scope(dirname: *gchar, scope: *GIOModuleScope): *GList <cimport,nodecl> end
global function g_io_extension_point_register(name: cstring): *GIOExtensionPoint <cimport,nodecl> end
global function g_io_extension_point_lookup(name: cstring): *GIOExtensionPoint <cimport,nodecl> end
global function g_io_extension_point_set_required_type(extension_point: *GIOExtensionPoint, type: GType): void <cimport,nodecl> end
global function g_io_extension_point_get_required_type(extension_point: *GIOExtensionPoint): GType <cimport,nodecl> end
global function g_io_extension_point_get_extensions(extension_point: *GIOExtensionPoint): *GList <cimport,nodecl> end
global function g_io_extension_point_get_extension_by_name(extension_point: *GIOExtensionPoint, name: cstring): *GIOExtension <cimport,nodecl> end
global function g_io_extension_point_implement(extension_point_name: cstring, type: GType, extension_name: cstring, priority: gint): *GIOExtension <cimport,nodecl> end
global function g_io_extension_get_type(extension: *GIOExtension): GType <cimport,nodecl> end
global function g_io_extension_get_name(extension: *GIOExtension): cstring <cimport,nodecl> end
global function g_io_extension_get_priority(extension: *GIOExtension): gint <cimport,nodecl> end
global function g_io_extension_ref_class(extension: *GIOExtension): *GTypeClass <cimport,nodecl> end
global function g_io_module_load(module: *GIOModule): void <cimport,nodecl> end
global function g_io_module_unload(module: *GIOModule): void <cimport,nodecl> end
global function g_io_module_query(): *cstring <cimport,nodecl> end
global function g_io_scheduler_push_job(job_func: GIOSchedulerJobFunc, user_data: gpointer, notify: GDestroyNotify, io_priority: gint, cancellable: *GCancellable): void <cimport,nodecl> end
global function g_io_scheduler_cancel_all_jobs(): void <cimport,nodecl> end
global function g_io_scheduler_job_send_to_mainloop(job: *GIOSchedulerJob, func: GSourceFunc, user_data: gpointer, notify: GDestroyNotify): gboolean <cimport,nodecl> end
global function g_io_scheduler_job_send_to_mainloop_async(job: *GIOSchedulerJob, func: GSourceFunc, user_data: gpointer, notify: GDestroyNotify): void <cimport,nodecl> end
global function g_list_model_get_type(): GType <cimport,nodecl> end
global function glib_autoptr_clear_GListModel(_ptr: *GListModel): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GListModel(_ptr: **GListModel): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GListModel(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GListModel(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GListModel(_q: **GQueue): void <cimport,nodecl> end
global function G_LIST_MODEL(ptr: gpointer): *GListModel <cimport,nodecl> end
global function G_IS_LIST_MODEL(ptr: gpointer): gboolean <cimport,nodecl> end
global function G_LIST_MODEL_GET_IFACE(ptr: gpointer): *GListModelInterface <cimport,nodecl> end
global function g_list_model_get_item_type(list: *GListModel): GType <cimport,nodecl> end
global function g_list_model_get_n_items(list: *GListModel): guint <cimport,nodecl> end
global function g_list_model_get_item(list: *GListModel, position: guint): gpointer <cimport,nodecl> end
global function g_list_model_get_object(list: *GListModel, position: guint): *GObject <cimport,nodecl> end
global function g_list_model_items_changed(list: *GListModel, position: guint, removed: guint, added: guint): void <cimport,nodecl> end
global function g_list_store_get_type(): GType <cimport,nodecl> end
global function glib_autoptr_clear_GListStore(_ptr: *GListStore): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GListStore(_ptr: **GListStore): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GListStore(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GListStore(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GListStore(_q: **GQueue): void <cimport,nodecl> end
global function glib_autoptr_clear_GListStoreClass(_ptr: *GListStoreClass): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GListStoreClass(_ptr: **GListStoreClass): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GListStoreClass(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GListStoreClass(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GListStoreClass(_q: **GQueue): void <cimport,nodecl> end
global function G_LIST_STORE(ptr: gpointer): *GListStore <cimport,nodecl> end
global function G_IS_LIST_STORE(ptr: gpointer): gboolean <cimport,nodecl> end
global function g_list_store_new(item_type: GType): *GListStore <cimport,nodecl> end
global function g_list_store_insert(store: *GListStore, position: guint, item: gpointer): void <cimport,nodecl> end
global function g_list_store_insert_sorted(store: *GListStore, item: gpointer, compare_func: GCompareDataFunc, user_data: gpointer): guint <cimport,nodecl> end
global function g_list_store_sort(store: *GListStore, compare_func: GCompareDataFunc, user_data: gpointer): void <cimport,nodecl> end
global function g_list_store_append(store: *GListStore, item: gpointer): void <cimport,nodecl> end
global function g_list_store_remove(store: *GListStore, position: guint): void <cimport,nodecl> end
global function g_list_store_remove_all(store: *GListStore): void <cimport,nodecl> end
global function g_list_store_splice(store: *GListStore, position: guint, n_removals: guint, additions: *gpointer, n_additions: guint): void <cimport,nodecl> end
global function g_list_store_find(store: *GListStore, item: gpointer, position: *guint): gboolean <cimport,nodecl> end
global function g_list_store_find_with_equal_func(store: *GListStore, item: gpointer, equal_func: GEqualFunc, position: *guint): gboolean <cimport,nodecl> end
global function g_loadable_icon_get_type(): GType <cimport,nodecl> end
global function g_loadable_icon_load(icon: *GLoadableIcon, size: cint, type: *cstring, cancellable: *GCancellable, error: **GError): *GInputStream <cimport,nodecl> end
global function g_loadable_icon_load_async(icon: *GLoadableIcon, size: cint, cancellable: *GCancellable, callback: GAsyncReadyCallback, user_data: gpointer): void <cimport,nodecl> end
global function g_loadable_icon_load_finish(icon: *GLoadableIcon, res: *GAsyncResult, type: *cstring, error: **GError): *GInputStream <cimport,nodecl> end
global function g_memory_input_stream_get_type(): GType <cimport,nodecl> end
global function g_memory_input_stream_new(): *GInputStream <cimport,nodecl> end
global function g_memory_input_stream_new_from_data(data: pointer, len: gssize, destroy: GDestroyNotify): *GInputStream <cimport,nodecl> end
global function g_memory_input_stream_new_from_bytes(bytes: *GBytes): *GInputStream <cimport,nodecl> end
global function g_memory_input_stream_add_data(stream: *GMemoryInputStream, data: pointer, len: gssize, destroy: GDestroyNotify): void <cimport,nodecl> end
global function g_memory_input_stream_add_bytes(stream: *GMemoryInputStream, bytes: *GBytes): void <cimport,nodecl> end
global function g_memory_monitor_get_type(): GType <cimport,nodecl> end
global function glib_autoptr_clear_GMemoryMonitor(_ptr: *GMemoryMonitor): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GMemoryMonitor(_ptr: **GMemoryMonitor): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GMemoryMonitor(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GMemoryMonitor(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GMemoryMonitor(_q: **GQueue): void <cimport,nodecl> end
global function g_memory_monitor(ptr: gpointer): *GMemoryMonitor <cimport,nodecl> end
global function g_IS_memory_monitor(ptr: gpointer): gboolean <cimport,nodecl> end
global function g_memory_monitor_GET_IFACE(ptr: gpointer): *GMemoryMonitorInterface <cimport,nodecl> end
global function g_memory_monitor_dup_default(): *GMemoryMonitor <cimport,nodecl> end
global function g_memory_output_stream_get_type(): GType <cimport,nodecl> end
global function g_memory_output_stream_new(data: gpointer, size: gsize, realloc_function: GReallocFunc, destroy_function: GDestroyNotify): *GOutputStream <cimport,nodecl> end
global function g_memory_output_stream_new_resizable(): *GOutputStream <cimport,nodecl> end
global function g_memory_output_stream_get_data(ostream: *GMemoryOutputStream): gpointer <cimport,nodecl> end
global function g_memory_output_stream_get_size(ostream: *GMemoryOutputStream): gsize <cimport,nodecl> end
global function g_memory_output_stream_get_data_size(ostream: *GMemoryOutputStream): gsize <cimport,nodecl> end
global function g_memory_output_stream_steal_data(ostream: *GMemoryOutputStream): gpointer <cimport,nodecl> end
global function g_memory_output_stream_steal_as_bytes(ostream: *GMemoryOutputStream): *GBytes <cimport,nodecl> end
global function g_menu_model_get_type(): GType <cimport,nodecl> end
global function g_menu_model_is_mutable(model: *GMenuModel): gboolean <cimport,nodecl> end
global function g_menu_model_get_n_items(model: *GMenuModel): gint <cimport,nodecl> end
global function g_menu_model_iterate_item_attributes(model: *GMenuModel, item_index: gint): *GMenuAttributeIter <cimport,nodecl> end
global function g_menu_model_get_item_attribute_value(model: *GMenuModel, item_index: gint, attribute: *gchar, expected_type: *GVariantType): *GVariant <cimport,nodecl> end
global function g_menu_model_get_item_attribute(model: *GMenuModel, item_index: gint, attribute: *gchar, format_string: *gchar, ...: cvarargs): gboolean <cimport,nodecl> end
global function g_menu_model_iterate_item_links(model: *GMenuModel, item_index: gint): *GMenuLinkIter <cimport,nodecl> end
global function g_menu_model_get_item_link(model: *GMenuModel, item_index: gint, link: *gchar): *GMenuModel <cimport,nodecl> end
global function g_menu_model_items_changed(model: *GMenuModel, position: gint, removed: gint, added: gint): void <cimport,nodecl> end
global function g_menu_attribute_iter_get_type(): GType <cimport,nodecl> end
global function g_menu_attribute_iter_get_next(iter: *GMenuAttributeIter, out_name: **gchar, value: **GVariant): gboolean <cimport,nodecl> end
global function g_menu_attribute_iter_next(iter: *GMenuAttributeIter): gboolean <cimport,nodecl> end
global function g_menu_attribute_iter_get_name(iter: *GMenuAttributeIter): *gchar <cimport,nodecl> end
global function g_menu_attribute_iter_get_value(iter: *GMenuAttributeIter): *GVariant <cimport,nodecl> end
global function g_menu_link_iter_get_type(): GType <cimport,nodecl> end
global function g_menu_link_iter_get_next(iter: *GMenuLinkIter, out_link: **gchar, value: **GMenuModel): gboolean <cimport,nodecl> end
global function g_menu_link_iter_next(iter: *GMenuLinkIter): gboolean <cimport,nodecl> end
global function g_menu_link_iter_get_name(iter: *GMenuLinkIter): *gchar <cimport,nodecl> end
global function g_menu_link_iter_get_value(iter: *GMenuLinkIter): *GMenuModel <cimport,nodecl> end
global function g_menu_get_type(): GType <cimport,nodecl> end
global function g_menu_new(): *GMenu <cimport,nodecl> end
global function g_menu_freeze(menu: *GMenu): void <cimport,nodecl> end
global function g_menu_insert_item(menu: *GMenu, position: gint, item: *GMenuItem): void <cimport,nodecl> end
global function g_menu_prepend_item(menu: *GMenu, item: *GMenuItem): void <cimport,nodecl> end
global function g_menu_append_item(menu: *GMenu, item: *GMenuItem): void <cimport,nodecl> end
global function g_menu_remove(menu: *GMenu, position: gint): void <cimport,nodecl> end
global function g_menu_remove_all(menu: *GMenu): void <cimport,nodecl> end
global function g_menu_insert(menu: *GMenu, position: gint, label: *gchar, detailed_action: *gchar): void <cimport,nodecl> end
global function g_menu_prepend(menu: *GMenu, label: *gchar, detailed_action: *gchar): void <cimport,nodecl> end
global function g_menu_append(menu: *GMenu, label: *gchar, detailed_action: *gchar): void <cimport,nodecl> end
global function g_menu_insert_section(menu: *GMenu, position: gint, label: *gchar, section: *GMenuModel): void <cimport,nodecl> end
global function g_menu_prepend_section(menu: *GMenu, label: *gchar, section: *GMenuModel): void <cimport,nodecl> end
global function g_menu_append_section(menu: *GMenu, label: *gchar, section: *GMenuModel): void <cimport,nodecl> end
global function g_menu_insert_submenu(menu: *GMenu, position: gint, label: *gchar, submenu: *GMenuModel): void <cimport,nodecl> end
global function g_menu_prepend_submenu(menu: *GMenu, label: *gchar, submenu: *GMenuModel): void <cimport,nodecl> end
global function g_menu_append_submenu(menu: *GMenu, label: *gchar, submenu: *GMenuModel): void <cimport,nodecl> end
global function g_menu_item_get_type(): GType <cimport,nodecl> end
global function g_menu_item_new(label: *gchar, detailed_action: *gchar): *GMenuItem <cimport,nodecl> end
global function g_menu_item_new_from_model(model: *GMenuModel, item_index: gint): *GMenuItem <cimport,nodecl> end
global function g_menu_item_new_submenu(label: *gchar, submenu: *GMenuModel): *GMenuItem <cimport,nodecl> end
global function g_menu_item_new_section(label: *gchar, section: *GMenuModel): *GMenuItem <cimport,nodecl> end
global function g_menu_item_get_attribute_value(menu_item: *GMenuItem, attribute: *gchar, expected_type: *GVariantType): *GVariant <cimport,nodecl> end
global function g_menu_item_get_attribute(menu_item: *GMenuItem, attribute: *gchar, format_string: *gchar, ...: cvarargs): gboolean <cimport,nodecl> end
global function g_menu_item_get_link(menu_item: *GMenuItem, link: *gchar): *GMenuModel <cimport,nodecl> end
global function g_menu_item_set_attribute_value(menu_item: *GMenuItem, attribute: *gchar, value: *GVariant): void <cimport,nodecl> end
global function g_menu_item_set_attribute(menu_item: *GMenuItem, attribute: *gchar, format_string: *gchar, ...: cvarargs): void <cimport,nodecl> end
global function g_menu_item_set_link(menu_item: *GMenuItem, link: *gchar, model: *GMenuModel): void <cimport,nodecl> end
global function g_menu_item_set_label(menu_item: *GMenuItem, label: *gchar): void <cimport,nodecl> end
global function g_menu_item_set_submenu(menu_item: *GMenuItem, submenu: *GMenuModel): void <cimport,nodecl> end
global function g_menu_item_set_section(menu_item: *GMenuItem, section: *GMenuModel): void <cimport,nodecl> end
global function g_menu_item_set_action_and_target_value(menu_item: *GMenuItem, action: *gchar, target_value: *GVariant): void <cimport,nodecl> end
global function g_menu_item_set_action_and_target(menu_item: *GMenuItem, action: *gchar, format_string: *gchar, ...: cvarargs): void <cimport,nodecl> end
global function g_menu_item_set_detailed_action(menu_item: *GMenuItem, detailed_action: *gchar): void <cimport,nodecl> end
global function g_menu_item_set_icon(menu_item: *GMenuItem, icon: *GIcon): void <cimport,nodecl> end
global function g_dbus_connection_export_menu_model(connection: *GDBusConnection, object_path: *gchar, menu: *GMenuModel, error: **GError): guint <cimport,nodecl> end
global function g_dbus_connection_unexport_menu_model(connection: *GDBusConnection, export_id: guint): void <cimport,nodecl> end
global function g_mount_get_type(): GType <cimport,nodecl> end
global function g_mount_get_root(mount: *GMount): *GFile <cimport,nodecl> end
global function g_mount_get_default_location(mount: *GMount): *GFile <cimport,nodecl> end
global function g_mount_get_name(mount: *GMount): cstring <cimport,nodecl> end
global function g_mount_get_icon(mount: *GMount): *GIcon <cimport,nodecl> end
global function g_mount_get_symbolic_icon(mount: *GMount): *GIcon <cimport,nodecl> end
global function g_mount_get_uuid(mount: *GMount): cstring <cimport,nodecl> end
global function g_mount_get_volume(mount: *GMount): *GVolume <cimport,nodecl> end
global function g_mount_get_drive(mount: *GMount): *GDrive <cimport,nodecl> end
global function g_mount_can_unmount(mount: *GMount): gboolean <cimport,nodecl> end
global function g_mount_can_eject(mount: *GMount): gboolean <cimport,nodecl> end
global function g_mount_unmount(mount: *GMount, flags: GMountUnmountFlags, cancellable: *GCancellable, callback: GAsyncReadyCallback, user_data: gpointer): void <cimport,nodecl> end
global function g_mount_unmount_finish(mount: *GMount, result: *GAsyncResult, error: **GError): gboolean <cimport,nodecl> end
global function g_mount_eject(mount: *GMount, flags: GMountUnmountFlags, cancellable: *GCancellable, callback: GAsyncReadyCallback, user_data: gpointer): void <cimport,nodecl> end
global function g_mount_eject_finish(mount: *GMount, result: *GAsyncResult, error: **GError): gboolean <cimport,nodecl> end
global function g_mount_remount(mount: *GMount, flags: GMountMountFlags, mount_operation: *GMountOperation, cancellable: *GCancellable, callback: GAsyncReadyCallback, user_data: gpointer): void <cimport,nodecl> end
global function g_mount_remount_finish(mount: *GMount, result: *GAsyncResult, error: **GError): gboolean <cimport,nodecl> end
global function g_mount_guess_content_type(mount: *GMount, force_rescan: gboolean, cancellable: *GCancellable, callback: GAsyncReadyCallback, user_data: gpointer): void <cimport,nodecl> end
global function g_mount_guess_content_type_finish(mount: *GMount, result: *GAsyncResult, error: **GError): **gchar <cimport,nodecl> end
global function g_mount_guess_content_type_sync(mount: *GMount, force_rescan: gboolean, cancellable: *GCancellable, error: **GError): **gchar <cimport,nodecl> end
global function g_mount_is_shadowed(mount: *GMount): gboolean <cimport,nodecl> end
global function g_mount_shadow(mount: *GMount): void <cimport,nodecl> end
global function g_mount_unshadow(mount: *GMount): void <cimport,nodecl> end
global function g_mount_unmount_with_operation(mount: *GMount, flags: GMountUnmountFlags, mount_operation: *GMountOperation, cancellable: *GCancellable, callback: GAsyncReadyCallback, user_data: gpointer): void <cimport,nodecl> end
global function g_mount_unmount_with_operation_finish(mount: *GMount, result: *GAsyncResult, error: **GError): gboolean <cimport,nodecl> end
global function g_mount_eject_with_operation(mount: *GMount, flags: GMountUnmountFlags, mount_operation: *GMountOperation, cancellable: *GCancellable, callback: GAsyncReadyCallback, user_data: gpointer): void <cimport,nodecl> end
global function g_mount_eject_with_operation_finish(mount: *GMount, result: *GAsyncResult, error: **GError): gboolean <cimport,nodecl> end
global function g_mount_get_sort_key(mount: *GMount): *gchar <cimport,nodecl> end
global function g_mount_operation_get_type(): GType <cimport,nodecl> end
global function g_mount_operation_new(): *GMountOperation <cimport,nodecl> end
global function g_mount_operation_get_username(op: *GMountOperation): cstring <cimport,nodecl> end
global function g_mount_operation_set_username(op: *GMountOperation, username: cstring): void <cimport,nodecl> end
global function g_mount_operation_get_password(op: *GMountOperation): cstring <cimport,nodecl> end
global function g_mount_operation_set_password(op: *GMountOperation, password: cstring): void <cimport,nodecl> end
global function g_mount_operation_get_anonymous(op: *GMountOperation): gboolean <cimport,nodecl> end
global function g_mount_operation_set_anonymous(op: *GMountOperation, anonymous: gboolean): void <cimport,nodecl> end
global function g_mount_operation_get_domain(op: *GMountOperation): cstring <cimport,nodecl> end
global function g_mount_operation_set_domain(op: *GMountOperation, domain: cstring): void <cimport,nodecl> end
global function g_mount_operation_get_password_save(op: *GMountOperation): GPasswordSave <cimport,nodecl> end
global function g_mount_operation_set_password_save(op: *GMountOperation, save: GPasswordSave): void <cimport,nodecl> end
global function g_mount_operation_get_choice(op: *GMountOperation): cint <cimport,nodecl> end
global function g_mount_operation_set_choice(op: *GMountOperation, choice: cint): void <cimport,nodecl> end
global function g_mount_operation_reply(op: *GMountOperation, result: GMountOperationResult): void <cimport,nodecl> end
global function g_mount_operation_get_is_tcrypt_hidden_volume(op: *GMountOperation): gboolean <cimport,nodecl> end
global function g_mount_operation_set_is_tcrypt_hidden_volume(op: *GMountOperation, hidden_volume: gboolean): void <cimport,nodecl> end
global function g_mount_operation_get_is_tcrypt_system_volume(op: *GMountOperation): gboolean <cimport,nodecl> end
global function g_mount_operation_set_is_tcrypt_system_volume(op: *GMountOperation, system_volume: gboolean): void <cimport,nodecl> end
global function g_mount_operation_get_pim(op: *GMountOperation): guint <cimport,nodecl> end
global function g_mount_operation_set_pim(op: *GMountOperation, pim: guint): void <cimport,nodecl> end
global function g_native_socket_address_get_type(): GType <cimport,nodecl> end
global function g_native_socket_address_new(native: gpointer, len: gsize): *GSocketAddress <cimport,nodecl> end
global function g_volume_monitor_get_type(): GType <cimport,nodecl> end
global function g_volume_monitor_get(): *GVolumeMonitor <cimport,nodecl> end
global function g_volume_monitor_get_connected_drives(volume_monitor: *GVolumeMonitor): *GList <cimport,nodecl> end
global function g_volume_monitor_get_volumes(volume_monitor: *GVolumeMonitor): *GList <cimport,nodecl> end
global function g_volume_monitor_get_mounts(volume_monitor: *GVolumeMonitor): *GList <cimport,nodecl> end
global function g_volume_monitor_get_volume_for_uuid(volume_monitor: *GVolumeMonitor, uuid: cstring): *GVolume <cimport,nodecl> end
global function g_volume_monitor_get_mount_for_uuid(volume_monitor: *GVolumeMonitor, uuid: cstring): *GMount <cimport,nodecl> end
global function g_volume_monitor_adopt_orphan_mount(mount: *GMount): *GVolume <cimport,nodecl> end
global function g_native_volume_monitor_get_type(): GType <cimport,nodecl> end
global function g_network_address_get_type(): GType <cimport,nodecl> end
global function g_network_address_new(hostname: *gchar, port: guint16): *GSocketConnectable <cimport,nodecl> end
global function g_network_address_new_loopback(port: guint16): *GSocketConnectable <cimport,nodecl> end
global function g_network_address_parse(host_and_port: *gchar, default_port: guint16, error: **GError): *GSocketConnectable <cimport,nodecl> end
global function g_network_address_parse_uri(uri: *gchar, default_port: guint16, error: **GError): *GSocketConnectable <cimport,nodecl> end
global function g_network_address_get_hostname(addr: *GNetworkAddress): *gchar <cimport,nodecl> end
global function g_network_address_get_port(addr: *GNetworkAddress): guint16 <cimport,nodecl> end
global function g_network_address_get_scheme(addr: *GNetworkAddress): *gchar <cimport,nodecl> end
global function g_network_monitor_get_type(): GType <cimport,nodecl> end
global function g_network_monitor_get_default(): *GNetworkMonitor <cimport,nodecl> end
global function g_network_monitor_get_network_available(monitor: *GNetworkMonitor): gboolean <cimport,nodecl> end
global function g_network_monitor_get_network_metered(monitor: *GNetworkMonitor): gboolean <cimport,nodecl> end
global function g_network_monitor_get_connectivity(monitor: *GNetworkMonitor): GNetworkConnectivity <cimport,nodecl> end
global function g_network_monitor_can_reach(monitor: *GNetworkMonitor, connectable: *GSocketConnectable, cancellable: *GCancellable, error: **GError): gboolean <cimport,nodecl> end
global function g_network_monitor_can_reach_async(monitor: *GNetworkMonitor, connectable: *GSocketConnectable, cancellable: *GCancellable, callback: GAsyncReadyCallback, user_data: gpointer): void <cimport,nodecl> end
global function g_network_monitor_can_reach_finish(monitor: *GNetworkMonitor, result: *GAsyncResult, error: **GError): gboolean <cimport,nodecl> end
global function g_network_service_get_type(): GType <cimport,nodecl> end
global function g_network_service_new(service: *gchar, protocol: *gchar, domain: *gchar): *GSocketConnectable <cimport,nodecl> end
global function g_network_service_get_service(srv: *GNetworkService): *gchar <cimport,nodecl> end
global function g_network_service_get_protocol(srv: *GNetworkService): *gchar <cimport,nodecl> end
global function g_network_service_get_domain(srv: *GNetworkService): *gchar <cimport,nodecl> end
global function g_network_service_get_scheme(srv: *GNetworkService): *gchar <cimport,nodecl> end
global function g_network_service_set_scheme(srv: *GNetworkService, scheme: *gchar): void <cimport,nodecl> end
global function g_notification_get_type(): GType <cimport,nodecl> end
global function g_notification_new(title: *gchar): *GNotification <cimport,nodecl> end
global function g_notification_set_title(notification: *GNotification, title: *gchar): void <cimport,nodecl> end
global function g_notification_set_body(notification: *GNotification, body: *gchar): void <cimport,nodecl> end
global function g_notification_set_icon(notification: *GNotification, icon: *GIcon): void <cimport,nodecl> end
global function g_notification_set_urgent(notification: *GNotification, urgent: gboolean): void <cimport,nodecl> end
global function g_notification_set_priority(notification: *GNotification, priority: GNotificationPriority): void <cimport,nodecl> end
global function g_notification_set_category(notification: *GNotification, category: *gchar): void <cimport,nodecl> end
global function g_notification_add_button(notification: *GNotification, label: *gchar, detailed_action: *gchar): void <cimport,nodecl> end
global function g_notification_add_button_with_target(notification: *GNotification, label: *gchar, action: *gchar, target_format: *gchar, ...: cvarargs): void <cimport,nodecl> end
global function g_notification_add_button_with_target_value(notification: *GNotification, label: *gchar, action: *gchar, target: *GVariant): void <cimport,nodecl> end
global function g_notification_set_default_action(notification: *GNotification, detailed_action: *gchar): void <cimport,nodecl> end
global function g_notification_set_default_action_and_target(notification: *GNotification, action: *gchar, target_format: *gchar, ...: cvarargs): void <cimport,nodecl> end
global function g_notification_set_default_action_and_target_value(notification: *GNotification, action: *gchar, target: *GVariant): void <cimport,nodecl> end
global function g_permission_get_type(): GType <cimport,nodecl> end
global function g_permission_acquire(permission: *GPermission, cancellable: *GCancellable, error: **GError): gboolean <cimport,nodecl> end
global function g_permission_acquire_async(permission: *GPermission, cancellable: *GCancellable, callback: GAsyncReadyCallback, user_data: gpointer): void <cimport,nodecl> end
global function g_permission_acquire_finish(permission: *GPermission, result: *GAsyncResult, error: **GError): gboolean <cimport,nodecl> end
global function g_permission_release(permission: *GPermission, cancellable: *GCancellable, error: **GError): gboolean <cimport,nodecl> end
global function g_permission_release_async(permission: *GPermission, cancellable: *GCancellable, callback: GAsyncReadyCallback, user_data: gpointer): void <cimport,nodecl> end
global function g_permission_release_finish(permission: *GPermission, result: *GAsyncResult, error: **GError): gboolean <cimport,nodecl> end
global function g_permission_get_allowed(permission: *GPermission): gboolean <cimport,nodecl> end
global function g_permission_get_can_acquire(permission: *GPermission): gboolean <cimport,nodecl> end
global function g_permission_get_can_release(permission: *GPermission): gboolean <cimport,nodecl> end
global function g_permission_impl_update(permission: *GPermission, allowed: gboolean, can_acquire: gboolean, can_release: gboolean): void <cimport,nodecl> end
global function g_pollable_input_stream_get_type(): GType <cimport,nodecl> end
global function g_pollable_input_stream_can_poll(stream: *GPollableInputStream): gboolean <cimport,nodecl> end
global function g_pollable_input_stream_is_readable(stream: *GPollableInputStream): gboolean <cimport,nodecl> end
global function g_pollable_input_stream_create_source(stream: *GPollableInputStream, cancellable: *GCancellable): *GSource <cimport,nodecl> end
global function g_pollable_input_stream_read_nonblocking(stream: *GPollableInputStream, buffer: pointer, count: gsize, cancellable: *GCancellable, error: **GError): gssize <cimport,nodecl> end
global function g_pollable_output_stream_get_type(): GType <cimport,nodecl> end
global function g_pollable_output_stream_can_poll(stream: *GPollableOutputStream): gboolean <cimport,nodecl> end
global function g_pollable_output_stream_is_writable(stream: *GPollableOutputStream): gboolean <cimport,nodecl> end
global function g_pollable_output_stream_create_source(stream: *GPollableOutputStream, cancellable: *GCancellable): *GSource <cimport,nodecl> end
global function g_pollable_output_stream_write_nonblocking(stream: *GPollableOutputStream, buffer: pointer, count: gsize, cancellable: *GCancellable, error: **GError): gssize <cimport,nodecl> end
global function g_pollable_output_stream_writev_nonblocking(stream: *GPollableOutputStream, vectors: *GOutputVector, n_vectors: gsize, bytes_written: *gsize, cancellable: *GCancellable, error: **GError): GPollableReturn <cimport,nodecl> end
global function g_pollable_source_new(pollable_stream: *GObject): *GSource <cimport,nodecl> end
global function g_pollable_source_new_full(pollable_stream: gpointer, child_source: *GSource, cancellable: *GCancellable): *GSource <cimport,nodecl> end
global function g_pollable_stream_read(stream: *GInputStream, buffer: pointer, count: gsize, blocking: gboolean, cancellable: *GCancellable, error: **GError): gssize <cimport,nodecl> end
global function g_pollable_stream_write(stream: *GOutputStream, buffer: pointer, count: gsize, blocking: gboolean, cancellable: *GCancellable, error: **GError): gssize <cimport,nodecl> end
global function g_pollable_stream_write_all(stream: *GOutputStream, buffer: pointer, count: gsize, blocking: gboolean, bytes_written: *gsize, cancellable: *GCancellable, error: **GError): gboolean <cimport,nodecl> end
global function g_power_profile_monitor_get_type(): GType <cimport,nodecl> end
global function glib_autoptr_clear_GPowerProfileMonitor(_ptr: *GPowerProfileMonitor): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GPowerProfileMonitor(_ptr: **GPowerProfileMonitor): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GPowerProfileMonitor(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GPowerProfileMonitor(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GPowerProfileMonitor(_q: **GQueue): void <cimport,nodecl> end
global function g_power_profile_monitor(ptr: gpointer): *GPowerProfileMonitor <cimport,nodecl> end
global function g_IS_power_profile_monitor(ptr: gpointer): gboolean <cimport,nodecl> end
global function g_power_profile_monitor_GET_IFACE(ptr: gpointer): *GPowerProfileMonitorInterface <cimport,nodecl> end
global function g_power_profile_monitor_dup_default(): *GPowerProfileMonitor <cimport,nodecl> end
global function g_power_profile_monitor_get_power_saver_enabled(monitor: *GPowerProfileMonitor): gboolean <cimport,nodecl> end
global function g_property_action_get_type(): GType <cimport,nodecl> end
global function g_property_action_new(name: *gchar, object: gpointer, property_name: *gchar): *GPropertyAction <cimport,nodecl> end
global function g_proxy_get_type(): GType <cimport,nodecl> end
global function g_proxy_get_default_for_protocol(protocol: *gchar): *GProxy <cimport,nodecl> end
global function g_proxy_connect(proxy: *GProxy, connection: *GIOStream, proxy_address: *GProxyAddress, cancellable: *GCancellable, error: **GError): *GIOStream <cimport,nodecl> end
global function g_proxy_connect_async(proxy: *GProxy, connection: *GIOStream, proxy_address: *GProxyAddress, cancellable: *GCancellable, callback: GAsyncReadyCallback, user_data: gpointer): void <cimport,nodecl> end
global function g_proxy_connect_finish(proxy: *GProxy, result: *GAsyncResult, error: **GError): *GIOStream <cimport,nodecl> end
global function g_proxy_supports_hostname(proxy: *GProxy): gboolean <cimport,nodecl> end
global function g_proxy_address_get_type(): GType <cimport,nodecl> end
global function g_proxy_address_new(inetaddr: *GInetAddress, port: guint16, protocol: *gchar, dest_hostname: *gchar, dest_port: guint16, username: *gchar, password: *gchar): *GSocketAddress <cimport,nodecl> end
global function g_proxy_address_get_protocol(proxy: *GProxyAddress): *gchar <cimport,nodecl> end
global function g_proxy_address_get_destination_protocol(proxy: *GProxyAddress): *gchar <cimport,nodecl> end
global function g_proxy_address_get_destination_hostname(proxy: *GProxyAddress): *gchar <cimport,nodecl> end
global function g_proxy_address_get_destination_port(proxy: *GProxyAddress): guint16 <cimport,nodecl> end
global function g_proxy_address_get_username(proxy: *GProxyAddress): *gchar <cimport,nodecl> end
global function g_proxy_address_get_password(proxy: *GProxyAddress): *gchar <cimport,nodecl> end
global function g_proxy_address_get_uri(proxy: *GProxyAddress): *gchar <cimport,nodecl> end
global function g_socket_address_enumerator_get_type(): GType <cimport,nodecl> end
global function g_socket_address_enumerator_next(enumerator: *GSocketAddressEnumerator, cancellable: *GCancellable, error: **GError): *GSocketAddress <cimport,nodecl> end
global function g_socket_address_enumerator_next_async(enumerator: *GSocketAddressEnumerator, cancellable: *GCancellable, callback: GAsyncReadyCallback, user_data: gpointer): void <cimport,nodecl> end
global function g_socket_address_enumerator_next_finish(enumerator: *GSocketAddressEnumerator, result: *GAsyncResult, error: **GError): *GSocketAddress <cimport,nodecl> end
global function g_proxy_address_enumerator_get_type(): GType <cimport,nodecl> end
global function g_proxy_resolver_get_type(): GType <cimport,nodecl> end
global function g_proxy_resolver_get_default(): *GProxyResolver <cimport,nodecl> end
global function g_proxy_resolver_is_supported(resolver: *GProxyResolver): gboolean <cimport,nodecl> end
global function g_proxy_resolver_lookup(resolver: *GProxyResolver, uri: *gchar, cancellable: *GCancellable, error: **GError): **gchar <cimport,nodecl> end
global function g_proxy_resolver_lookup_async(resolver: *GProxyResolver, uri: *gchar, cancellable: *GCancellable, callback: GAsyncReadyCallback, user_data: gpointer): void <cimport,nodecl> end
global function g_proxy_resolver_lookup_finish(resolver: *GProxyResolver, result: *GAsyncResult, error: **GError): **gchar <cimport,nodecl> end
global function g_remote_action_group_get_type(): GType <cimport,nodecl> end
global function g_remote_action_group_activate_action_full(remote: *GRemoteActionGroup, action_name: *gchar, parameter: *GVariant, platform_data: *GVariant): void <cimport,nodecl> end
global function g_remote_action_group_change_action_state_full(remote: *GRemoteActionGroup, action_name: *gchar, value: *GVariant, platform_data: *GVariant): void <cimport,nodecl> end
global function g_resolver_get_type(): GType <cimport,nodecl> end
global function g_resolver_get_default(): *GResolver <cimport,nodecl> end
global function g_resolver_set_default(resolver: *GResolver): void <cimport,nodecl> end
global function g_resolver_lookup_by_name(resolver: *GResolver, hostname: *gchar, cancellable: *GCancellable, error: **GError): *GList <cimport,nodecl> end
global function g_resolver_lookup_by_name_async(resolver: *GResolver, hostname: *gchar, cancellable: *GCancellable, callback: GAsyncReadyCallback, user_data: gpointer): void <cimport,nodecl> end
global function g_resolver_lookup_by_name_finish(resolver: *GResolver, result: *GAsyncResult, error: **GError): *GList <cimport,nodecl> end
global function g_resolver_lookup_by_name_with_flags_async(resolver: *GResolver, hostname: *gchar, flags: GResolverNameLookupFlags, cancellable: *GCancellable, callback: GAsyncReadyCallback, user_data: gpointer): void <cimport,nodecl> end
global function g_resolver_lookup_by_name_with_flags_finish(resolver: *GResolver, result: *GAsyncResult, error: **GError): *GList <cimport,nodecl> end
global function g_resolver_lookup_by_name_with_flags(resolver: *GResolver, hostname: *gchar, flags: GResolverNameLookupFlags, cancellable: *GCancellable, error: **GError): *GList <cimport,nodecl> end
global function g_resolver_free_addresses(addresses: *GList): void <cimport,nodecl> end
global function g_resolver_lookup_by_address(resolver: *GResolver, address: *GInetAddress, cancellable: *GCancellable, error: **GError): *gchar <cimport,nodecl> end
global function g_resolver_lookup_by_address_async(resolver: *GResolver, address: *GInetAddress, cancellable: *GCancellable, callback: GAsyncReadyCallback, user_data: gpointer): void <cimport,nodecl> end
global function g_resolver_lookup_by_address_finish(resolver: *GResolver, result: *GAsyncResult, error: **GError): *gchar <cimport,nodecl> end
global function g_resolver_lookup_service(resolver: *GResolver, service: *gchar, protocol: *gchar, domain: *gchar, cancellable: *GCancellable, error: **GError): *GList <cimport,nodecl> end
global function g_resolver_lookup_service_async(resolver: *GResolver, service: *gchar, protocol: *gchar, domain: *gchar, cancellable: *GCancellable, callback: GAsyncReadyCallback, user_data: gpointer): void <cimport,nodecl> end
global function g_resolver_lookup_service_finish(resolver: *GResolver, result: *GAsyncResult, error: **GError): *GList <cimport,nodecl> end
global function g_resolver_lookup_records(resolver: *GResolver, rrname: *gchar, record_type: GResolverRecordType, cancellable: *GCancellable, error: **GError): *GList <cimport,nodecl> end
global function g_resolver_lookup_records_async(resolver: *GResolver, rrname: *gchar, record_type: GResolverRecordType, cancellable: *GCancellable, callback: GAsyncReadyCallback, user_data: gpointer): void <cimport,nodecl> end
global function g_resolver_lookup_records_finish(resolver: *GResolver, result: *GAsyncResult, error: **GError): *GList <cimport,nodecl> end
global function g_resolver_free_targets(targets: *GList): void <cimport,nodecl> end
global function g_resolver_error_quark(): GQuark <cimport,nodecl> end
global function g_resource_error_quark(): GQuark <cimport,nodecl> end
global function g_resource_get_type(): GType <cimport,nodecl> end
global function g_resource_new_from_data(data: *GBytes, error: **GError): *GResource <cimport,nodecl> end
global function g_resource_ref(resource: *GResource): *GResource <cimport,nodecl> end
global function g_resource_unref(resource: *GResource): void <cimport,nodecl> end
global function g_resource_load(filename: *gchar, error: **GError): *GResource <cimport,nodecl> end
global function g_resource_open_stream(resource: *GResource, path: cstring, lookup_flags: GResourceLookupFlags, error: **GError): *GInputStream <cimport,nodecl> end
global function g_resource_lookup_data(resource: *GResource, path: cstring, lookup_flags: GResourceLookupFlags, error: **GError): *GBytes <cimport,nodecl> end
global function g_resource_enumerate_children(resource: *GResource, path: cstring, lookup_flags: GResourceLookupFlags, error: **GError): *cstring <cimport,nodecl> end
global function g_resource_get_info(resource: *GResource, path: cstring, lookup_flags: GResourceLookupFlags, size: *gsize, flags: *guint32, error: **GError): gboolean <cimport,nodecl> end
global function g_resources_register(resource: *GResource): void <cimport,nodecl> end
global function g_resources_unregister(resource: *GResource): void <cimport,nodecl> end
global function g_resources_open_stream(path: cstring, lookup_flags: GResourceLookupFlags, error: **GError): *GInputStream <cimport,nodecl> end
global function g_resources_lookup_data(path: cstring, lookup_flags: GResourceLookupFlags, error: **GError): *GBytes <cimport,nodecl> end
global function g_resources_enumerate_children(path: cstring, lookup_flags: GResourceLookupFlags, error: **GError): *cstring <cimport,nodecl> end
global function g_resources_get_info(path: cstring, lookup_flags: GResourceLookupFlags, size: *gsize, flags: *guint32, error: **GError): gboolean <cimport,nodecl> end
global function g_static_resource_init(static_resource: *GStaticResource): void <cimport,nodecl> end
global function g_static_resource_fini(static_resource: *GStaticResource): void <cimport,nodecl> end
global function g_static_resource_get_resource(static_resource: *GStaticResource): *GResource <cimport,nodecl> end
global function g_seekable_get_type(): GType <cimport,nodecl> end
global function g_seekable_tell(seekable: *GSeekable): goffset <cimport,nodecl> end
global function g_seekable_can_seek(seekable: *GSeekable): gboolean <cimport,nodecl> end
global function g_seekable_seek(seekable: *GSeekable, offset: goffset, type: GSeekType, cancellable: *GCancellable, error: **GError): gboolean <cimport,nodecl> end
global function g_seekable_can_truncate(seekable: *GSeekable): gboolean <cimport,nodecl> end
global function g_seekable_truncate(seekable: *GSeekable, offset: goffset, cancellable: *GCancellable, error: **GError): gboolean <cimport,nodecl> end
global function g_settings_schema_source_get_type(): GType <cimport,nodecl> end
global function g_settings_schema_source_get_default(): *GSettingsSchemaSource <cimport,nodecl> end
global function g_settings_schema_source_ref(source: *GSettingsSchemaSource): *GSettingsSchemaSource <cimport,nodecl> end
global function g_settings_schema_source_unref(source: *GSettingsSchemaSource): void <cimport,nodecl> end
global function g_settings_schema_source_new_from_directory(directory: *gchar, parent: *GSettingsSchemaSource, trusted: gboolean, error: **GError): *GSettingsSchemaSource <cimport,nodecl> end
global function g_settings_schema_source_lookup(source: *GSettingsSchemaSource, schema_id: *gchar, recursive: gboolean): *GSettingsSchema <cimport,nodecl> end
global function g_settings_schema_source_list_schemas(source: *GSettingsSchemaSource, recursive: gboolean, non_relocatable: ***gchar, relocatable: ***gchar): void <cimport,nodecl> end
global function g_settings_schema_get_type(): GType <cimport,nodecl> end
global function g_settings_schema_ref(schema: *GSettingsSchema): *GSettingsSchema <cimport,nodecl> end
global function g_settings_schema_unref(schema: *GSettingsSchema): void <cimport,nodecl> end
global function g_settings_schema_get_id(schema: *GSettingsSchema): *gchar <cimport,nodecl> end
global function g_settings_schema_get_path(schema: *GSettingsSchema): *gchar <cimport,nodecl> end
global function g_settings_schema_get_key(schema: *GSettingsSchema, name: *gchar): *GSettingsSchemaKey <cimport,nodecl> end
global function g_settings_schema_has_key(schema: *GSettingsSchema, name: *gchar): gboolean <cimport,nodecl> end
global function g_settings_schema_list_keys(schema: *GSettingsSchema): **gchar <cimport,nodecl> end
global function g_settings_schema_list_children(schema: *GSettingsSchema): **gchar <cimport,nodecl> end
global function g_settings_schema_key_get_type(): GType <cimport,nodecl> end
global function g_settings_schema_key_ref(key: *GSettingsSchemaKey): *GSettingsSchemaKey <cimport,nodecl> end
global function g_settings_schema_key_unref(key: *GSettingsSchemaKey): void <cimport,nodecl> end
global function g_settings_schema_key_get_value_type(key: *GSettingsSchemaKey): *GVariantType <cimport,nodecl> end
global function g_settings_schema_key_get_default_value(key: *GSettingsSchemaKey): *GVariant <cimport,nodecl> end
global function g_settings_schema_key_get_range(key: *GSettingsSchemaKey): *GVariant <cimport,nodecl> end
global function g_settings_schema_key_range_check(key: *GSettingsSchemaKey, value: *GVariant): gboolean <cimport,nodecl> end
global function g_settings_schema_key_get_name(key: *GSettingsSchemaKey): *gchar <cimport,nodecl> end
global function g_settings_schema_key_get_summary(key: *GSettingsSchemaKey): *gchar <cimport,nodecl> end
global function g_settings_schema_key_get_description(key: *GSettingsSchemaKey): *gchar <cimport,nodecl> end
global function g_settings_get_type(): GType <cimport,nodecl> end
global function g_settings_list_schemas(): **gchar <cimport,nodecl> end
global function g_settings_list_relocatable_schemas(): **gchar <cimport,nodecl> end
global function g_settings_new(schema_id: *gchar): *GSettings <cimport,nodecl> end
global function g_settings_new_with_path(schema_id: *gchar, path: *gchar): *GSettings <cimport,nodecl> end
global function g_settings_new_with_backend(schema_id: *gchar, backend: *GSettingsBackend): *GSettings <cimport,nodecl> end
global function g_settings_new_with_backend_and_path(schema_id: *gchar, backend: *GSettingsBackend, path: *gchar): *GSettings <cimport,nodecl> end
global function g_settings_new_full(schema: *GSettingsSchema, backend: *GSettingsBackend, path: *gchar): *GSettings <cimport,nodecl> end
global function g_settings_list_children(settings: *GSettings): **gchar <cimport,nodecl> end
global function g_settings_list_keys(settings: *GSettings): **gchar <cimport,nodecl> end
global function g_settings_get_range(settings: *GSettings, key: *gchar): *GVariant <cimport,nodecl> end
global function g_settings_range_check(settings: *GSettings, key: *gchar, value: *GVariant): gboolean <cimport,nodecl> end
global function g_settings_set_value(settings: *GSettings, key: *gchar, value: *GVariant): gboolean <cimport,nodecl> end
global function g_settings_get_value(settings: *GSettings, key: *gchar): *GVariant <cimport,nodecl> end
global function g_settings_get_user_value(settings: *GSettings, key: *gchar): *GVariant <cimport,nodecl> end
global function g_settings_get_default_value(settings: *GSettings, key: *gchar): *GVariant <cimport,nodecl> end
global function g_settings_set(settings: *GSettings, key: *gchar, format: *gchar, ...: cvarargs): gboolean <cimport,nodecl> end
global function g_settings_get(settings: *GSettings, key: *gchar, format: *gchar, ...: cvarargs): void <cimport,nodecl> end
global function g_settings_reset(settings: *GSettings, key: *gchar): void <cimport,nodecl> end
global function g_settings_get_int(settings: *GSettings, key: *gchar): gint <cimport,nodecl> end
global function g_settings_set_int(settings: *GSettings, key: *gchar, value: gint): gboolean <cimport,nodecl> end
global function g_settings_get_int64(settings: *GSettings, key: *gchar): gint64 <cimport,nodecl> end
global function g_settings_set_int64(settings: *GSettings, key: *gchar, value: gint64): gboolean <cimport,nodecl> end
global function g_settings_get_uint(settings: *GSettings, key: *gchar): guint <cimport,nodecl> end
global function g_settings_set_uint(settings: *GSettings, key: *gchar, value: guint): gboolean <cimport,nodecl> end
global function g_settings_get_uint64(settings: *GSettings, key: *gchar): guint64 <cimport,nodecl> end
global function g_settings_set_uint64(settings: *GSettings, key: *gchar, value: guint64): gboolean <cimport,nodecl> end
global function g_settings_get_string(settings: *GSettings, key: *gchar): *gchar <cimport,nodecl> end
global function g_settings_set_string(settings: *GSettings, key: *gchar, value: *gchar): gboolean <cimport,nodecl> end
global function g_settings_get_boolean(settings: *GSettings, key: *gchar): gboolean <cimport,nodecl> end
global function g_settings_set_boolean(settings: *GSettings, key: *gchar, value: gboolean): gboolean <cimport,nodecl> end
global function g_settings_get_double(settings: *GSettings, key: *gchar): gdouble <cimport,nodecl> end
global function g_settings_set_double(settings: *GSettings, key: *gchar, value: gdouble): gboolean <cimport,nodecl> end
global function g_settings_get_strv(settings: *GSettings, key: *gchar): **gchar <cimport,nodecl> end
global function g_settings_set_strv(settings: *GSettings, key: *gchar, value: **gchar): gboolean <cimport,nodecl> end
global function g_settings_get_enum(settings: *GSettings, key: *gchar): gint <cimport,nodecl> end
global function g_settings_set_enum(settings: *GSettings, key: *gchar, value: gint): gboolean <cimport,nodecl> end
global function g_settings_get_flags(settings: *GSettings, key: *gchar): guint <cimport,nodecl> end
global function g_settings_set_flags(settings: *GSettings, key: *gchar, value: guint): gboolean <cimport,nodecl> end
global function g_settings_get_child(settings: *GSettings, name: *gchar): *GSettings <cimport,nodecl> end
global function g_settings_is_writable(settings: *GSettings, name: *gchar): gboolean <cimport,nodecl> end
global function g_settings_delay(settings: *GSettings): void <cimport,nodecl> end
global function g_settings_apply(settings: *GSettings): void <cimport,nodecl> end
global function g_settings_revert(settings: *GSettings): void <cimport,nodecl> end
global function g_settings_get_has_unapplied(settings: *GSettings): gboolean <cimport,nodecl> end
global function g_settings_sync(): void <cimport,nodecl> end
global function g_settings_bind(settings: *GSettings, key: *gchar, object: gpointer, property: *gchar, flags: GSettingsBindFlags): void <cimport,nodecl> end
global function g_settings_bind_with_mapping(settings: *GSettings, key: *gchar, object: gpointer, property: *gchar, flags: GSettingsBindFlags, get_mapping: GSettingsBindGetMapping, set_mapping: GSettingsBindSetMapping, user_data: gpointer, destroy: GDestroyNotify): void <cimport,nodecl> end
global function g_settings_bind_writable(settings: *GSettings, key: *gchar, object: gpointer, property: *gchar, inverted: gboolean): void <cimport,nodecl> end
global function g_settings_unbind(object: gpointer, property: *gchar): void <cimport,nodecl> end
global function g_settings_create_action(settings: *GSettings, key: *gchar): *GAction <cimport,nodecl> end
global function g_settings_get_mapped(settings: *GSettings, key: *gchar, mapping: GSettingsGetMapping, user_data: gpointer): gpointer <cimport,nodecl> end
global function g_simple_action_get_type(): GType <cimport,nodecl> end
global function g_simple_action_new(name: *gchar, parameter_type: *GVariantType): *GSimpleAction <cimport,nodecl> end
global function g_simple_action_new_stateful(name: *gchar, parameter_type: *GVariantType, state: *GVariant): *GSimpleAction <cimport,nodecl> end
global function g_simple_action_set_enabled(simple: *GSimpleAction, enabled: gboolean): void <cimport,nodecl> end
global function g_simple_action_set_state(simple: *GSimpleAction, value: *GVariant): void <cimport,nodecl> end
global function g_simple_action_set_state_hint(simple: *GSimpleAction, state_hint: *GVariant): void <cimport,nodecl> end
global function g_simple_action_group_get_type(): GType <cimport,nodecl> end
global function g_simple_action_group_new(): *GSimpleActionGroup <cimport,nodecl> end
global function g_simple_action_group_lookup(simple: *GSimpleActionGroup, action_name: *gchar): *GAction <cimport,nodecl> end
global function g_simple_action_group_insert(simple: *GSimpleActionGroup, action: *GAction): void <cimport,nodecl> end
global function g_simple_action_group_remove(simple: *GSimpleActionGroup, action_name: *gchar): void <cimport,nodecl> end
global function g_simple_action_group_add_entries(simple: *GSimpleActionGroup, entries: *GActionEntry, n_entries: gint, user_data: gpointer): void <cimport,nodecl> end
global function g_simple_async_result_get_type(): GType <cimport,nodecl> end
global function g_simple_async_result_new(source_object: *GObject, callback: GAsyncReadyCallback, user_data: gpointer, source_tag: gpointer): *GSimpleAsyncResult <cimport,nodecl> end
global function g_simple_async_result_new_error(source_object: *GObject, callback: GAsyncReadyCallback, user_data: gpointer, domain: GQuark, code: gint, format: cstring, ...: cvarargs): *GSimpleAsyncResult <cimport,nodecl> end
global function g_simple_async_result_new_from_error(source_object: *GObject, callback: GAsyncReadyCallback, user_data: gpointer, error: *GError): *GSimpleAsyncResult <cimport,nodecl> end
global function g_simple_async_result_new_take_error(source_object: *GObject, callback: GAsyncReadyCallback, user_data: gpointer, error: *GError): *GSimpleAsyncResult <cimport,nodecl> end
global function g_simple_async_result_set_op_res_gpointer(simple: *GSimpleAsyncResult, op_res: gpointer, destroy_op_res: GDestroyNotify): void <cimport,nodecl> end
global function g_simple_async_result_get_op_res_gpointer(simple: *GSimpleAsyncResult): gpointer <cimport,nodecl> end
global function g_simple_async_result_set_op_res_gssize(simple: *GSimpleAsyncResult, op_res: gssize): void <cimport,nodecl> end
global function g_simple_async_result_get_op_res_gssize(simple: *GSimpleAsyncResult): gssize <cimport,nodecl> end
global function g_simple_async_result_set_op_res_gboolean(simple: *GSimpleAsyncResult, op_res: gboolean): void <cimport,nodecl> end
global function g_simple_async_result_get_op_res_gboolean(simple: *GSimpleAsyncResult): gboolean <cimport,nodecl> end
global function g_simple_async_result_set_check_cancellable(simple: *GSimpleAsyncResult, check_cancellable: *GCancellable): void <cimport,nodecl> end
global function g_simple_async_result_get_source_tag(simple: *GSimpleAsyncResult): gpointer <cimport,nodecl> end
global function g_simple_async_result_set_handle_cancellation(simple: *GSimpleAsyncResult, handle_cancellation: gboolean): void <cimport,nodecl> end
global function g_simple_async_result_complete(simple: *GSimpleAsyncResult): void <cimport,nodecl> end
global function g_simple_async_result_complete_in_idle(simple: *GSimpleAsyncResult): void <cimport,nodecl> end
global function g_simple_async_result_run_in_thread(simple: *GSimpleAsyncResult, func: GSimpleAsyncThreadFunc, io_priority: cint, cancellable: *GCancellable): void <cimport,nodecl> end
global function g_simple_async_result_set_from_error(simple: *GSimpleAsyncResult, error: *GError): void <cimport,nodecl> end
global function g_simple_async_result_take_error(simple: *GSimpleAsyncResult, error: *GError): void <cimport,nodecl> end
global function g_simple_async_result_propagate_error(simple: *GSimpleAsyncResult, dest: **GError): gboolean <cimport,nodecl> end
global function g_simple_async_result_set_error(simple: *GSimpleAsyncResult, domain: GQuark, code: gint, format: cstring, ...: cvarargs): void <cimport,nodecl> end
global function g_simple_async_result_set_error_va(simple: *GSimpleAsyncResult, domain: GQuark, code: gint, format: cstring, args: cvalist): void <cimport,nodecl> end
global function g_simple_async_result_is_valid(result: *GAsyncResult, source: *GObject, source_tag: gpointer): gboolean <cimport,nodecl> end
global function g_simple_async_report_error_in_idle(object: *GObject, callback: GAsyncReadyCallback, user_data: gpointer, domain: GQuark, code: gint, format: cstring, ...: cvarargs): void <cimport,nodecl> end
global function g_simple_async_report_gerror_in_idle(object: *GObject, callback: GAsyncReadyCallback, user_data: gpointer, error: *GError): void <cimport,nodecl> end
global function g_simple_async_report_take_gerror_in_idle(object: *GObject, callback: GAsyncReadyCallback, user_data: gpointer, error: *GError): void <cimport,nodecl> end
global function g_simple_io_stream_get_type(): GType <cimport,nodecl> end
global function g_simple_io_stream_new(input_stream: *GInputStream, output_stream: *GOutputStream): *GIOStream <cimport,nodecl> end
global function g_simple_permission_get_type(): GType <cimport,nodecl> end
global function g_simple_permission_new(allowed: gboolean): *GPermission <cimport,nodecl> end
global function g_simple_proxy_resolver_get_type(): GType <cimport,nodecl> end
global function g_simple_proxy_resolver_new(default_proxy: *gchar, ignore_hosts: **gchar): *GProxyResolver <cimport,nodecl> end
global function g_simple_proxy_resolver_set_default_proxy(resolver: *GSimpleProxyResolver, default_proxy: *gchar): void <cimport,nodecl> end
global function g_simple_proxy_resolver_set_ignore_hosts(resolver: *GSimpleProxyResolver, ignore_hosts: **gchar): void <cimport,nodecl> end
global function g_simple_proxy_resolver_set_uri_proxy(resolver: *GSimpleProxyResolver, uri_scheme: *gchar, proxy: *gchar): void <cimport,nodecl> end
global function g_socket_get_type(): GType <cimport,nodecl> end
global function g_socket_new(family: GSocketFamily, type: GSocketType, protocol: GSocketProtocol, error: **GError): *GSocket <cimport,nodecl> end
global function g_socket_new_from_fd(fd: gint, error: **GError): *GSocket <cimport,nodecl> end
global function g_socket_get_fd(socket: *GSocket): cint <cimport,nodecl> end
global function g_socket_get_family(socket: *GSocket): GSocketFamily <cimport,nodecl> end
global function g_socket_get_socket_type(socket: *GSocket): GSocketType <cimport,nodecl> end
global function g_socket_get_protocol(socket: *GSocket): GSocketProtocol <cimport,nodecl> end
global function g_socket_get_local_address(socket: *GSocket, error: **GError): *GSocketAddress <cimport,nodecl> end
global function g_socket_get_remote_address(socket: *GSocket, error: **GError): *GSocketAddress <cimport,nodecl> end
global function g_socket_set_blocking(socket: *GSocket, blocking: gboolean): void <cimport,nodecl> end
global function g_socket_get_blocking(socket: *GSocket): gboolean <cimport,nodecl> end
global function g_socket_set_keepalive(socket: *GSocket, keepalive: gboolean): void <cimport,nodecl> end
global function g_socket_get_keepalive(socket: *GSocket): gboolean <cimport,nodecl> end
global function g_socket_get_listen_backlog(socket: *GSocket): gint <cimport,nodecl> end
global function g_socket_set_listen_backlog(socket: *GSocket, backlog: gint): void <cimport,nodecl> end
global function g_socket_get_timeout(socket: *GSocket): guint <cimport,nodecl> end
global function g_socket_set_timeout(socket: *GSocket, timeout: guint): void <cimport,nodecl> end
global function g_socket_get_ttl(socket: *GSocket): guint <cimport,nodecl> end
global function g_socket_set_ttl(socket: *GSocket, ttl: guint): void <cimport,nodecl> end
global function g_socket_get_broadcast(socket: *GSocket): gboolean <cimport,nodecl> end
global function g_socket_set_broadcast(socket: *GSocket, broadcast: gboolean): void <cimport,nodecl> end
global function g_socket_get_multicast_loopback(socket: *GSocket): gboolean <cimport,nodecl> end
global function g_socket_set_multicast_loopback(socket: *GSocket, loopback: gboolean): void <cimport,nodecl> end
global function g_socket_get_multicast_ttl(socket: *GSocket): guint <cimport,nodecl> end
global function g_socket_set_multicast_ttl(socket: *GSocket, ttl: guint): void <cimport,nodecl> end
global function g_socket_is_connected(socket: *GSocket): gboolean <cimport,nodecl> end
global function g_socket_bind(socket: *GSocket, address: *GSocketAddress, allow_reuse: gboolean, error: **GError): gboolean <cimport,nodecl> end
global function g_socket_join_multicast_group(socket: *GSocket, group: *GInetAddress, source_specific: gboolean, iface: *gchar, error: **GError): gboolean <cimport,nodecl> end
global function g_socket_leave_multicast_group(socket: *GSocket, group: *GInetAddress, source_specific: gboolean, iface: *gchar, error: **GError): gboolean <cimport,nodecl> end
global function g_socket_join_multicast_group_ssm(socket: *GSocket, group: *GInetAddress, source_specific: *GInetAddress, iface: *gchar, error: **GError): gboolean <cimport,nodecl> end
global function g_socket_leave_multicast_group_ssm(socket: *GSocket, group: *GInetAddress, source_specific: *GInetAddress, iface: *gchar, error: **GError): gboolean <cimport,nodecl> end
global function g_socket_connect(socket: *GSocket, address: *GSocketAddress, cancellable: *GCancellable, error: **GError): gboolean <cimport,nodecl> end
global function g_socket_check_connect_result(socket: *GSocket, error: **GError): gboolean <cimport,nodecl> end
global function g_socket_get_available_bytes(socket: *GSocket): gssize <cimport,nodecl> end
global function g_socket_condition_check(socket: *GSocket, condition: GIOCondition): GIOCondition <cimport,nodecl> end
global function g_socket_condition_wait(socket: *GSocket, condition: GIOCondition, cancellable: *GCancellable, error: **GError): gboolean <cimport,nodecl> end
global function g_socket_condition_timed_wait(socket: *GSocket, condition: GIOCondition, timeout_us: gint64, cancellable: *GCancellable, error: **GError): gboolean <cimport,nodecl> end
global function g_socket_accept(socket: *GSocket, cancellable: *GCancellable, error: **GError): *GSocket <cimport,nodecl> end
global function g_socket_listen(socket: *GSocket, error: **GError): gboolean <cimport,nodecl> end
global function g_socket_receive(socket: *GSocket, buffer: *gchar, size: gsize, cancellable: *GCancellable, error: **GError): gssize <cimport,nodecl> end
global function g_socket_receive_from(socket: *GSocket, address: **GSocketAddress, buffer: *gchar, size: gsize, cancellable: *GCancellable, error: **GError): gssize <cimport,nodecl> end
global function g_socket_send(socket: *GSocket, buffer: *gchar, size: gsize, cancellable: *GCancellable, error: **GError): gssize <cimport,nodecl> end
global function g_socket_send_to(socket: *GSocket, address: *GSocketAddress, buffer: *gchar, size: gsize, cancellable: *GCancellable, error: **GError): gssize <cimport,nodecl> end
global function g_socket_receive_message(socket: *GSocket, address: **GSocketAddress, vectors: *GInputVector, num_vectors: gint, messages: ***GSocketControlMessage, num_messages: *gint, flags: *gint, cancellable: *GCancellable, error: **GError): gssize <cimport,nodecl> end
global function g_socket_send_message(socket: *GSocket, address: *GSocketAddress, vectors: *GOutputVector, num_vectors: gint, messages: **GSocketControlMessage, num_messages: gint, flags: gint, cancellable: *GCancellable, error: **GError): gssize <cimport,nodecl> end
global function g_socket_receive_messages(socket: *GSocket, messages: *GInputMessage, num_messages: guint, flags: gint, cancellable: *GCancellable, error: **GError): gint <cimport,nodecl> end
global function g_socket_send_messages(socket: *GSocket, messages: *GOutputMessage, num_messages: guint, flags: gint, cancellable: *GCancellable, error: **GError): gint <cimport,nodecl> end
global function g_socket_close(socket: *GSocket, error: **GError): gboolean <cimport,nodecl> end
global function g_socket_shutdown(socket: *GSocket, shutdown_read: gboolean, shutdown_write: gboolean, error: **GError): gboolean <cimport,nodecl> end
global function g_socket_is_closed(socket: *GSocket): gboolean <cimport,nodecl> end
global function g_socket_create_source(socket: *GSocket, condition: GIOCondition, cancellable: *GCancellable): *GSource <cimport,nodecl> end
global function g_socket_speaks_ipv4(socket: *GSocket): gboolean <cimport,nodecl> end
global function g_socket_get_credentials(socket: *GSocket, error: **GError): *GCredentials <cimport,nodecl> end
global function g_socket_receive_with_blocking(socket: *GSocket, buffer: *gchar, size: gsize, blocking: gboolean, cancellable: *GCancellable, error: **GError): gssize <cimport,nodecl> end
global function g_socket_send_with_blocking(socket: *GSocket, buffer: *gchar, size: gsize, blocking: gboolean, cancellable: *GCancellable, error: **GError): gssize <cimport,nodecl> end
global function g_socket_send_message_with_timeout(socket: *GSocket, address: *GSocketAddress, vectors: *GOutputVector, num_vectors: gint, messages: **GSocketControlMessage, num_messages: gint, flags: gint, timeout_us: gint64, bytes_written: *gsize, cancellable: *GCancellable, error: **GError): GPollableReturn <cimport,nodecl> end
global function g_socket_get_option(socket: *GSocket, level: gint, optname: gint, value: *gint, error: **GError): gboolean <cimport,nodecl> end
global function g_socket_set_option(socket: *GSocket, level: gint, optname: gint, value: gint, error: **GError): gboolean <cimport,nodecl> end
global function g_socket_client_get_type(): GType <cimport,nodecl> end
global function g_socket_client_new(): *GSocketClient <cimport,nodecl> end
global function g_socket_client_get_family(client: *GSocketClient): GSocketFamily <cimport,nodecl> end
global function g_socket_client_set_family(client: *GSocketClient, family: GSocketFamily): void <cimport,nodecl> end
global function g_socket_client_get_socket_type(client: *GSocketClient): GSocketType <cimport,nodecl> end
global function g_socket_client_set_socket_type(client: *GSocketClient, type: GSocketType): void <cimport,nodecl> end
global function g_socket_client_get_protocol(client: *GSocketClient): GSocketProtocol <cimport,nodecl> end
global function g_socket_client_set_protocol(client: *GSocketClient, protocol: GSocketProtocol): void <cimport,nodecl> end
global function g_socket_client_get_local_address(client: *GSocketClient): *GSocketAddress <cimport,nodecl> end
global function g_socket_client_set_local_address(client: *GSocketClient, address: *GSocketAddress): void <cimport,nodecl> end
global function g_socket_client_get_timeout(client: *GSocketClient): guint <cimport,nodecl> end
global function g_socket_client_set_timeout(client: *GSocketClient, timeout: guint): void <cimport,nodecl> end
global function g_socket_client_get_enable_proxy(client: *GSocketClient): gboolean <cimport,nodecl> end
global function g_socket_client_set_enable_proxy(client: *GSocketClient, enable: gboolean): void <cimport,nodecl> end
global function g_socket_client_get_tls(client: *GSocketClient): gboolean <cimport,nodecl> end
global function g_socket_client_set_tls(client: *GSocketClient, tls: gboolean): void <cimport,nodecl> end
global function g_socket_client_get_tls_validation_flags(client: *GSocketClient): GTlsCertificateFlags <cimport,nodecl> end
global function g_socket_client_set_tls_validation_flags(client: *GSocketClient, flags: GTlsCertificateFlags): void <cimport,nodecl> end
global function g_socket_client_get_proxy_resolver(client: *GSocketClient): *GProxyResolver <cimport,nodecl> end
global function g_socket_client_set_proxy_resolver(client: *GSocketClient, proxy_resolver: *GProxyResolver): void <cimport,nodecl> end
global function g_socket_client_connect(client: *GSocketClient, connectable: *GSocketConnectable, cancellable: *GCancellable, error: **GError): *GSocketConnection <cimport,nodecl> end
global function g_socket_client_connect_to_host(client: *GSocketClient, host_and_port: *gchar, default_port: guint16, cancellable: *GCancellable, error: **GError): *GSocketConnection <cimport,nodecl> end
global function g_socket_client_connect_to_service(client: *GSocketClient, domain: *gchar, service: *gchar, cancellable: *GCancellable, error: **GError): *GSocketConnection <cimport,nodecl> end
global function g_socket_client_connect_to_uri(client: *GSocketClient, uri: *gchar, default_port: guint16, cancellable: *GCancellable, error: **GError): *GSocketConnection <cimport,nodecl> end
global function g_socket_client_connect_async(client: *GSocketClient, connectable: *GSocketConnectable, cancellable: *GCancellable, callback: GAsyncReadyCallback, user_data: gpointer): void <cimport,nodecl> end
global function g_socket_client_connect_finish(client: *GSocketClient, result: *GAsyncResult, error: **GError): *GSocketConnection <cimport,nodecl> end
global function g_socket_client_connect_to_host_async(client: *GSocketClient, host_and_port: *gchar, default_port: guint16, cancellable: *GCancellable, callback: GAsyncReadyCallback, user_data: gpointer): void <cimport,nodecl> end
global function g_socket_client_connect_to_host_finish(client: *GSocketClient, result: *GAsyncResult, error: **GError): *GSocketConnection <cimport,nodecl> end
global function g_socket_client_connect_to_service_async(client: *GSocketClient, domain: *gchar, service: *gchar, cancellable: *GCancellable, callback: GAsyncReadyCallback, user_data: gpointer): void <cimport,nodecl> end
global function g_socket_client_connect_to_service_finish(client: *GSocketClient, result: *GAsyncResult, error: **GError): *GSocketConnection <cimport,nodecl> end
global function g_socket_client_connect_to_uri_async(client: *GSocketClient, uri: *gchar, default_port: guint16, cancellable: *GCancellable, callback: GAsyncReadyCallback, user_data: gpointer): void <cimport,nodecl> end
global function g_socket_client_connect_to_uri_finish(client: *GSocketClient, result: *GAsyncResult, error: **GError): *GSocketConnection <cimport,nodecl> end
global function g_socket_client_add_application_proxy(client: *GSocketClient, protocol: *gchar): void <cimport,nodecl> end
global function g_socket_connectable_get_type(): GType <cimport,nodecl> end
global function g_socket_connectable_enumerate(connectable: *GSocketConnectable): *GSocketAddressEnumerator <cimport,nodecl> end
global function g_socket_connectable_proxy_enumerate(connectable: *GSocketConnectable): *GSocketAddressEnumerator <cimport,nodecl> end
global function g_socket_connectable_to_string(connectable: *GSocketConnectable): *gchar <cimport,nodecl> end
global function g_socket_connection_get_type(): GType <cimport,nodecl> end
global function g_socket_connection_is_connected(connection: *GSocketConnection): gboolean <cimport,nodecl> end
global function g_socket_connection_connect(connection: *GSocketConnection, address: *GSocketAddress, cancellable: *GCancellable, error: **GError): gboolean <cimport,nodecl> end
global function g_socket_connection_connect_async(connection: *GSocketConnection, address: *GSocketAddress, cancellable: *GCancellable, callback: GAsyncReadyCallback, user_data: gpointer): void <cimport,nodecl> end
global function g_socket_connection_connect_finish(connection: *GSocketConnection, result: *GAsyncResult, error: **GError): gboolean <cimport,nodecl> end
global function g_socket_connection_get_socket(connection: *GSocketConnection): *GSocket <cimport,nodecl> end
global function g_socket_connection_get_local_address(connection: *GSocketConnection, error: **GError): *GSocketAddress <cimport,nodecl> end
global function g_socket_connection_get_remote_address(connection: *GSocketConnection, error: **GError): *GSocketAddress <cimport,nodecl> end
global function g_socket_connection_factory_register_type(g_type: GType, family: GSocketFamily, type: GSocketType, protocol: gint): void <cimport,nodecl> end
global function g_socket_connection_factory_lookup_type(family: GSocketFamily, type: GSocketType, protocol_id: gint): GType <cimport,nodecl> end
global function g_socket_connection_factory_create_connection(socket: *GSocket): *GSocketConnection <cimport,nodecl> end
global function g_socket_control_message_get_type(): GType <cimport,nodecl> end
global function g_socket_control_message_get_size(message: *GSocketControlMessage): gsize <cimport,nodecl> end
global function g_socket_control_message_get_level(message: *GSocketControlMessage): cint <cimport,nodecl> end
global function g_socket_control_message_get_msg_type(message: *GSocketControlMessage): cint <cimport,nodecl> end
global function g_socket_control_message_serialize(message: *GSocketControlMessage, data: gpointer): void <cimport,nodecl> end
global function g_socket_control_message_deserialize(level: cint, type: cint, size: gsize, data: gpointer): *GSocketControlMessage <cimport,nodecl> end
global function g_socket_listener_get_type(): GType <cimport,nodecl> end
global function g_socket_listener_new(): *GSocketListener <cimport,nodecl> end
global function g_socket_listener_set_backlog(listener: *GSocketListener, listen_backlog: cint): void <cimport,nodecl> end
global function g_socket_listener_add_socket(listener: *GSocketListener, socket: *GSocket, source_object: *GObject, error: **GError): gboolean <cimport,nodecl> end
global function g_socket_listener_add_address(listener: *GSocketListener, address: *GSocketAddress, type: GSocketType, protocol: GSocketProtocol, source_object: *GObject, effective_address: **GSocketAddress, error: **GError): gboolean <cimport,nodecl> end
global function g_socket_listener_add_inet_port(listener: *GSocketListener, port: guint16, source_object: *GObject, error: **GError): gboolean <cimport,nodecl> end
global function g_socket_listener_add_any_inet_port(listener: *GSocketListener, source_object: *GObject, error: **GError): guint16 <cimport,nodecl> end
global function g_socket_listener_accept_socket(listener: *GSocketListener, source_object: **GObject, cancellable: *GCancellable, error: **GError): *GSocket <cimport,nodecl> end
global function g_socket_listener_accept_socket_async(listener: *GSocketListener, cancellable: *GCancellable, callback: GAsyncReadyCallback, user_data: gpointer): void <cimport,nodecl> end
global function g_socket_listener_accept_socket_finish(listener: *GSocketListener, result: *GAsyncResult, source_object: **GObject, error: **GError): *GSocket <cimport,nodecl> end
global function g_socket_listener_accept(listener: *GSocketListener, source_object: **GObject, cancellable: *GCancellable, error: **GError): *GSocketConnection <cimport,nodecl> end
global function g_socket_listener_accept_async(listener: *GSocketListener, cancellable: *GCancellable, callback: GAsyncReadyCallback, user_data: gpointer): void <cimport,nodecl> end
global function g_socket_listener_accept_finish(listener: *GSocketListener, result: *GAsyncResult, source_object: **GObject, error: **GError): *GSocketConnection <cimport,nodecl> end
global function g_socket_listener_close(listener: *GSocketListener): void <cimport,nodecl> end
global function g_socket_service_get_type(): GType <cimport,nodecl> end
global function g_socket_service_new(): *GSocketService <cimport,nodecl> end
global function g_socket_service_start(service: *GSocketService): void <cimport,nodecl> end
global function g_socket_service_stop(service: *GSocketService): void <cimport,nodecl> end
global function g_socket_service_is_active(service: *GSocketService): gboolean <cimport,nodecl> end
global function g_srv_target_get_type(): GType <cimport,nodecl> end
global function g_srv_target_new(hostname: *gchar, port: guint16, priority: guint16, weight: guint16): *GSrvTarget <cimport,nodecl> end
global function g_srv_target_copy(target: *GSrvTarget): *GSrvTarget <cimport,nodecl> end
global function g_srv_target_free(target: *GSrvTarget): void <cimport,nodecl> end
global function g_srv_target_get_hostname(target: *GSrvTarget): *gchar <cimport,nodecl> end
global function g_srv_target_get_port(target: *GSrvTarget): guint16 <cimport,nodecl> end
global function g_srv_target_get_priority(target: *GSrvTarget): guint16 <cimport,nodecl> end
global function g_srv_target_get_weight(target: *GSrvTarget): guint16 <cimport,nodecl> end
global function g_srv_target_list_sort(targets: *GList): *GList <cimport,nodecl> end
global function g_subprocess_get_type(): GType <cimport,nodecl> end
global function g_subprocess_new(flags: GSubprocessFlags, error: **GError, argv0: *gchar, ...: cvarargs): *GSubprocess <cimport,nodecl> end
global function g_subprocess_newv(argv: **gchar, flags: GSubprocessFlags, error: **GError): *GSubprocess <cimport,nodecl> end
global function g_subprocess_get_stdin_pipe(subprocess: *GSubprocess): *GOutputStream <cimport,nodecl> end
global function g_subprocess_get_stdout_pipe(subprocess: *GSubprocess): *GInputStream <cimport,nodecl> end
global function g_subprocess_get_stderr_pipe(subprocess: *GSubprocess): *GInputStream <cimport,nodecl> end
global function g_subprocess_get_identifier(subprocess: *GSubprocess): *gchar <cimport,nodecl> end
global function g_subprocess_send_signal(subprocess: *GSubprocess, signal_num: gint): void <cimport,nodecl> end
global function g_subprocess_force_exit(subprocess: *GSubprocess): void <cimport,nodecl> end
global function g_subprocess_wait(subprocess: *GSubprocess, cancellable: *GCancellable, error: **GError): gboolean <cimport,nodecl> end
global function g_subprocess_wait_async(subprocess: *GSubprocess, cancellable: *GCancellable, callback: GAsyncReadyCallback, user_data: gpointer): void <cimport,nodecl> end
global function g_subprocess_wait_finish(subprocess: *GSubprocess, result: *GAsyncResult, error: **GError): gboolean <cimport,nodecl> end
global function g_subprocess_wait_check(subprocess: *GSubprocess, cancellable: *GCancellable, error: **GError): gboolean <cimport,nodecl> end
global function g_subprocess_wait_check_async(subprocess: *GSubprocess, cancellable: *GCancellable, callback: GAsyncReadyCallback, user_data: gpointer): void <cimport,nodecl> end
global function g_subprocess_wait_check_finish(subprocess: *GSubprocess, result: *GAsyncResult, error: **GError): gboolean <cimport,nodecl> end
global function g_subprocess_get_status(subprocess: *GSubprocess): gint <cimport,nodecl> end
global function g_subprocess_get_successful(subprocess: *GSubprocess): gboolean <cimport,nodecl> end
global function g_subprocess_get_if_exited(subprocess: *GSubprocess): gboolean <cimport,nodecl> end
global function g_subprocess_get_exit_status(subprocess: *GSubprocess): gint <cimport,nodecl> end
global function g_subprocess_get_if_signaled(subprocess: *GSubprocess): gboolean <cimport,nodecl> end
global function g_subprocess_get_term_sig(subprocess: *GSubprocess): gint <cimport,nodecl> end
global function g_subprocess_communicate(subprocess: *GSubprocess, stdin_buf: *GBytes, cancellable: *GCancellable, stdout_buf: **GBytes, stderr_buf: **GBytes, error: **GError): gboolean <cimport,nodecl> end
global function g_subprocess_communicate_async(subprocess: *GSubprocess, stdin_buf: *GBytes, cancellable: *GCancellable, callback: GAsyncReadyCallback, user_data: gpointer): void <cimport,nodecl> end
global function g_subprocess_communicate_finish(subprocess: *GSubprocess, result: *GAsyncResult, stdout_buf: **GBytes, stderr_buf: **GBytes, error: **GError): gboolean <cimport,nodecl> end
global function g_subprocess_communicate_utf8(subprocess: *GSubprocess, stdin_buf: cstring, cancellable: *GCancellable, stdout_buf: *cstring, stderr_buf: *cstring, error: **GError): gboolean <cimport,nodecl> end
global function g_subprocess_communicate_utf8_async(subprocess: *GSubprocess, stdin_buf: cstring, cancellable: *GCancellable, callback: GAsyncReadyCallback, user_data: gpointer): void <cimport,nodecl> end
global function g_subprocess_communicate_utf8_finish(subprocess: *GSubprocess, result: *GAsyncResult, stdout_buf: *cstring, stderr_buf: *cstring, error: **GError): gboolean <cimport,nodecl> end
global function g_subprocess_launcher_get_type(): GType <cimport,nodecl> end
global function g_subprocess_launcher_new(flags: GSubprocessFlags): *GSubprocessLauncher <cimport,nodecl> end
global function g_subprocess_launcher_spawn(self: *GSubprocessLauncher, error: **GError, argv0: *gchar, ...: cvarargs): *GSubprocess <cimport,nodecl> end
global function g_subprocess_launcher_spawnv(self: *GSubprocessLauncher, argv: **gchar, error: **GError): *GSubprocess <cimport,nodecl> end
global function g_subprocess_launcher_set_environ(self: *GSubprocessLauncher, env: **gchar): void <cimport,nodecl> end
global function g_subprocess_launcher_setenv(self: *GSubprocessLauncher, variable: *gchar, value: *gchar, overwrite: gboolean): void <cimport,nodecl> end
global function g_subprocess_launcher_unsetenv(self: *GSubprocessLauncher, variable: *gchar): void <cimport,nodecl> end
global function g_subprocess_launcher_getenv(self: *GSubprocessLauncher, variable: *gchar): *gchar <cimport,nodecl> end
global function g_subprocess_launcher_set_cwd(self: *GSubprocessLauncher, cwd: *gchar): void <cimport,nodecl> end
global function g_subprocess_launcher_set_flags(self: *GSubprocessLauncher, flags: GSubprocessFlags): void <cimport,nodecl> end
global function g_subprocess_launcher_set_stdin_file_path(self: *GSubprocessLauncher, path: *gchar): void <cimport,nodecl> end
global function g_subprocess_launcher_take_stdin_fd(self: *GSubprocessLauncher, fd: gint): void <cimport,nodecl> end
global function g_subprocess_launcher_set_stdout_file_path(self: *GSubprocessLauncher, path: *gchar): void <cimport,nodecl> end
global function g_subprocess_launcher_take_stdout_fd(self: *GSubprocessLauncher, fd: gint): void <cimport,nodecl> end
global function g_subprocess_launcher_set_stderr_file_path(self: *GSubprocessLauncher, path: *gchar): void <cimport,nodecl> end
global function g_subprocess_launcher_take_stderr_fd(self: *GSubprocessLauncher, fd: gint): void <cimport,nodecl> end
global function g_subprocess_launcher_take_fd(self: *GSubprocessLauncher, source_fd: gint, target_fd: gint): void <cimport,nodecl> end
global function g_subprocess_launcher_close(self: *GSubprocessLauncher): void <cimport,nodecl> end
global function g_subprocess_launcher_set_child_setup(self: *GSubprocessLauncher, child_setup: GSpawnChildSetupFunc, user_data: gpointer, destroy_notify: GDestroyNotify): void <cimport,nodecl> end
global function g_task_get_type(): GType <cimport,nodecl> end
global function g_task_new(source_object: gpointer, cancellable: *GCancellable, callback: GAsyncReadyCallback, callback_data: gpointer): *GTask <cimport,nodecl> end
global function g_task_report_error(source_object: gpointer, callback: GAsyncReadyCallback, callback_data: gpointer, source_tag: gpointer, error: *GError): void <cimport,nodecl> end
global function g_task_report_new_error(source_object: gpointer, callback: GAsyncReadyCallback, callback_data: gpointer, source_tag: gpointer, domain: GQuark, code: gint, format: cstring, ...: cvarargs): void <cimport,nodecl> end
global function g_task_set_task_data(task: *GTask, task_data: gpointer, task_data_destroy: GDestroyNotify): void <cimport,nodecl> end
global function g_task_set_priority(task: *GTask, priority: gint): void <cimport,nodecl> end
global function g_task_set_check_cancellable(task: *GTask, check_cancellable: gboolean): void <cimport,nodecl> end
global function g_task_set_source_tag(task: *GTask, source_tag: gpointer): void <cimport,nodecl> end
global function g_task_set_name(task: *GTask, name: *gchar): void <cimport,nodecl> end
global function g_task_get_source_object(task: *GTask): gpointer <cimport,nodecl> end
global function g_task_get_task_data(task: *GTask): gpointer <cimport,nodecl> end
global function g_task_get_priority(task: *GTask): gint <cimport,nodecl> end
global function g_task_get_context(task: *GTask): *GMainContext <cimport,nodecl> end
global function g_task_get_cancellable(task: *GTask): *GCancellable <cimport,nodecl> end
global function g_task_get_check_cancellable(task: *GTask): gboolean <cimport,nodecl> end
global function g_task_get_source_tag(task: *GTask): gpointer <cimport,nodecl> end
global function g_task_get_name(task: *GTask): *gchar <cimport,nodecl> end
global function g_task_is_valid(result: gpointer, source_object: gpointer): gboolean <cimport,nodecl> end
global function g_task_run_in_thread(task: *GTask, task_func: GTaskThreadFunc): void <cimport,nodecl> end
global function g_task_run_in_thread_sync(task: *GTask, task_func: GTaskThreadFunc): void <cimport,nodecl> end
global function g_task_set_return_on_cancel(task: *GTask, return_on_cancel: gboolean): gboolean <cimport,nodecl> end
global function g_task_get_return_on_cancel(task: *GTask): gboolean <cimport,nodecl> end
global function g_task_attach_source(task: *GTask, source: *GSource, callback: GSourceFunc): void <cimport,nodecl> end
global function g_task_return_pointer(task: *GTask, result: gpointer, result_destroy: GDestroyNotify): void <cimport,nodecl> end
global function g_task_return_boolean(task: *GTask, result: gboolean): void <cimport,nodecl> end
global function g_task_return_int(task: *GTask, result: gssize): void <cimport,nodecl> end
global function g_task_return_error(task: *GTask, error: *GError): void <cimport,nodecl> end
global function g_task_return_new_error(task: *GTask, domain: GQuark, code: gint, format: cstring, ...: cvarargs): void <cimport,nodecl> end
global function g_task_return_value(task: *GTask, result: *GValue): void <cimport,nodecl> end
global function g_task_return_error_if_cancelled(task: *GTask): gboolean <cimport,nodecl> end
global function g_task_propagate_pointer(task: *GTask, error: **GError): gpointer <cimport,nodecl> end
global function g_task_propagate_boolean(task: *GTask, error: **GError): gboolean <cimport,nodecl> end
global function g_task_propagate_int(task: *GTask, error: **GError): gssize <cimport,nodecl> end
global function g_task_propagate_value(task: *GTask, value: *GValue, error: **GError): gboolean <cimport,nodecl> end
global function g_task_had_error(task: *GTask): gboolean <cimport,nodecl> end
global function g_task_get_completed(task: *GTask): gboolean <cimport,nodecl> end
global function g_tcp_connection_get_type(): GType <cimport,nodecl> end
global function g_tcp_connection_set_graceful_disconnect(connection: *GTcpConnection, graceful_disconnect: gboolean): void <cimport,nodecl> end
global function g_tcp_connection_get_graceful_disconnect(connection: *GTcpConnection): gboolean <cimport,nodecl> end
global function g_tcp_wrapper_connection_get_type(): GType <cimport,nodecl> end
global function g_tcp_wrapper_connection_new(base_io_stream: *GIOStream, socket: *GSocket): *GSocketConnection <cimport,nodecl> end
global function g_tcp_wrapper_connection_get_base_io_stream(conn: *GTcpWrapperConnection): *GIOStream <cimport,nodecl> end
global function g_test_dbus_get_type(): GType <cimport,nodecl> end
global function g_test_dbus_new(flags: GTestDBusFlags): *GTestDBus <cimport,nodecl> end
global function g_test_dbus_get_flags(self: *GTestDBus): GTestDBusFlags <cimport,nodecl> end
global function g_test_dbus_get_bus_address(self: *GTestDBus): *gchar <cimport,nodecl> end
global function g_test_dbus_add_service_dir(self: *GTestDBus, path: *gchar): void <cimport,nodecl> end
global function g_test_dbus_up(self: *GTestDBus): void <cimport,nodecl> end
global function g_test_dbus_stop(self: *GTestDBus): void <cimport,nodecl> end
global function g_test_dbus_down(self: *GTestDBus): void <cimport,nodecl> end
global function g_test_dbus_unset(): void <cimport,nodecl> end
global function g_themed_icon_get_type(): GType <cimport,nodecl> end
global function g_themed_icon_new(iconname: cstring): *GIcon <cimport,nodecl> end
global function g_themed_icon_new_with_default_fallbacks(iconname: cstring): *GIcon <cimport,nodecl> end
global function g_themed_icon_new_from_names(iconnames: *cstring, len: cint): *GIcon <cimport,nodecl> end
global function g_themed_icon_prepend_name(icon: *GThemedIcon, iconname: cstring): void <cimport,nodecl> end
global function g_themed_icon_append_name(icon: *GThemedIcon, iconname: cstring): void <cimport,nodecl> end
global function g_themed_icon_get_names(icon: *GThemedIcon): **gchar <cimport,nodecl> end
global function g_threaded_socket_service_get_type(): GType <cimport,nodecl> end
global function g_threaded_socket_service_new(max_threads: cint): *GSocketService <cimport,nodecl> end
global function g_tls_backend_get_type(): GType <cimport,nodecl> end
global function g_tls_backend_get_default(): *GTlsBackend <cimport,nodecl> end
global function g_tls_backend_get_default_database(backend: *GTlsBackend): *GTlsDatabase <cimport,nodecl> end
global function g_tls_backend_set_default_database(backend: *GTlsBackend, database: *GTlsDatabase): void <cimport,nodecl> end
global function g_tls_backend_supports_tls(backend: *GTlsBackend): gboolean <cimport,nodecl> end
global function g_tls_backend_supports_dtls(backend: *GTlsBackend): gboolean <cimport,nodecl> end
global function g_tls_backend_get_certificate_type(backend: *GTlsBackend): GType <cimport,nodecl> end
global function g_tls_backend_get_client_connection_type(backend: *GTlsBackend): GType <cimport,nodecl> end
global function g_tls_backend_get_server_connection_type(backend: *GTlsBackend): GType <cimport,nodecl> end
global function g_tls_backend_get_file_database_type(backend: *GTlsBackend): GType <cimport,nodecl> end
global function g_tls_backend_get_dtls_client_connection_type(backend: *GTlsBackend): GType <cimport,nodecl> end
global function g_tls_backend_get_dtls_server_connection_type(backend: *GTlsBackend): GType <cimport,nodecl> end
global function g_tls_certificate_get_type(): GType <cimport,nodecl> end
global function g_tls_certificate_new_from_pem(data: *gchar, length: gssize, error: **GError): *GTlsCertificate <cimport,nodecl> end
global function g_tls_certificate_new_from_file(file: *gchar, error: **GError): *GTlsCertificate <cimport,nodecl> end
global function g_tls_certificate_new_from_files(cert_file: *gchar, key_file: *gchar, error: **GError): *GTlsCertificate <cimport,nodecl> end
global function g_tls_certificate_new_from_pkcs11_uris(pkcs11_uri: *gchar, private_key_pkcs11_uri: *gchar, error: **GError): *GTlsCertificate <cimport,nodecl> end
global function g_tls_certificate_list_new_from_file(file: *gchar, error: **GError): *GList <cimport,nodecl> end
global function g_tls_certificate_get_issuer(cert: *GTlsCertificate): *GTlsCertificate <cimport,nodecl> end
global function g_tls_certificate_verify(cert: *GTlsCertificate, identity: *GSocketConnectable, trusted_ca: *GTlsCertificate): GTlsCertificateFlags <cimport,nodecl> end
global function g_tls_certificate_is_same(cert_one: *GTlsCertificate, cert_two: *GTlsCertificate): gboolean <cimport,nodecl> end
global function g_tls_certificate_get_not_valid_before(cert: *GTlsCertificate): *GDateTime <cimport,nodecl> end
global function g_tls_certificate_get_not_valid_after(cert: *GTlsCertificate): *GDateTime <cimport,nodecl> end
global function g_tls_certificate_get_subject_name(cert: *GTlsCertificate): *gchar <cimport,nodecl> end
global function g_tls_certificate_get_issuer_name(cert: *GTlsCertificate): *gchar <cimport,nodecl> end
global function g_tls_certificate_get_dns_names(cert: *GTlsCertificate): *GPtrArray <cimport,nodecl> end
global function g_tls_certificate_get_ip_addresses(cert: *GTlsCertificate): *GPtrArray <cimport,nodecl> end
global function g_tls_connection_get_type(): GType <cimport,nodecl> end
global function g_tls_connection_set_use_system_certdb(conn: *GTlsConnection, use_system_certdb: gboolean): void <cimport,nodecl> end
global function g_tls_connection_get_use_system_certdb(conn: *GTlsConnection): gboolean <cimport,nodecl> end
global function g_tls_connection_set_database(conn: *GTlsConnection, database: *GTlsDatabase): void <cimport,nodecl> end
global function g_tls_connection_get_database(conn: *GTlsConnection): *GTlsDatabase <cimport,nodecl> end
global function g_tls_connection_set_certificate(conn: *GTlsConnection, certificate: *GTlsCertificate): void <cimport,nodecl> end
global function g_tls_connection_get_certificate(conn: *GTlsConnection): *GTlsCertificate <cimport,nodecl> end
global function g_tls_connection_set_interaction(conn: *GTlsConnection, interaction: *GTlsInteraction): void <cimport,nodecl> end
global function g_tls_connection_get_interaction(conn: *GTlsConnection): *GTlsInteraction <cimport,nodecl> end
global function g_tls_connection_get_peer_certificate(conn: *GTlsConnection): *GTlsCertificate <cimport,nodecl> end
global function g_tls_connection_get_peer_certificate_errors(conn: *GTlsConnection): GTlsCertificateFlags <cimport,nodecl> end
global function g_tls_connection_set_require_close_notify(conn: *GTlsConnection, require_close_notify: gboolean): void <cimport,nodecl> end
global function g_tls_connection_get_require_close_notify(conn: *GTlsConnection): gboolean <cimport,nodecl> end
global function g_tls_connection_set_rehandshake_mode(conn: *GTlsConnection, mode: GTlsRehandshakeMode): void <cimport,nodecl> end
global function g_tls_connection_get_rehandshake_mode(conn: *GTlsConnection): GTlsRehandshakeMode <cimport,nodecl> end
global function g_tls_connection_set_advertised_protocols(conn: *GTlsConnection, protocols: **gchar): void <cimport,nodecl> end
global function g_tls_connection_get_negotiated_protocol(conn: *GTlsConnection): *gchar <cimport,nodecl> end
global function g_tls_connection_get_channel_binding_data(conn: *GTlsConnection, type: GTlsChannelBindingType, data: *GByteArray, error: **GError): gboolean <cimport,nodecl> end
global function g_tls_connection_handshake(conn: *GTlsConnection, cancellable: *GCancellable, error: **GError): gboolean <cimport,nodecl> end
global function g_tls_connection_handshake_async(conn: *GTlsConnection, io_priority: cint, cancellable: *GCancellable, callback: GAsyncReadyCallback, user_data: gpointer): void <cimport,nodecl> end
global function g_tls_connection_handshake_finish(conn: *GTlsConnection, result: *GAsyncResult, error: **GError): gboolean <cimport,nodecl> end
global function g_tls_connection_get_protocol_version(conn: *GTlsConnection): GTlsProtocolVersion <cimport,nodecl> end
global function g_tls_connection_get_ciphersuite_name(conn: *GTlsConnection): *gchar <cimport,nodecl> end
global function g_tls_error_quark(): GQuark <cimport,nodecl> end
global function g_tls_channel_binding_error_quark(): GQuark <cimport,nodecl> end
global function g_tls_connection_emit_accept_certificate(conn: *GTlsConnection, peer_cert: *GTlsCertificate, errors: GTlsCertificateFlags): gboolean <cimport,nodecl> end
global function g_tls_client_connection_get_type(): GType <cimport,nodecl> end
global function g_tls_client_connection_new(base_io_stream: *GIOStream, server_identity: *GSocketConnectable, error: **GError): *GIOStream <cimport,nodecl> end
global function g_tls_client_connection_get_validation_flags(conn: *GTlsClientConnection): GTlsCertificateFlags <cimport,nodecl> end
global function g_tls_client_connection_set_validation_flags(conn: *GTlsClientConnection, flags: GTlsCertificateFlags): void <cimport,nodecl> end
global function g_tls_client_connection_get_server_identity(conn: *GTlsClientConnection): *GSocketConnectable <cimport,nodecl> end
global function g_tls_client_connection_set_server_identity(conn: *GTlsClientConnection, identity: *GSocketConnectable): void <cimport,nodecl> end
global function g_tls_client_connection_get_use_ssl3(conn: *GTlsClientConnection): gboolean <cimport,nodecl> end
global function g_tls_client_connection_set_use_ssl3(conn: *GTlsClientConnection, use_ssl3: gboolean): void <cimport,nodecl> end
global function g_tls_client_connection_get_accepted_cas(conn: *GTlsClientConnection): *GList <cimport,nodecl> end
global function g_tls_client_connection_copy_session_state(conn: *GTlsClientConnection, source: *GTlsClientConnection): void <cimport,nodecl> end
global function g_tls_database_get_type(): GType <cimport,nodecl> end
global function g_tls_database_verify_chain(self: *GTlsDatabase, chain: *GTlsCertificate, purpose: *gchar, identity: *GSocketConnectable, interaction: *GTlsInteraction, flags: GTlsDatabaseVerifyFlags, cancellable: *GCancellable, error: **GError): GTlsCertificateFlags <cimport,nodecl> end
global function g_tls_database_verify_chain_async(self: *GTlsDatabase, chain: *GTlsCertificate, purpose: *gchar, identity: *GSocketConnectable, interaction: *GTlsInteraction, flags: GTlsDatabaseVerifyFlags, cancellable: *GCancellable, callback: GAsyncReadyCallback, user_data: gpointer): void <cimport,nodecl> end
global function g_tls_database_verify_chain_finish(self: *GTlsDatabase, result: *GAsyncResult, error: **GError): GTlsCertificateFlags <cimport,nodecl> end
global function g_tls_database_create_certificate_handle(self: *GTlsDatabase, certificate: *GTlsCertificate): *gchar <cimport,nodecl> end
global function g_tls_database_lookup_certificate_for_handle(self: *GTlsDatabase, handle: *gchar, interaction: *GTlsInteraction, flags: GTlsDatabaseLookupFlags, cancellable: *GCancellable, error: **GError): *GTlsCertificate <cimport,nodecl> end
global function g_tls_database_lookup_certificate_for_handle_async(self: *GTlsDatabase, handle: *gchar, interaction: *GTlsInteraction, flags: GTlsDatabaseLookupFlags, cancellable: *GCancellable, callback: GAsyncReadyCallback, user_data: gpointer): void <cimport,nodecl> end
global function g_tls_database_lookup_certificate_for_handle_finish(self: *GTlsDatabase, result: *GAsyncResult, error: **GError): *GTlsCertificate <cimport,nodecl> end
global function g_tls_database_lookup_certificate_issuer(self: *GTlsDatabase, certificate: *GTlsCertificate, interaction: *GTlsInteraction, flags: GTlsDatabaseLookupFlags, cancellable: *GCancellable, error: **GError): *GTlsCertificate <cimport,nodecl> end
global function g_tls_database_lookup_certificate_issuer_async(self: *GTlsDatabase, certificate: *GTlsCertificate, interaction: *GTlsInteraction, flags: GTlsDatabaseLookupFlags, cancellable: *GCancellable, callback: GAsyncReadyCallback, user_data: gpointer): void <cimport,nodecl> end
global function g_tls_database_lookup_certificate_issuer_finish(self: *GTlsDatabase, result: *GAsyncResult, error: **GError): *GTlsCertificate <cimport,nodecl> end
global function g_tls_database_lookup_certificates_issued_by(self: *GTlsDatabase, issuer_raw_dn: *GByteArray, interaction: *GTlsInteraction, flags: GTlsDatabaseLookupFlags, cancellable: *GCancellable, error: **GError): *GList <cimport,nodecl> end
global function g_tls_database_lookup_certificates_issued_by_async(self: *GTlsDatabase, issuer_raw_dn: *GByteArray, interaction: *GTlsInteraction, flags: GTlsDatabaseLookupFlags, cancellable: *GCancellable, callback: GAsyncReadyCallback, user_data: gpointer): void <cimport,nodecl> end
global function g_tls_database_lookup_certificates_issued_by_finish(self: *GTlsDatabase, result: *GAsyncResult, error: **GError): *GList <cimport,nodecl> end
global function g_tls_file_database_get_type(): GType <cimport,nodecl> end
global function g_tls_file_database_new(anchors: *gchar, error: **GError): *GTlsDatabase <cimport,nodecl> end
global function g_tls_interaction_get_type(): GType <cimport,nodecl> end
global function g_tls_interaction_invoke_ask_password(interaction: *GTlsInteraction, password: *GTlsPassword, cancellable: *GCancellable, error: **GError): GTlsInteractionResult <cimport,nodecl> end
global function g_tls_interaction_ask_password(interaction: *GTlsInteraction, password: *GTlsPassword, cancellable: *GCancellable, error: **GError): GTlsInteractionResult <cimport,nodecl> end
global function g_tls_interaction_ask_password_async(interaction: *GTlsInteraction, password: *GTlsPassword, cancellable: *GCancellable, callback: GAsyncReadyCallback, user_data: gpointer): void <cimport,nodecl> end
global function g_tls_interaction_ask_password_finish(interaction: *GTlsInteraction, result: *GAsyncResult, error: **GError): GTlsInteractionResult <cimport,nodecl> end
global function g_tls_interaction_invoke_request_certificate(interaction: *GTlsInteraction, connection: *GTlsConnection, flags: GTlsCertificateRequestFlags, cancellable: *GCancellable, error: **GError): GTlsInteractionResult <cimport,nodecl> end
global function g_tls_interaction_request_certificate(interaction: *GTlsInteraction, connection: *GTlsConnection, flags: GTlsCertificateRequestFlags, cancellable: *GCancellable, error: **GError): GTlsInteractionResult <cimport,nodecl> end
global function g_tls_interaction_request_certificate_async(interaction: *GTlsInteraction, connection: *GTlsConnection, flags: GTlsCertificateRequestFlags, cancellable: *GCancellable, callback: GAsyncReadyCallback, user_data: gpointer): void <cimport,nodecl> end
global function g_tls_interaction_request_certificate_finish(interaction: *GTlsInteraction, result: *GAsyncResult, error: **GError): GTlsInteractionResult <cimport,nodecl> end
global function g_tls_password_get_type(): GType <cimport,nodecl> end
global function g_tls_password_new(flags: GTlsPasswordFlags, description: *gchar): *GTlsPassword <cimport,nodecl> end
global function g_tls_password_get_value(password: *GTlsPassword, length: *gsize): *guchar <cimport,nodecl> end
global function g_tls_password_set_value(password: *GTlsPassword, value: *guchar, length: gssize): void <cimport,nodecl> end
global function g_tls_password_set_value_full(password: *GTlsPassword, value: *guchar, length: gssize, destroy: GDestroyNotify): void <cimport,nodecl> end
global function g_tls_password_get_flags(password: *GTlsPassword): GTlsPasswordFlags <cimport,nodecl> end
global function g_tls_password_set_flags(password: *GTlsPassword, flags: GTlsPasswordFlags): void <cimport,nodecl> end
global function g_tls_password_get_description(password: *GTlsPassword): *gchar <cimport,nodecl> end
global function g_tls_password_set_description(password: *GTlsPassword, description: *gchar): void <cimport,nodecl> end
global function g_tls_password_get_warning(password: *GTlsPassword): *gchar <cimport,nodecl> end
global function g_tls_password_set_warning(password: *GTlsPassword, warning: *gchar): void <cimport,nodecl> end
global function g_tls_server_connection_get_type(): GType <cimport,nodecl> end
global function g_tls_server_connection_new(base_io_stream: *GIOStream, certificate: *GTlsCertificate, error: **GError): *GIOStream <cimport,nodecl> end
global function g_vfs_get_type(): GType <cimport,nodecl> end
global function g_vfs_is_active(vfs: *GVfs): gboolean <cimport,nodecl> end
global function g_vfs_get_file_for_path(vfs: *GVfs, path: cstring): *GFile <cimport,nodecl> end
global function g_vfs_get_file_for_uri(vfs: *GVfs, uri: cstring): *GFile <cimport,nodecl> end
global function g_vfs_get_supported_uri_schemes(vfs: *GVfs): **gchar <cimport,nodecl> end
global function g_vfs_parse_name(vfs: *GVfs, parse_name: cstring): *GFile <cimport,nodecl> end
global function g_vfs_get_default(): *GVfs <cimport,nodecl> end
global function g_vfs_get_local(): *GVfs <cimport,nodecl> end
global function g_vfs_register_uri_scheme(vfs: *GVfs, scheme: cstring, uri_func: GVfsFileLookupFunc, uri_data: gpointer, uri_destroy: GDestroyNotify, parse_name_func: GVfsFileLookupFunc, parse_name_data: gpointer, parse_name_destroy: GDestroyNotify): gboolean <cimport,nodecl> end
global function g_vfs_unregister_uri_scheme(vfs: *GVfs, scheme: cstring): gboolean <cimport,nodecl> end
global function g_volume_get_type(): GType <cimport,nodecl> end
global function g_volume_get_name(volume: *GVolume): cstring <cimport,nodecl> end
global function g_volume_get_icon(volume: *GVolume): *GIcon <cimport,nodecl> end
global function g_volume_get_symbolic_icon(volume: *GVolume): *GIcon <cimport,nodecl> end
global function g_volume_get_uuid(volume: *GVolume): cstring <cimport,nodecl> end
global function g_volume_get_drive(volume: *GVolume): *GDrive <cimport,nodecl> end
global function g_volume_get_mount(volume: *GVolume): *GMount <cimport,nodecl> end
global function g_volume_can_mount(volume: *GVolume): gboolean <cimport,nodecl> end
global function g_volume_can_eject(volume: *GVolume): gboolean <cimport,nodecl> end
global function g_volume_should_automount(volume: *GVolume): gboolean <cimport,nodecl> end
global function g_volume_mount(volume: *GVolume, flags: GMountMountFlags, mount_operation: *GMountOperation, cancellable: *GCancellable, callback: GAsyncReadyCallback, user_data: gpointer): void <cimport,nodecl> end
global function g_volume_mount_finish(volume: *GVolume, result: *GAsyncResult, error: **GError): gboolean <cimport,nodecl> end
global function g_volume_eject(volume: *GVolume, flags: GMountUnmountFlags, cancellable: *GCancellable, callback: GAsyncReadyCallback, user_data: gpointer): void <cimport,nodecl> end
global function g_volume_eject_finish(volume: *GVolume, result: *GAsyncResult, error: **GError): gboolean <cimport,nodecl> end
global function g_volume_get_identifier(volume: *GVolume, kind: cstring): cstring <cimport,nodecl> end
global function g_volume_enumerate_identifiers(volume: *GVolume): *cstring <cimport,nodecl> end
global function g_volume_get_activation_root(volume: *GVolume): *GFile <cimport,nodecl> end
global function g_volume_eject_with_operation(volume: *GVolume, flags: GMountUnmountFlags, mount_operation: *GMountOperation, cancellable: *GCancellable, callback: GAsyncReadyCallback, user_data: gpointer): void <cimport,nodecl> end
global function g_volume_eject_with_operation_finish(volume: *GVolume, result: *GAsyncResult, error: **GError): gboolean <cimport,nodecl> end
global function g_volume_get_sort_key(volume: *GVolume): *gchar <cimport,nodecl> end
global function g_zlib_compressor_get_type(): GType <cimport,nodecl> end
global function g_zlib_compressor_new(format: GZlibCompressorFormat, level: cint): *GZlibCompressor <cimport,nodecl> end
global function g_zlib_compressor_get_file_info(compressor: *GZlibCompressor): *GFileInfo <cimport,nodecl> end
global function g_zlib_compressor_set_file_info(compressor: *GZlibCompressor, file_info: *GFileInfo): void <cimport,nodecl> end
global function g_zlib_decompressor_get_type(): GType <cimport,nodecl> end
global function g_zlib_decompressor_new(format: GZlibCompressorFormat): *GZlibDecompressor <cimport,nodecl> end
global function g_zlib_decompressor_get_file_info(decompressor: *GZlibDecompressor): *GFileInfo <cimport,nodecl> end
global function glib_autoptr_clear_GAction(_ptr: *GAction): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GAction(_ptr: **GAction): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GAction(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GAction(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GAction(_q: **GQueue): void <cimport,nodecl> end
global function glib_autoptr_clear_GActionMap(_ptr: *GActionMap): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GActionMap(_ptr: **GActionMap): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GActionMap(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GActionMap(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GActionMap(_q: **GQueue): void <cimport,nodecl> end
global function glib_autoptr_clear_GAppInfo(_ptr: *GAppInfo): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GAppInfo(_ptr: **GAppInfo): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GAppInfo(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GAppInfo(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GAppInfo(_q: **GQueue): void <cimport,nodecl> end
global function glib_autoptr_clear_GAppLaunchContext(_ptr: *GAppLaunchContext): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GAppLaunchContext(_ptr: **GAppLaunchContext): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GAppLaunchContext(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GAppLaunchContext(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GAppLaunchContext(_q: **GQueue): void <cimport,nodecl> end
global function glib_autoptr_clear_GAppInfoMonitor(_ptr: *GAppInfoMonitor): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GAppInfoMonitor(_ptr: **GAppInfoMonitor): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GAppInfoMonitor(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GAppInfoMonitor(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GAppInfoMonitor(_q: **GQueue): void <cimport,nodecl> end
global function glib_autoptr_clear_GApplicationCommandLine(_ptr: *GApplicationCommandLine): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GApplicationCommandLine(_ptr: **GApplicationCommandLine): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GApplicationCommandLine(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GApplicationCommandLine(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GApplicationCommandLine(_q: **GQueue): void <cimport,nodecl> end
global function glib_autoptr_clear_GApplication(_ptr: *GApplication): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GApplication(_ptr: **GApplication): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GApplication(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GApplication(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GApplication(_q: **GQueue): void <cimport,nodecl> end
global function glib_autoptr_clear_GAsyncInitable(_ptr: *GAsyncInitable): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GAsyncInitable(_ptr: **GAsyncInitable): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GAsyncInitable(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GAsyncInitable(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GAsyncInitable(_q: **GQueue): void <cimport,nodecl> end
global function glib_autoptr_clear_GAsyncResult(_ptr: *GAsyncResult): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GAsyncResult(_ptr: **GAsyncResult): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GAsyncResult(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GAsyncResult(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GAsyncResult(_q: **GQueue): void <cimport,nodecl> end
global function glib_autoptr_clear_GBufferedInputStream(_ptr: *GBufferedInputStream): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GBufferedInputStream(_ptr: **GBufferedInputStream): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GBufferedInputStream(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GBufferedInputStream(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GBufferedInputStream(_q: **GQueue): void <cimport,nodecl> end
global function glib_autoptr_clear_GBufferedOutputStream(_ptr: *GBufferedOutputStream): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GBufferedOutputStream(_ptr: **GBufferedOutputStream): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GBufferedOutputStream(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GBufferedOutputStream(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GBufferedOutputStream(_q: **GQueue): void <cimport,nodecl> end
global function glib_autoptr_clear_GBytesIcon(_ptr: *GBytesIcon): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GBytesIcon(_ptr: **GBytesIcon): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GBytesIcon(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GBytesIcon(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GBytesIcon(_q: **GQueue): void <cimport,nodecl> end
global function glib_autoptr_clear_GCancellable(_ptr: *GCancellable): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GCancellable(_ptr: **GCancellable): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GCancellable(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GCancellable(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GCancellable(_q: **GQueue): void <cimport,nodecl> end
global function glib_autoptr_clear_GCharsetConverter(_ptr: *GCharsetConverter): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GCharsetConverter(_ptr: **GCharsetConverter): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GCharsetConverter(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GCharsetConverter(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GCharsetConverter(_q: **GQueue): void <cimport,nodecl> end
global function glib_autoptr_clear_GConverter(_ptr: *GConverter): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GConverter(_ptr: **GConverter): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GConverter(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GConverter(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GConverter(_q: **GQueue): void <cimport,nodecl> end
global function glib_autoptr_clear_GConverterInputStream(_ptr: *GConverterInputStream): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GConverterInputStream(_ptr: **GConverterInputStream): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GConverterInputStream(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GConverterInputStream(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GConverterInputStream(_q: **GQueue): void <cimport,nodecl> end
global function glib_autoptr_clear_GConverterOutputStream(_ptr: *GConverterOutputStream): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GConverterOutputStream(_ptr: **GConverterOutputStream): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GConverterOutputStream(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GConverterOutputStream(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GConverterOutputStream(_q: **GQueue): void <cimport,nodecl> end
global function glib_autoptr_clear_GCredentials(_ptr: *GCredentials): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GCredentials(_ptr: **GCredentials): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GCredentials(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GCredentials(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GCredentials(_q: **GQueue): void <cimport,nodecl> end
global function glib_autoptr_clear_GDatagramBased(_ptr: *GDatagramBased): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GDatagramBased(_ptr: **GDatagramBased): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GDatagramBased(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GDatagramBased(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GDatagramBased(_q: **GQueue): void <cimport,nodecl> end
global function glib_autoptr_clear_GDataInputStream(_ptr: *GDataInputStream): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GDataInputStream(_ptr: **GDataInputStream): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GDataInputStream(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GDataInputStream(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GDataInputStream(_q: **GQueue): void <cimport,nodecl> end
global function glib_autoptr_clear_GDataOutputStream(_ptr: *GDataOutputStream): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GDataOutputStream(_ptr: **GDataOutputStream): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GDataOutputStream(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GDataOutputStream(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GDataOutputStream(_q: **GQueue): void <cimport,nodecl> end
global function glib_autoptr_clear_GDBusActionGroup(_ptr: *GDBusActionGroup): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GDBusActionGroup(_ptr: **GDBusActionGroup): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GDBusActionGroup(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GDBusActionGroup(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GDBusActionGroup(_q: **GQueue): void <cimport,nodecl> end
global function glib_autoptr_clear_GDBusAuthObserver(_ptr: *GDBusAuthObserver): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GDBusAuthObserver(_ptr: **GDBusAuthObserver): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GDBusAuthObserver(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GDBusAuthObserver(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GDBusAuthObserver(_q: **GQueue): void <cimport,nodecl> end
global function glib_autoptr_clear_GDBusConnection(_ptr: *GDBusConnection): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GDBusConnection(_ptr: **GDBusConnection): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GDBusConnection(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GDBusConnection(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GDBusConnection(_q: **GQueue): void <cimport,nodecl> end
global function glib_autoptr_clear_GDBusInterface(_ptr: *GDBusInterface): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GDBusInterface(_ptr: **GDBusInterface): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GDBusInterface(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GDBusInterface(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GDBusInterface(_q: **GQueue): void <cimport,nodecl> end
global function glib_autoptr_clear_GDBusInterfaceSkeleton(_ptr: *GDBusInterfaceSkeleton): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GDBusInterfaceSkeleton(_ptr: **GDBusInterfaceSkeleton): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GDBusInterfaceSkeleton(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GDBusInterfaceSkeleton(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GDBusInterfaceSkeleton(_q: **GQueue): void <cimport,nodecl> end
global function glib_autoptr_clear_GDBusMenuModel(_ptr: *GDBusMenuModel): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GDBusMenuModel(_ptr: **GDBusMenuModel): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GDBusMenuModel(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GDBusMenuModel(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GDBusMenuModel(_q: **GQueue): void <cimport,nodecl> end
global function glib_autoptr_clear_GDBusMessage(_ptr: *GDBusMessage): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GDBusMessage(_ptr: **GDBusMessage): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GDBusMessage(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GDBusMessage(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GDBusMessage(_q: **GQueue): void <cimport,nodecl> end
global function glib_autoptr_clear_GDBusMethodInvocation(_ptr: *GDBusMethodInvocation): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GDBusMethodInvocation(_ptr: **GDBusMethodInvocation): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GDBusMethodInvocation(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GDBusMethodInvocation(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GDBusMethodInvocation(_q: **GQueue): void <cimport,nodecl> end
global function glib_autoptr_clear_GDBusNodeInfo(_ptr: *GDBusNodeInfo): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GDBusNodeInfo(_ptr: **GDBusNodeInfo): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GDBusNodeInfo(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GDBusNodeInfo(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GDBusNodeInfo(_q: **GQueue): void <cimport,nodecl> end
global function glib_autoptr_clear_GDBusObject(_ptr: *GDBusObject): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GDBusObject(_ptr: **GDBusObject): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GDBusObject(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GDBusObject(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GDBusObject(_q: **GQueue): void <cimport,nodecl> end
global function glib_autoptr_clear_GDBusObjectManagerClient(_ptr: *GDBusObjectManagerClient): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GDBusObjectManagerClient(_ptr: **GDBusObjectManagerClient): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GDBusObjectManagerClient(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GDBusObjectManagerClient(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GDBusObjectManagerClient(_q: **GQueue): void <cimport,nodecl> end
global function glib_autoptr_clear_GDBusObjectManager(_ptr: *GDBusObjectManager): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GDBusObjectManager(_ptr: **GDBusObjectManager): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GDBusObjectManager(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GDBusObjectManager(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GDBusObjectManager(_q: **GQueue): void <cimport,nodecl> end
global function glib_autoptr_clear_GDBusObjectManagerServer(_ptr: *GDBusObjectManagerServer): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GDBusObjectManagerServer(_ptr: **GDBusObjectManagerServer): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GDBusObjectManagerServer(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GDBusObjectManagerServer(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GDBusObjectManagerServer(_q: **GQueue): void <cimport,nodecl> end
global function glib_autoptr_clear_GDBusObjectProxy(_ptr: *GDBusObjectProxy): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GDBusObjectProxy(_ptr: **GDBusObjectProxy): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GDBusObjectProxy(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GDBusObjectProxy(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GDBusObjectProxy(_q: **GQueue): void <cimport,nodecl> end
global function glib_autoptr_clear_GDBusObjectSkeleton(_ptr: *GDBusObjectSkeleton): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GDBusObjectSkeleton(_ptr: **GDBusObjectSkeleton): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GDBusObjectSkeleton(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GDBusObjectSkeleton(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GDBusObjectSkeleton(_q: **GQueue): void <cimport,nodecl> end
global function glib_autoptr_clear_GDBusProxy(_ptr: *GDBusProxy): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GDBusProxy(_ptr: **GDBusProxy): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GDBusProxy(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GDBusProxy(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GDBusProxy(_q: **GQueue): void <cimport,nodecl> end
global function glib_autoptr_clear_GDBusServer(_ptr: *GDBusServer): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GDBusServer(_ptr: **GDBusServer): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GDBusServer(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GDBusServer(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GDBusServer(_q: **GQueue): void <cimport,nodecl> end
global function glib_autoptr_clear_GDrive(_ptr: *GDrive): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GDrive(_ptr: **GDrive): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GDrive(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GDrive(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GDrive(_q: **GQueue): void <cimport,nodecl> end
global function glib_autoptr_clear_GEmblemedIcon(_ptr: *GEmblemedIcon): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GEmblemedIcon(_ptr: **GEmblemedIcon): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GEmblemedIcon(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GEmblemedIcon(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GEmblemedIcon(_q: **GQueue): void <cimport,nodecl> end
global function glib_autoptr_clear_GEmblem(_ptr: *GEmblem): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GEmblem(_ptr: **GEmblem): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GEmblem(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GEmblem(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GEmblem(_q: **GQueue): void <cimport,nodecl> end
global function glib_autoptr_clear_GFileEnumerator(_ptr: *GFileEnumerator): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GFileEnumerator(_ptr: **GFileEnumerator): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GFileEnumerator(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GFileEnumerator(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GFileEnumerator(_q: **GQueue): void <cimport,nodecl> end
global function glib_autoptr_clear_GFile(_ptr: *GFile): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GFile(_ptr: **GFile): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GFile(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GFile(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GFile(_q: **GQueue): void <cimport,nodecl> end
global function glib_autoptr_clear_GFileAttributeInfoList(_ptr: *GFileAttributeInfoList): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GFileAttributeInfoList(_ptr: **GFileAttributeInfoList): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GFileAttributeInfoList(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GFileAttributeInfoList(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GFileAttributeInfoList(_q: **GQueue): void <cimport,nodecl> end
global function glib_autoptr_clear_GFileIcon(_ptr: *GFileIcon): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GFileIcon(_ptr: **GFileIcon): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GFileIcon(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GFileIcon(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GFileIcon(_q: **GQueue): void <cimport,nodecl> end
global function glib_autoptr_clear_GFileInfo(_ptr: *GFileInfo): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GFileInfo(_ptr: **GFileInfo): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GFileInfo(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GFileInfo(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GFileInfo(_q: **GQueue): void <cimport,nodecl> end
global function glib_autoptr_clear_GFileInputStream(_ptr: *GFileInputStream): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GFileInputStream(_ptr: **GFileInputStream): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GFileInputStream(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GFileInputStream(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GFileInputStream(_q: **GQueue): void <cimport,nodecl> end
global function glib_autoptr_clear_GFileIOStream(_ptr: *GFileIOStream): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GFileIOStream(_ptr: **GFileIOStream): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GFileIOStream(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GFileIOStream(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GFileIOStream(_q: **GQueue): void <cimport,nodecl> end
global function glib_autoptr_clear_GFileMonitor(_ptr: *GFileMonitor): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GFileMonitor(_ptr: **GFileMonitor): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GFileMonitor(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GFileMonitor(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GFileMonitor(_q: **GQueue): void <cimport,nodecl> end
global function glib_autoptr_clear_GFilenameCompleter(_ptr: *GFilenameCompleter): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GFilenameCompleter(_ptr: **GFilenameCompleter): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GFilenameCompleter(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GFilenameCompleter(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GFilenameCompleter(_q: **GQueue): void <cimport,nodecl> end
global function glib_autoptr_clear_GFileOutputStream(_ptr: *GFileOutputStream): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GFileOutputStream(_ptr: **GFileOutputStream): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GFileOutputStream(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GFileOutputStream(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GFileOutputStream(_q: **GQueue): void <cimport,nodecl> end
global function glib_autoptr_clear_GFilterInputStream(_ptr: *GFilterInputStream): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GFilterInputStream(_ptr: **GFilterInputStream): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GFilterInputStream(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GFilterInputStream(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GFilterInputStream(_q: **GQueue): void <cimport,nodecl> end
global function glib_autoptr_clear_GFilterOutputStream(_ptr: *GFilterOutputStream): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GFilterOutputStream(_ptr: **GFilterOutputStream): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GFilterOutputStream(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GFilterOutputStream(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GFilterOutputStream(_q: **GQueue): void <cimport,nodecl> end
global function glib_autoptr_clear_GIcon(_ptr: *GIcon): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GIcon(_ptr: **GIcon): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GIcon(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GIcon(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GIcon(_q: **GQueue): void <cimport,nodecl> end
global function glib_autoptr_clear_GInetAddress(_ptr: *GInetAddress): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GInetAddress(_ptr: **GInetAddress): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GInetAddress(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GInetAddress(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GInetAddress(_q: **GQueue): void <cimport,nodecl> end
global function glib_autoptr_clear_GInetAddressMask(_ptr: *GInetAddressMask): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GInetAddressMask(_ptr: **GInetAddressMask): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GInetAddressMask(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GInetAddressMask(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GInetAddressMask(_q: **GQueue): void <cimport,nodecl> end
global function glib_autoptr_clear_GInetSocketAddress(_ptr: *GInetSocketAddress): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GInetSocketAddress(_ptr: **GInetSocketAddress): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GInetSocketAddress(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GInetSocketAddress(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GInetSocketAddress(_q: **GQueue): void <cimport,nodecl> end
global function glib_autoptr_clear_GInitable(_ptr: *GInitable): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GInitable(_ptr: **GInitable): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GInitable(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GInitable(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GInitable(_q: **GQueue): void <cimport,nodecl> end
global function glib_autoptr_clear_GInputStream(_ptr: *GInputStream): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GInputStream(_ptr: **GInputStream): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GInputStream(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GInputStream(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GInputStream(_q: **GQueue): void <cimport,nodecl> end
global function glib_autoptr_clear_GIOModule(_ptr: *GIOModule): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GIOModule(_ptr: **GIOModule): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GIOModule(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GIOModule(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GIOModule(_q: **GQueue): void <cimport,nodecl> end
global function glib_autoptr_clear_GIOStream(_ptr: *GIOStream): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GIOStream(_ptr: **GIOStream): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GIOStream(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GIOStream(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GIOStream(_q: **GQueue): void <cimport,nodecl> end
global function glib_autoptr_clear_GLoadableIcon(_ptr: *GLoadableIcon): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GLoadableIcon(_ptr: **GLoadableIcon): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GLoadableIcon(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GLoadableIcon(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GLoadableIcon(_q: **GQueue): void <cimport,nodecl> end
global function glib_autoptr_clear_GMemoryInputStream(_ptr: *GMemoryInputStream): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GMemoryInputStream(_ptr: **GMemoryInputStream): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GMemoryInputStream(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GMemoryInputStream(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GMemoryInputStream(_q: **GQueue): void <cimport,nodecl> end
global function glib_autoptr_clear_GMemoryOutputStream(_ptr: *GMemoryOutputStream): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GMemoryOutputStream(_ptr: **GMemoryOutputStream): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GMemoryOutputStream(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GMemoryOutputStream(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GMemoryOutputStream(_q: **GQueue): void <cimport,nodecl> end
global function glib_autoptr_clear_GMenu(_ptr: *GMenu): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GMenu(_ptr: **GMenu): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GMenu(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GMenu(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GMenu(_q: **GQueue): void <cimport,nodecl> end
global function glib_autoptr_clear_GMenuItem(_ptr: *GMenuItem): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GMenuItem(_ptr: **GMenuItem): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GMenuItem(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GMenuItem(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GMenuItem(_q: **GQueue): void <cimport,nodecl> end
global function glib_autoptr_clear_GMenuModel(_ptr: *GMenuModel): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GMenuModel(_ptr: **GMenuModel): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GMenuModel(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GMenuModel(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GMenuModel(_q: **GQueue): void <cimport,nodecl> end
global function glib_autoptr_clear_GMenuAttributeIter(_ptr: *GMenuAttributeIter): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GMenuAttributeIter(_ptr: **GMenuAttributeIter): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GMenuAttributeIter(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GMenuAttributeIter(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GMenuAttributeIter(_q: **GQueue): void <cimport,nodecl> end
global function glib_autoptr_clear_GMenuLinkIter(_ptr: *GMenuLinkIter): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GMenuLinkIter(_ptr: **GMenuLinkIter): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GMenuLinkIter(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GMenuLinkIter(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GMenuLinkIter(_q: **GQueue): void <cimport,nodecl> end
global function glib_autoptr_clear_GMount(_ptr: *GMount): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GMount(_ptr: **GMount): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GMount(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GMount(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GMount(_q: **GQueue): void <cimport,nodecl> end
global function glib_autoptr_clear_GMountOperation(_ptr: *GMountOperation): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GMountOperation(_ptr: **GMountOperation): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GMountOperation(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GMountOperation(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GMountOperation(_q: **GQueue): void <cimport,nodecl> end
global function glib_autoptr_clear_GNativeVolumeMonitor(_ptr: *GNativeVolumeMonitor): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GNativeVolumeMonitor(_ptr: **GNativeVolumeMonitor): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GNativeVolumeMonitor(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GNativeVolumeMonitor(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GNativeVolumeMonitor(_q: **GQueue): void <cimport,nodecl> end
global function glib_autoptr_clear_GNetworkAddress(_ptr: *GNetworkAddress): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GNetworkAddress(_ptr: **GNetworkAddress): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GNetworkAddress(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GNetworkAddress(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GNetworkAddress(_q: **GQueue): void <cimport,nodecl> end
global function glib_autoptr_clear_GNetworkMonitor(_ptr: *GNetworkMonitor): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GNetworkMonitor(_ptr: **GNetworkMonitor): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GNetworkMonitor(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GNetworkMonitor(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GNetworkMonitor(_q: **GQueue): void <cimport,nodecl> end
global function glib_autoptr_clear_GNetworkService(_ptr: *GNetworkService): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GNetworkService(_ptr: **GNetworkService): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GNetworkService(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GNetworkService(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GNetworkService(_q: **GQueue): void <cimport,nodecl> end
global function glib_autoptr_clear_GNotification(_ptr: *GNotification): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GNotification(_ptr: **GNotification): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GNotification(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GNotification(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GNotification(_q: **GQueue): void <cimport,nodecl> end
global function glib_autoptr_clear_GOutputStream(_ptr: *GOutputStream): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GOutputStream(_ptr: **GOutputStream): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GOutputStream(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GOutputStream(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GOutputStream(_q: **GQueue): void <cimport,nodecl> end
global function glib_autoptr_clear_GPermission(_ptr: *GPermission): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GPermission(_ptr: **GPermission): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GPermission(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GPermission(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GPermission(_q: **GQueue): void <cimport,nodecl> end
global function glib_autoptr_clear_GPollableInputStream(_ptr: *GPollableInputStream): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GPollableInputStream(_ptr: **GPollableInputStream): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GPollableInputStream(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GPollableInputStream(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GPollableInputStream(_q: **GQueue): void <cimport,nodecl> end
global function glib_autoptr_clear_GPollableOutputStream(_ptr: *GPollableOutputStream): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GPollableOutputStream(_ptr: **GPollableOutputStream): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GPollableOutputStream(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GPollableOutputStream(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GPollableOutputStream(_q: **GQueue): void <cimport,nodecl> end
global function glib_autoptr_clear_GPropertyAction(_ptr: *GPropertyAction): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GPropertyAction(_ptr: **GPropertyAction): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GPropertyAction(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GPropertyAction(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GPropertyAction(_q: **GQueue): void <cimport,nodecl> end
global function glib_autoptr_clear_GProxyAddressEnumerator(_ptr: *GProxyAddressEnumerator): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GProxyAddressEnumerator(_ptr: **GProxyAddressEnumerator): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GProxyAddressEnumerator(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GProxyAddressEnumerator(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GProxyAddressEnumerator(_q: **GQueue): void <cimport,nodecl> end
global function glib_autoptr_clear_GProxyAddress(_ptr: *GProxyAddress): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GProxyAddress(_ptr: **GProxyAddress): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GProxyAddress(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GProxyAddress(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GProxyAddress(_q: **GQueue): void <cimport,nodecl> end
global function glib_autoptr_clear_GProxy(_ptr: *GProxy): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GProxy(_ptr: **GProxy): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GProxy(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GProxy(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GProxy(_q: **GQueue): void <cimport,nodecl> end
global function glib_autoptr_clear_GProxyResolver(_ptr: *GProxyResolver): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GProxyResolver(_ptr: **GProxyResolver): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GProxyResolver(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GProxyResolver(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GProxyResolver(_q: **GQueue): void <cimport,nodecl> end
global function glib_autoptr_clear_GRemoteActionGroup(_ptr: *GRemoteActionGroup): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GRemoteActionGroup(_ptr: **GRemoteActionGroup): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GRemoteActionGroup(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GRemoteActionGroup(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GRemoteActionGroup(_q: **GQueue): void <cimport,nodecl> end
global function glib_autoptr_clear_GResolver(_ptr: *GResolver): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GResolver(_ptr: **GResolver): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GResolver(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GResolver(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GResolver(_q: **GQueue): void <cimport,nodecl> end
global function glib_autoptr_clear_GResource(_ptr: *GResource): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GResource(_ptr: **GResource): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GResource(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GResource(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GResource(_q: **GQueue): void <cimport,nodecl> end
global function glib_autoptr_clear_GSeekable(_ptr: *GSeekable): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GSeekable(_ptr: **GSeekable): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GSeekable(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GSeekable(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GSeekable(_q: **GQueue): void <cimport,nodecl> end
global function glib_autoptr_clear_GSettingsBackend(_ptr: *GSettingsBackend): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GSettingsBackend(_ptr: **GSettingsBackend): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GSettingsBackend(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GSettingsBackend(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GSettingsBackend(_q: **GQueue): void <cimport,nodecl> end
global function glib_autoptr_clear_GSettingsSchema(_ptr: *GSettingsSchema): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GSettingsSchema(_ptr: **GSettingsSchema): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GSettingsSchema(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GSettingsSchema(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GSettingsSchema(_q: **GQueue): void <cimport,nodecl> end
global function glib_autoptr_clear_GSettingsSchemaKey(_ptr: *GSettingsSchemaKey): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GSettingsSchemaKey(_ptr: **GSettingsSchemaKey): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GSettingsSchemaKey(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GSettingsSchemaKey(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GSettingsSchemaKey(_q: **GQueue): void <cimport,nodecl> end
global function glib_autoptr_clear_GSettingsSchemaSource(_ptr: *GSettingsSchemaSource): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GSettingsSchemaSource(_ptr: **GSettingsSchemaSource): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GSettingsSchemaSource(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GSettingsSchemaSource(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GSettingsSchemaSource(_q: **GQueue): void <cimport,nodecl> end
global function glib_autoptr_clear_GSettings(_ptr: *GSettings): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GSettings(_ptr: **GSettings): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GSettings(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GSettings(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GSettings(_q: **GQueue): void <cimport,nodecl> end
global function glib_autoptr_clear_GSimpleActionGroup(_ptr: *GSimpleActionGroup): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GSimpleActionGroup(_ptr: **GSimpleActionGroup): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GSimpleActionGroup(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GSimpleActionGroup(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GSimpleActionGroup(_q: **GQueue): void <cimport,nodecl> end
global function glib_autoptr_clear_GSimpleAction(_ptr: *GSimpleAction): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GSimpleAction(_ptr: **GSimpleAction): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GSimpleAction(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GSimpleAction(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GSimpleAction(_q: **GQueue): void <cimport,nodecl> end
global function glib_autoptr_clear_GSimpleAsyncResult(_ptr: *GSimpleAsyncResult): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GSimpleAsyncResult(_ptr: **GSimpleAsyncResult): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GSimpleAsyncResult(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GSimpleAsyncResult(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GSimpleAsyncResult(_q: **GQueue): void <cimport,nodecl> end
global function glib_autoptr_clear_GSimplePermission(_ptr: *GSimplePermission): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GSimplePermission(_ptr: **GSimplePermission): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GSimplePermission(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GSimplePermission(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GSimplePermission(_q: **GQueue): void <cimport,nodecl> end
global function glib_autoptr_clear_GSimpleProxyResolver(_ptr: *GSimpleProxyResolver): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GSimpleProxyResolver(_ptr: **GSimpleProxyResolver): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GSimpleProxyResolver(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GSimpleProxyResolver(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GSimpleProxyResolver(_q: **GQueue): void <cimport,nodecl> end
global function glib_autoptr_clear_GSocketAddressEnumerator(_ptr: *GSocketAddressEnumerator): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GSocketAddressEnumerator(_ptr: **GSocketAddressEnumerator): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GSocketAddressEnumerator(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GSocketAddressEnumerator(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GSocketAddressEnumerator(_q: **GQueue): void <cimport,nodecl> end
global function glib_autoptr_clear_GSocketAddress(_ptr: *GSocketAddress): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GSocketAddress(_ptr: **GSocketAddress): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GSocketAddress(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GSocketAddress(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GSocketAddress(_q: **GQueue): void <cimport,nodecl> end
global function glib_autoptr_clear_GSocketClient(_ptr: *GSocketClient): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GSocketClient(_ptr: **GSocketClient): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GSocketClient(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GSocketClient(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GSocketClient(_q: **GQueue): void <cimport,nodecl> end
global function glib_autoptr_clear_GSocketConnectable(_ptr: *GSocketConnectable): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GSocketConnectable(_ptr: **GSocketConnectable): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GSocketConnectable(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GSocketConnectable(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GSocketConnectable(_q: **GQueue): void <cimport,nodecl> end
global function glib_autoptr_clear_GSocketConnection(_ptr: *GSocketConnection): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GSocketConnection(_ptr: **GSocketConnection): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GSocketConnection(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GSocketConnection(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GSocketConnection(_q: **GQueue): void <cimport,nodecl> end
global function glib_autoptr_clear_GSocketControlMessage(_ptr: *GSocketControlMessage): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GSocketControlMessage(_ptr: **GSocketControlMessage): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GSocketControlMessage(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GSocketControlMessage(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GSocketControlMessage(_q: **GQueue): void <cimport,nodecl> end
global function glib_autoptr_clear_GSocket(_ptr: *GSocket): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GSocket(_ptr: **GSocket): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GSocket(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GSocket(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GSocket(_q: **GQueue): void <cimport,nodecl> end
global function glib_autoptr_clear_GSocketListener(_ptr: *GSocketListener): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GSocketListener(_ptr: **GSocketListener): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GSocketListener(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GSocketListener(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GSocketListener(_q: **GQueue): void <cimport,nodecl> end
global function glib_autoptr_clear_GSocketService(_ptr: *GSocketService): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GSocketService(_ptr: **GSocketService): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GSocketService(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GSocketService(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GSocketService(_q: **GQueue): void <cimport,nodecl> end
global function glib_autoptr_clear_GSubprocess(_ptr: *GSubprocess): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GSubprocess(_ptr: **GSubprocess): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GSubprocess(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GSubprocess(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GSubprocess(_q: **GQueue): void <cimport,nodecl> end
global function glib_autoptr_clear_GSubprocessLauncher(_ptr: *GSubprocessLauncher): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GSubprocessLauncher(_ptr: **GSubprocessLauncher): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GSubprocessLauncher(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GSubprocessLauncher(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GSubprocessLauncher(_q: **GQueue): void <cimport,nodecl> end
global function glib_autoptr_clear_GTask(_ptr: *GTask): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GTask(_ptr: **GTask): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GTask(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GTask(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GTask(_q: **GQueue): void <cimport,nodecl> end
global function glib_autoptr_clear_GTcpConnection(_ptr: *GTcpConnection): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GTcpConnection(_ptr: **GTcpConnection): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GTcpConnection(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GTcpConnection(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GTcpConnection(_q: **GQueue): void <cimport,nodecl> end
global function glib_autoptr_clear_GTcpWrapperConnection(_ptr: *GTcpWrapperConnection): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GTcpWrapperConnection(_ptr: **GTcpWrapperConnection): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GTcpWrapperConnection(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GTcpWrapperConnection(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GTcpWrapperConnection(_q: **GQueue): void <cimport,nodecl> end
global function glib_autoptr_clear_GTestDBus(_ptr: *GTestDBus): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GTestDBus(_ptr: **GTestDBus): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GTestDBus(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GTestDBus(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GTestDBus(_q: **GQueue): void <cimport,nodecl> end
global function glib_autoptr_clear_GThemedIcon(_ptr: *GThemedIcon): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GThemedIcon(_ptr: **GThemedIcon): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GThemedIcon(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GThemedIcon(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GThemedIcon(_q: **GQueue): void <cimport,nodecl> end
global function glib_autoptr_clear_GThreadedSocketService(_ptr: *GThreadedSocketService): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GThreadedSocketService(_ptr: **GThreadedSocketService): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GThreadedSocketService(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GThreadedSocketService(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GThreadedSocketService(_q: **GQueue): void <cimport,nodecl> end
global function glib_autoptr_clear_GTlsBackend(_ptr: *GTlsBackend): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GTlsBackend(_ptr: **GTlsBackend): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GTlsBackend(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GTlsBackend(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GTlsBackend(_q: **GQueue): void <cimport,nodecl> end
global function glib_autoptr_clear_GTlsCertificate(_ptr: *GTlsCertificate): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GTlsCertificate(_ptr: **GTlsCertificate): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GTlsCertificate(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GTlsCertificate(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GTlsCertificate(_q: **GQueue): void <cimport,nodecl> end
global function glib_autoptr_clear_GTlsClientConnection(_ptr: *GTlsClientConnection): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GTlsClientConnection(_ptr: **GTlsClientConnection): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GTlsClientConnection(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GTlsClientConnection(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GTlsClientConnection(_q: **GQueue): void <cimport,nodecl> end
global function glib_autoptr_clear_GTlsConnection(_ptr: *GTlsConnection): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GTlsConnection(_ptr: **GTlsConnection): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GTlsConnection(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GTlsConnection(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GTlsConnection(_q: **GQueue): void <cimport,nodecl> end
global function glib_autoptr_clear_GTlsDatabase(_ptr: *GTlsDatabase): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GTlsDatabase(_ptr: **GTlsDatabase): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GTlsDatabase(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GTlsDatabase(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GTlsDatabase(_q: **GQueue): void <cimport,nodecl> end
global function glib_autoptr_clear_GTlsFileDatabase(_ptr: *GTlsFileDatabase): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GTlsFileDatabase(_ptr: **GTlsFileDatabase): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GTlsFileDatabase(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GTlsFileDatabase(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GTlsFileDatabase(_q: **GQueue): void <cimport,nodecl> end
global function glib_autoptr_clear_GTlsInteraction(_ptr: *GTlsInteraction): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GTlsInteraction(_ptr: **GTlsInteraction): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GTlsInteraction(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GTlsInteraction(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GTlsInteraction(_q: **GQueue): void <cimport,nodecl> end
global function glib_autoptr_clear_GTlsPassword(_ptr: *GTlsPassword): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GTlsPassword(_ptr: **GTlsPassword): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GTlsPassword(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GTlsPassword(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GTlsPassword(_q: **GQueue): void <cimport,nodecl> end
global function glib_autoptr_clear_GTlsServerConnection(_ptr: *GTlsServerConnection): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GTlsServerConnection(_ptr: **GTlsServerConnection): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GTlsServerConnection(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GTlsServerConnection(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GTlsServerConnection(_q: **GQueue): void <cimport,nodecl> end
global function glib_autoptr_clear_GVfs(_ptr: *GVfs): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GVfs(_ptr: **GVfs): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GVfs(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GVfs(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GVfs(_q: **GQueue): void <cimport,nodecl> end
global function glib_autoptr_clear_GVolume(_ptr: *GVolume): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GVolume(_ptr: **GVolume): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GVolume(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GVolume(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GVolume(_q: **GQueue): void <cimport,nodecl> end
global function glib_autoptr_clear_GVolumeMonitor(_ptr: *GVolumeMonitor): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GVolumeMonitor(_ptr: **GVolumeMonitor): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GVolumeMonitor(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GVolumeMonitor(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GVolumeMonitor(_q: **GQueue): void <cimport,nodecl> end
global function glib_autoptr_clear_GZlibCompressor(_ptr: *GZlibCompressor): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GZlibCompressor(_ptr: **GZlibCompressor): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GZlibCompressor(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GZlibCompressor(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GZlibCompressor(_q: **GQueue): void <cimport,nodecl> end
global function glib_autoptr_clear_GZlibDecompressor(_ptr: *GZlibDecompressor): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GZlibDecompressor(_ptr: **GZlibDecompressor): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GZlibDecompressor(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GZlibDecompressor(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GZlibDecompressor(_q: **GQueue): void <cimport,nodecl> end
global function gtk_css_section_get_type(): GType <cimport,nodecl> end
global function gtk_css_section_new(file: *GFile, start: *GtkCssLocation, end_: *GtkCssLocation): *GtkCssSection <cimport,nodecl> end
global function gtk_css_section_ref(section: *GtkCssSection): *GtkCssSection <cimport,nodecl> end
global function gtk_css_section_unref(section: *GtkCssSection): void <cimport,nodecl> end
global function gtk_css_section_print(section: *GtkCssSection, string: *GString): void <cimport,nodecl> end
global function gtk_css_section_to_string(section: *GtkCssSection): cstring <cimport,nodecl> end
global function gtk_css_section_get_parent(section: *GtkCssSection): *GtkCssSection <cimport,nodecl> end
global function gtk_css_section_get_file(section: *GtkCssSection): *GFile <cimport,nodecl> end
global function gtk_css_section_get_start_location(section: *GtkCssSection): *GtkCssLocation <cimport,nodecl> end
global function gtk_css_section_get_end_location(section: *GtkCssSection): *GtkCssLocation <cimport,nodecl> end
global function cairo_version(): cint <cimport,nodecl> end
global function cairo_version_string(): cstring <cimport,nodecl> end
global function cairo_create(target: *cairo_surface_t): *cairo_t <cimport,nodecl> end
global function cairo_reference(cr: *cairo_t): *cairo_t <cimport,nodecl> end
global function cairo_destroy(cr: *cairo_t): void <cimport,nodecl> end
global function cairo_get_reference_count(cr: *cairo_t): cuint <cimport,nodecl> end
global function cairo_get_user_data(cr: *cairo_t, key: *cairo_user_data_key_t): pointer <cimport,nodecl> end
global function cairo_set_user_data(cr: *cairo_t, key: *cairo_user_data_key_t, user_data: pointer, destroy: cairo_destroy_func_t): cairo_status_t <cimport,nodecl> end
global function cairo_save(cr: *cairo_t): void <cimport,nodecl> end
global function cairo_restore(cr: *cairo_t): void <cimport,nodecl> end
global function cairo_push_group(cr: *cairo_t): void <cimport,nodecl> end
global function cairo_push_group_with_content(cr: *cairo_t, content: cairo_content_t): void <cimport,nodecl> end
global function cairo_pop_group(cr: *cairo_t): *cairo_pattern_t <cimport,nodecl> end
global function cairo_pop_group_to_source(cr: *cairo_t): void <cimport,nodecl> end
global function cairo_set_operator(cr: *cairo_t, op: cairo_operator_t): void <cimport,nodecl> end
global function cairo_set_source(cr: *cairo_t, source: *cairo_pattern_t): void <cimport,nodecl> end
global function cairo_set_source_rgb(cr: *cairo_t, red: float64, green: float64, blue: float64): void <cimport,nodecl> end
global function cairo_set_source_rgba(cr: *cairo_t, red: float64, green: float64, blue: float64, alpha: float64): void <cimport,nodecl> end
global function cairo_set_source_surface(cr: *cairo_t, surface: *cairo_surface_t, x: float64, y: float64): void <cimport,nodecl> end
global function cairo_set_tolerance(cr: *cairo_t, tolerance: float64): void <cimport,nodecl> end
global function cairo_set_antialias(cr: *cairo_t, antialias: cairo_antialias_t): void <cimport,nodecl> end
global function cairo_set_fill_rule(cr: *cairo_t, fill_rule: cairo_fill_rule_t): void <cimport,nodecl> end
global function cairo_set_line_width(cr: *cairo_t, width: float64): void <cimport,nodecl> end
global function cairo_set_line_cap(cr: *cairo_t, line_cap: cairo_line_cap_t): void <cimport,nodecl> end
global function cairo_set_line_join(cr: *cairo_t, line_join: cairo_line_join_t): void <cimport,nodecl> end
global function cairo_set_dash(cr: *cairo_t, dashes: *float64, num_dashes: cint, offset: float64): void <cimport,nodecl> end
global function cairo_set_miter_limit(cr: *cairo_t, limit: float64): void <cimport,nodecl> end
global function cairo_translate(cr: *cairo_t, tx: float64, ty: float64): void <cimport,nodecl> end
global function cairo_scale(cr: *cairo_t, sx: float64, sy: float64): void <cimport,nodecl> end
global function cairo_rotate(cr: *cairo_t, angle: float64): void <cimport,nodecl> end
global function cairo_transform(cr: *cairo_t, matrix: *cairo_matrix_t): void <cimport,nodecl> end
global function cairo_set_matrix(cr: *cairo_t, matrix: *cairo_matrix_t): void <cimport,nodecl> end
global function cairo_identity_matrix(cr: *cairo_t): void <cimport,nodecl> end
global function cairo_user_to_device(cr: *cairo_t, x: *float64, y: *float64): void <cimport,nodecl> end
global function cairo_user_to_device_distance(cr: *cairo_t, dx: *float64, dy: *float64): void <cimport,nodecl> end
global function cairo_device_to_user(cr: *cairo_t, x: *float64, y: *float64): void <cimport,nodecl> end
global function cairo_device_to_user_distance(cr: *cairo_t, dx: *float64, dy: *float64): void <cimport,nodecl> end
global function cairo_new_path(cr: *cairo_t): void <cimport,nodecl> end
global function cairo_move_to(cr: *cairo_t, x: float64, y: float64): void <cimport,nodecl> end
global function cairo_new_sub_path(cr: *cairo_t): void <cimport,nodecl> end
global function cairo_line_to(cr: *cairo_t, x: float64, y: float64): void <cimport,nodecl> end
global function cairo_curve_to(cr: *cairo_t, x1: float64, y1: float64, x2: float64, y2: float64, x3: float64, y3: float64): void <cimport,nodecl> end
global function cairo_arc(cr: *cairo_t, xc: float64, yc: float64, radius: float64, angle1: float64, angle2: float64): void <cimport,nodecl> end
global function cairo_arc_negative(cr: *cairo_t, xc: float64, yc: float64, radius: float64, angle1: float64, angle2: float64): void <cimport,nodecl> end
global function cairo_rel_move_to(cr: *cairo_t, dx: float64, dy: float64): void <cimport,nodecl> end
global function cairo_rel_line_to(cr: *cairo_t, dx: float64, dy: float64): void <cimport,nodecl> end
global function cairo_rel_curve_to(cr: *cairo_t, dx1: float64, dy1: float64, dx2: float64, dy2: float64, dx3: float64, dy3: float64): void <cimport,nodecl> end
global function cairo_rectangle(cr: *cairo_t, x: float64, y: float64, width: float64, height: float64): void <cimport,nodecl> end
global function cairo_close_path(cr: *cairo_t): void <cimport,nodecl> end
global function cairo_path_extents(cr: *cairo_t, x1: *float64, y1: *float64, x2: *float64, y2: *float64): void <cimport,nodecl> end
global function cairo_paint(cr: *cairo_t): void <cimport,nodecl> end
global function cairo_paint_with_alpha(cr: *cairo_t, alpha: float64): void <cimport,nodecl> end
global function cairo_mask(cr: *cairo_t, pattern: *cairo_pattern_t): void <cimport,nodecl> end
global function cairo_mask_surface(cr: *cairo_t, surface: *cairo_surface_t, surface_x: float64, surface_y: float64): void <cimport,nodecl> end
global function cairo_stroke(cr: *cairo_t): void <cimport,nodecl> end
global function cairo_stroke_preserve(cr: *cairo_t): void <cimport,nodecl> end
global function cairo_fill(cr: *cairo_t): void <cimport,nodecl> end
global function cairo_fill_preserve(cr: *cairo_t): void <cimport,nodecl> end
global function cairo_copy_page(cr: *cairo_t): void <cimport,nodecl> end
global function cairo_show_page(cr: *cairo_t): void <cimport,nodecl> end
global function cairo_in_stroke(cr: *cairo_t, x: float64, y: float64): cairo_bool_t <cimport,nodecl> end
global function cairo_in_fill(cr: *cairo_t, x: float64, y: float64): cairo_bool_t <cimport,nodecl> end
global function cairo_in_clip(cr: *cairo_t, x: float64, y: float64): cairo_bool_t <cimport,nodecl> end
global function cairo_stroke_extents(cr: *cairo_t, x1: *float64, y1: *float64, x2: *float64, y2: *float64): void <cimport,nodecl> end
global function cairo_fill_extents(cr: *cairo_t, x1: *float64, y1: *float64, x2: *float64, y2: *float64): void <cimport,nodecl> end
global function cairo_reset_clip(cr: *cairo_t): void <cimport,nodecl> end
global function cairo_clip(cr: *cairo_t): void <cimport,nodecl> end
global function cairo_clip_preserve(cr: *cairo_t): void <cimport,nodecl> end
global function cairo_clip_extents(cr: *cairo_t, x1: *float64, y1: *float64, x2: *float64, y2: *float64): void <cimport,nodecl> end
global function cairo_copy_clip_rectangle_list(cr: *cairo_t): *cairo_rectangle_list_t <cimport,nodecl> end
global function cairo_rectangle_list_destroy(rectangle_list: *cairo_rectangle_list_t): void <cimport,nodecl> end
global function cairo_tag_begin(cr: *cairo_t, tag_name: cstring, attributes: cstring): void <cimport,nodecl> end
global function cairo_tag_end(cr: *cairo_t, tag_name: cstring): void <cimport,nodecl> end
global function cairo_glyph_allocate(num_glyphs: cint): *cairo_glyph_t <cimport,nodecl> end
global function cairo_glyph_free(glyphs: *cairo_glyph_t): void <cimport,nodecl> end
global function cairo_text_cluster_allocate(num_clusters: cint): *cairo_text_cluster_t <cimport,nodecl> end
global function cairo_text_cluster_free(clusters: *cairo_text_cluster_t): void <cimport,nodecl> end
global function cairo_font_options_create(): *cairo_font_options_t <cimport,nodecl> end
global function cairo_font_options_copy(original: *cairo_font_options_t): *cairo_font_options_t <cimport,nodecl> end
global function cairo_font_options_destroy(options: *cairo_font_options_t): void <cimport,nodecl> end
global function cairo_font_options_status(options: *cairo_font_options_t): cairo_status_t <cimport,nodecl> end
global function cairo_font_options_merge(options: *cairo_font_options_t, other: *cairo_font_options_t): void <cimport,nodecl> end
global function cairo_font_options_equal(options: *cairo_font_options_t, other: *cairo_font_options_t): cairo_bool_t <cimport,nodecl> end
global function cairo_font_options_hash(options: *cairo_font_options_t): culong <cimport,nodecl> end
global function cairo_font_options_set_antialias(options: *cairo_font_options_t, antialias: cairo_antialias_t): void <cimport,nodecl> end
global function cairo_font_options_get_antialias(options: *cairo_font_options_t): cairo_antialias_t <cimport,nodecl> end
global function cairo_font_options_set_subpixel_order(options: *cairo_font_options_t, subpixel_order: cairo_subpixel_order_t): void <cimport,nodecl> end
global function cairo_font_options_get_subpixel_order(options: *cairo_font_options_t): cairo_subpixel_order_t <cimport,nodecl> end
global function cairo_font_options_set_hint_style(options: *cairo_font_options_t, hint_style: cairo_hint_style_t): void <cimport,nodecl> end
global function cairo_font_options_get_hint_style(options: *cairo_font_options_t): cairo_hint_style_t <cimport,nodecl> end
global function cairo_font_options_set_hint_metrics(options: *cairo_font_options_t, hint_metrics: cairo_hint_metrics_t): void <cimport,nodecl> end
global function cairo_font_options_get_hint_metrics(options: *cairo_font_options_t): cairo_hint_metrics_t <cimport,nodecl> end
global function cairo_font_options_get_variations(options: *cairo_font_options_t): cstring <cimport,nodecl> end
global function cairo_font_options_set_variations(options: *cairo_font_options_t, variations: cstring): void <cimport,nodecl> end
global function cairo_select_font_face(cr: *cairo_t, family: cstring, slant: cairo_font_slant_t, weight: cairo_font_weight_t): void <cimport,nodecl> end
global function cairo_set_font_size(cr: *cairo_t, size: float64): void <cimport,nodecl> end
global function cairo_set_font_matrix(cr: *cairo_t, matrix: *cairo_matrix_t): void <cimport,nodecl> end
global function cairo_get_font_matrix(cr: *cairo_t, matrix: *cairo_matrix_t): void <cimport,nodecl> end
global function cairo_set_font_options(cr: *cairo_t, options: *cairo_font_options_t): void <cimport,nodecl> end
global function cairo_get_font_options(cr: *cairo_t, options: *cairo_font_options_t): void <cimport,nodecl> end
global function cairo_set_font_face(cr: *cairo_t, font_face: *cairo_font_face_t): void <cimport,nodecl> end
global function cairo_get_font_face(cr: *cairo_t): *cairo_font_face_t <cimport,nodecl> end
global function cairo_set_scaled_font(cr: *cairo_t, scaled_font: *cairo_scaled_font_t): void <cimport,nodecl> end
global function cairo_get_scaled_font(cr: *cairo_t): *cairo_scaled_font_t <cimport,nodecl> end
global function cairo_show_text(cr: *cairo_t, utf8: cstring): void <cimport,nodecl> end
global function cairo_show_glyphs(cr: *cairo_t, glyphs: *cairo_glyph_t, num_glyphs: cint): void <cimport,nodecl> end
global function cairo_show_text_glyphs(cr: *cairo_t, utf8: cstring, utf8_len: cint, glyphs: *cairo_glyph_t, num_glyphs: cint, clusters: *cairo_text_cluster_t, num_clusters: cint, cluster_flags: cairo_text_cluster_flags_t): void <cimport,nodecl> end
global function cairo_text_path(cr: *cairo_t, utf8: cstring): void <cimport,nodecl> end
global function cairo_glyph_path(cr: *cairo_t, glyphs: *cairo_glyph_t, num_glyphs: cint): void <cimport,nodecl> end
global function cairo_text_extents(cr: *cairo_t, utf8: cstring, extents: *cairo_text_extents_t): void <cimport,nodecl> end
global function cairo_glyph_extents(cr: *cairo_t, glyphs: *cairo_glyph_t, num_glyphs: cint, extents: *cairo_text_extents_t): void <cimport,nodecl> end
global function cairo_font_extents(cr: *cairo_t, extents: *cairo_font_extents_t): void <cimport,nodecl> end
global function cairo_font_face_reference(font_face: *cairo_font_face_t): *cairo_font_face_t <cimport,nodecl> end
global function cairo_font_face_destroy(font_face: *cairo_font_face_t): void <cimport,nodecl> end
global function cairo_font_face_get_reference_count(font_face: *cairo_font_face_t): cuint <cimport,nodecl> end
global function cairo_font_face_status(font_face: *cairo_font_face_t): cairo_status_t <cimport,nodecl> end
global function cairo_font_face_get_type(font_face: *cairo_font_face_t): cairo_font_type_t <cimport,nodecl> end
global function cairo_font_face_get_user_data(font_face: *cairo_font_face_t, key: *cairo_user_data_key_t): pointer <cimport,nodecl> end
global function cairo_font_face_set_user_data(font_face: *cairo_font_face_t, key: *cairo_user_data_key_t, user_data: pointer, destroy: cairo_destroy_func_t): cairo_status_t <cimport,nodecl> end
global function cairo_scaled_font_create(font_face: *cairo_font_face_t, font_matrix: *cairo_matrix_t, ctm: *cairo_matrix_t, options: *cairo_font_options_t): *cairo_scaled_font_t <cimport,nodecl> end
global function cairo_scaled_font_reference(scaled_font: *cairo_scaled_font_t): *cairo_scaled_font_t <cimport,nodecl> end
global function cairo_scaled_font_destroy(scaled_font: *cairo_scaled_font_t): void <cimport,nodecl> end
global function cairo_scaled_font_get_reference_count(scaled_font: *cairo_scaled_font_t): cuint <cimport,nodecl> end
global function cairo_scaled_font_status(scaled_font: *cairo_scaled_font_t): cairo_status_t <cimport,nodecl> end
global function cairo_scaled_font_get_type(scaled_font: *cairo_scaled_font_t): cairo_font_type_t <cimport,nodecl> end
global function cairo_scaled_font_get_user_data(scaled_font: *cairo_scaled_font_t, key: *cairo_user_data_key_t): pointer <cimport,nodecl> end
global function cairo_scaled_font_set_user_data(scaled_font: *cairo_scaled_font_t, key: *cairo_user_data_key_t, user_data: pointer, destroy: cairo_destroy_func_t): cairo_status_t <cimport,nodecl> end
global function cairo_scaled_font_extents(scaled_font: *cairo_scaled_font_t, extents: *cairo_font_extents_t): void <cimport,nodecl> end
global function cairo_scaled_font_text_extents(scaled_font: *cairo_scaled_font_t, utf8: cstring, extents: *cairo_text_extents_t): void <cimport,nodecl> end
global function cairo_scaled_font_glyph_extents(scaled_font: *cairo_scaled_font_t, glyphs: *cairo_glyph_t, num_glyphs: cint, extents: *cairo_text_extents_t): void <cimport,nodecl> end
global function cairo_scaled_font_text_to_glyphs(scaled_font: *cairo_scaled_font_t, x: float64, y: float64, utf8: cstring, utf8_len: cint, glyphs: **cairo_glyph_t, num_glyphs: *cint, clusters: **cairo_text_cluster_t, num_clusters: *cint, cluster_flags: *cairo_text_cluster_flags_t): cairo_status_t <cimport,nodecl> end
global function cairo_scaled_font_get_font_face(scaled_font: *cairo_scaled_font_t): *cairo_font_face_t <cimport,nodecl> end
global function cairo_scaled_font_get_font_matrix(scaled_font: *cairo_scaled_font_t, font_matrix: *cairo_matrix_t): void <cimport,nodecl> end
global function cairo_scaled_font_get_ctm(scaled_font: *cairo_scaled_font_t, ctm: *cairo_matrix_t): void <cimport,nodecl> end
global function cairo_scaled_font_get_scale_matrix(scaled_font: *cairo_scaled_font_t, scale_matrix: *cairo_matrix_t): void <cimport,nodecl> end
global function cairo_scaled_font_get_font_options(scaled_font: *cairo_scaled_font_t, options: *cairo_font_options_t): void <cimport,nodecl> end
global function cairo_toy_font_face_create(family: cstring, slant: cairo_font_slant_t, weight: cairo_font_weight_t): *cairo_font_face_t <cimport,nodecl> end
global function cairo_toy_font_face_get_family(font_face: *cairo_font_face_t): cstring <cimport,nodecl> end
global function cairo_toy_font_face_get_slant(font_face: *cairo_font_face_t): cairo_font_slant_t <cimport,nodecl> end
global function cairo_toy_font_face_get_weight(font_face: *cairo_font_face_t): cairo_font_weight_t <cimport,nodecl> end
global function cairo_user_font_face_create(): *cairo_font_face_t <cimport,nodecl> end
global function cairo_user_font_face_set_init_func(font_face: *cairo_font_face_t, init_func: cairo_user_scaled_font_init_func_t): void <cimport,nodecl> end
global function cairo_user_font_face_set_render_glyph_func(font_face: *cairo_font_face_t, render_glyph_func: cairo_user_scaled_font_render_glyph_func_t): void <cimport,nodecl> end
global function cairo_user_font_face_set_text_to_glyphs_func(font_face: *cairo_font_face_t, text_to_glyphs_func: cairo_user_scaled_font_text_to_glyphs_func_t): void <cimport,nodecl> end
global function cairo_user_font_face_set_unicode_to_glyph_func(font_face: *cairo_font_face_t, unicode_to_glyph_func: cairo_user_scaled_font_unicode_to_glyph_func_t): void <cimport,nodecl> end
global function cairo_user_font_face_get_init_func(font_face: *cairo_font_face_t): cairo_user_scaled_font_init_func_t <cimport,nodecl> end
global function cairo_user_font_face_get_render_glyph_func(font_face: *cairo_font_face_t): cairo_user_scaled_font_render_glyph_func_t <cimport,nodecl> end
global function cairo_user_font_face_get_text_to_glyphs_func(font_face: *cairo_font_face_t): cairo_user_scaled_font_text_to_glyphs_func_t <cimport,nodecl> end
global function cairo_user_font_face_get_unicode_to_glyph_func(font_face: *cairo_font_face_t): cairo_user_scaled_font_unicode_to_glyph_func_t <cimport,nodecl> end
global function cairo_get_operator(cr: *cairo_t): cairo_operator_t <cimport,nodecl> end
global function cairo_get_source(cr: *cairo_t): *cairo_pattern_t <cimport,nodecl> end
global function cairo_get_tolerance(cr: *cairo_t): float64 <cimport,nodecl> end
global function cairo_get_antialias(cr: *cairo_t): cairo_antialias_t <cimport,nodecl> end
global function cairo_has_current_point(cr: *cairo_t): cairo_bool_t <cimport,nodecl> end
global function cairo_get_current_point(cr: *cairo_t, x: *float64, y: *float64): void <cimport,nodecl> end
global function cairo_get_fill_rule(cr: *cairo_t): cairo_fill_rule_t <cimport,nodecl> end
global function cairo_get_line_width(cr: *cairo_t): float64 <cimport,nodecl> end
global function cairo_get_line_cap(cr: *cairo_t): cairo_line_cap_t <cimport,nodecl> end
global function cairo_get_line_join(cr: *cairo_t): cairo_line_join_t <cimport,nodecl> end
global function cairo_get_miter_limit(cr: *cairo_t): float64 <cimport,nodecl> end
global function cairo_get_dash_count(cr: *cairo_t): cint <cimport,nodecl> end
global function cairo_get_dash(cr: *cairo_t, dashes: *float64, offset: *float64): void <cimport,nodecl> end
global function cairo_get_matrix(cr: *cairo_t, matrix: *cairo_matrix_t): void <cimport,nodecl> end
global function cairo_get_target(cr: *cairo_t): *cairo_surface_t <cimport,nodecl> end
global function cairo_get_group_target(cr: *cairo_t): *cairo_surface_t <cimport,nodecl> end
global function cairo_copy_path(cr: *cairo_t): *cairo_path_t <cimport,nodecl> end
global function cairo_copy_path_flat(cr: *cairo_t): *cairo_path_t <cimport,nodecl> end
global function cairo_append_path(cr: *cairo_t, path: *cairo_path_t): void <cimport,nodecl> end
global function cairo_path_destroy(path: *cairo_path_t): void <cimport,nodecl> end
global function cairo_status(cr: *cairo_t): cairo_status_t <cimport,nodecl> end
global function cairo_status_to_string(status: cairo_status_t): cstring <cimport,nodecl> end
global function cairo_device_reference(device: *cairo_device_t): *cairo_device_t <cimport,nodecl> end
global function cairo_device_get_type(device: *cairo_device_t): cairo_device_type_t <cimport,nodecl> end
global function cairo_device_status(device: *cairo_device_t): cairo_status_t <cimport,nodecl> end
global function cairo_device_acquire(device: *cairo_device_t): cairo_status_t <cimport,nodecl> end
global function cairo_device_release(device: *cairo_device_t): void <cimport,nodecl> end
global function cairo_device_flush(device: *cairo_device_t): void <cimport,nodecl> end
global function cairo_device_finish(device: *cairo_device_t): void <cimport,nodecl> end
global function cairo_device_destroy(device: *cairo_device_t): void <cimport,nodecl> end
global function cairo_device_get_reference_count(device: *cairo_device_t): cuint <cimport,nodecl> end
global function cairo_device_get_user_data(device: *cairo_device_t, key: *cairo_user_data_key_t): pointer <cimport,nodecl> end
global function cairo_device_set_user_data(device: *cairo_device_t, key: *cairo_user_data_key_t, user_data: pointer, destroy: cairo_destroy_func_t): cairo_status_t <cimport,nodecl> end
global function cairo_surface_create_similar(other: *cairo_surface_t, content: cairo_content_t, width: cint, height: cint): *cairo_surface_t <cimport,nodecl> end
global function cairo_surface_create_similar_image(other: *cairo_surface_t, format: cairo_format_t, width: cint, height: cint): *cairo_surface_t <cimport,nodecl> end
global function cairo_surface_map_to_image(surface: *cairo_surface_t, extents: *cairo_rectangle_int_t): *cairo_surface_t <cimport,nodecl> end
global function cairo_surface_unmap_image(surface: *cairo_surface_t, image: *cairo_surface_t): void <cimport,nodecl> end
global function cairo_surface_create_for_rectangle(target: *cairo_surface_t, x: float64, y: float64, width: float64, height: float64): *cairo_surface_t <cimport,nodecl> end
global function cairo_surface_create_observer(target: *cairo_surface_t, mode: cairo_surface_observer_mode_t): *cairo_surface_t <cimport,nodecl> end
global function cairo_surface_observer_add_paint_callback(abstract_surface: *cairo_surface_t, func: cairo_surface_observer_callback_t, data: pointer): cairo_status_t <cimport,nodecl> end
global function cairo_surface_observer_add_mask_callback(abstract_surface: *cairo_surface_t, func: cairo_surface_observer_callback_t, data: pointer): cairo_status_t <cimport,nodecl> end
global function cairo_surface_observer_add_fill_callback(abstract_surface: *cairo_surface_t, func: cairo_surface_observer_callback_t, data: pointer): cairo_status_t <cimport,nodecl> end
global function cairo_surface_observer_add_stroke_callback(abstract_surface: *cairo_surface_t, func: cairo_surface_observer_callback_t, data: pointer): cairo_status_t <cimport,nodecl> end
global function cairo_surface_observer_add_glyphs_callback(abstract_surface: *cairo_surface_t, func: cairo_surface_observer_callback_t, data: pointer): cairo_status_t <cimport,nodecl> end
global function cairo_surface_observer_add_flush_callback(abstract_surface: *cairo_surface_t, func: cairo_surface_observer_callback_t, data: pointer): cairo_status_t <cimport,nodecl> end
global function cairo_surface_observer_add_finish_callback(abstract_surface: *cairo_surface_t, func: cairo_surface_observer_callback_t, data: pointer): cairo_status_t <cimport,nodecl> end
global function cairo_surface_observer_print(surface: *cairo_surface_t, write_func: cairo_write_func_t, closure: pointer): cairo_status_t <cimport,nodecl> end
global function cairo_surface_observer_elapsed(surface: *cairo_surface_t): float64 <cimport,nodecl> end
global function cairo_device_observer_print(device: *cairo_device_t, write_func: cairo_write_func_t, closure: pointer): cairo_status_t <cimport,nodecl> end
global function cairo_device_observer_elapsed(device: *cairo_device_t): float64 <cimport,nodecl> end
global function cairo_device_observer_paint_elapsed(device: *cairo_device_t): float64 <cimport,nodecl> end
global function cairo_device_observer_mask_elapsed(device: *cairo_device_t): float64 <cimport,nodecl> end
global function cairo_device_observer_fill_elapsed(device: *cairo_device_t): float64 <cimport,nodecl> end
global function cairo_device_observer_stroke_elapsed(device: *cairo_device_t): float64 <cimport,nodecl> end
global function cairo_device_observer_glyphs_elapsed(device: *cairo_device_t): float64 <cimport,nodecl> end
global function cairo_surface_reference(surface: *cairo_surface_t): *cairo_surface_t <cimport,nodecl> end
global function cairo_surface_finish(surface: *cairo_surface_t): void <cimport,nodecl> end
global function cairo_surface_destroy(surface: *cairo_surface_t): void <cimport,nodecl> end
global function cairo_surface_get_device(surface: *cairo_surface_t): *cairo_device_t <cimport,nodecl> end
global function cairo_surface_get_reference_count(surface: *cairo_surface_t): cuint <cimport,nodecl> end
global function cairo_surface_status(surface: *cairo_surface_t): cairo_status_t <cimport,nodecl> end
global function cairo_surface_get_type(surface: *cairo_surface_t): cairo_surface_type_t <cimport,nodecl> end
global function cairo_surface_get_content(surface: *cairo_surface_t): cairo_content_t <cimport,nodecl> end
global function cairo_surface_write_to_png(surface: *cairo_surface_t, filename: cstring): cairo_status_t <cimport,nodecl> end
global function cairo_surface_write_to_png_stream(surface: *cairo_surface_t, write_func: cairo_write_func_t, closure: pointer): cairo_status_t <cimport,nodecl> end
global function cairo_surface_get_user_data(surface: *cairo_surface_t, key: *cairo_user_data_key_t): pointer <cimport,nodecl> end
global function cairo_surface_set_user_data(surface: *cairo_surface_t, key: *cairo_user_data_key_t, user_data: pointer, destroy: cairo_destroy_func_t): cairo_status_t <cimport,nodecl> end
global function cairo_surface_get_mime_data(surface: *cairo_surface_t, mime_type: cstring, data: **cuchar, length: *culong): void <cimport,nodecl> end
global function cairo_surface_set_mime_data(surface: *cairo_surface_t, mime_type: cstring, data: *cuchar, length: culong, destroy: cairo_destroy_func_t, closure: pointer): cairo_status_t <cimport,nodecl> end
global function cairo_surface_supports_mime_type(surface: *cairo_surface_t, mime_type: cstring): cairo_bool_t <cimport,nodecl> end
global function cairo_surface_get_font_options(surface: *cairo_surface_t, options: *cairo_font_options_t): void <cimport,nodecl> end
global function cairo_surface_flush(surface: *cairo_surface_t): void <cimport,nodecl> end
global function cairo_surface_mark_dirty(surface: *cairo_surface_t): void <cimport,nodecl> end
global function cairo_surface_mark_dirty_rectangle(surface: *cairo_surface_t, x: cint, y: cint, width: cint, height: cint): void <cimport,nodecl> end
global function cairo_surface_set_device_scale(surface: *cairo_surface_t, x_scale: float64, y_scale: float64): void <cimport,nodecl> end
global function cairo_surface_get_device_scale(surface: *cairo_surface_t, x_scale: *float64, y_scale: *float64): void <cimport,nodecl> end
global function cairo_surface_set_device_offset(surface: *cairo_surface_t, x_offset: float64, y_offset: float64): void <cimport,nodecl> end
global function cairo_surface_get_device_offset(surface: *cairo_surface_t, x_offset: *float64, y_offset: *float64): void <cimport,nodecl> end
global function cairo_surface_set_fallback_resolution(surface: *cairo_surface_t, x_pixels_per_inch: float64, y_pixels_per_inch: float64): void <cimport,nodecl> end
global function cairo_surface_get_fallback_resolution(surface: *cairo_surface_t, x_pixels_per_inch: *float64, y_pixels_per_inch: *float64): void <cimport,nodecl> end
global function cairo_surface_copy_page(surface: *cairo_surface_t): void <cimport,nodecl> end
global function cairo_surface_show_page(surface: *cairo_surface_t): void <cimport,nodecl> end
global function cairo_surface_has_show_text_glyphs(surface: *cairo_surface_t): cairo_bool_t <cimport,nodecl> end
global function cairo_image_surface_create(format: cairo_format_t, width: cint, height: cint): *cairo_surface_t <cimport,nodecl> end
global function cairo_format_stride_for_width(format: cairo_format_t, width: cint): cint <cimport,nodecl> end
global function cairo_image_surface_create_for_data(data: *cuchar, format: cairo_format_t, width: cint, height: cint, stride: cint): *cairo_surface_t <cimport,nodecl> end
global function cairo_image_surface_get_data(surface: *cairo_surface_t): *cuchar <cimport,nodecl> end
global function cairo_image_surface_get_format(surface: *cairo_surface_t): cairo_format_t <cimport,nodecl> end
global function cairo_image_surface_get_width(surface: *cairo_surface_t): cint <cimport,nodecl> end
global function cairo_image_surface_get_height(surface: *cairo_surface_t): cint <cimport,nodecl> end
global function cairo_image_surface_get_stride(surface: *cairo_surface_t): cint <cimport,nodecl> end
global function cairo_image_surface_create_from_png(filename: cstring): *cairo_surface_t <cimport,nodecl> end
global function cairo_image_surface_create_from_png_stream(read_func: cairo_read_func_t, closure: pointer): *cairo_surface_t <cimport,nodecl> end
global function cairo_recording_surface_create(content: cairo_content_t, extents: *cairo_rectangle_t): *cairo_surface_t <cimport,nodecl> end
global function cairo_recording_surface_ink_extents(surface: *cairo_surface_t, x0: *float64, y0: *float64, width: *float64, height: *float64): void <cimport,nodecl> end
global function cairo_recording_surface_get_extents(surface: *cairo_surface_t, extents: *cairo_rectangle_t): cairo_bool_t <cimport,nodecl> end
global function cairo_pattern_create_raster_source(user_data: pointer, content: cairo_content_t, width: cint, height: cint): *cairo_pattern_t <cimport,nodecl> end
global function cairo_raster_source_pattern_set_callback_data(pattern: *cairo_pattern_t, data: pointer): void <cimport,nodecl> end
global function cairo_raster_source_pattern_get_callback_data(pattern: *cairo_pattern_t): pointer <cimport,nodecl> end
global function cairo_raster_source_pattern_set_acquire(pattern: *cairo_pattern_t, acquire: cairo_raster_source_acquire_func_t, release: cairo_raster_source_release_func_t): void <cimport,nodecl> end
global function cairo_raster_source_pattern_get_acquire(pattern: *cairo_pattern_t, acquire: *cairo_raster_source_acquire_func_t, release: *cairo_raster_source_release_func_t): void <cimport,nodecl> end
global function cairo_raster_source_pattern_set_snapshot(pattern: *cairo_pattern_t, snapshot: cairo_raster_source_snapshot_func_t): void <cimport,nodecl> end
global function cairo_raster_source_pattern_get_snapshot(pattern: *cairo_pattern_t): cairo_raster_source_snapshot_func_t <cimport,nodecl> end
global function cairo_raster_source_pattern_set_copy(pattern: *cairo_pattern_t, copy: cairo_raster_source_copy_func_t): void <cimport,nodecl> end
global function cairo_raster_source_pattern_get_copy(pattern: *cairo_pattern_t): cairo_raster_source_copy_func_t <cimport,nodecl> end
global function cairo_raster_source_pattern_set_finish(pattern: *cairo_pattern_t, finish: cairo_raster_source_finish_func_t): void <cimport,nodecl> end
global function cairo_raster_source_pattern_get_finish(pattern: *cairo_pattern_t): cairo_raster_source_finish_func_t <cimport,nodecl> end
global function cairo_pattern_create_rgb(red: float64, green: float64, blue: float64): *cairo_pattern_t <cimport,nodecl> end
global function cairo_pattern_create_rgba(red: float64, green: float64, blue: float64, alpha: float64): *cairo_pattern_t <cimport,nodecl> end
global function cairo_pattern_create_for_surface(surface: *cairo_surface_t): *cairo_pattern_t <cimport,nodecl> end
global function cairo_pattern_create_linear(x0: float64, y0: float64, x1: float64, y1: float64): *cairo_pattern_t <cimport,nodecl> end
global function cairo_pattern_create_radial(cx0: float64, cy0: float64, radius0: float64, cx1: float64, cy1: float64, radius1: float64): *cairo_pattern_t <cimport,nodecl> end
global function cairo_pattern_create_mesh(): *cairo_pattern_t <cimport,nodecl> end
global function cairo_pattern_reference(pattern: *cairo_pattern_t): *cairo_pattern_t <cimport,nodecl> end
global function cairo_pattern_destroy(pattern: *cairo_pattern_t): void <cimport,nodecl> end
global function cairo_pattern_get_reference_count(pattern: *cairo_pattern_t): cuint <cimport,nodecl> end
global function cairo_pattern_status(pattern: *cairo_pattern_t): cairo_status_t <cimport,nodecl> end
global function cairo_pattern_get_user_data(pattern: *cairo_pattern_t, key: *cairo_user_data_key_t): pointer <cimport,nodecl> end
global function cairo_pattern_set_user_data(pattern: *cairo_pattern_t, key: *cairo_user_data_key_t, user_data: pointer, destroy: cairo_destroy_func_t): cairo_status_t <cimport,nodecl> end
global function cairo_pattern_get_type(pattern: *cairo_pattern_t): cairo_pattern_type_t <cimport,nodecl> end
global function cairo_pattern_add_color_stop_rgb(pattern: *cairo_pattern_t, offset: float64, red: float64, green: float64, blue: float64): void <cimport,nodecl> end
global function cairo_pattern_add_color_stop_rgba(pattern: *cairo_pattern_t, offset: float64, red: float64, green: float64, blue: float64, alpha: float64): void <cimport,nodecl> end
global function cairo_mesh_pattern_begin_patch(pattern: *cairo_pattern_t): void <cimport,nodecl> end
global function cairo_mesh_pattern_end_patch(pattern: *cairo_pattern_t): void <cimport,nodecl> end
global function cairo_mesh_pattern_curve_to(pattern: *cairo_pattern_t, x1: float64, y1: float64, x2: float64, y2: float64, x3: float64, y3: float64): void <cimport,nodecl> end
global function cairo_mesh_pattern_line_to(pattern: *cairo_pattern_t, x: float64, y: float64): void <cimport,nodecl> end
global function cairo_mesh_pattern_move_to(pattern: *cairo_pattern_t, x: float64, y: float64): void <cimport,nodecl> end
global function cairo_mesh_pattern_set_control_point(pattern: *cairo_pattern_t, point_num: cuint, x: float64, y: float64): void <cimport,nodecl> end
global function cairo_mesh_pattern_set_corner_color_rgb(pattern: *cairo_pattern_t, corner_num: cuint, red: float64, green: float64, blue: float64): void <cimport,nodecl> end
global function cairo_mesh_pattern_set_corner_color_rgba(pattern: *cairo_pattern_t, corner_num: cuint, red: float64, green: float64, blue: float64, alpha: float64): void <cimport,nodecl> end
global function cairo_pattern_set_matrix(pattern: *cairo_pattern_t, matrix: *cairo_matrix_t): void <cimport,nodecl> end
global function cairo_pattern_get_matrix(pattern: *cairo_pattern_t, matrix: *cairo_matrix_t): void <cimport,nodecl> end
global function cairo_pattern_set_extend(pattern: *cairo_pattern_t, extend: cairo_extend_t): void <cimport,nodecl> end
global function cairo_pattern_get_extend(pattern: *cairo_pattern_t): cairo_extend_t <cimport,nodecl> end
global function cairo_pattern_set_filter(pattern: *cairo_pattern_t, filter: cairo_filter_t): void <cimport,nodecl> end
global function cairo_pattern_get_filter(pattern: *cairo_pattern_t): cairo_filter_t <cimport,nodecl> end
global function cairo_pattern_get_rgba(pattern: *cairo_pattern_t, red: *float64, green: *float64, blue: *float64, alpha: *float64): cairo_status_t <cimport,nodecl> end
global function cairo_pattern_get_surface(pattern: *cairo_pattern_t, surface: **cairo_surface_t): cairo_status_t <cimport,nodecl> end
global function cairo_pattern_get_color_stop_rgba(pattern: *cairo_pattern_t, index: cint, offset: *float64, red: *float64, green: *float64, blue: *float64, alpha: *float64): cairo_status_t <cimport,nodecl> end
global function cairo_pattern_get_color_stop_count(pattern: *cairo_pattern_t, count: *cint): cairo_status_t <cimport,nodecl> end
global function cairo_pattern_get_linear_points(pattern: *cairo_pattern_t, x0: *float64, y0: *float64, x1: *float64, y1: *float64): cairo_status_t <cimport,nodecl> end
global function cairo_pattern_get_radial_circles(pattern: *cairo_pattern_t, x0: *float64, y0: *float64, r0: *float64, x1: *float64, y1: *float64, r1: *float64): cairo_status_t <cimport,nodecl> end
global function cairo_mesh_pattern_get_patch_count(pattern: *cairo_pattern_t, count: *cuint): cairo_status_t <cimport,nodecl> end
global function cairo_mesh_pattern_get_path(pattern: *cairo_pattern_t, patch_num: cuint): *cairo_path_t <cimport,nodecl> end
global function cairo_mesh_pattern_get_corner_color_rgba(pattern: *cairo_pattern_t, patch_num: cuint, corner_num: cuint, red: *float64, green: *float64, blue: *float64, alpha: *float64): cairo_status_t <cimport,nodecl> end
global function cairo_mesh_pattern_get_control_point(pattern: *cairo_pattern_t, patch_num: cuint, point_num: cuint, x: *float64, y: *float64): cairo_status_t <cimport,nodecl> end
global function cairo_matrix_init(matrix: *cairo_matrix_t, xx: float64, yx: float64, xy: float64, yy: float64, x0: float64, y0: float64): void <cimport,nodecl> end
global function cairo_matrix_init_identity(matrix: *cairo_matrix_t): void <cimport,nodecl> end
global function cairo_matrix_init_translate(matrix: *cairo_matrix_t, tx: float64, ty: float64): void <cimport,nodecl> end
global function cairo_matrix_init_scale(matrix: *cairo_matrix_t, sx: float64, sy: float64): void <cimport,nodecl> end
global function cairo_matrix_init_rotate(matrix: *cairo_matrix_t, radians: float64): void <cimport,nodecl> end
global function cairo_matrix_translate(matrix: *cairo_matrix_t, tx: float64, ty: float64): void <cimport,nodecl> end
global function cairo_matrix_scale(matrix: *cairo_matrix_t, sx: float64, sy: float64): void <cimport,nodecl> end
global function cairo_matrix_rotate(matrix: *cairo_matrix_t, radians: float64): void <cimport,nodecl> end
global function cairo_matrix_invert(matrix: *cairo_matrix_t): cairo_status_t <cimport,nodecl> end
global function cairo_matrix_multiply(result: *cairo_matrix_t, a: *cairo_matrix_t, b: *cairo_matrix_t): void <cimport,nodecl> end
global function cairo_matrix_transform_distance(matrix: *cairo_matrix_t, dx: *float64, dy: *float64): void <cimport,nodecl> end
global function cairo_matrix_transform_point(matrix: *cairo_matrix_t, x: *float64, y: *float64): void <cimport,nodecl> end
global function cairo_region_create(): *cairo_region_t <cimport,nodecl> end
global function cairo_region_create_rectangle(rectangle: *cairo_rectangle_int_t): *cairo_region_t <cimport,nodecl> end
global function cairo_region_create_rectangles(rects: *cairo_rectangle_int_t, count: cint): *cairo_region_t <cimport,nodecl> end
global function cairo_region_copy(original: *cairo_region_t): *cairo_region_t <cimport,nodecl> end
global function cairo_region_reference(region: *cairo_region_t): *cairo_region_t <cimport,nodecl> end
global function cairo_region_destroy(region: *cairo_region_t): void <cimport,nodecl> end
global function cairo_region_equal(a: *cairo_region_t, b: *cairo_region_t): cairo_bool_t <cimport,nodecl> end
global function cairo_region_status(region: *cairo_region_t): cairo_status_t <cimport,nodecl> end
global function cairo_region_get_extents(region: *cairo_region_t, extents: *cairo_rectangle_int_t): void <cimport,nodecl> end
global function cairo_region_num_rectangles(region: *cairo_region_t): cint <cimport,nodecl> end
global function cairo_region_get_rectangle(region: *cairo_region_t, nth: cint, rectangle: *cairo_rectangle_int_t): void <cimport,nodecl> end
global function cairo_region_is_empty(region: *cairo_region_t): cairo_bool_t <cimport,nodecl> end
global function cairo_region_contains_rectangle(region: *cairo_region_t, rectangle: *cairo_rectangle_int_t): cairo_region_overlap_t <cimport,nodecl> end
global function cairo_region_contains_point(region: *cairo_region_t, x: cint, y: cint): cairo_bool_t <cimport,nodecl> end
global function cairo_region_translate(region: *cairo_region_t, dx: cint, dy: cint): void <cimport,nodecl> end
global function cairo_region_subtract(dst: *cairo_region_t, other: *cairo_region_t): cairo_status_t <cimport,nodecl> end
global function cairo_region_subtract_rectangle(dst: *cairo_region_t, rectangle: *cairo_rectangle_int_t): cairo_status_t <cimport,nodecl> end
global function cairo_region_intersect(dst: *cairo_region_t, other: *cairo_region_t): cairo_status_t <cimport,nodecl> end
global function cairo_region_intersect_rectangle(dst: *cairo_region_t, rectangle: *cairo_rectangle_int_t): cairo_status_t <cimport,nodecl> end
global function cairo_region_union(dst: *cairo_region_t, other: *cairo_region_t): cairo_status_t <cimport,nodecl> end
global function cairo_region_union_rectangle(dst: *cairo_region_t, rectangle: *cairo_rectangle_int_t): cairo_status_t <cimport,nodecl> end
global function cairo_region_xor(dst: *cairo_region_t, other: *cairo_region_t): cairo_status_t <cimport,nodecl> end
global function cairo_region_xor_rectangle(dst: *cairo_region_t, rectangle: *cairo_rectangle_int_t): cairo_status_t <cimport,nodecl> end
global function cairo_debug_reset_static_data(): void <cimport,nodecl> end
global function hb_tag_from_string(str: cstring, len: cint): hb_tag_t <cimport,nodecl> end
global function hb_tag_to_string(tag: hb_tag_t, buf: cstring): void <cimport,nodecl> end
global function hb_direction_from_string(str: cstring, len: cint): hb_direction_t <cimport,nodecl> end
global function hb_direction_to_string(direction: hb_direction_t): cstring <cimport,nodecl> end
global function hb_language_from_string(str: cstring, len: cint): hb_language_t <cimport,nodecl> end
global function hb_language_to_string(language: hb_language_t): cstring <cimport,nodecl> end
global function hb_language_get_default(): hb_language_t <cimport,nodecl> end
global function hb_script_from_iso15924_tag(tag: hb_tag_t): hb_script_t <cimport,nodecl> end
global function hb_script_from_string(str: cstring, len: cint): hb_script_t <cimport,nodecl> end
global function hb_script_to_iso15924_tag(script: hb_script_t): hb_tag_t <cimport,nodecl> end
global function hb_script_get_horizontal_direction(script: hb_script_t): hb_direction_t <cimport,nodecl> end
global function hb_feature_from_string(str: cstring, len: cint, feature: *hb_feature_t): hb_bool_t <cimport,nodecl> end
global function hb_feature_to_string(feature: *hb_feature_t, buf: cstring, size: cuint): void <cimport,nodecl> end
global function hb_variation_from_string(str: cstring, len: cint, variation: *hb_variation_t): hb_bool_t <cimport,nodecl> end
global function hb_variation_to_string(variation: *hb_variation_t, buf: cstring, size: cuint): void <cimport,nodecl> end
global function hb_color_get_alpha(color: hb_color_t): uint8 <cimport,nodecl> end
global function hb_color_get_red(color: hb_color_t): uint8 <cimport,nodecl> end
global function hb_color_get_green(color: hb_color_t): uint8 <cimport,nodecl> end
global function hb_color_get_blue(color: hb_color_t): uint8 <cimport,nodecl> end
global function hb_blob_create(data: cstring, length: cuint, mode: hb_memory_mode_t, user_data: pointer, destroy: hb_destroy_func_t): *hb_blob_t <cimport,nodecl> end
global function hb_blob_create_or_fail(data: cstring, length: cuint, mode: hb_memory_mode_t, user_data: pointer, destroy: hb_destroy_func_t): *hb_blob_t <cimport,nodecl> end
global function hb_blob_create_from_file(file_name: cstring): *hb_blob_t <cimport,nodecl> end
global function hb_blob_create_from_file_or_fail(file_name: cstring): *hb_blob_t <cimport,nodecl> end
global function hb_blob_create_sub_blob(parent: *hb_blob_t, offset: cuint, length: cuint): *hb_blob_t <cimport,nodecl> end
global function hb_blob_copy_writable_or_fail(blob: *hb_blob_t): *hb_blob_t <cimport,nodecl> end
global function hb_blob_get_empty(): *hb_blob_t <cimport,nodecl> end
global function hb_blob_reference(blob: *hb_blob_t): *hb_blob_t <cimport,nodecl> end
global function hb_blob_destroy(blob: *hb_blob_t): void <cimport,nodecl> end
global function hb_blob_set_user_data(blob: *hb_blob_t, key: *hb_user_data_key_t, data: pointer, destroy: hb_destroy_func_t, replace: hb_bool_t): hb_bool_t <cimport,nodecl> end
global function hb_blob_get_user_data(blob: *hb_blob_t, key: *hb_user_data_key_t): pointer <cimport,nodecl> end
global function hb_blob_make_immutable(blob: *hb_blob_t): void <cimport,nodecl> end
global function hb_blob_is_immutable(blob: *hb_blob_t): hb_bool_t <cimport,nodecl> end
global function hb_blob_get_length(blob: *hb_blob_t): cuint <cimport,nodecl> end
global function hb_blob_get_data(blob: *hb_blob_t, length: *cuint): cstring <cimport,nodecl> end
global function hb_blob_get_data_writable(blob: *hb_blob_t, length: *cuint): cstring <cimport,nodecl> end
global function hb_unicode_funcs_get_default(): *hb_unicode_funcs_t <cimport,nodecl> end
global function hb_unicode_funcs_create(parent: *hb_unicode_funcs_t): *hb_unicode_funcs_t <cimport,nodecl> end
global function hb_unicode_funcs_get_empty(): *hb_unicode_funcs_t <cimport,nodecl> end
global function hb_unicode_funcs_reference(ufuncs: *hb_unicode_funcs_t): *hb_unicode_funcs_t <cimport,nodecl> end
global function hb_unicode_funcs_destroy(ufuncs: *hb_unicode_funcs_t): void <cimport,nodecl> end
global function hb_unicode_funcs_set_user_data(ufuncs: *hb_unicode_funcs_t, key: *hb_user_data_key_t, data: pointer, destroy: hb_destroy_func_t, replace: hb_bool_t): hb_bool_t <cimport,nodecl> end
global function hb_unicode_funcs_get_user_data(ufuncs: *hb_unicode_funcs_t, key: *hb_user_data_key_t): pointer <cimport,nodecl> end
global function hb_unicode_funcs_make_immutable(ufuncs: *hb_unicode_funcs_t): void <cimport,nodecl> end
global function hb_unicode_funcs_is_immutable(ufuncs: *hb_unicode_funcs_t): hb_bool_t <cimport,nodecl> end
global function hb_unicode_funcs_get_parent(ufuncs: *hb_unicode_funcs_t): *hb_unicode_funcs_t <cimport,nodecl> end
global function hb_unicode_funcs_set_combining_class_func(ufuncs: *hb_unicode_funcs_t, func: hb_unicode_combining_class_func_t, user_data: pointer, destroy: hb_destroy_func_t): void <cimport,nodecl> end
global function hb_unicode_funcs_set_general_category_func(ufuncs: *hb_unicode_funcs_t, func: hb_unicode_general_category_func_t, user_data: pointer, destroy: hb_destroy_func_t): void <cimport,nodecl> end
global function hb_unicode_funcs_set_mirroring_func(ufuncs: *hb_unicode_funcs_t, func: hb_unicode_mirroring_func_t, user_data: pointer, destroy: hb_destroy_func_t): void <cimport,nodecl> end
global function hb_unicode_funcs_set_script_func(ufuncs: *hb_unicode_funcs_t, func: hb_unicode_script_func_t, user_data: pointer, destroy: hb_destroy_func_t): void <cimport,nodecl> end
global function hb_unicode_funcs_set_compose_func(ufuncs: *hb_unicode_funcs_t, func: hb_unicode_compose_func_t, user_data: pointer, destroy: hb_destroy_func_t): void <cimport,nodecl> end
global function hb_unicode_funcs_set_decompose_func(ufuncs: *hb_unicode_funcs_t, func: hb_unicode_decompose_func_t, user_data: pointer, destroy: hb_destroy_func_t): void <cimport,nodecl> end
global function hb_unicode_combining_class(ufuncs: *hb_unicode_funcs_t, unicode: hb_codepoint_t): hb_unicode_combining_class_t <cimport,nodecl> end
global function hb_unicode_general_category(ufuncs: *hb_unicode_funcs_t, unicode: hb_codepoint_t): hb_unicode_general_category_t <cimport,nodecl> end
global function hb_unicode_mirroring(ufuncs: *hb_unicode_funcs_t, unicode: hb_codepoint_t): hb_codepoint_t <cimport,nodecl> end
global function hb_unicode_script(ufuncs: *hb_unicode_funcs_t, unicode: hb_codepoint_t): hb_script_t <cimport,nodecl> end
global function hb_unicode_compose(ufuncs: *hb_unicode_funcs_t, a: hb_codepoint_t, b: hb_codepoint_t, ab: *hb_codepoint_t): hb_bool_t <cimport,nodecl> end
global function hb_unicode_decompose(ufuncs: *hb_unicode_funcs_t, ab: hb_codepoint_t, a: *hb_codepoint_t, b: *hb_codepoint_t): hb_bool_t <cimport,nodecl> end
global function hb_set_create(): *hb_set_t <cimport,nodecl> end
global function hb_set_get_empty(): *hb_set_t <cimport,nodecl> end
global function hb_set_reference(set: *hb_set_t): *hb_set_t <cimport,nodecl> end
global function hb_set_destroy(set: *hb_set_t): void <cimport,nodecl> end
global function hb_set_set_user_data(set: *hb_set_t, key: *hb_user_data_key_t, data: pointer, destroy: hb_destroy_func_t, replace: hb_bool_t): hb_bool_t <cimport,nodecl> end
global function hb_set_get_user_data(set: *hb_set_t, key: *hb_user_data_key_t): pointer <cimport,nodecl> end
global function hb_set_allocation_successful(set: *hb_set_t): hb_bool_t <cimport,nodecl> end
global function hb_set_copy(set: *hb_set_t): *hb_set_t <cimport,nodecl> end
global function hb_set_clear(set: *hb_set_t): void <cimport,nodecl> end
global function hb_set_is_empty(set: *hb_set_t): hb_bool_t <cimport,nodecl> end
global function hb_set_invert(set: *hb_set_t): void <cimport,nodecl> end
global function hb_set_has(set: *hb_set_t, codepoint: hb_codepoint_t): hb_bool_t <cimport,nodecl> end
global function hb_set_add(set: *hb_set_t, codepoint: hb_codepoint_t): void <cimport,nodecl> end
global function hb_set_add_range(set: *hb_set_t, first: hb_codepoint_t, last: hb_codepoint_t): void <cimport,nodecl> end
global function hb_set_del(set: *hb_set_t, codepoint: hb_codepoint_t): void <cimport,nodecl> end
global function hb_set_del_range(set: *hb_set_t, first: hb_codepoint_t, last: hb_codepoint_t): void <cimport,nodecl> end
global function hb_set_is_equal(set: *hb_set_t, other: *hb_set_t): hb_bool_t <cimport,nodecl> end
global function hb_set_is_subset(set: *hb_set_t, larger_set: *hb_set_t): hb_bool_t <cimport,nodecl> end
global function hb_set_set(set: *hb_set_t, other: *hb_set_t): void <cimport,nodecl> end
global function hb_set_union(set: *hb_set_t, other: *hb_set_t): void <cimport,nodecl> end
global function hb_set_intersect(set: *hb_set_t, other: *hb_set_t): void <cimport,nodecl> end
global function hb_set_subtract(set: *hb_set_t, other: *hb_set_t): void <cimport,nodecl> end
global function hb_set_symmetric_difference(set: *hb_set_t, other: *hb_set_t): void <cimport,nodecl> end
global function hb_set_get_population(set: *hb_set_t): cuint <cimport,nodecl> end
global function hb_set_get_min(set: *hb_set_t): hb_codepoint_t <cimport,nodecl> end
global function hb_set_get_max(set: *hb_set_t): hb_codepoint_t <cimport,nodecl> end
global function hb_set_next(set: *hb_set_t, codepoint: *hb_codepoint_t): hb_bool_t <cimport,nodecl> end
global function hb_set_previous(set: *hb_set_t, codepoint: *hb_codepoint_t): hb_bool_t <cimport,nodecl> end
global function hb_set_next_range(set: *hb_set_t, first: *hb_codepoint_t, last: *hb_codepoint_t): hb_bool_t <cimport,nodecl> end
global function hb_set_previous_range(set: *hb_set_t, first: *hb_codepoint_t, last: *hb_codepoint_t): hb_bool_t <cimport,nodecl> end
global function hb_face_count(blob: *hb_blob_t): cuint <cimport,nodecl> end
global function hb_face_create(blob: *hb_blob_t, index: cuint): *hb_face_t <cimport,nodecl> end
global function hb_face_create_for_tables(reference_table_func: hb_reference_table_func_t, user_data: pointer, destroy: hb_destroy_func_t): *hb_face_t <cimport,nodecl> end
global function hb_face_get_empty(): *hb_face_t <cimport,nodecl> end
global function hb_face_reference(face: *hb_face_t): *hb_face_t <cimport,nodecl> end
global function hb_face_destroy(face: *hb_face_t): void <cimport,nodecl> end
global function hb_face_set_user_data(face: *hb_face_t, key: *hb_user_data_key_t, data: pointer, destroy: hb_destroy_func_t, replace: hb_bool_t): hb_bool_t <cimport,nodecl> end
global function hb_face_get_user_data(face: *hb_face_t, key: *hb_user_data_key_t): pointer <cimport,nodecl> end
global function hb_face_make_immutable(face: *hb_face_t): void <cimport,nodecl> end
global function hb_face_is_immutable(face: *hb_face_t): hb_bool_t <cimport,nodecl> end
global function hb_face_reference_table(face: *hb_face_t, tag: hb_tag_t): *hb_blob_t <cimport,nodecl> end
global function hb_face_reference_blob(face: *hb_face_t): *hb_blob_t <cimport,nodecl> end
global function hb_face_set_index(face: *hb_face_t, index: cuint): void <cimport,nodecl> end
global function hb_face_get_index(face: *hb_face_t): cuint <cimport,nodecl> end
global function hb_face_set_upem(face: *hb_face_t, upem: cuint): void <cimport,nodecl> end
global function hb_face_get_upem(face: *hb_face_t): cuint <cimport,nodecl> end
global function hb_face_set_glyph_count(face: *hb_face_t, glyph_count: cuint): void <cimport,nodecl> end
global function hb_face_get_glyph_count(face: *hb_face_t): cuint <cimport,nodecl> end
global function hb_face_get_table_tags(face: *hb_face_t, start_offset: cuint, table_count: *cuint, table_tags: *hb_tag_t): cuint <cimport,nodecl> end
global function hb_face_collect_unicodes(face: *hb_face_t, out: *hb_set_t): void <cimport,nodecl> end
global function hb_face_collect_variation_selectors(face: *hb_face_t, out: *hb_set_t): void <cimport,nodecl> end
global function hb_face_collect_variation_unicodes(face: *hb_face_t, variation_selector: hb_codepoint_t, out: *hb_set_t): void <cimport,nodecl> end
global function hb_face_builder_create(): *hb_face_t <cimport,nodecl> end
global function hb_face_builder_add_table(face: *hb_face_t, tag: hb_tag_t, blob: *hb_blob_t): hb_bool_t <cimport,nodecl> end
global function hb_draw_funcs_set_move_to_func(dfuncs: *hb_draw_funcs_t, func: hb_draw_move_to_func_t, user_data: pointer, destroy: hb_destroy_func_t): void <cimport,nodecl> end
global function hb_draw_funcs_set_line_to_func(dfuncs: *hb_draw_funcs_t, func: hb_draw_line_to_func_t, user_data: pointer, destroy: hb_destroy_func_t): void <cimport,nodecl> end
global function hb_draw_funcs_set_quadratic_to_func(dfuncs: *hb_draw_funcs_t, func: hb_draw_quadratic_to_func_t, user_data: pointer, destroy: hb_destroy_func_t): void <cimport,nodecl> end
global function hb_draw_funcs_set_cubic_to_func(dfuncs: *hb_draw_funcs_t, func: hb_draw_cubic_to_func_t, user_data: pointer, destroy: hb_destroy_func_t): void <cimport,nodecl> end
global function hb_draw_funcs_set_close_path_func(dfuncs: *hb_draw_funcs_t, func: hb_draw_close_path_func_t, user_data: pointer, destroy: hb_destroy_func_t): void <cimport,nodecl> end
global function hb_draw_funcs_create(): *hb_draw_funcs_t <cimport,nodecl> end
global function hb_draw_funcs_reference(dfuncs: *hb_draw_funcs_t): *hb_draw_funcs_t <cimport,nodecl> end
global function hb_draw_funcs_destroy(dfuncs: *hb_draw_funcs_t): void <cimport,nodecl> end
global function hb_draw_funcs_make_immutable(dfuncs: *hb_draw_funcs_t): void <cimport,nodecl> end
global function hb_draw_funcs_is_immutable(dfuncs: *hb_draw_funcs_t): hb_bool_t <cimport,nodecl> end
global function hb_draw_move_to(dfuncs: *hb_draw_funcs_t, draw_data: pointer, st: *hb_draw_state_t, to_x: float32, to_y: float32): void <cimport,nodecl> end
global function hb_draw_line_to(dfuncs: *hb_draw_funcs_t, draw_data: pointer, st: *hb_draw_state_t, to_x: float32, to_y: float32): void <cimport,nodecl> end
global function hb_draw_quadratic_to(dfuncs: *hb_draw_funcs_t, draw_data: pointer, st: *hb_draw_state_t, control_x: float32, control_y: float32, to_x: float32, to_y: float32): void <cimport,nodecl> end
global function hb_draw_cubic_to(dfuncs: *hb_draw_funcs_t, draw_data: pointer, st: *hb_draw_state_t, control1_x: float32, control1_y: float32, control2_x: float32, control2_y: float32, to_x: float32, to_y: float32): void <cimport,nodecl> end
global function hb_draw_close_path(dfuncs: *hb_draw_funcs_t, draw_data: pointer, st: *hb_draw_state_t): void <cimport,nodecl> end
global function hb_font_funcs_create(): *hb_font_funcs_t <cimport,nodecl> end
global function hb_font_funcs_get_empty(): *hb_font_funcs_t <cimport,nodecl> end
global function hb_font_funcs_reference(ffuncs: *hb_font_funcs_t): *hb_font_funcs_t <cimport,nodecl> end
global function hb_font_funcs_destroy(ffuncs: *hb_font_funcs_t): void <cimport,nodecl> end
global function hb_font_funcs_set_user_data(ffuncs: *hb_font_funcs_t, key: *hb_user_data_key_t, data: pointer, destroy: hb_destroy_func_t, replace: hb_bool_t): hb_bool_t <cimport,nodecl> end
global function hb_font_funcs_get_user_data(ffuncs: *hb_font_funcs_t, key: *hb_user_data_key_t): pointer <cimport,nodecl> end
global function hb_font_funcs_make_immutable(ffuncs: *hb_font_funcs_t): void <cimport,nodecl> end
global function hb_font_funcs_is_immutable(ffuncs: *hb_font_funcs_t): hb_bool_t <cimport,nodecl> end
global function hb_font_funcs_set_font_h_extents_func(ffuncs: *hb_font_funcs_t, func: hb_font_get_font_h_extents_func_t, user_data: pointer, destroy: hb_destroy_func_t): void <cimport,nodecl> end
global function hb_font_funcs_set_font_v_extents_func(ffuncs: *hb_font_funcs_t, func: hb_font_get_font_v_extents_func_t, user_data: pointer, destroy: hb_destroy_func_t): void <cimport,nodecl> end
global function hb_font_funcs_set_nominal_glyph_func(ffuncs: *hb_font_funcs_t, func: hb_font_get_nominal_glyph_func_t, user_data: pointer, destroy: hb_destroy_func_t): void <cimport,nodecl> end
global function hb_font_funcs_set_nominal_glyphs_func(ffuncs: *hb_font_funcs_t, func: hb_font_get_nominal_glyphs_func_t, user_data: pointer, destroy: hb_destroy_func_t): void <cimport,nodecl> end
global function hb_font_funcs_set_variation_glyph_func(ffuncs: *hb_font_funcs_t, func: hb_font_get_variation_glyph_func_t, user_data: pointer, destroy: hb_destroy_func_t): void <cimport,nodecl> end
global function hb_font_funcs_set_glyph_h_advance_func(ffuncs: *hb_font_funcs_t, func: hb_font_get_glyph_h_advance_func_t, user_data: pointer, destroy: hb_destroy_func_t): void <cimport,nodecl> end
global function hb_font_funcs_set_glyph_v_advance_func(ffuncs: *hb_font_funcs_t, func: hb_font_get_glyph_v_advance_func_t, user_data: pointer, destroy: hb_destroy_func_t): void <cimport,nodecl> end
global function hb_font_funcs_set_glyph_h_advances_func(ffuncs: *hb_font_funcs_t, func: hb_font_get_glyph_h_advances_func_t, user_data: pointer, destroy: hb_destroy_func_t): void <cimport,nodecl> end
global function hb_font_funcs_set_glyph_v_advances_func(ffuncs: *hb_font_funcs_t, func: hb_font_get_glyph_v_advances_func_t, user_data: pointer, destroy: hb_destroy_func_t): void <cimport,nodecl> end
global function hb_font_funcs_set_glyph_h_origin_func(ffuncs: *hb_font_funcs_t, func: hb_font_get_glyph_h_origin_func_t, user_data: pointer, destroy: hb_destroy_func_t): void <cimport,nodecl> end
global function hb_font_funcs_set_glyph_v_origin_func(ffuncs: *hb_font_funcs_t, func: hb_font_get_glyph_v_origin_func_t, user_data: pointer, destroy: hb_destroy_func_t): void <cimport,nodecl> end
global function hb_font_funcs_set_glyph_h_kerning_func(ffuncs: *hb_font_funcs_t, func: hb_font_get_glyph_h_kerning_func_t, user_data: pointer, destroy: hb_destroy_func_t): void <cimport,nodecl> end
global function hb_font_funcs_set_glyph_extents_func(ffuncs: *hb_font_funcs_t, func: hb_font_get_glyph_extents_func_t, user_data: pointer, destroy: hb_destroy_func_t): void <cimport,nodecl> end
global function hb_font_funcs_set_glyph_contour_point_func(ffuncs: *hb_font_funcs_t, func: hb_font_get_glyph_contour_point_func_t, user_data: pointer, destroy: hb_destroy_func_t): void <cimport,nodecl> end
global function hb_font_funcs_set_glyph_name_func(ffuncs: *hb_font_funcs_t, func: hb_font_get_glyph_name_func_t, user_data: pointer, destroy: hb_destroy_func_t): void <cimport,nodecl> end
global function hb_font_funcs_set_glyph_from_name_func(ffuncs: *hb_font_funcs_t, func: hb_font_get_glyph_from_name_func_t, user_data: pointer, destroy: hb_destroy_func_t): void <cimport,nodecl> end
global function hb_font_funcs_set_glyph_shape_func(ffuncs: *hb_font_funcs_t, func: hb_font_get_glyph_shape_func_t, user_data: pointer, destroy: hb_destroy_func_t): void <cimport,nodecl> end
global function hb_font_get_h_extents(font: *hb_font_t, extents: *hb_font_extents_t): hb_bool_t <cimport,nodecl> end
global function hb_font_get_v_extents(font: *hb_font_t, extents: *hb_font_extents_t): hb_bool_t <cimport,nodecl> end
global function hb_font_get_nominal_glyph(font: *hb_font_t, unicode: hb_codepoint_t, glyph: *hb_codepoint_t): hb_bool_t <cimport,nodecl> end
global function hb_font_get_variation_glyph(font: *hb_font_t, unicode: hb_codepoint_t, variation_selector: hb_codepoint_t, glyph: *hb_codepoint_t): hb_bool_t <cimport,nodecl> end
global function hb_font_get_nominal_glyphs(font: *hb_font_t, count: cuint, first_unicode: *hb_codepoint_t, unicode_stride: cuint, first_glyph: *hb_codepoint_t, glyph_stride: cuint): cuint <cimport,nodecl> end
global function hb_font_get_glyph_h_advance(font: *hb_font_t, glyph: hb_codepoint_t): hb_position_t <cimport,nodecl> end
global function hb_font_get_glyph_v_advance(font: *hb_font_t, glyph: hb_codepoint_t): hb_position_t <cimport,nodecl> end
global function hb_font_get_glyph_h_advances(font: *hb_font_t, count: cuint, first_glyph: *hb_codepoint_t, glyph_stride: cuint, first_advance: *hb_position_t, advance_stride: cuint): void <cimport,nodecl> end
global function hb_font_get_glyph_v_advances(font: *hb_font_t, count: cuint, first_glyph: *hb_codepoint_t, glyph_stride: cuint, first_advance: *hb_position_t, advance_stride: cuint): void <cimport,nodecl> end
global function hb_font_get_glyph_h_origin(font: *hb_font_t, glyph: hb_codepoint_t, x: *hb_position_t, y: *hb_position_t): hb_bool_t <cimport,nodecl> end
global function hb_font_get_glyph_v_origin(font: *hb_font_t, glyph: hb_codepoint_t, x: *hb_position_t, y: *hb_position_t): hb_bool_t <cimport,nodecl> end
global function hb_font_get_glyph_h_kerning(font: *hb_font_t, left_glyph: hb_codepoint_t, right_glyph: hb_codepoint_t): hb_position_t <cimport,nodecl> end
global function hb_font_get_glyph_extents(font: *hb_font_t, glyph: hb_codepoint_t, extents: *hb_glyph_extents_t): hb_bool_t <cimport,nodecl> end
global function hb_font_get_glyph_contour_point(font: *hb_font_t, glyph: hb_codepoint_t, point_index: cuint, x: *hb_position_t, y: *hb_position_t): hb_bool_t <cimport,nodecl> end
global function hb_font_get_glyph_name(font: *hb_font_t, glyph: hb_codepoint_t, name: cstring, size: cuint): hb_bool_t <cimport,nodecl> end
global function hb_font_get_glyph_from_name(font: *hb_font_t, name: cstring, len: cint, glyph: *hb_codepoint_t): hb_bool_t <cimport,nodecl> end
global function hb_font_get_glyph_shape(font: *hb_font_t, glyph: hb_codepoint_t, dfuncs: *hb_draw_funcs_t, draw_data: pointer): void <cimport,nodecl> end
global function hb_font_get_glyph(font: *hb_font_t, unicode: hb_codepoint_t, variation_selector: hb_codepoint_t, glyph: *hb_codepoint_t): hb_bool_t <cimport,nodecl> end
global function hb_font_get_extents_for_direction(font: *hb_font_t, direction: hb_direction_t, extents: *hb_font_extents_t): void <cimport,nodecl> end
global function hb_font_get_glyph_advance_for_direction(font: *hb_font_t, glyph: hb_codepoint_t, direction: hb_direction_t, x: *hb_position_t, y: *hb_position_t): void <cimport,nodecl> end
global function hb_font_get_glyph_advances_for_direction(font: *hb_font_t, direction: hb_direction_t, count: cuint, first_glyph: *hb_codepoint_t, glyph_stride: cuint, first_advance: *hb_position_t, advance_stride: cuint): void <cimport,nodecl> end
global function hb_font_get_glyph_origin_for_direction(font: *hb_font_t, glyph: hb_codepoint_t, direction: hb_direction_t, x: *hb_position_t, y: *hb_position_t): void <cimport,nodecl> end
global function hb_font_add_glyph_origin_for_direction(font: *hb_font_t, glyph: hb_codepoint_t, direction: hb_direction_t, x: *hb_position_t, y: *hb_position_t): void <cimport,nodecl> end
global function hb_font_subtract_glyph_origin_for_direction(font: *hb_font_t, glyph: hb_codepoint_t, direction: hb_direction_t, x: *hb_position_t, y: *hb_position_t): void <cimport,nodecl> end
global function hb_font_get_glyph_kerning_for_direction(font: *hb_font_t, first_glyph: hb_codepoint_t, second_glyph: hb_codepoint_t, direction: hb_direction_t, x: *hb_position_t, y: *hb_position_t): void <cimport,nodecl> end
global function hb_font_get_glyph_extents_for_origin(font: *hb_font_t, glyph: hb_codepoint_t, direction: hb_direction_t, extents: *hb_glyph_extents_t): hb_bool_t <cimport,nodecl> end
global function hb_font_get_glyph_contour_point_for_origin(font: *hb_font_t, glyph: hb_codepoint_t, point_index: cuint, direction: hb_direction_t, x: *hb_position_t, y: *hb_position_t): hb_bool_t <cimport,nodecl> end
global function hb_font_glyph_to_string(font: *hb_font_t, glyph: hb_codepoint_t, s: cstring, size: cuint): void <cimport,nodecl> end
global function hb_font_glyph_from_string(font: *hb_font_t, s: cstring, len: cint, glyph: *hb_codepoint_t): hb_bool_t <cimport,nodecl> end
global function hb_font_create(face: *hb_face_t): *hb_font_t <cimport,nodecl> end
global function hb_font_create_sub_font(parent: *hb_font_t): *hb_font_t <cimport,nodecl> end
global function hb_font_get_empty(): *hb_font_t <cimport,nodecl> end
global function hb_font_reference(font: *hb_font_t): *hb_font_t <cimport,nodecl> end
global function hb_font_destroy(font: *hb_font_t): void <cimport,nodecl> end
global function hb_font_set_user_data(font: *hb_font_t, key: *hb_user_data_key_t, data: pointer, destroy: hb_destroy_func_t, replace: hb_bool_t): hb_bool_t <cimport,nodecl> end
global function hb_font_get_user_data(font: *hb_font_t, key: *hb_user_data_key_t): pointer <cimport,nodecl> end
global function hb_font_make_immutable(font: *hb_font_t): void <cimport,nodecl> end
global function hb_font_is_immutable(font: *hb_font_t): hb_bool_t <cimport,nodecl> end
global function hb_font_set_parent(font: *hb_font_t, parent: *hb_font_t): void <cimport,nodecl> end
global function hb_font_get_parent(font: *hb_font_t): *hb_font_t <cimport,nodecl> end
global function hb_font_set_face(font: *hb_font_t, face: *hb_face_t): void <cimport,nodecl> end
global function hb_font_get_face(font: *hb_font_t): *hb_face_t <cimport,nodecl> end
global function hb_font_set_funcs(font: *hb_font_t, klass: *hb_font_funcs_t, font_data: pointer, destroy: hb_destroy_func_t): void <cimport,nodecl> end
global function hb_font_set_funcs_data(font: *hb_font_t, font_data: pointer, destroy: hb_destroy_func_t): void <cimport,nodecl> end
global function hb_font_set_scale(font: *hb_font_t, x_scale: cint, y_scale: cint): void <cimport,nodecl> end
global function hb_font_get_scale(font: *hb_font_t, x_scale: *cint, y_scale: *cint): void <cimport,nodecl> end
global function hb_font_set_ppem(font: *hb_font_t, x_ppem: cuint, y_ppem: cuint): void <cimport,nodecl> end
global function hb_font_get_ppem(font: *hb_font_t, x_ppem: *cuint, y_ppem: *cuint): void <cimport,nodecl> end
global function hb_font_set_ptem(font: *hb_font_t, ptem: float32): void <cimport,nodecl> end
global function hb_font_get_ptem(font: *hb_font_t): float32 <cimport,nodecl> end
global function hb_font_set_synthetic_slant(font: *hb_font_t, slant: float32): void <cimport,nodecl> end
global function hb_font_get_synthetic_slant(font: *hb_font_t): float32 <cimport,nodecl> end
global function hb_font_set_variations(font: *hb_font_t, variations: *hb_variation_t, variations_length: cuint): void <cimport,nodecl> end
global function hb_font_set_var_coords_design(font: *hb_font_t, coords: *float32, coords_length: cuint): void <cimport,nodecl> end
global function hb_font_get_var_coords_design(font: *hb_font_t, length: *cuint): *float32 <cimport,nodecl> end
global function hb_font_set_var_coords_normalized(font: *hb_font_t, coords: *cint, coords_length: cuint): void <cimport,nodecl> end
global function hb_font_get_var_coords_normalized(font: *hb_font_t, length: *cuint): *cint <cimport,nodecl> end
global function hb_font_set_var_named_instance(font: *hb_font_t, instance_index: cuint): void <cimport,nodecl> end
global function hb_glyph_info_get_glyph_flags(info: *hb_glyph_info_t): hb_glyph_flags_t <cimport,nodecl> end
global function hb_segment_properties_equal(a: *hb_segment_properties_t, b: *hb_segment_properties_t): hb_bool_t <cimport,nodecl> end
global function hb_segment_properties_hash(p: *hb_segment_properties_t): cuint <cimport,nodecl> end
global function hb_segment_properties_overlay(p: *hb_segment_properties_t, src: *hb_segment_properties_t): void <cimport,nodecl> end
global function hb_buffer_create(): *hb_buffer_t <cimport,nodecl> end
global function hb_buffer_create_similar(src: *hb_buffer_t): *hb_buffer_t <cimport,nodecl> end
global function hb_buffer_reset(buffer: *hb_buffer_t): void <cimport,nodecl> end
global function hb_buffer_get_empty(): *hb_buffer_t <cimport,nodecl> end
global function hb_buffer_reference(buffer: *hb_buffer_t): *hb_buffer_t <cimport,nodecl> end
global function hb_buffer_destroy(buffer: *hb_buffer_t): void <cimport,nodecl> end
global function hb_buffer_set_user_data(buffer: *hb_buffer_t, key: *hb_user_data_key_t, data: pointer, destroy: hb_destroy_func_t, replace: hb_bool_t): hb_bool_t <cimport,nodecl> end
global function hb_buffer_get_user_data(buffer: *hb_buffer_t, key: *hb_user_data_key_t): pointer <cimport,nodecl> end
global function hb_buffer_set_content_type(buffer: *hb_buffer_t, content_type: hb_buffer_content_type_t): void <cimport,nodecl> end
global function hb_buffer_get_content_type(buffer: *hb_buffer_t): hb_buffer_content_type_t <cimport,nodecl> end
global function hb_buffer_set_unicode_funcs(buffer: *hb_buffer_t, unicode_funcs: *hb_unicode_funcs_t): void <cimport,nodecl> end
global function hb_buffer_get_unicode_funcs(buffer: *hb_buffer_t): *hb_unicode_funcs_t <cimport,nodecl> end
global function hb_buffer_set_direction(buffer: *hb_buffer_t, direction: hb_direction_t): void <cimport,nodecl> end
global function hb_buffer_get_direction(buffer: *hb_buffer_t): hb_direction_t <cimport,nodecl> end
global function hb_buffer_set_script(buffer: *hb_buffer_t, script: hb_script_t): void <cimport,nodecl> end
global function hb_buffer_get_script(buffer: *hb_buffer_t): hb_script_t <cimport,nodecl> end
global function hb_buffer_set_language(buffer: *hb_buffer_t, language: hb_language_t): void <cimport,nodecl> end
global function hb_buffer_get_language(buffer: *hb_buffer_t): hb_language_t <cimport,nodecl> end
global function hb_buffer_set_segment_properties(buffer: *hb_buffer_t, props: *hb_segment_properties_t): void <cimport,nodecl> end
global function hb_buffer_get_segment_properties(buffer: *hb_buffer_t, props: *hb_segment_properties_t): void <cimport,nodecl> end
global function hb_buffer_guess_segment_properties(buffer: *hb_buffer_t): void <cimport,nodecl> end
global function hb_buffer_set_flags(buffer: *hb_buffer_t, flags: hb_buffer_flags_t): void <cimport,nodecl> end
global function hb_buffer_get_flags(buffer: *hb_buffer_t): hb_buffer_flags_t <cimport,nodecl> end
global function hb_buffer_set_cluster_level(buffer: *hb_buffer_t, cluster_level: hb_buffer_cluster_level_t): void <cimport,nodecl> end
global function hb_buffer_get_cluster_level(buffer: *hb_buffer_t): hb_buffer_cluster_level_t <cimport,nodecl> end
global function hb_buffer_set_replacement_codepoint(buffer: *hb_buffer_t, replacement: hb_codepoint_t): void <cimport,nodecl> end
global function hb_buffer_get_replacement_codepoint(buffer: *hb_buffer_t): hb_codepoint_t <cimport,nodecl> end
global function hb_buffer_set_invisible_glyph(buffer: *hb_buffer_t, invisible: hb_codepoint_t): void <cimport,nodecl> end
global function hb_buffer_get_invisible_glyph(buffer: *hb_buffer_t): hb_codepoint_t <cimport,nodecl> end
global function hb_buffer_set_not_found_glyph(buffer: *hb_buffer_t, not_found: hb_codepoint_t): void <cimport,nodecl> end
global function hb_buffer_get_not_found_glyph(buffer: *hb_buffer_t): hb_codepoint_t <cimport,nodecl> end
global function hb_buffer_clear_contents(buffer: *hb_buffer_t): void <cimport,nodecl> end
global function hb_buffer_pre_allocate(buffer: *hb_buffer_t, size: cuint): hb_bool_t <cimport,nodecl> end
global function hb_buffer_allocation_successful(buffer: *hb_buffer_t): hb_bool_t <cimport,nodecl> end
global function hb_buffer_reverse(buffer: *hb_buffer_t): void <cimport,nodecl> end
global function hb_buffer_reverse_range(buffer: *hb_buffer_t, start: cuint, end_: cuint): void <cimport,nodecl> end
global function hb_buffer_reverse_clusters(buffer: *hb_buffer_t): void <cimport,nodecl> end
global function hb_buffer_add(buffer: *hb_buffer_t, codepoint: hb_codepoint_t, cluster: cuint): void <cimport,nodecl> end
global function hb_buffer_add_utf8(buffer: *hb_buffer_t, text: cstring, text_length: cint, item_offset: cuint, item_length: cint): void <cimport,nodecl> end
global function hb_buffer_add_utf16(buffer: *hb_buffer_t, text: *uint16, text_length: cint, item_offset: cuint, item_length: cint): void <cimport,nodecl> end
global function hb_buffer_add_utf32(buffer: *hb_buffer_t, text: *uint32, text_length: cint, item_offset: cuint, item_length: cint): void <cimport,nodecl> end
global function hb_buffer_add_latin1(buffer: *hb_buffer_t, text: *uint8, text_length: cint, item_offset: cuint, item_length: cint): void <cimport,nodecl> end
global function hb_buffer_add_codepoints(buffer: *hb_buffer_t, text: *hb_codepoint_t, text_length: cint, item_offset: cuint, item_length: cint): void <cimport,nodecl> end
global function hb_buffer_append(buffer: *hb_buffer_t, source: *hb_buffer_t, start: cuint, end_: cuint): void <cimport,nodecl> end
global function hb_buffer_set_length(buffer: *hb_buffer_t, length: cuint): hb_bool_t <cimport,nodecl> end
global function hb_buffer_get_length(buffer: *hb_buffer_t): cuint <cimport,nodecl> end
global function hb_buffer_get_glyph_infos(buffer: *hb_buffer_t, length: *cuint): *hb_glyph_info_t <cimport,nodecl> end
global function hb_buffer_get_glyph_positions(buffer: *hb_buffer_t, length: *cuint): *hb_glyph_position_t <cimport,nodecl> end
global function hb_buffer_has_positions(buffer: *hb_buffer_t): hb_bool_t <cimport,nodecl> end
global function hb_buffer_normalize_glyphs(buffer: *hb_buffer_t): void <cimport,nodecl> end
global function hb_buffer_serialize_format_from_string(str: cstring, len: cint): hb_buffer_serialize_format_t <cimport,nodecl> end
global function hb_buffer_serialize_format_to_string(format: hb_buffer_serialize_format_t): cstring <cimport,nodecl> end
global function hb_buffer_serialize_list_formats(): *cstring <cimport,nodecl> end
global function hb_buffer_serialize_glyphs(buffer: *hb_buffer_t, start: cuint, end_: cuint, buf: cstring, buf_size: cuint, buf_consumed: *cuint, font: *hb_font_t, format: hb_buffer_serialize_format_t, flags: hb_buffer_serialize_flags_t): cuint <cimport,nodecl> end
global function hb_buffer_serialize_unicode(buffer: *hb_buffer_t, start: cuint, end_: cuint, buf: cstring, buf_size: cuint, buf_consumed: *cuint, format: hb_buffer_serialize_format_t, flags: hb_buffer_serialize_flags_t): cuint <cimport,nodecl> end
global function hb_buffer_serialize(buffer: *hb_buffer_t, start: cuint, end_: cuint, buf: cstring, buf_size: cuint, buf_consumed: *cuint, font: *hb_font_t, format: hb_buffer_serialize_format_t, flags: hb_buffer_serialize_flags_t): cuint <cimport,nodecl> end
global function hb_buffer_deserialize_glyphs(buffer: *hb_buffer_t, buf: cstring, buf_len: cint, end_ptr: *cstring, font: *hb_font_t, format: hb_buffer_serialize_format_t): hb_bool_t <cimport,nodecl> end
global function hb_buffer_deserialize_unicode(buffer: *hb_buffer_t, buf: cstring, buf_len: cint, end_ptr: *cstring, format: hb_buffer_serialize_format_t): hb_bool_t <cimport,nodecl> end
global function hb_buffer_diff(buffer: *hb_buffer_t, reference: *hb_buffer_t, dottedcircle_glyph: hb_codepoint_t, position_fuzz: cuint): hb_buffer_diff_flags_t <cimport,nodecl> end
global function hb_buffer_set_message_func(buffer: *hb_buffer_t, func: hb_buffer_message_func_t, user_data: pointer, destroy: hb_destroy_func_t): void <cimport,nodecl> end
global function hb_font_funcs_set_glyph_func(ffuncs: *hb_font_funcs_t, func: hb_font_get_glyph_func_t, user_data: pointer, destroy: hb_destroy_func_t): void <cimport,nodecl> end
global function hb_unicode_funcs_set_eastasian_width_func(ufuncs: *hb_unicode_funcs_t, func: hb_unicode_eastasian_width_func_t, user_data: pointer, destroy: hb_destroy_func_t): void <cimport,nodecl> end
global function hb_unicode_eastasian_width(ufuncs: *hb_unicode_funcs_t, unicode: hb_codepoint_t): cuint <cimport,nodecl> end
global function hb_unicode_funcs_set_decompose_compatibility_func(ufuncs: *hb_unicode_funcs_t, func: hb_unicode_decompose_compatibility_func_t, user_data: pointer, destroy: hb_destroy_func_t): void <cimport,nodecl> end
global function hb_unicode_decompose_compatibility(ufuncs: *hb_unicode_funcs_t, u: hb_codepoint_t, decomposed: *hb_codepoint_t): cuint <cimport,nodecl> end
global function hb_font_funcs_set_glyph_v_kerning_func(ffuncs: *hb_font_funcs_t, func: hb_font_get_glyph_v_kerning_func_t, user_data: pointer, destroy: hb_destroy_func_t): void <cimport,nodecl> end
global function hb_font_get_glyph_v_kerning(font: *hb_font_t, top_glyph: hb_codepoint_t, bottom_glyph: hb_codepoint_t): hb_position_t <cimport,nodecl> end
global function hb_map_create(): *hb_map_t <cimport,nodecl> end
global function hb_map_get_empty(): *hb_map_t <cimport,nodecl> end
global function hb_map_reference(map: *hb_map_t): *hb_map_t <cimport,nodecl> end
global function hb_map_destroy(map: *hb_map_t): void <cimport,nodecl> end
global function hb_map_set_user_data(map: *hb_map_t, key: *hb_user_data_key_t, data: pointer, destroy: hb_destroy_func_t, replace: hb_bool_t): hb_bool_t <cimport,nodecl> end
global function hb_map_get_user_data(map: *hb_map_t, key: *hb_user_data_key_t): pointer <cimport,nodecl> end
global function hb_map_allocation_successful(map: *hb_map_t): hb_bool_t <cimport,nodecl> end
global function hb_map_clear(map: *hb_map_t): void <cimport,nodecl> end
global function hb_map_is_empty(map: *hb_map_t): hb_bool_t <cimport,nodecl> end
global function hb_map_get_population(map: *hb_map_t): cuint <cimport,nodecl> end
global function hb_map_set(map: *hb_map_t, key: hb_codepoint_t, value: hb_codepoint_t): void <cimport,nodecl> end
global function hb_map_get(map: *hb_map_t, key: hb_codepoint_t): hb_codepoint_t <cimport,nodecl> end
global function hb_map_del(map: *hb_map_t, key: hb_codepoint_t): void <cimport,nodecl> end
global function hb_map_has(map: *hb_map_t, key: hb_codepoint_t): hb_bool_t <cimport,nodecl> end
global function hb_shape(font: *hb_font_t, buffer: *hb_buffer_t, features: *hb_feature_t, num_features: cuint): void <cimport,nodecl> end
global function hb_shape_full(font: *hb_font_t, buffer: *hb_buffer_t, features: *hb_feature_t, num_features: cuint, shaper_list: *cstring): hb_bool_t <cimport,nodecl> end
global function hb_shape_list_shapers(): *cstring <cimport,nodecl> end
global function hb_shape_plan_create(face: *hb_face_t, props: *hb_segment_properties_t, user_features: *hb_feature_t, num_user_features: cuint, shaper_list: *cstring): *hb_shape_plan_t <cimport,nodecl> end
global function hb_shape_plan_create_cached(face: *hb_face_t, props: *hb_segment_properties_t, user_features: *hb_feature_t, num_user_features: cuint, shaper_list: *cstring): *hb_shape_plan_t <cimport,nodecl> end
global function hb_shape_plan_create2(face: *hb_face_t, props: *hb_segment_properties_t, user_features: *hb_feature_t, num_user_features: cuint, coords: *cint, num_coords: cuint, shaper_list: *cstring): *hb_shape_plan_t <cimport,nodecl> end
global function hb_shape_plan_create_cached2(face: *hb_face_t, props: *hb_segment_properties_t, user_features: *hb_feature_t, num_user_features: cuint, coords: *cint, num_coords: cuint, shaper_list: *cstring): *hb_shape_plan_t <cimport,nodecl> end
global function hb_shape_plan_get_empty(): *hb_shape_plan_t <cimport,nodecl> end
global function hb_shape_plan_reference(shape_plan: *hb_shape_plan_t): *hb_shape_plan_t <cimport,nodecl> end
global function hb_shape_plan_destroy(shape_plan: *hb_shape_plan_t): void <cimport,nodecl> end
global function hb_shape_plan_set_user_data(shape_plan: *hb_shape_plan_t, key: *hb_user_data_key_t, data: pointer, destroy: hb_destroy_func_t, replace: hb_bool_t): hb_bool_t <cimport,nodecl> end
global function hb_shape_plan_get_user_data(shape_plan: *hb_shape_plan_t, key: *hb_user_data_key_t): pointer <cimport,nodecl> end
global function hb_shape_plan_execute(shape_plan: *hb_shape_plan_t, font: *hb_font_t, buffer: *hb_buffer_t, features: *hb_feature_t, num_features: cuint): hb_bool_t <cimport,nodecl> end
global function hb_shape_plan_get_shaper(shape_plan: *hb_shape_plan_t): cstring <cimport,nodecl> end
global function hb_style_get_value(font: *hb_font_t, style_tag: hb_style_tag_t): float32 <cimport,nodecl> end
global function hb_version(major: *cuint, minor: *cuint, micro: *cuint): void <cimport,nodecl> end
global function hb_version_string(): cstring <cimport,nodecl> end
global function hb_version_atleast(major: cuint, minor: cuint, micro: cuint): hb_bool_t <cimport,nodecl> end
global function pango_coverage_get_type(): GType <cimport,nodecl> end
global function pango_coverage_new(): *PangoCoverage <cimport,nodecl> end
global function pango_coverage_ref(coverage: *PangoCoverage): *PangoCoverage <cimport,nodecl> end
global function pango_coverage_unref(coverage: *PangoCoverage): void <cimport,nodecl> end
global function pango_coverage_copy(coverage: *PangoCoverage): *PangoCoverage <cimport,nodecl> end
global function pango_coverage_get(coverage: *PangoCoverage, index_: cint): PangoCoverageLevel <cimport,nodecl> end
global function pango_coverage_set(coverage: *PangoCoverage, index_: cint, level: PangoCoverageLevel): void <cimport,nodecl> end
global function pango_coverage_max(coverage: *PangoCoverage, other: *PangoCoverage): void <cimport,nodecl> end
global function pango_coverage_to_bytes(coverage: *PangoCoverage, bytes: **guchar, n_bytes: *cint): void <cimport,nodecl> end
global function pango_coverage_from_bytes(bytes: *guchar, n_bytes: cint): *PangoCoverage <cimport,nodecl> end
global function glib_autoptr_clear_PangoCoverage(_ptr: *PangoCoverage): void <cimport,nodecl> end
global function glib_autoptr_cleanup_PangoCoverage(_ptr: **PangoCoverage): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_PangoCoverage(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_PangoCoverage(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_PangoCoverage(_q: **GQueue): void <cimport,nodecl> end
global function pango_units_from_double(d: float64): cint <cimport,nodecl> end
global function pango_units_to_double(i: cint): float64 <cimport,nodecl> end
global function pango_extents_to_pixels(inclusive: *PangoRectangle, nearest: *PangoRectangle): void <cimport,nodecl> end
global function pango_matrix_get_type(): GType <cimport,nodecl> end
global function pango_matrix_copy(matrix: *PangoMatrix): *PangoMatrix <cimport,nodecl> end
global function pango_matrix_free(matrix: *PangoMatrix): void <cimport,nodecl> end
global function pango_matrix_translate(matrix: *PangoMatrix, tx: float64, ty: float64): void <cimport,nodecl> end
global function pango_matrix_scale(matrix: *PangoMatrix, scale_x: float64, scale_y: float64): void <cimport,nodecl> end
global function pango_matrix_rotate(matrix: *PangoMatrix, degrees: float64): void <cimport,nodecl> end
global function pango_matrix_concat(matrix: *PangoMatrix, new_matrix: *PangoMatrix): void <cimport,nodecl> end
global function pango_matrix_transform_point(matrix: *PangoMatrix, x: *float64, y: *float64): void <cimport,nodecl> end
global function pango_matrix_transform_distance(matrix: *PangoMatrix, dx: *float64, dy: *float64): void <cimport,nodecl> end
global function pango_matrix_transform_rectangle(matrix: *PangoMatrix, rect: *PangoRectangle): void <cimport,nodecl> end
global function pango_matrix_transform_pixel_rectangle(matrix: *PangoMatrix, rect: *PangoRectangle): void <cimport,nodecl> end
global function pango_matrix_get_font_scale_factor(matrix: *PangoMatrix): float64 <cimport,nodecl> end
global function pango_matrix_get_font_scale_factors(matrix: *PangoMatrix, xscale: *float64, yscale: *float64): void <cimport,nodecl> end
global function pango_matrix_get_slant_ratio(matrix: *PangoMatrix): float64 <cimport,nodecl> end
global function pango_script_for_unichar(ch: gunichar): PangoScript <cimport,nodecl> end
global function pango_script_iter_get_type(): GType <cimport,nodecl> end
global function pango_script_iter_new(text: cstring, length: cint): *PangoScriptIter <cimport,nodecl> end
global function pango_script_iter_get_range(iter: *PangoScriptIter, start: *cstring, end_: *cstring, script: *PangoScript): void <cimport,nodecl> end
global function pango_script_iter_next(iter: *PangoScriptIter): gboolean <cimport,nodecl> end
global function pango_script_iter_free(iter: *PangoScriptIter): void <cimport,nodecl> end
global function pango_language_get_type(): GType <cimport,nodecl> end
global function pango_language_get_default(): *PangoLanguage <cimport,nodecl> end
global function pango_language_get_preferred(): **PangoLanguage <cimport,nodecl> end
global function pango_language_from_string(language: cstring): *PangoLanguage <cimport,nodecl> end
global function pango_language_to_string(language: *PangoLanguage): cstring <cimport,nodecl> end
global function pango_language_get_sample_string(language: *PangoLanguage): cstring <cimport,nodecl> end
global function pango_language_matches(language: *PangoLanguage, range_list: cstring): gboolean <cimport,nodecl> end
global function pango_language_includes_script(language: *PangoLanguage, script: PangoScript): gboolean <cimport,nodecl> end
global function pango_language_get_scripts(language: *PangoLanguage, num_scripts: *cint): *PangoScript <cimport,nodecl> end
global function pango_script_get_sample_language(script: PangoScript): *PangoLanguage <cimport,nodecl> end
global function pango_gravity_to_rotation(gravity: PangoGravity): float64 <cimport,nodecl> end
global function pango_gravity_get_for_matrix(matrix: *PangoMatrix): PangoGravity <cimport,nodecl> end
global function pango_gravity_get_for_script(script: PangoScript, base_gravity: PangoGravity, hint: PangoGravityHint): PangoGravity <cimport,nodecl> end
global function pango_gravity_get_for_script_and_width(script: PangoScript, wide: gboolean, base_gravity: PangoGravity, hint: PangoGravityHint): PangoGravity <cimport,nodecl> end
global function pango_bidi_type_for_unichar(ch: gunichar): PangoBidiType <cimport,nodecl> end
global function pango_unichar_direction(ch: gunichar): PangoDirection <cimport,nodecl> end
global function pango_find_base_dir(text: *gchar, length: gint): PangoDirection <cimport,nodecl> end
global function pango_get_mirror_char(ch: gunichar, mirrored_ch: *gunichar): gboolean <cimport,nodecl> end
global function pango_font_description_get_type(): GType <cimport,nodecl> end
global function pango_font_description_new(): *PangoFontDescription <cimport,nodecl> end
global function pango_font_description_copy(desc: *PangoFontDescription): *PangoFontDescription <cimport,nodecl> end
global function pango_font_description_copy_static(desc: *PangoFontDescription): *PangoFontDescription <cimport,nodecl> end
global function pango_font_description_hash(desc: *PangoFontDescription): guint <cimport,nodecl> end
global function pango_font_description_equal(desc1: *PangoFontDescription, desc2: *PangoFontDescription): gboolean <cimport,nodecl> end
global function pango_font_description_free(desc: *PangoFontDescription): void <cimport,nodecl> end
global function pango_font_descriptions_free(descs: **PangoFontDescription, n_descs: cint): void <cimport,nodecl> end
global function pango_font_description_set_family(desc: *PangoFontDescription, family: cstring): void <cimport,nodecl> end
global function pango_font_description_set_family_static(desc: *PangoFontDescription, family: cstring): void <cimport,nodecl> end
global function pango_font_description_get_family(desc: *PangoFontDescription): cstring <cimport,nodecl> end
global function pango_font_description_set_style(desc: *PangoFontDescription, style: PangoStyle): void <cimport,nodecl> end
global function pango_font_description_get_style(desc: *PangoFontDescription): PangoStyle <cimport,nodecl> end
global function pango_font_description_set_variant(desc: *PangoFontDescription, variant: PangoVariant): void <cimport,nodecl> end
global function pango_font_description_get_variant(desc: *PangoFontDescription): PangoVariant <cimport,nodecl> end
global function pango_font_description_set_weight(desc: *PangoFontDescription, weight: PangoWeight): void <cimport,nodecl> end
global function pango_font_description_get_weight(desc: *PangoFontDescription): PangoWeight <cimport,nodecl> end
global function pango_font_description_set_stretch(desc: *PangoFontDescription, stretch: PangoStretch): void <cimport,nodecl> end
global function pango_font_description_get_stretch(desc: *PangoFontDescription): PangoStretch <cimport,nodecl> end
global function pango_font_description_set_size(desc: *PangoFontDescription, size: gint): void <cimport,nodecl> end
global function pango_font_description_get_size(desc: *PangoFontDescription): gint <cimport,nodecl> end
global function pango_font_description_set_absolute_size(desc: *PangoFontDescription, size: float64): void <cimport,nodecl> end
global function pango_font_description_get_size_is_absolute(desc: *PangoFontDescription): gboolean <cimport,nodecl> end
global function pango_font_description_set_gravity(desc: *PangoFontDescription, gravity: PangoGravity): void <cimport,nodecl> end
global function pango_font_description_get_gravity(desc: *PangoFontDescription): PangoGravity <cimport,nodecl> end
global function pango_font_description_set_variations_static(desc: *PangoFontDescription, variations: cstring): void <cimport,nodecl> end
global function pango_font_description_set_variations(desc: *PangoFontDescription, variations: cstring): void <cimport,nodecl> end
global function pango_font_description_get_variations(desc: *PangoFontDescription): cstring <cimport,nodecl> end
global function pango_font_description_get_set_fields(desc: *PangoFontDescription): PangoFontMask <cimport,nodecl> end
global function pango_font_description_unset_fields(desc: *PangoFontDescription, to_unset: PangoFontMask): void <cimport,nodecl> end
global function pango_font_description_merge(desc: *PangoFontDescription, desc_to_merge: *PangoFontDescription, replace_existing: gboolean): void <cimport,nodecl> end
global function pango_font_description_merge_static(desc: *PangoFontDescription, desc_to_merge: *PangoFontDescription, replace_existing: gboolean): void <cimport,nodecl> end
global function pango_font_description_better_match(desc: *PangoFontDescription, old_match: *PangoFontDescription, new_match: *PangoFontDescription): gboolean <cimport,nodecl> end
global function pango_font_description_from_string(str: cstring): *PangoFontDescription <cimport,nodecl> end
global function pango_font_description_to_string(desc: *PangoFontDescription): cstring <cimport,nodecl> end
global function pango_font_description_to_filename(desc: *PangoFontDescription): cstring <cimport,nodecl> end
global function pango_font_metrics_get_type(): GType <cimport,nodecl> end
global function pango_font_metrics_ref(metrics: *PangoFontMetrics): *PangoFontMetrics <cimport,nodecl> end
global function pango_font_metrics_unref(metrics: *PangoFontMetrics): void <cimport,nodecl> end
global function pango_font_metrics_get_ascent(metrics: *PangoFontMetrics): cint <cimport,nodecl> end
global function pango_font_metrics_get_descent(metrics: *PangoFontMetrics): cint <cimport,nodecl> end
global function pango_font_metrics_get_height(metrics: *PangoFontMetrics): cint <cimport,nodecl> end
global function pango_font_metrics_get_approximate_char_width(metrics: *PangoFontMetrics): cint <cimport,nodecl> end
global function pango_font_metrics_get_approximate_digit_width(metrics: *PangoFontMetrics): cint <cimport,nodecl> end
global function pango_font_metrics_get_underline_position(metrics: *PangoFontMetrics): cint <cimport,nodecl> end
global function pango_font_metrics_get_underline_thickness(metrics: *PangoFontMetrics): cint <cimport,nodecl> end
global function pango_font_metrics_get_strikethrough_position(metrics: *PangoFontMetrics): cint <cimport,nodecl> end
global function pango_font_metrics_get_strikethrough_thickness(metrics: *PangoFontMetrics): cint <cimport,nodecl> end
global function pango_font_family_get_type(): GType <cimport,nodecl> end
global function pango_font_family_list_faces(family: *PangoFontFamily, faces: ***PangoFontFace, n_faces: *cint): void <cimport,nodecl> end
global function pango_font_family_get_name(family: *PangoFontFamily): cstring <cimport,nodecl> end
global function pango_font_family_is_monospace(family: *PangoFontFamily): gboolean <cimport,nodecl> end
global function pango_font_family_is_variable(family: *PangoFontFamily): gboolean <cimport,nodecl> end
global function pango_font_family_get_face(family: *PangoFontFamily, name: cstring): *PangoFontFace <cimport,nodecl> end
global function pango_font_face_get_type(): GType <cimport,nodecl> end
global function pango_font_face_describe(face: *PangoFontFace): *PangoFontDescription <cimport,nodecl> end
global function pango_font_face_get_face_name(face: *PangoFontFace): cstring <cimport,nodecl> end
global function pango_font_face_list_sizes(face: *PangoFontFace, sizes: **cint, n_sizes: *cint): void <cimport,nodecl> end
global function pango_font_face_is_synthesized(face: *PangoFontFace): gboolean <cimport,nodecl> end
global function pango_font_face_get_family(face: *PangoFontFace): *PangoFontFamily <cimport,nodecl> end
global function pango_font_get_type(): GType <cimport,nodecl> end
global function pango_font_describe(font: *PangoFont): *PangoFontDescription <cimport,nodecl> end
global function pango_font_describe_with_absolute_size(font: *PangoFont): *PangoFontDescription <cimport,nodecl> end
global function pango_font_get_coverage(font: *PangoFont, language: *PangoLanguage): *PangoCoverage <cimport,nodecl> end
global function pango_font_find_shaper(font: *PangoFont, language: *PangoLanguage, ch: guint32): *PangoEngineShape <cimport,nodecl> end
global function pango_font_get_metrics(font: *PangoFont, language: *PangoLanguage): *PangoFontMetrics <cimport,nodecl> end
global function pango_font_get_glyph_extents(font: *PangoFont, glyph: PangoGlyph, ink_rect: *PangoRectangle, logical_rect: *PangoRectangle): void <cimport,nodecl> end
global function pango_font_get_font_map(font: *PangoFont): *PangoFontMap <cimport,nodecl> end
global function pango_font_get_face(font: *PangoFont): *PangoFontFace <cimport,nodecl> end
global function pango_font_has_char(font: *PangoFont, wc: gunichar): gboolean <cimport,nodecl> end
global function pango_font_get_features(font: *PangoFont, features: *hb_feature_t, len: guint, num_features: *guint): void <cimport,nodecl> end
global function pango_font_get_hb_font(font: *PangoFont): *hb_font_t <cimport,nodecl> end
global function pango_font_get_languages(font: *PangoFont): **PangoLanguage <cimport,nodecl> end
global function pango_font_serialize(font: *PangoFont): *GBytes <cimport,nodecl> end
global function pango_font_deserialize(context: *PangoContext, bytes: *GBytes, error: **GError): *PangoFont <cimport,nodecl> end
global function glib_autoptr_clear_PangoFontFamily(_ptr: *PangoFontFamily): void <cimport,nodecl> end
global function glib_autoptr_cleanup_PangoFontFamily(_ptr: **PangoFontFamily): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_PangoFontFamily(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_PangoFontFamily(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_PangoFontFamily(_q: **GQueue): void <cimport,nodecl> end
global function glib_autoptr_clear_PangoFontFace(_ptr: *PangoFontFace): void <cimport,nodecl> end
global function glib_autoptr_cleanup_PangoFontFace(_ptr: **PangoFontFace): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_PangoFontFace(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_PangoFontFace(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_PangoFontFace(_q: **GQueue): void <cimport,nodecl> end
global function glib_autoptr_clear_PangoFont(_ptr: *PangoFont): void <cimport,nodecl> end
global function glib_autoptr_cleanup_PangoFont(_ptr: **PangoFont): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_PangoFont(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_PangoFont(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_PangoFont(_q: **GQueue): void <cimport,nodecl> end
global function glib_autoptr_clear_PangoFontDescription(_ptr: *PangoFontDescription): void <cimport,nodecl> end
global function glib_autoptr_cleanup_PangoFontDescription(_ptr: **PangoFontDescription): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_PangoFontDescription(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_PangoFontDescription(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_PangoFontDescription(_q: **GQueue): void <cimport,nodecl> end
global function pango_color_get_type(): GType <cimport,nodecl> end
global function pango_color_copy(src: *PangoColor): *PangoColor <cimport,nodecl> end
global function pango_color_free(color: *PangoColor): void <cimport,nodecl> end
global function pango_color_parse(color: *PangoColor, spec: cstring): gboolean <cimport,nodecl> end
global function pango_color_parse_with_alpha(color: *PangoColor, alpha: *guint16, spec: cstring): gboolean <cimport,nodecl> end
global function pango_color_to_string(color: *PangoColor): cstring <cimport,nodecl> end
global function pango_attribute_get_type(): GType <cimport,nodecl> end
global function pango_attr_type_register(name: cstring): PangoAttrType <cimport,nodecl> end
global function pango_attr_type_get_name(type: PangoAttrType): cstring <cimport,nodecl> end
global function pango_attribute_init(attr: *PangoAttribute, klass: *PangoAttrClass): void <cimport,nodecl> end
global function pango_attribute_copy(attr: *PangoAttribute): *PangoAttribute <cimport,nodecl> end
global function pango_attribute_destroy(attr: *PangoAttribute): void <cimport,nodecl> end
global function pango_attribute_equal(attr1: *PangoAttribute, attr2: *PangoAttribute): gboolean <cimport,nodecl> end
global function pango_attr_language_new(language: *PangoLanguage): *PangoAttribute <cimport,nodecl> end
global function pango_attr_family_new(family: cstring): *PangoAttribute <cimport,nodecl> end
global function pango_attr_foreground_new(red: guint16, green: guint16, blue: guint16): *PangoAttribute <cimport,nodecl> end
global function pango_attr_background_new(red: guint16, green: guint16, blue: guint16): *PangoAttribute <cimport,nodecl> end
global function pango_attr_size_new(size: cint): *PangoAttribute <cimport,nodecl> end
global function pango_attr_size_new_absolute(size: cint): *PangoAttribute <cimport,nodecl> end
global function pango_attr_style_new(style: PangoStyle): *PangoAttribute <cimport,nodecl> end
global function pango_attr_weight_new(weight: PangoWeight): *PangoAttribute <cimport,nodecl> end
global function pango_attr_variant_new(variant: PangoVariant): *PangoAttribute <cimport,nodecl> end
global function pango_attr_stretch_new(stretch: PangoStretch): *PangoAttribute <cimport,nodecl> end
global function pango_attr_font_desc_new(desc: *PangoFontDescription): *PangoAttribute <cimport,nodecl> end
global function pango_attr_underline_new(underline: PangoUnderline): *PangoAttribute <cimport,nodecl> end
global function pango_attr_underline_color_new(red: guint16, green: guint16, blue: guint16): *PangoAttribute <cimport,nodecl> end
global function pango_attr_strikethrough_new(strikethrough: gboolean): *PangoAttribute <cimport,nodecl> end
global function pango_attr_strikethrough_color_new(red: guint16, green: guint16, blue: guint16): *PangoAttribute <cimport,nodecl> end
global function pango_attr_rise_new(rise: cint): *PangoAttribute <cimport,nodecl> end
global function pango_attr_baseline_shift_new(shift: cint): *PangoAttribute <cimport,nodecl> end
global function pango_attr_font_scale_new(scale: PangoFontScale): *PangoAttribute <cimport,nodecl> end
global function pango_attr_scale_new(scale_factor: float64): *PangoAttribute <cimport,nodecl> end
global function pango_attr_fallback_new(enable_fallback: gboolean): *PangoAttribute <cimport,nodecl> end
global function pango_attr_letter_spacing_new(letter_spacing: cint): *PangoAttribute <cimport,nodecl> end
global function pango_attr_shape_new(ink_rect: *PangoRectangle, logical_rect: *PangoRectangle): *PangoAttribute <cimport,nodecl> end
global function pango_attr_shape_new_with_data(ink_rect: *PangoRectangle, logical_rect: *PangoRectangle, data: gpointer, copy_func: PangoAttrDataCopyFunc, destroy_func: GDestroyNotify): *PangoAttribute <cimport,nodecl> end
global function pango_attr_gravity_new(gravity: PangoGravity): *PangoAttribute <cimport,nodecl> end
global function pango_attr_gravity_hint_new(hint: PangoGravityHint): *PangoAttribute <cimport,nodecl> end
global function pango_attr_font_features_new(features: cstring): *PangoAttribute <cimport,nodecl> end
global function pango_attr_foreground_alpha_new(alpha: guint16): *PangoAttribute <cimport,nodecl> end
global function pango_attr_background_alpha_new(alpha: guint16): *PangoAttribute <cimport,nodecl> end
global function pango_attr_allow_breaks_new(allow_breaks: gboolean): *PangoAttribute <cimport,nodecl> end
global function pango_attr_word_new(): *PangoAttribute <cimport,nodecl> end
global function pango_attr_sentence_new(): *PangoAttribute <cimport,nodecl> end
global function pango_attr_insert_hyphens_new(insert_hyphens: gboolean): *PangoAttribute <cimport,nodecl> end
global function pango_attr_overline_new(overline: PangoOverline): *PangoAttribute <cimport,nodecl> end
global function pango_attr_overline_color_new(red: guint16, green: guint16, blue: guint16): *PangoAttribute <cimport,nodecl> end
global function pango_attr_show_new(flags: PangoShowFlags): *PangoAttribute <cimport,nodecl> end
global function pango_attr_line_height_new(factor: float64): *PangoAttribute <cimport,nodecl> end
global function pango_attr_line_height_new_absolute(height: cint): *PangoAttribute <cimport,nodecl> end
global function pango_attr_text_transform_new(transform: PangoTextTransform): *PangoAttribute <cimport,nodecl> end
global function pango_attribute_as_string(attr: *PangoAttribute): *PangoAttrString <cimport,nodecl> end
global function pango_attribute_as_language(attr: *PangoAttribute): *PangoAttrLanguage <cimport,nodecl> end
global function pango_attribute_as_int(attr: *PangoAttribute): *PangoAttrInt <cimport,nodecl> end
global function pango_attribute_as_size(attr: *PangoAttribute): *PangoAttrSize <cimport,nodecl> end
global function pango_attribute_as_float(attr: *PangoAttribute): *PangoAttrFloat <cimport,nodecl> end
global function pango_attribute_as_color(attr: *PangoAttribute): *PangoAttrColor <cimport,nodecl> end
global function pango_attribute_as_font_desc(attr: *PangoAttribute): *PangoAttrFontDesc <cimport,nodecl> end
global function pango_attribute_as_shape(attr: *PangoAttribute): *PangoAttrShape <cimport,nodecl> end
global function pango_attribute_as_font_features(attr: *PangoAttribute): *PangoAttrFontFeatures <cimport,nodecl> end
global function pango_attr_list_get_type(): GType <cimport,nodecl> end
global function pango_attr_list_new(): *PangoAttrList <cimport,nodecl> end
global function pango_attr_list_ref(list: *PangoAttrList): *PangoAttrList <cimport,nodecl> end
global function pango_attr_list_unref(list: *PangoAttrList): void <cimport,nodecl> end
global function pango_attr_list_copy(list: *PangoAttrList): *PangoAttrList <cimport,nodecl> end
global function pango_attr_list_insert(list: *PangoAttrList, attr: *PangoAttribute): void <cimport,nodecl> end
global function pango_attr_list_insert_before(list: *PangoAttrList, attr: *PangoAttribute): void <cimport,nodecl> end
global function pango_attr_list_change(list: *PangoAttrList, attr: *PangoAttribute): void <cimport,nodecl> end
global function pango_attr_list_splice(list: *PangoAttrList, other: *PangoAttrList, pos: cint, len: cint): void <cimport,nodecl> end
global function pango_attr_list_update(list: *PangoAttrList, pos: cint, remove: cint, add: cint): void <cimport,nodecl> end
global function pango_attr_list_filter(list: *PangoAttrList, func: PangoAttrFilterFunc, data: gpointer): *PangoAttrList <cimport,nodecl> end
global function pango_attr_list_get_attributes(list: *PangoAttrList): *GSList <cimport,nodecl> end
global function pango_attr_list_equal(list: *PangoAttrList, other_list: *PangoAttrList): gboolean <cimport,nodecl> end
global function pango_attr_list_to_string(list: *PangoAttrList): cstring <cimport,nodecl> end
global function pango_attr_list_from_string(text: cstring): *PangoAttrList <cimport,nodecl> end
global function pango_attr_iterator_get_type(): GType <cimport,nodecl> end
global function pango_attr_list_get_iterator(list: *PangoAttrList): *PangoAttrIterator <cimport,nodecl> end
global function pango_attr_iterator_range(iterator: *PangoAttrIterator, start: *cint, end_: *cint): void <cimport,nodecl> end
global function pango_attr_iterator_next(iterator: *PangoAttrIterator): gboolean <cimport,nodecl> end
global function pango_attr_iterator_copy(iterator: *PangoAttrIterator): *PangoAttrIterator <cimport,nodecl> end
global function pango_attr_iterator_destroy(iterator: *PangoAttrIterator): void <cimport,nodecl> end
global function pango_attr_iterator_get(iterator: *PangoAttrIterator, type: PangoAttrType): *PangoAttribute <cimport,nodecl> end
global function pango_attr_iterator_get_font(iterator: *PangoAttrIterator, desc: *PangoFontDescription, language: **PangoLanguage, extra_attrs: **GSList): void <cimport,nodecl> end
global function pango_attr_iterator_get_attrs(iterator: *PangoAttrIterator): *GSList <cimport,nodecl> end
global function glib_autoptr_clear_PangoAttribute(_ptr: *PangoAttribute): void <cimport,nodecl> end
global function glib_autoptr_cleanup_PangoAttribute(_ptr: **PangoAttribute): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_PangoAttribute(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_PangoAttribute(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_PangoAttribute(_q: **GQueue): void <cimport,nodecl> end
global function glib_autoptr_clear_PangoAttrList(_ptr: *PangoAttrList): void <cimport,nodecl> end
global function glib_autoptr_cleanup_PangoAttrList(_ptr: **PangoAttrList): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_PangoAttrList(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_PangoAttrList(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_PangoAttrList(_q: **GQueue): void <cimport,nodecl> end
global function glib_autoptr_clear_PangoAttrIterator(_ptr: *PangoAttrIterator): void <cimport,nodecl> end
global function glib_autoptr_cleanup_PangoAttrIterator(_ptr: **PangoAttrIterator): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_PangoAttrIterator(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_PangoAttrIterator(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_PangoAttrIterator(_q: **GQueue): void <cimport,nodecl> end
global function pango_item_get_type(): GType <cimport,nodecl> end
global function pango_item_new(): *PangoItem <cimport,nodecl> end
global function pango_item_copy(item: *PangoItem): *PangoItem <cimport,nodecl> end
global function pango_item_free(item: *PangoItem): void <cimport,nodecl> end
global function pango_item_split(orig: *PangoItem, split_index: cint, split_offset: cint): *PangoItem <cimport,nodecl> end
global function pango_item_apply_attrs(item: *PangoItem, iter: *PangoAttrIterator): void <cimport,nodecl> end
global function pango_reorder_items(items: *GList): *GList <cimport,nodecl> end
global function pango_itemize(context: *PangoContext, text: cstring, start_index: cint, length: cint, attrs: *PangoAttrList, cached_iter: *PangoAttrIterator): *GList <cimport,nodecl> end
global function pango_itemize_with_base_dir(context: *PangoContext, base_dir: PangoDirection, text: cstring, start_index: cint, length: cint, attrs: *PangoAttrList, cached_iter: *PangoAttrIterator): *GList <cimport,nodecl> end
global function pango_break(text: cstring, length: cint, analysis: *PangoAnalysis, attrs: *PangoLogAttr, attrs_len: cint): void <cimport,nodecl> end
global function pango_get_log_attrs(text: cstring, length: cint, level: cint, language: *PangoLanguage, attrs: *PangoLogAttr, attrs_len: cint): void <cimport,nodecl> end
global function pango_default_break(text: cstring, length: cint, analysis: *PangoAnalysis, attrs: *PangoLogAttr, attrs_len: cint): void <cimport,nodecl> end
global function pango_tailor_break(text: cstring, length: cint, analysis: *PangoAnalysis, offset: cint, attrs: *PangoLogAttr, attrs_len: cint): void <cimport,nodecl> end
global function pango_attr_break(text: cstring, length: cint, attr_list: *PangoAttrList, offset: cint, attrs: *PangoLogAttr, attrs_len: cint): void <cimport,nodecl> end
global function pango_fontset_get_type(): GType <cimport,nodecl> end
global function pango_fontset_get_font(fontset: *PangoFontset, wc: guint): *PangoFont <cimport,nodecl> end
global function pango_fontset_get_metrics(fontset: *PangoFontset): *PangoFontMetrics <cimport,nodecl> end
global function pango_fontset_foreach(fontset: *PangoFontset, func: PangoFontsetForeachFunc, data: gpointer): void <cimport,nodecl> end
global function pango_font_map_get_type(): GType <cimport,nodecl> end
global function pango_font_map_create_context(fontmap: *PangoFontMap): *PangoContext <cimport,nodecl> end
global function pango_font_map_load_font(fontmap: *PangoFontMap, context: *PangoContext, desc: *PangoFontDescription): *PangoFont <cimport,nodecl> end
global function pango_font_map_load_fontset(fontmap: *PangoFontMap, context: *PangoContext, desc: *PangoFontDescription, language: *PangoLanguage): *PangoFontset <cimport,nodecl> end
global function pango_font_map_list_families(fontmap: *PangoFontMap, families: ***PangoFontFamily, n_families: *cint): void <cimport,nodecl> end
global function pango_font_map_get_serial(fontmap: *PangoFontMap): guint <cimport,nodecl> end
global function pango_font_map_changed(fontmap: *PangoFontMap): void <cimport,nodecl> end
global function pango_font_map_get_family(fontmap: *PangoFontMap, name: cstring): *PangoFontFamily <cimport,nodecl> end
global function glib_autoptr_clear_PangoFontMap(_ptr: *PangoFontMap): void <cimport,nodecl> end
global function glib_autoptr_cleanup_PangoFontMap(_ptr: **PangoFontMap): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_PangoFontMap(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_PangoFontMap(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_PangoFontMap(_q: **GQueue): void <cimport,nodecl> end
global function pango_context_get_type(): GType <cimport,nodecl> end
global function pango_context_new(): *PangoContext <cimport,nodecl> end
global function pango_context_changed(context: *PangoContext): void <cimport,nodecl> end
global function pango_context_set_font_map(context: *PangoContext, font_map: *PangoFontMap): void <cimport,nodecl> end
global function pango_context_get_font_map(context: *PangoContext): *PangoFontMap <cimport,nodecl> end
global function pango_context_get_serial(context: *PangoContext): guint <cimport,nodecl> end
global function pango_context_list_families(context: *PangoContext, families: ***PangoFontFamily, n_families: *cint): void <cimport,nodecl> end
global function pango_context_load_font(context: *PangoContext, desc: *PangoFontDescription): *PangoFont <cimport,nodecl> end
global function pango_context_load_fontset(context: *PangoContext, desc: *PangoFontDescription, language: *PangoLanguage): *PangoFontset <cimport,nodecl> end
global function pango_context_get_metrics(context: *PangoContext, desc: *PangoFontDescription, language: *PangoLanguage): *PangoFontMetrics <cimport,nodecl> end
global function pango_context_set_font_description(context: *PangoContext, desc: *PangoFontDescription): void <cimport,nodecl> end
global function pango_context_get_font_description(context: *PangoContext): *PangoFontDescription <cimport,nodecl> end
global function pango_context_get_language(context: *PangoContext): *PangoLanguage <cimport,nodecl> end
global function pango_context_set_language(context: *PangoContext, language: *PangoLanguage): void <cimport,nodecl> end
global function pango_context_set_base_dir(context: *PangoContext, direction: PangoDirection): void <cimport,nodecl> end
global function pango_context_get_base_dir(context: *PangoContext): PangoDirection <cimport,nodecl> end
global function pango_context_set_base_gravity(context: *PangoContext, gravity: PangoGravity): void <cimport,nodecl> end
global function pango_context_get_base_gravity(context: *PangoContext): PangoGravity <cimport,nodecl> end
global function pango_context_get_gravity(context: *PangoContext): PangoGravity <cimport,nodecl> end
global function pango_context_set_gravity_hint(context: *PangoContext, hint: PangoGravityHint): void <cimport,nodecl> end
global function pango_context_get_gravity_hint(context: *PangoContext): PangoGravityHint <cimport,nodecl> end
global function pango_context_set_matrix(context: *PangoContext, matrix: *PangoMatrix): void <cimport,nodecl> end
global function pango_context_get_matrix(context: *PangoContext): *PangoMatrix <cimport,nodecl> end
global function pango_context_set_round_glyph_positions(context: *PangoContext, round_positions: gboolean): void <cimport,nodecl> end
global function pango_context_get_round_glyph_positions(context: *PangoContext): gboolean <cimport,nodecl> end
global function pango_glyph_string_get_type(): GType <cimport,nodecl> end
global function pango_glyph_string_new(): *PangoGlyphString <cimport,nodecl> end
global function pango_glyph_string_set_size(string: *PangoGlyphString, new_len: cint): void <cimport,nodecl> end
global function pango_glyph_string_copy(string: *PangoGlyphString): *PangoGlyphString <cimport,nodecl> end
global function pango_glyph_string_free(string: *PangoGlyphString): void <cimport,nodecl> end
global function pango_glyph_string_extents(glyphs: *PangoGlyphString, font: *PangoFont, ink_rect: *PangoRectangle, logical_rect: *PangoRectangle): void <cimport,nodecl> end
global function pango_glyph_string_get_width(glyphs: *PangoGlyphString): cint <cimport,nodecl> end
global function pango_glyph_string_extents_range(glyphs: *PangoGlyphString, start: cint, end_: cint, font: *PangoFont, ink_rect: *PangoRectangle, logical_rect: *PangoRectangle): void <cimport,nodecl> end
global function pango_glyph_string_get_logical_widths(glyphs: *PangoGlyphString, text: cstring, length: cint, embedding_level: cint, logical_widths: *cint): void <cimport,nodecl> end
global function pango_glyph_string_index_to_x(glyphs: *PangoGlyphString, text: cstring, length: cint, analysis: *PangoAnalysis, index_: cint, trailing: gboolean, x_pos: *cint): void <cimport,nodecl> end
global function pango_glyph_string_x_to_index(glyphs: *PangoGlyphString, text: cstring, length: cint, analysis: *PangoAnalysis, x_pos: cint, index_: *cint, trailing: *cint): void <cimport,nodecl> end
global function pango_glyph_string_index_to_x_full(glyphs: *PangoGlyphString, text: cstring, length: cint, analysis: *PangoAnalysis, attrs: *PangoLogAttr, index_: cint, trailing: gboolean, x_pos: *cint): void <cimport,nodecl> end
global function pango_shape(text: cstring, length: cint, analysis: *PangoAnalysis, glyphs: *PangoGlyphString): void <cimport,nodecl> end
global function pango_shape_full(item_text: cstring, item_length: cint, paragraph_text: cstring, paragraph_length: cint, analysis: *PangoAnalysis, glyphs: *PangoGlyphString): void <cimport,nodecl> end
global function pango_shape_with_flags(item_text: cstring, item_length: cint, paragraph_text: cstring, paragraph_length: cint, analysis: *PangoAnalysis, glyphs: *PangoGlyphString, flags: PangoShapeFlags): void <cimport,nodecl> end
global function pango_shape_item(item: *PangoItem, paragraph_text: cstring, paragraph_length: cint, log_attrs: *PangoLogAttr, glyphs: *PangoGlyphString, flags: PangoShapeFlags): void <cimport,nodecl> end
global function pango_engine_get_type(): GType <cimport,nodecl> end
global function pango_engine_lang_get_type(): GType <cimport,nodecl> end
global function pango_engine_shape_get_type(): GType <cimport,nodecl> end
global function script_engine_list(engines: **PangoEngineInfo, n_engines: *cint): void <cimport,nodecl> end
global function script_engine_init(module: *GTypeModule): void <cimport,nodecl> end
global function script_engine_exit(): void <cimport,nodecl> end
global function script_engine_create(id: cstring): *PangoEngine <cimport,nodecl> end
global function pango_attr_type_get_type(): GType <cimport,nodecl> end
global function pango_underline_get_type(): GType <cimport,nodecl> end
global function pango_overline_get_type(): GType <cimport,nodecl> end
global function pango_show_flags_get_type(): GType <cimport,nodecl> end
global function pango_text_transform_get_type(): GType <cimport,nodecl> end
global function pango_baseline_shift_get_type(): GType <cimport,nodecl> end
global function pango_font_scale_get_type(): GType <cimport,nodecl> end
global function pango_bidi_type_get_type(): GType <cimport,nodecl> end
global function pango_coverage_level_get_type(): GType <cimport,nodecl> end
global function pango_direction_get_type(): GType <cimport,nodecl> end
global function pango_style_get_type(): GType <cimport,nodecl> end
global function pango_variant_get_type(): GType <cimport,nodecl> end
global function pango_weight_get_type(): GType <cimport,nodecl> end
global function pango_stretch_get_type(): GType <cimport,nodecl> end
global function pango_font_mask_get_type(): GType <cimport,nodecl> end
global function pango_shape_flags_get_type(): GType <cimport,nodecl> end
global function pango_gravity_get_type(): GType <cimport,nodecl> end
global function pango_gravity_hint_get_type(): GType <cimport,nodecl> end
global function pango_alignment_get_type(): GType <cimport,nodecl> end
global function pango_wrap_mode_get_type(): GType <cimport,nodecl> end
global function pango_ellipsize_mode_get_type(): GType <cimport,nodecl> end
global function pango_layout_serialize_flags_get_type(): GType <cimport,nodecl> end
global function pango_layout_deserialize_error_get_type(): GType <cimport,nodecl> end
global function pango_layout_deserialize_flags_get_type(): GType <cimport,nodecl> end
global function pango_render_part_get_type(): GType <cimport,nodecl> end
global function pango_script_get_type(): GType <cimport,nodecl> end
global function pango_tab_align_get_type(): GType <cimport,nodecl> end
global function pango_fontset_simple_get_type(): GType <cimport,nodecl> end
global function pango_fontset_simple_new(language: *PangoLanguage): *PangoFontsetSimple <cimport,nodecl> end
global function pango_fontset_simple_append(fontset: *PangoFontsetSimple, font: *PangoFont): void <cimport,nodecl> end
global function pango_fontset_simple_size(fontset: *PangoFontsetSimple): cint <cimport,nodecl> end
global function pango_glyph_item_get_type(): GType <cimport,nodecl> end
global function pango_glyph_item_split(orig: *PangoGlyphItem, text: cstring, split_index: cint): *PangoGlyphItem <cimport,nodecl> end
global function pango_glyph_item_copy(orig: *PangoGlyphItem): *PangoGlyphItem <cimport,nodecl> end
global function pango_glyph_item_free(glyph_item: *PangoGlyphItem): void <cimport,nodecl> end
global function pango_glyph_item_apply_attrs(glyph_item: *PangoGlyphItem, text: cstring, list: *PangoAttrList): *GSList <cimport,nodecl> end
global function pango_glyph_item_letter_space(glyph_item: *PangoGlyphItem, text: cstring, log_attrs: *PangoLogAttr, letter_spacing: cint): void <cimport,nodecl> end
global function pango_glyph_item_get_logical_widths(glyph_item: *PangoGlyphItem, text: cstring, logical_widths: *cint): void <cimport,nodecl> end
global function pango_glyph_item_iter_get_type(): GType <cimport,nodecl> end
global function pango_glyph_item_iter_copy(orig: *PangoGlyphItemIter): *PangoGlyphItemIter <cimport,nodecl> end
global function pango_glyph_item_iter_free(iter: *PangoGlyphItemIter): void <cimport,nodecl> end
global function pango_glyph_item_iter_init_start(iter: *PangoGlyphItemIter, glyph_item: *PangoGlyphItem, text: cstring): gboolean <cimport,nodecl> end
global function pango_glyph_item_iter_init_end(iter: *PangoGlyphItemIter, glyph_item: *PangoGlyphItem, text: cstring): gboolean <cimport,nodecl> end
global function pango_glyph_item_iter_next_cluster(iter: *PangoGlyphItemIter): gboolean <cimport,nodecl> end
global function pango_glyph_item_iter_prev_cluster(iter: *PangoGlyphItemIter): gboolean <cimport,nodecl> end
global function pango_tab_array_new(initial_size: gint, positions_in_pixels: gboolean): *PangoTabArray <cimport,nodecl> end
global function pango_tab_array_new_with_positions(size: gint, positions_in_pixels: gboolean, first_alignment: PangoTabAlign, first_position: gint, ...: cvarargs): *PangoTabArray <cimport,nodecl> end
global function pango_tab_array_get_type(): GType <cimport,nodecl> end
global function pango_tab_array_copy(src: *PangoTabArray): *PangoTabArray <cimport,nodecl> end
global function pango_tab_array_free(tab_array: *PangoTabArray): void <cimport,nodecl> end
global function pango_tab_array_get_size(tab_array: *PangoTabArray): gint <cimport,nodecl> end
global function pango_tab_array_resize(tab_array: *PangoTabArray, new_size: gint): void <cimport,nodecl> end
global function pango_tab_array_set_tab(tab_array: *PangoTabArray, tab_index: gint, alignment: PangoTabAlign, location: gint): void <cimport,nodecl> end
global function pango_tab_array_get_tab(tab_array: *PangoTabArray, tab_index: gint, alignment: *PangoTabAlign, location: *gint): void <cimport,nodecl> end
global function pango_tab_array_get_tabs(tab_array: *PangoTabArray, alignments: **PangoTabAlign, locations: **gint): void <cimport,nodecl> end
global function pango_tab_array_get_positions_in_pixels(tab_array: *PangoTabArray): gboolean <cimport,nodecl> end
global function pango_tab_array_set_positions_in_pixels(tab_array: *PangoTabArray, positions_in_pixels: gboolean): void <cimport,nodecl> end
global function pango_tab_array_to_string(tab_array: *PangoTabArray): cstring <cimport,nodecl> end
global function pango_tab_array_from_string(text: cstring): *PangoTabArray <cimport,nodecl> end
global function pango_tab_array_set_decimal_point(tab_array: *PangoTabArray, tab_index: cint, decimal_point: gunichar): void <cimport,nodecl> end
global function pango_tab_array_get_decimal_point(tab_array: *PangoTabArray, tab_index: cint): gunichar <cimport,nodecl> end
global function pango_tab_array_sort(tab_array: *PangoTabArray): void <cimport,nodecl> end
global function glib_autoptr_clear_PangoTabArray(_ptr: *PangoTabArray): void <cimport,nodecl> end
global function glib_autoptr_cleanup_PangoTabArray(_ptr: **PangoTabArray): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_PangoTabArray(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_PangoTabArray(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_PangoTabArray(_q: **GQueue): void <cimport,nodecl> end
global function pango_layout_get_type(): GType <cimport,nodecl> end
global function pango_layout_new(context: *PangoContext): *PangoLayout <cimport,nodecl> end
global function pango_layout_copy(src: *PangoLayout): *PangoLayout <cimport,nodecl> end
global function pango_layout_get_context(layout: *PangoLayout): *PangoContext <cimport,nodecl> end
global function pango_layout_set_attributes(layout: *PangoLayout, attrs: *PangoAttrList): void <cimport,nodecl> end
global function pango_layout_get_attributes(layout: *PangoLayout): *PangoAttrList <cimport,nodecl> end
global function pango_layout_set_text(layout: *PangoLayout, text: cstring, length: cint): void <cimport,nodecl> end
global function pango_layout_get_text(layout: *PangoLayout): cstring <cimport,nodecl> end
global function pango_layout_get_character_count(layout: *PangoLayout): gint <cimport,nodecl> end
global function pango_layout_set_markup(layout: *PangoLayout, markup: cstring, length: cint): void <cimport,nodecl> end
global function pango_layout_set_markup_with_accel(layout: *PangoLayout, markup: cstring, length: cint, accel_marker: gunichar, accel_char: *gunichar): void <cimport,nodecl> end
global function pango_layout_set_font_description(layout: *PangoLayout, desc: *PangoFontDescription): void <cimport,nodecl> end
global function pango_layout_get_font_description(layout: *PangoLayout): *PangoFontDescription <cimport,nodecl> end
global function pango_layout_set_width(layout: *PangoLayout, width: cint): void <cimport,nodecl> end
global function pango_layout_get_width(layout: *PangoLayout): cint <cimport,nodecl> end
global function pango_layout_set_height(layout: *PangoLayout, height: cint): void <cimport,nodecl> end
global function pango_layout_get_height(layout: *PangoLayout): cint <cimport,nodecl> end
global function pango_layout_set_wrap(layout: *PangoLayout, wrap: PangoWrapMode): void <cimport,nodecl> end
global function pango_layout_get_wrap(layout: *PangoLayout): PangoWrapMode <cimport,nodecl> end
global function pango_layout_is_wrapped(layout: *PangoLayout): gboolean <cimport,nodecl> end
global function pango_layout_set_indent(layout: *PangoLayout, indent: cint): void <cimport,nodecl> end
global function pango_layout_get_indent(layout: *PangoLayout): cint <cimport,nodecl> end
global function pango_layout_set_spacing(layout: *PangoLayout, spacing: cint): void <cimport,nodecl> end
global function pango_layout_get_spacing(layout: *PangoLayout): cint <cimport,nodecl> end
global function pango_layout_set_line_spacing(layout: *PangoLayout, factor: float32): void <cimport,nodecl> end
global function pango_layout_get_line_spacing(layout: *PangoLayout): float32 <cimport,nodecl> end
global function pango_layout_set_justify(layout: *PangoLayout, justify: gboolean): void <cimport,nodecl> end
global function pango_layout_get_justify(layout: *PangoLayout): gboolean <cimport,nodecl> end
global function pango_layout_set_justify_last_line(layout: *PangoLayout, justify: gboolean): void <cimport,nodecl> end
global function pango_layout_get_justify_last_line(layout: *PangoLayout): gboolean <cimport,nodecl> end
global function pango_layout_set_auto_dir(layout: *PangoLayout, auto_dir: gboolean): void <cimport,nodecl> end
global function pango_layout_get_auto_dir(layout: *PangoLayout): gboolean <cimport,nodecl> end
global function pango_layout_set_alignment(layout: *PangoLayout, alignment: PangoAlignment): void <cimport,nodecl> end
global function pango_layout_get_alignment(layout: *PangoLayout): PangoAlignment <cimport,nodecl> end
global function pango_layout_set_tabs(layout: *PangoLayout, tabs: *PangoTabArray): void <cimport,nodecl> end
global function pango_layout_get_tabs(layout: *PangoLayout): *PangoTabArray <cimport,nodecl> end
global function pango_layout_set_single_paragraph_mode(layout: *PangoLayout, setting: gboolean): void <cimport,nodecl> end
global function pango_layout_get_single_paragraph_mode(layout: *PangoLayout): gboolean <cimport,nodecl> end
global function pango_layout_set_ellipsize(layout: *PangoLayout, ellipsize: PangoEllipsizeMode): void <cimport,nodecl> end
global function pango_layout_get_ellipsize(layout: *PangoLayout): PangoEllipsizeMode <cimport,nodecl> end
global function pango_layout_is_ellipsized(layout: *PangoLayout): gboolean <cimport,nodecl> end
global function pango_layout_get_unknown_glyphs_count(layout: *PangoLayout): cint <cimport,nodecl> end
global function pango_layout_get_direction(layout: *PangoLayout, index: cint): PangoDirection <cimport,nodecl> end
global function pango_layout_context_changed(layout: *PangoLayout): void <cimport,nodecl> end
global function pango_layout_get_serial(layout: *PangoLayout): guint <cimport,nodecl> end
global function pango_layout_get_log_attrs(layout: *PangoLayout, attrs: **PangoLogAttr, n_attrs: *gint): void <cimport,nodecl> end
global function pango_layout_get_log_attrs_readonly(layout: *PangoLayout, n_attrs: *gint): *PangoLogAttr <cimport,nodecl> end
global function pango_layout_index_to_pos(layout: *PangoLayout, index_: cint, pos: *PangoRectangle): void <cimport,nodecl> end
global function pango_layout_index_to_line_x(layout: *PangoLayout, index_: cint, trailing: gboolean, line: *cint, x_pos: *cint): void <cimport,nodecl> end
global function pango_layout_get_cursor_pos(layout: *PangoLayout, index_: cint, strong_pos: *PangoRectangle, weak_pos: *PangoRectangle): void <cimport,nodecl> end
global function pango_layout_get_caret_pos(layout: *PangoLayout, index_: cint, strong_pos: *PangoRectangle, weak_pos: *PangoRectangle): void <cimport,nodecl> end
global function pango_layout_move_cursor_visually(layout: *PangoLayout, strong: gboolean, old_index: cint, old_trailing: cint, direction: cint, new_index: *cint, new_trailing: *cint): void <cimport,nodecl> end
global function pango_layout_xy_to_index(layout: *PangoLayout, x: cint, y: cint, index_: *cint, trailing: *cint): gboolean <cimport,nodecl> end
global function pango_layout_get_extents(layout: *PangoLayout, ink_rect: *PangoRectangle, logical_rect: *PangoRectangle): void <cimport,nodecl> end
global function pango_layout_get_pixel_extents(layout: *PangoLayout, ink_rect: *PangoRectangle, logical_rect: *PangoRectangle): void <cimport,nodecl> end
global function pango_layout_get_size(layout: *PangoLayout, width: *cint, height: *cint): void <cimport,nodecl> end
global function pango_layout_get_pixel_size(layout: *PangoLayout, width: *cint, height: *cint): void <cimport,nodecl> end
global function pango_layout_get_baseline(layout: *PangoLayout): cint <cimport,nodecl> end
global function pango_layout_get_line_count(layout: *PangoLayout): cint <cimport,nodecl> end
global function pango_layout_get_line(layout: *PangoLayout, line: cint): *PangoLayoutLine <cimport,nodecl> end
global function pango_layout_get_line_readonly(layout: *PangoLayout, line: cint): *PangoLayoutLine <cimport,nodecl> end
global function pango_layout_get_lines(layout: *PangoLayout): *GSList <cimport,nodecl> end
global function pango_layout_get_lines_readonly(layout: *PangoLayout): *GSList <cimport,nodecl> end
global function pango_layout_serialize(layout: *PangoLayout, flags: PangoLayoutSerializeFlags): *GBytes <cimport,nodecl> end
global function pango_layout_write_to_file(layout: *PangoLayout, flags: PangoLayoutSerializeFlags, filename: cstring, error: **GError): gboolean <cimport,nodecl> end
global function pango_layout_deserialize_error_quark(): GQuark <cimport,nodecl> end
global function pango_layout_deserialize(context: *PangoContext, bytes: *GBytes, flags: PangoLayoutDeserializeFlags, error: **GError): *PangoLayout <cimport,nodecl> end
global function pango_layout_line_get_type(): GType <cimport,nodecl> end
global function pango_layout_line_ref(line: *PangoLayoutLine): *PangoLayoutLine <cimport,nodecl> end
global function pango_layout_line_unref(line: *PangoLayoutLine): void <cimport,nodecl> end
global function pango_layout_line_get_start_index(line: *PangoLayoutLine): cint <cimport,nodecl> end
global function pango_layout_line_get_length(line: *PangoLayoutLine): cint <cimport,nodecl> end
global function pango_layout_line_is_paragraph_start(line: *PangoLayoutLine): gboolean <cimport,nodecl> end
global function pango_layout_line_get_resolved_direction(line: *PangoLayoutLine): PangoDirection <cimport,nodecl> end
global function pango_layout_line_x_to_index(line: *PangoLayoutLine, x_pos: cint, index_: *cint, trailing: *cint): gboolean <cimport,nodecl> end
global function pango_layout_line_index_to_x(line: *PangoLayoutLine, index_: cint, trailing: gboolean, x_pos: *cint): void <cimport,nodecl> end
global function pango_layout_line_get_x_ranges(line: *PangoLayoutLine, start_index: cint, end_index: cint, ranges: **cint, n_ranges: *cint): void <cimport,nodecl> end
global function pango_layout_line_get_extents(line: *PangoLayoutLine, ink_rect: *PangoRectangle, logical_rect: *PangoRectangle): void <cimport,nodecl> end
global function pango_layout_line_get_height(line: *PangoLayoutLine, height: *cint): void <cimport,nodecl> end
global function pango_layout_line_get_pixel_extents(layout_line: *PangoLayoutLine, ink_rect: *PangoRectangle, logical_rect: *PangoRectangle): void <cimport,nodecl> end
global function pango_layout_iter_get_type(): GType <cimport,nodecl> end
global function pango_layout_get_iter(layout: *PangoLayout): *PangoLayoutIter <cimport,nodecl> end
global function pango_layout_iter_copy(iter: *PangoLayoutIter): *PangoLayoutIter <cimport,nodecl> end
global function pango_layout_iter_free(iter: *PangoLayoutIter): void <cimport,nodecl> end
global function pango_layout_iter_get_index(iter: *PangoLayoutIter): cint <cimport,nodecl> end
global function pango_layout_iter_get_run(iter: *PangoLayoutIter): *PangoLayoutRun <cimport,nodecl> end
global function pango_layout_iter_get_run_readonly(iter: *PangoLayoutIter): *PangoLayoutRun <cimport,nodecl> end
global function pango_layout_iter_get_line(iter: *PangoLayoutIter): *PangoLayoutLine <cimport,nodecl> end
global function pango_layout_iter_get_line_readonly(iter: *PangoLayoutIter): *PangoLayoutLine <cimport,nodecl> end
global function pango_layout_iter_at_last_line(iter: *PangoLayoutIter): gboolean <cimport,nodecl> end
global function pango_layout_iter_get_layout(iter: *PangoLayoutIter): *PangoLayout <cimport,nodecl> end
global function pango_layout_iter_next_char(iter: *PangoLayoutIter): gboolean <cimport,nodecl> end
global function pango_layout_iter_next_cluster(iter: *PangoLayoutIter): gboolean <cimport,nodecl> end
global function pango_layout_iter_next_run(iter: *PangoLayoutIter): gboolean <cimport,nodecl> end
global function pango_layout_iter_next_line(iter: *PangoLayoutIter): gboolean <cimport,nodecl> end
global function pango_layout_iter_get_char_extents(iter: *PangoLayoutIter, logical_rect: *PangoRectangle): void <cimport,nodecl> end
global function pango_layout_iter_get_cluster_extents(iter: *PangoLayoutIter, ink_rect: *PangoRectangle, logical_rect: *PangoRectangle): void <cimport,nodecl> end
global function pango_layout_iter_get_run_extents(iter: *PangoLayoutIter, ink_rect: *PangoRectangle, logical_rect: *PangoRectangle): void <cimport,nodecl> end
global function pango_layout_iter_get_line_extents(iter: *PangoLayoutIter, ink_rect: *PangoRectangle, logical_rect: *PangoRectangle): void <cimport,nodecl> end
global function pango_layout_iter_get_line_yrange(iter: *PangoLayoutIter, y0_: *cint, y1_: *cint): void <cimport,nodecl> end
global function pango_layout_iter_get_layout_extents(iter: *PangoLayoutIter, ink_rect: *PangoRectangle, logical_rect: *PangoRectangle): void <cimport,nodecl> end
global function pango_layout_iter_get_baseline(iter: *PangoLayoutIter): cint <cimport,nodecl> end
global function pango_layout_iter_get_run_baseline(iter: *PangoLayoutIter): cint <cimport,nodecl> end
global function glib_autoptr_clear_PangoLayout(_ptr: *PangoLayout): void <cimport,nodecl> end
global function glib_autoptr_cleanup_PangoLayout(_ptr: **PangoLayout): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_PangoLayout(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_PangoLayout(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_PangoLayout(_q: **GQueue): void <cimport,nodecl> end
global function glib_autoptr_clear_PangoLayoutIter(_ptr: *PangoLayoutIter): void <cimport,nodecl> end
global function glib_autoptr_cleanup_PangoLayoutIter(_ptr: **PangoLayoutIter): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_PangoLayoutIter(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_PangoLayoutIter(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_PangoLayoutIter(_q: **GQueue): void <cimport,nodecl> end
global function pango_markup_parser_new(accel_marker: gunichar): *GMarkupParseContext <cimport,nodecl> end
global function pango_markup_parser_finish(context: *GMarkupParseContext, attr_list: **PangoAttrList, text: *cstring, accel_char: *gunichar, error: **GError): gboolean <cimport,nodecl> end
global function pango_parse_markup(markup_text: cstring, length: cint, accel_marker: gunichar, attr_list: **PangoAttrList, text: *cstring, accel_char: *gunichar, error: **GError): gboolean <cimport,nodecl> end
global function pango_renderer_get_type(): GType <cimport,nodecl> end
global function pango_renderer_draw_layout(renderer: *PangoRenderer, layout: *PangoLayout, x: cint, y: cint): void <cimport,nodecl> end
global function pango_renderer_draw_layout_line(renderer: *PangoRenderer, line: *PangoLayoutLine, x: cint, y: cint): void <cimport,nodecl> end
global function pango_renderer_draw_glyphs(renderer: *PangoRenderer, font: *PangoFont, glyphs: *PangoGlyphString, x: cint, y: cint): void <cimport,nodecl> end
global function pango_renderer_draw_glyph_item(renderer: *PangoRenderer, text: cstring, glyph_item: *PangoGlyphItem, x: cint, y: cint): void <cimport,nodecl> end
global function pango_renderer_draw_rectangle(renderer: *PangoRenderer, part: PangoRenderPart, x: cint, y: cint, width: cint, height: cint): void <cimport,nodecl> end
global function pango_renderer_draw_error_underline(renderer: *PangoRenderer, x: cint, y: cint, width: cint, height: cint): void <cimport,nodecl> end
global function pango_renderer_draw_trapezoid(renderer: *PangoRenderer, part: PangoRenderPart, y1_: float64, x11: float64, x21: float64, y2: float64, x12: float64, x22: float64): void <cimport,nodecl> end
global function pango_renderer_draw_glyph(renderer: *PangoRenderer, font: *PangoFont, glyph: PangoGlyph, x: float64, y: float64): void <cimport,nodecl> end
global function pango_renderer_activate(renderer: *PangoRenderer): void <cimport,nodecl> end
global function pango_renderer_deactivate(renderer: *PangoRenderer): void <cimport,nodecl> end
global function pango_renderer_part_changed(renderer: *PangoRenderer, part: PangoRenderPart): void <cimport,nodecl> end
global function pango_renderer_set_color(renderer: *PangoRenderer, part: PangoRenderPart, color: *PangoColor): void <cimport,nodecl> end
global function pango_renderer_get_color(renderer: *PangoRenderer, part: PangoRenderPart): *PangoColor <cimport,nodecl> end
global function pango_renderer_set_alpha(renderer: *PangoRenderer, part: PangoRenderPart, alpha: guint16): void <cimport,nodecl> end
global function pango_renderer_get_alpha(renderer: *PangoRenderer, part: PangoRenderPart): guint16 <cimport,nodecl> end
global function pango_renderer_set_matrix(renderer: *PangoRenderer, matrix: *PangoMatrix): void <cimport,nodecl> end
global function pango_renderer_get_matrix(renderer: *PangoRenderer): *PangoMatrix <cimport,nodecl> end
global function pango_renderer_get_layout(renderer: *PangoRenderer): *PangoLayout <cimport,nodecl> end
global function pango_renderer_get_layout_line(renderer: *PangoRenderer): *PangoLayoutLine <cimport,nodecl> end
global stdin: *FILE <cimport,nodecl>
global stdout: *FILE <cimport,nodecl>
global stderr: *FILE <cimport,nodecl>
global function remove(filename: cstring): cint <cimport,nodecl> end
global function rename(old: cstring, new: cstring): cint <cimport,nodecl> end
global function renameat(oldfd: cint, old: cstring, newfd: cint, new: cstring): cint <cimport,nodecl> end
global function fclose(stream: *FILE): cint <cimport,nodecl> end
global function tmpfile(): *FILE <cimport,nodecl> end
global function tmpnam(a1: *[20]cchar): cstring <cimport,nodecl> end
global function tmpnam_r(s: *[20]cchar): cstring <cimport,nodecl> end
global function tempnam(dir: cstring, pfx: cstring): cstring <cimport,nodecl> end
global function fflush(stream: *FILE): cint <cimport,nodecl> end
global function fflush_unlocked(stream: *FILE): cint <cimport,nodecl> end
global function fopen(filename: cstring, modes: cstring): *FILE <cimport,nodecl> end
global function freopen(filename: cstring, modes: cstring, stream: *FILE): *FILE <cimport,nodecl> end
global function fdopen(fd: cint, modes: cstring): *FILE <cimport,nodecl> end
global function fmemopen(s: pointer, len: csize, modes: cstring): *FILE <cimport,nodecl> end
global function open_memstream(bufloc: *cstring, sizeloc: *csize): *FILE <cimport,nodecl> end
global function setbuf(stream: *FILE, buf: cstring): void <cimport,nodecl> end
global function setvbuf(stream: *FILE, buf: cstring, modes: cint, n: csize): cint <cimport,nodecl> end
global function setbuffer(stream: *FILE, buf: cstring, size: csize): void <cimport,nodecl> end
global function setlinebuf(stream: *FILE): void <cimport,nodecl> end
global function fprintf(stream: *FILE, format: cstring, ...: cvarargs): cint <cimport,nodecl> end
global function printf(format: cstring, ...: cvarargs): cint <cimport,nodecl> end
global function sprintf(s: cstring, format: cstring, ...: cvarargs): cint <cimport,nodecl> end
global function vfprintf(s: *FILE, format: cstring, arg: cvalist): cint <cimport,nodecl> end
global function vprintf(format: cstring, arg: cvalist): cint <cimport,nodecl> end
global function vsprintf(s: cstring, format: cstring, arg: cvalist): cint <cimport,nodecl> end
global function snprintf(s: cstring, maxlen: csize, format: cstring, ...: cvarargs): cint <cimport,nodecl> end
global function vsnprintf(s: cstring, maxlen: csize, format: cstring, arg: cvalist): cint <cimport,nodecl> end
global function vdprintf(fd: cint, fmt: cstring, arg: cvalist): cint <cimport,nodecl> end
global function dprintf(fd: cint, fmt: cstring, ...: cvarargs): cint <cimport,nodecl> end
global function fscanf(stream: *FILE, format: cstring, ...: cvarargs): cint <cimport,nodecl> end
global function scanf(format: cstring, ...: cvarargs): cint <cimport,nodecl> end
global function sscanf(s: cstring, format: cstring, ...: cvarargs): cint <cimport,nodecl> end
global function vfscanf(s: *FILE, format: cstring, arg: cvalist): cint <cimport,nodecl> end
global function vscanf(format: cstring, arg: cvalist): cint <cimport,nodecl> end
global function vsscanf(s: cstring, format: cstring, arg: cvalist): cint <cimport,nodecl> end
global function fgetc(stream: *FILE): cint <cimport,nodecl> end
global function getc(stream: *FILE): cint <cimport,nodecl> end
global function getchar(): cint <cimport,nodecl> end
global function getc_unlocked(stream: *FILE): cint <cimport,nodecl> end
global function getchar_unlocked(): cint <cimport,nodecl> end
global function fgetc_unlocked(stream: *FILE): cint <cimport,nodecl> end
global function fputc(c: cint, stream: *FILE): cint <cimport,nodecl> end
global function putc(c: cint, stream: *FILE): cint <cimport,nodecl> end
global function putchar(c: cint): cint <cimport,nodecl> end
global function fputc_unlocked(c: cint, stream: *FILE): cint <cimport,nodecl> end
global function putc_unlocked(c: cint, stream: *FILE): cint <cimport,nodecl> end
global function putchar_unlocked(c: cint): cint <cimport,nodecl> end
global function getw(stream: *FILE): cint <cimport,nodecl> end
global function putw(w: cint, stream: *FILE): cint <cimport,nodecl> end
global function fgets(s: cstring, n: cint, stream: *FILE): cstring <cimport,nodecl> end
global function getdelim(lineptr: *cstring, n: *csize, delimiter: cint, stream: *FILE): clong <cimport,nodecl> end
global function getline(lineptr: *cstring, n: *csize, stream: *FILE): clong <cimport,nodecl> end
global function fputs(s: cstring, stream: *FILE): cint <cimport,nodecl> end
global function puts(s: cstring): cint <cimport,nodecl> end
global function ungetc(c: cint, stream: *FILE): cint <cimport,nodecl> end
global function fread(ptr: pointer, size: csize, n: csize, stream: *FILE): csize <cimport,nodecl> end
global function fwrite(ptr: pointer, size: csize, n: csize, s: *FILE): csize <cimport,nodecl> end
global function fread_unlocked(ptr: pointer, size: csize, n: csize, stream: *FILE): csize <cimport,nodecl> end
global function fwrite_unlocked(ptr: pointer, size: csize, n: csize, stream: *FILE): csize <cimport,nodecl> end
global function fseek(stream: *FILE, off: clong, whence: cint): cint <cimport,nodecl> end
global function ftell(stream: *FILE): clong <cimport,nodecl> end
global function rewind(stream: *FILE): void <cimport,nodecl> end
global function fseeko(stream: *FILE, off: clong, whence: cint): cint <cimport,nodecl> end
global function ftello(stream: *FILE): clong <cimport,nodecl> end
global function fgetpos(stream: *FILE, pos: *fpos_t): cint <cimport,nodecl> end
global function fsetpos(stream: *FILE, pos: *fpos_t): cint <cimport,nodecl> end
global function clearerr(stream: *FILE): void <cimport,nodecl> end
global function feof(stream: *FILE): cint <cimport,nodecl> end
global function ferror(stream: *FILE): cint <cimport,nodecl> end
global function clearerr_unlocked(stream: *FILE): void <cimport,nodecl> end
global function feof_unlocked(stream: *FILE): cint <cimport,nodecl> end
global function ferror_unlocked(stream: *FILE): cint <cimport,nodecl> end
global function perror(s: cstring): void <cimport,nodecl> end
global function fileno(stream: *FILE): cint <cimport,nodecl> end
global function fileno_unlocked(stream: *FILE): cint <cimport,nodecl> end
global function pclose(stream: *FILE): cint <cimport,nodecl> end
global function popen(command: cstring, modes: cstring): *FILE <cimport,nodecl> end
global function ctermid(s: cstring): cstring <cimport,nodecl> end
global function flockfile(stream: *FILE): void <cimport,nodecl> end
global function ftrylockfile(stream: *FILE): cint <cimport,nodecl> end
global function funlockfile(stream: *FILE): void <cimport,nodecl> end
global function pango_split_file_list(str: cstring): *cstring <cimport,nodecl> end
global function pango_trim_string(str: cstring): cstring <cimport,nodecl> end
global function pango_read_line(stream: *FILE, str: *GString): gint <cimport,nodecl> end
global function pango_skip_space(pos: *cstring): gboolean <cimport,nodecl> end
global function pango_scan_word(pos: *cstring, out: *GString): gboolean <cimport,nodecl> end
global function pango_scan_string(pos: *cstring, out: *GString): gboolean <cimport,nodecl> end
global function pango_scan_int(pos: *cstring, out: *cint): gboolean <cimport,nodecl> end
global function pango_parse_enum(type: GType, str: cstring, value: *cint, warn: gboolean, possible_values: *cstring): gboolean <cimport,nodecl> end
global function pango_parse_style(str: cstring, style: *PangoStyle, warn: gboolean): gboolean <cimport,nodecl> end
global function pango_parse_variant(str: cstring, variant: *PangoVariant, warn: gboolean): gboolean <cimport,nodecl> end
global function pango_parse_weight(str: cstring, weight: *PangoWeight, warn: gboolean): gboolean <cimport,nodecl> end
global function pango_parse_stretch(str: cstring, stretch: *PangoStretch, warn: gboolean): gboolean <cimport,nodecl> end
global function pango_quantize_line_geometry(thickness: *cint, position: *cint): void <cimport,nodecl> end
global function pango_log2vis_get_embedding_levels(text: *gchar, length: cint, pbase_dir: *PangoDirection): *guint8 <cimport,nodecl> end
global function pango_is_zero_width(ch: gunichar): gboolean <cimport,nodecl> end
global function pango_find_paragraph_boundary(text: cstring, length: cint, paragraph_delimiter_index: *cint, next_paragraph_start: *cint): void <cimport,nodecl> end
global function pango_version(): cint <cimport,nodecl> end
global function pango_version_string(): cstring <cimport,nodecl> end
global function pango_version_check(required_major: cint, required_minor: cint, required_micro: cint): cstring <cimport,nodecl> end
global function gdk_app_launch_context_get_type(): GType <cimport,nodecl> end
global function gdk_app_launch_context_get_display(context: *GdkAppLaunchContext): *GdkDisplay <cimport,nodecl> end
global function gdk_app_launch_context_set_desktop(context: *GdkAppLaunchContext, desktop: cint): void <cimport,nodecl> end
global function gdk_app_launch_context_set_timestamp(context: *GdkAppLaunchContext, timestamp: guint32): void <cimport,nodecl> end
global function gdk_app_launch_context_set_icon(context: *GdkAppLaunchContext, icon: *GIcon): void <cimport,nodecl> end
global function gdk_app_launch_context_set_icon_name(context: *GdkAppLaunchContext, icon_name: cstring): void <cimport,nodecl> end
global function gdk_rgba_get_type(): GType <cimport,nodecl> end
global function gdk_rgba_copy(rgba: *GdkRGBA): *GdkRGBA <cimport,nodecl> end
global function gdk_rgba_free(rgba: *GdkRGBA): void <cimport,nodecl> end
global function gdk_rgba_is_clear(rgba: *GdkRGBA): gboolean <cimport,nodecl> end
global function gdk_rgba_is_opaque(rgba: *GdkRGBA): gboolean <cimport,nodecl> end
global function gdk_rgba_hash(p: gconstpointer): guint <cimport,nodecl> end
global function gdk_rgba_equal(p1: gconstpointer, p2: gconstpointer): gboolean <cimport,nodecl> end
global function gdk_rgba_parse(rgba: *GdkRGBA, spec: cstring): gboolean <cimport,nodecl> end
global function gdk_rgba_to_string(rgba: *GdkRGBA): cstring <cimport,nodecl> end
global gdk_pixbuf_major_version: guint <cimport,nodecl>
global gdk_pixbuf_minor_version: guint <cimport,nodecl>
global gdk_pixbuf_micro_version: guint <cimport,nodecl>
global gdk_pixbuf_version: cstring <cimport,nodecl>
global function gdk_pixbuf_error_quark(): GQuark <cimport,nodecl> end
global function gdk_pixbuf_get_type(): GType <cimport,nodecl> end
global function gdk_pixbuf_ref(pixbuf: *GdkPixbuf): *GdkPixbuf <cimport,nodecl> end
global function gdk_pixbuf_unref(pixbuf: *GdkPixbuf): void <cimport,nodecl> end
global function gdk_pixbuf_get_colorspace(pixbuf: *GdkPixbuf): GdkColorspace <cimport,nodecl> end
global function gdk_pixbuf_get_n_channels(pixbuf: *GdkPixbuf): cint <cimport,nodecl> end
global function gdk_pixbuf_get_has_alpha(pixbuf: *GdkPixbuf): gboolean <cimport,nodecl> end
global function gdk_pixbuf_get_bits_per_sample(pixbuf: *GdkPixbuf): cint <cimport,nodecl> end
global function gdk_pixbuf_get_pixels(pixbuf: *GdkPixbuf): *guchar <cimport,nodecl> end
global function gdk_pixbuf_get_width(pixbuf: *GdkPixbuf): cint <cimport,nodecl> end
global function gdk_pixbuf_get_height(pixbuf: *GdkPixbuf): cint <cimport,nodecl> end
global function gdk_pixbuf_get_rowstride(pixbuf: *GdkPixbuf): cint <cimport,nodecl> end
global function gdk_pixbuf_get_byte_length(pixbuf: *GdkPixbuf): gsize <cimport,nodecl> end
global function gdk_pixbuf_get_pixels_with_length(pixbuf: *GdkPixbuf, length: *guint): *guchar <cimport,nodecl> end
global function gdk_pixbuf_read_pixels(pixbuf: *GdkPixbuf): *guint8 <cimport,nodecl> end
global function gdk_pixbuf_read_pixel_bytes(pixbuf: *GdkPixbuf): *GBytes <cimport,nodecl> end
global function gdk_pixbuf_new(colorspace: GdkColorspace, has_alpha: gboolean, bits_per_sample: cint, width: cint, height: cint): *GdkPixbuf <cimport,nodecl> end
global function gdk_pixbuf_calculate_rowstride(colorspace: GdkColorspace, has_alpha: gboolean, bits_per_sample: cint, width: cint, height: cint): gint <cimport,nodecl> end
global function gdk_pixbuf_copy(pixbuf: *GdkPixbuf): *GdkPixbuf <cimport,nodecl> end
global function gdk_pixbuf_new_subpixbuf(src_pixbuf: *GdkPixbuf, src_x: cint, src_y: cint, width: cint, height: cint): *GdkPixbuf <cimport,nodecl> end
global function gdk_pixbuf_new_from_file(filename: cstring, error: **GError): *GdkPixbuf <cimport,nodecl> end
global function gdk_pixbuf_new_from_file_at_size(filename: cstring, width: cint, height: cint, error: **GError): *GdkPixbuf <cimport,nodecl> end
global function gdk_pixbuf_new_from_file_at_scale(filename: cstring, width: cint, height: cint, preserve_aspect_ratio: gboolean, error: **GError): *GdkPixbuf <cimport,nodecl> end
global function gdk_pixbuf_new_from_resource(resource_path: cstring, error: **GError): *GdkPixbuf <cimport,nodecl> end
global function gdk_pixbuf_new_from_resource_at_scale(resource_path: cstring, width: cint, height: cint, preserve_aspect_ratio: gboolean, error: **GError): *GdkPixbuf <cimport,nodecl> end
global function gdk_pixbuf_new_from_data(data: *guchar, colorspace: GdkColorspace, has_alpha: gboolean, bits_per_sample: cint, width: cint, height: cint, rowstride: cint, destroy_fn: GdkPixbufDestroyNotify, destroy_fn_data: gpointer): *GdkPixbuf <cimport,nodecl> end
global function gdk_pixbuf_new_from_bytes(data: *GBytes, colorspace: GdkColorspace, has_alpha: gboolean, bits_per_sample: cint, width: cint, height: cint, rowstride: cint): *GdkPixbuf <cimport,nodecl> end
global function gdk_pixbuf_new_from_xpm_data(data: *cstring): *GdkPixbuf <cimport,nodecl> end
global function gdk_pixbuf_new_from_inline(data_length: gint, data: *guint8, copy_pixels: gboolean, error: **GError): *GdkPixbuf <cimport,nodecl> end
global function gdk_pixbuf_fill(pixbuf: *GdkPixbuf, pixel: guint32): void <cimport,nodecl> end
global function gdk_pixbuf_save(pixbuf: *GdkPixbuf, filename: cstring, type: cstring, error: **GError, ...: cvarargs): gboolean <cimport,nodecl> end
global function gdk_pixbuf_savev(pixbuf: *GdkPixbuf, filename: cstring, type: cstring, option_keys: *cstring, option_values: *cstring, error: **GError): gboolean <cimport,nodecl> end
global function gdk_pixbuf_save_to_callback(pixbuf: *GdkPixbuf, save_func: GdkPixbufSaveFunc, user_data: gpointer, type: cstring, error: **GError, ...: cvarargs): gboolean <cimport,nodecl> end
global function gdk_pixbuf_save_to_callbackv(pixbuf: *GdkPixbuf, save_func: GdkPixbufSaveFunc, user_data: gpointer, type: cstring, option_keys: *cstring, option_values: *cstring, error: **GError): gboolean <cimport,nodecl> end
global function gdk_pixbuf_save_to_buffer(pixbuf: *GdkPixbuf, buffer: **gchar, buffer_size: *gsize, type: cstring, error: **GError, ...: cvarargs): gboolean <cimport,nodecl> end
global function gdk_pixbuf_save_to_bufferv(pixbuf: *GdkPixbuf, buffer: **gchar, buffer_size: *gsize, type: cstring, option_keys: *cstring, option_values: *cstring, error: **GError): gboolean <cimport,nodecl> end
global function gdk_pixbuf_new_from_stream(stream: *GInputStream, cancellable: *GCancellable, error: **GError): *GdkPixbuf <cimport,nodecl> end
global function gdk_pixbuf_new_from_stream_async(stream: *GInputStream, cancellable: *GCancellable, callback: GAsyncReadyCallback, user_data: gpointer): void <cimport,nodecl> end
global function gdk_pixbuf_new_from_stream_finish(async_result: *GAsyncResult, error: **GError): *GdkPixbuf <cimport,nodecl> end
global function gdk_pixbuf_new_from_stream_at_scale(stream: *GInputStream, width: gint, height: gint, preserve_aspect_ratio: gboolean, cancellable: *GCancellable, error: **GError): *GdkPixbuf <cimport,nodecl> end
global function gdk_pixbuf_new_from_stream_at_scale_async(stream: *GInputStream, width: gint, height: gint, preserve_aspect_ratio: gboolean, cancellable: *GCancellable, callback: GAsyncReadyCallback, user_data: gpointer): void <cimport,nodecl> end
global function gdk_pixbuf_save_to_stream(pixbuf: *GdkPixbuf, stream: *GOutputStream, type: cstring, cancellable: *GCancellable, error: **GError, ...: cvarargs): gboolean <cimport,nodecl> end
global function gdk_pixbuf_save_to_stream_async(pixbuf: *GdkPixbuf, stream: *GOutputStream, type: *gchar, cancellable: *GCancellable, callback: GAsyncReadyCallback, user_data: gpointer, ...: cvarargs): void <cimport,nodecl> end
global function gdk_pixbuf_save_to_stream_finish(async_result: *GAsyncResult, error: **GError): gboolean <cimport,nodecl> end
global function gdk_pixbuf_save_to_streamv_async(pixbuf: *GdkPixbuf, stream: *GOutputStream, type: *gchar, option_keys: **gchar, option_values: **gchar, cancellable: *GCancellable, callback: GAsyncReadyCallback, user_data: gpointer): void <cimport,nodecl> end
global function gdk_pixbuf_save_to_streamv(pixbuf: *GdkPixbuf, stream: *GOutputStream, type: cstring, option_keys: *cstring, option_values: *cstring, cancellable: *GCancellable, error: **GError): gboolean <cimport,nodecl> end
global function gdk_pixbuf_add_alpha(pixbuf: *GdkPixbuf, substitute_color: gboolean, r: guchar, g: guchar, b: guchar): *GdkPixbuf <cimport,nodecl> end
global function gdk_pixbuf_copy_area(src_pixbuf: *GdkPixbuf, src_x: cint, src_y: cint, width: cint, height: cint, dest_pixbuf: *GdkPixbuf, dest_x: cint, dest_y: cint): void <cimport,nodecl> end
global function gdk_pixbuf_saturate_and_pixelate(src: *GdkPixbuf, dest: *GdkPixbuf, saturation: gfloat, pixelate: gboolean): void <cimport,nodecl> end
global function gdk_pixbuf_apply_embedded_orientation(src: *GdkPixbuf): *GdkPixbuf <cimport,nodecl> end
global function gdk_pixbuf_set_option(pixbuf: *GdkPixbuf, key: *gchar, value: *gchar): gboolean <cimport,nodecl> end
global function gdk_pixbuf_get_option(pixbuf: *GdkPixbuf, key: *gchar): *gchar <cimport,nodecl> end
global function gdk_pixbuf_remove_option(pixbuf: *GdkPixbuf, key: *gchar): gboolean <cimport,nodecl> end
global function gdk_pixbuf_get_options(pixbuf: *GdkPixbuf): *GHashTable <cimport,nodecl> end
global function gdk_pixbuf_copy_options(src_pixbuf: *GdkPixbuf, dest_pixbuf: *GdkPixbuf): gboolean <cimport,nodecl> end
global function gdk_pixbuf_scale(src: *GdkPixbuf, dest: *GdkPixbuf, dest_x: cint, dest_y: cint, dest_width: cint, dest_height: cint, offset_x: float64, offset_y: float64, scale_x: float64, scale_y: float64, interp_type: GdkInterpType): void <cimport,nodecl> end
global function gdk_pixbuf_composite(src: *GdkPixbuf, dest: *GdkPixbuf, dest_x: cint, dest_y: cint, dest_width: cint, dest_height: cint, offset_x: float64, offset_y: float64, scale_x: float64, scale_y: float64, interp_type: GdkInterpType, overall_alpha: cint): void <cimport,nodecl> end
global function gdk_pixbuf_composite_color(src: *GdkPixbuf, dest: *GdkPixbuf, dest_x: cint, dest_y: cint, dest_width: cint, dest_height: cint, offset_x: float64, offset_y: float64, scale_x: float64, scale_y: float64, interp_type: GdkInterpType, overall_alpha: cint, check_x: cint, check_y: cint, check_size: cint, color1: guint32, color2: guint32): void <cimport,nodecl> end
global function gdk_pixbuf_scale_simple(src: *GdkPixbuf, dest_width: cint, dest_height: cint, interp_type: GdkInterpType): *GdkPixbuf <cimport,nodecl> end
global function gdk_pixbuf_composite_color_simple(src: *GdkPixbuf, dest_width: cint, dest_height: cint, interp_type: GdkInterpType, overall_alpha: cint, check_size: cint, color1: guint32, color2: guint32): *GdkPixbuf <cimport,nodecl> end
global function gdk_pixbuf_rotate_simple(src: *GdkPixbuf, angle: GdkPixbufRotation): *GdkPixbuf <cimport,nodecl> end
global function gdk_pixbuf_flip(src: *GdkPixbuf, horizontal: gboolean): *GdkPixbuf <cimport,nodecl> end
global function gdk_pixbuf_animation_get_type(): GType <cimport,nodecl> end
global function gdk_pixbuf_animation_new_from_file(filename: cstring, error: **GError): *GdkPixbufAnimation <cimport,nodecl> end
global function gdk_pixbuf_animation_new_from_stream(stream: *GInputStream, cancellable: *GCancellable, error: **GError): *GdkPixbufAnimation <cimport,nodecl> end
global function gdk_pixbuf_animation_new_from_stream_async(stream: *GInputStream, cancellable: *GCancellable, callback: GAsyncReadyCallback, user_data: gpointer): void <cimport,nodecl> end
global function gdk_pixbuf_animation_new_from_stream_finish(async_result: *GAsyncResult, error: **GError): *GdkPixbufAnimation <cimport,nodecl> end
global function gdk_pixbuf_animation_new_from_resource(resource_path: cstring, error: **GError): *GdkPixbufAnimation <cimport,nodecl> end
global function gdk_pixbuf_animation_ref(animation: *GdkPixbufAnimation): *GdkPixbufAnimation <cimport,nodecl> end
global function gdk_pixbuf_animation_unref(animation: *GdkPixbufAnimation): void <cimport,nodecl> end
global function gdk_pixbuf_animation_get_width(animation: *GdkPixbufAnimation): cint <cimport,nodecl> end
global function gdk_pixbuf_animation_get_height(animation: *GdkPixbufAnimation): cint <cimport,nodecl> end
global function gdk_pixbuf_animation_is_static_image(animation: *GdkPixbufAnimation): gboolean <cimport,nodecl> end
global function gdk_pixbuf_animation_get_static_image(animation: *GdkPixbufAnimation): *GdkPixbuf <cimport,nodecl> end
global function gdk_pixbuf_animation_get_iter(animation: *GdkPixbufAnimation, start_time: *GTimeVal): *GdkPixbufAnimationIter <cimport,nodecl> end
global function gdk_pixbuf_animation_iter_get_type(): GType <cimport,nodecl> end
global function gdk_pixbuf_animation_iter_get_delay_time(iter: *GdkPixbufAnimationIter): cint <cimport,nodecl> end
global function gdk_pixbuf_animation_iter_get_pixbuf(iter: *GdkPixbufAnimationIter): *GdkPixbuf <cimport,nodecl> end
global function gdk_pixbuf_animation_iter_on_currently_loading_frame(iter: *GdkPixbufAnimationIter): gboolean <cimport,nodecl> end
global function gdk_pixbuf_animation_iter_advance(iter: *GdkPixbufAnimationIter, current_time: *GTimeVal): gboolean <cimport,nodecl> end
global function gdk_pixbuf_simple_anim_get_type(): GType <cimport,nodecl> end
global function gdk_pixbuf_simple_anim_iter_get_type(): GType <cimport,nodecl> end
global function gdk_pixbuf_simple_anim_new(width: gint, height: gint, rate: gfloat): *GdkPixbufSimpleAnim <cimport,nodecl> end
global function gdk_pixbuf_simple_anim_add_frame(animation: *GdkPixbufSimpleAnim, pixbuf: *GdkPixbuf): void <cimport,nodecl> end
global function gdk_pixbuf_simple_anim_set_loop(animation: *GdkPixbufSimpleAnim, loop: gboolean): void <cimport,nodecl> end
global function gdk_pixbuf_simple_anim_get_loop(animation: *GdkPixbufSimpleAnim): gboolean <cimport,nodecl> end
global function gdk_pixbuf_init_modules(path: cstring, error: **GError): gboolean <cimport,nodecl> end
global function gdk_pixbuf_format_get_type(): GType <cimport,nodecl> end
global function gdk_pixbuf_get_formats(): *GSList <cimport,nodecl> end
global function gdk_pixbuf_format_get_name(format: *GdkPixbufFormat): *gchar <cimport,nodecl> end
global function gdk_pixbuf_format_get_description(format: *GdkPixbufFormat): *gchar <cimport,nodecl> end
global function gdk_pixbuf_format_get_mime_types(format: *GdkPixbufFormat): **gchar <cimport,nodecl> end
global function gdk_pixbuf_format_get_extensions(format: *GdkPixbufFormat): **gchar <cimport,nodecl> end
global function gdk_pixbuf_format_is_save_option_supported(format: *GdkPixbufFormat, option_key: *gchar): gboolean <cimport,nodecl> end
global function gdk_pixbuf_format_is_writable(format: *GdkPixbufFormat): gboolean <cimport,nodecl> end
global function gdk_pixbuf_format_is_scalable(format: *GdkPixbufFormat): gboolean <cimport,nodecl> end
global function gdk_pixbuf_format_is_disabled(format: *GdkPixbufFormat): gboolean <cimport,nodecl> end
global function gdk_pixbuf_format_set_disabled(format: *GdkPixbufFormat, disabled: gboolean): void <cimport,nodecl> end
global function gdk_pixbuf_format_get_license(format: *GdkPixbufFormat): *gchar <cimport,nodecl> end
global function gdk_pixbuf_get_file_info(filename: *gchar, width: *gint, height: *gint): *GdkPixbufFormat <cimport,nodecl> end
global function gdk_pixbuf_get_file_info_async(filename: *gchar, cancellable: *GCancellable, callback: GAsyncReadyCallback, user_data: gpointer): void <cimport,nodecl> end
global function gdk_pixbuf_get_file_info_finish(async_result: *GAsyncResult, width: *gint, height: *gint, error: **GError): *GdkPixbufFormat <cimport,nodecl> end
global function gdk_pixbuf_format_copy(format: *GdkPixbufFormat): *GdkPixbufFormat <cimport,nodecl> end
global function gdk_pixbuf_format_free(format: *GdkPixbufFormat): void <cimport,nodecl> end
global function gdk_pixbuf_loader_get_type(): GType <cimport,nodecl> end
global function gdk_pixbuf_loader_new(): *GdkPixbufLoader <cimport,nodecl> end
global function gdk_pixbuf_loader_new_with_type(image_type: cstring, error: **GError): *GdkPixbufLoader <cimport,nodecl> end
global function gdk_pixbuf_loader_new_with_mime_type(mime_type: cstring, error: **GError): *GdkPixbufLoader <cimport,nodecl> end
global function gdk_pixbuf_loader_set_size(loader: *GdkPixbufLoader, width: cint, height: cint): void <cimport,nodecl> end
global function gdk_pixbuf_loader_write(loader: *GdkPixbufLoader, buf: *guchar, count: gsize, error: **GError): gboolean <cimport,nodecl> end
global function gdk_pixbuf_loader_write_bytes(loader: *GdkPixbufLoader, buffer: *GBytes, error: **GError): gboolean <cimport,nodecl> end
global function gdk_pixbuf_loader_get_pixbuf(loader: *GdkPixbufLoader): *GdkPixbuf <cimport,nodecl> end
global function gdk_pixbuf_loader_get_animation(loader: *GdkPixbufLoader): *GdkPixbufAnimation <cimport,nodecl> end
global function gdk_pixbuf_loader_close(loader: *GdkPixbufLoader, error: **GError): gboolean <cimport,nodecl> end
global function gdk_pixbuf_loader_get_format(loader: *GdkPixbufLoader): *GdkPixbufFormat <cimport,nodecl> end
global function gdk_pixbuf_alpha_mode_get_type(): GType <cimport,nodecl> end
global function gdk_colorspace_get_type(): GType <cimport,nodecl> end
global function gdk_pixbuf_error_get_type(): GType <cimport,nodecl> end
global function gdk_interp_type_get_type(): GType <cimport,nodecl> end
global function gdk_pixbuf_rotation_get_type(): GType <cimport,nodecl> end
global function glib_autoptr_clear_GdkPixbuf(_ptr: *GdkPixbuf): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GdkPixbuf(_ptr: **GdkPixbuf): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GdkPixbuf(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GdkPixbuf(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GdkPixbuf(_q: **GQueue): void <cimport,nodecl> end
global function glib_autoptr_clear_GdkPixbufAnimation(_ptr: *GdkPixbufAnimation): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GdkPixbufAnimation(_ptr: **GdkPixbufAnimation): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GdkPixbufAnimation(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GdkPixbufAnimation(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GdkPixbufAnimation(_q: **GQueue): void <cimport,nodecl> end
global function glib_autoptr_clear_GdkPixbufAnimationIter(_ptr: *GdkPixbufAnimationIter): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GdkPixbufAnimationIter(_ptr: **GdkPixbufAnimationIter): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GdkPixbufAnimationIter(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GdkPixbufAnimationIter(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GdkPixbufAnimationIter(_q: **GQueue): void <cimport,nodecl> end
global function glib_autoptr_clear_GdkPixbufLoader(_ptr: *GdkPixbufLoader): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GdkPixbufLoader(_ptr: **GdkPixbufLoader): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GdkPixbufLoader(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GdkPixbufLoader(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GdkPixbufLoader(_q: **GQueue): void <cimport,nodecl> end
global function glib_autoptr_clear_GdkPixbufSimpleAnim(_ptr: *GdkPixbufSimpleAnim): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GdkPixbufSimpleAnim(_ptr: **GdkPixbufSimpleAnim): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GdkPixbufSimpleAnim(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GdkPixbufSimpleAnim(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GdkPixbufSimpleAnim(_q: **GQueue): void <cimport,nodecl> end
global function glib_autoptr_clear_GdkTexture(_ptr: *GdkTexture): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GdkTexture(_ptr: **GdkTexture): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GdkTexture(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GdkTexture(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GdkTexture(_q: **GQueue): void <cimport,nodecl> end
global function gdk_texture_error_quark(): GQuark <cimport,nodecl> end
global function gdk_texture_get_type(): GType <cimport,nodecl> end
global function gdk_texture_new_for_pixbuf(pixbuf: *GdkPixbuf): *GdkTexture <cimport,nodecl> end
global function gdk_texture_new_from_resource(resource_path: cstring): *GdkTexture <cimport,nodecl> end
global function gdk_texture_new_from_file(file: *GFile, error: **GError): *GdkTexture <cimport,nodecl> end
global function gdk_texture_new_from_filename(path: cstring, error: **GError): *GdkTexture <cimport,nodecl> end
global function gdk_texture_new_from_bytes(bytes: *GBytes, error: **GError): *GdkTexture <cimport,nodecl> end
global function gdk_texture_get_width(texture: *GdkTexture): cint <cimport,nodecl> end
global function gdk_texture_get_height(texture: *GdkTexture): cint <cimport,nodecl> end
global function gdk_texture_download(texture: *GdkTexture, data: *guchar, stride: gsize): void <cimport,nodecl> end
global function gdk_texture_save_to_png(texture: *GdkTexture, filename: cstring): gboolean <cimport,nodecl> end
global function gdk_texture_save_to_png_bytes(texture: *GdkTexture): *GBytes <cimport,nodecl> end
global function gdk_texture_save_to_tiff(texture: *GdkTexture, filename: cstring): gboolean <cimport,nodecl> end
global function gdk_texture_save_to_tiff_bytes(texture: *GdkTexture): *GBytes <cimport,nodecl> end
global function gdk_pixbuf_get_from_surface(surface: *cairo_surface_t, src_x: cint, src_y: cint, width: cint, height: cint): *GdkPixbuf <cimport,nodecl> end
global function gdk_pixbuf_get_from_texture(texture: *GdkTexture): *GdkPixbuf <cimport,nodecl> end
global function pango_cairo_font_map_get_type(): GType <cimport,nodecl> end
global function pango_cairo_font_map_new(): *PangoFontMap <cimport,nodecl> end
global function pango_cairo_font_map_new_for_font_type(fonttype: cairo_font_type_t): *PangoFontMap <cimport,nodecl> end
global function pango_cairo_font_map_get_default(): *PangoFontMap <cimport,nodecl> end
global function pango_cairo_font_map_set_default(fontmap: *PangoCairoFontMap): void <cimport,nodecl> end
global function pango_cairo_font_map_get_font_type(fontmap: *PangoCairoFontMap): cairo_font_type_t <cimport,nodecl> end
global function pango_cairo_font_map_set_resolution(fontmap: *PangoCairoFontMap, dpi: float64): void <cimport,nodecl> end
global function pango_cairo_font_map_get_resolution(fontmap: *PangoCairoFontMap): float64 <cimport,nodecl> end
global function pango_cairo_font_map_create_context(fontmap: *PangoCairoFontMap): *PangoContext <cimport,nodecl> end
global function pango_cairo_font_get_type(): GType <cimport,nodecl> end
global function pango_cairo_font_get_scaled_font(font: *PangoCairoFont): *cairo_scaled_font_t <cimport,nodecl> end
global function pango_cairo_update_context(cr: *cairo_t, context: *PangoContext): void <cimport,nodecl> end
global function pango_cairo_context_set_font_options(context: *PangoContext, options: *cairo_font_options_t): void <cimport,nodecl> end
global function pango_cairo_context_get_font_options(context: *PangoContext): *cairo_font_options_t <cimport,nodecl> end
global function pango_cairo_context_set_resolution(context: *PangoContext, dpi: float64): void <cimport,nodecl> end
global function pango_cairo_context_get_resolution(context: *PangoContext): float64 <cimport,nodecl> end
global function pango_cairo_context_set_shape_renderer(context: *PangoContext, func: PangoCairoShapeRendererFunc, data: gpointer, dnotify: GDestroyNotify): void <cimport,nodecl> end
global function pango_cairo_context_get_shape_renderer(context: *PangoContext, data: *gpointer): PangoCairoShapeRendererFunc <cimport,nodecl> end
global function pango_cairo_create_context(cr: *cairo_t): *PangoContext <cimport,nodecl> end
global function pango_cairo_create_layout(cr: *cairo_t): *PangoLayout <cimport,nodecl> end
global function pango_cairo_update_layout(cr: *cairo_t, layout: *PangoLayout): void <cimport,nodecl> end
global function pango_cairo_show_glyph_string(cr: *cairo_t, font: *PangoFont, glyphs: *PangoGlyphString): void <cimport,nodecl> end
global function pango_cairo_show_glyph_item(cr: *cairo_t, text: cstring, glyph_item: *PangoGlyphItem): void <cimport,nodecl> end
global function pango_cairo_show_layout_line(cr: *cairo_t, line: *PangoLayoutLine): void <cimport,nodecl> end
global function pango_cairo_show_layout(cr: *cairo_t, layout: *PangoLayout): void <cimport,nodecl> end
global function pango_cairo_show_error_underline(cr: *cairo_t, x: float64, y: float64, width: float64, height: float64): void <cimport,nodecl> end
global function pango_cairo_glyph_string_path(cr: *cairo_t, font: *PangoFont, glyphs: *PangoGlyphString): void <cimport,nodecl> end
global function pango_cairo_layout_line_path(cr: *cairo_t, line: *PangoLayoutLine): void <cimport,nodecl> end
global function pango_cairo_layout_path(cr: *cairo_t, layout: *PangoLayout): void <cimport,nodecl> end
global function pango_cairo_error_underline_path(cr: *cairo_t, x: float64, y: float64, width: float64, height: float64): void <cimport,nodecl> end
global function gdk_cairo_set_source_rgba(cr: *cairo_t, rgba: *GdkRGBA): void <cimport,nodecl> end
global function gdk_cairo_set_source_pixbuf(cr: *cairo_t, pixbuf: *GdkPixbuf, pixbuf_x: float64, pixbuf_y: float64): void <cimport,nodecl> end
global function gdk_cairo_rectangle(cr: *cairo_t, rectangle: *GdkRectangle): void <cimport,nodecl> end
global function gdk_cairo_region(cr: *cairo_t, region: *cairo_region_t): void <cimport,nodecl> end
global function gdk_cairo_region_create_from_surface(surface: *cairo_surface_t): *cairo_region_t <cimport,nodecl> end
global function gdk_cairo_draw_from_gl(cr: *cairo_t, surface: *GdkSurface, source: cint, source_type: cint, buffer_scale: cint, x: cint, y: cint, width: cint, height: cint): void <cimport,nodecl> end
global function gdk_cairo_context_get_type(): GType <cimport,nodecl> end
global function gdk_cairo_context_cairo_create(self: *GdkCairoContext): *cairo_t <cimport,nodecl> end
global function gdk_clipboard_get_type(): GType <cimport,nodecl> end
global function gdk_clipboard_get_display(clipboard: *GdkClipboard): *GdkDisplay <cimport,nodecl> end
global function gdk_clipboard_get_formats(clipboard: *GdkClipboard): *GdkContentFormats <cimport,nodecl> end
global function gdk_clipboard_is_local(clipboard: *GdkClipboard): gboolean <cimport,nodecl> end
global function gdk_clipboard_get_content(clipboard: *GdkClipboard): *GdkContentProvider <cimport,nodecl> end
global function gdk_clipboard_store_async(clipboard: *GdkClipboard, io_priority: cint, cancellable: *GCancellable, callback: GAsyncReadyCallback, user_data: gpointer): void <cimport,nodecl> end
global function gdk_clipboard_store_finish(clipboard: *GdkClipboard, result: *GAsyncResult, error: **GError): gboolean <cimport,nodecl> end
global function gdk_clipboard_read_async(clipboard: *GdkClipboard, mime_types: *cstring, io_priority: cint, cancellable: *GCancellable, callback: GAsyncReadyCallback, user_data: gpointer): void <cimport,nodecl> end
global function gdk_clipboard_read_finish(clipboard: *GdkClipboard, result: *GAsyncResult, out_mime_type: *cstring, error: **GError): *GInputStream <cimport,nodecl> end
global function gdk_clipboard_read_value_async(clipboard: *GdkClipboard, type: GType, io_priority: cint, cancellable: *GCancellable, callback: GAsyncReadyCallback, user_data: gpointer): void <cimport,nodecl> end
global function gdk_clipboard_read_value_finish(clipboard: *GdkClipboard, result: *GAsyncResult, error: **GError): *GValue <cimport,nodecl> end
global function gdk_clipboard_read_texture_async(clipboard: *GdkClipboard, cancellable: *GCancellable, callback: GAsyncReadyCallback, user_data: gpointer): void <cimport,nodecl> end
global function gdk_clipboard_read_texture_finish(clipboard: *GdkClipboard, result: *GAsyncResult, error: **GError): *GdkTexture <cimport,nodecl> end
global function gdk_clipboard_read_text_async(clipboard: *GdkClipboard, cancellable: *GCancellable, callback: GAsyncReadyCallback, user_data: gpointer): void <cimport,nodecl> end
global function gdk_clipboard_read_text_finish(clipboard: *GdkClipboard, result: *GAsyncResult, error: **GError): cstring <cimport,nodecl> end
global function gdk_clipboard_set_content(clipboard: *GdkClipboard, provider: *GdkContentProvider): gboolean <cimport,nodecl> end
global function gdk_clipboard_set(clipboard: *GdkClipboard, type: GType, ...: cvarargs): void <cimport,nodecl> end
global function gdk_clipboard_set_valist(clipboard: *GdkClipboard, type: GType, args: cvalist): void <cimport,nodecl> end
global function gdk_clipboard_set_value(clipboard: *GdkClipboard, value: *GValue): void <cimport,nodecl> end
global function gdk_clipboard_set_text(clipboard: *GdkClipboard, text: cstring): void <cimport,nodecl> end
global function gdk_clipboard_set_texture(clipboard: *GdkClipboard, texture: *GdkTexture): void <cimport,nodecl> end
global function gdk_content_deserializer_get_type(): GType <cimport,nodecl> end
global function gdk_content_deserializer_get_mime_type(deserializer: *GdkContentDeserializer): cstring <cimport,nodecl> end
global function gdk_content_deserializer_get_gtype(deserializer: *GdkContentDeserializer): GType <cimport,nodecl> end
global function gdk_content_deserializer_get_value(deserializer: *GdkContentDeserializer): *GValue <cimport,nodecl> end
global function gdk_content_deserializer_get_input_stream(deserializer: *GdkContentDeserializer): *GInputStream <cimport,nodecl> end
global function gdk_content_deserializer_get_priority(deserializer: *GdkContentDeserializer): cint <cimport,nodecl> end
global function gdk_content_deserializer_get_cancellable(deserializer: *GdkContentDeserializer): *GCancellable <cimport,nodecl> end
global function gdk_content_deserializer_get_user_data(deserializer: *GdkContentDeserializer): gpointer <cimport,nodecl> end
global function gdk_content_deserializer_set_task_data(deserializer: *GdkContentDeserializer, data: gpointer, notify: GDestroyNotify): void <cimport,nodecl> end
global function gdk_content_deserializer_get_task_data(deserializer: *GdkContentDeserializer): gpointer <cimport,nodecl> end
global function gdk_content_deserializer_return_success(deserializer: *GdkContentDeserializer): void <cimport,nodecl> end
global function gdk_content_deserializer_return_error(deserializer: *GdkContentDeserializer, error: *GError): void <cimport,nodecl> end
global function gdk_content_formats_union_deserialize_gtypes(formats: *GdkContentFormats): *GdkContentFormats <cimport,nodecl> end
global function gdk_content_formats_union_deserialize_mime_types(formats: *GdkContentFormats): *GdkContentFormats <cimport,nodecl> end
global function gdk_content_register_deserializer(mime_type: cstring, type: GType, deserialize: GdkContentDeserializeFunc, data: gpointer, notify: GDestroyNotify): void <cimport,nodecl> end
global function gdk_content_deserialize_async(stream: *GInputStream, mime_type: cstring, type: GType, io_priority: cint, cancellable: *GCancellable, callback: GAsyncReadyCallback, user_data: gpointer): void <cimport,nodecl> end
global function gdk_content_deserialize_finish(result: *GAsyncResult, value: *GValue, error: **GError): gboolean <cimport,nodecl> end
global function gdk_intern_mime_type(string: cstring): cstring <cimport,nodecl> end
global function gdk_content_formats_get_type(): GType <cimport,nodecl> end
global function gdk_content_formats_new(mime_types: *cstring, n_mime_types: guint): *GdkContentFormats <cimport,nodecl> end
global function gdk_content_formats_new_for_gtype(type: GType): *GdkContentFormats <cimport,nodecl> end
global function gdk_content_formats_parse(string: cstring): *GdkContentFormats <cimport,nodecl> end
global function gdk_content_formats_ref(formats: *GdkContentFormats): *GdkContentFormats <cimport,nodecl> end
global function gdk_content_formats_unref(formats: *GdkContentFormats): void <cimport,nodecl> end
global function gdk_content_formats_print(formats: *GdkContentFormats, string: *GString): void <cimport,nodecl> end
global function gdk_content_formats_to_string(formats: *GdkContentFormats): cstring <cimport,nodecl> end
global function gdk_content_formats_get_gtypes(formats: *GdkContentFormats, n_gtypes: *gsize): *GType <cimport,nodecl> end
global function gdk_content_formats_get_mime_types(formats: *GdkContentFormats, n_mime_types: *gsize): *cstring <cimport,nodecl> end
global function gdk_content_formats_union(first: *GdkContentFormats, second: *GdkContentFormats): *GdkContentFormats <cimport,nodecl> end
global function gdk_content_formats_match(first: *GdkContentFormats, second: *GdkContentFormats): gboolean <cimport,nodecl> end
global function gdk_content_formats_match_gtype(first: *GdkContentFormats, second: *GdkContentFormats): GType <cimport,nodecl> end
global function gdk_content_formats_match_mime_type(first: *GdkContentFormats, second: *GdkContentFormats): cstring <cimport,nodecl> end
global function gdk_content_formats_contain_gtype(formats: *GdkContentFormats, type: GType): gboolean <cimport,nodecl> end
global function gdk_content_formats_contain_mime_type(formats: *GdkContentFormats, mime_type: cstring): gboolean <cimport,nodecl> end
global function gdk_content_formats_builder_get_type(): GType <cimport,nodecl> end
global function gdk_content_formats_builder_new(): *GdkContentFormatsBuilder <cimport,nodecl> end
global function gdk_content_formats_builder_ref(builder: *GdkContentFormatsBuilder): *GdkContentFormatsBuilder <cimport,nodecl> end
global function gdk_content_formats_builder_unref(builder: *GdkContentFormatsBuilder): void <cimport,nodecl> end
global function gdk_content_formats_builder_free_to_formats(builder: *GdkContentFormatsBuilder): *GdkContentFormats <cimport,nodecl> end
global function gdk_content_formats_builder_to_formats(builder: *GdkContentFormatsBuilder): *GdkContentFormats <cimport,nodecl> end
global function gdk_content_formats_builder_add_formats(builder: *GdkContentFormatsBuilder, formats: *GdkContentFormats): void <cimport,nodecl> end
global function gdk_content_formats_builder_add_mime_type(builder: *GdkContentFormatsBuilder, mime_type: cstring): void <cimport,nodecl> end
global function gdk_content_formats_builder_add_gtype(builder: *GdkContentFormatsBuilder, type: GType): void <cimport,nodecl> end
global function gdk_file_list_get_type(): GType <cimport,nodecl> end
global function gdk_file_list_get_files(file_list: *GdkFileList): *GSList <cimport,nodecl> end
global function gdk_content_provider_get_type(): GType <cimport,nodecl> end
global function gdk_content_provider_ref_formats(provider: *GdkContentProvider): *GdkContentFormats <cimport,nodecl> end
global function gdk_content_provider_ref_storable_formats(provider: *GdkContentProvider): *GdkContentFormats <cimport,nodecl> end
global function gdk_content_provider_content_changed(provider: *GdkContentProvider): void <cimport,nodecl> end
global function gdk_content_provider_write_mime_type_async(provider: *GdkContentProvider, mime_type: cstring, stream: *GOutputStream, io_priority: cint, cancellable: *GCancellable, callback: GAsyncReadyCallback, user_data: gpointer): void <cimport,nodecl> end
global function gdk_content_provider_write_mime_type_finish(provider: *GdkContentProvider, result: *GAsyncResult, error: **GError): gboolean <cimport,nodecl> end
global function gdk_content_provider_get_value(provider: *GdkContentProvider, value: *GValue, error: **GError): gboolean <cimport,nodecl> end
global function gdk_content_provider_new_for_value(value: *GValue): *GdkContentProvider <cimport,nodecl> end
global function gdk_content_provider_new_typed(type: GType, ...: cvarargs): *GdkContentProvider <cimport,nodecl> end
global function gdk_content_provider_new_union(providers: **GdkContentProvider, n_providers: gsize): *GdkContentProvider <cimport,nodecl> end
global function gdk_content_provider_new_for_bytes(mime_type: cstring, bytes: *GBytes): *GdkContentProvider <cimport,nodecl> end
global function gdk_content_serializer_get_type(): GType <cimport,nodecl> end
global function gdk_content_serializer_get_mime_type(serializer: *GdkContentSerializer): cstring <cimport,nodecl> end
global function gdk_content_serializer_get_gtype(serializer: *GdkContentSerializer): GType <cimport,nodecl> end
global function gdk_content_serializer_get_value(serializer: *GdkContentSerializer): *GValue <cimport,nodecl> end
global function gdk_content_serializer_get_output_stream(serializer: *GdkContentSerializer): *GOutputStream <cimport,nodecl> end
global function gdk_content_serializer_get_priority(serializer: *GdkContentSerializer): cint <cimport,nodecl> end
global function gdk_content_serializer_get_cancellable(serializer: *GdkContentSerializer): *GCancellable <cimport,nodecl> end
global function gdk_content_serializer_get_user_data(serializer: *GdkContentSerializer): gpointer <cimport,nodecl> end
global function gdk_content_serializer_set_task_data(serializer: *GdkContentSerializer, data: gpointer, notify: GDestroyNotify): void <cimport,nodecl> end
global function gdk_content_serializer_get_task_data(serializer: *GdkContentSerializer): gpointer <cimport,nodecl> end
global function gdk_content_serializer_return_success(serializer: *GdkContentSerializer): void <cimport,nodecl> end
global function gdk_content_serializer_return_error(serializer: *GdkContentSerializer, error: *GError): void <cimport,nodecl> end
global function gdk_content_formats_union_serialize_gtypes(formats: *GdkContentFormats): *GdkContentFormats <cimport,nodecl> end
global function gdk_content_formats_union_serialize_mime_types(formats: *GdkContentFormats): *GdkContentFormats <cimport,nodecl> end
global function gdk_content_register_serializer(type: GType, mime_type: cstring, serialize: GdkContentSerializeFunc, data: gpointer, notify: GDestroyNotify): void <cimport,nodecl> end
global function gdk_content_serialize_async(stream: *GOutputStream, mime_type: cstring, value: *GValue, io_priority: cint, cancellable: *GCancellable, callback: GAsyncReadyCallback, user_data: gpointer): void <cimport,nodecl> end
global function gdk_content_serialize_finish(result: *GAsyncResult, error: **GError): gboolean <cimport,nodecl> end
global function gdk_cursor_get_type(): GType <cimport,nodecl> end
global function gdk_cursor_new_from_texture(texture: *GdkTexture, hotspot_x: cint, hotspot_y: cint, fallback: *GdkCursor): *GdkCursor <cimport,nodecl> end
global function gdk_cursor_new_from_name(name: cstring, fallback: *GdkCursor): *GdkCursor <cimport,nodecl> end
global function gdk_cursor_get_fallback(cursor: *GdkCursor): *GdkCursor <cimport,nodecl> end
global function gdk_cursor_get_name(cursor: *GdkCursor): cstring <cimport,nodecl> end
global function gdk_cursor_get_texture(cursor: *GdkCursor): *GdkTexture <cimport,nodecl> end
global function gdk_cursor_get_hotspot_x(cursor: *GdkCursor): cint <cimport,nodecl> end
global function gdk_cursor_get_hotspot_y(cursor: *GdkCursor): cint <cimport,nodecl> end
global function gdk_device_tool_get_type(): GType <cimport,nodecl> end
global function gdk_device_tool_get_serial(tool: *GdkDeviceTool): guint64 <cimport,nodecl> end
global function gdk_device_tool_get_hardware_id(tool: *GdkDeviceTool): guint64 <cimport,nodecl> end
global function gdk_device_tool_get_tool_type(tool: *GdkDeviceTool): GdkDeviceToolType <cimport,nodecl> end
global function gdk_device_tool_get_axes(tool: *GdkDeviceTool): GdkAxisFlags <cimport,nodecl> end
global function gdk_device_get_type(): GType <cimport,nodecl> end
global function gdk_device_get_name(device: *GdkDevice): cstring <cimport,nodecl> end
global function gdk_device_get_vendor_id(device: *GdkDevice): cstring <cimport,nodecl> end
global function gdk_device_get_product_id(device: *GdkDevice): cstring <cimport,nodecl> end
global function gdk_device_get_display(device: *GdkDevice): *GdkDisplay <cimport,nodecl> end
global function gdk_device_get_seat(device: *GdkDevice): *GdkSeat <cimport,nodecl> end
global function gdk_device_get_device_tool(device: *GdkDevice): *GdkDeviceTool <cimport,nodecl> end
global function gdk_device_get_source(device: *GdkDevice): GdkInputSource <cimport,nodecl> end
global function gdk_device_get_has_cursor(device: *GdkDevice): gboolean <cimport,nodecl> end
global function gdk_device_get_num_touches(device: *GdkDevice): guint <cimport,nodecl> end
global function gdk_device_get_modifier_state(device: *GdkDevice): GdkModifierType <cimport,nodecl> end
global function gdk_device_get_direction(device: *GdkDevice): PangoDirection <cimport,nodecl> end
global function gdk_device_has_bidi_layouts(device: *GdkDevice): gboolean <cimport,nodecl> end
global function gdk_device_get_caps_lock_state(device: *GdkDevice): gboolean <cimport,nodecl> end
global function gdk_device_get_num_lock_state(device: *GdkDevice): gboolean <cimport,nodecl> end
global function gdk_device_get_scroll_lock_state(device: *GdkDevice): gboolean <cimport,nodecl> end
global function gdk_device_get_surface_at_position(device: *GdkDevice, win_x: *float64, win_y: *float64): *GdkSurface <cimport,nodecl> end
global function gdk_device_get_timestamp(device: *GdkDevice): guint32 <cimport,nodecl> end
global function gdk_device_pad_get_type(): GType <cimport,nodecl> end
global function gdk_device_pad_get_n_groups(pad: *GdkDevicePad): cint <cimport,nodecl> end
global function gdk_device_pad_get_group_n_modes(pad: *GdkDevicePad, group_idx: cint): cint <cimport,nodecl> end
global function gdk_device_pad_get_n_features(pad: *GdkDevicePad, feature: GdkDevicePadFeature): cint <cimport,nodecl> end
global function gdk_device_pad_get_feature_group(pad: *GdkDevicePad, feature: GdkDevicePadFeature, feature_idx: cint): cint <cimport,nodecl> end
global function gdk_drag_get_type(): GType <cimport,nodecl> end
global function gdk_drag_get_display(drag: *GdkDrag): *GdkDisplay <cimport,nodecl> end
global function gdk_drag_get_device(drag: *GdkDrag): *GdkDevice <cimport,nodecl> end
global function gdk_drag_get_formats(drag: *GdkDrag): *GdkContentFormats <cimport,nodecl> end
global function gdk_drag_get_actions(drag: *GdkDrag): GdkDragAction <cimport,nodecl> end
global function gdk_drag_get_selected_action(drag: *GdkDrag): GdkDragAction <cimport,nodecl> end
global function gdk_drag_action_is_unique(action: GdkDragAction): gboolean <cimport,nodecl> end
global function gdk_drag_begin(surface: *GdkSurface, device: *GdkDevice, content: *GdkContentProvider, actions: GdkDragAction, dx: float64, dy: float64): *GdkDrag <cimport,nodecl> end
global function gdk_drag_drop_done(drag: *GdkDrag, success: gboolean): void <cimport,nodecl> end
global function gdk_drag_get_drag_surface(drag: *GdkDrag): *GdkSurface <cimport,nodecl> end
global function gdk_drag_set_hotspot(drag: *GdkDrag, hot_x: cint, hot_y: cint): void <cimport,nodecl> end
global function gdk_drag_get_content(drag: *GdkDrag): *GdkContentProvider <cimport,nodecl> end
global function gdk_drag_get_surface(drag: *GdkDrag): *GdkSurface <cimport,nodecl> end
global function gdk_event_get_type(): GType <cimport,nodecl> end
global function gdk_event_sequence_get_type(): GType <cimport,nodecl> end
global function gdk_event_ref(event: *GdkEvent): *GdkEvent <cimport,nodecl> end
global function gdk_event_unref(event: *GdkEvent): void <cimport,nodecl> end
global function gdk_event_get_event_type(event: *GdkEvent): GdkEventType <cimport,nodecl> end
global function gdk_event_get_surface(event: *GdkEvent): *GdkSurface <cimport,nodecl> end
global function gdk_event_get_seat(event: *GdkEvent): *GdkSeat <cimport,nodecl> end
global function gdk_event_get_device(event: *GdkEvent): *GdkDevice <cimport,nodecl> end
global function gdk_event_get_device_tool(event: *GdkEvent): *GdkDeviceTool <cimport,nodecl> end
global function gdk_event_get_time(event: *GdkEvent): guint32 <cimport,nodecl> end
global function gdk_event_get_display(event: *GdkEvent): *GdkDisplay <cimport,nodecl> end
global function gdk_event_get_event_sequence(event: *GdkEvent): *GdkEventSequence <cimport,nodecl> end
global function gdk_event_get_modifier_state(event: *GdkEvent): GdkModifierType <cimport,nodecl> end
global function gdk_event_get_position(event: *GdkEvent, x: *float64, y: *float64): gboolean <cimport,nodecl> end
global function gdk_event_get_axes(event: *GdkEvent, axes: **float64, n_axes: *guint): gboolean <cimport,nodecl> end
global function gdk_event_get_axis(event: *GdkEvent, axis_use: GdkAxisUse, value: *float64): gboolean <cimport,nodecl> end
global function gdk_event_get_history(event: *GdkEvent, out_n_coords: *guint): *GdkTimeCoord <cimport,nodecl> end
global function gdk_event_get_pointer_emulated(event: *GdkEvent): gboolean <cimport,nodecl> end
global function gdk_button_event_get_type(): GType <cimport,nodecl> end
global function gdk_button_event_get_button(event: *GdkEvent): guint <cimport,nodecl> end
global function gdk_scroll_event_get_type(): GType <cimport,nodecl> end
global function gdk_scroll_event_get_direction(event: *GdkEvent): GdkScrollDirection <cimport,nodecl> end
global function gdk_scroll_event_get_deltas(event: *GdkEvent, delta_x: *float64, delta_y: *float64): void <cimport,nodecl> end
global function gdk_scroll_event_is_stop(event: *GdkEvent): gboolean <cimport,nodecl> end
global function gdk_key_event_get_type(): GType <cimport,nodecl> end
global function gdk_key_event_get_keyval(event: *GdkEvent): guint <cimport,nodecl> end
global function gdk_key_event_get_keycode(event: *GdkEvent): guint <cimport,nodecl> end
global function gdk_key_event_get_consumed_modifiers(event: *GdkEvent): GdkModifierType <cimport,nodecl> end
global function gdk_key_event_get_layout(event: *GdkEvent): guint <cimport,nodecl> end
global function gdk_key_event_get_level(event: *GdkEvent): guint <cimport,nodecl> end
global function gdk_key_event_is_modifier(event: *GdkEvent): gboolean <cimport,nodecl> end
global function gdk_focus_event_get_type(): GType <cimport,nodecl> end
global function gdk_focus_event_get_in(event: *GdkEvent): gboolean <cimport,nodecl> end
global function gdk_touch_event_get_type(): GType <cimport,nodecl> end
global function gdk_touch_event_get_emulating_pointer(event: *GdkEvent): gboolean <cimport,nodecl> end
global function gdk_crossing_event_get_type(): GType <cimport,nodecl> end
global function gdk_crossing_event_get_mode(event: *GdkEvent): GdkCrossingMode <cimport,nodecl> end
global function gdk_crossing_event_get_detail(event: *GdkEvent): GdkNotifyType <cimport,nodecl> end
global function gdk_crossing_event_get_focus(event: *GdkEvent): gboolean <cimport,nodecl> end
global function gdk_touchpad_event_get_type(): GType <cimport,nodecl> end
global function gdk_touchpad_event_get_gesture_phase(event: *GdkEvent): GdkTouchpadGesturePhase <cimport,nodecl> end
global function gdk_touchpad_event_get_n_fingers(event: *GdkEvent): guint <cimport,nodecl> end
global function gdk_touchpad_event_get_deltas(event: *GdkEvent, dx: *float64, dy: *float64): void <cimport,nodecl> end
global function gdk_touchpad_event_get_pinch_angle_delta(event: *GdkEvent): float64 <cimport,nodecl> end
global function gdk_touchpad_event_get_pinch_scale(event: *GdkEvent): float64 <cimport,nodecl> end
global function gdk_pad_event_get_type(): GType <cimport,nodecl> end
global function gdk_pad_event_get_button(event: *GdkEvent): guint <cimport,nodecl> end
global function gdk_pad_event_get_axis_value(event: *GdkEvent, index: *guint, value: *float64): void <cimport,nodecl> end
global function gdk_pad_event_get_group_mode(event: *GdkEvent, group: *guint, mode: *guint): void <cimport,nodecl> end
global function gdk_dnd_event_get_type(): GType <cimport,nodecl> end
global function gdk_dnd_event_get_drop(event: *GdkEvent): *GdkDrop <cimport,nodecl> end
global function gdk_grab_broken_event_get_type(): GType <cimport,nodecl> end
global function gdk_grab_broken_event_get_grab_surface(event: *GdkEvent): *GdkSurface <cimport,nodecl> end
global function gdk_grab_broken_event_get_implicit(event: *GdkEvent): gboolean <cimport,nodecl> end
global function gdk_motion_event_get_type(): GType <cimport,nodecl> end
global function gdk_delete_event_get_type(): GType <cimport,nodecl> end
global function gdk_proximity_event_get_type(): GType <cimport,nodecl> end
global function gdk_event_triggers_context_menu(event: *GdkEvent): gboolean <cimport,nodecl> end
global function gdk_events_get_distance(event1: *GdkEvent, event2: *GdkEvent, distance: *float64): gboolean <cimport,nodecl> end
global function gdk_events_get_angle(event1: *GdkEvent, event2: *GdkEvent, angle: *float64): gboolean <cimport,nodecl> end
global function gdk_events_get_center(event1: *GdkEvent, event2: *GdkEvent, x: *float64, y: *float64): gboolean <cimport,nodecl> end
global function gdk_key_event_matches(event: *GdkEvent, keyval: guint, modifiers: GdkModifierType): GdkKeyMatch <cimport,nodecl> end
global function gdk_key_event_get_match(event: *GdkEvent, keyval: *guint, modifiers: *GdkModifierType): gboolean <cimport,nodecl> end
global function gdk_frame_timings_get_type(): GType <cimport,nodecl> end
global function gdk_frame_timings_ref(timings: *GdkFrameTimings): *GdkFrameTimings <cimport,nodecl> end
global function gdk_frame_timings_unref(timings: *GdkFrameTimings): void <cimport,nodecl> end
global function gdk_frame_timings_get_frame_counter(timings: *GdkFrameTimings): gint64 <cimport,nodecl> end
global function gdk_frame_timings_get_complete(timings: *GdkFrameTimings): gboolean <cimport,nodecl> end
global function gdk_frame_timings_get_frame_time(timings: *GdkFrameTimings): gint64 <cimport,nodecl> end
global function gdk_frame_timings_get_presentation_time(timings: *GdkFrameTimings): gint64 <cimport,nodecl> end
global function gdk_frame_timings_get_refresh_interval(timings: *GdkFrameTimings): gint64 <cimport,nodecl> end
global function gdk_frame_timings_get_predicted_presentation_time(timings: *GdkFrameTimings): gint64 <cimport,nodecl> end
global function gdk_frame_clock_get_type(): GType <cimport,nodecl> end
global function gdk_frame_clock_get_frame_time(frame_clock: *GdkFrameClock): gint64 <cimport,nodecl> end
global function gdk_frame_clock_request_phase(frame_clock: *GdkFrameClock, phase: GdkFrameClockPhase): void <cimport,nodecl> end
global function gdk_frame_clock_begin_updating(frame_clock: *GdkFrameClock): void <cimport,nodecl> end
global function gdk_frame_clock_end_updating(frame_clock: *GdkFrameClock): void <cimport,nodecl> end
global function gdk_frame_clock_get_frame_counter(frame_clock: *GdkFrameClock): gint64 <cimport,nodecl> end
global function gdk_frame_clock_get_history_start(frame_clock: *GdkFrameClock): gint64 <cimport,nodecl> end
global function gdk_frame_clock_get_timings(frame_clock: *GdkFrameClock, frame_counter: gint64): *GdkFrameTimings <cimport,nodecl> end
global function gdk_frame_clock_get_current_timings(frame_clock: *GdkFrameClock): *GdkFrameTimings <cimport,nodecl> end
global function gdk_frame_clock_get_refresh_info(frame_clock: *GdkFrameClock, base_time: gint64, refresh_interval_return: *gint64, presentation_time_return: *gint64): void <cimport,nodecl> end
global function gdk_frame_clock_get_fps(frame_clock: *GdkFrameClock): float64 <cimport,nodecl> end
global function gdk_rectangle_intersect(src1: *GdkRectangle, src2: *GdkRectangle, dest: *GdkRectangle): gboolean <cimport,nodecl> end
global function gdk_rectangle_union(src1: *GdkRectangle, src2: *GdkRectangle, dest: *GdkRectangle): void <cimport,nodecl> end
global function gdk_rectangle_equal(rect1: *GdkRectangle, rect2: *GdkRectangle): gboolean <cimport,nodecl> end
global function gdk_rectangle_contains_point(rect: *GdkRectangle, x: cint, y: cint): gboolean <cimport,nodecl> end
global function gdk_rectangle_get_type(): GType <cimport,nodecl> end
global function gdk_monitor_get_type(): GType <cimport,nodecl> end
global function gdk_monitor_get_display(monitor: *GdkMonitor): *GdkDisplay <cimport,nodecl> end
global function gdk_monitor_get_geometry(monitor: *GdkMonitor, geometry: *GdkRectangle): void <cimport,nodecl> end
global function gdk_monitor_get_width_mm(monitor: *GdkMonitor): cint <cimport,nodecl> end
global function gdk_monitor_get_height_mm(monitor: *GdkMonitor): cint <cimport,nodecl> end
global function gdk_monitor_get_manufacturer(monitor: *GdkMonitor): cstring <cimport,nodecl> end
global function gdk_monitor_get_model(monitor: *GdkMonitor): cstring <cimport,nodecl> end
global function gdk_monitor_get_connector(monitor: *GdkMonitor): cstring <cimport,nodecl> end
global function gdk_monitor_get_scale_factor(monitor: *GdkMonitor): cint <cimport,nodecl> end
global function gdk_monitor_get_refresh_rate(monitor: *GdkMonitor): cint <cimport,nodecl> end
global function gdk_monitor_get_subpixel_layout(monitor: *GdkMonitor): GdkSubpixelLayout <cimport,nodecl> end
global function gdk_monitor_is_valid(monitor: *GdkMonitor): gboolean <cimport,nodecl> end
global function gdk_popup_layout_get_type(): GType <cimport,nodecl> end
global function gdk_popup_layout_new(anchor_rect: *GdkRectangle, rect_anchor: GdkGravity, surface_anchor: GdkGravity): *GdkPopupLayout <cimport,nodecl> end
global function gdk_popup_layout_ref(layout: *GdkPopupLayout): *GdkPopupLayout <cimport,nodecl> end
global function gdk_popup_layout_unref(layout: *GdkPopupLayout): void <cimport,nodecl> end
global function gdk_popup_layout_copy(layout: *GdkPopupLayout): *GdkPopupLayout <cimport,nodecl> end
global function gdk_popup_layout_equal(layout: *GdkPopupLayout, other: *GdkPopupLayout): gboolean <cimport,nodecl> end
global function gdk_popup_layout_set_anchor_rect(layout: *GdkPopupLayout, anchor_rect: *GdkRectangle): void <cimport,nodecl> end
global function gdk_popup_layout_get_anchor_rect(layout: *GdkPopupLayout): *GdkRectangle <cimport,nodecl> end
global function gdk_popup_layout_set_rect_anchor(layout: *GdkPopupLayout, anchor: GdkGravity): void <cimport,nodecl> end
global function gdk_popup_layout_get_rect_anchor(layout: *GdkPopupLayout): GdkGravity <cimport,nodecl> end
global function gdk_popup_layout_set_surface_anchor(layout: *GdkPopupLayout, anchor: GdkGravity): void <cimport,nodecl> end
global function gdk_popup_layout_get_surface_anchor(layout: *GdkPopupLayout): GdkGravity <cimport,nodecl> end
global function gdk_popup_layout_set_anchor_hints(layout: *GdkPopupLayout, anchor_hints: GdkAnchorHints): void <cimport,nodecl> end
global function gdk_popup_layout_get_anchor_hints(layout: *GdkPopupLayout): GdkAnchorHints <cimport,nodecl> end
global function gdk_popup_layout_set_offset(layout: *GdkPopupLayout, dx: cint, dy: cint): void <cimport,nodecl> end
global function gdk_popup_layout_get_offset(layout: *GdkPopupLayout, dx: *cint, dy: *cint): void <cimport,nodecl> end
global function gdk_popup_layout_set_shadow_width(layout: *GdkPopupLayout, left: cint, right: cint, top: cint, bottom: cint): void <cimport,nodecl> end
global function gdk_popup_layout_get_shadow_width(layout: *GdkPopupLayout, left: *cint, right: *cint, top: *cint, bottom: *cint): void <cimport,nodecl> end
global function gdk_surface_get_type(): GType <cimport,nodecl> end
global function gdk_surface_new_toplevel(display: *GdkDisplay): *GdkSurface <cimport,nodecl> end
global function gdk_surface_new_popup(parent: *GdkSurface, autohide: gboolean): *GdkSurface <cimport,nodecl> end
global function gdk_surface_destroy(surface: *GdkSurface): void <cimport,nodecl> end
global function gdk_surface_is_destroyed(surface: *GdkSurface): gboolean <cimport,nodecl> end
global function gdk_surface_get_display(surface: *GdkSurface): *GdkDisplay <cimport,nodecl> end
global function gdk_surface_hide(surface: *GdkSurface): void <cimport,nodecl> end
global function gdk_surface_set_input_region(surface: *GdkSurface, region: *cairo_region_t): void <cimport,nodecl> end
global function gdk_surface_get_mapped(surface: *GdkSurface): gboolean <cimport,nodecl> end
global function gdk_surface_set_cursor(surface: *GdkSurface, cursor: *GdkCursor): void <cimport,nodecl> end
global function gdk_surface_get_cursor(surface: *GdkSurface): *GdkCursor <cimport,nodecl> end
global function gdk_surface_set_device_cursor(surface: *GdkSurface, device: *GdkDevice, cursor: *GdkCursor): void <cimport,nodecl> end
global function gdk_surface_get_device_cursor(surface: *GdkSurface, device: *GdkDevice): *GdkCursor <cimport,nodecl> end
global function gdk_surface_get_width(surface: *GdkSurface): cint <cimport,nodecl> end
global function gdk_surface_get_height(surface: *GdkSurface): cint <cimport,nodecl> end
global function gdk_surface_translate_coordinates(from: *GdkSurface, to: *GdkSurface, x: *float64, y: *float64): gboolean <cimport,nodecl> end
global function gdk_surface_get_scale_factor(surface: *GdkSurface): cint <cimport,nodecl> end
global function gdk_surface_get_device_position(surface: *GdkSurface, device: *GdkDevice, x: *float64, y: *float64, mask: *GdkModifierType): gboolean <cimport,nodecl> end
global function gdk_surface_create_similar_surface(surface: *GdkSurface, content: cairo_content_t, width: cint, height: cint): *cairo_surface_t <cimport,nodecl> end
global function gdk_surface_beep(surface: *GdkSurface): void <cimport,nodecl> end
global function gdk_surface_queue_render(surface: *GdkSurface): void <cimport,nodecl> end
global function gdk_surface_request_layout(surface: *GdkSurface): void <cimport,nodecl> end
global function gdk_surface_get_frame_clock(surface: *GdkSurface): *GdkFrameClock <cimport,nodecl> end
global function gdk_surface_set_opaque_region(surface: *GdkSurface, region: *cairo_region_t): void <cimport,nodecl> end
global function gdk_surface_create_cairo_context(surface: *GdkSurface): *GdkCairoContext <cimport,nodecl> end
global function gdk_surface_create_gl_context(surface: *GdkSurface, error: **GError): *GdkGLContext <cimport,nodecl> end
global function gdk_surface_create_vulkan_context(surface: *GdkSurface, error: **GError): *GdkVulkanContext <cimport,nodecl> end
global function glib_autoptr_clear_GdkSurface(_ptr: *GdkSurface): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GdkSurface(_ptr: **GdkSurface): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GdkSurface(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GdkSurface(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GdkSurface(_q: **GQueue): void <cimport,nodecl> end
global function gdk_seat_get_type(): GType <cimport,nodecl> end
global function gdk_seat_get_display(seat: *GdkSeat): *GdkDisplay <cimport,nodecl> end
global function gdk_seat_get_capabilities(seat: *GdkSeat): GdkSeatCapabilities <cimport,nodecl> end
global function gdk_seat_get_devices(seat: *GdkSeat, capabilities: GdkSeatCapabilities): *GList <cimport,nodecl> end
global function gdk_seat_get_tools(seat: *GdkSeat): *GList <cimport,nodecl> end
global function gdk_seat_get_pointer(seat: *GdkSeat): *GdkDevice <cimport,nodecl> end
global function gdk_seat_get_keyboard(seat: *GdkSeat): *GdkDevice <cimport,nodecl> end
global function gdk_display_get_type(): GType <cimport,nodecl> end
global function gdk_display_open(display_name: cstring): *GdkDisplay <cimport,nodecl> end
global function gdk_display_get_name(display: *GdkDisplay): cstring <cimport,nodecl> end
global function gdk_display_device_is_grabbed(display: *GdkDisplay, device: *GdkDevice): gboolean <cimport,nodecl> end
global function gdk_display_beep(display: *GdkDisplay): void <cimport,nodecl> end
global function gdk_display_sync(display: *GdkDisplay): void <cimport,nodecl> end
global function gdk_display_flush(display: *GdkDisplay): void <cimport,nodecl> end
global function gdk_display_close(display: *GdkDisplay): void <cimport,nodecl> end
global function gdk_display_is_closed(display: *GdkDisplay): gboolean <cimport,nodecl> end
global function gdk_display_is_composited(display: *GdkDisplay): gboolean <cimport,nodecl> end
global function gdk_display_is_rgba(display: *GdkDisplay): gboolean <cimport,nodecl> end
global function gdk_display_supports_input_shapes(display: *GdkDisplay): gboolean <cimport,nodecl> end
global function gdk_display_prepare_gl(self: *GdkDisplay, error: **GError): gboolean <cimport,nodecl> end
global function gdk_display_create_gl_context(self: *GdkDisplay, error: **GError): *GdkGLContext <cimport,nodecl> end
global function gdk_display_get_default(): *GdkDisplay <cimport,nodecl> end
global function gdk_display_get_clipboard(display: *GdkDisplay): *GdkClipboard <cimport,nodecl> end
global function gdk_display_get_primary_clipboard(display: *GdkDisplay): *GdkClipboard <cimport,nodecl> end
global function gdk_display_notify_startup_complete(display: *GdkDisplay, startup_id: cstring): void <cimport,nodecl> end
global function gdk_display_get_startup_notification_id(display: *GdkDisplay): cstring <cimport,nodecl> end
global function gdk_display_get_app_launch_context(display: *GdkDisplay): *GdkAppLaunchContext <cimport,nodecl> end
global function gdk_display_get_default_seat(display: *GdkDisplay): *GdkSeat <cimport,nodecl> end
global function gdk_display_list_seats(display: *GdkDisplay): *GList <cimport,nodecl> end
global function gdk_display_get_monitors(self: *GdkDisplay): *GListModel <cimport,nodecl> end
global function gdk_display_get_monitor_at_surface(display: *GdkDisplay, surface: *GdkSurface): *GdkMonitor <cimport,nodecl> end
global function gdk_display_put_event(display: *GdkDisplay, event: *GdkEvent): void <cimport,nodecl> end
global function gdk_display_map_keyval(display: *GdkDisplay, keyval: guint, keys: **GdkKeymapKey, n_keys: *cint): gboolean <cimport,nodecl> end
global function gdk_display_map_keycode(display: *GdkDisplay, keycode: guint, keys: **GdkKeymapKey, keyvals: **guint, n_entries: *cint): gboolean <cimport,nodecl> end
global function gdk_display_translate_key(display: *GdkDisplay, keycode: guint, state: GdkModifierType, group: cint, keyval: *guint, effective_group: *cint, level: *cint, consumed: *GdkModifierType): gboolean <cimport,nodecl> end
global function gdk_display_get_setting(display: *GdkDisplay, name: cstring, value: *GValue): gboolean <cimport,nodecl> end
global function gdk_display_manager_get_type(): GType <cimport,nodecl> end
global function gdk_display_manager_get(): *GdkDisplayManager <cimport,nodecl> end
global function gdk_display_manager_get_default_display(manager: *GdkDisplayManager): *GdkDisplay <cimport,nodecl> end
global function gdk_display_manager_set_default_display(manager: *GdkDisplayManager, display: *GdkDisplay): void <cimport,nodecl> end
global function gdk_display_manager_list_displays(manager: *GdkDisplayManager): *GSList <cimport,nodecl> end
global function gdk_display_manager_open_display(manager: *GdkDisplayManager, name: cstring): *GdkDisplay <cimport,nodecl> end
global function gdk_set_allowed_backends(backends: cstring): void <cimport,nodecl> end
global function gdk_drag_surface_get_type(): GType <cimport,nodecl> end
global function glib_autoptr_clear_GdkDragSurface(_ptr: *GdkDragSurface): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GdkDragSurface(_ptr: **GdkDragSurface): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GdkDragSurface(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GdkDragSurface(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GdkDragSurface(_q: **GQueue): void <cimport,nodecl> end
global function GDK_DRAG_SURFACE(ptr: gpointer): *GdkDragSurface <cimport,nodecl> end
global function GDK_IS_DRAG_SURFACE(ptr: gpointer): gboolean <cimport,nodecl> end
global function GDK_DRAG_SURFACE_GET_IFACE(ptr: gpointer): *GdkDragSurfaceInterface <cimport,nodecl> end
global function gdk_drag_surface_present(drag_surface: *GdkDragSurface, width: cint, height: cint): gboolean <cimport,nodecl> end
global function gdk_draw_context_get_type(): GType <cimport,nodecl> end
global function gdk_draw_context_get_display(context: *GdkDrawContext): *GdkDisplay <cimport,nodecl> end
global function gdk_draw_context_get_surface(context: *GdkDrawContext): *GdkSurface <cimport,nodecl> end
global function gdk_draw_context_begin_frame(context: *GdkDrawContext, region: *cairo_region_t): void <cimport,nodecl> end
global function gdk_draw_context_end_frame(context: *GdkDrawContext): void <cimport,nodecl> end
global function gdk_draw_context_is_in_frame(context: *GdkDrawContext): gboolean <cimport,nodecl> end
global function gdk_draw_context_get_frame_region(context: *GdkDrawContext): *cairo_region_t <cimport,nodecl> end
global function glib_autoptr_clear_GdkDrop(_ptr: *GdkDrop): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GdkDrop(_ptr: **GdkDrop): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GdkDrop(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GdkDrop(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GdkDrop(_q: **GQueue): void <cimport,nodecl> end
global function gdk_drop_get_type(): GType <cimport,nodecl> end
global function gdk_drop_get_display(self: *GdkDrop): *GdkDisplay <cimport,nodecl> end
global function gdk_drop_get_device(self: *GdkDrop): *GdkDevice <cimport,nodecl> end
global function gdk_drop_get_surface(self: *GdkDrop): *GdkSurface <cimport,nodecl> end
global function gdk_drop_get_formats(self: *GdkDrop): *GdkContentFormats <cimport,nodecl> end
global function gdk_drop_get_actions(self: *GdkDrop): GdkDragAction <cimport,nodecl> end
global function gdk_drop_get_drag(self: *GdkDrop): *GdkDrag <cimport,nodecl> end
global function gdk_drop_status(self: *GdkDrop, actions: GdkDragAction, preferred: GdkDragAction): void <cimport,nodecl> end
global function gdk_drop_finish(self: *GdkDrop, action: GdkDragAction): void <cimport,nodecl> end
global function gdk_drop_read_async(self: *GdkDrop, mime_types: *cstring, io_priority: cint, cancellable: *GCancellable, callback: GAsyncReadyCallback, user_data: gpointer): void <cimport,nodecl> end
global function gdk_drop_read_finish(self: *GdkDrop, result: *GAsyncResult, out_mime_type: *cstring, error: **GError): *GInputStream <cimport,nodecl> end
global function gdk_drop_read_value_async(self: *GdkDrop, type: GType, io_priority: cint, cancellable: *GCancellable, callback: GAsyncReadyCallback, user_data: gpointer): void <cimport,nodecl> end
global function gdk_drop_read_value_finish(self: *GdkDrop, result: *GAsyncResult, error: **GError): *GValue <cimport,nodecl> end
global function gdk_input_source_get_type(): GType <cimport,nodecl> end
global function gdk_device_pad_feature_get_type(): GType <cimport,nodecl> end
global function gdk_device_tool_type_get_type(): GType <cimport,nodecl> end
global function gdk_drag_cancel_reason_get_type(): GType <cimport,nodecl> end
global function gdk_gravity_get_type(): GType <cimport,nodecl> end
global function gdk_modifier_type_get_type(): GType <cimport,nodecl> end
global function gdk_gl_error_get_type(): GType <cimport,nodecl> end
global function gdk_vulkan_error_get_type(): GType <cimport,nodecl> end
global function gdk_axis_use_get_type(): GType <cimport,nodecl> end
global function gdk_axis_flags_get_type(): GType <cimport,nodecl> end
global function gdk_drag_action_get_type(): GType <cimport,nodecl> end
global function gdk_memory_format_get_type(): GType <cimport,nodecl> end
global function gdk_event_type_get_type(): GType <cimport,nodecl> end
global function gdk_touchpad_gesture_phase_get_type(): GType <cimport,nodecl> end
global function gdk_scroll_direction_get_type(): GType <cimport,nodecl> end
global function gdk_notify_type_get_type(): GType <cimport,nodecl> end
global function gdk_crossing_mode_get_type(): GType <cimport,nodecl> end
global function gdk_key_match_get_type(): GType <cimport,nodecl> end
global function gdk_frame_clock_phase_get_type(): GType <cimport,nodecl> end
global function gdk_gl_api_get_type(): GType <cimport,nodecl> end
global function gdk_subpixel_layout_get_type(): GType <cimport,nodecl> end
global function gdk_paintable_flags_get_type(): GType <cimport,nodecl> end
global function gdk_anchor_hints_get_type(): GType <cimport,nodecl> end
global function gdk_seat_capabilities_get_type(): GType <cimport,nodecl> end
global function gdk_texture_error_get_type(): GType <cimport,nodecl> end
global function gdk_surface_edge_get_type(): GType <cimport,nodecl> end
global function gdk_fullscreen_mode_get_type(): GType <cimport,nodecl> end
global function gdk_toplevel_state_get_type(): GType <cimport,nodecl> end
global function gdk_titlebar_gesture_get_type(): GType <cimport,nodecl> end
global function gdk_gl_error_quark(): GQuark <cimport,nodecl> end
global function gdk_gl_context_get_type(): GType <cimport,nodecl> end
global function gdk_gl_context_get_display(context: *GdkGLContext): *GdkDisplay <cimport,nodecl> end
global function gdk_gl_context_get_surface(context: *GdkGLContext): *GdkSurface <cimport,nodecl> end
global function gdk_gl_context_get_shared_context(context: *GdkGLContext): *GdkGLContext <cimport,nodecl> end
global function gdk_gl_context_get_version(context: *GdkGLContext, major: *cint, minor: *cint): void <cimport,nodecl> end
global function gdk_gl_context_is_legacy(context: *GdkGLContext): gboolean <cimport,nodecl> end
global function gdk_gl_context_is_shared(self: *GdkGLContext, other: *GdkGLContext): gboolean <cimport,nodecl> end
global function gdk_gl_context_set_required_version(context: *GdkGLContext, major: cint, minor: cint): void <cimport,nodecl> end
global function gdk_gl_context_get_required_version(context: *GdkGLContext, major: *cint, minor: *cint): void <cimport,nodecl> end
global function gdk_gl_context_set_debug_enabled(context: *GdkGLContext, enabled: gboolean): void <cimport,nodecl> end
global function gdk_gl_context_get_debug_enabled(context: *GdkGLContext): gboolean <cimport,nodecl> end
global function gdk_gl_context_set_forward_compatible(context: *GdkGLContext, compatible: gboolean): void <cimport,nodecl> end
global function gdk_gl_context_get_forward_compatible(context: *GdkGLContext): gboolean <cimport,nodecl> end
global function gdk_gl_context_set_allowed_apis(self: *GdkGLContext, apis: GdkGLAPI): void <cimport,nodecl> end
global function gdk_gl_context_get_allowed_apis(self: *GdkGLContext): GdkGLAPI <cimport,nodecl> end
global function gdk_gl_context_get_api(self: *GdkGLContext): GdkGLAPI <cimport,nodecl> end
global function gdk_gl_context_set_use_es(context: *GdkGLContext, use_es: cint): void <cimport,nodecl> end
global function gdk_gl_context_get_use_es(context: *GdkGLContext): gboolean <cimport,nodecl> end
global function gdk_gl_context_realize(context: *GdkGLContext, error: **GError): gboolean <cimport,nodecl> end
global function gdk_gl_context_make_current(context: *GdkGLContext): void <cimport,nodecl> end
global function gdk_gl_context_get_current(): *GdkGLContext <cimport,nodecl> end
global function gdk_gl_context_clear_current(): void <cimport,nodecl> end
global function glib_autoptr_clear_GdkGLTexture(_ptr: *GdkGLTexture): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GdkGLTexture(_ptr: **GdkGLTexture): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GdkGLTexture(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GdkGLTexture(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GdkGLTexture(_q: **GQueue): void <cimport,nodecl> end
global function gdk_gl_texture_get_type(): GType <cimport,nodecl> end
global function gdk_gl_texture_new(context: *GdkGLContext, id: guint, width: cint, height: cint, destroy: GDestroyNotify, data: gpointer): *GdkTexture <cimport,nodecl> end
global function gdk_gl_texture_release(self: *GdkGLTexture): void <cimport,nodecl> end
global function gdk_keyval_name(keyval: guint): cstring <cimport,nodecl> end
global function gdk_keyval_from_name(keyval_name: cstring): guint <cimport,nodecl> end
global function gdk_keyval_convert_case(symbol: guint, lower: *guint, upper: *guint): void <cimport,nodecl> end
global function gdk_keyval_to_upper(keyval: guint): guint <cimport,nodecl> end
global function gdk_keyval_to_lower(keyval: guint): guint <cimport,nodecl> end
global function gdk_keyval_is_upper(keyval: guint): gboolean <cimport,nodecl> end
global function gdk_keyval_is_lower(keyval: guint): gboolean <cimport,nodecl> end
global function gdk_keyval_to_unicode(keyval: guint): guint32 <cimport,nodecl> end
global function gdk_unicode_to_keyval(wc: guint32): guint <cimport,nodecl> end
global function glib_autoptr_clear_GdkMemoryTexture(_ptr: *GdkMemoryTexture): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GdkMemoryTexture(_ptr: **GdkMemoryTexture): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GdkMemoryTexture(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GdkMemoryTexture(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GdkMemoryTexture(_q: **GQueue): void <cimport,nodecl> end
global function gdk_memory_texture_get_type(): GType <cimport,nodecl> end
global function gdk_memory_texture_new(width: cint, height: cint, format: GdkMemoryFormat, bytes: *GBytes, stride: gsize): *GdkTexture <cimport,nodecl> end
global function gdk_paintable_get_type(): GType <cimport,nodecl> end
global function glib_autoptr_clear_GdkPaintable(_ptr: *GdkPaintable): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GdkPaintable(_ptr: **GdkPaintable): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GdkPaintable(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GdkPaintable(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GdkPaintable(_q: **GQueue): void <cimport,nodecl> end
global function GDK_PAINTABLE(ptr: gpointer): *GdkPaintable <cimport,nodecl> end
global function GDK_IS_PAINTABLE(ptr: gpointer): gboolean <cimport,nodecl> end
global function GDK_PAINTABLE_GET_IFACE(ptr: gpointer): *GdkPaintableInterface <cimport,nodecl> end
global function gdk_paintable_snapshot(paintable: *GdkPaintable, snapshot: *GdkSnapshot, width: float64, height: float64): void <cimport,nodecl> end
global function gdk_paintable_get_current_image(paintable: *GdkPaintable): *GdkPaintable <cimport,nodecl> end
global function gdk_paintable_get_flags(paintable: *GdkPaintable): GdkPaintableFlags <cimport,nodecl> end
global function gdk_paintable_get_intrinsic_width(paintable: *GdkPaintable): cint <cimport,nodecl> end
global function gdk_paintable_get_intrinsic_height(paintable: *GdkPaintable): cint <cimport,nodecl> end
global function gdk_paintable_get_intrinsic_aspect_ratio(paintable: *GdkPaintable): float64 <cimport,nodecl> end
global function gdk_paintable_compute_concrete_size(paintable: *GdkPaintable, specified_width: float64, specified_height: float64, default_width: float64, default_height: float64, concrete_width: *float64, concrete_height: *float64): void <cimport,nodecl> end
global function gdk_paintable_invalidate_contents(paintable: *GdkPaintable): void <cimport,nodecl> end
global function gdk_paintable_invalidate_size(paintable: *GdkPaintable): void <cimport,nodecl> end
global function gdk_paintable_new_empty(intrinsic_width: cint, intrinsic_height: cint): *GdkPaintable <cimport,nodecl> end
global function gdk_pango_layout_line_get_clip_region(line: *PangoLayoutLine, x_origin: cint, y_origin: cint, index_ranges: *cint, n_ranges: cint): *cairo_region_t <cimport,nodecl> end
global function gdk_pango_layout_get_clip_region(layout: *PangoLayout, x_origin: cint, y_origin: cint, index_ranges: *cint, n_ranges: cint): *cairo_region_t <cimport,nodecl> end
global function gdk_popup_get_type(): GType <cimport,nodecl> end
global function glib_autoptr_clear_GdkPopup(_ptr: *GdkPopup): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GdkPopup(_ptr: **GdkPopup): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GdkPopup(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GdkPopup(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GdkPopup(_q: **GQueue): void <cimport,nodecl> end
global function GDK_POPUP(ptr: gpointer): *GdkPopup <cimport,nodecl> end
global function GDK_IS_POPUP(ptr: gpointer): gboolean <cimport,nodecl> end
global function GDK_POPUP_GET_IFACE(ptr: gpointer): *GdkPopupInterface <cimport,nodecl> end
global function gdk_popup_present(popup: *GdkPopup, width: cint, height: cint, layout: *GdkPopupLayout): gboolean <cimport,nodecl> end
global function gdk_popup_get_surface_anchor(popup: *GdkPopup): GdkGravity <cimport,nodecl> end
global function gdk_popup_get_rect_anchor(popup: *GdkPopup): GdkGravity <cimport,nodecl> end
global function gdk_popup_get_parent(popup: *GdkPopup): *GdkSurface <cimport,nodecl> end
global function gdk_popup_get_position_x(popup: *GdkPopup): cint <cimport,nodecl> end
global function gdk_popup_get_position_y(popup: *GdkPopup): cint <cimport,nodecl> end
global function gdk_popup_get_autohide(popup: *GdkPopup): gboolean <cimport,nodecl> end
global function glib_autoptr_clear_GdkSnapshot(_ptr: *GdkSnapshot): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GdkSnapshot(_ptr: **GdkSnapshot): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GdkSnapshot(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GdkSnapshot(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GdkSnapshot(_q: **GQueue): void <cimport,nodecl> end
global function gdk_snapshot_get_type(): GType <cimport,nodecl> end
global function gdk_toplevel_layout_get_type(): GType <cimport,nodecl> end
global function gdk_toplevel_layout_new(): *GdkToplevelLayout <cimport,nodecl> end
global function gdk_toplevel_layout_ref(layout: *GdkToplevelLayout): *GdkToplevelLayout <cimport,nodecl> end
global function gdk_toplevel_layout_unref(layout: *GdkToplevelLayout): void <cimport,nodecl> end
global function gdk_toplevel_layout_copy(layout: *GdkToplevelLayout): *GdkToplevelLayout <cimport,nodecl> end
global function gdk_toplevel_layout_equal(layout: *GdkToplevelLayout, other: *GdkToplevelLayout): gboolean <cimport,nodecl> end
global function gdk_toplevel_layout_set_maximized(layout: *GdkToplevelLayout, maximized: gboolean): void <cimport,nodecl> end
global function gdk_toplevel_layout_set_fullscreen(layout: *GdkToplevelLayout, fullscreen: gboolean, monitor: *GdkMonitor): void <cimport,nodecl> end
global function gdk_toplevel_layout_get_maximized(layout: *GdkToplevelLayout, maximized: *gboolean): gboolean <cimport,nodecl> end
global function gdk_toplevel_layout_get_fullscreen(layout: *GdkToplevelLayout, fullscreen: *gboolean): gboolean <cimport,nodecl> end
global function gdk_toplevel_layout_get_fullscreen_monitor(layout: *GdkToplevelLayout): *GdkMonitor <cimport,nodecl> end
global function gdk_toplevel_layout_set_resizable(layout: *GdkToplevelLayout, resizable: gboolean): void <cimport,nodecl> end
global function gdk_toplevel_layout_get_resizable(layout: *GdkToplevelLayout): gboolean <cimport,nodecl> end
global function gdk_toplevel_get_type(): GType <cimport,nodecl> end
global function glib_autoptr_clear_GdkToplevel(_ptr: *GdkToplevel): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GdkToplevel(_ptr: **GdkToplevel): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GdkToplevel(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GdkToplevel(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GdkToplevel(_q: **GQueue): void <cimport,nodecl> end
global function GDK_TOPLEVEL(ptr: gpointer): *GdkToplevel <cimport,nodecl> end
global function GDK_IS_TOPLEVEL(ptr: gpointer): gboolean <cimport,nodecl> end
global function GDK_TOPLEVEL_GET_IFACE(ptr: gpointer): *GdkToplevelInterface <cimport,nodecl> end
global function gdk_toplevel_present(toplevel: *GdkToplevel, layout: *GdkToplevelLayout): void <cimport,nodecl> end
global function gdk_toplevel_minimize(toplevel: *GdkToplevel): gboolean <cimport,nodecl> end
global function gdk_toplevel_lower(toplevel: *GdkToplevel): gboolean <cimport,nodecl> end
global function gdk_toplevel_focus(toplevel: *GdkToplevel, timestamp: guint32): void <cimport,nodecl> end
global function gdk_toplevel_get_state(toplevel: *GdkToplevel): GdkToplevelState <cimport,nodecl> end
global function gdk_toplevel_set_title(toplevel: *GdkToplevel, title: cstring): void <cimport,nodecl> end
global function gdk_toplevel_set_startup_id(toplevel: *GdkToplevel, startup_id: cstring): void <cimport,nodecl> end
global function gdk_toplevel_set_transient_for(toplevel: *GdkToplevel, parent: *GdkSurface): void <cimport,nodecl> end
global function gdk_toplevel_set_modal(toplevel: *GdkToplevel, modal: gboolean): void <cimport,nodecl> end
global function gdk_toplevel_set_icon_list(toplevel: *GdkToplevel, surfaces: *GList): void <cimport,nodecl> end
global function gdk_toplevel_show_window_menu(toplevel: *GdkToplevel, event: *GdkEvent): gboolean <cimport,nodecl> end
global function gdk_toplevel_set_decorated(toplevel: *GdkToplevel, decorated: gboolean): void <cimport,nodecl> end
global function gdk_toplevel_set_deletable(toplevel: *GdkToplevel, deletable: gboolean): void <cimport,nodecl> end
global function gdk_toplevel_supports_edge_constraints(toplevel: *GdkToplevel): gboolean <cimport,nodecl> end
global function gdk_toplevel_inhibit_system_shortcuts(toplevel: *GdkToplevel, event: *GdkEvent): void <cimport,nodecl> end
global function gdk_toplevel_restore_system_shortcuts(toplevel: *GdkToplevel): void <cimport,nodecl> end
global function gdk_toplevel_begin_resize(toplevel: *GdkToplevel, edge: GdkSurfaceEdge, device: *GdkDevice, button: cint, x: float64, y: float64, timestamp: guint32): void <cimport,nodecl> end
global function gdk_toplevel_begin_move(toplevel: *GdkToplevel, device: *GdkDevice, button: cint, x: float64, y: float64, timestamp: guint32): void <cimport,nodecl> end
global function gdk_toplevel_titlebar_gesture(toplevel: *GdkToplevel, gesture: GdkTitlebarGesture): gboolean <cimport,nodecl> end
global function gdk_toplevel_size_get_type(): GType <cimport,nodecl> end
global function gdk_toplevel_size_get_bounds(size: *GdkToplevelSize, bounds_width: *cint, bounds_height: *cint): void <cimport,nodecl> end
global function gdk_toplevel_size_set_size(size: *GdkToplevelSize, width: cint, height: cint): void <cimport,nodecl> end
global function gdk_toplevel_size_set_min_size(size: *GdkToplevelSize, min_width: cint, min_height: cint): void <cimport,nodecl> end
global function gdk_toplevel_size_set_shadow_width(size: *GdkToplevelSize, left: cint, right: cint, top: cint, bottom: cint): void <cimport,nodecl> end
global function gdk_vulkan_error_quark(): GQuark <cimport,nodecl> end
global function gdk_vulkan_context_get_type(): GType <cimport,nodecl> end
global function glib_autoptr_clear_GdkAppLaunchContext(_ptr: *GdkAppLaunchContext): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GdkAppLaunchContext(_ptr: **GdkAppLaunchContext): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GdkAppLaunchContext(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GdkAppLaunchContext(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GdkAppLaunchContext(_q: **GQueue): void <cimport,nodecl> end
global function glib_autoptr_clear_GdkClipboard(_ptr: *GdkClipboard): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GdkClipboard(_ptr: **GdkClipboard): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GdkClipboard(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GdkClipboard(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GdkClipboard(_q: **GQueue): void <cimport,nodecl> end
global function glib_autoptr_clear_GdkContentProvider(_ptr: *GdkContentProvider): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GdkContentProvider(_ptr: **GdkContentProvider): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GdkContentProvider(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GdkContentProvider(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GdkContentProvider(_q: **GQueue): void <cimport,nodecl> end
global function glib_autoptr_clear_GdkCursor(_ptr: *GdkCursor): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GdkCursor(_ptr: **GdkCursor): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GdkCursor(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GdkCursor(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GdkCursor(_q: **GQueue): void <cimport,nodecl> end
global function glib_autoptr_clear_GdkDevice(_ptr: *GdkDevice): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GdkDevice(_ptr: **GdkDevice): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GdkDevice(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GdkDevice(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GdkDevice(_q: **GQueue): void <cimport,nodecl> end
global function glib_autoptr_clear_GdkDisplay(_ptr: *GdkDisplay): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GdkDisplay(_ptr: **GdkDisplay): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GdkDisplay(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GdkDisplay(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GdkDisplay(_q: **GQueue): void <cimport,nodecl> end
global function glib_autoptr_clear_GdkDisplayManager(_ptr: *GdkDisplayManager): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GdkDisplayManager(_ptr: **GdkDisplayManager): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GdkDisplayManager(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GdkDisplayManager(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GdkDisplayManager(_q: **GQueue): void <cimport,nodecl> end
global function glib_autoptr_clear_GdkDrag(_ptr: *GdkDrag): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GdkDrag(_ptr: **GdkDrag): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GdkDrag(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GdkDrag(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GdkDrag(_q: **GQueue): void <cimport,nodecl> end
global function glib_autoptr_clear_GdkDrawContext(_ptr: *GdkDrawContext): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GdkDrawContext(_ptr: **GdkDrawContext): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GdkDrawContext(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GdkDrawContext(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GdkDrawContext(_q: **GQueue): void <cimport,nodecl> end
global function glib_autoptr_clear_GdkFrameClock(_ptr: *GdkFrameClock): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GdkFrameClock(_ptr: **GdkFrameClock): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GdkFrameClock(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GdkFrameClock(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GdkFrameClock(_q: **GQueue): void <cimport,nodecl> end
global function glib_autoptr_clear_GdkGLContext(_ptr: *GdkGLContext): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GdkGLContext(_ptr: **GdkGLContext): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GdkGLContext(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GdkGLContext(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GdkGLContext(_q: **GQueue): void <cimport,nodecl> end
global function glib_autoptr_clear_GdkMonitor(_ptr: *GdkMonitor): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GdkMonitor(_ptr: **GdkMonitor): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GdkMonitor(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GdkMonitor(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GdkMonitor(_q: **GQueue): void <cimport,nodecl> end
global function glib_autoptr_clear_GdkSeat(_ptr: *GdkSeat): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GdkSeat(_ptr: **GdkSeat): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GdkSeat(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GdkSeat(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GdkSeat(_q: **GQueue): void <cimport,nodecl> end
global function glib_autoptr_clear_GdkPopupLayout(_ptr: *GdkPopupLayout): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GdkPopupLayout(_ptr: **GdkPopupLayout): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GdkPopupLayout(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GdkPopupLayout(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GdkPopupLayout(_q: **GQueue): void <cimport,nodecl> end
global function glib_autoptr_clear_GdkVulkanContext(_ptr: *GdkVulkanContext): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GdkVulkanContext(_ptr: **GdkVulkanContext): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GdkVulkanContext(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GdkVulkanContext(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GdkVulkanContext(_q: **GQueue): void <cimport,nodecl> end
global function glib_autoptr_clear_GdkContentFormats(_ptr: *GdkContentFormats): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GdkContentFormats(_ptr: **GdkContentFormats): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GdkContentFormats(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GdkContentFormats(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GdkContentFormats(_q: **GQueue): void <cimport,nodecl> end
global function glib_autoptr_clear_GdkEvent(_ptr: *GdkEvent): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GdkEvent(_ptr: **GdkEvent): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GdkEvent(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GdkEvent(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GdkEvent(_q: **GQueue): void <cimport,nodecl> end
global function glib_autoptr_clear_GdkFrameTimings(_ptr: *GdkFrameTimings): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GdkFrameTimings(_ptr: **GdkFrameTimings): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GdkFrameTimings(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GdkFrameTimings(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GdkFrameTimings(_q: **GQueue): void <cimport,nodecl> end
global function glib_autoptr_clear_GdkRGBA(_ptr: *GdkRGBA): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GdkRGBA(_ptr: **GdkRGBA): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GdkRGBA(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GdkRGBA(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GdkRGBA(_q: **GQueue): void <cimport,nodecl> end
global function _mm_empty(): void <cimport,nodecl> end
global function _m_empty(): void <cimport,nodecl> end
global function _mm_cvtsi32_si64(i: cint): cint <cimport,nodecl> end
global function _m_from_int(i: cint): cint <cimport,nodecl> end
global function _m_from_int64(i: clonglong): cint <cimport,nodecl> end
global function _mm_cvtsi64_m64(i: clonglong): cint <cimport,nodecl> end
global function _mm_cvtsi64x_si64(i: clonglong): cint <cimport,nodecl> end
global function _mm_set_pi64x(i: clonglong): cint <cimport,nodecl> end
global function _mm_cvtsi64_si32(i: cint): cint <cimport,nodecl> end
global function _m_to_int(i: cint): cint <cimport,nodecl> end
global function _m_to_int64(i: cint): clonglong <cimport,nodecl> end
global function _mm_cvtm64_si64(i: cint): clonglong <cimport,nodecl> end
global function _mm_cvtsi64_si64x(i: cint): clonglong <cimport,nodecl> end
global function _mm_packs_pi16(m1: cint, m2: cint): cint <cimport,nodecl> end
global function _m_packsswb(m1: cint, m2: cint): cint <cimport,nodecl> end
global function _mm_packs_pi32(m1: cint, m2: cint): cint <cimport,nodecl> end
global function _m_packssdw(m1: cint, m2: cint): cint <cimport,nodecl> end
global function _mm_packs_pu16(m1: cint, m2: cint): cint <cimport,nodecl> end
global function _m_packuswb(m1: cint, m2: cint): cint <cimport,nodecl> end
global function _mm_unpackhi_pi8(m1: cint, m2: cint): cint <cimport,nodecl> end
global function _m_punpckhbw(m1: cint, m2: cint): cint <cimport,nodecl> end
global function _mm_unpackhi_pi16(m1: cint, m2: cint): cint <cimport,nodecl> end
global function _m_punpckhwd(m1: cint, m2: cint): cint <cimport,nodecl> end
global function _mm_unpackhi_pi32(m1: cint, m2: cint): cint <cimport,nodecl> end
global function _m_punpckhdq(m1: cint, m2: cint): cint <cimport,nodecl> end
global function _mm_unpacklo_pi8(m1: cint, m2: cint): cint <cimport,nodecl> end
global function _m_punpcklbw(m1: cint, m2: cint): cint <cimport,nodecl> end
global function _mm_unpacklo_pi16(m1: cint, m2: cint): cint <cimport,nodecl> end
global function _m_punpcklwd(m1: cint, m2: cint): cint <cimport,nodecl> end
global function _mm_unpacklo_pi32(m1: cint, m2: cint): cint <cimport,nodecl> end
global function _m_punpckldq(m1: cint, m2: cint): cint <cimport,nodecl> end
global function _mm_add_pi8(m1: cint, m2: cint): cint <cimport,nodecl> end
global function _m_paddb(m1: cint, m2: cint): cint <cimport,nodecl> end
global function _mm_add_pi16(m1: cint, m2: cint): cint <cimport,nodecl> end
global function _m_paddw(m1: cint, m2: cint): cint <cimport,nodecl> end
global function _mm_add_pi32(m1: cint, m2: cint): cint <cimport,nodecl> end
global function _m_paddd(m1: cint, m2: cint): cint <cimport,nodecl> end
global function _mm_add_si64(m1: cint, m2: cint): cint <cimport,nodecl> end
global function _mm_adds_pi8(m1: cint, m2: cint): cint <cimport,nodecl> end
global function _m_paddsb(m1: cint, m2: cint): cint <cimport,nodecl> end
global function _mm_adds_pi16(m1: cint, m2: cint): cint <cimport,nodecl> end
global function _m_paddsw(m1: cint, m2: cint): cint <cimport,nodecl> end
global function _mm_adds_pu8(m1: cint, m2: cint): cint <cimport,nodecl> end
global function _m_paddusb(m1: cint, m2: cint): cint <cimport,nodecl> end
global function _mm_adds_pu16(m1: cint, m2: cint): cint <cimport,nodecl> end
global function _m_paddusw(m1: cint, m2: cint): cint <cimport,nodecl> end
global function _mm_sub_pi8(m1: cint, m2: cint): cint <cimport,nodecl> end
global function _m_psubb(m1: cint, m2: cint): cint <cimport,nodecl> end
global function _mm_sub_pi16(m1: cint, m2: cint): cint <cimport,nodecl> end
global function _m_psubw(m1: cint, m2: cint): cint <cimport,nodecl> end
global function _mm_sub_pi32(m1: cint, m2: cint): cint <cimport,nodecl> end
global function _m_psubd(m1: cint, m2: cint): cint <cimport,nodecl> end
global function _mm_sub_si64(m1: cint, m2: cint): cint <cimport,nodecl> end
global function _mm_subs_pi8(m1: cint, m2: cint): cint <cimport,nodecl> end
global function _m_psubsb(m1: cint, m2: cint): cint <cimport,nodecl> end
global function _mm_subs_pi16(m1: cint, m2: cint): cint <cimport,nodecl> end
global function _m_psubsw(m1: cint, m2: cint): cint <cimport,nodecl> end
global function _mm_subs_pu8(m1: cint, m2: cint): cint <cimport,nodecl> end
global function _m_psubusb(m1: cint, m2: cint): cint <cimport,nodecl> end
global function _mm_subs_pu16(m1: cint, m2: cint): cint <cimport,nodecl> end
global function _m_psubusw(m1: cint, m2: cint): cint <cimport,nodecl> end
global function _mm_madd_pi16(m1: cint, m2: cint): cint <cimport,nodecl> end
global function _m_pmaddwd(m1: cint, m2: cint): cint <cimport,nodecl> end
global function _mm_mulhi_pi16(m1: cint, m2: cint): cint <cimport,nodecl> end
global function _m_pmulhw(m1: cint, m2: cint): cint <cimport,nodecl> end
global function _mm_mullo_pi16(m1: cint, m2: cint): cint <cimport,nodecl> end
global function _m_pmullw(m1: cint, m2: cint): cint <cimport,nodecl> end
global function _mm_sll_pi16(m: cint, count: cint): cint <cimport,nodecl> end
global function _m_psllw(m: cint, count: cint): cint <cimport,nodecl> end
global function _mm_slli_pi16(m: cint, count: cint): cint <cimport,nodecl> end
global function _m_psllwi(m: cint, count: cint): cint <cimport,nodecl> end
global function _mm_sll_pi32(m: cint, count: cint): cint <cimport,nodecl> end
global function _m_pslld(m: cint, count: cint): cint <cimport,nodecl> end
global function _mm_slli_pi32(m: cint, count: cint): cint <cimport,nodecl> end
global function _m_pslldi(m: cint, count: cint): cint <cimport,nodecl> end
global function _mm_sll_si64(m: cint, count: cint): cint <cimport,nodecl> end
global function _m_psllq(m: cint, count: cint): cint <cimport,nodecl> end
global function _mm_slli_si64(m: cint, count: cint): cint <cimport,nodecl> end
global function _m_psllqi(m: cint, count: cint): cint <cimport,nodecl> end
global function _mm_sra_pi16(m: cint, count: cint): cint <cimport,nodecl> end
global function _m_psraw(m: cint, count: cint): cint <cimport,nodecl> end
global function _mm_srai_pi16(m: cint, count: cint): cint <cimport,nodecl> end
global function _m_psrawi(m: cint, count: cint): cint <cimport,nodecl> end
global function _mm_sra_pi32(m: cint, count: cint): cint <cimport,nodecl> end
global function _m_psrad(m: cint, count: cint): cint <cimport,nodecl> end
global function _mm_srai_pi32(m: cint, count: cint): cint <cimport,nodecl> end
global function _m_psradi(m: cint, count: cint): cint <cimport,nodecl> end
global function _mm_srl_pi16(m: cint, count: cint): cint <cimport,nodecl> end
global function _m_psrlw(m: cint, count: cint): cint <cimport,nodecl> end
global function _mm_srli_pi16(m: cint, count: cint): cint <cimport,nodecl> end
global function _m_psrlwi(m: cint, count: cint): cint <cimport,nodecl> end
global function _mm_srl_pi32(m: cint, count: cint): cint <cimport,nodecl> end
global function _m_psrld(m: cint, count: cint): cint <cimport,nodecl> end
global function _mm_srli_pi32(m: cint, count: cint): cint <cimport,nodecl> end
global function _m_psrldi(m: cint, count: cint): cint <cimport,nodecl> end
global function _mm_srl_si64(m: cint, count: cint): cint <cimport,nodecl> end
global function _m_psrlq(m: cint, count: cint): cint <cimport,nodecl> end
global function _mm_srli_si64(m: cint, count: cint): cint <cimport,nodecl> end
global function _m_psrlqi(m: cint, count: cint): cint <cimport,nodecl> end
global function _mm_and_si64(m1: cint, m2: cint): cint <cimport,nodecl> end
global function _m_pand(m1: cint, m2: cint): cint <cimport,nodecl> end
global function _mm_andnot_si64(m1: cint, m2: cint): cint <cimport,nodecl> end
global function _m_pandn(m1: cint, m2: cint): cint <cimport,nodecl> end
global function _mm_or_si64(m1: cint, m2: cint): cint <cimport,nodecl> end
global function _m_por(m1: cint, m2: cint): cint <cimport,nodecl> end
global function _mm_xor_si64(m1: cint, m2: cint): cint <cimport,nodecl> end
global function _m_pxor(m1: cint, m2: cint): cint <cimport,nodecl> end
global function _mm_cmpeq_pi8(m1: cint, m2: cint): cint <cimport,nodecl> end
global function _m_pcmpeqb(m1: cint, m2: cint): cint <cimport,nodecl> end
global function _mm_cmpgt_pi8(m1: cint, m2: cint): cint <cimport,nodecl> end
global function _m_pcmpgtb(m1: cint, m2: cint): cint <cimport,nodecl> end
global function _mm_cmpeq_pi16(m1: cint, m2: cint): cint <cimport,nodecl> end
global function _m_pcmpeqw(m1: cint, m2: cint): cint <cimport,nodecl> end
global function _mm_cmpgt_pi16(m1: cint, m2: cint): cint <cimport,nodecl> end
global function _m_pcmpgtw(m1: cint, m2: cint): cint <cimport,nodecl> end
global function _mm_cmpeq_pi32(m1: cint, m2: cint): cint <cimport,nodecl> end
global function _m_pcmpeqd(m1: cint, m2: cint): cint <cimport,nodecl> end
global function _mm_cmpgt_pi32(m1: cint, m2: cint): cint <cimport,nodecl> end
global function _m_pcmpgtd(m1: cint, m2: cint): cint <cimport,nodecl> end
global function _mm_setzero_si64(): cint <cimport,nodecl> end
global function _mm_set_pi32(i1: cint, i0: cint): cint <cimport,nodecl> end
global function _mm_set_pi16(w3: cshort, w2: cshort, w1: cshort, w0: cshort): cint <cimport,nodecl> end
global function _mm_set_pi8(b7: cchar, b6: cchar, b5: cchar, b4: cchar, b3: cchar, b2: cchar, b1: cchar, b0: cchar): cint <cimport,nodecl> end
global function _mm_setr_pi32(i0: cint, i1: cint): cint <cimport,nodecl> end
global function _mm_setr_pi16(w0: cshort, w1: cshort, w2: cshort, w3: cshort): cint <cimport,nodecl> end
global function _mm_setr_pi8(b0: cchar, b1: cchar, b2: cchar, b3: cchar, b4: cchar, b5: cchar, b6: cchar, b7: cchar): cint <cimport,nodecl> end
global function _mm_set1_pi32(i: cint): cint <cimport,nodecl> end
global function _mm_set1_pi16(w: cshort): cint <cimport,nodecl> end
global function _mm_set1_pi8(b: cchar): cint <cimport,nodecl> end
global function posix_memalign(a1: *pointer, a2: csize, a3: csize): cint <cimport,nodecl> end
global function _mm_malloc(size: csize, alignment: csize): pointer <cimport,nodecl> end
global function _mm_free(ptr: pointer): void <cimport,nodecl> end
global function _mm_undefined_ps(): float32 <cimport,nodecl> end
global function _mm_setzero_ps(): float32 <cimport,nodecl> end
global function _mm_add_ss(A: float32, B: float32): float32 <cimport,nodecl> end
global function _mm_sub_ss(A: float32, B: float32): float32 <cimport,nodecl> end
global function _mm_mul_ss(A: float32, B: float32): float32 <cimport,nodecl> end
global function _mm_div_ss(A: float32, B: float32): float32 <cimport,nodecl> end
global function _mm_sqrt_ss(A: float32): float32 <cimport,nodecl> end
global function _mm_rcp_ss(A: float32): float32 <cimport,nodecl> end
global function _mm_rsqrt_ss(A: float32): float32 <cimport,nodecl> end
global function _mm_min_ss(A: float32, B: float32): float32 <cimport,nodecl> end
global function _mm_max_ss(A: float32, B: float32): float32 <cimport,nodecl> end
global function _mm_add_ps(A: float32, B: float32): float32 <cimport,nodecl> end
global function _mm_sub_ps(A: float32, B: float32): float32 <cimport,nodecl> end
global function _mm_mul_ps(A: float32, B: float32): float32 <cimport,nodecl> end
global function _mm_div_ps(A: float32, B: float32): float32 <cimport,nodecl> end
global function _mm_sqrt_ps(A: float32): float32 <cimport,nodecl> end
global function _mm_rcp_ps(A: float32): float32 <cimport,nodecl> end
global function _mm_rsqrt_ps(A: float32): float32 <cimport,nodecl> end
global function _mm_min_ps(A: float32, B: float32): float32 <cimport,nodecl> end
global function _mm_max_ps(A: float32, B: float32): float32 <cimport,nodecl> end
global function _mm_and_ps(A: float32, B: float32): float32 <cimport,nodecl> end
global function _mm_andnot_ps(A: float32, B: float32): float32 <cimport,nodecl> end
global function _mm_or_ps(A: float32, B: float32): float32 <cimport,nodecl> end
global function _mm_xor_ps(A: float32, B: float32): float32 <cimport,nodecl> end
global function _mm_cmpeq_ss(A: float32, B: float32): float32 <cimport,nodecl> end
global function _mm_cmplt_ss(A: float32, B: float32): float32 <cimport,nodecl> end
global function _mm_cmple_ss(A: float32, B: float32): float32 <cimport,nodecl> end
global function _mm_cmpgt_ss(A: float32, B: float32): float32 <cimport,nodecl> end
global function _mm_cmpge_ss(A: float32, B: float32): float32 <cimport,nodecl> end
global function _mm_cmpneq_ss(A: float32, B: float32): float32 <cimport,nodecl> end
global function _mm_cmpnlt_ss(A: float32, B: float32): float32 <cimport,nodecl> end
global function _mm_cmpnle_ss(A: float32, B: float32): float32 <cimport,nodecl> end
global function _mm_cmpngt_ss(A: float32, B: float32): float32 <cimport,nodecl> end
global function _mm_cmpnge_ss(A: float32, B: float32): float32 <cimport,nodecl> end
global function _mm_cmpord_ss(A: float32, B: float32): float32 <cimport,nodecl> end
global function _mm_cmpunord_ss(A: float32, B: float32): float32 <cimport,nodecl> end
global function _mm_cmpeq_ps(A: float32, B: float32): float32 <cimport,nodecl> end
global function _mm_cmplt_ps(A: float32, B: float32): float32 <cimport,nodecl> end
global function _mm_cmple_ps(A: float32, B: float32): float32 <cimport,nodecl> end
global function _mm_cmpgt_ps(A: float32, B: float32): float32 <cimport,nodecl> end
global function _mm_cmpge_ps(A: float32, B: float32): float32 <cimport,nodecl> end
global function _mm_cmpneq_ps(A: float32, B: float32): float32 <cimport,nodecl> end
global function _mm_cmpnlt_ps(A: float32, B: float32): float32 <cimport,nodecl> end
global function _mm_cmpnle_ps(A: float32, B: float32): float32 <cimport,nodecl> end
global function _mm_cmpngt_ps(A: float32, B: float32): float32 <cimport,nodecl> end
global function _mm_cmpnge_ps(A: float32, B: float32): float32 <cimport,nodecl> end
global function _mm_cmpord_ps(A: float32, B: float32): float32 <cimport,nodecl> end
global function _mm_cmpunord_ps(A: float32, B: float32): float32 <cimport,nodecl> end
global function _mm_comieq_ss(A: float32, B: float32): cint <cimport,nodecl> end
global function _mm_comilt_ss(A: float32, B: float32): cint <cimport,nodecl> end
global function _mm_comile_ss(A: float32, B: float32): cint <cimport,nodecl> end
global function _mm_comigt_ss(A: float32, B: float32): cint <cimport,nodecl> end
global function _mm_comige_ss(A: float32, B: float32): cint <cimport,nodecl> end
global function _mm_comineq_ss(A: float32, B: float32): cint <cimport,nodecl> end
global function _mm_ucomieq_ss(A: float32, B: float32): cint <cimport,nodecl> end
global function _mm_ucomilt_ss(A: float32, B: float32): cint <cimport,nodecl> end
global function _mm_ucomile_ss(A: float32, B: float32): cint <cimport,nodecl> end
global function _mm_ucomigt_ss(A: float32, B: float32): cint <cimport,nodecl> end
global function _mm_ucomige_ss(A: float32, B: float32): cint <cimport,nodecl> end
global function _mm_ucomineq_ss(A: float32, B: float32): cint <cimport,nodecl> end
global function _mm_cvtss_si32(A: float32): cint <cimport,nodecl> end
global function _mm_cvt_ss2si(A: float32): cint <cimport,nodecl> end
global function _mm_cvtss_si64(A: float32): clonglong <cimport,nodecl> end
global function _mm_cvtss_si64x(A: float32): clonglong <cimport,nodecl> end
global function _mm_cvtps_pi32(A: float32): cint <cimport,nodecl> end
global function _mm_cvt_ps2pi(A: float32): cint <cimport,nodecl> end
global function _mm_cvttss_si32(A: float32): cint <cimport,nodecl> end
global function _mm_cvtt_ss2si(A: float32): cint <cimport,nodecl> end
global function _mm_cvttss_si64(A: float32): clonglong <cimport,nodecl> end
global function _mm_cvttss_si64x(A: float32): clonglong <cimport,nodecl> end
global function _mm_cvttps_pi32(A: float32): cint <cimport,nodecl> end
global function _mm_cvtt_ps2pi(A: float32): cint <cimport,nodecl> end
global function _mm_cvtsi32_ss(A: float32, B: cint): float32 <cimport,nodecl> end
global function _mm_cvt_si2ss(A: float32, B: cint): float32 <cimport,nodecl> end
global function _mm_cvtsi64_ss(A: float32, B: clonglong): float32 <cimport,nodecl> end
global function _mm_cvtsi64x_ss(A: float32, B: clonglong): float32 <cimport,nodecl> end
global function _mm_cvtpi32_ps(A: float32, B: cint): float32 <cimport,nodecl> end
global function _mm_cvt_pi2ps(A: float32, B: cint): float32 <cimport,nodecl> end
global function _mm_cvtpi16_ps(A: cint): float32 <cimport,nodecl> end
global function _mm_cvtpu16_ps(A: cint): float32 <cimport,nodecl> end
global function _mm_cvtpi8_ps(A: cint): float32 <cimport,nodecl> end
global function _mm_cvtpu8_ps(A: cint): float32 <cimport,nodecl> end
global function _mm_cvtpi32x2_ps(A: cint, B: cint): float32 <cimport,nodecl> end
global function _mm_cvtps_pi16(A: float32): cint <cimport,nodecl> end
global function _mm_cvtps_pi8(A: float32): cint <cimport,nodecl> end
global function _mm_unpackhi_ps(A: float32, B: float32): float32 <cimport,nodecl> end
global function _mm_unpacklo_ps(A: float32, B: float32): float32 <cimport,nodecl> end
global function _mm_loadh_pi(A: float32, P: *cint): float32 <cimport,nodecl> end
global function _mm_storeh_pi(P: *cint, A: float32): void <cimport,nodecl> end
global function _mm_movehl_ps(A: float32, B: float32): float32 <cimport,nodecl> end
global function _mm_movelh_ps(A: float32, B: float32): float32 <cimport,nodecl> end
global function _mm_loadl_pi(A: float32, P: *cint): float32 <cimport,nodecl> end
global function _mm_storel_pi(P: *cint, A: float32): void <cimport,nodecl> end
global function _mm_movemask_ps(A: float32): cint <cimport,nodecl> end
global function _mm_getcsr(): cuint <cimport,nodecl> end
global function _MM_GET_EXCEPTION_STATE(): cuint <cimport,nodecl> end
global function _MM_GET_EXCEPTION_MASK(): cuint <cimport,nodecl> end
global function _MM_GET_ROUNDING_MODE(): cuint <cimport,nodecl> end
global function _MM_GET_FLUSH_ZERO_MODE(): cuint <cimport,nodecl> end
global function _mm_setcsr(I: cuint): void <cimport,nodecl> end
global function _MM_SET_EXCEPTION_STATE(mask: cuint): void <cimport,nodecl> end
global function _MM_SET_EXCEPTION_MASK(mask: cuint): void <cimport,nodecl> end
global function _MM_SET_ROUNDING_MODE(mode: cuint): void <cimport,nodecl> end
global function _MM_SET_FLUSH_ZERO_MODE(mode: cuint): void <cimport,nodecl> end
global function _mm_set_ss(F: float32): float32 <cimport,nodecl> end
global function _mm_set1_ps(F: float32): float32 <cimport,nodecl> end
global function _mm_set_ps1(F: float32): float32 <cimport,nodecl> end
global function _mm_load_ss(P: *float32): float32 <cimport,nodecl> end
global function _mm_load1_ps(P: *float32): float32 <cimport,nodecl> end
global function _mm_load_ps1(P: *float32): float32 <cimport,nodecl> end
global function _mm_load_ps(P: *float32): float32 <cimport,nodecl> end
global function _mm_loadu_ps(P: *float32): float32 <cimport,nodecl> end
global function _mm_loadr_ps(P: *float32): float32 <cimport,nodecl> end
global function _mm_set_ps(Z: float32, Y: float32, X: float32, W: float32): float32 <cimport,nodecl> end
global function _mm_setr_ps(Z: float32, Y: float32, X: float32, W: float32): float32 <cimport,nodecl> end
global function _mm_store_ss(P: *float32, A: float32): void <cimport,nodecl> end
global function _mm_cvtss_f32(A: float32): float32 <cimport,nodecl> end
global function _mm_store_ps(P: *float32, A: float32): void <cimport,nodecl> end
global function _mm_storeu_ps(P: *float32, A: float32): void <cimport,nodecl> end
global function _mm_store1_ps(P: *float32, A: float32): void <cimport,nodecl> end
global function _mm_store_ps1(P: *float32, A: float32): void <cimport,nodecl> end
global function _mm_storer_ps(P: *float32, A: float32): void <cimport,nodecl> end
global function _mm_move_ss(A: float32, B: float32): float32 <cimport,nodecl> end
global function _mm_max_pi16(A: cint, B: cint): cint <cimport,nodecl> end
global function _m_pmaxsw(A: cint, B: cint): cint <cimport,nodecl> end
global function _mm_max_pu8(A: cint, B: cint): cint <cimport,nodecl> end
global function _m_pmaxub(A: cint, B: cint): cint <cimport,nodecl> end
global function _mm_min_pi16(A: cint, B: cint): cint <cimport,nodecl> end
global function _m_pminsw(A: cint, B: cint): cint <cimport,nodecl> end
global function _mm_min_pu8(A: cint, B: cint): cint <cimport,nodecl> end
global function _m_pminub(A: cint, B: cint): cint <cimport,nodecl> end
global function _mm_movemask_pi8(A: cint): cint <cimport,nodecl> end
global function _m_pmovmskb(A: cint): cint <cimport,nodecl> end
global function _mm_mulhi_pu16(A: cint, B: cint): cint <cimport,nodecl> end
global function _m_pmulhuw(A: cint, B: cint): cint <cimport,nodecl> end
global function _mm_maskmove_si64(A: cint, N: cint, P: cstring): void <cimport,nodecl> end
global function _m_maskmovq(A: cint, N: cint, P: cstring): void <cimport,nodecl> end
global function _mm_avg_pu8(A: cint, B: cint): cint <cimport,nodecl> end
global function _m_pavgb(A: cint, B: cint): cint <cimport,nodecl> end
global function _mm_avg_pu16(A: cint, B: cint): cint <cimport,nodecl> end
global function _m_pavgw(A: cint, B: cint): cint <cimport,nodecl> end
global function _mm_sad_pu8(A: cint, B: cint): cint <cimport,nodecl> end
global function _m_psadbw(A: cint, B: cint): cint <cimport,nodecl> end
global function _mm_stream_pi(P: *cint, A: cint): void <cimport,nodecl> end
global function _mm_stream_ps(P: *float32, A: float32): void <cimport,nodecl> end
global function _mm_sfence(): void <cimport,nodecl> end
global function _mm_set_sd(F: float64): float64 <cimport,nodecl> end
global function _mm_set1_pd(F: float64): float64 <cimport,nodecl> end
global function _mm_set_pd1(F: float64): float64 <cimport,nodecl> end
global function _mm_set_pd(W: float64, X: float64): float64 <cimport,nodecl> end
global function _mm_setr_pd(W: float64, X: float64): float64 <cimport,nodecl> end
global function _mm_undefined_pd(): float64 <cimport,nodecl> end
global function _mm_setzero_pd(): float64 <cimport,nodecl> end
global function _mm_move_sd(A: float64, B: float64): float64 <cimport,nodecl> end
global function _mm_load_pd(P: *float64): float64 <cimport,nodecl> end
global function _mm_loadu_pd(P: *float64): float64 <cimport,nodecl> end
global function _mm_load1_pd(P: *float64): float64 <cimport,nodecl> end
global function _mm_load_sd(P: *float64): float64 <cimport,nodecl> end
global function _mm_load_pd1(P: *float64): float64 <cimport,nodecl> end
global function _mm_loadr_pd(P: *float64): float64 <cimport,nodecl> end
global function _mm_store_pd(P: *float64, A: float64): void <cimport,nodecl> end
global function _mm_storeu_pd(P: *float64, A: float64): void <cimport,nodecl> end
global function _mm_store_sd(P: *float64, A: float64): void <cimport,nodecl> end
global function _mm_cvtsd_f64(A: float64): float64 <cimport,nodecl> end
global function _mm_storel_pd(P: *float64, A: float64): void <cimport,nodecl> end
global function _mm_storeh_pd(P: *float64, A: float64): void <cimport,nodecl> end
global function _mm_store1_pd(P: *float64, A: float64): void <cimport,nodecl> end
global function _mm_store_pd1(P: *float64, A: float64): void <cimport,nodecl> end
global function _mm_storer_pd(P: *float64, A: float64): void <cimport,nodecl> end
global function _mm_cvtsi128_si32(A: clonglong): cint <cimport,nodecl> end
global function _mm_cvtsi128_si64(A: clonglong): clonglong <cimport,nodecl> end
global function _mm_cvtsi128_si64x(A: clonglong): clonglong <cimport,nodecl> end
global function _mm_add_pd(A: float64, B: float64): float64 <cimport,nodecl> end
global function _mm_add_sd(A: float64, B: float64): float64 <cimport,nodecl> end
global function _mm_sub_pd(A: float64, B: float64): float64 <cimport,nodecl> end
global function _mm_sub_sd(A: float64, B: float64): float64 <cimport,nodecl> end
global function _mm_mul_pd(A: float64, B: float64): float64 <cimport,nodecl> end
global function _mm_mul_sd(A: float64, B: float64): float64 <cimport,nodecl> end
global function _mm_div_pd(A: float64, B: float64): float64 <cimport,nodecl> end
global function _mm_div_sd(A: float64, B: float64): float64 <cimport,nodecl> end
global function _mm_sqrt_pd(A: float64): float64 <cimport,nodecl> end
global function _mm_sqrt_sd(A: float64, B: float64): float64 <cimport,nodecl> end
global function _mm_min_pd(A: float64, B: float64): float64 <cimport,nodecl> end
global function _mm_min_sd(A: float64, B: float64): float64 <cimport,nodecl> end
global function _mm_max_pd(A: float64, B: float64): float64 <cimport,nodecl> end
global function _mm_max_sd(A: float64, B: float64): float64 <cimport,nodecl> end
global function _mm_and_pd(A: float64, B: float64): float64 <cimport,nodecl> end
global function _mm_andnot_pd(A: float64, B: float64): float64 <cimport,nodecl> end
global function _mm_or_pd(A: float64, B: float64): float64 <cimport,nodecl> end
global function _mm_xor_pd(A: float64, B: float64): float64 <cimport,nodecl> end
global function _mm_cmpeq_pd(A: float64, B: float64): float64 <cimport,nodecl> end
global function _mm_cmplt_pd(A: float64, B: float64): float64 <cimport,nodecl> end
global function _mm_cmple_pd(A: float64, B: float64): float64 <cimport,nodecl> end
global function _mm_cmpgt_pd(A: float64, B: float64): float64 <cimport,nodecl> end
global function _mm_cmpge_pd(A: float64, B: float64): float64 <cimport,nodecl> end
global function _mm_cmpneq_pd(A: float64, B: float64): float64 <cimport,nodecl> end
global function _mm_cmpnlt_pd(A: float64, B: float64): float64 <cimport,nodecl> end
global function _mm_cmpnle_pd(A: float64, B: float64): float64 <cimport,nodecl> end
global function _mm_cmpngt_pd(A: float64, B: float64): float64 <cimport,nodecl> end
global function _mm_cmpnge_pd(A: float64, B: float64): float64 <cimport,nodecl> end
global function _mm_cmpord_pd(A: float64, B: float64): float64 <cimport,nodecl> end
global function _mm_cmpunord_pd(A: float64, B: float64): float64 <cimport,nodecl> end
global function _mm_cmpeq_sd(A: float64, B: float64): float64 <cimport,nodecl> end
global function _mm_cmplt_sd(A: float64, B: float64): float64 <cimport,nodecl> end
global function _mm_cmple_sd(A: float64, B: float64): float64 <cimport,nodecl> end
global function _mm_cmpgt_sd(A: float64, B: float64): float64 <cimport,nodecl> end
global function _mm_cmpge_sd(A: float64, B: float64): float64 <cimport,nodecl> end
global function _mm_cmpneq_sd(A: float64, B: float64): float64 <cimport,nodecl> end
global function _mm_cmpnlt_sd(A: float64, B: float64): float64 <cimport,nodecl> end
global function _mm_cmpnle_sd(A: float64, B: float64): float64 <cimport,nodecl> end
global function _mm_cmpngt_sd(A: float64, B: float64): float64 <cimport,nodecl> end
global function _mm_cmpnge_sd(A: float64, B: float64): float64 <cimport,nodecl> end
global function _mm_cmpord_sd(A: float64, B: float64): float64 <cimport,nodecl> end
global function _mm_cmpunord_sd(A: float64, B: float64): float64 <cimport,nodecl> end
global function _mm_comieq_sd(A: float64, B: float64): cint <cimport,nodecl> end
global function _mm_comilt_sd(A: float64, B: float64): cint <cimport,nodecl> end
global function _mm_comile_sd(A: float64, B: float64): cint <cimport,nodecl> end
global function _mm_comigt_sd(A: float64, B: float64): cint <cimport,nodecl> end
global function _mm_comige_sd(A: float64, B: float64): cint <cimport,nodecl> end
global function _mm_comineq_sd(A: float64, B: float64): cint <cimport,nodecl> end
global function _mm_ucomieq_sd(A: float64, B: float64): cint <cimport,nodecl> end
global function _mm_ucomilt_sd(A: float64, B: float64): cint <cimport,nodecl> end
global function _mm_ucomile_sd(A: float64, B: float64): cint <cimport,nodecl> end
global function _mm_ucomigt_sd(A: float64, B: float64): cint <cimport,nodecl> end
global function _mm_ucomige_sd(A: float64, B: float64): cint <cimport,nodecl> end
global function _mm_ucomineq_sd(A: float64, B: float64): cint <cimport,nodecl> end
global function _mm_set_epi64x(q1: clonglong, q0: clonglong): clonglong <cimport,nodecl> end
global function _mm_set_epi64(q1: cint, q0: cint): clonglong <cimport,nodecl> end
global function _mm_set_epi32(q3: cint, q2: cint, q1: cint, q0: cint): clonglong <cimport,nodecl> end
global function _mm_set_epi16(q7: cshort, q6: cshort, q5: cshort, q4: cshort, q3: cshort, q2: cshort, q1: cshort, q0: cshort): clonglong <cimport,nodecl> end
global function _mm_set_epi8(q15: cchar, q14: cchar, q13: cchar, q12: cchar, q11: cchar, q10: cchar, q09: cchar, q08: cchar, q07: cchar, q06: cchar, q05: cchar, q04: cchar, q03: cchar, q02: cchar, q01: cchar, q00: cchar): clonglong <cimport,nodecl> end
global function _mm_set1_epi64x(A: clonglong): clonglong <cimport,nodecl> end
global function _mm_set1_epi64(A: cint): clonglong <cimport,nodecl> end
global function _mm_set1_epi32(A: cint): clonglong <cimport,nodecl> end
global function _mm_set1_epi16(A: cshort): clonglong <cimport,nodecl> end
global function _mm_set1_epi8(A: cchar): clonglong <cimport,nodecl> end
global function _mm_setr_epi64(q0: cint, q1: cint): clonglong <cimport,nodecl> end
global function _mm_setr_epi32(q0: cint, q1: cint, q2: cint, q3: cint): clonglong <cimport,nodecl> end
global function _mm_setr_epi16(q0: cshort, q1: cshort, q2: cshort, q3: cshort, q4: cshort, q5: cshort, q6: cshort, q7: cshort): clonglong <cimport,nodecl> end
global function _mm_setr_epi8(q00: cchar, q01: cchar, q02: cchar, q03: cchar, q04: cchar, q05: cchar, q06: cchar, q07: cchar, q08: cchar, q09: cchar, q10: cchar, q11: cchar, q12: cchar, q13: cchar, q14: cchar, q15: cchar): clonglong <cimport,nodecl> end
global function _mm_load_si128(P: *clonglong): clonglong <cimport,nodecl> end
global function _mm_loadu_si128(P: *clonglong): clonglong <cimport,nodecl> end
global function _mm_loadl_epi64(P: *clonglong): clonglong <cimport,nodecl> end
global function _mm_loadu_si64(P: pointer): clonglong <cimport,nodecl> end
global function _mm_loadu_si32(P: pointer): clonglong <cimport,nodecl> end
global function _mm_loadu_si16(P: pointer): clonglong <cimport,nodecl> end
global function _mm_store_si128(P: *clonglong, B: clonglong): void <cimport,nodecl> end
global function _mm_storeu_si128(P: *clonglong, B: clonglong): void <cimport,nodecl> end
global function _mm_storel_epi64(P: *clonglong, B: clonglong): void <cimport,nodecl> end
global function _mm_storeu_si64(P: pointer, B: clonglong): void <cimport,nodecl> end
global function _mm_storeu_si32(P: pointer, B: clonglong): void <cimport,nodecl> end
global function _mm_storeu_si16(P: pointer, B: clonglong): void <cimport,nodecl> end
global function _mm_movepi64_pi64(B: clonglong): cint <cimport,nodecl> end
global function _mm_movpi64_epi64(A: cint): clonglong <cimport,nodecl> end
global function _mm_move_epi64(A: clonglong): clonglong <cimport,nodecl> end
global function _mm_undefined_si128(): clonglong <cimport,nodecl> end
global function _mm_setzero_si128(): clonglong <cimport,nodecl> end
global function _mm_cvtepi32_pd(A: clonglong): float64 <cimport,nodecl> end
global function _mm_cvtepi32_ps(A: clonglong): float32 <cimport,nodecl> end
global function _mm_cvtpd_epi32(A: float64): clonglong <cimport,nodecl> end
global function _mm_cvtpd_pi32(A: float64): cint <cimport,nodecl> end
global function _mm_cvtpd_ps(A: float64): float32 <cimport,nodecl> end
global function _mm_cvttpd_epi32(A: float64): clonglong <cimport,nodecl> end
global function _mm_cvttpd_pi32(A: float64): cint <cimport,nodecl> end
global function _mm_cvtpi32_pd(A: cint): float64 <cimport,nodecl> end
global function _mm_cvtps_epi32(A: float32): clonglong <cimport,nodecl> end
global function _mm_cvttps_epi32(A: float32): clonglong <cimport,nodecl> end
global function _mm_cvtps_pd(A: float32): float64 <cimport,nodecl> end
global function _mm_cvtsd_si32(A: float64): cint <cimport,nodecl> end
global function _mm_cvtsd_si64(A: float64): clonglong <cimport,nodecl> end
global function _mm_cvtsd_si64x(A: float64): clonglong <cimport,nodecl> end
global function _mm_cvttsd_si32(A: float64): cint <cimport,nodecl> end
global function _mm_cvttsd_si64(A: float64): clonglong <cimport,nodecl> end
global function _mm_cvttsd_si64x(A: float64): clonglong <cimport,nodecl> end
global function _mm_cvtsd_ss(A: float32, B: float64): float32 <cimport,nodecl> end
global function _mm_cvtsi32_sd(A: float64, B: cint): float64 <cimport,nodecl> end
global function _mm_cvtsi64_sd(A: float64, B: clonglong): float64 <cimport,nodecl> end
global function _mm_cvtsi64x_sd(A: float64, B: clonglong): float64 <cimport,nodecl> end
global function _mm_cvtss_sd(A: float64, B: float32): float64 <cimport,nodecl> end
global function _mm_unpackhi_pd(A: float64, B: float64): float64 <cimport,nodecl> end
global function _mm_unpacklo_pd(A: float64, B: float64): float64 <cimport,nodecl> end
global function _mm_loadh_pd(A: float64, B: *float64): float64 <cimport,nodecl> end
global function _mm_loadl_pd(A: float64, B: *float64): float64 <cimport,nodecl> end
global function _mm_movemask_pd(A: float64): cint <cimport,nodecl> end
global function _mm_packs_epi16(A: clonglong, B: clonglong): clonglong <cimport,nodecl> end
global function _mm_packs_epi32(A: clonglong, B: clonglong): clonglong <cimport,nodecl> end
global function _mm_packus_epi16(A: clonglong, B: clonglong): clonglong <cimport,nodecl> end
global function _mm_unpackhi_epi8(A: clonglong, B: clonglong): clonglong <cimport,nodecl> end
global function _mm_unpackhi_epi16(A: clonglong, B: clonglong): clonglong <cimport,nodecl> end
global function _mm_unpackhi_epi32(A: clonglong, B: clonglong): clonglong <cimport,nodecl> end
global function _mm_unpackhi_epi64(A: clonglong, B: clonglong): clonglong <cimport,nodecl> end
global function _mm_unpacklo_epi8(A: clonglong, B: clonglong): clonglong <cimport,nodecl> end
global function _mm_unpacklo_epi16(A: clonglong, B: clonglong): clonglong <cimport,nodecl> end
global function _mm_unpacklo_epi32(A: clonglong, B: clonglong): clonglong <cimport,nodecl> end
global function _mm_unpacklo_epi64(A: clonglong, B: clonglong): clonglong <cimport,nodecl> end
global function _mm_add_epi8(A: clonglong, B: clonglong): clonglong <cimport,nodecl> end
global function _mm_add_epi16(A: clonglong, B: clonglong): clonglong <cimport,nodecl> end
global function _mm_add_epi32(A: clonglong, B: clonglong): clonglong <cimport,nodecl> end
global function _mm_add_epi64(A: clonglong, B: clonglong): clonglong <cimport,nodecl> end
global function _mm_adds_epi8(A: clonglong, B: clonglong): clonglong <cimport,nodecl> end
global function _mm_adds_epi16(A: clonglong, B: clonglong): clonglong <cimport,nodecl> end
global function _mm_adds_epu8(A: clonglong, B: clonglong): clonglong <cimport,nodecl> end
global function _mm_adds_epu16(A: clonglong, B: clonglong): clonglong <cimport,nodecl> end
global function _mm_sub_epi8(A: clonglong, B: clonglong): clonglong <cimport,nodecl> end
global function _mm_sub_epi16(A: clonglong, B: clonglong): clonglong <cimport,nodecl> end
global function _mm_sub_epi32(A: clonglong, B: clonglong): clonglong <cimport,nodecl> end
global function _mm_sub_epi64(A: clonglong, B: clonglong): clonglong <cimport,nodecl> end
global function _mm_subs_epi8(A: clonglong, B: clonglong): clonglong <cimport,nodecl> end
global function _mm_subs_epi16(A: clonglong, B: clonglong): clonglong <cimport,nodecl> end
global function _mm_subs_epu8(A: clonglong, B: clonglong): clonglong <cimport,nodecl> end
global function _mm_subs_epu16(A: clonglong, B: clonglong): clonglong <cimport,nodecl> end
global function _mm_madd_epi16(A: clonglong, B: clonglong): clonglong <cimport,nodecl> end
global function _mm_mulhi_epi16(A: clonglong, B: clonglong): clonglong <cimport,nodecl> end
global function _mm_mullo_epi16(A: clonglong, B: clonglong): clonglong <cimport,nodecl> end
global function _mm_mul_su32(A: cint, B: cint): cint <cimport,nodecl> end
global function _mm_mul_epu32(A: clonglong, B: clonglong): clonglong <cimport,nodecl> end
global function _mm_slli_epi16(A: clonglong, B: cint): clonglong <cimport,nodecl> end
global function _mm_slli_epi32(A: clonglong, B: cint): clonglong <cimport,nodecl> end
global function _mm_slli_epi64(A: clonglong, B: cint): clonglong <cimport,nodecl> end
global function _mm_srai_epi16(A: clonglong, B: cint): clonglong <cimport,nodecl> end
global function _mm_srai_epi32(A: clonglong, B: cint): clonglong <cimport,nodecl> end
global function _mm_srli_epi16(A: clonglong, B: cint): clonglong <cimport,nodecl> end
global function _mm_srli_epi32(A: clonglong, B: cint): clonglong <cimport,nodecl> end
global function _mm_srli_epi64(A: clonglong, B: cint): clonglong <cimport,nodecl> end
global function _mm_sll_epi16(A: clonglong, B: clonglong): clonglong <cimport,nodecl> end
global function _mm_sll_epi32(A: clonglong, B: clonglong): clonglong <cimport,nodecl> end
global function _mm_sll_epi64(A: clonglong, B: clonglong): clonglong <cimport,nodecl> end
global function _mm_sra_epi16(A: clonglong, B: clonglong): clonglong <cimport,nodecl> end
global function _mm_sra_epi32(A: clonglong, B: clonglong): clonglong <cimport,nodecl> end
global function _mm_srl_epi16(A: clonglong, B: clonglong): clonglong <cimport,nodecl> end
global function _mm_srl_epi32(A: clonglong, B: clonglong): clonglong <cimport,nodecl> end
global function _mm_srl_epi64(A: clonglong, B: clonglong): clonglong <cimport,nodecl> end
global function _mm_and_si128(A: clonglong, B: clonglong): clonglong <cimport,nodecl> end
global function _mm_andnot_si128(A: clonglong, B: clonglong): clonglong <cimport,nodecl> end
global function _mm_or_si128(A: clonglong, B: clonglong): clonglong <cimport,nodecl> end
global function _mm_xor_si128(A: clonglong, B: clonglong): clonglong <cimport,nodecl> end
global function _mm_cmpeq_epi8(A: clonglong, B: clonglong): clonglong <cimport,nodecl> end
global function _mm_cmpeq_epi16(A: clonglong, B: clonglong): clonglong <cimport,nodecl> end
global function _mm_cmpeq_epi32(A: clonglong, B: clonglong): clonglong <cimport,nodecl> end
global function _mm_cmplt_epi8(A: clonglong, B: clonglong): clonglong <cimport,nodecl> end
global function _mm_cmplt_epi16(A: clonglong, B: clonglong): clonglong <cimport,nodecl> end
global function _mm_cmplt_epi32(A: clonglong, B: clonglong): clonglong <cimport,nodecl> end
global function _mm_cmpgt_epi8(A: clonglong, B: clonglong): clonglong <cimport,nodecl> end
global function _mm_cmpgt_epi16(A: clonglong, B: clonglong): clonglong <cimport,nodecl> end
global function _mm_cmpgt_epi32(A: clonglong, B: clonglong): clonglong <cimport,nodecl> end
global function _mm_max_epi16(A: clonglong, B: clonglong): clonglong <cimport,nodecl> end
global function _mm_max_epu8(A: clonglong, B: clonglong): clonglong <cimport,nodecl> end
global function _mm_min_epi16(A: clonglong, B: clonglong): clonglong <cimport,nodecl> end
global function _mm_min_epu8(A: clonglong, B: clonglong): clonglong <cimport,nodecl> end
global function _mm_movemask_epi8(A: clonglong): cint <cimport,nodecl> end
global function _mm_mulhi_epu16(A: clonglong, B: clonglong): clonglong <cimport,nodecl> end
global function _mm_maskmoveu_si128(A: clonglong, B: clonglong, C: cstring): void <cimport,nodecl> end
global function _mm_avg_epu8(A: clonglong, B: clonglong): clonglong <cimport,nodecl> end
global function _mm_avg_epu16(A: clonglong, B: clonglong): clonglong <cimport,nodecl> end
global function _mm_sad_epu8(A: clonglong, B: clonglong): clonglong <cimport,nodecl> end
global function _mm_stream_si32(A: *cint, B: cint): void <cimport,nodecl> end
global function _mm_stream_si64(A: *clonglong, B: clonglong): void <cimport,nodecl> end
global function _mm_stream_si128(A: *clonglong, B: clonglong): void <cimport,nodecl> end
global function _mm_stream_pd(A: *float64, B: float64): void <cimport,nodecl> end
global function _mm_clflush(A: pointer): void <cimport,nodecl> end
global function _mm_lfence(): void <cimport,nodecl> end
global function _mm_mfence(): void <cimport,nodecl> end
global function _mm_cvtsi32_si128(A: cint): clonglong <cimport,nodecl> end
global function _mm_cvtsi64_si128(A: clonglong): clonglong <cimport,nodecl> end
global function _mm_cvtsi64x_si128(A: clonglong): clonglong <cimport,nodecl> end
global function _mm_castpd_ps(A: float64): float32 <cimport,nodecl> end
global function _mm_castpd_si128(A: float64): clonglong <cimport,nodecl> end
global function _mm_castps_pd(A: float32): float64 <cimport,nodecl> end
global function _mm_castps_si128(A: float32): clonglong <cimport,nodecl> end
global function _mm_castsi128_ps(A: clonglong): float32 <cimport,nodecl> end
global function _mm_castsi128_pd(A: clonglong): float64 <cimport,nodecl> end
global function _mm_pause(): void <cimport,nodecl> end
global function acos(x: float64): float64 <cimport,nodecl> end
global function asin(x: float64): float64 <cimport,nodecl> end
global function atan(x: float64): float64 <cimport,nodecl> end
global function atan2(y: float64, x: float64): float64 <cimport,nodecl> end
global function cos(x: float64): float64 <cimport,nodecl> end
global function sin(x: float64): float64 <cimport,nodecl> end
global function tan(x: float64): float64 <cimport,nodecl> end
global function cosh(x: float64): float64 <cimport,nodecl> end
global function sinh(x: float64): float64 <cimport,nodecl> end
global function tanh(x: float64): float64 <cimport,nodecl> end
global function acosh(x: float64): float64 <cimport,nodecl> end
global function asinh(x: float64): float64 <cimport,nodecl> end
global function atanh(x: float64): float64 <cimport,nodecl> end
global function exp(x: float64): float64 <cimport,nodecl> end
global function frexp(x: float64, exponent: *cint): float64 <cimport,nodecl> end
global function ldexp(x: float64, exponent: cint): float64 <cimport,nodecl> end
global function log(x: float64): float64 <cimport,nodecl> end
global function log10(x: float64): float64 <cimport,nodecl> end
global function modf(x: float64, iptr: *float64): float64 <cimport,nodecl> end
global function expm1(x: float64): float64 <cimport,nodecl> end
global function log1p(x: float64): float64 <cimport,nodecl> end
global function logb(x: float64): float64 <cimport,nodecl> end
global function exp2(x: float64): float64 <cimport,nodecl> end
global function log2(x: float64): float64 <cimport,nodecl> end
global function pow(x: float64, y: float64): float64 <cimport,nodecl> end
global function sqrt(x: float64): float64 <cimport,nodecl> end
global function hypot(x: float64, y: float64): float64 <cimport,nodecl> end
global function cbrt(x: float64): float64 <cimport,nodecl> end
global function ceil(x: float64): float64 <cimport,nodecl> end
global function fabs(x: float64): float64 <cimport,nodecl> end
global function floor(x: float64): float64 <cimport,nodecl> end
global function fmod(x: float64, y: float64): float64 <cimport,nodecl> end
global function isinf(value: float64): cint <cimport,nodecl> end
global function finite(value: float64): cint <cimport,nodecl> end
global function drem(x: float64, y: float64): float64 <cimport,nodecl> end
global function significand(x: float64): float64 <cimport,nodecl> end
global function copysign(x: float64, y: float64): float64 <cimport,nodecl> end
global function nan(tagb: cstring): float64 <cimport,nodecl> end
global function isnan(value: float64): cint <cimport,nodecl> end
global function j0(a1: float64): float64 <cimport,nodecl> end
global function j1(a1: float64): float64 <cimport,nodecl> end
global function jn(a1: cint, a2: float64): float64 <cimport,nodecl> end
global function y0(a1: float64): float64 <cimport,nodecl> end
global function y1(a1: float64): float64 <cimport,nodecl> end
global function yn(a1: cint, a2: float64): float64 <cimport,nodecl> end
global function erf(a1: float64): float64 <cimport,nodecl> end
global function erfc(a1: float64): float64 <cimport,nodecl> end
global function lgamma(a1: float64): float64 <cimport,nodecl> end
global function tgamma(a1: float64): float64 <cimport,nodecl> end
global function gamma(a1: float64): float64 <cimport,nodecl> end
global function lgamma_r(a1: float64, signgamp: *cint): float64 <cimport,nodecl> end
global function rint(x: float64): float64 <cimport,nodecl> end
global function nextafter(x: float64, y: float64): float64 <cimport,nodecl> end
global function nexttoward(x: float64, y: clongdouble): float64 <cimport,nodecl> end
global function remainder(x: float64, y: float64): float64 <cimport,nodecl> end
global function scalbn(x: float64, n: cint): float64 <cimport,nodecl> end
global function ilogb(x: float64): cint <cimport,nodecl> end
global function scalbln(x: float64, n: clong): float64 <cimport,nodecl> end
global function nearbyint(x: float64): float64 <cimport,nodecl> end
global function round(x: float64): float64 <cimport,nodecl> end
global function trunc(x: float64): float64 <cimport,nodecl> end
global function remquo(x: float64, y: float64, quo: *cint): float64 <cimport,nodecl> end
global function lrint(x: float64): clong <cimport,nodecl> end
global function llrint(x: float64): clonglong <cimport,nodecl> end
global function lround(x: float64): clong <cimport,nodecl> end
global function llround(x: float64): clonglong <cimport,nodecl> end
global function fdim(x: float64, y: float64): float64 <cimport,nodecl> end
global function fmax(x: float64, y: float64): float64 <cimport,nodecl> end
global function fmin(x: float64, y: float64): float64 <cimport,nodecl> end
global function fma(x: float64, y: float64, z: float64): float64 <cimport,nodecl> end
global function scalb(x: float64, n: float64): float64 <cimport,nodecl> end
global function acosf(x: float32): float32 <cimport,nodecl> end
global function asinf(x: float32): float32 <cimport,nodecl> end
global function atanf(x: float32): float32 <cimport,nodecl> end
global function atan2f(y: float32, x: float32): float32 <cimport,nodecl> end
global function cosf(x: float32): float32 <cimport,nodecl> end
global function sinf(x: float32): float32 <cimport,nodecl> end
global function tanf(x: float32): float32 <cimport,nodecl> end
global function coshf(x: float32): float32 <cimport,nodecl> end
global function sinhf(x: float32): float32 <cimport,nodecl> end
global function tanhf(x: float32): float32 <cimport,nodecl> end
global function acoshf(x: float32): float32 <cimport,nodecl> end
global function asinhf(x: float32): float32 <cimport,nodecl> end
global function atanhf(x: float32): float32 <cimport,nodecl> end
global function expf(x: float32): float32 <cimport,nodecl> end
global function frexpf(x: float32, exponent: *cint): float32 <cimport,nodecl> end
global function ldexpf(x: float32, exponent: cint): float32 <cimport,nodecl> end
global function logf(x: float32): float32 <cimport,nodecl> end
global function log10f(x: float32): float32 <cimport,nodecl> end
global function modff(x: float32, iptr: *float32): float32 <cimport,nodecl> end
global function expm1f(x: float32): float32 <cimport,nodecl> end
global function log1pf(x: float32): float32 <cimport,nodecl> end
global function logbf(x: float32): float32 <cimport,nodecl> end
global function exp2f(x: float32): float32 <cimport,nodecl> end
global function log2f(x: float32): float32 <cimport,nodecl> end
global function powf(x: float32, y: float32): float32 <cimport,nodecl> end
global function sqrtf(x: float32): float32 <cimport,nodecl> end
global function hypotf(x: float32, y: float32): float32 <cimport,nodecl> end
global function cbrtf(x: float32): float32 <cimport,nodecl> end
global function ceilf(x: float32): float32 <cimport,nodecl> end
global function fabsf(x: float32): float32 <cimport,nodecl> end
global function floorf(x: float32): float32 <cimport,nodecl> end
global function fmodf(x: float32, y: float32): float32 <cimport,nodecl> end
global function isinff(value: float32): cint <cimport,nodecl> end
global function finitef(value: float32): cint <cimport,nodecl> end
global function dremf(x: float32, y: float32): float32 <cimport,nodecl> end
global function significandf(x: float32): float32 <cimport,nodecl> end
global function copysignf(x: float32, y: float32): float32 <cimport,nodecl> end
global function nanf(tagb: cstring): float32 <cimport,nodecl> end
global function isnanf(value: float32): cint <cimport,nodecl> end
global function j0f(a1: float32): float32 <cimport,nodecl> end
global function j1f(a1: float32): float32 <cimport,nodecl> end
global function jnf(a1: cint, a2: float32): float32 <cimport,nodecl> end
global function y0f(a1: float32): float32 <cimport,nodecl> end
global function y1f(a1: float32): float32 <cimport,nodecl> end
global function ynf(a1: cint, a2: float32): float32 <cimport,nodecl> end
global function erff(a1: float32): float32 <cimport,nodecl> end
global function erfcf(a1: float32): float32 <cimport,nodecl> end
global function lgammaf(a1: float32): float32 <cimport,nodecl> end
global function tgammaf(a1: float32): float32 <cimport,nodecl> end
global function gammaf(a1: float32): float32 <cimport,nodecl> end
global function lgammaf_r(a1: float32, signgamp: *cint): float32 <cimport,nodecl> end
global function rintf(x: float32): float32 <cimport,nodecl> end
global function nextafterf(x: float32, y: float32): float32 <cimport,nodecl> end
global function nexttowardf(x: float32, y: clongdouble): float32 <cimport,nodecl> end
global function remainderf(x: float32, y: float32): float32 <cimport,nodecl> end
global function scalbnf(x: float32, n: cint): float32 <cimport,nodecl> end
global function ilogbf(x: float32): cint <cimport,nodecl> end
global function scalblnf(x: float32, n: clong): float32 <cimport,nodecl> end
global function nearbyintf(x: float32): float32 <cimport,nodecl> end
global function roundf(x: float32): float32 <cimport,nodecl> end
global function truncf(x: float32): float32 <cimport,nodecl> end
global function remquof(x: float32, y: float32, quo: *cint): float32 <cimport,nodecl> end
global function lrintf(x: float32): clong <cimport,nodecl> end
global function llrintf(x: float32): clonglong <cimport,nodecl> end
global function lroundf(x: float32): clong <cimport,nodecl> end
global function llroundf(x: float32): clonglong <cimport,nodecl> end
global function fdimf(x: float32, y: float32): float32 <cimport,nodecl> end
global function fmaxf(x: float32, y: float32): float32 <cimport,nodecl> end
global function fminf(x: float32, y: float32): float32 <cimport,nodecl> end
global function fmaf(x: float32, y: float32, z: float32): float32 <cimport,nodecl> end
global function scalbf(x: float32, n: float32): float32 <cimport,nodecl> end
global function acosl(x: clongdouble): clongdouble <cimport,nodecl> end
global function asinl(x: clongdouble): clongdouble <cimport,nodecl> end
global function atanl(x: clongdouble): clongdouble <cimport,nodecl> end
global function atan2l(y: clongdouble, x: clongdouble): clongdouble <cimport,nodecl> end
global function cosl(x: clongdouble): clongdouble <cimport,nodecl> end
global function sinl(x: clongdouble): clongdouble <cimport,nodecl> end
global function tanl(x: clongdouble): clongdouble <cimport,nodecl> end
global function coshl(x: clongdouble): clongdouble <cimport,nodecl> end
global function sinhl(x: clongdouble): clongdouble <cimport,nodecl> end
global function tanhl(x: clongdouble): clongdouble <cimport,nodecl> end
global function acoshl(x: clongdouble): clongdouble <cimport,nodecl> end
global function asinhl(x: clongdouble): clongdouble <cimport,nodecl> end
global function atanhl(x: clongdouble): clongdouble <cimport,nodecl> end
global function expl(x: clongdouble): clongdouble <cimport,nodecl> end
global function frexpl(x: clongdouble, exponent: *cint): clongdouble <cimport,nodecl> end
global function ldexpl(x: clongdouble, exponent: cint): clongdouble <cimport,nodecl> end
global function logl(x: clongdouble): clongdouble <cimport,nodecl> end
global function log10l(x: clongdouble): clongdouble <cimport,nodecl> end
global function modfl(x: clongdouble, iptr: *clongdouble): clongdouble <cimport,nodecl> end
global function expm1l(x: clongdouble): clongdouble <cimport,nodecl> end
global function log1pl(x: clongdouble): clongdouble <cimport,nodecl> end
global function logbl(x: clongdouble): clongdouble <cimport,nodecl> end
global function exp2l(x: clongdouble): clongdouble <cimport,nodecl> end
global function log2l(x: clongdouble): clongdouble <cimport,nodecl> end
global function powl(x: clongdouble, y: clongdouble): clongdouble <cimport,nodecl> end
global function sqrtl(x: clongdouble): clongdouble <cimport,nodecl> end
global function hypotl(x: clongdouble, y: clongdouble): clongdouble <cimport,nodecl> end
global function cbrtl(x: clongdouble): clongdouble <cimport,nodecl> end
global function ceill(x: clongdouble): clongdouble <cimport,nodecl> end
global function fabsl(x: clongdouble): clongdouble <cimport,nodecl> end
global function floorl(x: clongdouble): clongdouble <cimport,nodecl> end
global function fmodl(x: clongdouble, y: clongdouble): clongdouble <cimport,nodecl> end
global function isinfl(value: clongdouble): cint <cimport,nodecl> end
global function finitel(value: clongdouble): cint <cimport,nodecl> end
global function dreml(x: clongdouble, y: clongdouble): clongdouble <cimport,nodecl> end
global function significandl(x: clongdouble): clongdouble <cimport,nodecl> end
global function copysignl(x: clongdouble, y: clongdouble): clongdouble <cimport,nodecl> end
global function nanl(tagb: cstring): clongdouble <cimport,nodecl> end
global function isnanl(value: clongdouble): cint <cimport,nodecl> end
global function j0l(a1: clongdouble): clongdouble <cimport,nodecl> end
global function j1l(a1: clongdouble): clongdouble <cimport,nodecl> end
global function jnl(a1: cint, a2: clongdouble): clongdouble <cimport,nodecl> end
global function y0l(a1: clongdouble): clongdouble <cimport,nodecl> end
global function y1l(a1: clongdouble): clongdouble <cimport,nodecl> end
global function ynl(a1: cint, a2: clongdouble): clongdouble <cimport,nodecl> end
global function erfl(a1: clongdouble): clongdouble <cimport,nodecl> end
global function erfcl(a1: clongdouble): clongdouble <cimport,nodecl> end
global function lgammal(a1: clongdouble): clongdouble <cimport,nodecl> end
global function tgammal(a1: clongdouble): clongdouble <cimport,nodecl> end
global function gammal(a1: clongdouble): clongdouble <cimport,nodecl> end
global function lgammal_r(a1: clongdouble, signgamp: *cint): clongdouble <cimport,nodecl> end
global function rintl(x: clongdouble): clongdouble <cimport,nodecl> end
global function nextafterl(x: clongdouble, y: clongdouble): clongdouble <cimport,nodecl> end
global function nexttowardl(x: clongdouble, y: clongdouble): clongdouble <cimport,nodecl> end
global function remainderl(x: clongdouble, y: clongdouble): clongdouble <cimport,nodecl> end
global function scalbnl(x: clongdouble, n: cint): clongdouble <cimport,nodecl> end
global function ilogbl(x: clongdouble): cint <cimport,nodecl> end
global function scalblnl(x: clongdouble, n: clong): clongdouble <cimport,nodecl> end
global function nearbyintl(x: clongdouble): clongdouble <cimport,nodecl> end
global function roundl(x: clongdouble): clongdouble <cimport,nodecl> end
global function truncl(x: clongdouble): clongdouble <cimport,nodecl> end
global function remquol(x: clongdouble, y: clongdouble, quo: *cint): clongdouble <cimport,nodecl> end
global function lrintl(x: clongdouble): clong <cimport,nodecl> end
global function llrintl(x: clongdouble): clonglong <cimport,nodecl> end
global function lroundl(x: clongdouble): clong <cimport,nodecl> end
global function llroundl(x: clongdouble): clonglong <cimport,nodecl> end
global function fdiml(x: clongdouble, y: clongdouble): clongdouble <cimport,nodecl> end
global function fmaxl(x: clongdouble, y: clongdouble): clongdouble <cimport,nodecl> end
global function fminl(x: clongdouble, y: clongdouble): clongdouble <cimport,nodecl> end
global function fmal(x: clongdouble, y: clongdouble, z: clongdouble): clongdouble <cimport,nodecl> end
global function scalbl(x: clongdouble, n: clongdouble): clongdouble <cimport,nodecl> end
global signgam: cint <cimport,nodecl>
global function graphene_simd4f_init(x: float32, y: float32, z: float32, w: float32): graphene_simd4f_t <cimport,nodecl> end
global function graphene_simd4f_init_zero(): graphene_simd4f_t <cimport,nodecl> end
global function graphene_simd4f_init_4f(v: *float32): graphene_simd4f_t <cimport,nodecl> end
global function graphene_simd4f_init_3f(v: *float32): graphene_simd4f_t <cimport,nodecl> end
global function graphene_simd4f_init_2f(v: *float32): graphene_simd4f_t <cimport,nodecl> end
global function graphene_simd4f_dup_4f(s: graphene_simd4f_t, v: *float32): void <cimport,nodecl> end
global function graphene_simd4f_dup_3f(s: graphene_simd4f_t, v: *float32): void <cimport,nodecl> end
global function graphene_simd4f_dup_2f(s: graphene_simd4f_t, v: *float32): void <cimport,nodecl> end
global function graphene_simd4f_get(s: graphene_simd4f_t, i: cuint): float32 <cimport,nodecl> end
global function graphene_simd4f_get_x(s: graphene_simd4f_t): float32 <cimport,nodecl> end
global function graphene_simd4f_get_y(s: graphene_simd4f_t): float32 <cimport,nodecl> end
global function graphene_simd4f_get_z(s: graphene_simd4f_t): float32 <cimport,nodecl> end
global function graphene_simd4f_get_w(s: graphene_simd4f_t): float32 <cimport,nodecl> end
global function graphene_simd4f_splat(v: float32): graphene_simd4f_t <cimport,nodecl> end
global function graphene_simd4f_splat_x(s: graphene_simd4f_t): graphene_simd4f_t <cimport,nodecl> end
global function graphene_simd4f_splat_y(s: graphene_simd4f_t): graphene_simd4f_t <cimport,nodecl> end
global function graphene_simd4f_splat_z(s: graphene_simd4f_t): graphene_simd4f_t <cimport,nodecl> end
global function graphene_simd4f_splat_w(s: graphene_simd4f_t): graphene_simd4f_t <cimport,nodecl> end
global function graphene_simd4f_add(a: graphene_simd4f_t, b: graphene_simd4f_t): graphene_simd4f_t <cimport,nodecl> end
global function graphene_simd4f_sub(a: graphene_simd4f_t, b: graphene_simd4f_t): graphene_simd4f_t <cimport,nodecl> end
global function graphene_simd4f_mul(a: graphene_simd4f_t, b: graphene_simd4f_t): graphene_simd4f_t <cimport,nodecl> end
global function graphene_simd4f_div(a: graphene_simd4f_t, b: graphene_simd4f_t): graphene_simd4f_t <cimport,nodecl> end
global function graphene_simd4f_sqrt(s: graphene_simd4f_t): graphene_simd4f_t <cimport,nodecl> end
global function graphene_simd4f_reciprocal(s: graphene_simd4f_t): graphene_simd4f_t <cimport,nodecl> end
global function graphene_simd4f_rsqrt(s: graphene_simd4f_t): graphene_simd4f_t <cimport,nodecl> end
global function graphene_simd4f_cross3(a: graphene_simd4f_t, b: graphene_simd4f_t): graphene_simd4f_t <cimport,nodecl> end
global function graphene_simd4f_dot3(a: graphene_simd4f_t, b: graphene_simd4f_t): graphene_simd4f_t <cimport,nodecl> end
global function graphene_simd4f_dot3_scalar(a: graphene_simd4f_t, b: graphene_simd4f_t): float32 <cimport,nodecl> end
global function graphene_simd4f_min(a: graphene_simd4f_t, b: graphene_simd4f_t): graphene_simd4f_t <cimport,nodecl> end
global function graphene_simd4f_max(a: graphene_simd4f_t, b: graphene_simd4f_t): graphene_simd4f_t <cimport,nodecl> end
global function graphene_simd4f_shuffle_wxyz(s: graphene_simd4f_t): graphene_simd4f_t <cimport,nodecl> end
global function graphene_simd4f_shuffle_zwxy(s: graphene_simd4f_t): graphene_simd4f_t <cimport,nodecl> end
global function graphene_simd4f_shuffle_yzwx(s: graphene_simd4f_t): graphene_simd4f_t <cimport,nodecl> end
global function graphene_simd4f_zero_w(s: graphene_simd4f_t): graphene_simd4f_t <cimport,nodecl> end
global function graphene_simd4f_zero_zw(s: graphene_simd4f_t): graphene_simd4f_t <cimport,nodecl> end
global function graphene_simd4f_merge_high(a: graphene_simd4f_t, b: graphene_simd4f_t): graphene_simd4f_t <cimport,nodecl> end
global function graphene_simd4f_merge_low(a: graphene_simd4f_t, b: graphene_simd4f_t): graphene_simd4f_t <cimport,nodecl> end
global function graphene_simd4f_merge_w(s: graphene_simd4f_t, v: float32): graphene_simd4f_t <cimport,nodecl> end
global function graphene_simd4f_flip_sign_0101(s: graphene_simd4f_t): graphene_simd4f_t <cimport,nodecl> end
global function graphene_simd4f_flip_sign_1010(s: graphene_simd4f_t): graphene_simd4f_t <cimport,nodecl> end
global function graphene_simd4f_cmp_eq(a: graphene_simd4f_t, b: graphene_simd4f_t): boolean <cimport,nodecl> end
global function graphene_simd4f_cmp_neq(a: graphene_simd4f_t, b: graphene_simd4f_t): boolean <cimport,nodecl> end
global function graphene_simd4f_cmp_lt(a: graphene_simd4f_t, b: graphene_simd4f_t): boolean <cimport,nodecl> end
global function graphene_simd4f_cmp_le(a: graphene_simd4f_t, b: graphene_simd4f_t): boolean <cimport,nodecl> end
global function graphene_simd4f_cmp_ge(a: graphene_simd4f_t, b: graphene_simd4f_t): boolean <cimport,nodecl> end
global function graphene_simd4f_cmp_gt(a: graphene_simd4f_t, b: graphene_simd4f_t): boolean <cimport,nodecl> end
global function graphene_simd4f_neg(s: graphene_simd4f_t): graphene_simd4f_t <cimport,nodecl> end
global function graphene_simd4f_madd(m1: graphene_simd4f_t, m2: graphene_simd4f_t, a: graphene_simd4f_t): graphene_simd4f_t <cimport,nodecl> end
global function graphene_simd4f_sum(v: graphene_simd4f_t): graphene_simd4f_t <cimport,nodecl> end
global function graphene_simd4f_sum_scalar(v: graphene_simd4f_t): float32 <cimport,nodecl> end
global function graphene_simd4f_dot4(a: graphene_simd4f_t, b: graphene_simd4f_t): graphene_simd4f_t <cimport,nodecl> end
global function graphene_simd4f_dot2(a: graphene_simd4f_t, b: graphene_simd4f_t): graphene_simd4f_t <cimport,nodecl> end
global function graphene_simd4f_length4(v: graphene_simd4f_t): graphene_simd4f_t <cimport,nodecl> end
global function graphene_simd4f_length3(v: graphene_simd4f_t): graphene_simd4f_t <cimport,nodecl> end
global function graphene_simd4f_length2(v: graphene_simd4f_t): graphene_simd4f_t <cimport,nodecl> end
global function graphene_simd4f_normalize4(v: graphene_simd4f_t): graphene_simd4f_t <cimport,nodecl> end
global function graphene_simd4f_normalize3(v: graphene_simd4f_t): graphene_simd4f_t <cimport,nodecl> end
global function graphene_simd4f_normalize2(v: graphene_simd4f_t): graphene_simd4f_t <cimport,nodecl> end
global function graphene_simd4f_is_zero4(v: graphene_simd4f_t): boolean <cimport,nodecl> end
global function graphene_simd4f_is_zero3(v: graphene_simd4f_t): boolean <cimport,nodecl> end
global function graphene_simd4f_is_zero2(v: graphene_simd4f_t): boolean <cimport,nodecl> end
global function graphene_simd4f_interpolate(a: graphene_simd4f_t, b: graphene_simd4f_t, f: float32): graphene_simd4f_t <cimport,nodecl> end
global function graphene_simd4f_clamp(v: graphene_simd4f_t, min: graphene_simd4f_t, max: graphene_simd4f_t): graphene_simd4f_t <cimport,nodecl> end
global function graphene_simd4f_clamp_scalar(v: graphene_simd4f_t, min: float32, max: float32): graphene_simd4f_t <cimport,nodecl> end
global function graphene_simd4f_min_val(v: graphene_simd4f_t): graphene_simd4f_t <cimport,nodecl> end
global function graphene_simd4f_max_val(v: graphene_simd4f_t): graphene_simd4f_t <cimport,nodecl> end
global function graphene_simd4x4f_init(x: graphene_simd4f_t, y: graphene_simd4f_t, z: graphene_simd4f_t, w: graphene_simd4f_t): graphene_simd4x4f_t <cimport,nodecl> end
global function graphene_simd4x4f_init_identity(m: *graphene_simd4x4f_t): void <cimport,nodecl> end
global function graphene_simd4x4f_init_from_float(m: *graphene_simd4x4f_t, f: *float32): void <cimport,nodecl> end
global function graphene_simd4x4f_to_float(m: *graphene_simd4x4f_t, v: *float32): void <cimport,nodecl> end
global function graphene_simd4x4f_transpose_in_place(s: *graphene_simd4x4f_t): void <cimport,nodecl> end
global function graphene_simd4x4f_sum(a: *graphene_simd4x4f_t, res: *graphene_simd4f_t): void <cimport,nodecl> end
global function graphene_simd4x4f_vec4_mul(a: *graphene_simd4x4f_t, b: *graphene_simd4f_t, res: *graphene_simd4f_t): void <cimport,nodecl> end
global function graphene_simd4x4f_vec3_mul(m: *graphene_simd4x4f_t, v: *graphene_simd4f_t, res: *graphene_simd4f_t): void <cimport,nodecl> end
global function graphene_simd4x4f_point3_mul(m: *graphene_simd4x4f_t, p: *graphene_simd4f_t, res: *graphene_simd4f_t): void <cimport,nodecl> end
global function graphene_simd4x4f_transpose(s: *graphene_simd4x4f_t, res: *graphene_simd4x4f_t): void <cimport,nodecl> end
global function graphene_simd4x4f_inv_ortho_vec3_mul(a: *graphene_simd4x4f_t, b: *graphene_simd4f_t, res: *graphene_simd4f_t): void <cimport,nodecl> end
global function graphene_simd4x4f_inv_ortho_point3_mul(a: *graphene_simd4x4f_t, b: *graphene_simd4f_t, res: *graphene_simd4f_t): void <cimport,nodecl> end
global function graphene_simd4x4f_matrix_mul(a: *graphene_simd4x4f_t, b: *graphene_simd4x4f_t, res: *graphene_simd4x4f_t): void <cimport,nodecl> end
global function graphene_simd4x4f_init_perspective(m: *graphene_simd4x4f_t, fovy_rad: float32, aspect: float32, z_near: float32, z_far: float32): void <cimport,nodecl> end
global function graphene_simd4x4f_init_ortho(m: *graphene_simd4x4f_t, left: float32, right: float32, bottom: float32, top: float32, z_near: float32, z_far: float32): void <cimport,nodecl> end
global function graphene_simd4x4f_init_look_at(m: *graphene_simd4x4f_t, eye: graphene_simd4f_t, center: graphene_simd4f_t, up: graphene_simd4f_t): void <cimport,nodecl> end
global function graphene_simd4x4f_init_frustum(m: *graphene_simd4x4f_t, left: float32, right: float32, bottom: float32, top: float32, z_near: float32, z_far: float32): void <cimport,nodecl> end
global function graphene_simd4x4f_perspective(m: *graphene_simd4x4f_t, depth: float32): void <cimport,nodecl> end
global function graphene_simd4x4f_translation(m: *graphene_simd4x4f_t, x: float32, y: float32, z: float32): void <cimport,nodecl> end
global function graphene_simd4x4f_scale(m: *graphene_simd4x4f_t, x: float32, y: float32, z: float32): void <cimport,nodecl> end
global function graphene_simd4x4f_rotation(m: *graphene_simd4x4f_t, rad: float32, axis: graphene_simd4f_t): void <cimport,nodecl> end
global function graphene_simd4x4f_add(a: *graphene_simd4x4f_t, b: *graphene_simd4x4f_t, res: *graphene_simd4x4f_t): void <cimport,nodecl> end
global function graphene_simd4x4f_sub(a: *graphene_simd4x4f_t, b: *graphene_simd4x4f_t, res: *graphene_simd4x4f_t): void <cimport,nodecl> end
global function graphene_simd4x4f_mul(a: *graphene_simd4x4f_t, b: *graphene_simd4x4f_t, res: *graphene_simd4x4f_t): void <cimport,nodecl> end
global function graphene_simd4x4f_div(a: *graphene_simd4x4f_t, b: *graphene_simd4x4f_t, res: *graphene_simd4x4f_t): void <cimport,nodecl> end
global function graphene_simd4x4f_inverse(m: *graphene_simd4x4f_t, res: *graphene_simd4x4f_t): boolean <cimport,nodecl> end
global function graphene_simd4x4f_determinant(m: *graphene_simd4x4f_t, det_r: *graphene_simd4f_t, invdet_r: *graphene_simd4f_t): void <cimport,nodecl> end
global function graphene_simd4x4f_is_identity(m: *graphene_simd4x4f_t): boolean <cimport,nodecl> end
global function graphene_simd4x4f_is_2d(m: *graphene_simd4x4f_t): boolean <cimport,nodecl> end
global function graphene_vec2_alloc(): *graphene_vec2_t <cimport,nodecl> end
global function graphene_vec2_free(v: *graphene_vec2_t): void <cimport,nodecl> end
global function graphene_vec2_init(v: *graphene_vec2_t, x: float32, y: float32): *graphene_vec2_t <cimport,nodecl> end
global function graphene_vec2_init_from_vec2(v: *graphene_vec2_t, src: *graphene_vec2_t): *graphene_vec2_t <cimport,nodecl> end
global function graphene_vec2_init_from_float(v: *graphene_vec2_t, src: *float32): *graphene_vec2_t <cimport,nodecl> end
global function graphene_vec2_to_float(v: *graphene_vec2_t, dest: *float32): void <cimport,nodecl> end
global function graphene_vec2_add(a: *graphene_vec2_t, b: *graphene_vec2_t, res: *graphene_vec2_t): void <cimport,nodecl> end
global function graphene_vec2_subtract(a: *graphene_vec2_t, b: *graphene_vec2_t, res: *graphene_vec2_t): void <cimport,nodecl> end
global function graphene_vec2_multiply(a: *graphene_vec2_t, b: *graphene_vec2_t, res: *graphene_vec2_t): void <cimport,nodecl> end
global function graphene_vec2_divide(a: *graphene_vec2_t, b: *graphene_vec2_t, res: *graphene_vec2_t): void <cimport,nodecl> end
global function graphene_vec2_dot(a: *graphene_vec2_t, b: *graphene_vec2_t): float32 <cimport,nodecl> end
global function graphene_vec2_length(v: *graphene_vec2_t): float32 <cimport,nodecl> end
global function graphene_vec2_normalize(v: *graphene_vec2_t, res: *graphene_vec2_t): void <cimport,nodecl> end
global function graphene_vec2_scale(v: *graphene_vec2_t, factor: float32, res: *graphene_vec2_t): void <cimport,nodecl> end
global function graphene_vec2_negate(v: *graphene_vec2_t, res: *graphene_vec2_t): void <cimport,nodecl> end
global function graphene_vec2_near(v1: *graphene_vec2_t, v2: *graphene_vec2_t, epsilon: float32): boolean <cimport,nodecl> end
global function graphene_vec2_equal(v1: *graphene_vec2_t, v2: *graphene_vec2_t): boolean <cimport,nodecl> end
global function graphene_vec2_min(a: *graphene_vec2_t, b: *graphene_vec2_t, res: *graphene_vec2_t): void <cimport,nodecl> end
global function graphene_vec2_max(a: *graphene_vec2_t, b: *graphene_vec2_t, res: *graphene_vec2_t): void <cimport,nodecl> end
global function graphene_vec2_interpolate(v1: *graphene_vec2_t, v2: *graphene_vec2_t, factor: float64, res: *graphene_vec2_t): void <cimport,nodecl> end
global function graphene_vec2_get_x(v: *graphene_vec2_t): float32 <cimport,nodecl> end
global function graphene_vec2_get_y(v: *graphene_vec2_t): float32 <cimport,nodecl> end
global function graphene_vec2_zero(): *graphene_vec2_t <cimport,nodecl> end
global function graphene_vec2_one(): *graphene_vec2_t <cimport,nodecl> end
global function graphene_vec2_x_axis(): *graphene_vec2_t <cimport,nodecl> end
global function graphene_vec2_y_axis(): *graphene_vec2_t <cimport,nodecl> end
global function graphene_vec3_alloc(): *graphene_vec3_t <cimport,nodecl> end
global function graphene_vec3_free(v: *graphene_vec3_t): void <cimport,nodecl> end
global function graphene_vec3_init(v: *graphene_vec3_t, x: float32, y: float32, z: float32): *graphene_vec3_t <cimport,nodecl> end
global function graphene_vec3_init_from_vec3(v: *graphene_vec3_t, src: *graphene_vec3_t): *graphene_vec3_t <cimport,nodecl> end
global function graphene_vec3_init_from_float(v: *graphene_vec3_t, src: *float32): *graphene_vec3_t <cimport,nodecl> end
global function graphene_vec3_to_float(v: *graphene_vec3_t, dest: *float32): void <cimport,nodecl> end
global function graphene_vec3_add(a: *graphene_vec3_t, b: *graphene_vec3_t, res: *graphene_vec3_t): void <cimport,nodecl> end
global function graphene_vec3_subtract(a: *graphene_vec3_t, b: *graphene_vec3_t, res: *graphene_vec3_t): void <cimport,nodecl> end
global function graphene_vec3_multiply(a: *graphene_vec3_t, b: *graphene_vec3_t, res: *graphene_vec3_t): void <cimport,nodecl> end
global function graphene_vec3_divide(a: *graphene_vec3_t, b: *graphene_vec3_t, res: *graphene_vec3_t): void <cimport,nodecl> end
global function graphene_vec3_cross(a: *graphene_vec3_t, b: *graphene_vec3_t, res: *graphene_vec3_t): void <cimport,nodecl> end
global function graphene_vec3_dot(a: *graphene_vec3_t, b: *graphene_vec3_t): float32 <cimport,nodecl> end
global function graphene_vec3_length(v: *graphene_vec3_t): float32 <cimport,nodecl> end
global function graphene_vec3_normalize(v: *graphene_vec3_t, res: *graphene_vec3_t): void <cimport,nodecl> end
global function graphene_vec3_scale(v: *graphene_vec3_t, factor: float32, res: *graphene_vec3_t): void <cimport,nodecl> end
global function graphene_vec3_negate(v: *graphene_vec3_t, res: *graphene_vec3_t): void <cimport,nodecl> end
global function graphene_vec3_equal(v1: *graphene_vec3_t, v2: *graphene_vec3_t): boolean <cimport,nodecl> end
global function graphene_vec3_near(v1: *graphene_vec3_t, v2: *graphene_vec3_t, epsilon: float32): boolean <cimport,nodecl> end
global function graphene_vec3_min(a: *graphene_vec3_t, b: *graphene_vec3_t, res: *graphene_vec3_t): void <cimport,nodecl> end
global function graphene_vec3_max(a: *graphene_vec3_t, b: *graphene_vec3_t, res: *graphene_vec3_t): void <cimport,nodecl> end
global function graphene_vec3_interpolate(v1: *graphene_vec3_t, v2: *graphene_vec3_t, factor: float64, res: *graphene_vec3_t): void <cimport,nodecl> end
global function graphene_vec3_get_x(v: *graphene_vec3_t): float32 <cimport,nodecl> end
global function graphene_vec3_get_y(v: *graphene_vec3_t): float32 <cimport,nodecl> end
global function graphene_vec3_get_z(v: *graphene_vec3_t): float32 <cimport,nodecl> end
global function graphene_vec3_get_xy(v: *graphene_vec3_t, res: *graphene_vec2_t): void <cimport,nodecl> end
global function graphene_vec3_get_xy0(v: *graphene_vec3_t, res: *graphene_vec3_t): void <cimport,nodecl> end
global function graphene_vec3_get_xyz0(v: *graphene_vec3_t, res: *graphene_vec4_t): void <cimport,nodecl> end
global function graphene_vec3_get_xyz1(v: *graphene_vec3_t, res: *graphene_vec4_t): void <cimport,nodecl> end
global function graphene_vec3_get_xyzw(v: *graphene_vec3_t, w: float32, res: *graphene_vec4_t): void <cimport,nodecl> end
global function graphene_vec3_zero(): *graphene_vec3_t <cimport,nodecl> end
global function graphene_vec3_one(): *graphene_vec3_t <cimport,nodecl> end
global function graphene_vec3_x_axis(): *graphene_vec3_t <cimport,nodecl> end
global function graphene_vec3_y_axis(): *graphene_vec3_t <cimport,nodecl> end
global function graphene_vec3_z_axis(): *graphene_vec3_t <cimport,nodecl> end
global function graphene_vec4_alloc(): *graphene_vec4_t <cimport,nodecl> end
global function graphene_vec4_free(v: *graphene_vec4_t): void <cimport,nodecl> end
global function graphene_vec4_init(v: *graphene_vec4_t, x: float32, y: float32, z: float32, w: float32): *graphene_vec4_t <cimport,nodecl> end
global function graphene_vec4_init_from_vec4(v: *graphene_vec4_t, src: *graphene_vec4_t): *graphene_vec4_t <cimport,nodecl> end
global function graphene_vec4_init_from_vec3(v: *graphene_vec4_t, src: *graphene_vec3_t, w: float32): *graphene_vec4_t <cimport,nodecl> end
global function graphene_vec4_init_from_vec2(v: *graphene_vec4_t, src: *graphene_vec2_t, z: float32, w: float32): *graphene_vec4_t <cimport,nodecl> end
global function graphene_vec4_init_from_float(v: *graphene_vec4_t, src: *float32): *graphene_vec4_t <cimport,nodecl> end
global function graphene_vec4_to_float(v: *graphene_vec4_t, dest: *float32): void <cimport,nodecl> end
global function graphene_vec4_add(a: *graphene_vec4_t, b: *graphene_vec4_t, res: *graphene_vec4_t): void <cimport,nodecl> end
global function graphene_vec4_subtract(a: *graphene_vec4_t, b: *graphene_vec4_t, res: *graphene_vec4_t): void <cimport,nodecl> end
global function graphene_vec4_multiply(a: *graphene_vec4_t, b: *graphene_vec4_t, res: *graphene_vec4_t): void <cimport,nodecl> end
global function graphene_vec4_divide(a: *graphene_vec4_t, b: *graphene_vec4_t, res: *graphene_vec4_t): void <cimport,nodecl> end
global function graphene_vec4_dot(a: *graphene_vec4_t, b: *graphene_vec4_t): float32 <cimport,nodecl> end
global function graphene_vec4_length(v: *graphene_vec4_t): float32 <cimport,nodecl> end
global function graphene_vec4_normalize(v: *graphene_vec4_t, res: *graphene_vec4_t): void <cimport,nodecl> end
global function graphene_vec4_scale(v: *graphene_vec4_t, factor: float32, res: *graphene_vec4_t): void <cimport,nodecl> end
global function graphene_vec4_negate(v: *graphene_vec4_t, res: *graphene_vec4_t): void <cimport,nodecl> end
global function graphene_vec4_equal(v1: *graphene_vec4_t, v2: *graphene_vec4_t): boolean <cimport,nodecl> end
global function graphene_vec4_near(v1: *graphene_vec4_t, v2: *graphene_vec4_t, epsilon: float32): boolean <cimport,nodecl> end
global function graphene_vec4_min(a: *graphene_vec4_t, b: *graphene_vec4_t, res: *graphene_vec4_t): void <cimport,nodecl> end
global function graphene_vec4_max(a: *graphene_vec4_t, b: *graphene_vec4_t, res: *graphene_vec4_t): void <cimport,nodecl> end
global function graphene_vec4_interpolate(v1: *graphene_vec4_t, v2: *graphene_vec4_t, factor: float64, res: *graphene_vec4_t): void <cimport,nodecl> end
global function graphene_vec4_get_x(v: *graphene_vec4_t): float32 <cimport,nodecl> end
global function graphene_vec4_get_y(v: *graphene_vec4_t): float32 <cimport,nodecl> end
global function graphene_vec4_get_z(v: *graphene_vec4_t): float32 <cimport,nodecl> end
global function graphene_vec4_get_w(v: *graphene_vec4_t): float32 <cimport,nodecl> end
global function graphene_vec4_get_xy(v: *graphene_vec4_t, res: *graphene_vec2_t): void <cimport,nodecl> end
global function graphene_vec4_get_xyz(v: *graphene_vec4_t, res: *graphene_vec3_t): void <cimport,nodecl> end
global function graphene_vec4_zero(): *graphene_vec4_t <cimport,nodecl> end
global function graphene_vec4_one(): *graphene_vec4_t <cimport,nodecl> end
global function graphene_vec4_x_axis(): *graphene_vec4_t <cimport,nodecl> end
global function graphene_vec4_y_axis(): *graphene_vec4_t <cimport,nodecl> end
global function graphene_vec4_z_axis(): *graphene_vec4_t <cimport,nodecl> end
global function graphene_vec4_w_axis(): *graphene_vec4_t <cimport,nodecl> end
global function graphene_matrix_alloc(): *graphene_matrix_t <cimport,nodecl> end
global function graphene_matrix_free(m: *graphene_matrix_t): void <cimport,nodecl> end
global function graphene_matrix_init_identity(m: *graphene_matrix_t): *graphene_matrix_t <cimport,nodecl> end
global function graphene_matrix_init_from_float(m: *graphene_matrix_t, v: *float32): *graphene_matrix_t <cimport,nodecl> end
global function graphene_matrix_init_from_vec4(m: *graphene_matrix_t, v0: *graphene_vec4_t, v1: *graphene_vec4_t, v2: *graphene_vec4_t, v3: *graphene_vec4_t): *graphene_matrix_t <cimport,nodecl> end
global function graphene_matrix_init_from_matrix(m: *graphene_matrix_t, src: *graphene_matrix_t): *graphene_matrix_t <cimport,nodecl> end
global function graphene_matrix_init_perspective(m: *graphene_matrix_t, fovy: float32, aspect: float32, z_near: float32, z_far: float32): *graphene_matrix_t <cimport,nodecl> end
global function graphene_matrix_init_ortho(m: *graphene_matrix_t, left: float32, right: float32, top: float32, bottom: float32, z_near: float32, z_far: float32): *graphene_matrix_t <cimport,nodecl> end
global function graphene_matrix_init_look_at(m: *graphene_matrix_t, eye: *graphene_vec3_t, center: *graphene_vec3_t, up: *graphene_vec3_t): *graphene_matrix_t <cimport,nodecl> end
global function graphene_matrix_init_frustum(m: *graphene_matrix_t, left: float32, right: float32, bottom: float32, top: float32, z_near: float32, z_far: float32): *graphene_matrix_t <cimport,nodecl> end
global function graphene_matrix_init_scale(m: *graphene_matrix_t, x: float32, y: float32, z: float32): *graphene_matrix_t <cimport,nodecl> end
global function graphene_matrix_init_translate(m: *graphene_matrix_t, p: *graphene_point3d_t): *graphene_matrix_t <cimport,nodecl> end
global function graphene_matrix_init_rotate(m: *graphene_matrix_t, angle: float32, axis: *graphene_vec3_t): *graphene_matrix_t <cimport,nodecl> end
global function graphene_matrix_init_skew(m: *graphene_matrix_t, x_skew: float32, y_skew: float32): *graphene_matrix_t <cimport,nodecl> end
global function graphene_matrix_init_from_2d(m: *graphene_matrix_t, xx: float64, yx: float64, xy: float64, yy: float64, x_0: float64, y_0: float64): *graphene_matrix_t <cimport,nodecl> end
global function graphene_matrix_is_identity(m: *graphene_matrix_t): boolean <cimport,nodecl> end
global function graphene_matrix_is_2d(m: *graphene_matrix_t): boolean <cimport,nodecl> end
global function graphene_matrix_is_backface_visible(m: *graphene_matrix_t): boolean <cimport,nodecl> end
global function graphene_matrix_is_singular(m: *graphene_matrix_t): boolean <cimport,nodecl> end
global function graphene_matrix_to_float(m: *graphene_matrix_t, v: *float32): void <cimport,nodecl> end
global function graphene_matrix_to_2d(m: *graphene_matrix_t, xx: *float64, yx: *float64, xy: *float64, yy: *float64, x_0: *float64, y_0: *float64): boolean <cimport,nodecl> end
global function graphene_matrix_get_row(m: *graphene_matrix_t, index_: cuint, res: *graphene_vec4_t): void <cimport,nodecl> end
global function graphene_matrix_get_value(m: *graphene_matrix_t, row: cuint, col: cuint): float32 <cimport,nodecl> end
global function graphene_matrix_multiply(a: *graphene_matrix_t, b: *graphene_matrix_t, res: *graphene_matrix_t): void <cimport,nodecl> end
global function graphene_matrix_determinant(m: *graphene_matrix_t): float32 <cimport,nodecl> end
global function graphene_matrix_transform_vec4(m: *graphene_matrix_t, v: *graphene_vec4_t, res: *graphene_vec4_t): void <cimport,nodecl> end
global function graphene_matrix_transform_vec3(m: *graphene_matrix_t, v: *graphene_vec3_t, res: *graphene_vec3_t): void <cimport,nodecl> end
global function graphene_matrix_transform_point(m: *graphene_matrix_t, p: *graphene_point_t, res: *graphene_point_t): void <cimport,nodecl> end
global function graphene_matrix_transform_point3d(m: *graphene_matrix_t, p: *graphene_point3d_t, res: *graphene_point3d_t): void <cimport,nodecl> end
global function graphene_matrix_transform_rect(m: *graphene_matrix_t, r: *graphene_rect_t, res: *graphene_quad_t): void <cimport,nodecl> end
global function graphene_matrix_transform_bounds(m: *graphene_matrix_t, r: *graphene_rect_t, res: *graphene_rect_t): void <cimport,nodecl> end
global function graphene_matrix_transform_sphere(m: *graphene_matrix_t, s: *graphene_sphere_t, res: *graphene_sphere_t): void <cimport,nodecl> end
global function graphene_matrix_transform_box(m: *graphene_matrix_t, b: *graphene_box_t, res: *graphene_box_t): void <cimport,nodecl> end
global function graphene_matrix_transform_ray(m: *graphene_matrix_t, r: *graphene_ray_t, res: *graphene_ray_t): void <cimport,nodecl> end
global function graphene_matrix_project_point(m: *graphene_matrix_t, p: *graphene_point_t, res: *graphene_point_t): void <cimport,nodecl> end
global function graphene_matrix_project_rect_bounds(m: *graphene_matrix_t, r: *graphene_rect_t, res: *graphene_rect_t): void <cimport,nodecl> end
global function graphene_matrix_project_rect(m: *graphene_matrix_t, r: *graphene_rect_t, res: *graphene_quad_t): void <cimport,nodecl> end
global function graphene_matrix_untransform_point(m: *graphene_matrix_t, p: *graphene_point_t, bounds: *graphene_rect_t, res: *graphene_point_t): boolean <cimport,nodecl> end
global function graphene_matrix_untransform_bounds(m: *graphene_matrix_t, r: *graphene_rect_t, bounds: *graphene_rect_t, res: *graphene_rect_t): void <cimport,nodecl> end
global function graphene_matrix_unproject_point3d(projection: *graphene_matrix_t, modelview: *graphene_matrix_t, point: *graphene_point3d_t, res: *graphene_point3d_t): void <cimport,nodecl> end
global function graphene_matrix_translate(m: *graphene_matrix_t, pos: *graphene_point3d_t): void <cimport,nodecl> end
global function graphene_matrix_rotate(m: *graphene_matrix_t, angle: float32, axis: *graphene_vec3_t): void <cimport,nodecl> end
global function graphene_matrix_rotate_x(m: *graphene_matrix_t, angle: float32): void <cimport,nodecl> end
global function graphene_matrix_rotate_y(m: *graphene_matrix_t, angle: float32): void <cimport,nodecl> end
global function graphene_matrix_rotate_z(m: *graphene_matrix_t, angle: float32): void <cimport,nodecl> end
global function graphene_matrix_rotate_quaternion(m: *graphene_matrix_t, q: *graphene_quaternion_t): void <cimport,nodecl> end
global function graphene_matrix_rotate_euler(m: *graphene_matrix_t, e: *graphene_euler_t): void <cimport,nodecl> end
global function graphene_matrix_scale(m: *graphene_matrix_t, factor_x: float32, factor_y: float32, factor_z: float32): void <cimport,nodecl> end
global function graphene_matrix_skew_xy(m: *graphene_matrix_t, factor: float32): void <cimport,nodecl> end
global function graphene_matrix_skew_xz(m: *graphene_matrix_t, factor: float32): void <cimport,nodecl> end
global function graphene_matrix_skew_yz(m: *graphene_matrix_t, factor: float32): void <cimport,nodecl> end
global function graphene_matrix_transpose(m: *graphene_matrix_t, res: *graphene_matrix_t): void <cimport,nodecl> end
global function graphene_matrix_inverse(m: *graphene_matrix_t, res: *graphene_matrix_t): boolean <cimport,nodecl> end
global function graphene_matrix_perspective(m: *graphene_matrix_t, depth: float32, res: *graphene_matrix_t): void <cimport,nodecl> end
global function graphene_matrix_normalize(m: *graphene_matrix_t, res: *graphene_matrix_t): void <cimport,nodecl> end
global function graphene_matrix_get_x_translation(m: *graphene_matrix_t): float32 <cimport,nodecl> end
global function graphene_matrix_get_y_translation(m: *graphene_matrix_t): float32 <cimport,nodecl> end
global function graphene_matrix_get_z_translation(m: *graphene_matrix_t): float32 <cimport,nodecl> end
global function graphene_matrix_get_x_scale(m: *graphene_matrix_t): float32 <cimport,nodecl> end
global function graphene_matrix_get_y_scale(m: *graphene_matrix_t): float32 <cimport,nodecl> end
global function graphene_matrix_get_z_scale(m: *graphene_matrix_t): float32 <cimport,nodecl> end
global function graphene_matrix_interpolate(a: *graphene_matrix_t, b: *graphene_matrix_t, factor: float64, res: *graphene_matrix_t): void <cimport,nodecl> end
global function graphene_matrix_near(a: *graphene_matrix_t, b: *graphene_matrix_t, epsilon: float32): boolean <cimport,nodecl> end
global function graphene_matrix_equal(a: *graphene_matrix_t, b: *graphene_matrix_t): boolean <cimport,nodecl> end
global function graphene_matrix_equal_fast(a: *graphene_matrix_t, b: *graphene_matrix_t): boolean <cimport,nodecl> end
global function graphene_matrix_print(m: *graphene_matrix_t): void <cimport,nodecl> end
global function graphene_matrix_decompose(m: *graphene_matrix_t, translate: *graphene_vec3_t, scale: *graphene_vec3_t, rotate: *graphene_quaternion_t, shear: *graphene_vec3_t, perspective: *graphene_vec4_t): boolean <cimport,nodecl> end
global function graphene_point_alloc(): *graphene_point_t <cimport,nodecl> end
global function graphene_point_free(p: *graphene_point_t): void <cimport,nodecl> end
global function graphene_point_init(p: *graphene_point_t, x: float32, y: float32): *graphene_point_t <cimport,nodecl> end
global function graphene_point_init_from_point(p: *graphene_point_t, src: *graphene_point_t): *graphene_point_t <cimport,nodecl> end
global function graphene_point_init_from_vec2(p: *graphene_point_t, src: *graphene_vec2_t): *graphene_point_t <cimport,nodecl> end
global function graphene_point_equal(a: *graphene_point_t, b: *graphene_point_t): boolean <cimport,nodecl> end
global function graphene_point_distance(a: *graphene_point_t, b: *graphene_point_t, d_x: *float32, d_y: *float32): float32 <cimport,nodecl> end
global function graphene_point_near(a: *graphene_point_t, b: *graphene_point_t, epsilon: float32): boolean <cimport,nodecl> end
global function graphene_point_interpolate(a: *graphene_point_t, b: *graphene_point_t, factor: float64, res: *graphene_point_t): void <cimport,nodecl> end
global function graphene_point_to_vec2(p: *graphene_point_t, v: *graphene_vec2_t): void <cimport,nodecl> end
global function graphene_point_zero(): *graphene_point_t <cimport,nodecl> end
global function graphene_size_alloc(): *graphene_size_t <cimport,nodecl> end
global function graphene_size_free(s: *graphene_size_t): void <cimport,nodecl> end
global function graphene_size_init(s: *graphene_size_t, width: float32, height: float32): *graphene_size_t <cimport,nodecl> end
global function graphene_size_init_from_size(s: *graphene_size_t, src: *graphene_size_t): *graphene_size_t <cimport,nodecl> end
global function graphene_size_equal(a: *graphene_size_t, b: *graphene_size_t): boolean <cimport,nodecl> end
global function graphene_size_scale(s: *graphene_size_t, factor: float32, res: *graphene_size_t): void <cimport,nodecl> end
global function graphene_size_interpolate(a: *graphene_size_t, b: *graphene_size_t, factor: float64, res: *graphene_size_t): void <cimport,nodecl> end
global function graphene_size_zero(): *graphene_size_t <cimport,nodecl> end
global function graphene_rect_alloc(): *graphene_rect_t <cimport,nodecl> end
global function graphene_rect_free(r: *graphene_rect_t): void <cimport,nodecl> end
global function graphene_rect_init(r: *graphene_rect_t, x: float32, y: float32, width: float32, height: float32): *graphene_rect_t <cimport,nodecl> end
global function graphene_rect_init_from_rect(r: *graphene_rect_t, src: *graphene_rect_t): *graphene_rect_t <cimport,nodecl> end
global function graphene_rect_equal(a: *graphene_rect_t, b: *graphene_rect_t): boolean <cimport,nodecl> end
global function graphene_rect_normalize(r: *graphene_rect_t): *graphene_rect_t <cimport,nodecl> end
global function graphene_rect_normalize_r(r: *graphene_rect_t, res: *graphene_rect_t): void <cimport,nodecl> end
global function graphene_rect_get_center(r: *graphene_rect_t, p: *graphene_point_t): void <cimport,nodecl> end
global function graphene_rect_get_top_left(r: *graphene_rect_t, p: *graphene_point_t): void <cimport,nodecl> end
global function graphene_rect_get_top_right(r: *graphene_rect_t, p: *graphene_point_t): void <cimport,nodecl> end
global function graphene_rect_get_bottom_right(r: *graphene_rect_t, p: *graphene_point_t): void <cimport,nodecl> end
global function graphene_rect_get_bottom_left(r: *graphene_rect_t, p: *graphene_point_t): void <cimport,nodecl> end
global function graphene_rect_get_vertices(r: *graphene_rect_t, vertices: *[0]graphene_vec2_t): void <cimport,nodecl> end
global function graphene_rect_get_x(r: *graphene_rect_t): float32 <cimport,nodecl> end
global function graphene_rect_get_y(r: *graphene_rect_t): float32 <cimport,nodecl> end
global function graphene_rect_get_width(r: *graphene_rect_t): float32 <cimport,nodecl> end
global function graphene_rect_get_height(r: *graphene_rect_t): float32 <cimport,nodecl> end
global function graphene_rect_get_area(r: *graphene_rect_t): float32 <cimport,nodecl> end
global function graphene_rect_union(a: *graphene_rect_t, b: *graphene_rect_t, res: *graphene_rect_t): void <cimport,nodecl> end
global function graphene_rect_intersection(a: *graphene_rect_t, b: *graphene_rect_t, res: *graphene_rect_t): boolean <cimport,nodecl> end
global function graphene_rect_contains_point(r: *graphene_rect_t, p: *graphene_point_t): boolean <cimport,nodecl> end
global function graphene_rect_contains_rect(a: *graphene_rect_t, b: *graphene_rect_t): boolean <cimport,nodecl> end
global function graphene_rect_offset(r: *graphene_rect_t, d_x: float32, d_y: float32): *graphene_rect_t <cimport,nodecl> end
global function graphene_rect_offset_r(r: *graphene_rect_t, d_x: float32, d_y: float32, res: *graphene_rect_t): void <cimport,nodecl> end
global function graphene_rect_inset(r: *graphene_rect_t, d_x: float32, d_y: float32): *graphene_rect_t <cimport,nodecl> end
global function graphene_rect_inset_r(r: *graphene_rect_t, d_x: float32, d_y: float32, res: *graphene_rect_t): void <cimport,nodecl> end
global function graphene_rect_round_to_pixel(r: *graphene_rect_t): *graphene_rect_t <cimport,nodecl> end
global function graphene_rect_round(r: *graphene_rect_t, res: *graphene_rect_t): void <cimport,nodecl> end
global function graphene_rect_round_extents(r: *graphene_rect_t, res: *graphene_rect_t): void <cimport,nodecl> end
global function graphene_rect_interpolate(a: *graphene_rect_t, b: *graphene_rect_t, factor: float64, res: *graphene_rect_t): void <cimport,nodecl> end
global function graphene_rect_expand(r: *graphene_rect_t, p: *graphene_point_t, res: *graphene_rect_t): void <cimport,nodecl> end
global function graphene_rect_zero(): *graphene_rect_t <cimport,nodecl> end
global function graphene_rect_scale(r: *graphene_rect_t, s_h: float32, s_v: float32, res: *graphene_rect_t): void <cimport,nodecl> end
global function graphene_point3d_alloc(): *graphene_point3d_t <cimport,nodecl> end
global function graphene_point3d_free(p: *graphene_point3d_t): void <cimport,nodecl> end
global function graphene_point3d_init(p: *graphene_point3d_t, x: float32, y: float32, z: float32): *graphene_point3d_t <cimport,nodecl> end
global function graphene_point3d_init_from_point(p: *graphene_point3d_t, src: *graphene_point3d_t): *graphene_point3d_t <cimport,nodecl> end
global function graphene_point3d_init_from_vec3(p: *graphene_point3d_t, v: *graphene_vec3_t): *graphene_point3d_t <cimport,nodecl> end
global function graphene_point3d_to_vec3(p: *graphene_point3d_t, v: *graphene_vec3_t): void <cimport,nodecl> end
global function graphene_point3d_equal(a: *graphene_point3d_t, b: *graphene_point3d_t): boolean <cimport,nodecl> end
global function graphene_point3d_near(a: *graphene_point3d_t, b: *graphene_point3d_t, epsilon: float32): boolean <cimport,nodecl> end
global function graphene_point3d_scale(p: *graphene_point3d_t, factor: float32, res: *graphene_point3d_t): void <cimport,nodecl> end
global function graphene_point3d_cross(a: *graphene_point3d_t, b: *graphene_point3d_t, res: *graphene_point3d_t): void <cimport,nodecl> end
global function graphene_point3d_dot(a: *graphene_point3d_t, b: *graphene_point3d_t): float32 <cimport,nodecl> end
global function graphene_point3d_length(p: *graphene_point3d_t): float32 <cimport,nodecl> end
global function graphene_point3d_normalize(p: *graphene_point3d_t, res: *graphene_point3d_t): void <cimport,nodecl> end
global function graphene_point3d_distance(a: *graphene_point3d_t, b: *graphene_point3d_t, delta: *graphene_vec3_t): float32 <cimport,nodecl> end
global function graphene_point3d_interpolate(a: *graphene_point3d_t, b: *graphene_point3d_t, factor: float64, res: *graphene_point3d_t): void <cimport,nodecl> end
global function graphene_point3d_normalize_viewport(p: *graphene_point3d_t, viewport: *graphene_rect_t, z_near: float32, z_far: float32, res: *graphene_point3d_t): void <cimport,nodecl> end
global function graphene_point3d_zero(): *graphene_point3d_t <cimport,nodecl> end
global function graphene_quad_alloc(): *graphene_quad_t <cimport,nodecl> end
global function graphene_quad_free(q: *graphene_quad_t): void <cimport,nodecl> end
global function graphene_quad_init(q: *graphene_quad_t, p1: *graphene_point_t, p2: *graphene_point_t, p3: *graphene_point_t, p4: *graphene_point_t): *graphene_quad_t <cimport,nodecl> end
global function graphene_quad_init_from_rect(q: *graphene_quad_t, r: *graphene_rect_t): *graphene_quad_t <cimport,nodecl> end
global function graphene_quad_init_from_points(q: *graphene_quad_t, points: *[0]graphene_point_t): *graphene_quad_t <cimport,nodecl> end
global function graphene_quad_contains(q: *graphene_quad_t, p: *graphene_point_t): boolean <cimport,nodecl> end
global function graphene_quad_bounds(q: *graphene_quad_t, r: *graphene_rect_t): void <cimport,nodecl> end
global function graphene_quad_get_point(q: *graphene_quad_t, index_: cuint): *graphene_point_t <cimport,nodecl> end
global function graphene_quaternion_alloc(): *graphene_quaternion_t <cimport,nodecl> end
global function graphene_quaternion_free(q: *graphene_quaternion_t): void <cimport,nodecl> end
global function graphene_quaternion_init(q: *graphene_quaternion_t, x: float32, y: float32, z: float32, w: float32): *graphene_quaternion_t <cimport,nodecl> end
global function graphene_quaternion_init_identity(q: *graphene_quaternion_t): *graphene_quaternion_t <cimport,nodecl> end
global function graphene_quaternion_init_from_quaternion(q: *graphene_quaternion_t, src: *graphene_quaternion_t): *graphene_quaternion_t <cimport,nodecl> end
global function graphene_quaternion_init_from_vec4(q: *graphene_quaternion_t, src: *graphene_vec4_t): *graphene_quaternion_t <cimport,nodecl> end
global function graphene_quaternion_init_from_matrix(q: *graphene_quaternion_t, m: *graphene_matrix_t): *graphene_quaternion_t <cimport,nodecl> end
global function graphene_quaternion_init_from_angles(q: *graphene_quaternion_t, deg_x: float32, deg_y: float32, deg_z: float32): *graphene_quaternion_t <cimport,nodecl> end
global function graphene_quaternion_init_from_radians(q: *graphene_quaternion_t, rad_x: float32, rad_y: float32, rad_z: float32): *graphene_quaternion_t <cimport,nodecl> end
global function graphene_quaternion_init_from_angle_vec3(q: *graphene_quaternion_t, angle: float32, axis: *graphene_vec3_t): *graphene_quaternion_t <cimport,nodecl> end
global function graphene_quaternion_init_from_euler(q: *graphene_quaternion_t, e: *graphene_euler_t): *graphene_quaternion_t <cimport,nodecl> end
global function graphene_quaternion_to_vec4(q: *graphene_quaternion_t, res: *graphene_vec4_t): void <cimport,nodecl> end
global function graphene_quaternion_to_matrix(q: *graphene_quaternion_t, m: *graphene_matrix_t): void <cimport,nodecl> end
global function graphene_quaternion_to_angles(q: *graphene_quaternion_t, deg_x: *float32, deg_y: *float32, deg_z: *float32): void <cimport,nodecl> end
global function graphene_quaternion_to_radians(q: *graphene_quaternion_t, rad_x: *float32, rad_y: *float32, rad_z: *float32): void <cimport,nodecl> end
global function graphene_quaternion_to_angle_vec3(q: *graphene_quaternion_t, angle: *float32, axis: *graphene_vec3_t): void <cimport,nodecl> end
global function graphene_quaternion_equal(a: *graphene_quaternion_t, b: *graphene_quaternion_t): boolean <cimport,nodecl> end
global function graphene_quaternion_dot(a: *graphene_quaternion_t, b: *graphene_quaternion_t): float32 <cimport,nodecl> end
global function graphene_quaternion_invert(q: *graphene_quaternion_t, res: *graphene_quaternion_t): void <cimport,nodecl> end
global function graphene_quaternion_normalize(q: *graphene_quaternion_t, res: *graphene_quaternion_t): void <cimport,nodecl> end
global function graphene_quaternion_slerp(a: *graphene_quaternion_t, b: *graphene_quaternion_t, factor: float32, res: *graphene_quaternion_t): void <cimport,nodecl> end
global function graphene_quaternion_multiply(a: *graphene_quaternion_t, b: *graphene_quaternion_t, res: *graphene_quaternion_t): void <cimport,nodecl> end
global function graphene_quaternion_scale(q: *graphene_quaternion_t, factor: float32, res: *graphene_quaternion_t): void <cimport,nodecl> end
global function graphene_quaternion_add(a: *graphene_quaternion_t, b: *graphene_quaternion_t, res: *graphene_quaternion_t): void <cimport,nodecl> end
global function graphene_euler_alloc(): *graphene_euler_t <cimport,nodecl> end
global function graphene_euler_free(e: *graphene_euler_t): void <cimport,nodecl> end
global function graphene_euler_init(e: *graphene_euler_t, x: float32, y: float32, z: float32): *graphene_euler_t <cimport,nodecl> end
global function graphene_euler_init_with_order(e: *graphene_euler_t, x: float32, y: float32, z: float32, order: graphene_euler_order_t): *graphene_euler_t <cimport,nodecl> end
global function graphene_euler_init_from_matrix(e: *graphene_euler_t, m: *graphene_matrix_t, order: graphene_euler_order_t): *graphene_euler_t <cimport,nodecl> end
global function graphene_euler_init_from_quaternion(e: *graphene_euler_t, q: *graphene_quaternion_t, order: graphene_euler_order_t): *graphene_euler_t <cimport,nodecl> end
global function graphene_euler_init_from_vec3(e: *graphene_euler_t, v: *graphene_vec3_t, order: graphene_euler_order_t): *graphene_euler_t <cimport,nodecl> end
global function graphene_euler_init_from_euler(e: *graphene_euler_t, src: *graphene_euler_t): *graphene_euler_t <cimport,nodecl> end
global function graphene_euler_init_from_radians(e: *graphene_euler_t, x: float32, y: float32, z: float32, order: graphene_euler_order_t): *graphene_euler_t <cimport,nodecl> end
global function graphene_euler_equal(a: *graphene_euler_t, b: *graphene_euler_t): boolean <cimport,nodecl> end
global function graphene_euler_get_x(e: *graphene_euler_t): float32 <cimport,nodecl> end
global function graphene_euler_get_y(e: *graphene_euler_t): float32 <cimport,nodecl> end
global function graphene_euler_get_z(e: *graphene_euler_t): float32 <cimport,nodecl> end
global function graphene_euler_get_order(e: *graphene_euler_t): graphene_euler_order_t <cimport,nodecl> end
global function graphene_euler_get_alpha(e: *graphene_euler_t): float32 <cimport,nodecl> end
global function graphene_euler_get_beta(e: *graphene_euler_t): float32 <cimport,nodecl> end
global function graphene_euler_get_gamma(e: *graphene_euler_t): float32 <cimport,nodecl> end
global function graphene_euler_to_vec3(e: *graphene_euler_t, res: *graphene_vec3_t): void <cimport,nodecl> end
global function graphene_euler_to_matrix(e: *graphene_euler_t, res: *graphene_matrix_t): void <cimport,nodecl> end
global function graphene_euler_to_quaternion(e: *graphene_euler_t, res: *graphene_quaternion_t): void <cimport,nodecl> end
global function graphene_euler_reorder(e: *graphene_euler_t, order: graphene_euler_order_t, res: *graphene_euler_t): void <cimport,nodecl> end
global function graphene_plane_alloc(): *graphene_plane_t <cimport,nodecl> end
global function graphene_plane_free(p: *graphene_plane_t): void <cimport,nodecl> end
global function graphene_plane_init(p: *graphene_plane_t, normal: *graphene_vec3_t, constant: float32): *graphene_plane_t <cimport,nodecl> end
global function graphene_plane_init_from_vec4(p: *graphene_plane_t, src: *graphene_vec4_t): *graphene_plane_t <cimport,nodecl> end
global function graphene_plane_init_from_plane(p: *graphene_plane_t, src: *graphene_plane_t): *graphene_plane_t <cimport,nodecl> end
global function graphene_plane_init_from_point(p: *graphene_plane_t, normal: *graphene_vec3_t, point: *graphene_point3d_t): *graphene_plane_t <cimport,nodecl> end
global function graphene_plane_init_from_points(p: *graphene_plane_t, a: *graphene_point3d_t, b: *graphene_point3d_t, c: *graphene_point3d_t): *graphene_plane_t <cimport,nodecl> end
global function graphene_plane_normalize(p: *graphene_plane_t, res: *graphene_plane_t): void <cimport,nodecl> end
global function graphene_plane_negate(p: *graphene_plane_t, res: *graphene_plane_t): void <cimport,nodecl> end
global function graphene_plane_equal(a: *graphene_plane_t, b: *graphene_plane_t): boolean <cimport,nodecl> end
global function graphene_plane_distance(p: *graphene_plane_t, point: *graphene_point3d_t): float32 <cimport,nodecl> end
global function graphene_plane_get_normal(p: *graphene_plane_t, normal: *graphene_vec3_t): void <cimport,nodecl> end
global function graphene_plane_get_constant(p: *graphene_plane_t): float32 <cimport,nodecl> end
global function graphene_plane_transform(p: *graphene_plane_t, matrix: *graphene_matrix_t, normal_matrix: *graphene_matrix_t, res: *graphene_plane_t): void <cimport,nodecl> end
global function graphene_frustum_alloc(): *graphene_frustum_t <cimport,nodecl> end
global function graphene_frustum_free(f: *graphene_frustum_t): void <cimport,nodecl> end
global function graphene_frustum_init(f: *graphene_frustum_t, p0: *graphene_plane_t, p1: *graphene_plane_t, p2: *graphene_plane_t, p3: *graphene_plane_t, p4: *graphene_plane_t, p5: *graphene_plane_t): *graphene_frustum_t <cimport,nodecl> end
global function graphene_frustum_init_from_frustum(f: *graphene_frustum_t, src: *graphene_frustum_t): *graphene_frustum_t <cimport,nodecl> end
global function graphene_frustum_init_from_matrix(f: *graphene_frustum_t, matrix: *graphene_matrix_t): *graphene_frustum_t <cimport,nodecl> end
global function graphene_frustum_contains_point(f: *graphene_frustum_t, point: *graphene_point3d_t): boolean <cimport,nodecl> end
global function graphene_frustum_intersects_sphere(f: *graphene_frustum_t, sphere: *graphene_sphere_t): boolean <cimport,nodecl> end
global function graphene_frustum_intersects_box(f: *graphene_frustum_t, box: *graphene_box_t): boolean <cimport,nodecl> end
global function graphene_frustum_get_planes(f: *graphene_frustum_t, planes: *[0]graphene_plane_t): void <cimport,nodecl> end
global function graphene_frustum_equal(a: *graphene_frustum_t, b: *graphene_frustum_t): boolean <cimport,nodecl> end
global function graphene_sphere_alloc(): *graphene_sphere_t <cimport,nodecl> end
global function graphene_sphere_free(s: *graphene_sphere_t): void <cimport,nodecl> end
global function graphene_sphere_init(s: *graphene_sphere_t, center: *graphene_point3d_t, radius: float32): *graphene_sphere_t <cimport,nodecl> end
global function graphene_sphere_init_from_points(s: *graphene_sphere_t, n_points: cuint, points: *graphene_point3d_t, center: *graphene_point3d_t): *graphene_sphere_t <cimport,nodecl> end
global function graphene_sphere_init_from_vectors(s: *graphene_sphere_t, n_vectors: cuint, vectors: *graphene_vec3_t, center: *graphene_point3d_t): *graphene_sphere_t <cimport,nodecl> end
global function graphene_sphere_get_center(s: *graphene_sphere_t, center: *graphene_point3d_t): void <cimport,nodecl> end
global function graphene_sphere_get_radius(s: *graphene_sphere_t): float32 <cimport,nodecl> end
global function graphene_sphere_is_empty(s: *graphene_sphere_t): boolean <cimport,nodecl> end
global function graphene_sphere_equal(a: *graphene_sphere_t, b: *graphene_sphere_t): boolean <cimport,nodecl> end
global function graphene_sphere_contains_point(s: *graphene_sphere_t, point: *graphene_point3d_t): boolean <cimport,nodecl> end
global function graphene_sphere_distance(s: *graphene_sphere_t, point: *graphene_point3d_t): float32 <cimport,nodecl> end
global function graphene_sphere_get_bounding_box(s: *graphene_sphere_t, box: *graphene_box_t): void <cimport,nodecl> end
global function graphene_sphere_translate(s: *graphene_sphere_t, point: *graphene_point3d_t, res: *graphene_sphere_t): void <cimport,nodecl> end
global function graphene_box_alloc(): *graphene_box_t <cimport,nodecl> end
global function graphene_box_free(box: *graphene_box_t): void <cimport,nodecl> end
global function graphene_box_init(box: *graphene_box_t, min: *graphene_point3d_t, max: *graphene_point3d_t): *graphene_box_t <cimport,nodecl> end
global function graphene_box_init_from_points(box: *graphene_box_t, n_points: cuint, points: *graphene_point3d_t): *graphene_box_t <cimport,nodecl> end
global function graphene_box_init_from_vectors(box: *graphene_box_t, n_vectors: cuint, vectors: *graphene_vec3_t): *graphene_box_t <cimport,nodecl> end
global function graphene_box_init_from_box(box: *graphene_box_t, src: *graphene_box_t): *graphene_box_t <cimport,nodecl> end
global function graphene_box_init_from_vec3(box: *graphene_box_t, min: *graphene_vec3_t, max: *graphene_vec3_t): *graphene_box_t <cimport,nodecl> end
global function graphene_box_expand(box: *graphene_box_t, point: *graphene_point3d_t, res: *graphene_box_t): void <cimport,nodecl> end
global function graphene_box_expand_vec3(box: *graphene_box_t, vec: *graphene_vec3_t, res: *graphene_box_t): void <cimport,nodecl> end
global function graphene_box_expand_scalar(box: *graphene_box_t, scalar: float32, res: *graphene_box_t): void <cimport,nodecl> end
global function graphene_box_union(a: *graphene_box_t, b: *graphene_box_t, res: *graphene_box_t): void <cimport,nodecl> end
global function graphene_box_intersection(a: *graphene_box_t, b: *graphene_box_t, res: *graphene_box_t): boolean <cimport,nodecl> end
global function graphene_box_get_width(box: *graphene_box_t): float32 <cimport,nodecl> end
global function graphene_box_get_height(box: *graphene_box_t): float32 <cimport,nodecl> end
global function graphene_box_get_depth(box: *graphene_box_t): float32 <cimport,nodecl> end
global function graphene_box_get_size(box: *graphene_box_t, size: *graphene_vec3_t): void <cimport,nodecl> end
global function graphene_box_get_center(box: *graphene_box_t, center: *graphene_point3d_t): void <cimport,nodecl> end
global function graphene_box_get_min(box: *graphene_box_t, min: *graphene_point3d_t): void <cimport,nodecl> end
global function graphene_box_get_max(box: *graphene_box_t, max: *graphene_point3d_t): void <cimport,nodecl> end
global function graphene_box_get_vertices(box: *graphene_box_t, vertices: *[0]graphene_vec3_t): void <cimport,nodecl> end
global function graphene_box_get_bounding_sphere(box: *graphene_box_t, sphere: *graphene_sphere_t): void <cimport,nodecl> end
global function graphene_box_contains_point(box: *graphene_box_t, point: *graphene_point3d_t): boolean <cimport,nodecl> end
global function graphene_box_contains_box(a: *graphene_box_t, b: *graphene_box_t): boolean <cimport,nodecl> end
global function graphene_box_equal(a: *graphene_box_t, b: *graphene_box_t): boolean <cimport,nodecl> end
global function graphene_box_zero(): *graphene_box_t <cimport,nodecl> end
global function graphene_box_one(): *graphene_box_t <cimport,nodecl> end
global function graphene_box_minus_one(): *graphene_box_t <cimport,nodecl> end
global function graphene_box_one_minus_one(): *graphene_box_t <cimport,nodecl> end
global function graphene_box_infinite(): *graphene_box_t <cimport,nodecl> end
global function graphene_box_empty(): *graphene_box_t <cimport,nodecl> end
global function graphene_triangle_alloc(): *graphene_triangle_t <cimport,nodecl> end
global function graphene_triangle_free(t: *graphene_triangle_t): void <cimport,nodecl> end
global function graphene_triangle_init_from_point3d(t: *graphene_triangle_t, a: *graphene_point3d_t, b: *graphene_point3d_t, c: *graphene_point3d_t): *graphene_triangle_t <cimport,nodecl> end
global function graphene_triangle_init_from_vec3(t: *graphene_triangle_t, a: *graphene_vec3_t, b: *graphene_vec3_t, c: *graphene_vec3_t): *graphene_triangle_t <cimport,nodecl> end
global function graphene_triangle_init_from_float(t: *graphene_triangle_t, a: *float32, b: *float32, c: *float32): *graphene_triangle_t <cimport,nodecl> end
global function graphene_triangle_get_points(t: *graphene_triangle_t, a: *graphene_point3d_t, b: *graphene_point3d_t, c: *graphene_point3d_t): void <cimport,nodecl> end
global function graphene_triangle_get_vertices(t: *graphene_triangle_t, a: *graphene_vec3_t, b: *graphene_vec3_t, c: *graphene_vec3_t): void <cimport,nodecl> end
global function graphene_triangle_get_area(t: *graphene_triangle_t): float32 <cimport,nodecl> end
global function graphene_triangle_get_midpoint(t: *graphene_triangle_t, res: *graphene_point3d_t): void <cimport,nodecl> end
global function graphene_triangle_get_normal(t: *graphene_triangle_t, res: *graphene_vec3_t): void <cimport,nodecl> end
global function graphene_triangle_get_plane(t: *graphene_triangle_t, res: *graphene_plane_t): void <cimport,nodecl> end
global function graphene_triangle_get_bounding_box(t: *graphene_triangle_t, res: *graphene_box_t): void <cimport,nodecl> end
global function graphene_triangle_get_barycoords(t: *graphene_triangle_t, p: *graphene_point3d_t, res: *graphene_vec2_t): boolean <cimport,nodecl> end
global function graphene_triangle_get_uv(t: *graphene_triangle_t, p: *graphene_point3d_t, uv_a: *graphene_vec2_t, uv_b: *graphene_vec2_t, uv_c: *graphene_vec2_t, res: *graphene_vec2_t): boolean <cimport,nodecl> end
global function graphene_triangle_contains_point(t: *graphene_triangle_t, p: *graphene_point3d_t): boolean <cimport,nodecl> end
global function graphene_triangle_equal(a: *graphene_triangle_t, b: *graphene_triangle_t): boolean <cimport,nodecl> end
global function graphene_ray_alloc(): *graphene_ray_t <cimport,nodecl> end
global function graphene_ray_free(r: *graphene_ray_t): void <cimport,nodecl> end
global function graphene_ray_init(r: *graphene_ray_t, origin: *graphene_point3d_t, direction: *graphene_vec3_t): *graphene_ray_t <cimport,nodecl> end
global function graphene_ray_init_from_ray(r: *graphene_ray_t, src: *graphene_ray_t): *graphene_ray_t <cimport,nodecl> end
global function graphene_ray_init_from_vec3(r: *graphene_ray_t, origin: *graphene_vec3_t, direction: *graphene_vec3_t): *graphene_ray_t <cimport,nodecl> end
global function graphene_ray_get_origin(r: *graphene_ray_t, origin: *graphene_point3d_t): void <cimport,nodecl> end
global function graphene_ray_get_direction(r: *graphene_ray_t, direction: *graphene_vec3_t): void <cimport,nodecl> end
global function graphene_ray_get_position_at(r: *graphene_ray_t, t: float32, position: *graphene_point3d_t): void <cimport,nodecl> end
global function graphene_ray_get_distance_to_point(r: *graphene_ray_t, p: *graphene_point3d_t): float32 <cimport,nodecl> end
global function graphene_ray_get_distance_to_plane(r: *graphene_ray_t, p: *graphene_plane_t): float32 <cimport,nodecl> end
global function graphene_ray_equal(a: *graphene_ray_t, b: *graphene_ray_t): boolean <cimport,nodecl> end
global function graphene_ray_get_closest_point_to_point(r: *graphene_ray_t, p: *graphene_point3d_t, res: *graphene_point3d_t): void <cimport,nodecl> end
global function graphene_ray_intersect_sphere(r: *graphene_ray_t, s: *graphene_sphere_t, t_out: *float32): graphene_ray_intersection_kind_t <cimport,nodecl> end
global function graphene_ray_intersects_sphere(r: *graphene_ray_t, s: *graphene_sphere_t): boolean <cimport,nodecl> end
global function graphene_ray_intersect_box(r: *graphene_ray_t, b: *graphene_box_t, t_out: *float32): graphene_ray_intersection_kind_t <cimport,nodecl> end
global function graphene_ray_intersects_box(r: *graphene_ray_t, b: *graphene_box_t): boolean <cimport,nodecl> end
global function graphene_ray_intersect_triangle(r: *graphene_ray_t, t: *graphene_triangle_t, t_out: *float32): graphene_ray_intersection_kind_t <cimport,nodecl> end
global function graphene_ray_intersects_triangle(r: *graphene_ray_t, t: *graphene_triangle_t): boolean <cimport,nodecl> end
global function gsk_rounded_rect_init(self: *GskRoundedRect, bounds: *graphene_rect_t, top_left: *graphene_size_t, top_right: *graphene_size_t, bottom_right: *graphene_size_t, bottom_left: *graphene_size_t): *GskRoundedRect <cimport,nodecl> end
global function gsk_rounded_rect_init_copy(self: *GskRoundedRect, src: *GskRoundedRect): *GskRoundedRect <cimport,nodecl> end
global function gsk_rounded_rect_init_from_rect(self: *GskRoundedRect, bounds: *graphene_rect_t, radius: float32): *GskRoundedRect <cimport,nodecl> end
global function gsk_rounded_rect_normalize(self: *GskRoundedRect): *GskRoundedRect <cimport,nodecl> end
global function gsk_rounded_rect_offset(self: *GskRoundedRect, dx: float32, dy: float32): *GskRoundedRect <cimport,nodecl> end
global function gsk_rounded_rect_shrink(self: *GskRoundedRect, top: float32, right: float32, bottom: float32, left: float32): *GskRoundedRect <cimport,nodecl> end
global function gsk_rounded_rect_is_rectilinear(self: *GskRoundedRect): gboolean <cimport,nodecl> end
global function gsk_rounded_rect_contains_point(self: *GskRoundedRect, point: *graphene_point_t): gboolean <cimport,nodecl> end
global function gsk_rounded_rect_contains_rect(self: *GskRoundedRect, rect: *graphene_rect_t): gboolean <cimport,nodecl> end
global function gsk_rounded_rect_intersects_rect(self: *GskRoundedRect, rect: *graphene_rect_t): gboolean <cimport,nodecl> end
global function gsk_gl_shader_get_type(): GType <cimport,nodecl> end
global function glib_autoptr_clear_GskGLShader(_ptr: *GskGLShader): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GskGLShader(_ptr: **GskGLShader): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GskGLShader(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GskGLShader(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GskGLShader(_q: **GQueue): void <cimport,nodecl> end
global function glib_autoptr_clear_GskGLShaderClass(_ptr: *GskGLShaderClass): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GskGLShaderClass(_ptr: **GskGLShaderClass): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GskGLShaderClass(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GskGLShaderClass(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GskGLShaderClass(_q: **GQueue): void <cimport,nodecl> end
global function GSK_GL_SHADER(ptr: gpointer): *GskGLShader <cimport,nodecl> end
global function GSK_IS_GL_SHADER(ptr: gpointer): gboolean <cimport,nodecl> end
global function gsk_gl_shader_new_from_bytes(sourcecode: *GBytes): *GskGLShader <cimport,nodecl> end
global function gsk_gl_shader_new_from_resource(resource_path: cstring): *GskGLShader <cimport,nodecl> end
global function gsk_gl_shader_compile(shader: *GskGLShader, renderer: *GskRenderer, error: **GError): gboolean <cimport,nodecl> end
global function gsk_gl_shader_get_source(shader: *GskGLShader): *GBytes <cimport,nodecl> end
global function gsk_gl_shader_get_resource(shader: *GskGLShader): cstring <cimport,nodecl> end
global function gsk_gl_shader_get_n_textures(shader: *GskGLShader): cint <cimport,nodecl> end
global function gsk_gl_shader_get_n_uniforms(shader: *GskGLShader): cint <cimport,nodecl> end
global function gsk_gl_shader_get_uniform_name(shader: *GskGLShader, idx: cint): cstring <cimport,nodecl> end
global function gsk_gl_shader_find_uniform_by_name(shader: *GskGLShader, name: cstring): cint <cimport,nodecl> end
global function gsk_gl_shader_get_uniform_type(shader: *GskGLShader, idx: cint): GskGLUniformType <cimport,nodecl> end
global function gsk_gl_shader_get_uniform_offset(shader: *GskGLShader, idx: cint): cint <cimport,nodecl> end
global function gsk_gl_shader_get_args_size(shader: *GskGLShader): gsize <cimport,nodecl> end
global function gsk_gl_shader_format_args_va(shader: *GskGLShader, uniforms: cvalist): *GBytes <cimport,nodecl> end
global function gsk_gl_shader_format_args(shader: *GskGLShader, ...: cvarargs): *GBytes <cimport,nodecl> end
global function gsk_gl_shader_get_arg_float(shader: *GskGLShader, args: *GBytes, idx: cint): float32 <cimport,nodecl> end
global function gsk_gl_shader_get_arg_int(shader: *GskGLShader, args: *GBytes, idx: cint): gint32 <cimport,nodecl> end
global function gsk_gl_shader_get_arg_uint(shader: *GskGLShader, args: *GBytes, idx: cint): guint32 <cimport,nodecl> end
global function gsk_gl_shader_get_arg_bool(shader: *GskGLShader, args: *GBytes, idx: cint): gboolean <cimport,nodecl> end
global function gsk_gl_shader_get_arg_vec2(shader: *GskGLShader, args: *GBytes, idx: cint, out_value: *graphene_vec2_t): void <cimport,nodecl> end
global function gsk_gl_shader_get_arg_vec3(shader: *GskGLShader, args: *GBytes, idx: cint, out_value: *graphene_vec3_t): void <cimport,nodecl> end
global function gsk_gl_shader_get_arg_vec4(shader: *GskGLShader, args: *GBytes, idx: cint, out_value: *graphene_vec4_t): void <cimport,nodecl> end
global function gsk_shader_args_builder_get_type(): GType <cimport,nodecl> end
global function gsk_shader_args_builder_new(shader: *GskGLShader, initial_values: *GBytes): *GskShaderArgsBuilder <cimport,nodecl> end
global function gsk_shader_args_builder_to_args(builder: *GskShaderArgsBuilder): *GBytes <cimport,nodecl> end
global function gsk_shader_args_builder_free_to_args(builder: *GskShaderArgsBuilder): *GBytes <cimport,nodecl> end
global function gsk_shader_args_builder_ref(builder: *GskShaderArgsBuilder): *GskShaderArgsBuilder <cimport,nodecl> end
global function gsk_shader_args_builder_unref(builder: *GskShaderArgsBuilder): void <cimport,nodecl> end
global function gsk_shader_args_builder_set_float(builder: *GskShaderArgsBuilder, idx: cint, value: float32): void <cimport,nodecl> end
global function gsk_shader_args_builder_set_int(builder: *GskShaderArgsBuilder, idx: cint, value: gint32): void <cimport,nodecl> end
global function gsk_shader_args_builder_set_uint(builder: *GskShaderArgsBuilder, idx: cint, value: guint32): void <cimport,nodecl> end
global function gsk_shader_args_builder_set_bool(builder: *GskShaderArgsBuilder, idx: cint, value: gboolean): void <cimport,nodecl> end
global function gsk_shader_args_builder_set_vec2(builder: *GskShaderArgsBuilder, idx: cint, value: *graphene_vec2_t): void <cimport,nodecl> end
global function gsk_shader_args_builder_set_vec3(builder: *GskShaderArgsBuilder, idx: cint, value: *graphene_vec3_t): void <cimport,nodecl> end
global function gsk_shader_args_builder_set_vec4(builder: *GskShaderArgsBuilder, idx: cint, value: *graphene_vec4_t): void <cimport,nodecl> end
global function gsk_render_node_get_type(): GType <cimport,nodecl> end
global function gsk_serialization_error_quark(): GQuark <cimport,nodecl> end
global function gsk_render_node_ref(node: *GskRenderNode): *GskRenderNode <cimport,nodecl> end
global function gsk_render_node_unref(node: *GskRenderNode): void <cimport,nodecl> end
global function gsk_render_node_get_node_type(node: *GskRenderNode): GskRenderNodeType <cimport,nodecl> end
global function gsk_render_node_get_bounds(node: *GskRenderNode, bounds: *graphene_rect_t): void <cimport,nodecl> end
global function gsk_render_node_draw(node: *GskRenderNode, cr: *cairo_t): void <cimport,nodecl> end
global function gsk_render_node_serialize(node: *GskRenderNode): *GBytes <cimport,nodecl> end
global function gsk_render_node_write_to_file(node: *GskRenderNode, filename: cstring, error: **GError): gboolean <cimport,nodecl> end
global function gsk_render_node_deserialize(bytes: *GBytes, error_func: GskParseErrorFunc, user_data: gpointer): *GskRenderNode <cimport,nodecl> end
global function gsk_debug_node_get_type(): GType <cimport,nodecl> end
global function gsk_debug_node_new(child: *GskRenderNode, message: cstring): *GskRenderNode <cimport,nodecl> end
global function gsk_debug_node_get_child(node: *GskRenderNode): *GskRenderNode <cimport,nodecl> end
global function gsk_debug_node_get_message(node: *GskRenderNode): cstring <cimport,nodecl> end
global function gsk_color_node_get_type(): GType <cimport,nodecl> end
global function gsk_color_node_new(rgba: *GdkRGBA, bounds: *graphene_rect_t): *GskRenderNode <cimport,nodecl> end
global function gsk_color_node_get_color(node: *GskRenderNode): *GdkRGBA <cimport,nodecl> end
global function gsk_texture_node_get_type(): GType <cimport,nodecl> end
global function gsk_texture_node_new(texture: *GdkTexture, bounds: *graphene_rect_t): *GskRenderNode <cimport,nodecl> end
global function gsk_texture_node_get_texture(node: *GskRenderNode): *GdkTexture <cimport,nodecl> end
global function gsk_linear_gradient_node_get_type(): GType <cimport,nodecl> end
global function gsk_linear_gradient_node_new(bounds: *graphene_rect_t, start: *graphene_point_t, end_: *graphene_point_t, color_stops: *GskColorStop, n_color_stops: gsize): *GskRenderNode <cimport,nodecl> end
global function gsk_linear_gradient_node_get_start(node: *GskRenderNode): *graphene_point_t <cimport,nodecl> end
global function gsk_linear_gradient_node_get_end(node: *GskRenderNode): *graphene_point_t <cimport,nodecl> end
global function gsk_linear_gradient_node_get_n_color_stops(node: *GskRenderNode): gsize <cimport,nodecl> end
global function gsk_linear_gradient_node_get_color_stops(node: *GskRenderNode, n_stops: *gsize): *GskColorStop <cimport,nodecl> end
global function gsk_repeating_linear_gradient_node_get_type(): GType <cimport,nodecl> end
global function gsk_repeating_linear_gradient_node_new(bounds: *graphene_rect_t, start: *graphene_point_t, end_: *graphene_point_t, color_stops: *GskColorStop, n_color_stops: gsize): *GskRenderNode <cimport,nodecl> end
global function gsk_conic_gradient_node_get_type(): GType <cimport,nodecl> end
global function gsk_conic_gradient_node_new(bounds: *graphene_rect_t, center: *graphene_point_t, rotation: float32, color_stops: *GskColorStop, n_color_stops: gsize): *GskRenderNode <cimport,nodecl> end
global function gsk_conic_gradient_node_get_center(node: *GskRenderNode): *graphene_point_t <cimport,nodecl> end
global function gsk_conic_gradient_node_get_rotation(node: *GskRenderNode): float32 <cimport,nodecl> end
global function gsk_conic_gradient_node_get_angle(node: *GskRenderNode): float32 <cimport,nodecl> end
global function gsk_conic_gradient_node_get_n_color_stops(node: *GskRenderNode): gsize <cimport,nodecl> end
global function gsk_conic_gradient_node_get_color_stops(node: *GskRenderNode, n_stops: *gsize): *GskColorStop <cimport,nodecl> end
global function gsk_radial_gradient_node_get_type(): GType <cimport,nodecl> end
global function gsk_radial_gradient_node_new(bounds: *graphene_rect_t, center: *graphene_point_t, hradius: float32, vradius: float32, start: float32, end_: float32, color_stops: *GskColorStop, n_color_stops: gsize): *GskRenderNode <cimport,nodecl> end
global function gsk_radial_gradient_node_get_n_color_stops(node: *GskRenderNode): gsize <cimport,nodecl> end
global function gsk_radial_gradient_node_get_color_stops(node: *GskRenderNode, n_stops: *gsize): *GskColorStop <cimport,nodecl> end
global function gsk_radial_gradient_node_get_center(node: *GskRenderNode): *graphene_point_t <cimport,nodecl> end
global function gsk_radial_gradient_node_get_hradius(node: *GskRenderNode): float32 <cimport,nodecl> end
global function gsk_radial_gradient_node_get_vradius(node: *GskRenderNode): float32 <cimport,nodecl> end
global function gsk_radial_gradient_node_get_start(node: *GskRenderNode): float32 <cimport,nodecl> end
global function gsk_radial_gradient_node_get_end(node: *GskRenderNode): float32 <cimport,nodecl> end
global function gsk_repeating_radial_gradient_node_get_type(): GType <cimport,nodecl> end
global function gsk_repeating_radial_gradient_node_new(bounds: *graphene_rect_t, center: *graphene_point_t, hradius: float32, vradius: float32, start: float32, end_: float32, color_stops: *GskColorStop, n_color_stops: gsize): *GskRenderNode <cimport,nodecl> end
global function gsk_border_node_get_type(): GType <cimport,nodecl> end
global function gsk_border_node_new(outline: *GskRoundedRect, border_width: *[4]float32, border_color: *[4]GdkRGBA): *GskRenderNode <cimport,nodecl> end
global function gsk_border_node_get_outline(node: *GskRenderNode): *GskRoundedRect <cimport,nodecl> end
global function gsk_border_node_get_widths(node: *GskRenderNode): *float32 <cimport,nodecl> end
global function gsk_border_node_get_colors(node: *GskRenderNode): *GdkRGBA <cimport,nodecl> end
global function gsk_inset_shadow_node_get_type(): GType <cimport,nodecl> end
global function gsk_inset_shadow_node_new(outline: *GskRoundedRect, color: *GdkRGBA, dx: float32, dy: float32, spread: float32, blur_radius: float32): *GskRenderNode <cimport,nodecl> end
global function gsk_inset_shadow_node_get_outline(node: *GskRenderNode): *GskRoundedRect <cimport,nodecl> end
global function gsk_inset_shadow_node_get_color(node: *GskRenderNode): *GdkRGBA <cimport,nodecl> end
global function gsk_inset_shadow_node_get_dx(node: *GskRenderNode): float32 <cimport,nodecl> end
global function gsk_inset_shadow_node_get_dy(node: *GskRenderNode): float32 <cimport,nodecl> end
global function gsk_inset_shadow_node_get_spread(node: *GskRenderNode): float32 <cimport,nodecl> end
global function gsk_inset_shadow_node_get_blur_radius(node: *GskRenderNode): float32 <cimport,nodecl> end
global function gsk_outset_shadow_node_get_type(): GType <cimport,nodecl> end
global function gsk_outset_shadow_node_new(outline: *GskRoundedRect, color: *GdkRGBA, dx: float32, dy: float32, spread: float32, blur_radius: float32): *GskRenderNode <cimport,nodecl> end
global function gsk_outset_shadow_node_get_outline(node: *GskRenderNode): *GskRoundedRect <cimport,nodecl> end
global function gsk_outset_shadow_node_get_color(node: *GskRenderNode): *GdkRGBA <cimport,nodecl> end
global function gsk_outset_shadow_node_get_dx(node: *GskRenderNode): float32 <cimport,nodecl> end
global function gsk_outset_shadow_node_get_dy(node: *GskRenderNode): float32 <cimport,nodecl> end
global function gsk_outset_shadow_node_get_spread(node: *GskRenderNode): float32 <cimport,nodecl> end
global function gsk_outset_shadow_node_get_blur_radius(node: *GskRenderNode): float32 <cimport,nodecl> end
global function gsk_cairo_node_get_type(): GType <cimport,nodecl> end
global function gsk_cairo_node_new(bounds: *graphene_rect_t): *GskRenderNode <cimport,nodecl> end
global function gsk_cairo_node_get_draw_context(node: *GskRenderNode): *cairo_t <cimport,nodecl> end
global function gsk_cairo_node_get_surface(node: *GskRenderNode): *cairo_surface_t <cimport,nodecl> end
global function gsk_container_node_get_type(): GType <cimport,nodecl> end
global function gsk_container_node_new(children: **GskRenderNode, n_children: guint): *GskRenderNode <cimport,nodecl> end
global function gsk_container_node_get_n_children(node: *GskRenderNode): guint <cimport,nodecl> end
global function gsk_container_node_get_child(node: *GskRenderNode, idx: guint): *GskRenderNode <cimport,nodecl> end
global function gsk_transform_node_get_type(): GType <cimport,nodecl> end
global function gsk_transform_node_new(child: *GskRenderNode, transform: *GskTransform): *GskRenderNode <cimport,nodecl> end
global function gsk_transform_node_get_child(node: *GskRenderNode): *GskRenderNode <cimport,nodecl> end
global function gsk_transform_node_get_transform(node: *GskRenderNode): *GskTransform <cimport,nodecl> end
global function gsk_opacity_node_get_type(): GType <cimport,nodecl> end
global function gsk_opacity_node_new(child: *GskRenderNode, opacity: float32): *GskRenderNode <cimport,nodecl> end
global function gsk_opacity_node_get_child(node: *GskRenderNode): *GskRenderNode <cimport,nodecl> end
global function gsk_opacity_node_get_opacity(node: *GskRenderNode): float32 <cimport,nodecl> end
global function gsk_color_matrix_node_get_type(): GType <cimport,nodecl> end
global function gsk_color_matrix_node_new(child: *GskRenderNode, color_matrix: *graphene_matrix_t, color_offset: *graphene_vec4_t): *GskRenderNode <cimport,nodecl> end
global function gsk_color_matrix_node_get_child(node: *GskRenderNode): *GskRenderNode <cimport,nodecl> end
global function gsk_color_matrix_node_get_color_matrix(node: *GskRenderNode): *graphene_matrix_t <cimport,nodecl> end
global function gsk_color_matrix_node_get_color_offset(node: *GskRenderNode): *graphene_vec4_t <cimport,nodecl> end
global function gsk_repeat_node_get_type(): GType <cimport,nodecl> end
global function gsk_repeat_node_new(bounds: *graphene_rect_t, child: *GskRenderNode, child_bounds: *graphene_rect_t): *GskRenderNode <cimport,nodecl> end
global function gsk_repeat_node_get_child(node: *GskRenderNode): *GskRenderNode <cimport,nodecl> end
global function gsk_repeat_node_get_child_bounds(node: *GskRenderNode): *graphene_rect_t <cimport,nodecl> end
global function gsk_clip_node_get_type(): GType <cimport,nodecl> end
global function gsk_clip_node_new(child: *GskRenderNode, clip: *graphene_rect_t): *GskRenderNode <cimport,nodecl> end
global function gsk_clip_node_get_child(node: *GskRenderNode): *GskRenderNode <cimport,nodecl> end
global function gsk_clip_node_get_clip(node: *GskRenderNode): *graphene_rect_t <cimport,nodecl> end
global function gsk_rounded_clip_node_get_type(): GType <cimport,nodecl> end
global function gsk_rounded_clip_node_new(child: *GskRenderNode, clip: *GskRoundedRect): *GskRenderNode <cimport,nodecl> end
global function gsk_rounded_clip_node_get_child(node: *GskRenderNode): *GskRenderNode <cimport,nodecl> end
global function gsk_rounded_clip_node_get_clip(node: *GskRenderNode): *GskRoundedRect <cimport,nodecl> end
global function gsk_shadow_node_get_type(): GType <cimport,nodecl> end
global function gsk_shadow_node_new(child: *GskRenderNode, shadows: *GskShadow, n_shadows: gsize): *GskRenderNode <cimport,nodecl> end
global function gsk_shadow_node_get_child(node: *GskRenderNode): *GskRenderNode <cimport,nodecl> end
global function gsk_shadow_node_get_shadow(node: *GskRenderNode, i: gsize): *GskShadow <cimport,nodecl> end
global function gsk_shadow_node_get_n_shadows(node: *GskRenderNode): gsize <cimport,nodecl> end
global function gsk_blend_node_get_type(): GType <cimport,nodecl> end
global function gsk_blend_node_new(bottom: *GskRenderNode, top: *GskRenderNode, blend_mode: GskBlendMode): *GskRenderNode <cimport,nodecl> end
global function gsk_blend_node_get_bottom_child(node: *GskRenderNode): *GskRenderNode <cimport,nodecl> end
global function gsk_blend_node_get_top_child(node: *GskRenderNode): *GskRenderNode <cimport,nodecl> end
global function gsk_blend_node_get_blend_mode(node: *GskRenderNode): GskBlendMode <cimport,nodecl> end
global function gsk_cross_fade_node_get_type(): GType <cimport,nodecl> end
global function gsk_cross_fade_node_new(start: *GskRenderNode, end_: *GskRenderNode, progress: float32): *GskRenderNode <cimport,nodecl> end
global function gsk_cross_fade_node_get_start_child(node: *GskRenderNode): *GskRenderNode <cimport,nodecl> end
global function gsk_cross_fade_node_get_end_child(node: *GskRenderNode): *GskRenderNode <cimport,nodecl> end
global function gsk_cross_fade_node_get_progress(node: *GskRenderNode): float32 <cimport,nodecl> end
global function gsk_text_node_get_type(): GType <cimport,nodecl> end
global function gsk_text_node_new(font: *PangoFont, glyphs: *PangoGlyphString, color: *GdkRGBA, offset: *graphene_point_t): *GskRenderNode <cimport,nodecl> end
global function gsk_text_node_get_font(node: *GskRenderNode): *PangoFont <cimport,nodecl> end
global function gsk_text_node_has_color_glyphs(node: *GskRenderNode): gboolean <cimport,nodecl> end
global function gsk_text_node_get_num_glyphs(node: *GskRenderNode): guint <cimport,nodecl> end
global function gsk_text_node_get_glyphs(node: *GskRenderNode, n_glyphs: *guint): *PangoGlyphInfo <cimport,nodecl> end
global function gsk_text_node_get_color(node: *GskRenderNode): *GdkRGBA <cimport,nodecl> end
global function gsk_text_node_get_offset(node: *GskRenderNode): *graphene_point_t <cimport,nodecl> end
global function gsk_blur_node_get_type(): GType <cimport,nodecl> end
global function gsk_blur_node_new(child: *GskRenderNode, radius: float32): *GskRenderNode <cimport,nodecl> end
global function gsk_blur_node_get_child(node: *GskRenderNode): *GskRenderNode <cimport,nodecl> end
global function gsk_blur_node_get_radius(node: *GskRenderNode): float32 <cimport,nodecl> end
global function gsk_gl_shader_node_get_type(): GType <cimport,nodecl> end
global function gsk_gl_shader_node_new(shader: *GskGLShader, bounds: *graphene_rect_t, args: *GBytes, children: **GskRenderNode, n_children: guint): *GskRenderNode <cimport,nodecl> end
global function gsk_gl_shader_node_get_n_children(node: *GskRenderNode): guint <cimport,nodecl> end
global function gsk_gl_shader_node_get_child(node: *GskRenderNode, idx: guint): *GskRenderNode <cimport,nodecl> end
global function gsk_gl_shader_node_get_args(node: *GskRenderNode): *GBytes <cimport,nodecl> end
global function gsk_gl_shader_node_get_shader(node: *GskRenderNode): *GskGLShader <cimport,nodecl> end
global function gsk_value_set_render_node(value: *GValue, node: *GskRenderNode): void <cimport,nodecl> end
global function gsk_value_take_render_node(value: *GValue, node: *GskRenderNode): void <cimport,nodecl> end
global function gsk_value_get_render_node(value: *GValue): *GskRenderNode <cimport,nodecl> end
global function gsk_value_dup_render_node(value: *GValue): *GskRenderNode <cimport,nodecl> end
global function gsk_renderer_get_type(): GType <cimport,nodecl> end
global function gsk_renderer_new_for_surface(surface: *GdkSurface): *GskRenderer <cimport,nodecl> end
global function gsk_renderer_get_surface(renderer: *GskRenderer): *GdkSurface <cimport,nodecl> end
global function gsk_renderer_realize(renderer: *GskRenderer, surface: *GdkSurface, error: **GError): gboolean <cimport,nodecl> end
global function gsk_renderer_unrealize(renderer: *GskRenderer): void <cimport,nodecl> end
global function gsk_renderer_is_realized(renderer: *GskRenderer): gboolean <cimport,nodecl> end
global function gsk_renderer_render_texture(renderer: *GskRenderer, root: *GskRenderNode, viewport: *graphene_rect_t): *GdkTexture <cimport,nodecl> end
global function gsk_renderer_render(renderer: *GskRenderer, root: *GskRenderNode, region: *cairo_region_t): void <cimport,nodecl> end
global function gsk_transform_get_type(): GType <cimport,nodecl> end
global function gsk_transform_ref(self: *GskTransform): *GskTransform <cimport,nodecl> end
global function gsk_transform_unref(self: *GskTransform): void <cimport,nodecl> end
global function gsk_transform_print(self: *GskTransform, string: *GString): void <cimport,nodecl> end
global function gsk_transform_to_string(self: *GskTransform): cstring <cimport,nodecl> end
global function gsk_transform_parse(string: cstring, out_transform: **GskTransform): gboolean <cimport,nodecl> end
global function gsk_transform_to_matrix(self: *GskTransform, out_matrix: *graphene_matrix_t): void <cimport,nodecl> end
global function gsk_transform_to_2d(self: *GskTransform, out_xx: *float32, out_yx: *float32, out_xy: *float32, out_yy: *float32, out_dx: *float32, out_dy: *float32): void <cimport,nodecl> end
global function gsk_transform_to_2d_components(self: *GskTransform, out_skew_x: *float32, out_skew_y: *float32, out_scale_x: *float32, out_scale_y: *float32, out_angle: *float32, out_dx: *float32, out_dy: *float32): void <cimport,nodecl> end
global function gsk_transform_to_affine(self: *GskTransform, out_scale_x: *float32, out_scale_y: *float32, out_dx: *float32, out_dy: *float32): void <cimport,nodecl> end
global function gsk_transform_to_translate(self: *GskTransform, out_dx: *float32, out_dy: *float32): void <cimport,nodecl> end
global function gsk_transform_get_category(self: *GskTransform): GskTransformCategory <cimport,nodecl> end
global function gsk_transform_equal(first: *GskTransform, second: *GskTransform): gboolean <cimport,nodecl> end
global function gsk_transform_new(): *GskTransform <cimport,nodecl> end
global function gsk_transform_transform(next: *GskTransform, other: *GskTransform): *GskTransform <cimport,nodecl> end
global function gsk_transform_invert(self: *GskTransform): *GskTransform <cimport,nodecl> end
global function gsk_transform_matrix(next: *GskTransform, matrix: *graphene_matrix_t): *GskTransform <cimport,nodecl> end
global function gsk_transform_translate(next: *GskTransform, point: *graphene_point_t): *GskTransform <cimport,nodecl> end
global function gsk_transform_translate_3d(next: *GskTransform, point: *graphene_point3d_t): *GskTransform <cimport,nodecl> end
global function gsk_transform_skew(next: *GskTransform, skew_x: float32, skew_y: float32): *GskTransform <cimport,nodecl> end
global function gsk_transform_rotate(next: *GskTransform, angle: float32): *GskTransform <cimport,nodecl> end
global function gsk_transform_rotate_3d(next: *GskTransform, angle: float32, axis: *graphene_vec3_t): *GskTransform <cimport,nodecl> end
global function gsk_transform_scale(next: *GskTransform, factor_x: float32, factor_y: float32): *GskTransform <cimport,nodecl> end
global function gsk_transform_scale_3d(next: *GskTransform, factor_x: float32, factor_y: float32, factor_z: float32): *GskTransform <cimport,nodecl> end
global function gsk_transform_perspective(next: *GskTransform, depth: float32): *GskTransform <cimport,nodecl> end
global function gsk_transform_transform_bounds(self: *GskTransform, rect: *graphene_rect_t, out_rect: *graphene_rect_t): void <cimport,nodecl> end
global function gsk_transform_transform_point(self: *GskTransform, point: *graphene_point_t, out_point: *graphene_point_t): void <cimport,nodecl> end
global function gsk_cairo_renderer_get_type(): GType <cimport,nodecl> end
global function gsk_cairo_renderer_new(): *GskRenderer <cimport,nodecl> end
global function gsk_render_node_type_get_type(): GType <cimport,nodecl> end
global function gsk_scaling_filter_get_type(): GType <cimport,nodecl> end
global function gsk_blend_mode_get_type(): GType <cimport,nodecl> end
global function gsk_corner_get_type(): GType <cimport,nodecl> end
global function gsk_serialization_error_get_type(): GType <cimport,nodecl> end
global function gsk_transform_category_get_type(): GType <cimport,nodecl> end
global function gsk_gl_uniform_type_get_type(): GType <cimport,nodecl> end
global function glib_autoptr_clear_GskRenderer(_ptr: *GskRenderer): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GskRenderer(_ptr: **GskRenderer): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GskRenderer(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GskRenderer(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GskRenderer(_q: **GQueue): void <cimport,nodecl> end
global function glib_autoptr_clear_GskRenderNode(_ptr: *GskRenderNode): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GskRenderNode(_ptr: **GskRenderNode): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GskRenderNode(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GskRenderNode(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GskRenderNode(_q: **GQueue): void <cimport,nodecl> end
global function glib_autoptr_clear_GskTransform(_ptr: *GskTransform): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GskTransform(_ptr: **GskTransform): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GskTransform(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GskTransform(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GskTransform(_q: **GQueue): void <cimport,nodecl> end
global function gtk_ordering_from_cmpfunc(cmpfunc_result: cint): GtkOrdering <cimport,nodecl> end
global function gtk_accelerator_valid(keyval: guint, modifiers: GdkModifierType): gboolean <cimport,nodecl> end
global function gtk_accelerator_parse(accelerator: cstring, accelerator_key: *guint, accelerator_mods: *GdkModifierType): gboolean <cimport,nodecl> end
global function gtk_accelerator_parse_with_keycode(accelerator: cstring, display: *GdkDisplay, accelerator_key: *guint, accelerator_codes: **guint, accelerator_mods: *GdkModifierType): gboolean <cimport,nodecl> end
global function gtk_accelerator_name(accelerator_key: guint, accelerator_mods: GdkModifierType): cstring <cimport,nodecl> end
global function gtk_accelerator_name_with_keycode(display: *GdkDisplay, accelerator_key: guint, keycode: guint, accelerator_mods: GdkModifierType): cstring <cimport,nodecl> end
global function gtk_accelerator_get_label(accelerator_key: guint, accelerator_mods: GdkModifierType): cstring <cimport,nodecl> end
global function gtk_accelerator_get_label_with_keycode(display: *GdkDisplay, accelerator_key: guint, keycode: guint, accelerator_mods: GdkModifierType): cstring <cimport,nodecl> end
global function gtk_accelerator_get_default_mod_mask(): GdkModifierType <cimport,nodecl> end
global function gtk_border_get_type(): GType <cimport,nodecl> end
global function gtk_border_new(): *GtkBorder <cimport,nodecl> end
global function gtk_border_copy(border_: *GtkBorder): *GtkBorder <cimport,nodecl> end
global function gtk_border_free(border_: *GtkBorder): void <cimport,nodecl> end
global function glib_autoptr_clear_GtkBorder(_ptr: *GtkBorder): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GtkBorder(_ptr: **GtkBorder): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GtkBorder(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GtkBorder(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GtkBorder(_q: **GQueue): void <cimport,nodecl> end
global function gtk_shortcut_get_type(): GType <cimport,nodecl> end
global function glib_autoptr_clear_GtkShortcut(_ptr: *GtkShortcut): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GtkShortcut(_ptr: **GtkShortcut): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GtkShortcut(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GtkShortcut(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GtkShortcut(_q: **GQueue): void <cimport,nodecl> end
global function glib_autoptr_clear_GtkShortcutClass(_ptr: *GtkShortcutClass): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GtkShortcutClass(_ptr: **GtkShortcutClass): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GtkShortcutClass(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GtkShortcutClass(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GtkShortcutClass(_q: **GQueue): void <cimport,nodecl> end
global function GTK_SHORTCUT(ptr: gpointer): *GtkShortcut <cimport,nodecl> end
global function GTK_IS_SHORTCUT(ptr: gpointer): gboolean <cimport,nodecl> end
global function gtk_shortcut_new(trigger: *GtkShortcutTrigger, action: *GtkShortcutAction): *GtkShortcut <cimport,nodecl> end
global function gtk_shortcut_new_with_arguments(trigger: *GtkShortcutTrigger, action: *GtkShortcutAction, format_string: cstring, ...: cvarargs): *GtkShortcut <cimport,nodecl> end
global function gtk_shortcut_get_trigger(self: *GtkShortcut): *GtkShortcutTrigger <cimport,nodecl> end
global function gtk_shortcut_set_trigger(self: *GtkShortcut, trigger: *GtkShortcutTrigger): void <cimport,nodecl> end
global function gtk_shortcut_get_action(self: *GtkShortcut): *GtkShortcutAction <cimport,nodecl> end
global function gtk_shortcut_set_action(self: *GtkShortcut, action: *GtkShortcutAction): void <cimport,nodecl> end
global function gtk_shortcut_get_arguments(self: *GtkShortcut): *GVariant <cimport,nodecl> end
global function gtk_shortcut_set_arguments(self: *GtkShortcut, args: *GVariant): void <cimport,nodecl> end
global function gtk_shortcut_action_get_type(): GType <cimport,nodecl> end
global function glib_autoptr_clear_GtkShortcutAction(_ptr: *GtkShortcutAction): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GtkShortcutAction(_ptr: **GtkShortcutAction): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GtkShortcutAction(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GtkShortcutAction(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GtkShortcutAction(_q: **GQueue): void <cimport,nodecl> end
global function glib_autoptr_clear_GtkShortcutActionClass(_ptr: *GtkShortcutActionClass): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GtkShortcutActionClass(_ptr: **GtkShortcutActionClass): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GtkShortcutActionClass(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GtkShortcutActionClass(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GtkShortcutActionClass(_q: **GQueue): void <cimport,nodecl> end
global function GTK_SHORTCUT_ACTION(ptr: gpointer): *GtkShortcutAction <cimport,nodecl> end
global function GTK_SHORTCUT_ACTION_CLASS(ptr: gpointer): *GtkShortcutActionClass <cimport,nodecl> end
global function GTK_IS_SHORTCUT_ACTION(ptr: gpointer): gboolean <cimport,nodecl> end
global function GTK_IS_SHORTCUT_ACTION_CLASS(ptr: gpointer): gboolean <cimport,nodecl> end
global function GTK_SHORTCUT_ACTION_GET_CLASS(ptr: gpointer): *GtkShortcutActionClass <cimport,nodecl> end
global function gtk_shortcut_action_to_string(self: *GtkShortcutAction): cstring <cimport,nodecl> end
global function gtk_shortcut_action_parse_string(string: cstring): *GtkShortcutAction <cimport,nodecl> end
global function gtk_shortcut_action_print(self: *GtkShortcutAction, string: *GString): void <cimport,nodecl> end
global function gtk_shortcut_action_activate(self: *GtkShortcutAction, flags: GtkShortcutActionFlags, widget: *GtkWidget, args: *GVariant): gboolean <cimport,nodecl> end
global function gtk_nothing_action_get_type(): GType <cimport,nodecl> end
global function glib_autoptr_clear_GtkNothingAction(_ptr: *GtkNothingAction): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GtkNothingAction(_ptr: **GtkNothingAction): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GtkNothingAction(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GtkNothingAction(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GtkNothingAction(_q: **GQueue): void <cimport,nodecl> end
global function glib_autoptr_clear_GtkNothingActionClass(_ptr: *GtkNothingActionClass): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GtkNothingActionClass(_ptr: **GtkNothingActionClass): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GtkNothingActionClass(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GtkNothingActionClass(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GtkNothingActionClass(_q: **GQueue): void <cimport,nodecl> end
global function GTK_NOTHING_ACTION(ptr: gpointer): *GtkNothingAction <cimport,nodecl> end
global function GTK_NOTHING_ACTION_CLASS(ptr: gpointer): *GtkNothingActionClass <cimport,nodecl> end
global function GTK_IS_NOTHING_ACTION(ptr: gpointer): gboolean <cimport,nodecl> end
global function GTK_IS_NOTHING_ACTION_CLASS(ptr: gpointer): gboolean <cimport,nodecl> end
global function GTK_NOTHING_ACTION_GET_CLASS(ptr: gpointer): *GtkNothingActionClass <cimport,nodecl> end
global function gtk_nothing_action_get(): *GtkShortcutAction <cimport,nodecl> end
global function gtk_callback_action_get_type(): GType <cimport,nodecl> end
global function glib_autoptr_clear_GtkCallbackAction(_ptr: *GtkCallbackAction): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GtkCallbackAction(_ptr: **GtkCallbackAction): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GtkCallbackAction(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GtkCallbackAction(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GtkCallbackAction(_q: **GQueue): void <cimport,nodecl> end
global function glib_autoptr_clear_GtkCallbackActionClass(_ptr: *GtkCallbackActionClass): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GtkCallbackActionClass(_ptr: **GtkCallbackActionClass): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GtkCallbackActionClass(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GtkCallbackActionClass(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GtkCallbackActionClass(_q: **GQueue): void <cimport,nodecl> end
global function GTK_CALLBACK_ACTION(ptr: gpointer): *GtkCallbackAction <cimport,nodecl> end
global function GTK_CALLBACK_ACTION_CLASS(ptr: gpointer): *GtkCallbackActionClass <cimport,nodecl> end
global function GTK_IS_CALLBACK_ACTION(ptr: gpointer): gboolean <cimport,nodecl> end
global function GTK_IS_CALLBACK_ACTION_CLASS(ptr: gpointer): gboolean <cimport,nodecl> end
global function GTK_CALLBACK_ACTION_GET_CLASS(ptr: gpointer): *GtkCallbackActionClass <cimport,nodecl> end
global function gtk_callback_action_new(callback: GtkShortcutFunc, data: gpointer, destroy: GDestroyNotify): *GtkShortcutAction <cimport,nodecl> end
global function gtk_mnemonic_action_get_type(): GType <cimport,nodecl> end
global function glib_autoptr_clear_GtkMnemonicAction(_ptr: *GtkMnemonicAction): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GtkMnemonicAction(_ptr: **GtkMnemonicAction): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GtkMnemonicAction(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GtkMnemonicAction(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GtkMnemonicAction(_q: **GQueue): void <cimport,nodecl> end
global function glib_autoptr_clear_GtkMnemonicActionClass(_ptr: *GtkMnemonicActionClass): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GtkMnemonicActionClass(_ptr: **GtkMnemonicActionClass): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GtkMnemonicActionClass(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GtkMnemonicActionClass(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GtkMnemonicActionClass(_q: **GQueue): void <cimport,nodecl> end
global function GTK_MNEMONIC_ACTION(ptr: gpointer): *GtkMnemonicAction <cimport,nodecl> end
global function GTK_MNEMONIC_ACTION_CLASS(ptr: gpointer): *GtkMnemonicActionClass <cimport,nodecl> end
global function GTK_IS_MNEMONIC_ACTION(ptr: gpointer): gboolean <cimport,nodecl> end
global function GTK_IS_MNEMONIC_ACTION_CLASS(ptr: gpointer): gboolean <cimport,nodecl> end
global function GTK_MNEMONIC_ACTION_GET_CLASS(ptr: gpointer): *GtkMnemonicActionClass <cimport,nodecl> end
global function gtk_mnemonic_action_get(): *GtkShortcutAction <cimport,nodecl> end
global function gtk_activate_action_get_type(): GType <cimport,nodecl> end
global function glib_autoptr_clear_GtkActivateAction(_ptr: *GtkActivateAction): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GtkActivateAction(_ptr: **GtkActivateAction): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GtkActivateAction(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GtkActivateAction(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GtkActivateAction(_q: **GQueue): void <cimport,nodecl> end
global function glib_autoptr_clear_GtkActivateActionClass(_ptr: *GtkActivateActionClass): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GtkActivateActionClass(_ptr: **GtkActivateActionClass): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GtkActivateActionClass(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GtkActivateActionClass(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GtkActivateActionClass(_q: **GQueue): void <cimport,nodecl> end
global function GTK_ACTIVATE_ACTION(ptr: gpointer): *GtkActivateAction <cimport,nodecl> end
global function GTK_ACTIVATE_ACTION_CLASS(ptr: gpointer): *GtkActivateActionClass <cimport,nodecl> end
global function GTK_IS_ACTIVATE_ACTION(ptr: gpointer): gboolean <cimport,nodecl> end
global function GTK_IS_ACTIVATE_ACTION_CLASS(ptr: gpointer): gboolean <cimport,nodecl> end
global function GTK_ACTIVATE_ACTION_GET_CLASS(ptr: gpointer): *GtkActivateActionClass <cimport,nodecl> end
global function gtk_activate_action_get(): *GtkShortcutAction <cimport,nodecl> end
global function gtk_signal_action_get_type(): GType <cimport,nodecl> end
global function glib_autoptr_clear_GtkSignalAction(_ptr: *GtkSignalAction): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GtkSignalAction(_ptr: **GtkSignalAction): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GtkSignalAction(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GtkSignalAction(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GtkSignalAction(_q: **GQueue): void <cimport,nodecl> end
global function glib_autoptr_clear_GtkSignalActionClass(_ptr: *GtkSignalActionClass): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GtkSignalActionClass(_ptr: **GtkSignalActionClass): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GtkSignalActionClass(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GtkSignalActionClass(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GtkSignalActionClass(_q: **GQueue): void <cimport,nodecl> end
global function GTK_SIGNAL_ACTION(ptr: gpointer): *GtkSignalAction <cimport,nodecl> end
global function GTK_SIGNAL_ACTION_CLASS(ptr: gpointer): *GtkSignalActionClass <cimport,nodecl> end
global function GTK_IS_SIGNAL_ACTION(ptr: gpointer): gboolean <cimport,nodecl> end
global function GTK_IS_SIGNAL_ACTION_CLASS(ptr: gpointer): gboolean <cimport,nodecl> end
global function GTK_SIGNAL_ACTION_GET_CLASS(ptr: gpointer): *GtkSignalActionClass <cimport,nodecl> end
global function gtk_signal_action_new(signal_name: cstring): *GtkShortcutAction <cimport,nodecl> end
global function gtk_signal_action_get_signal_name(self: *GtkSignalAction): cstring <cimport,nodecl> end
global function gtk_named_action_get_type(): GType <cimport,nodecl> end
global function glib_autoptr_clear_GtkNamedAction(_ptr: *GtkNamedAction): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GtkNamedAction(_ptr: **GtkNamedAction): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GtkNamedAction(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GtkNamedAction(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GtkNamedAction(_q: **GQueue): void <cimport,nodecl> end
global function glib_autoptr_clear_GtkNamedActionClass(_ptr: *GtkNamedActionClass): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GtkNamedActionClass(_ptr: **GtkNamedActionClass): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GtkNamedActionClass(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GtkNamedActionClass(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GtkNamedActionClass(_q: **GQueue): void <cimport,nodecl> end
global function GTK_NAMED_ACTION(ptr: gpointer): *GtkNamedAction <cimport,nodecl> end
global function GTK_NAMED_ACTION_CLASS(ptr: gpointer): *GtkNamedActionClass <cimport,nodecl> end
global function GTK_IS_NAMED_ACTION(ptr: gpointer): gboolean <cimport,nodecl> end
global function GTK_IS_NAMED_ACTION_CLASS(ptr: gpointer): gboolean <cimport,nodecl> end
global function GTK_NAMED_ACTION_GET_CLASS(ptr: gpointer): *GtkNamedActionClass <cimport,nodecl> end
global function gtk_named_action_new(name: cstring): *GtkShortcutAction <cimport,nodecl> end
global function gtk_named_action_get_action_name(self: *GtkNamedAction): cstring <cimport,nodecl> end
global function gtk_widget_get_type(): GType <cimport,nodecl> end
global function gtk_widget_unparent(widget: *GtkWidget): void <cimport,nodecl> end
global function gtk_widget_show(widget: *GtkWidget): void <cimport,nodecl> end
global function gtk_widget_hide(widget: *GtkWidget): void <cimport,nodecl> end
global function gtk_widget_map(widget: *GtkWidget): void <cimport,nodecl> end
global function gtk_widget_unmap(widget: *GtkWidget): void <cimport,nodecl> end
global function gtk_widget_realize(widget: *GtkWidget): void <cimport,nodecl> end
global function gtk_widget_unrealize(widget: *GtkWidget): void <cimport,nodecl> end
global function gtk_widget_queue_draw(widget: *GtkWidget): void <cimport,nodecl> end
global function gtk_widget_queue_resize(widget: *GtkWidget): void <cimport,nodecl> end
global function gtk_widget_queue_allocate(widget: *GtkWidget): void <cimport,nodecl> end
global function gtk_widget_get_frame_clock(widget: *GtkWidget): *GdkFrameClock <cimport,nodecl> end
global function gtk_widget_size_allocate(widget: *GtkWidget, allocation: *GtkAllocation, baseline: cint): void <cimport,nodecl> end
global function gtk_widget_allocate(widget: *GtkWidget, width: cint, height: cint, baseline: cint, transform: *GskTransform): void <cimport,nodecl> end
global function gtk_widget_get_request_mode(widget: *GtkWidget): GtkSizeRequestMode <cimport,nodecl> end
global function gtk_widget_measure(widget: *GtkWidget, orientation: GtkOrientation, for_size: cint, minimum: *cint, natural: *cint, minimum_baseline: *cint, natural_baseline: *cint): void <cimport,nodecl> end
global function gtk_widget_get_preferred_size(widget: *GtkWidget, minimum_size: *GtkRequisition, natural_size: *GtkRequisition): void <cimport,nodecl> end
global function gtk_widget_set_layout_manager(widget: *GtkWidget, layout_manager: *GtkLayoutManager): void <cimport,nodecl> end
global function gtk_widget_get_layout_manager(widget: *GtkWidget): *GtkLayoutManager <cimport,nodecl> end
global function gtk_widget_class_set_layout_manager_type(widget_class: *GtkWidgetClass, type: GType): void <cimport,nodecl> end
global function gtk_widget_class_get_layout_manager_type(widget_class: *GtkWidgetClass): GType <cimport,nodecl> end
global function gtk_widget_class_add_binding(widget_class: *GtkWidgetClass, keyval: guint, mods: GdkModifierType, callback: GtkShortcutFunc, format_string: cstring, ...: cvarargs): void <cimport,nodecl> end
global function gtk_widget_class_add_binding_signal(widget_class: *GtkWidgetClass, keyval: guint, mods: GdkModifierType, signal: cstring, format_string: cstring, ...: cvarargs): void <cimport,nodecl> end
global function gtk_widget_class_add_binding_action(widget_class: *GtkWidgetClass, keyval: guint, mods: GdkModifierType, action_name: cstring, format_string: cstring, ...: cvarargs): void <cimport,nodecl> end
global function gtk_widget_class_add_shortcut(widget_class: *GtkWidgetClass, shortcut: *GtkShortcut): void <cimport,nodecl> end
global function gtk_widget_class_set_activate_signal(widget_class: *GtkWidgetClass, signal_id: guint): void <cimport,nodecl> end
global function gtk_widget_class_set_activate_signal_from_name(widget_class: *GtkWidgetClass, signal_name: cstring): void <cimport,nodecl> end
global function gtk_widget_class_get_activate_signal(widget_class: *GtkWidgetClass): guint <cimport,nodecl> end
global function gtk_widget_mnemonic_activate(widget: *GtkWidget, group_cycling: gboolean): gboolean <cimport,nodecl> end
global function gtk_widget_activate(widget: *GtkWidget): gboolean <cimport,nodecl> end
global function gtk_widget_set_can_focus(widget: *GtkWidget, can_focus: gboolean): void <cimport,nodecl> end
global function gtk_widget_get_can_focus(widget: *GtkWidget): gboolean <cimport,nodecl> end
global function gtk_widget_set_focusable(widget: *GtkWidget, focusable: gboolean): void <cimport,nodecl> end
global function gtk_widget_get_focusable(widget: *GtkWidget): gboolean <cimport,nodecl> end
global function gtk_widget_has_focus(widget: *GtkWidget): gboolean <cimport,nodecl> end
global function gtk_widget_is_focus(widget: *GtkWidget): gboolean <cimport,nodecl> end
global function gtk_widget_has_visible_focus(widget: *GtkWidget): gboolean <cimport,nodecl> end
global function gtk_widget_grab_focus(widget: *GtkWidget): gboolean <cimport,nodecl> end
global function gtk_widget_set_focus_on_click(widget: *GtkWidget, focus_on_click: gboolean): void <cimport,nodecl> end
global function gtk_widget_get_focus_on_click(widget: *GtkWidget): gboolean <cimport,nodecl> end
global function gtk_widget_set_can_target(widget: *GtkWidget, can_target: gboolean): void <cimport,nodecl> end
global function gtk_widget_get_can_target(widget: *GtkWidget): gboolean <cimport,nodecl> end
global function gtk_widget_has_default(widget: *GtkWidget): gboolean <cimport,nodecl> end
global function gtk_widget_set_receives_default(widget: *GtkWidget, receives_default: gboolean): void <cimport,nodecl> end
global function gtk_widget_get_receives_default(widget: *GtkWidget): gboolean <cimport,nodecl> end
global function gtk_widget_set_name(widget: *GtkWidget, name: cstring): void <cimport,nodecl> end
global function gtk_widget_get_name(widget: *GtkWidget): cstring <cimport,nodecl> end
global function gtk_widget_set_state_flags(widget: *GtkWidget, flags: GtkStateFlags, clear: gboolean): void <cimport,nodecl> end
global function gtk_widget_unset_state_flags(widget: *GtkWidget, flags: GtkStateFlags): void <cimport,nodecl> end
global function gtk_widget_get_state_flags(widget: *GtkWidget): GtkStateFlags <cimport,nodecl> end
global function gtk_widget_set_sensitive(widget: *GtkWidget, sensitive: gboolean): void <cimport,nodecl> end
global function gtk_widget_get_sensitive(widget: *GtkWidget): gboolean <cimport,nodecl> end
global function gtk_widget_is_sensitive(widget: *GtkWidget): gboolean <cimport,nodecl> end
global function gtk_widget_set_visible(widget: *GtkWidget, visible: gboolean): void <cimport,nodecl> end
global function gtk_widget_get_visible(widget: *GtkWidget): gboolean <cimport,nodecl> end
global function gtk_widget_is_visible(widget: *GtkWidget): gboolean <cimport,nodecl> end
global function gtk_widget_is_drawable(widget: *GtkWidget): gboolean <cimport,nodecl> end
global function gtk_widget_get_realized(widget: *GtkWidget): gboolean <cimport,nodecl> end
global function gtk_widget_get_mapped(widget: *GtkWidget): gboolean <cimport,nodecl> end
global function gtk_widget_set_parent(widget: *GtkWidget, parent: *GtkWidget): void <cimport,nodecl> end
global function gtk_widget_get_parent(widget: *GtkWidget): *GtkWidget <cimport,nodecl> end
global function gtk_widget_get_root(widget: *GtkWidget): *GtkRoot <cimport,nodecl> end
global function gtk_widget_get_native(widget: *GtkWidget): *GtkNative <cimport,nodecl> end
global function gtk_widget_set_child_visible(widget: *GtkWidget, child_visible: gboolean): void <cimport,nodecl> end
global function gtk_widget_get_child_visible(widget: *GtkWidget): gboolean <cimport,nodecl> end
global function gtk_widget_get_allocated_width(widget: *GtkWidget): cint <cimport,nodecl> end
global function gtk_widget_get_allocated_height(widget: *GtkWidget): cint <cimport,nodecl> end
global function gtk_widget_get_allocated_baseline(widget: *GtkWidget): cint <cimport,nodecl> end
global function gtk_widget_get_allocation(widget: *GtkWidget, allocation: *GtkAllocation): void <cimport,nodecl> end
global function gtk_widget_compute_transform(widget: *GtkWidget, target: *GtkWidget, out_transform: *graphene_matrix_t): gboolean <cimport,nodecl> end
global function gtk_widget_compute_bounds(widget: *GtkWidget, target: *GtkWidget, out_bounds: *graphene_rect_t): gboolean <cimport,nodecl> end
global function gtk_widget_compute_point(widget: *GtkWidget, target: *GtkWidget, point: *graphene_point_t, out_point: *graphene_point_t): gboolean <cimport,nodecl> end
global function gtk_widget_get_width(widget: *GtkWidget): cint <cimport,nodecl> end
global function gtk_widget_get_height(widget: *GtkWidget): cint <cimport,nodecl> end
global function gtk_widget_get_size(widget: *GtkWidget, orientation: GtkOrientation): cint <cimport,nodecl> end
global function gtk_widget_child_focus(widget: *GtkWidget, direction: GtkDirectionType): gboolean <cimport,nodecl> end
global function gtk_widget_keynav_failed(widget: *GtkWidget, direction: GtkDirectionType): gboolean <cimport,nodecl> end
global function gtk_widget_error_bell(widget: *GtkWidget): void <cimport,nodecl> end
global function gtk_widget_set_size_request(widget: *GtkWidget, width: cint, height: cint): void <cimport,nodecl> end
global function gtk_widget_get_size_request(widget: *GtkWidget, width: *cint, height: *cint): void <cimport,nodecl> end
global function gtk_widget_set_opacity(widget: *GtkWidget, opacity: float64): void <cimport,nodecl> end
global function gtk_widget_get_opacity(widget: *GtkWidget): float64 <cimport,nodecl> end
global function gtk_widget_set_overflow(widget: *GtkWidget, overflow: GtkOverflow): void <cimport,nodecl> end
global function gtk_widget_get_overflow(widget: *GtkWidget): GtkOverflow <cimport,nodecl> end
global function gtk_widget_get_ancestor(widget: *GtkWidget, widget_type: GType): *GtkWidget <cimport,nodecl> end
global function gtk_widget_get_scale_factor(widget: *GtkWidget): cint <cimport,nodecl> end
global function gtk_widget_get_display(widget: *GtkWidget): *GdkDisplay <cimport,nodecl> end
global function gtk_widget_get_settings(widget: *GtkWidget): *GtkSettings <cimport,nodecl> end
global function gtk_widget_get_clipboard(widget: *GtkWidget): *GdkClipboard <cimport,nodecl> end
global function gtk_widget_get_primary_clipboard(widget: *GtkWidget): *GdkClipboard <cimport,nodecl> end
global function gtk_widget_get_hexpand(widget: *GtkWidget): gboolean <cimport,nodecl> end
global function gtk_widget_set_hexpand(widget: *GtkWidget, expand: gboolean): void <cimport,nodecl> end
global function gtk_widget_get_hexpand_set(widget: *GtkWidget): gboolean <cimport,nodecl> end
global function gtk_widget_set_hexpand_set(widget: *GtkWidget, set: gboolean): void <cimport,nodecl> end
global function gtk_widget_get_vexpand(widget: *GtkWidget): gboolean <cimport,nodecl> end
global function gtk_widget_set_vexpand(widget: *GtkWidget, expand: gboolean): void <cimport,nodecl> end
global function gtk_widget_get_vexpand_set(widget: *GtkWidget): gboolean <cimport,nodecl> end
global function gtk_widget_set_vexpand_set(widget: *GtkWidget, set: gboolean): void <cimport,nodecl> end
global function gtk_widget_compute_expand(widget: *GtkWidget, orientation: GtkOrientation): gboolean <cimport,nodecl> end
global function gtk_widget_get_halign(widget: *GtkWidget): GtkAlign <cimport,nodecl> end
global function gtk_widget_set_halign(widget: *GtkWidget, align: GtkAlign): void <cimport,nodecl> end
global function gtk_widget_get_valign(widget: *GtkWidget): GtkAlign <cimport,nodecl> end
global function gtk_widget_set_valign(widget: *GtkWidget, align: GtkAlign): void <cimport,nodecl> end
global function gtk_widget_get_margin_start(widget: *GtkWidget): cint <cimport,nodecl> end
global function gtk_widget_set_margin_start(widget: *GtkWidget, margin: cint): void <cimport,nodecl> end
global function gtk_widget_get_margin_end(widget: *GtkWidget): cint <cimport,nodecl> end
global function gtk_widget_set_margin_end(widget: *GtkWidget, margin: cint): void <cimport,nodecl> end
global function gtk_widget_get_margin_top(widget: *GtkWidget): cint <cimport,nodecl> end
global function gtk_widget_set_margin_top(widget: *GtkWidget, margin: cint): void <cimport,nodecl> end
global function gtk_widget_get_margin_bottom(widget: *GtkWidget): cint <cimport,nodecl> end
global function gtk_widget_set_margin_bottom(widget: *GtkWidget, margin: cint): void <cimport,nodecl> end
global function gtk_widget_is_ancestor(widget: *GtkWidget, ancestor: *GtkWidget): gboolean <cimport,nodecl> end
global function gtk_widget_translate_coordinates(src_widget: *GtkWidget, dest_widget: *GtkWidget, src_x: float64, src_y: float64, dest_x: *float64, dest_y: *float64): gboolean <cimport,nodecl> end
global function gtk_widget_contains(widget: *GtkWidget, x: float64, y: float64): gboolean <cimport,nodecl> end
global function gtk_widget_pick(widget: *GtkWidget, x: float64, y: float64, flags: GtkPickFlags): *GtkWidget <cimport,nodecl> end
global function gtk_widget_add_controller(widget: *GtkWidget, controller: *GtkEventController): void <cimport,nodecl> end
global function gtk_widget_remove_controller(widget: *GtkWidget, controller: *GtkEventController): void <cimport,nodecl> end
global function gtk_widget_create_pango_context(widget: *GtkWidget): *PangoContext <cimport,nodecl> end
global function gtk_widget_get_pango_context(widget: *GtkWidget): *PangoContext <cimport,nodecl> end
global function gtk_widget_set_font_options(widget: *GtkWidget, options: *cairo_font_options_t): void <cimport,nodecl> end
global function gtk_widget_get_font_options(widget: *GtkWidget): *cairo_font_options_t <cimport,nodecl> end
global function gtk_widget_create_pango_layout(widget: *GtkWidget, text: cstring): *PangoLayout <cimport,nodecl> end
global function gtk_widget_set_direction(widget: *GtkWidget, dir: GtkTextDirection): void <cimport,nodecl> end
global function gtk_widget_get_direction(widget: *GtkWidget): GtkTextDirection <cimport,nodecl> end
global function gtk_widget_set_default_direction(dir: GtkTextDirection): void <cimport,nodecl> end
global function gtk_widget_get_default_direction(): GtkTextDirection <cimport,nodecl> end
global function gtk_widget_set_cursor(widget: *GtkWidget, cursor: *GdkCursor): void <cimport,nodecl> end
global function gtk_widget_set_cursor_from_name(widget: *GtkWidget, name: cstring): void <cimport,nodecl> end
global function gtk_widget_get_cursor(widget: *GtkWidget): *GdkCursor <cimport,nodecl> end
global function gtk_widget_list_mnemonic_labels(widget: *GtkWidget): *GList <cimport,nodecl> end
global function gtk_widget_add_mnemonic_label(widget: *GtkWidget, label: *GtkWidget): void <cimport,nodecl> end
global function gtk_widget_remove_mnemonic_label(widget: *GtkWidget, label: *GtkWidget): void <cimport,nodecl> end
global function gtk_widget_trigger_tooltip_query(widget: *GtkWidget): void <cimport,nodecl> end
global function gtk_widget_set_tooltip_text(widget: *GtkWidget, text: cstring): void <cimport,nodecl> end
global function gtk_widget_get_tooltip_text(widget: *GtkWidget): cstring <cimport,nodecl> end
global function gtk_widget_set_tooltip_markup(widget: *GtkWidget, markup: cstring): void <cimport,nodecl> end
global function gtk_widget_get_tooltip_markup(widget: *GtkWidget): cstring <cimport,nodecl> end
global function gtk_widget_set_has_tooltip(widget: *GtkWidget, has_tooltip: gboolean): void <cimport,nodecl> end
global function gtk_widget_get_has_tooltip(widget: *GtkWidget): gboolean <cimport,nodecl> end
global function gtk_requisition_get_type(): GType <cimport,nodecl> end
global function gtk_requisition_new(): *GtkRequisition <cimport,nodecl> end
global function gtk_requisition_copy(requisition: *GtkRequisition): *GtkRequisition <cimport,nodecl> end
global function gtk_requisition_free(requisition: *GtkRequisition): void <cimport,nodecl> end
global function gtk_widget_in_destruction(widget: *GtkWidget): gboolean <cimport,nodecl> end
global function gtk_widget_get_style_context(widget: *GtkWidget): *GtkStyleContext <cimport,nodecl> end
global function gtk_widget_class_set_css_name(widget_class: *GtkWidgetClass, name: cstring): void <cimport,nodecl> end
global function gtk_widget_class_get_css_name(widget_class: *GtkWidgetClass): cstring <cimport,nodecl> end
global function gtk_widget_add_tick_callback(widget: *GtkWidget, callback: GtkTickCallback, user_data: gpointer, notify: GDestroyNotify): guint <cimport,nodecl> end
global function gtk_widget_remove_tick_callback(widget: *GtkWidget, id: guint): void <cimport,nodecl> end
global function gtk_widget_init_template(widget: *GtkWidget): void <cimport,nodecl> end
global function gtk_widget_get_template_child(widget: *GtkWidget, widget_type: GType, name: cstring): *GObject <cimport,nodecl> end
global function gtk_widget_class_set_template(widget_class: *GtkWidgetClass, template_bytes: *GBytes): void <cimport,nodecl> end
global function gtk_widget_class_set_template_from_resource(widget_class: *GtkWidgetClass, resource_name: cstring): void <cimport,nodecl> end
global function gtk_widget_class_bind_template_callback_full(widget_class: *GtkWidgetClass, callback_name: cstring, callback_symbol: GCallback): void <cimport,nodecl> end
global function gtk_widget_class_set_template_scope(widget_class: *GtkWidgetClass, scope: *GtkBuilderScope): void <cimport,nodecl> end
global function gtk_widget_class_bind_template_child_full(widget_class: *GtkWidgetClass, name: cstring, internal_child: gboolean, struct_offset: gssize): void <cimport,nodecl> end
global function gtk_widget_insert_action_group(widget: *GtkWidget, name: cstring, group: *GActionGroup): void <cimport,nodecl> end
global function gtk_widget_activate_action(widget: *GtkWidget, name: cstring, format_string: cstring, ...: cvarargs): gboolean <cimport,nodecl> end
global function gtk_widget_activate_action_variant(widget: *GtkWidget, name: cstring, args: *GVariant): gboolean <cimport,nodecl> end
global function gtk_widget_activate_default(widget: *GtkWidget): void <cimport,nodecl> end
global function gtk_widget_set_font_map(widget: *GtkWidget, font_map: *PangoFontMap): void <cimport,nodecl> end
global function gtk_widget_get_font_map(widget: *GtkWidget): *PangoFontMap <cimport,nodecl> end
global function gtk_widget_get_first_child(widget: *GtkWidget): *GtkWidget <cimport,nodecl> end
global function gtk_widget_get_last_child(widget: *GtkWidget): *GtkWidget <cimport,nodecl> end
global function gtk_widget_get_next_sibling(widget: *GtkWidget): *GtkWidget <cimport,nodecl> end
global function gtk_widget_get_prev_sibling(widget: *GtkWidget): *GtkWidget <cimport,nodecl> end
global function gtk_widget_observe_children(widget: *GtkWidget): *GListModel <cimport,nodecl> end
global function gtk_widget_observe_controllers(widget: *GtkWidget): *GListModel <cimport,nodecl> end
global function gtk_widget_insert_after(widget: *GtkWidget, parent: *GtkWidget, previous_sibling: *GtkWidget): void <cimport,nodecl> end
global function gtk_widget_insert_before(widget: *GtkWidget, parent: *GtkWidget, next_sibling: *GtkWidget): void <cimport,nodecl> end
global function gtk_widget_set_focus_child(widget: *GtkWidget, child: *GtkWidget): void <cimport,nodecl> end
global function gtk_widget_get_focus_child(widget: *GtkWidget): *GtkWidget <cimport,nodecl> end
global function gtk_widget_snapshot_child(widget: *GtkWidget, child: *GtkWidget, snapshot: *GtkSnapshot): void <cimport,nodecl> end
global function gtk_widget_should_layout(widget: *GtkWidget): gboolean <cimport,nodecl> end
global function gtk_widget_get_css_name(self: *GtkWidget): cstring <cimport,nodecl> end
global function gtk_widget_add_css_class(widget: *GtkWidget, css_class: cstring): void <cimport,nodecl> end
global function gtk_widget_remove_css_class(widget: *GtkWidget, css_class: cstring): void <cimport,nodecl> end
global function gtk_widget_has_css_class(widget: *GtkWidget, css_class: cstring): gboolean <cimport,nodecl> end
global function gtk_widget_get_css_classes(widget: *GtkWidget): *cstring <cimport,nodecl> end
global function gtk_widget_set_css_classes(widget: *GtkWidget, classes: *cstring): void <cimport,nodecl> end
global function gtk_widget_class_install_action(widget_class: *GtkWidgetClass, action_name: cstring, parameter_type: cstring, activate: GtkWidgetActionActivateFunc): void <cimport,nodecl> end
global function gtk_widget_class_install_property_action(widget_class: *GtkWidgetClass, action_name: cstring, property_name: cstring): void <cimport,nodecl> end
global function gtk_widget_class_query_action(widget_class: *GtkWidgetClass, index_: guint, owner: *GType, action_name: *cstring, parameter_type: **GVariantType, property_name: *cstring): gboolean <cimport,nodecl> end
global function gtk_widget_action_set_enabled(widget: *GtkWidget, action_name: cstring, enabled: gboolean): void <cimport,nodecl> end
global function gtk_widget_class_set_accessible_role(widget_class: *GtkWidgetClass, accessible_role: GtkAccessibleRole): void <cimport,nodecl> end
global function gtk_widget_class_get_accessible_role(widget_class: *GtkWidgetClass): GtkAccessibleRole <cimport,nodecl> end
global function glib_autoptr_clear_GtkWidget(_ptr: *GtkWidget): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GtkWidget(_ptr: **GtkWidget): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GtkWidget(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GtkWidget(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GtkWidget(_q: **GQueue): void <cimport,nodecl> end
global function glib_autoptr_clear_GtkRequisition(_ptr: *GtkRequisition): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GtkRequisition(_ptr: **GtkRequisition): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GtkRequisition(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GtkRequisition(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GtkRequisition(_q: **GQueue): void <cimport,nodecl> end
global function gtk_application_get_type(): GType <cimport,nodecl> end
global function gtk_application_new(application_id: cstring, flags: GApplicationFlags): *GtkApplication <cimport,nodecl> end
global function gtk_application_add_window(application: *GtkApplication, window: *GtkWindow): void <cimport,nodecl> end
global function gtk_application_remove_window(application: *GtkApplication, window: *GtkWindow): void <cimport,nodecl> end
global function gtk_application_get_windows(application: *GtkApplication): *GList <cimport,nodecl> end
global function gtk_application_get_menubar(application: *GtkApplication): *GMenuModel <cimport,nodecl> end
global function gtk_application_set_menubar(application: *GtkApplication, menubar: *GMenuModel): void <cimport,nodecl> end
global function gtk_application_inhibit(application: *GtkApplication, window: *GtkWindow, flags: GtkApplicationInhibitFlags, reason: cstring): guint <cimport,nodecl> end
global function gtk_application_uninhibit(application: *GtkApplication, cookie: guint): void <cimport,nodecl> end
global function gtk_application_get_window_by_id(application: *GtkApplication, id: guint): *GtkWindow <cimport,nodecl> end
global function gtk_application_get_active_window(application: *GtkApplication): *GtkWindow <cimport,nodecl> end
global function gtk_application_list_action_descriptions(application: *GtkApplication): *cstring <cimport,nodecl> end
global function gtk_application_get_accels_for_action(application: *GtkApplication, detailed_action_name: cstring): *cstring <cimport,nodecl> end
global function gtk_application_get_actions_for_accel(application: *GtkApplication, accel: cstring): *cstring <cimport,nodecl> end
global function gtk_application_set_accels_for_action(application: *GtkApplication, detailed_action_name: cstring, accels: *cstring): void <cimport,nodecl> end
global function gtk_application_get_menu_by_id(application: *GtkApplication, id: cstring): *GMenu <cimport,nodecl> end
global function glib_autoptr_clear_GtkApplication(_ptr: *GtkApplication): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GtkApplication(_ptr: **GtkApplication): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GtkApplication(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GtkApplication(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GtkApplication(_q: **GQueue): void <cimport,nodecl> end
global function gtk_window_get_type(): GType <cimport,nodecl> end
global function gtk_window_new(): *GtkWidget <cimport,nodecl> end
global function gtk_window_set_title(window: *GtkWindow, title: cstring): void <cimport,nodecl> end
global function gtk_window_get_title(window: *GtkWindow): cstring <cimport,nodecl> end
global function gtk_window_set_startup_id(window: *GtkWindow, startup_id: cstring): void <cimport,nodecl> end
global function gtk_window_set_focus(window: *GtkWindow, focus: *GtkWidget): void <cimport,nodecl> end
global function gtk_window_get_focus(window: *GtkWindow): *GtkWidget <cimport,nodecl> end
global function gtk_window_set_default_widget(window: *GtkWindow, default_widget: *GtkWidget): void <cimport,nodecl> end
global function gtk_window_get_default_widget(window: *GtkWindow): *GtkWidget <cimport,nodecl> end
global function gtk_window_set_transient_for(window: *GtkWindow, parent: *GtkWindow): void <cimport,nodecl> end
global function gtk_window_get_transient_for(window: *GtkWindow): *GtkWindow <cimport,nodecl> end
global function gtk_window_set_destroy_with_parent(window: *GtkWindow, setting: gboolean): void <cimport,nodecl> end
global function gtk_window_get_destroy_with_parent(window: *GtkWindow): gboolean <cimport,nodecl> end
global function gtk_window_set_hide_on_close(window: *GtkWindow, setting: gboolean): void <cimport,nodecl> end
global function gtk_window_get_hide_on_close(window: *GtkWindow): gboolean <cimport,nodecl> end
global function gtk_window_set_mnemonics_visible(window: *GtkWindow, setting: gboolean): void <cimport,nodecl> end
global function gtk_window_get_mnemonics_visible(window: *GtkWindow): gboolean <cimport,nodecl> end
global function gtk_window_set_focus_visible(window: *GtkWindow, setting: gboolean): void <cimport,nodecl> end
global function gtk_window_get_focus_visible(window: *GtkWindow): gboolean <cimport,nodecl> end
global function gtk_window_set_resizable(window: *GtkWindow, resizable: gboolean): void <cimport,nodecl> end
global function gtk_window_get_resizable(window: *GtkWindow): gboolean <cimport,nodecl> end
global function gtk_window_set_display(window: *GtkWindow, display: *GdkDisplay): void <cimport,nodecl> end
global function gtk_window_is_active(window: *GtkWindow): gboolean <cimport,nodecl> end
global function gtk_window_set_decorated(window: *GtkWindow, setting: gboolean): void <cimport,nodecl> end
global function gtk_window_get_decorated(window: *GtkWindow): gboolean <cimport,nodecl> end
global function gtk_window_set_deletable(window: *GtkWindow, setting: gboolean): void <cimport,nodecl> end
global function gtk_window_get_deletable(window: *GtkWindow): gboolean <cimport,nodecl> end
global function gtk_window_set_icon_name(window: *GtkWindow, name: cstring): void <cimport,nodecl> end
global function gtk_window_get_icon_name(window: *GtkWindow): cstring <cimport,nodecl> end
global function gtk_window_set_default_icon_name(name: cstring): void <cimport,nodecl> end
global function gtk_window_get_default_icon_name(): cstring <cimport,nodecl> end
global function gtk_window_set_auto_startup_notification(setting: gboolean): void <cimport,nodecl> end
global function gtk_window_set_modal(window: *GtkWindow, modal: gboolean): void <cimport,nodecl> end
global function gtk_window_get_modal(window: *GtkWindow): gboolean <cimport,nodecl> end
global function gtk_window_get_toplevels(): *GListModel <cimport,nodecl> end
global function gtk_window_list_toplevels(): *GList <cimport,nodecl> end
global function gtk_window_present(window: *GtkWindow): void <cimport,nodecl> end
global function gtk_window_present_with_time(window: *GtkWindow, timestamp: guint32): void <cimport,nodecl> end
global function gtk_window_minimize(window: *GtkWindow): void <cimport,nodecl> end
global function gtk_window_unminimize(window: *GtkWindow): void <cimport,nodecl> end
global function gtk_window_maximize(window: *GtkWindow): void <cimport,nodecl> end
global function gtk_window_unmaximize(window: *GtkWindow): void <cimport,nodecl> end
global function gtk_window_fullscreen(window: *GtkWindow): void <cimport,nodecl> end
global function gtk_window_unfullscreen(window: *GtkWindow): void <cimport,nodecl> end
global function gtk_window_fullscreen_on_monitor(window: *GtkWindow, monitor: *GdkMonitor): void <cimport,nodecl> end
global function gtk_window_close(window: *GtkWindow): void <cimport,nodecl> end
global function gtk_window_set_default_size(window: *GtkWindow, width: cint, height: cint): void <cimport,nodecl> end
global function gtk_window_get_default_size(window: *GtkWindow, width: *cint, height: *cint): void <cimport,nodecl> end
global function gtk_window_get_group(window: *GtkWindow): *GtkWindowGroup <cimport,nodecl> end
global function gtk_window_has_group(window: *GtkWindow): gboolean <cimport,nodecl> end
global function gtk_window_get_application(window: *GtkWindow): *GtkApplication <cimport,nodecl> end
global function gtk_window_set_application(window: *GtkWindow, application: *GtkApplication): void <cimport,nodecl> end
global function gtk_window_set_child(window: *GtkWindow, child: *GtkWidget): void <cimport,nodecl> end
global function gtk_window_get_child(window: *GtkWindow): *GtkWidget <cimport,nodecl> end
global function gtk_window_set_titlebar(window: *GtkWindow, titlebar: *GtkWidget): void <cimport,nodecl> end
global function gtk_window_get_titlebar(window: *GtkWindow): *GtkWidget <cimport,nodecl> end
global function gtk_window_is_maximized(window: *GtkWindow): gboolean <cimport,nodecl> end
global function gtk_window_is_fullscreen(window: *GtkWindow): gboolean <cimport,nodecl> end
global function gtk_window_destroy(window: *GtkWindow): void <cimport,nodecl> end
global function gtk_window_set_interactive_debugging(enable: gboolean): void <cimport,nodecl> end
global function gtk_window_set_handle_menubar_accel(window: *GtkWindow, handle_menubar_accel: gboolean): void <cimport,nodecl> end
global function gtk_window_get_handle_menubar_accel(window: *GtkWindow): gboolean <cimport,nodecl> end
global function glib_autoptr_clear_GtkWindow(_ptr: *GtkWindow): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GtkWindow(_ptr: **GtkWindow): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GtkWindow(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GtkWindow(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GtkWindow(_q: **GQueue): void <cimport,nodecl> end
global function glib_autoptr_clear_GtkWindowGroup(_ptr: *GtkWindowGroup): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GtkWindowGroup(_ptr: **GtkWindowGroup): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GtkWindowGroup(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GtkWindowGroup(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GtkWindowGroup(_q: **GQueue): void <cimport,nodecl> end
global function gtk_about_dialog_get_type(): GType <cimport,nodecl> end
global function gtk_about_dialog_new(): *GtkWidget <cimport,nodecl> end
global function gtk_show_about_dialog(parent: *GtkWindow, first_property_name: cstring, ...: cvarargs): void <cimport,nodecl> end
global function gtk_about_dialog_get_program_name(about: *GtkAboutDialog): cstring <cimport,nodecl> end
global function gtk_about_dialog_set_program_name(about: *GtkAboutDialog, name: cstring): void <cimport,nodecl> end
global function gtk_about_dialog_get_version(about: *GtkAboutDialog): cstring <cimport,nodecl> end
global function gtk_about_dialog_set_version(about: *GtkAboutDialog, version: cstring): void <cimport,nodecl> end
global function gtk_about_dialog_get_copyright(about: *GtkAboutDialog): cstring <cimport,nodecl> end
global function gtk_about_dialog_set_copyright(about: *GtkAboutDialog, copyright: cstring): void <cimport,nodecl> end
global function gtk_about_dialog_get_comments(about: *GtkAboutDialog): cstring <cimport,nodecl> end
global function gtk_about_dialog_set_comments(about: *GtkAboutDialog, comments: cstring): void <cimport,nodecl> end
global function gtk_about_dialog_get_license(about: *GtkAboutDialog): cstring <cimport,nodecl> end
global function gtk_about_dialog_set_license(about: *GtkAboutDialog, license: cstring): void <cimport,nodecl> end
global function gtk_about_dialog_set_license_type(about: *GtkAboutDialog, license_type: GtkLicense): void <cimport,nodecl> end
global function gtk_about_dialog_get_license_type(about: *GtkAboutDialog): GtkLicense <cimport,nodecl> end
global function gtk_about_dialog_get_wrap_license(about: *GtkAboutDialog): gboolean <cimport,nodecl> end
global function gtk_about_dialog_set_wrap_license(about: *GtkAboutDialog, wrap_license: gboolean): void <cimport,nodecl> end
global function gtk_about_dialog_get_system_information(about: *GtkAboutDialog): cstring <cimport,nodecl> end
global function gtk_about_dialog_set_system_information(about: *GtkAboutDialog, system_information: cstring): void <cimport,nodecl> end
global function gtk_about_dialog_get_website(about: *GtkAboutDialog): cstring <cimport,nodecl> end
global function gtk_about_dialog_set_website(about: *GtkAboutDialog, website: cstring): void <cimport,nodecl> end
global function gtk_about_dialog_get_website_label(about: *GtkAboutDialog): cstring <cimport,nodecl> end
global function gtk_about_dialog_set_website_label(about: *GtkAboutDialog, website_label: cstring): void <cimport,nodecl> end
global function gtk_about_dialog_get_authors(about: *GtkAboutDialog): *cstring <cimport,nodecl> end
global function gtk_about_dialog_set_authors(about: *GtkAboutDialog, authors: *cstring): void <cimport,nodecl> end
global function gtk_about_dialog_get_documenters(about: *GtkAboutDialog): *cstring <cimport,nodecl> end
global function gtk_about_dialog_set_documenters(about: *GtkAboutDialog, documenters: *cstring): void <cimport,nodecl> end
global function gtk_about_dialog_get_artists(about: *GtkAboutDialog): *cstring <cimport,nodecl> end
global function gtk_about_dialog_set_artists(about: *GtkAboutDialog, artists: *cstring): void <cimport,nodecl> end
global function gtk_about_dialog_get_translator_credits(about: *GtkAboutDialog): cstring <cimport,nodecl> end
global function gtk_about_dialog_set_translator_credits(about: *GtkAboutDialog, translator_credits: cstring): void <cimport,nodecl> end
global function gtk_about_dialog_get_logo(about: *GtkAboutDialog): *GdkPaintable <cimport,nodecl> end
global function gtk_about_dialog_set_logo(about: *GtkAboutDialog, logo: *GdkPaintable): void <cimport,nodecl> end
global function gtk_about_dialog_get_logo_icon_name(about: *GtkAboutDialog): cstring <cimport,nodecl> end
global function gtk_about_dialog_set_logo_icon_name(about: *GtkAboutDialog, icon_name: cstring): void <cimport,nodecl> end
global function gtk_about_dialog_add_credit_section(about: *GtkAboutDialog, section_name: cstring, people: *cstring): void <cimport,nodecl> end
global function glib_autoptr_clear_GtkAboutDialog(_ptr: *GtkAboutDialog): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GtkAboutDialog(_ptr: **GtkAboutDialog): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GtkAboutDialog(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GtkAboutDialog(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GtkAboutDialog(_q: **GQueue): void <cimport,nodecl> end
global function gtk_accessible_get_type(): GType <cimport,nodecl> end
global function glib_autoptr_clear_GtkAccessible(_ptr: *GtkAccessible): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GtkAccessible(_ptr: **GtkAccessible): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GtkAccessible(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GtkAccessible(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GtkAccessible(_q: **GQueue): void <cimport,nodecl> end
global function GTK_ACCESSIBLE(ptr: gpointer): *GtkAccessible <cimport,nodecl> end
global function GTK_IS_ACCESSIBLE(ptr: gpointer): gboolean <cimport,nodecl> end
global function GTK_ACCESSIBLE_GET_IFACE(ptr: gpointer): *GtkAccessibleInterface <cimport,nodecl> end
global function gtk_accessible_get_accessible_role(self: *GtkAccessible): GtkAccessibleRole <cimport,nodecl> end
global function gtk_accessible_update_state(self: *GtkAccessible, first_state: GtkAccessibleState, ...: cvarargs): void <cimport,nodecl> end
global function gtk_accessible_update_property(self: *GtkAccessible, first_property: GtkAccessibleProperty, ...: cvarargs): void <cimport,nodecl> end
global function gtk_accessible_update_relation(self: *GtkAccessible, first_relation: GtkAccessibleRelation, ...: cvarargs): void <cimport,nodecl> end
global function gtk_accessible_update_state_value(self: *GtkAccessible, n_states: cint, states: *[0]GtkAccessibleState, values: *[0]GValue): void <cimport,nodecl> end
global function gtk_accessible_update_property_value(self: *GtkAccessible, n_properties: cint, properties: *[0]GtkAccessibleProperty, values: *[0]GValue): void <cimport,nodecl> end
global function gtk_accessible_update_relation_value(self: *GtkAccessible, n_relations: cint, relations: *[0]GtkAccessibleRelation, values: *[0]GValue): void <cimport,nodecl> end
global function gtk_accessible_reset_state(self: *GtkAccessible, state: GtkAccessibleState): void <cimport,nodecl> end
global function gtk_accessible_reset_property(self: *GtkAccessible, property: GtkAccessibleProperty): void <cimport,nodecl> end
global function gtk_accessible_reset_relation(self: *GtkAccessible, relation: GtkAccessibleRelation): void <cimport,nodecl> end
global function gtk_accessible_state_init_value(state: GtkAccessibleState, value: *GValue): void <cimport,nodecl> end
global function gtk_accessible_property_init_value(property: GtkAccessibleProperty, value: *GValue): void <cimport,nodecl> end
global function gtk_accessible_relation_init_value(relation: GtkAccessibleRelation, value: *GValue): void <cimport,nodecl> end
global function gtk_actionable_get_type(): GType <cimport,nodecl> end
global function gtk_actionable_get_action_name(actionable: *GtkActionable): cstring <cimport,nodecl> end
global function gtk_actionable_set_action_name(actionable: *GtkActionable, action_name: cstring): void <cimport,nodecl> end
global function gtk_actionable_get_action_target_value(actionable: *GtkActionable): *GVariant <cimport,nodecl> end
global function gtk_actionable_set_action_target_value(actionable: *GtkActionable, target_value: *GVariant): void <cimport,nodecl> end
global function gtk_actionable_set_action_target(actionable: *GtkActionable, format_string: cstring, ...: cvarargs): void <cimport,nodecl> end
global function gtk_actionable_set_detailed_action_name(actionable: *GtkActionable, detailed_action_name: cstring): void <cimport,nodecl> end
global function gtk_action_bar_get_type(): GType <cimport,nodecl> end
global function gtk_action_bar_new(): *GtkWidget <cimport,nodecl> end
global function gtk_action_bar_get_center_widget(action_bar: *GtkActionBar): *GtkWidget <cimport,nodecl> end
global function gtk_action_bar_set_center_widget(action_bar: *GtkActionBar, center_widget: *GtkWidget): void <cimport,nodecl> end
global function gtk_action_bar_pack_start(action_bar: *GtkActionBar, child: *GtkWidget): void <cimport,nodecl> end
global function gtk_action_bar_pack_end(action_bar: *GtkActionBar, child: *GtkWidget): void <cimport,nodecl> end
global function gtk_action_bar_remove(action_bar: *GtkActionBar, child: *GtkWidget): void <cimport,nodecl> end
global function gtk_action_bar_set_revealed(action_bar: *GtkActionBar, revealed: gboolean): void <cimport,nodecl> end
global function gtk_action_bar_get_revealed(action_bar: *GtkActionBar): gboolean <cimport,nodecl> end
global function gtk_adjustment_get_type(): GType <cimport,nodecl> end
global function gtk_adjustment_new(value: float64, lower: float64, upper: float64, step_increment: float64, page_increment: float64, page_size: float64): *GtkAdjustment <cimport,nodecl> end
global function gtk_adjustment_clamp_page(adjustment: *GtkAdjustment, lower: float64, upper: float64): void <cimport,nodecl> end
global function gtk_adjustment_get_value(adjustment: *GtkAdjustment): float64 <cimport,nodecl> end
global function gtk_adjustment_set_value(adjustment: *GtkAdjustment, value: float64): void <cimport,nodecl> end
global function gtk_adjustment_get_lower(adjustment: *GtkAdjustment): float64 <cimport,nodecl> end
global function gtk_adjustment_set_lower(adjustment: *GtkAdjustment, lower: float64): void <cimport,nodecl> end
global function gtk_adjustment_get_upper(adjustment: *GtkAdjustment): float64 <cimport,nodecl> end
global function gtk_adjustment_set_upper(adjustment: *GtkAdjustment, upper: float64): void <cimport,nodecl> end
global function gtk_adjustment_get_step_increment(adjustment: *GtkAdjustment): float64 <cimport,nodecl> end
global function gtk_adjustment_set_step_increment(adjustment: *GtkAdjustment, step_increment: float64): void <cimport,nodecl> end
global function gtk_adjustment_get_page_increment(adjustment: *GtkAdjustment): float64 <cimport,nodecl> end
global function gtk_adjustment_set_page_increment(adjustment: *GtkAdjustment, page_increment: float64): void <cimport,nodecl> end
global function gtk_adjustment_get_page_size(adjustment: *GtkAdjustment): float64 <cimport,nodecl> end
global function gtk_adjustment_set_page_size(adjustment: *GtkAdjustment, page_size: float64): void <cimport,nodecl> end
global function gtk_adjustment_configure(adjustment: *GtkAdjustment, value: float64, lower: float64, upper: float64, step_increment: float64, page_increment: float64, page_size: float64): void <cimport,nodecl> end
global function gtk_adjustment_get_minimum_increment(adjustment: *GtkAdjustment): float64 <cimport,nodecl> end
global function gtk_app_chooser_get_type(): GType <cimport,nodecl> end
global function gtk_app_chooser_get_app_info(self: *GtkAppChooser): *GAppInfo <cimport,nodecl> end
global function gtk_app_chooser_get_content_type(self: *GtkAppChooser): cstring <cimport,nodecl> end
global function gtk_app_chooser_refresh(self: *GtkAppChooser): void <cimport,nodecl> end
global function gtk_dialog_get_type(): GType <cimport,nodecl> end
global function gtk_dialog_new(): *GtkWidget <cimport,nodecl> end
global function gtk_dialog_new_with_buttons(title: cstring, parent: *GtkWindow, flags: GtkDialogFlags, first_button_text: cstring, ...: cvarargs): *GtkWidget <cimport,nodecl> end
global function gtk_dialog_add_action_widget(dialog: *GtkDialog, child: *GtkWidget, response_id: cint): void <cimport,nodecl> end
global function gtk_dialog_add_button(dialog: *GtkDialog, button_text: cstring, response_id: cint): *GtkWidget <cimport,nodecl> end
global function gtk_dialog_add_buttons(dialog: *GtkDialog, first_button_text: cstring, ...: cvarargs): void <cimport,nodecl> end
global function gtk_dialog_set_response_sensitive(dialog: *GtkDialog, response_id: cint, setting: gboolean): void <cimport,nodecl> end
global function gtk_dialog_set_default_response(dialog: *GtkDialog, response_id: cint): void <cimport,nodecl> end
global function gtk_dialog_get_widget_for_response(dialog: *GtkDialog, response_id: cint): *GtkWidget <cimport,nodecl> end
global function gtk_dialog_get_response_for_widget(dialog: *GtkDialog, widget: *GtkWidget): cint <cimport,nodecl> end
global function gtk_dialog_response(dialog: *GtkDialog, response_id: cint): void <cimport,nodecl> end
global function gtk_dialog_get_content_area(dialog: *GtkDialog): *GtkWidget <cimport,nodecl> end
global function gtk_dialog_get_header_bar(dialog: *GtkDialog): *GtkWidget <cimport,nodecl> end
global function glib_autoptr_clear_GtkDialog(_ptr: *GtkDialog): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GtkDialog(_ptr: **GtkDialog): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GtkDialog(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GtkDialog(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GtkDialog(_q: **GQueue): void <cimport,nodecl> end
global function gtk_app_chooser_dialog_get_type(): GType <cimport,nodecl> end
global function gtk_app_chooser_dialog_new(parent: *GtkWindow, flags: GtkDialogFlags, file: *GFile): *GtkWidget <cimport,nodecl> end
global function gtk_app_chooser_dialog_new_for_content_type(parent: *GtkWindow, flags: GtkDialogFlags, content_type: cstring): *GtkWidget <cimport,nodecl> end
global function gtk_app_chooser_dialog_get_widget(self: *GtkAppChooserDialog): *GtkWidget <cimport,nodecl> end
global function gtk_app_chooser_dialog_set_heading(self: *GtkAppChooserDialog, heading: cstring): void <cimport,nodecl> end
global function gtk_app_chooser_dialog_get_heading(self: *GtkAppChooserDialog): cstring <cimport,nodecl> end
global function gtk_app_chooser_widget_get_type(): GType <cimport,nodecl> end
global function gtk_app_chooser_widget_new(content_type: cstring): *GtkWidget <cimport,nodecl> end
global function gtk_app_chooser_widget_set_show_default(self: *GtkAppChooserWidget, setting: gboolean): void <cimport,nodecl> end
global function gtk_app_chooser_widget_get_show_default(self: *GtkAppChooserWidget): gboolean <cimport,nodecl> end
global function gtk_app_chooser_widget_set_show_recommended(self: *GtkAppChooserWidget, setting: gboolean): void <cimport,nodecl> end
global function gtk_app_chooser_widget_get_show_recommended(self: *GtkAppChooserWidget): gboolean <cimport,nodecl> end
global function gtk_app_chooser_widget_set_show_fallback(self: *GtkAppChooserWidget, setting: gboolean): void <cimport,nodecl> end
global function gtk_app_chooser_widget_get_show_fallback(self: *GtkAppChooserWidget): gboolean <cimport,nodecl> end
global function gtk_app_chooser_widget_set_show_other(self: *GtkAppChooserWidget, setting: gboolean): void <cimport,nodecl> end
global function gtk_app_chooser_widget_get_show_other(self: *GtkAppChooserWidget): gboolean <cimport,nodecl> end
global function gtk_app_chooser_widget_set_show_all(self: *GtkAppChooserWidget, setting: gboolean): void <cimport,nodecl> end
global function gtk_app_chooser_widget_get_show_all(self: *GtkAppChooserWidget): gboolean <cimport,nodecl> end
global function gtk_app_chooser_widget_set_default_text(self: *GtkAppChooserWidget, text: cstring): void <cimport,nodecl> end
global function gtk_app_chooser_widget_get_default_text(self: *GtkAppChooserWidget): cstring <cimport,nodecl> end
global function gtk_app_chooser_button_get_type(): GType <cimport,nodecl> end
global function gtk_app_chooser_button_new(content_type: cstring): *GtkWidget <cimport,nodecl> end
global function gtk_app_chooser_button_append_separator(self: *GtkAppChooserButton): void <cimport,nodecl> end
global function gtk_app_chooser_button_append_custom_item(self: *GtkAppChooserButton, name: cstring, label: cstring, icon: *GIcon): void <cimport,nodecl> end
global function gtk_app_chooser_button_set_active_custom_item(self: *GtkAppChooserButton, name: cstring): void <cimport,nodecl> end
global function gtk_app_chooser_button_set_show_dialog_item(self: *GtkAppChooserButton, setting: gboolean): void <cimport,nodecl> end
global function gtk_app_chooser_button_get_show_dialog_item(self: *GtkAppChooserButton): gboolean <cimport,nodecl> end
global function gtk_app_chooser_button_set_heading(self: *GtkAppChooserButton, heading: cstring): void <cimport,nodecl> end
global function gtk_app_chooser_button_get_heading(self: *GtkAppChooserButton): cstring <cimport,nodecl> end
global function gtk_app_chooser_button_set_show_default_item(self: *GtkAppChooserButton, setting: gboolean): void <cimport,nodecl> end
global function gtk_app_chooser_button_get_show_default_item(self: *GtkAppChooserButton): gboolean <cimport,nodecl> end
global function gtk_app_chooser_button_get_modal(self: *GtkAppChooserButton): gboolean <cimport,nodecl> end
global function gtk_app_chooser_button_set_modal(self: *GtkAppChooserButton, modal: gboolean): void <cimport,nodecl> end
global function gtk_shortcuts_window_get_type(): GType <cimport,nodecl> end
global function glib_autoptr_clear_GtkShortcutsWindow(_ptr: *GtkShortcutsWindow): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GtkShortcutsWindow(_ptr: **GtkShortcutsWindow): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GtkShortcutsWindow(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GtkShortcutsWindow(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GtkShortcutsWindow(_q: **GQueue): void <cimport,nodecl> end
global function gtk_application_window_get_type(): GType <cimport,nodecl> end
global function gtk_application_window_new(application: *GtkApplication): *GtkWidget <cimport,nodecl> end
global function gtk_application_window_set_show_menubar(window: *GtkApplicationWindow, show_menubar: gboolean): void <cimport,nodecl> end
global function gtk_application_window_get_show_menubar(window: *GtkApplicationWindow): gboolean <cimport,nodecl> end
global function gtk_application_window_get_id(window: *GtkApplicationWindow): guint <cimport,nodecl> end
global function gtk_application_window_set_help_overlay(window: *GtkApplicationWindow, help_overlay: *GtkShortcutsWindow): void <cimport,nodecl> end
global function gtk_application_window_get_help_overlay(window: *GtkApplicationWindow): *GtkShortcutsWindow <cimport,nodecl> end
global function gtk_aspect_frame_get_type(): GType <cimport,nodecl> end
global function gtk_aspect_frame_new(xalign: float32, yalign: float32, ratio: float32, obey_child: gboolean): *GtkWidget <cimport,nodecl> end
global function gtk_aspect_frame_set_xalign(self: *GtkAspectFrame, xalign: float32): void <cimport,nodecl> end
global function gtk_aspect_frame_get_xalign(self: *GtkAspectFrame): float32 <cimport,nodecl> end
global function gtk_aspect_frame_set_yalign(self: *GtkAspectFrame, yalign: float32): void <cimport,nodecl> end
global function gtk_aspect_frame_get_yalign(self: *GtkAspectFrame): float32 <cimport,nodecl> end
global function gtk_aspect_frame_set_ratio(self: *GtkAspectFrame, ratio: float32): void <cimport,nodecl> end
global function gtk_aspect_frame_get_ratio(self: *GtkAspectFrame): float32 <cimport,nodecl> end
global function gtk_aspect_frame_set_obey_child(self: *GtkAspectFrame, obey_child: gboolean): void <cimport,nodecl> end
global function gtk_aspect_frame_get_obey_child(self: *GtkAspectFrame): gboolean <cimport,nodecl> end
global function gtk_aspect_frame_set_child(self: *GtkAspectFrame, child: *GtkWidget): void <cimport,nodecl> end
global function gtk_aspect_frame_get_child(self: *GtkAspectFrame): *GtkWidget <cimport,nodecl> end
global function gtk_assistant_page_get_type(): GType <cimport,nodecl> end
global function gtk_assistant_get_type(): GType <cimport,nodecl> end
global function gtk_assistant_new(): *GtkWidget <cimport,nodecl> end
global function gtk_assistant_next_page(assistant: *GtkAssistant): void <cimport,nodecl> end
global function gtk_assistant_previous_page(assistant: *GtkAssistant): void <cimport,nodecl> end
global function gtk_assistant_get_current_page(assistant: *GtkAssistant): cint <cimport,nodecl> end
global function gtk_assistant_set_current_page(assistant: *GtkAssistant, page_num: cint): void <cimport,nodecl> end
global function gtk_assistant_get_n_pages(assistant: *GtkAssistant): cint <cimport,nodecl> end
global function gtk_assistant_get_nth_page(assistant: *GtkAssistant, page_num: cint): *GtkWidget <cimport,nodecl> end
global function gtk_assistant_prepend_page(assistant: *GtkAssistant, page: *GtkWidget): cint <cimport,nodecl> end
global function gtk_assistant_append_page(assistant: *GtkAssistant, page: *GtkWidget): cint <cimport,nodecl> end
global function gtk_assistant_insert_page(assistant: *GtkAssistant, page: *GtkWidget, position: cint): cint <cimport,nodecl> end
global function gtk_assistant_remove_page(assistant: *GtkAssistant, page_num: cint): void <cimport,nodecl> end
global function gtk_assistant_set_forward_page_func(assistant: *GtkAssistant, page_func: GtkAssistantPageFunc, data: gpointer, destroy: GDestroyNotify): void <cimport,nodecl> end
global function gtk_assistant_set_page_type(assistant: *GtkAssistant, page: *GtkWidget, type: GtkAssistantPageType): void <cimport,nodecl> end
global function gtk_assistant_get_page_type(assistant: *GtkAssistant, page: *GtkWidget): GtkAssistantPageType <cimport,nodecl> end
global function gtk_assistant_set_page_title(assistant: *GtkAssistant, page: *GtkWidget, title: cstring): void <cimport,nodecl> end
global function gtk_assistant_get_page_title(assistant: *GtkAssistant, page: *GtkWidget): cstring <cimport,nodecl> end
global function gtk_assistant_set_page_complete(assistant: *GtkAssistant, page: *GtkWidget, complete: gboolean): void <cimport,nodecl> end
global function gtk_assistant_get_page_complete(assistant: *GtkAssistant, page: *GtkWidget): gboolean <cimport,nodecl> end
global function gtk_assistant_add_action_widget(assistant: *GtkAssistant, child: *GtkWidget): void <cimport,nodecl> end
global function gtk_assistant_remove_action_widget(assistant: *GtkAssistant, child: *GtkWidget): void <cimport,nodecl> end
global function gtk_assistant_update_buttons_state(assistant: *GtkAssistant): void <cimport,nodecl> end
global function gtk_assistant_commit(assistant: *GtkAssistant): void <cimport,nodecl> end
global function gtk_assistant_get_page(assistant: *GtkAssistant, child: *GtkWidget): *GtkAssistantPage <cimport,nodecl> end
global function gtk_assistant_page_get_child(page: *GtkAssistantPage): *GtkWidget <cimport,nodecl> end
global function gtk_assistant_get_pages(assistant: *GtkAssistant): *GListModel <cimport,nodecl> end
global function gtk_at_context_get_type(): GType <cimport,nodecl> end
global function glib_autoptr_clear_GtkATContext(_ptr: *GtkATContext): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GtkATContext(_ptr: **GtkATContext): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GtkATContext(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GtkATContext(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GtkATContext(_q: **GQueue): void <cimport,nodecl> end
global function glib_autoptr_clear_GtkATContextClass(_ptr: *GtkATContextClass): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GtkATContextClass(_ptr: **GtkATContextClass): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GtkATContextClass(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GtkATContextClass(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GtkATContextClass(_q: **GQueue): void <cimport,nodecl> end
global function GTK_AT_CONTEXT(ptr: gpointer): *GtkATContext <cimport,nodecl> end
global function GTK_AT_CONTEXT_CLASS(ptr: gpointer): *GtkATContextClass <cimport,nodecl> end
global function GTK_IS_AT_CONTEXT(ptr: gpointer): gboolean <cimport,nodecl> end
global function GTK_IS_AT_CONTEXT_CLASS(ptr: gpointer): gboolean <cimport,nodecl> end
global function GTK_AT_CONTEXT_GET_CLASS(ptr: gpointer): *GtkATContextClass <cimport,nodecl> end
global function gtk_at_context_get_accessible(self: *GtkATContext): *GtkAccessible <cimport,nodecl> end
global function gtk_at_context_get_accessible_role(self: *GtkATContext): GtkAccessibleRole <cimport,nodecl> end
global function gtk_at_context_create(accessible_role: GtkAccessibleRole, accessible: *GtkAccessible, display: *GdkDisplay): *GtkATContext <cimport,nodecl> end
global function gtk_layout_child_get_type(): GType <cimport,nodecl> end
global function glib_autoptr_clear_GtkLayoutChild(_ptr: *GtkLayoutChild): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GtkLayoutChild(_ptr: **GtkLayoutChild): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GtkLayoutChild(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GtkLayoutChild(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GtkLayoutChild(_q: **GQueue): void <cimport,nodecl> end
global function glib_autoptr_clear_GtkLayoutChildClass(_ptr: *GtkLayoutChildClass): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GtkLayoutChildClass(_ptr: **GtkLayoutChildClass): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GtkLayoutChildClass(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GtkLayoutChildClass(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GtkLayoutChildClass(_q: **GQueue): void <cimport,nodecl> end
global function GTK_LAYOUT_CHILD(ptr: gpointer): *GtkLayoutChild <cimport,nodecl> end
global function GTK_LAYOUT_CHILD_CLASS(ptr: gpointer): *GtkLayoutChildClass <cimport,nodecl> end
global function GTK_IS_LAYOUT_CHILD(ptr: gpointer): gboolean <cimport,nodecl> end
global function GTK_IS_LAYOUT_CHILD_CLASS(ptr: gpointer): gboolean <cimport,nodecl> end
global function GTK_LAYOUT_CHILD_GET_CLASS(ptr: gpointer): *GtkLayoutChildClass <cimport,nodecl> end
global function gtk_layout_child_get_layout_manager(layout_child: *GtkLayoutChild): *GtkLayoutManager <cimport,nodecl> end
global function gtk_layout_child_get_child_widget(layout_child: *GtkLayoutChild): *GtkWidget <cimport,nodecl> end
global function gtk_layout_manager_get_type(): GType <cimport,nodecl> end
global function glib_autoptr_clear_GtkLayoutManager(_ptr: *GtkLayoutManager): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GtkLayoutManager(_ptr: **GtkLayoutManager): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GtkLayoutManager(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GtkLayoutManager(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GtkLayoutManager(_q: **GQueue): void <cimport,nodecl> end
global function glib_autoptr_clear_GtkLayoutManagerClass(_ptr: *GtkLayoutManagerClass): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GtkLayoutManagerClass(_ptr: **GtkLayoutManagerClass): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GtkLayoutManagerClass(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GtkLayoutManagerClass(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GtkLayoutManagerClass(_q: **GQueue): void <cimport,nodecl> end
global function GTK_LAYOUT_MANAGER(ptr: gpointer): *GtkLayoutManager <cimport,nodecl> end
global function GTK_LAYOUT_MANAGER_CLASS(ptr: gpointer): *GtkLayoutManagerClass <cimport,nodecl> end
global function GTK_IS_LAYOUT_MANAGER(ptr: gpointer): gboolean <cimport,nodecl> end
global function GTK_IS_LAYOUT_MANAGER_CLASS(ptr: gpointer): gboolean <cimport,nodecl> end
global function GTK_LAYOUT_MANAGER_GET_CLASS(ptr: gpointer): *GtkLayoutManagerClass <cimport,nodecl> end
global function gtk_layout_manager_measure(manager: *GtkLayoutManager, widget: *GtkWidget, orientation: GtkOrientation, for_size: cint, minimum: *cint, natural: *cint, minimum_baseline: *cint, natural_baseline: *cint): void <cimport,nodecl> end
global function gtk_layout_manager_allocate(manager: *GtkLayoutManager, widget: *GtkWidget, width: cint, height: cint, baseline: cint): void <cimport,nodecl> end
global function gtk_layout_manager_get_request_mode(manager: *GtkLayoutManager): GtkSizeRequestMode <cimport,nodecl> end
global function gtk_layout_manager_get_widget(manager: *GtkLayoutManager): *GtkWidget <cimport,nodecl> end
global function gtk_layout_manager_layout_changed(manager: *GtkLayoutManager): void <cimport,nodecl> end
global function gtk_layout_manager_get_layout_child(manager: *GtkLayoutManager, child: *GtkWidget): *GtkLayoutChild <cimport,nodecl> end
global function gtk_bin_layout_get_type(): GType <cimport,nodecl> end
global function glib_autoptr_clear_GtkBinLayout(_ptr: *GtkBinLayout): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GtkBinLayout(_ptr: **GtkBinLayout): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GtkBinLayout(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GtkBinLayout(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GtkBinLayout(_q: **GQueue): void <cimport,nodecl> end
global function glib_autoptr_clear_GtkBinLayoutClass(_ptr: *GtkBinLayoutClass): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GtkBinLayoutClass(_ptr: **GtkBinLayoutClass): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GtkBinLayoutClass(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GtkBinLayoutClass(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GtkBinLayoutClass(_q: **GQueue): void <cimport,nodecl> end
global function GTK_BIN_LAYOUT(ptr: gpointer): *GtkBinLayout <cimport,nodecl> end
global function GTK_IS_BIN_LAYOUT(ptr: gpointer): gboolean <cimport,nodecl> end
global function gtk_bin_layout_new(): *GtkLayoutManager <cimport,nodecl> end
global function gtk_bitset_get_type(): GType <cimport,nodecl> end
global function gtk_bitset_ref(self: *GtkBitset): *GtkBitset <cimport,nodecl> end
global function gtk_bitset_unref(self: *GtkBitset): void <cimport,nodecl> end
global function glib_autoptr_clear_GtkBitset(_ptr: *GtkBitset): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GtkBitset(_ptr: **GtkBitset): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GtkBitset(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GtkBitset(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GtkBitset(_q: **GQueue): void <cimport,nodecl> end
global function gtk_bitset_contains(self: *GtkBitset, value: guint): gboolean <cimport,nodecl> end
global function gtk_bitset_is_empty(self: *GtkBitset): gboolean <cimport,nodecl> end
global function gtk_bitset_equals(self: *GtkBitset, other: *GtkBitset): gboolean <cimport,nodecl> end
global function gtk_bitset_get_size(self: *GtkBitset): guint64 <cimport,nodecl> end
global function gtk_bitset_get_size_in_range(self: *GtkBitset, first: guint, last: guint): guint64 <cimport,nodecl> end
global function gtk_bitset_get_nth(self: *GtkBitset, nth: guint): guint <cimport,nodecl> end
global function gtk_bitset_get_minimum(self: *GtkBitset): guint <cimport,nodecl> end
global function gtk_bitset_get_maximum(self: *GtkBitset): guint <cimport,nodecl> end
global function gtk_bitset_new_empty(): *GtkBitset <cimport,nodecl> end
global function gtk_bitset_copy(self: *GtkBitset): *GtkBitset <cimport,nodecl> end
global function gtk_bitset_new_range(start: guint, n_items: guint): *GtkBitset <cimport,nodecl> end
global function gtk_bitset_remove_all(self: *GtkBitset): void <cimport,nodecl> end
global function gtk_bitset_add(self: *GtkBitset, value: guint): gboolean <cimport,nodecl> end
global function gtk_bitset_remove(self: *GtkBitset, value: guint): gboolean <cimport,nodecl> end
global function gtk_bitset_add_range(self: *GtkBitset, start: guint, n_items: guint): void <cimport,nodecl> end
global function gtk_bitset_remove_range(self: *GtkBitset, start: guint, n_items: guint): void <cimport,nodecl> end
global function gtk_bitset_add_range_closed(self: *GtkBitset, first: guint, last: guint): void <cimport,nodecl> end
global function gtk_bitset_remove_range_closed(self: *GtkBitset, first: guint, last: guint): void <cimport,nodecl> end
global function gtk_bitset_add_rectangle(self: *GtkBitset, start: guint, width: guint, height: guint, stride: guint): void <cimport,nodecl> end
global function gtk_bitset_remove_rectangle(self: *GtkBitset, start: guint, width: guint, height: guint, stride: guint): void <cimport,nodecl> end
global function gtk_bitset_union(self: *GtkBitset, other: *GtkBitset): void <cimport,nodecl> end
global function gtk_bitset_intersect(self: *GtkBitset, other: *GtkBitset): void <cimport,nodecl> end
global function gtk_bitset_subtract(self: *GtkBitset, other: *GtkBitset): void <cimport,nodecl> end
global function gtk_bitset_difference(self: *GtkBitset, other: *GtkBitset): void <cimport,nodecl> end
global function gtk_bitset_shift_left(self: *GtkBitset, amount: guint): void <cimport,nodecl> end
global function gtk_bitset_shift_right(self: *GtkBitset, amount: guint): void <cimport,nodecl> end
global function gtk_bitset_splice(self: *GtkBitset, position: guint, removed: guint, added: guint): void <cimport,nodecl> end
global function gtk_bitset_iter_get_type(): GType <cimport,nodecl> end
global function gtk_bitset_iter_init_first(iter: *GtkBitsetIter, set: *GtkBitset, value: *guint): gboolean <cimport,nodecl> end
global function gtk_bitset_iter_init_last(iter: *GtkBitsetIter, set: *GtkBitset, value: *guint): gboolean <cimport,nodecl> end
global function gtk_bitset_iter_init_at(iter: *GtkBitsetIter, set: *GtkBitset, target: guint, value: *guint): gboolean <cimport,nodecl> end
global function gtk_bitset_iter_next(iter: *GtkBitsetIter, value: *guint): gboolean <cimport,nodecl> end
global function gtk_bitset_iter_previous(iter: *GtkBitsetIter, value: *guint): gboolean <cimport,nodecl> end
global function gtk_bitset_iter_get_value(iter: *GtkBitsetIter): guint <cimport,nodecl> end
global function gtk_bitset_iter_is_valid(iter: *GtkBitsetIter): gboolean <cimport,nodecl> end
global function gtk_bookmark_list_get_type(): GType <cimport,nodecl> end
global function glib_autoptr_clear_GtkBookmarkList(_ptr: *GtkBookmarkList): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GtkBookmarkList(_ptr: **GtkBookmarkList): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GtkBookmarkList(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GtkBookmarkList(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GtkBookmarkList(_q: **GQueue): void <cimport,nodecl> end
global function glib_autoptr_clear_GtkBookmarkListClass(_ptr: *GtkBookmarkListClass): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GtkBookmarkListClass(_ptr: **GtkBookmarkListClass): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GtkBookmarkListClass(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GtkBookmarkListClass(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GtkBookmarkListClass(_q: **GQueue): void <cimport,nodecl> end
global function GTK_BOOKMARK_LIST(ptr: gpointer): *GtkBookmarkList <cimport,nodecl> end
global function GTK_IS_BOOKMARK_LIST(ptr: gpointer): gboolean <cimport,nodecl> end
global function gtk_bookmark_list_new(filename: cstring, attributes: cstring): *GtkBookmarkList <cimport,nodecl> end
global function gtk_bookmark_list_get_filename(self: *GtkBookmarkList): cstring <cimport,nodecl> end
global function gtk_bookmark_list_set_attributes(self: *GtkBookmarkList, attributes: cstring): void <cimport,nodecl> end
global function gtk_bookmark_list_get_attributes(self: *GtkBookmarkList): cstring <cimport,nodecl> end
global function gtk_bookmark_list_set_io_priority(self: *GtkBookmarkList, io_priority: cint): void <cimport,nodecl> end
global function gtk_bookmark_list_get_io_priority(self: *GtkBookmarkList): cint <cimport,nodecl> end
global function gtk_bookmark_list_is_loading(self: *GtkBookmarkList): gboolean <cimport,nodecl> end
global function gtk_expression_get_type(): GType <cimport,nodecl> end
global function gtk_expression_ref(self: *GtkExpression): *GtkExpression <cimport,nodecl> end
global function gtk_expression_unref(self: *GtkExpression): void <cimport,nodecl> end
global function glib_autoptr_clear_GtkExpression(_ptr: *GtkExpression): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GtkExpression(_ptr: **GtkExpression): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GtkExpression(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GtkExpression(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GtkExpression(_q: **GQueue): void <cimport,nodecl> end
global function gtk_expression_get_value_type(self: *GtkExpression): GType <cimport,nodecl> end
global function gtk_expression_is_static(self: *GtkExpression): gboolean <cimport,nodecl> end
global function gtk_expression_evaluate(self: *GtkExpression, this_: gpointer, value: *GValue): gboolean <cimport,nodecl> end
global function gtk_expression_watch(self: *GtkExpression, this_: gpointer, notify: GtkExpressionNotify, user_data: gpointer, user_destroy: GDestroyNotify): *GtkExpressionWatch <cimport,nodecl> end
global function gtk_expression_bind(self: *GtkExpression, target: gpointer, property: cstring, this_: gpointer): *GtkExpressionWatch <cimport,nodecl> end
global function gtk_expression_watch_get_type(): GType <cimport,nodecl> end
global function gtk_expression_watch_ref(watch: *GtkExpressionWatch): *GtkExpressionWatch <cimport,nodecl> end
global function gtk_expression_watch_unref(watch: *GtkExpressionWatch): void <cimport,nodecl> end
global function gtk_expression_watch_evaluate(watch: *GtkExpressionWatch, value: *GValue): gboolean <cimport,nodecl> end
global function gtk_expression_watch_unwatch(watch: *GtkExpressionWatch): void <cimport,nodecl> end
global function gtk_property_expression_get_type(): GType <cimport,nodecl> end
global function gtk_property_expression_new(this_type: GType, expression: *GtkExpression, property_name: cstring): *GtkExpression <cimport,nodecl> end
global function gtk_property_expression_new_for_pspec(expression: *GtkExpression, pspec: *GParamSpec): *GtkExpression <cimport,nodecl> end
global function gtk_property_expression_get_expression(expression: *GtkExpression): *GtkExpression <cimport,nodecl> end
global function gtk_property_expression_get_pspec(expression: *GtkExpression): *GParamSpec <cimport,nodecl> end
global function gtk_constant_expression_get_type(): GType <cimport,nodecl> end
global function gtk_constant_expression_new(value_type: GType, ...: cvarargs): *GtkExpression <cimport,nodecl> end
global function gtk_constant_expression_new_for_value(value: *GValue): *GtkExpression <cimport,nodecl> end
global function gtk_constant_expression_get_value(expression: *GtkExpression): *GValue <cimport,nodecl> end
global function gtk_object_expression_get_type(): GType <cimport,nodecl> end
global function gtk_object_expression_new(object: *GObject): *GtkExpression <cimport,nodecl> end
global function gtk_object_expression_get_object(expression: *GtkExpression): *GObject <cimport,nodecl> end
global function gtk_closure_expression_get_type(): GType <cimport,nodecl> end
global function gtk_closure_expression_new(value_type: GType, closure: *GClosure, n_params: guint, params: **GtkExpression): *GtkExpression <cimport,nodecl> end
global function gtk_cclosure_expression_get_type(): GType <cimport,nodecl> end
global function gtk_cclosure_expression_new(value_type: GType, marshal: GClosureMarshal, n_params: guint, params: **GtkExpression, callback_func: GCallback, user_data: gpointer, user_destroy: GClosureNotify): *GtkExpression <cimport,nodecl> end
global function gtk_value_set_expression(value: *GValue, expression: *GtkExpression): void <cimport,nodecl> end
global function gtk_value_take_expression(value: *GValue, expression: *GtkExpression): void <cimport,nodecl> end
global function gtk_value_get_expression(value: *GValue): *GtkExpression <cimport,nodecl> end
global function gtk_value_dup_expression(value: *GValue): *GtkExpression <cimport,nodecl> end
global function gtk_param_expression_get_type(): GType <cimport,nodecl> end
global function gtk_param_spec_expression(name: cstring, nick: cstring, blurb: cstring, flags: GParamFlags): *GParamSpec <cimport,nodecl> end
global function gtk_filter_get_type(): GType <cimport,nodecl> end
global function glib_autoptr_clear_GtkFilter(_ptr: *GtkFilter): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GtkFilter(_ptr: **GtkFilter): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GtkFilter(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GtkFilter(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GtkFilter(_q: **GQueue): void <cimport,nodecl> end
global function glib_autoptr_clear_GtkFilterClass(_ptr: *GtkFilterClass): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GtkFilterClass(_ptr: **GtkFilterClass): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GtkFilterClass(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GtkFilterClass(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GtkFilterClass(_q: **GQueue): void <cimport,nodecl> end
global function GTK_FILTER(ptr: gpointer): *GtkFilter <cimport,nodecl> end
global function GTK_FILTER_CLASS(ptr: gpointer): *GtkFilterClass <cimport,nodecl> end
global function GTK_IS_FILTER(ptr: gpointer): gboolean <cimport,nodecl> end
global function GTK_IS_FILTER_CLASS(ptr: gpointer): gboolean <cimport,nodecl> end
global function GTK_FILTER_GET_CLASS(ptr: gpointer): *GtkFilterClass <cimport,nodecl> end
global function gtk_filter_match(self: *GtkFilter, item: gpointer): gboolean <cimport,nodecl> end
global function gtk_filter_get_strictness(self: *GtkFilter): GtkFilterMatch <cimport,nodecl> end
global function gtk_filter_changed(self: *GtkFilter, change: GtkFilterChange): void <cimport,nodecl> end
global function gtk_bool_filter_get_type(): GType <cimport,nodecl> end
global function glib_autoptr_clear_GtkBoolFilter(_ptr: *GtkBoolFilter): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GtkBoolFilter(_ptr: **GtkBoolFilter): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GtkBoolFilter(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GtkBoolFilter(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GtkBoolFilter(_q: **GQueue): void <cimport,nodecl> end
global function glib_autoptr_clear_GtkBoolFilterClass(_ptr: *GtkBoolFilterClass): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GtkBoolFilterClass(_ptr: **GtkBoolFilterClass): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GtkBoolFilterClass(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GtkBoolFilterClass(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GtkBoolFilterClass(_q: **GQueue): void <cimport,nodecl> end
global function GTK_BOOL_FILTER(ptr: gpointer): *GtkBoolFilter <cimport,nodecl> end
global function GTK_IS_BOOL_FILTER(ptr: gpointer): gboolean <cimport,nodecl> end
global function gtk_bool_filter_new(expression: *GtkExpression): *GtkBoolFilter <cimport,nodecl> end
global function gtk_bool_filter_get_expression(self: *GtkBoolFilter): *GtkExpression <cimport,nodecl> end
global function gtk_bool_filter_set_expression(self: *GtkBoolFilter, expression: *GtkExpression): void <cimport,nodecl> end
global function gtk_bool_filter_get_invert(self: *GtkBoolFilter): gboolean <cimport,nodecl> end
global function gtk_bool_filter_set_invert(self: *GtkBoolFilter, invert: gboolean): void <cimport,nodecl> end
global function gtk_box_layout_get_type(): GType <cimport,nodecl> end
global function glib_autoptr_clear_GtkBoxLayout(_ptr: *GtkBoxLayout): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GtkBoxLayout(_ptr: **GtkBoxLayout): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GtkBoxLayout(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GtkBoxLayout(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GtkBoxLayout(_q: **GQueue): void <cimport,nodecl> end
global function glib_autoptr_clear_GtkBoxLayoutClass(_ptr: *GtkBoxLayoutClass): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GtkBoxLayoutClass(_ptr: **GtkBoxLayoutClass): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GtkBoxLayoutClass(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GtkBoxLayoutClass(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GtkBoxLayoutClass(_q: **GQueue): void <cimport,nodecl> end
global function GTK_BOX_LAYOUT(ptr: gpointer): *GtkBoxLayout <cimport,nodecl> end
global function GTK_IS_BOX_LAYOUT(ptr: gpointer): gboolean <cimport,nodecl> end
global function gtk_box_layout_new(orientation: GtkOrientation): *GtkLayoutManager <cimport,nodecl> end
global function gtk_box_layout_set_homogeneous(box_layout: *GtkBoxLayout, homogeneous: gboolean): void <cimport,nodecl> end
global function gtk_box_layout_get_homogeneous(box_layout: *GtkBoxLayout): gboolean <cimport,nodecl> end
global function gtk_box_layout_set_spacing(box_layout: *GtkBoxLayout, spacing: guint): void <cimport,nodecl> end
global function gtk_box_layout_get_spacing(box_layout: *GtkBoxLayout): guint <cimport,nodecl> end
global function gtk_box_layout_set_baseline_position(box_layout: *GtkBoxLayout, position: GtkBaselinePosition): void <cimport,nodecl> end
global function gtk_box_layout_get_baseline_position(box_layout: *GtkBoxLayout): GtkBaselinePosition <cimport,nodecl> end
global function gtk_box_get_type(): GType <cimport,nodecl> end
global function gtk_box_new(orientation: GtkOrientation, spacing: cint): *GtkWidget <cimport,nodecl> end
global function gtk_box_set_homogeneous(box: *GtkBox, homogeneous: gboolean): void <cimport,nodecl> end
global function gtk_box_get_homogeneous(box: *GtkBox): gboolean <cimport,nodecl> end
global function gtk_box_set_spacing(box: *GtkBox, spacing: cint): void <cimport,nodecl> end
global function gtk_box_get_spacing(box: *GtkBox): cint <cimport,nodecl> end
global function gtk_box_set_baseline_position(box: *GtkBox, position: GtkBaselinePosition): void <cimport,nodecl> end
global function gtk_box_get_baseline_position(box: *GtkBox): GtkBaselinePosition <cimport,nodecl> end
global function gtk_box_append(box: *GtkBox, child: *GtkWidget): void <cimport,nodecl> end
global function gtk_box_prepend(box: *GtkBox, child: *GtkWidget): void <cimport,nodecl> end
global function gtk_box_remove(box: *GtkBox, child: *GtkWidget): void <cimport,nodecl> end
global function gtk_box_insert_child_after(box: *GtkBox, child: *GtkWidget, sibling: *GtkWidget): void <cimport,nodecl> end
global function gtk_box_reorder_child_after(box: *GtkBox, child: *GtkWidget, sibling: *GtkWidget): void <cimport,nodecl> end
global function gtk_builder_scope_get_type(): GType <cimport,nodecl> end
global function glib_autoptr_clear_GtkBuilderScope(_ptr: *GtkBuilderScope): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GtkBuilderScope(_ptr: **GtkBuilderScope): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GtkBuilderScope(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GtkBuilderScope(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GtkBuilderScope(_q: **GQueue): void <cimport,nodecl> end
global function GTK_BUILDER_SCOPE(ptr: gpointer): *GtkBuilderScope <cimport,nodecl> end
global function GTK_IS_BUILDER_SCOPE(ptr: gpointer): gboolean <cimport,nodecl> end
global function GTK_BUILDER_SCOPE_GET_IFACE(ptr: gpointer): *GtkBuilderScopeInterface <cimport,nodecl> end
global function gtk_builder_cscope_get_type(): GType <cimport,nodecl> end
global function glib_autoptr_clear_GtkBuilderCScope(_ptr: *GtkBuilderCScope): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GtkBuilderCScope(_ptr: **GtkBuilderCScope): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GtkBuilderCScope(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GtkBuilderCScope(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GtkBuilderCScope(_q: **GQueue): void <cimport,nodecl> end
global function glib_autoptr_clear_GtkBuilderCScopeClass(_ptr: *GtkBuilderCScopeClass): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GtkBuilderCScopeClass(_ptr: **GtkBuilderCScopeClass): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GtkBuilderCScopeClass(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GtkBuilderCScopeClass(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GtkBuilderCScopeClass(_q: **GQueue): void <cimport,nodecl> end
global function GTK_BUILDER_CSCOPE(ptr: gpointer): *GtkBuilderCScope <cimport,nodecl> end
global function GTK_BUILDER_CSCOPE_CLASS(ptr: gpointer): *GtkBuilderCScopeClass <cimport,nodecl> end
global function GTK_IS_BUILDER_CSCOPE(ptr: gpointer): gboolean <cimport,nodecl> end
global function GTK_IS_BUILDER_CSCOPE_CLASS(ptr: gpointer): gboolean <cimport,nodecl> end
global function GTK_BUILDER_CSCOPE_GET_CLASS(ptr: gpointer): *GtkBuilderCScopeClass <cimport,nodecl> end
global function gtk_builder_cscope_new(): *GtkBuilderScope <cimport,nodecl> end
global function gtk_builder_cscope_add_callback_symbol(self: *GtkBuilderCScope, callback_name: cstring, callback_symbol: GCallback): void <cimport,nodecl> end
global function gtk_builder_cscope_add_callback_symbols(self: *GtkBuilderCScope, first_callback_name: cstring, first_callback_symbol: GCallback, ...: cvarargs): void <cimport,nodecl> end
global function gtk_builder_cscope_lookup_callback_symbol(self: *GtkBuilderCScope, callback_name: cstring): GCallback <cimport,nodecl> end
global function gtk_builder_error_quark(): GQuark <cimport,nodecl> end
global function gtk_builder_get_type(): GType <cimport,nodecl> end
global function gtk_builder_new(): *GtkBuilder <cimport,nodecl> end
global function gtk_builder_add_from_file(builder: *GtkBuilder, filename: cstring, error: **GError): gboolean <cimport,nodecl> end
global function gtk_builder_add_from_resource(builder: *GtkBuilder, resource_path: cstring, error: **GError): gboolean <cimport,nodecl> end
global function gtk_builder_add_from_string(builder: *GtkBuilder, buffer: cstring, length: gssize, error: **GError): gboolean <cimport,nodecl> end
global function gtk_builder_add_objects_from_file(builder: *GtkBuilder, filename: cstring, object_ids: *cstring, error: **GError): gboolean <cimport,nodecl> end
global function gtk_builder_add_objects_from_resource(builder: *GtkBuilder, resource_path: cstring, object_ids: *cstring, error: **GError): gboolean <cimport,nodecl> end
global function gtk_builder_add_objects_from_string(builder: *GtkBuilder, buffer: cstring, length: gssize, object_ids: *cstring, error: **GError): gboolean <cimport,nodecl> end
global function gtk_builder_get_object(builder: *GtkBuilder, name: cstring): *GObject <cimport,nodecl> end
global function gtk_builder_get_objects(builder: *GtkBuilder): *GSList <cimport,nodecl> end
global function gtk_builder_expose_object(builder: *GtkBuilder, name: cstring, object: *GObject): void <cimport,nodecl> end
global function gtk_builder_get_current_object(builder: *GtkBuilder): *GObject <cimport,nodecl> end
global function gtk_builder_set_current_object(builder: *GtkBuilder, current_object: *GObject): void <cimport,nodecl> end
global function gtk_builder_set_translation_domain(builder: *GtkBuilder, domain: cstring): void <cimport,nodecl> end
global function gtk_builder_get_translation_domain(builder: *GtkBuilder): cstring <cimport,nodecl> end
global function gtk_builder_get_scope(builder: *GtkBuilder): *GtkBuilderScope <cimport,nodecl> end
global function gtk_builder_set_scope(builder: *GtkBuilder, scope: *GtkBuilderScope): void <cimport,nodecl> end
global function gtk_builder_get_type_from_name(builder: *GtkBuilder, type_name: cstring): GType <cimport,nodecl> end
global function gtk_builder_value_from_string(builder: *GtkBuilder, pspec: *GParamSpec, string: cstring, value: *GValue, error: **GError): gboolean <cimport,nodecl> end
global function gtk_builder_value_from_string_type(builder: *GtkBuilder, type: GType, string: cstring, value: *GValue, error: **GError): gboolean <cimport,nodecl> end
global function gtk_builder_new_from_file(filename: cstring): *GtkBuilder <cimport,nodecl> end
global function gtk_builder_new_from_resource(resource_path: cstring): *GtkBuilder <cimport,nodecl> end
global function gtk_builder_new_from_string(string: cstring, length: gssize): *GtkBuilder <cimport,nodecl> end
global function gtk_builder_create_closure(builder: *GtkBuilder, function_name: cstring, flags: GtkBuilderClosureFlags, object: *GObject, error: **GError): *GClosure <cimport,nodecl> end
global function gtk_builder_extend_with_template(builder: *GtkBuilder, object: *GObject, template_type: GType, buffer: cstring, length: gssize, error: **GError): gboolean <cimport,nodecl> end
global function gtk_buildable_get_type(): GType <cimport,nodecl> end
global function gtk_buildable_get_buildable_id(buildable: *GtkBuildable): cstring <cimport,nodecl> end
global function gtk_buildable_parse_context_push(context: *GtkBuildableParseContext, parser: *GtkBuildableParser, user_data: gpointer): void <cimport,nodecl> end
global function gtk_buildable_parse_context_pop(context: *GtkBuildableParseContext): gpointer <cimport,nodecl> end
global function gtk_buildable_parse_context_get_element(context: *GtkBuildableParseContext): cstring <cimport,nodecl> end
global function gtk_buildable_parse_context_get_element_stack(context: *GtkBuildableParseContext): *GPtrArray <cimport,nodecl> end
global function gtk_buildable_parse_context_get_position(context: *GtkBuildableParseContext, line_number: *cint, char_number: *cint): void <cimport,nodecl> end
global function gtk_list_item_factory_get_type(): GType <cimport,nodecl> end
global function gtk_builder_list_item_factory_get_type(): GType <cimport,nodecl> end
global function gtk_builder_list_item_factory_new_from_bytes(scope: *GtkBuilderScope, bytes: *GBytes): *GtkListItemFactory <cimport,nodecl> end
global function gtk_builder_list_item_factory_new_from_resource(scope: *GtkBuilderScope, resource_path: cstring): *GtkListItemFactory <cimport,nodecl> end
global function gtk_builder_list_item_factory_get_bytes(self: *GtkBuilderListItemFactory): *GBytes <cimport,nodecl> end
global function gtk_builder_list_item_factory_get_resource(self: *GtkBuilderListItemFactory): cstring <cimport,nodecl> end
global function gtk_builder_list_item_factory_get_scope(self: *GtkBuilderListItemFactory): *GtkBuilderScope <cimport,nodecl> end
global function gtk_button_get_type(): GType <cimport,nodecl> end
global function gtk_button_new(): *GtkWidget <cimport,nodecl> end
global function gtk_button_new_with_label(label: cstring): *GtkWidget <cimport,nodecl> end
global function gtk_button_new_from_icon_name(icon_name: cstring): *GtkWidget <cimport,nodecl> end
global function gtk_button_new_with_mnemonic(label: cstring): *GtkWidget <cimport,nodecl> end
global function gtk_button_set_has_frame(button: *GtkButton, has_frame: gboolean): void <cimport,nodecl> end
global function gtk_button_get_has_frame(button: *GtkButton): gboolean <cimport,nodecl> end
global function gtk_button_set_label(button: *GtkButton, label: cstring): void <cimport,nodecl> end
global function gtk_button_get_label(button: *GtkButton): cstring <cimport,nodecl> end
global function gtk_button_set_use_underline(button: *GtkButton, use_underline: gboolean): void <cimport,nodecl> end
global function gtk_button_get_use_underline(button: *GtkButton): gboolean <cimport,nodecl> end
global function gtk_button_set_icon_name(button: *GtkButton, icon_name: cstring): void <cimport,nodecl> end
global function gtk_button_get_icon_name(button: *GtkButton): cstring <cimport,nodecl> end
global function gtk_button_set_child(button: *GtkButton, child: *GtkWidget): void <cimport,nodecl> end
global function gtk_button_get_child(button: *GtkButton): *GtkWidget <cimport,nodecl> end
global function gtk_calendar_get_type(): GType <cimport,nodecl> end
global function gtk_calendar_new(): *GtkWidget <cimport,nodecl> end
global function gtk_calendar_select_day(self: *GtkCalendar, date: *GDateTime): void <cimport,nodecl> end
global function gtk_calendar_mark_day(calendar: *GtkCalendar, day: guint): void <cimport,nodecl> end
global function gtk_calendar_unmark_day(calendar: *GtkCalendar, day: guint): void <cimport,nodecl> end
global function gtk_calendar_clear_marks(calendar: *GtkCalendar): void <cimport,nodecl> end
global function gtk_calendar_set_show_week_numbers(self: *GtkCalendar, value: gboolean): void <cimport,nodecl> end
global function gtk_calendar_get_show_week_numbers(self: *GtkCalendar): gboolean <cimport,nodecl> end
global function gtk_calendar_set_show_heading(self: *GtkCalendar, value: gboolean): void <cimport,nodecl> end
global function gtk_calendar_get_show_heading(self: *GtkCalendar): gboolean <cimport,nodecl> end
global function gtk_calendar_set_show_day_names(self: *GtkCalendar, value: gboolean): void <cimport,nodecl> end
global function gtk_calendar_get_show_day_names(self: *GtkCalendar): gboolean <cimport,nodecl> end
global function gtk_calendar_get_date(self: *GtkCalendar): *GDateTime <cimport,nodecl> end
global function gtk_calendar_get_day_is_marked(calendar: *GtkCalendar, day: guint): gboolean <cimport,nodecl> end
global function gtk_cell_editable_get_type(): GType <cimport,nodecl> end
global function gtk_cell_editable_start_editing(cell_editable: *GtkCellEditable, event: *GdkEvent): void <cimport,nodecl> end
global function gtk_cell_editable_editing_done(cell_editable: *GtkCellEditable): void <cimport,nodecl> end
global function gtk_cell_editable_remove_widget(cell_editable: *GtkCellEditable): void <cimport,nodecl> end
global function gtk_cell_renderer_get_type(): GType <cimport,nodecl> end
global function gtk_cell_renderer_get_request_mode(cell: *GtkCellRenderer): GtkSizeRequestMode <cimport,nodecl> end
global function gtk_cell_renderer_get_preferred_width(cell: *GtkCellRenderer, widget: *GtkWidget, minimum_size: *cint, natural_size: *cint): void <cimport,nodecl> end
global function gtk_cell_renderer_get_preferred_height_for_width(cell: *GtkCellRenderer, widget: *GtkWidget, width: cint, minimum_height: *cint, natural_height: *cint): void <cimport,nodecl> end
global function gtk_cell_renderer_get_preferred_height(cell: *GtkCellRenderer, widget: *GtkWidget, minimum_size: *cint, natural_size: *cint): void <cimport,nodecl> end
global function gtk_cell_renderer_get_preferred_width_for_height(cell: *GtkCellRenderer, widget: *GtkWidget, height: cint, minimum_width: *cint, natural_width: *cint): void <cimport,nodecl> end
global function gtk_cell_renderer_get_preferred_size(cell: *GtkCellRenderer, widget: *GtkWidget, minimum_size: *GtkRequisition, natural_size: *GtkRequisition): void <cimport,nodecl> end
global function gtk_cell_renderer_get_aligned_area(cell: *GtkCellRenderer, widget: *GtkWidget, flags: GtkCellRendererState, cell_area: *GdkRectangle, aligned_area: *GdkRectangle): void <cimport,nodecl> end
global function gtk_cell_renderer_snapshot(cell: *GtkCellRenderer, snapshot: *GtkSnapshot, widget: *GtkWidget, background_area: *GdkRectangle, cell_area: *GdkRectangle, flags: GtkCellRendererState): void <cimport,nodecl> end
global function gtk_cell_renderer_activate(cell: *GtkCellRenderer, event: *GdkEvent, widget: *GtkWidget, path: cstring, background_area: *GdkRectangle, cell_area: *GdkRectangle, flags: GtkCellRendererState): gboolean <cimport,nodecl> end
global function gtk_cell_renderer_start_editing(cell: *GtkCellRenderer, event: *GdkEvent, widget: *GtkWidget, path: cstring, background_area: *GdkRectangle, cell_area: *GdkRectangle, flags: GtkCellRendererState): *GtkCellEditable <cimport,nodecl> end
global function gtk_cell_renderer_set_fixed_size(cell: *GtkCellRenderer, width: cint, height: cint): void <cimport,nodecl> end
global function gtk_cell_renderer_get_fixed_size(cell: *GtkCellRenderer, width: *cint, height: *cint): void <cimport,nodecl> end
global function gtk_cell_renderer_set_alignment(cell: *GtkCellRenderer, xalign: float32, yalign: float32): void <cimport,nodecl> end
global function gtk_cell_renderer_get_alignment(cell: *GtkCellRenderer, xalign: *float32, yalign: *float32): void <cimport,nodecl> end
global function gtk_cell_renderer_set_padding(cell: *GtkCellRenderer, xpad: cint, ypad: cint): void <cimport,nodecl> end
global function gtk_cell_renderer_get_padding(cell: *GtkCellRenderer, xpad: *cint, ypad: *cint): void <cimport,nodecl> end
global function gtk_cell_renderer_set_visible(cell: *GtkCellRenderer, visible: gboolean): void <cimport,nodecl> end
global function gtk_cell_renderer_get_visible(cell: *GtkCellRenderer): gboolean <cimport,nodecl> end
global function gtk_cell_renderer_set_sensitive(cell: *GtkCellRenderer, sensitive: gboolean): void <cimport,nodecl> end
global function gtk_cell_renderer_get_sensitive(cell: *GtkCellRenderer): gboolean <cimport,nodecl> end
global function gtk_cell_renderer_is_activatable(cell: *GtkCellRenderer): gboolean <cimport,nodecl> end
global function gtk_cell_renderer_set_is_expander(cell: *GtkCellRenderer, is_expander: gboolean): void <cimport,nodecl> end
global function gtk_cell_renderer_get_is_expander(cell: *GtkCellRenderer): gboolean <cimport,nodecl> end
global function gtk_cell_renderer_set_is_expanded(cell: *GtkCellRenderer, is_expanded: gboolean): void <cimport,nodecl> end
global function gtk_cell_renderer_get_is_expanded(cell: *GtkCellRenderer): gboolean <cimport,nodecl> end
global function gtk_cell_renderer_stop_editing(cell: *GtkCellRenderer, canceled: gboolean): void <cimport,nodecl> end
global function _gtk_cell_renderer_calc_offset(cell: *GtkCellRenderer, cell_area: *GdkRectangle, direction: GtkTextDirection, width: cint, height: cint, x_offset: *cint, y_offset: *cint): void <cimport,nodecl> end
global function gtk_cell_renderer_get_state(cell: *GtkCellRenderer, widget: *GtkWidget, cell_state: GtkCellRendererState): GtkStateFlags <cimport,nodecl> end
global function gtk_tree_path_new(): *GtkTreePath <cimport,nodecl> end
global function gtk_tree_path_new_from_string(path: cstring): *GtkTreePath <cimport,nodecl> end
global function gtk_tree_path_new_from_indices(first_index: cint, ...: cvarargs): *GtkTreePath <cimport,nodecl> end
global function gtk_tree_path_new_from_indicesv(indices: *cint, length: gsize): *GtkTreePath <cimport,nodecl> end
global function gtk_tree_path_to_string(path: *GtkTreePath): cstring <cimport,nodecl> end
global function gtk_tree_path_new_first(): *GtkTreePath <cimport,nodecl> end
global function gtk_tree_path_append_index(path: *GtkTreePath, index_: cint): void <cimport,nodecl> end
global function gtk_tree_path_prepend_index(path: *GtkTreePath, index_: cint): void <cimport,nodecl> end
global function gtk_tree_path_get_depth(path: *GtkTreePath): cint <cimport,nodecl> end
global function gtk_tree_path_get_indices(path: *GtkTreePath): *cint <cimport,nodecl> end
global function gtk_tree_path_get_indices_with_depth(path: *GtkTreePath, depth: *cint): *cint <cimport,nodecl> end
global function gtk_tree_path_free(path: *GtkTreePath): void <cimport,nodecl> end
global function gtk_tree_path_copy(path: *GtkTreePath): *GtkTreePath <cimport,nodecl> end
global function gtk_tree_path_get_type(): GType <cimport,nodecl> end
global function gtk_tree_path_compare(a: *GtkTreePath, b: *GtkTreePath): cint <cimport,nodecl> end
global function gtk_tree_path_next(path: *GtkTreePath): void <cimport,nodecl> end
global function gtk_tree_path_prev(path: *GtkTreePath): gboolean <cimport,nodecl> end
global function gtk_tree_path_up(path: *GtkTreePath): gboolean <cimport,nodecl> end
global function gtk_tree_path_down(path: *GtkTreePath): void <cimport,nodecl> end
global function gtk_tree_path_is_ancestor(path: *GtkTreePath, descendant: *GtkTreePath): gboolean <cimport,nodecl> end
global function gtk_tree_path_is_descendant(path: *GtkTreePath, ancestor: *GtkTreePath): gboolean <cimport,nodecl> end
global function gtk_tree_row_reference_get_type(): GType <cimport,nodecl> end
global function gtk_tree_row_reference_new(model: *GtkTreeModel, path: *GtkTreePath): *GtkTreeRowReference <cimport,nodecl> end
global function gtk_tree_row_reference_new_proxy(proxy: *GObject, model: *GtkTreeModel, path: *GtkTreePath): *GtkTreeRowReference <cimport,nodecl> end
global function gtk_tree_row_reference_get_path(reference: *GtkTreeRowReference): *GtkTreePath <cimport,nodecl> end
global function gtk_tree_row_reference_get_model(reference: *GtkTreeRowReference): *GtkTreeModel <cimport,nodecl> end
global function gtk_tree_row_reference_valid(reference: *GtkTreeRowReference): gboolean <cimport,nodecl> end
global function gtk_tree_row_reference_copy(reference: *GtkTreeRowReference): *GtkTreeRowReference <cimport,nodecl> end
global function gtk_tree_row_reference_free(reference: *GtkTreeRowReference): void <cimport,nodecl> end
global function gtk_tree_row_reference_inserted(proxy: *GObject, path: *GtkTreePath): void <cimport,nodecl> end
global function gtk_tree_row_reference_deleted(proxy: *GObject, path: *GtkTreePath): void <cimport,nodecl> end
global function gtk_tree_row_reference_reordered(proxy: *GObject, path: *GtkTreePath, iter: *GtkTreeIter, new_order: *cint): void <cimport,nodecl> end
global function gtk_tree_iter_copy(iter: *GtkTreeIter): *GtkTreeIter <cimport,nodecl> end
global function gtk_tree_iter_free(iter: *GtkTreeIter): void <cimport,nodecl> end
global function gtk_tree_iter_get_type(): GType <cimport,nodecl> end
global function gtk_tree_model_get_type(): GType <cimport,nodecl> end
global function gtk_tree_model_get_flags(tree_model: *GtkTreeModel): GtkTreeModelFlags <cimport,nodecl> end
global function gtk_tree_model_get_n_columns(tree_model: *GtkTreeModel): cint <cimport,nodecl> end
global function gtk_tree_model_get_column_type(tree_model: *GtkTreeModel, index_: cint): GType <cimport,nodecl> end
global function gtk_tree_model_get_iter(tree_model: *GtkTreeModel, iter: *GtkTreeIter, path: *GtkTreePath): gboolean <cimport,nodecl> end
global function gtk_tree_model_get_iter_from_string(tree_model: *GtkTreeModel, iter: *GtkTreeIter, path_string: cstring): gboolean <cimport,nodecl> end
global function gtk_tree_model_get_string_from_iter(tree_model: *GtkTreeModel, iter: *GtkTreeIter): cstring <cimport,nodecl> end
global function gtk_tree_model_get_iter_first(tree_model: *GtkTreeModel, iter: *GtkTreeIter): gboolean <cimport,nodecl> end
global function gtk_tree_model_get_path(tree_model: *GtkTreeModel, iter: *GtkTreeIter): *GtkTreePath <cimport,nodecl> end
global function gtk_tree_model_get_value(tree_model: *GtkTreeModel, iter: *GtkTreeIter, column: cint, value: *GValue): void <cimport,nodecl> end
global function gtk_tree_model_iter_previous(tree_model: *GtkTreeModel, iter: *GtkTreeIter): gboolean <cimport,nodecl> end
global function gtk_tree_model_iter_next(tree_model: *GtkTreeModel, iter: *GtkTreeIter): gboolean <cimport,nodecl> end
global function gtk_tree_model_iter_children(tree_model: *GtkTreeModel, iter: *GtkTreeIter, parent: *GtkTreeIter): gboolean <cimport,nodecl> end
global function gtk_tree_model_iter_has_child(tree_model: *GtkTreeModel, iter: *GtkTreeIter): gboolean <cimport,nodecl> end
global function gtk_tree_model_iter_n_children(tree_model: *GtkTreeModel, iter: *GtkTreeIter): cint <cimport,nodecl> end
global function gtk_tree_model_iter_nth_child(tree_model: *GtkTreeModel, iter: *GtkTreeIter, parent: *GtkTreeIter, n: cint): gboolean <cimport,nodecl> end
global function gtk_tree_model_iter_parent(tree_model: *GtkTreeModel, iter: *GtkTreeIter, child: *GtkTreeIter): gboolean <cimport,nodecl> end
global function gtk_tree_model_ref_node(tree_model: *GtkTreeModel, iter: *GtkTreeIter): void <cimport,nodecl> end
global function gtk_tree_model_unref_node(tree_model: *GtkTreeModel, iter: *GtkTreeIter): void <cimport,nodecl> end
global function gtk_tree_model_get(tree_model: *GtkTreeModel, iter: *GtkTreeIter, ...: cvarargs): void <cimport,nodecl> end
global function gtk_tree_model_get_valist(tree_model: *GtkTreeModel, iter: *GtkTreeIter, var_args: cvalist): void <cimport,nodecl> end
global function gtk_tree_model_foreach(model: *GtkTreeModel, func: GtkTreeModelForeachFunc, user_data: gpointer): void <cimport,nodecl> end
global function gtk_tree_model_row_changed(tree_model: *GtkTreeModel, path: *GtkTreePath, iter: *GtkTreeIter): void <cimport,nodecl> end
global function gtk_tree_model_row_inserted(tree_model: *GtkTreeModel, path: *GtkTreePath, iter: *GtkTreeIter): void <cimport,nodecl> end
global function gtk_tree_model_row_has_child_toggled(tree_model: *GtkTreeModel, path: *GtkTreePath, iter: *GtkTreeIter): void <cimport,nodecl> end
global function gtk_tree_model_row_deleted(tree_model: *GtkTreeModel, path: *GtkTreePath): void <cimport,nodecl> end
global function gtk_tree_model_rows_reordered(tree_model: *GtkTreeModel, path: *GtkTreePath, iter: *GtkTreeIter, new_order: *cint): void <cimport,nodecl> end
global function gtk_tree_model_rows_reordered_with_length(tree_model: *GtkTreeModel, path: *GtkTreePath, iter: *GtkTreeIter, new_order: *cint, length: cint): void <cimport,nodecl> end
global function gtk_cell_area_get_type(): GType <cimport,nodecl> end
global function gtk_cell_area_add(area: *GtkCellArea, renderer: *GtkCellRenderer): void <cimport,nodecl> end
global function gtk_cell_area_remove(area: *GtkCellArea, renderer: *GtkCellRenderer): void <cimport,nodecl> end
global function gtk_cell_area_has_renderer(area: *GtkCellArea, renderer: *GtkCellRenderer): gboolean <cimport,nodecl> end
global function gtk_cell_area_foreach(area: *GtkCellArea, callback: GtkCellCallback, callback_data: gpointer): void <cimport,nodecl> end
global function gtk_cell_area_foreach_alloc(area: *GtkCellArea, context: *GtkCellAreaContext, widget: *GtkWidget, cell_area: *GdkRectangle, background_area: *GdkRectangle, callback: GtkCellAllocCallback, callback_data: gpointer): void <cimport,nodecl> end
global function gtk_cell_area_event(area: *GtkCellArea, context: *GtkCellAreaContext, widget: *GtkWidget, event: *GdkEvent, cell_area: *GdkRectangle, flags: GtkCellRendererState): cint <cimport,nodecl> end
global function gtk_cell_area_snapshot(area: *GtkCellArea, context: *GtkCellAreaContext, widget: *GtkWidget, snapshot: *GtkSnapshot, background_area: *GdkRectangle, cell_area: *GdkRectangle, flags: GtkCellRendererState, paint_focus: gboolean): void <cimport,nodecl> end
global function gtk_cell_area_get_cell_allocation(area: *GtkCellArea, context: *GtkCellAreaContext, widget: *GtkWidget, renderer: *GtkCellRenderer, cell_area: *GdkRectangle, allocation: *GdkRectangle): void <cimport,nodecl> end
global function gtk_cell_area_get_cell_at_position(area: *GtkCellArea, context: *GtkCellAreaContext, widget: *GtkWidget, cell_area: *GdkRectangle, x: cint, y: cint, alloc_area: *GdkRectangle): *GtkCellRenderer <cimport,nodecl> end
global function gtk_cell_area_create_context(area: *GtkCellArea): *GtkCellAreaContext <cimport,nodecl> end
global function gtk_cell_area_copy_context(area: *GtkCellArea, context: *GtkCellAreaContext): *GtkCellAreaContext <cimport,nodecl> end
global function gtk_cell_area_get_request_mode(area: *GtkCellArea): GtkSizeRequestMode <cimport,nodecl> end
global function gtk_cell_area_get_preferred_width(area: *GtkCellArea, context: *GtkCellAreaContext, widget: *GtkWidget, minimum_width: *cint, natural_width: *cint): void <cimport,nodecl> end
global function gtk_cell_area_get_preferred_height_for_width(area: *GtkCellArea, context: *GtkCellAreaContext, widget: *GtkWidget, width: cint, minimum_height: *cint, natural_height: *cint): void <cimport,nodecl> end
global function gtk_cell_area_get_preferred_height(area: *GtkCellArea, context: *GtkCellAreaContext, widget: *GtkWidget, minimum_height: *cint, natural_height: *cint): void <cimport,nodecl> end
global function gtk_cell_area_get_preferred_width_for_height(area: *GtkCellArea, context: *GtkCellAreaContext, widget: *GtkWidget, height: cint, minimum_width: *cint, natural_width: *cint): void <cimport,nodecl> end
global function gtk_cell_area_get_current_path_string(area: *GtkCellArea): cstring <cimport,nodecl> end
global function gtk_cell_area_apply_attributes(area: *GtkCellArea, tree_model: *GtkTreeModel, iter: *GtkTreeIter, is_expander: gboolean, is_expanded: gboolean): void <cimport,nodecl> end
global function gtk_cell_area_attribute_connect(area: *GtkCellArea, renderer: *GtkCellRenderer, attribute: cstring, column: cint): void <cimport,nodecl> end
global function gtk_cell_area_attribute_disconnect(area: *GtkCellArea, renderer: *GtkCellRenderer, attribute: cstring): void <cimport,nodecl> end
global function gtk_cell_area_attribute_get_column(area: *GtkCellArea, renderer: *GtkCellRenderer, attribute: cstring): cint <cimport,nodecl> end
global function gtk_cell_area_class_install_cell_property(aclass: *GtkCellAreaClass, property_id: guint, pspec: *GParamSpec): void <cimport,nodecl> end
global function gtk_cell_area_class_find_cell_property(aclass: *GtkCellAreaClass, property_name: cstring): *GParamSpec <cimport,nodecl> end
global function gtk_cell_area_class_list_cell_properties(aclass: *GtkCellAreaClass, n_properties: *guint): **GParamSpec <cimport,nodecl> end
global function gtk_cell_area_add_with_properties(area: *GtkCellArea, renderer: *GtkCellRenderer, first_prop_name: cstring, ...: cvarargs): void <cimport,nodecl> end
global function gtk_cell_area_cell_set(area: *GtkCellArea, renderer: *GtkCellRenderer, first_prop_name: cstring, ...: cvarargs): void <cimport,nodecl> end
global function gtk_cell_area_cell_get(area: *GtkCellArea, renderer: *GtkCellRenderer, first_prop_name: cstring, ...: cvarargs): void <cimport,nodecl> end
global function gtk_cell_area_cell_set_valist(area: *GtkCellArea, renderer: *GtkCellRenderer, first_property_name: cstring, var_args: cvalist): void <cimport,nodecl> end
global function gtk_cell_area_cell_get_valist(area: *GtkCellArea, renderer: *GtkCellRenderer, first_property_name: cstring, var_args: cvalist): void <cimport,nodecl> end
global function gtk_cell_area_cell_set_property(area: *GtkCellArea, renderer: *GtkCellRenderer, property_name: cstring, value: *GValue): void <cimport,nodecl> end
global function gtk_cell_area_cell_get_property(area: *GtkCellArea, renderer: *GtkCellRenderer, property_name: cstring, value: *GValue): void <cimport,nodecl> end
global function gtk_cell_area_is_activatable(area: *GtkCellArea): gboolean <cimport,nodecl> end
global function gtk_cell_area_activate(area: *GtkCellArea, context: *GtkCellAreaContext, widget: *GtkWidget, cell_area: *GdkRectangle, flags: GtkCellRendererState, edit_only: gboolean): gboolean <cimport,nodecl> end
global function gtk_cell_area_focus(area: *GtkCellArea, direction: GtkDirectionType): gboolean <cimport,nodecl> end
global function gtk_cell_area_set_focus_cell(area: *GtkCellArea, renderer: *GtkCellRenderer): void <cimport,nodecl> end
global function gtk_cell_area_get_focus_cell(area: *GtkCellArea): *GtkCellRenderer <cimport,nodecl> end
global function gtk_cell_area_add_focus_sibling(area: *GtkCellArea, renderer: *GtkCellRenderer, sibling: *GtkCellRenderer): void <cimport,nodecl> end
global function gtk_cell_area_remove_focus_sibling(area: *GtkCellArea, renderer: *GtkCellRenderer, sibling: *GtkCellRenderer): void <cimport,nodecl> end
global function gtk_cell_area_is_focus_sibling(area: *GtkCellArea, renderer: *GtkCellRenderer, sibling: *GtkCellRenderer): gboolean <cimport,nodecl> end
global function gtk_cell_area_get_focus_siblings(area: *GtkCellArea, renderer: *GtkCellRenderer): *GList <cimport,nodecl> end
global function gtk_cell_area_get_focus_from_sibling(area: *GtkCellArea, renderer: *GtkCellRenderer): *GtkCellRenderer <cimport,nodecl> end
global function gtk_cell_area_get_edited_cell(area: *GtkCellArea): *GtkCellRenderer <cimport,nodecl> end
global function gtk_cell_area_get_edit_widget(area: *GtkCellArea): *GtkCellEditable <cimport,nodecl> end
global function gtk_cell_area_activate_cell(area: *GtkCellArea, widget: *GtkWidget, renderer: *GtkCellRenderer, event: *GdkEvent, cell_area: *GdkRectangle, flags: GtkCellRendererState): gboolean <cimport,nodecl> end
global function gtk_cell_area_stop_editing(area: *GtkCellArea, canceled: gboolean): void <cimport,nodecl> end
global function gtk_cell_area_inner_cell_area(area: *GtkCellArea, widget: *GtkWidget, cell_area: *GdkRectangle, inner_area: *GdkRectangle): void <cimport,nodecl> end
global function gtk_cell_area_request_renderer(area: *GtkCellArea, renderer: *GtkCellRenderer, orientation: GtkOrientation, widget: *GtkWidget, for_size: cint, minimum_size: *cint, natural_size: *cint): void <cimport,nodecl> end
global function _gtk_cell_area_set_cell_data_func_with_proxy(area: *GtkCellArea, cell: *GtkCellRenderer, func: GFunc, func_data: gpointer, destroy: GDestroyNotify, proxy: gpointer): void <cimport,nodecl> end
global function gtk_cell_area_box_get_type(): GType <cimport,nodecl> end
global function gtk_cell_area_box_new(): *GtkCellArea <cimport,nodecl> end
global function gtk_cell_area_box_pack_start(box: *GtkCellAreaBox, renderer: *GtkCellRenderer, expand: gboolean, align: gboolean, fixed: gboolean): void <cimport,nodecl> end
global function gtk_cell_area_box_pack_end(box: *GtkCellAreaBox, renderer: *GtkCellRenderer, expand: gboolean, align: gboolean, fixed: gboolean): void <cimport,nodecl> end
global function gtk_cell_area_box_get_spacing(box: *GtkCellAreaBox): cint <cimport,nodecl> end
global function gtk_cell_area_box_set_spacing(box: *GtkCellAreaBox, spacing: cint): void <cimport,nodecl> end
global function _gtk_cell_area_box_group_visible(box: *GtkCellAreaBox, group_idx: cint): gboolean <cimport,nodecl> end
global function gtk_cell_area_context_get_type(): GType <cimport,nodecl> end
global function gtk_cell_area_context_get_area(context: *GtkCellAreaContext): *GtkCellArea <cimport,nodecl> end
global function gtk_cell_area_context_allocate(context: *GtkCellAreaContext, width: cint, height: cint): void <cimport,nodecl> end
global function gtk_cell_area_context_reset(context: *GtkCellAreaContext): void <cimport,nodecl> end
global function gtk_cell_area_context_get_preferred_width(context: *GtkCellAreaContext, minimum_width: *cint, natural_width: *cint): void <cimport,nodecl> end
global function gtk_cell_area_context_get_preferred_height(context: *GtkCellAreaContext, minimum_height: *cint, natural_height: *cint): void <cimport,nodecl> end
global function gtk_cell_area_context_get_preferred_height_for_width(context: *GtkCellAreaContext, width: cint, minimum_height: *cint, natural_height: *cint): void <cimport,nodecl> end
global function gtk_cell_area_context_get_preferred_width_for_height(context: *GtkCellAreaContext, height: cint, minimum_width: *cint, natural_width: *cint): void <cimport,nodecl> end
global function gtk_cell_area_context_get_allocation(context: *GtkCellAreaContext, width: *cint, height: *cint): void <cimport,nodecl> end
global function gtk_cell_area_context_push_preferred_width(context: *GtkCellAreaContext, minimum_width: cint, natural_width: cint): void <cimport,nodecl> end
global function gtk_cell_area_context_push_preferred_height(context: *GtkCellAreaContext, minimum_height: cint, natural_height: cint): void <cimport,nodecl> end
global function gtk_cell_layout_get_type(): GType <cimport,nodecl> end
global function gtk_cell_layout_pack_start(cell_layout: *GtkCellLayout, cell: *GtkCellRenderer, expand: gboolean): void <cimport,nodecl> end
global function gtk_cell_layout_pack_end(cell_layout: *GtkCellLayout, cell: *GtkCellRenderer, expand: gboolean): void <cimport,nodecl> end
global function gtk_cell_layout_get_cells(cell_layout: *GtkCellLayout): *GList <cimport,nodecl> end
global function gtk_cell_layout_clear(cell_layout: *GtkCellLayout): void <cimport,nodecl> end
global function gtk_cell_layout_set_attributes(cell_layout: *GtkCellLayout, cell: *GtkCellRenderer, ...: cvarargs): void <cimport,nodecl> end
global function gtk_cell_layout_add_attribute(cell_layout: *GtkCellLayout, cell: *GtkCellRenderer, attribute: cstring, column: cint): void <cimport,nodecl> end
global function gtk_cell_layout_set_cell_data_func(cell_layout: *GtkCellLayout, cell: *GtkCellRenderer, func: GtkCellLayoutDataFunc, func_data: gpointer, destroy: GDestroyNotify): void <cimport,nodecl> end
global function gtk_cell_layout_clear_attributes(cell_layout: *GtkCellLayout, cell: *GtkCellRenderer): void <cimport,nodecl> end
global function gtk_cell_layout_reorder(cell_layout: *GtkCellLayout, cell: *GtkCellRenderer, position: cint): void <cimport,nodecl> end
global function gtk_cell_layout_get_area(cell_layout: *GtkCellLayout): *GtkCellArea <cimport,nodecl> end
global function _gtk_cell_layout_buildable_custom_tag_start(buildable: *GtkBuildable, builder: *GtkBuilder, child: *GObject, tagname: cstring, parser: *GtkBuildableParser, data: *gpointer): gboolean <cimport,nodecl> end
global function _gtk_cell_layout_buildable_custom_tag_end(buildable: *GtkBuildable, builder: *GtkBuilder, child: *GObject, tagname: cstring, data: *gpointer): gboolean <cimport,nodecl> end
global function _gtk_cell_layout_buildable_add_child(buildable: *GtkBuildable, builder: *GtkBuilder, child: *GObject, type: cstring): void <cimport,nodecl> end
global function gtk_cell_renderer_text_get_type(): GType <cimport,nodecl> end
global function gtk_cell_renderer_text_new(): *GtkCellRenderer <cimport,nodecl> end
global function gtk_cell_renderer_text_set_fixed_height_from_font(renderer: *GtkCellRendererText, number_of_rows: cint): void <cimport,nodecl> end
global function gtk_cell_renderer_accel_get_type(): GType <cimport,nodecl> end
global function gtk_cell_renderer_accel_new(): *GtkCellRenderer <cimport,nodecl> end
global function gtk_cell_renderer_combo_get_type(): GType <cimport,nodecl> end
global function gtk_cell_renderer_combo_new(): *GtkCellRenderer <cimport,nodecl> end
global function gtk_cell_renderer_pixbuf_get_type(): GType <cimport,nodecl> end
global function gtk_cell_renderer_pixbuf_new(): *GtkCellRenderer <cimport,nodecl> end
global function gtk_cell_renderer_progress_get_type(): GType <cimport,nodecl> end
global function gtk_cell_renderer_progress_new(): *GtkCellRenderer <cimport,nodecl> end
global function gtk_cell_renderer_spin_get_type(): GType <cimport,nodecl> end
global function gtk_cell_renderer_spin_new(): *GtkCellRenderer <cimport,nodecl> end
global function gtk_cell_renderer_spinner_get_type(): GType <cimport,nodecl> end
global function gtk_cell_renderer_spinner_new(): *GtkCellRenderer <cimport,nodecl> end
global function gtk_cell_renderer_toggle_get_type(): GType <cimport,nodecl> end
global function gtk_cell_renderer_toggle_new(): *GtkCellRenderer <cimport,nodecl> end
global function gtk_cell_renderer_toggle_get_radio(toggle: *GtkCellRendererToggle): gboolean <cimport,nodecl> end
global function gtk_cell_renderer_toggle_set_radio(toggle: *GtkCellRendererToggle, radio: gboolean): void <cimport,nodecl> end
global function gtk_cell_renderer_toggle_get_active(toggle: *GtkCellRendererToggle): gboolean <cimport,nodecl> end
global function gtk_cell_renderer_toggle_set_active(toggle: *GtkCellRendererToggle, setting: gboolean): void <cimport,nodecl> end
global function gtk_cell_renderer_toggle_get_activatable(toggle: *GtkCellRendererToggle): gboolean <cimport,nodecl> end
global function gtk_cell_renderer_toggle_set_activatable(toggle: *GtkCellRendererToggle, setting: gboolean): void <cimport,nodecl> end
global function gtk_cell_view_get_type(): GType <cimport,nodecl> end
global function gtk_cell_view_new(): *GtkWidget <cimport,nodecl> end
global function gtk_cell_view_new_with_context(area: *GtkCellArea, context: *GtkCellAreaContext): *GtkWidget <cimport,nodecl> end
global function gtk_cell_view_new_with_text(text: cstring): *GtkWidget <cimport,nodecl> end
global function gtk_cell_view_new_with_markup(markup: cstring): *GtkWidget <cimport,nodecl> end
global function gtk_cell_view_new_with_texture(texture: *GdkTexture): *GtkWidget <cimport,nodecl> end
global function gtk_cell_view_set_model(cell_view: *GtkCellView, model: *GtkTreeModel): void <cimport,nodecl> end
global function gtk_cell_view_get_model(cell_view: *GtkCellView): *GtkTreeModel <cimport,nodecl> end
global function gtk_cell_view_set_displayed_row(cell_view: *GtkCellView, path: *GtkTreePath): void <cimport,nodecl> end
global function gtk_cell_view_get_displayed_row(cell_view: *GtkCellView): *GtkTreePath <cimport,nodecl> end
global function gtk_cell_view_get_draw_sensitive(cell_view: *GtkCellView): gboolean <cimport,nodecl> end
global function gtk_cell_view_set_draw_sensitive(cell_view: *GtkCellView, draw_sensitive: gboolean): void <cimport,nodecl> end
global function gtk_cell_view_get_fit_model(cell_view: *GtkCellView): gboolean <cimport,nodecl> end
global function gtk_cell_view_set_fit_model(cell_view: *GtkCellView, fit_model: gboolean): void <cimport,nodecl> end
global function gtk_center_box_get_type(): GType <cimport,nodecl> end
global function gtk_center_box_new(): *GtkWidget <cimport,nodecl> end
global function gtk_center_box_set_start_widget(self: *GtkCenterBox, child: *GtkWidget): void <cimport,nodecl> end
global function gtk_center_box_set_center_widget(self: *GtkCenterBox, child: *GtkWidget): void <cimport,nodecl> end
global function gtk_center_box_set_end_widget(self: *GtkCenterBox, child: *GtkWidget): void <cimport,nodecl> end
global function gtk_center_box_get_start_widget(self: *GtkCenterBox): *GtkWidget <cimport,nodecl> end
global function gtk_center_box_get_center_widget(self: *GtkCenterBox): *GtkWidget <cimport,nodecl> end
global function gtk_center_box_get_end_widget(self: *GtkCenterBox): *GtkWidget <cimport,nodecl> end
global function gtk_center_box_set_baseline_position(self: *GtkCenterBox, position: GtkBaselinePosition): void <cimport,nodecl> end
global function gtk_center_box_get_baseline_position(self: *GtkCenterBox): GtkBaselinePosition <cimport,nodecl> end
global function gtk_center_layout_get_type(): GType <cimport,nodecl> end
global function glib_autoptr_clear_GtkCenterLayout(_ptr: *GtkCenterLayout): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GtkCenterLayout(_ptr: **GtkCenterLayout): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GtkCenterLayout(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GtkCenterLayout(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GtkCenterLayout(_q: **GQueue): void <cimport,nodecl> end
global function glib_autoptr_clear_GtkCenterLayoutClass(_ptr: *GtkCenterLayoutClass): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GtkCenterLayoutClass(_ptr: **GtkCenterLayoutClass): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GtkCenterLayoutClass(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GtkCenterLayoutClass(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GtkCenterLayoutClass(_q: **GQueue): void <cimport,nodecl> end
global function GTK_CENTER_LAYOUT(ptr: gpointer): *GtkCenterLayout <cimport,nodecl> end
global function GTK_IS_CENTER_LAYOUT(ptr: gpointer): gboolean <cimport,nodecl> end
global function gtk_center_layout_new(): *GtkLayoutManager <cimport,nodecl> end
global function gtk_center_layout_set_orientation(self: *GtkCenterLayout, orientation: GtkOrientation): void <cimport,nodecl> end
global function gtk_center_layout_get_orientation(self: *GtkCenterLayout): GtkOrientation <cimport,nodecl> end
global function gtk_center_layout_set_baseline_position(self: *GtkCenterLayout, baseline_position: GtkBaselinePosition): void <cimport,nodecl> end
global function gtk_center_layout_get_baseline_position(self: *GtkCenterLayout): GtkBaselinePosition <cimport,nodecl> end
global function gtk_center_layout_set_start_widget(self: *GtkCenterLayout, widget: *GtkWidget): void <cimport,nodecl> end
global function gtk_center_layout_get_start_widget(self: *GtkCenterLayout): *GtkWidget <cimport,nodecl> end
global function gtk_center_layout_set_center_widget(self: *GtkCenterLayout, widget: *GtkWidget): void <cimport,nodecl> end
global function gtk_center_layout_get_center_widget(self: *GtkCenterLayout): *GtkWidget <cimport,nodecl> end
global function gtk_center_layout_set_end_widget(self: *GtkCenterLayout, widget: *GtkWidget): void <cimport,nodecl> end
global function gtk_center_layout_get_end_widget(self: *GtkCenterLayout): *GtkWidget <cimport,nodecl> end
global function gtk_toggle_button_get_type(): GType <cimport,nodecl> end
global function gtk_toggle_button_new(): *GtkWidget <cimport,nodecl> end
global function gtk_toggle_button_new_with_label(label: cstring): *GtkWidget <cimport,nodecl> end
global function gtk_toggle_button_new_with_mnemonic(label: cstring): *GtkWidget <cimport,nodecl> end
global function gtk_toggle_button_set_active(toggle_button: *GtkToggleButton, is_active: gboolean): void <cimport,nodecl> end
global function gtk_toggle_button_get_active(toggle_button: *GtkToggleButton): gboolean <cimport,nodecl> end
global function gtk_toggle_button_toggled(toggle_button: *GtkToggleButton): void <cimport,nodecl> end
global function gtk_toggle_button_set_group(toggle_button: *GtkToggleButton, group: *GtkToggleButton): void <cimport,nodecl> end
global function gtk_check_button_get_type(): GType <cimport,nodecl> end
global function gtk_check_button_new(): *GtkWidget <cimport,nodecl> end
global function gtk_check_button_new_with_label(label: cstring): *GtkWidget <cimport,nodecl> end
global function gtk_check_button_new_with_mnemonic(label: cstring): *GtkWidget <cimport,nodecl> end
global function gtk_check_button_set_inconsistent(check_button: *GtkCheckButton, inconsistent: gboolean): void <cimport,nodecl> end
global function gtk_check_button_get_inconsistent(check_button: *GtkCheckButton): gboolean <cimport,nodecl> end
global function gtk_check_button_get_active(self: *GtkCheckButton): gboolean <cimport,nodecl> end
global function gtk_check_button_set_active(self: *GtkCheckButton, setting: gboolean): void <cimport,nodecl> end
global function gtk_check_button_get_label(self: *GtkCheckButton): cstring <cimport,nodecl> end
global function gtk_check_button_set_label(self: *GtkCheckButton, label: cstring): void <cimport,nodecl> end
global function gtk_check_button_set_group(self: *GtkCheckButton, group: *GtkCheckButton): void <cimport,nodecl> end
global function gtk_check_button_get_use_underline(self: *GtkCheckButton): gboolean <cimport,nodecl> end
global function gtk_check_button_set_use_underline(self: *GtkCheckButton, setting: gboolean): void <cimport,nodecl> end
global function gtk_color_button_get_type(): GType <cimport,nodecl> end
global function gtk_color_button_new(): *GtkWidget <cimport,nodecl> end
global function gtk_color_button_new_with_rgba(rgba: *GdkRGBA): *GtkWidget <cimport,nodecl> end
global function gtk_color_button_set_title(button: *GtkColorButton, title: cstring): void <cimport,nodecl> end
global function gtk_color_button_get_title(button: *GtkColorButton): cstring <cimport,nodecl> end
global function gtk_color_button_get_modal(button: *GtkColorButton): gboolean <cimport,nodecl> end
global function gtk_color_button_set_modal(button: *GtkColorButton, modal: gboolean): void <cimport,nodecl> end
global function gtk_color_chooser_get_type(): GType <cimport,nodecl> end
global function gtk_color_chooser_get_rgba(chooser: *GtkColorChooser, color: *GdkRGBA): void <cimport,nodecl> end
global function gtk_color_chooser_set_rgba(chooser: *GtkColorChooser, color: *GdkRGBA): void <cimport,nodecl> end
global function gtk_color_chooser_get_use_alpha(chooser: *GtkColorChooser): gboolean <cimport,nodecl> end
global function gtk_color_chooser_set_use_alpha(chooser: *GtkColorChooser, use_alpha: gboolean): void <cimport,nodecl> end
global function gtk_color_chooser_add_palette(chooser: *GtkColorChooser, orientation: GtkOrientation, colors_per_line: cint, n_colors: cint, colors: *GdkRGBA): void <cimport,nodecl> end
global function gtk_color_chooser_dialog_get_type(): GType <cimport,nodecl> end
global function gtk_color_chooser_dialog_new(title: cstring, parent: *GtkWindow): *GtkWidget <cimport,nodecl> end
global function gtk_color_chooser_widget_get_type(): GType <cimport,nodecl> end
global function gtk_color_chooser_widget_new(): *GtkWidget <cimport,nodecl> end
global function gtk_hsv_to_rgb(h: float32, s: float32, v: float32, r: *float32, g: *float32, b: *float32): void <cimport,nodecl> end
global function gtk_rgb_to_hsv(r: float32, g: float32, b: float32, h: *float32, s: *float32, v: *float32): void <cimport,nodecl> end
global function gtk_sorter_get_type(): GType <cimport,nodecl> end
global function glib_autoptr_clear_GtkSorter(_ptr: *GtkSorter): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GtkSorter(_ptr: **GtkSorter): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GtkSorter(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GtkSorter(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GtkSorter(_q: **GQueue): void <cimport,nodecl> end
global function glib_autoptr_clear_GtkSorterClass(_ptr: *GtkSorterClass): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GtkSorterClass(_ptr: **GtkSorterClass): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GtkSorterClass(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GtkSorterClass(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GtkSorterClass(_q: **GQueue): void <cimport,nodecl> end
global function GTK_SORTER(ptr: gpointer): *GtkSorter <cimport,nodecl> end
global function GTK_SORTER_CLASS(ptr: gpointer): *GtkSorterClass <cimport,nodecl> end
global function GTK_IS_SORTER(ptr: gpointer): gboolean <cimport,nodecl> end
global function GTK_IS_SORTER_CLASS(ptr: gpointer): gboolean <cimport,nodecl> end
global function GTK_SORTER_GET_CLASS(ptr: gpointer): *GtkSorterClass <cimport,nodecl> end
global function gtk_sorter_compare(self: *GtkSorter, item1: gpointer, item2: gpointer): GtkOrdering <cimport,nodecl> end
global function gtk_sorter_get_order(self: *GtkSorter): GtkSorterOrder <cimport,nodecl> end
global function gtk_sorter_changed(self: *GtkSorter, change: GtkSorterChange): void <cimport,nodecl> end
global function gtk_sort_list_model_get_type(): GType <cimport,nodecl> end
global function glib_autoptr_clear_GtkSortListModel(_ptr: *GtkSortListModel): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GtkSortListModel(_ptr: **GtkSortListModel): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GtkSortListModel(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GtkSortListModel(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GtkSortListModel(_q: **GQueue): void <cimport,nodecl> end
global function glib_autoptr_clear_GtkSortListModelClass(_ptr: *GtkSortListModelClass): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GtkSortListModelClass(_ptr: **GtkSortListModelClass): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GtkSortListModelClass(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GtkSortListModelClass(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GtkSortListModelClass(_q: **GQueue): void <cimport,nodecl> end
global function GTK_SORT_LIST_MODEL(ptr: gpointer): *GtkSortListModel <cimport,nodecl> end
global function GTK_IS_SORT_LIST_MODEL(ptr: gpointer): gboolean <cimport,nodecl> end
global function gtk_sort_list_model_new(model: *GListModel, sorter: *GtkSorter): *GtkSortListModel <cimport,nodecl> end
global function gtk_sort_list_model_set_sorter(self: *GtkSortListModel, sorter: *GtkSorter): void <cimport,nodecl> end
global function gtk_sort_list_model_get_sorter(self: *GtkSortListModel): *GtkSorter <cimport,nodecl> end
global function gtk_sort_list_model_set_model(self: *GtkSortListModel, model: *GListModel): void <cimport,nodecl> end
global function gtk_sort_list_model_get_model(self: *GtkSortListModel): *GListModel <cimport,nodecl> end
global function gtk_sort_list_model_set_incremental(self: *GtkSortListModel, incremental: gboolean): void <cimport,nodecl> end
global function gtk_sort_list_model_get_incremental(self: *GtkSortListModel): gboolean <cimport,nodecl> end
global function gtk_sort_list_model_get_pending(self: *GtkSortListModel): guint <cimport,nodecl> end
global function gtk_selection_model_get_type(): GType <cimport,nodecl> end
global function glib_autoptr_clear_GtkSelectionModel(_ptr: *GtkSelectionModel): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GtkSelectionModel(_ptr: **GtkSelectionModel): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GtkSelectionModel(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GtkSelectionModel(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GtkSelectionModel(_q: **GQueue): void <cimport,nodecl> end
global function GTK_SELECTION_MODEL(ptr: gpointer): *GtkSelectionModel <cimport,nodecl> end
global function GTK_IS_SELECTION_MODEL(ptr: gpointer): gboolean <cimport,nodecl> end
global function GTK_SELECTION_MODEL_GET_IFACE(ptr: gpointer): *GtkSelectionModelInterface <cimport,nodecl> end
global function gtk_selection_model_is_selected(model: *GtkSelectionModel, position: guint): gboolean <cimport,nodecl> end
global function gtk_selection_model_get_selection(model: *GtkSelectionModel): *GtkBitset <cimport,nodecl> end
global function gtk_selection_model_get_selection_in_range(model: *GtkSelectionModel, position: guint, n_items: guint): *GtkBitset <cimport,nodecl> end
global function gtk_selection_model_select_item(model: *GtkSelectionModel, position: guint, unselect_rest: gboolean): gboolean <cimport,nodecl> end
global function gtk_selection_model_unselect_item(model: *GtkSelectionModel, position: guint): gboolean <cimport,nodecl> end
global function gtk_selection_model_select_range(model: *GtkSelectionModel, position: guint, n_items: guint, unselect_rest: gboolean): gboolean <cimport,nodecl> end
global function gtk_selection_model_unselect_range(model: *GtkSelectionModel, position: guint, n_items: guint): gboolean <cimport,nodecl> end
global function gtk_selection_model_select_all(model: *GtkSelectionModel): gboolean <cimport,nodecl> end
global function gtk_selection_model_unselect_all(model: *GtkSelectionModel): gboolean <cimport,nodecl> end
global function gtk_selection_model_set_selection(model: *GtkSelectionModel, selected: *GtkBitset, mask: *GtkBitset): gboolean <cimport,nodecl> end
global function gtk_selection_model_selection_changed(model: *GtkSelectionModel, position: guint, n_items: guint): void <cimport,nodecl> end
global function gtk_column_view_get_type(): GType <cimport,nodecl> end
global function gtk_column_view_new(model: *GtkSelectionModel): *GtkWidget <cimport,nodecl> end
global function gtk_column_view_get_columns(self: *GtkColumnView): *GListModel <cimport,nodecl> end
global function gtk_column_view_append_column(self: *GtkColumnView, column: *GtkColumnViewColumn): void <cimport,nodecl> end
global function gtk_column_view_remove_column(self: *GtkColumnView, column: *GtkColumnViewColumn): void <cimport,nodecl> end
global function gtk_column_view_insert_column(self: *GtkColumnView, position: guint, column: *GtkColumnViewColumn): void <cimport,nodecl> end
global function gtk_column_view_get_model(self: *GtkColumnView): *GtkSelectionModel <cimport,nodecl> end
global function gtk_column_view_set_model(self: *GtkColumnView, model: *GtkSelectionModel): void <cimport,nodecl> end
global function gtk_column_view_get_show_row_separators(self: *GtkColumnView): gboolean <cimport,nodecl> end
global function gtk_column_view_set_show_row_separators(self: *GtkColumnView, show_row_separators: gboolean): void <cimport,nodecl> end
global function gtk_column_view_get_show_column_separators(self: *GtkColumnView): gboolean <cimport,nodecl> end
global function gtk_column_view_set_show_column_separators(self: *GtkColumnView, show_column_separators: gboolean): void <cimport,nodecl> end
global function gtk_column_view_get_sorter(self: *GtkColumnView): *GtkSorter <cimport,nodecl> end
global function gtk_column_view_sort_by_column(self: *GtkColumnView, column: *GtkColumnViewColumn, direction: GtkSortType): void <cimport,nodecl> end
global function gtk_column_view_set_single_click_activate(self: *GtkColumnView, single_click_activate: gboolean): void <cimport,nodecl> end
global function gtk_column_view_get_single_click_activate(self: *GtkColumnView): gboolean <cimport,nodecl> end
global function gtk_column_view_set_reorderable(self: *GtkColumnView, reorderable: gboolean): void <cimport,nodecl> end
global function gtk_column_view_get_reorderable(self: *GtkColumnView): gboolean <cimport,nodecl> end
global function gtk_column_view_set_enable_rubberband(self: *GtkColumnView, enable_rubberband: gboolean): void <cimport,nodecl> end
global function gtk_column_view_get_enable_rubberband(self: *GtkColumnView): gboolean <cimport,nodecl> end
global function glib_autoptr_clear_GtkColumnViewColumn(_ptr: *GtkColumnViewColumn): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GtkColumnViewColumn(_ptr: **GtkColumnViewColumn): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GtkColumnViewColumn(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GtkColumnViewColumn(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GtkColumnViewColumn(_q: **GQueue): void <cimport,nodecl> end
global function gtk_column_view_column_get_type(): GType <cimport,nodecl> end
global function gtk_column_view_column_new(title: cstring, factory: *GtkListItemFactory): *GtkColumnViewColumn <cimport,nodecl> end
global function gtk_column_view_column_get_column_view(self: *GtkColumnViewColumn): *GtkColumnView <cimport,nodecl> end
global function gtk_column_view_column_set_factory(self: *GtkColumnViewColumn, factory: *GtkListItemFactory): void <cimport,nodecl> end
global function gtk_column_view_column_get_factory(self: *GtkColumnViewColumn): *GtkListItemFactory <cimport,nodecl> end
global function gtk_column_view_column_set_title(self: *GtkColumnViewColumn, title: cstring): void <cimport,nodecl> end
global function gtk_column_view_column_get_title(self: *GtkColumnViewColumn): cstring <cimport,nodecl> end
global function gtk_column_view_column_set_sorter(self: *GtkColumnViewColumn, sorter: *GtkSorter): void <cimport,nodecl> end
global function gtk_column_view_column_get_sorter(self: *GtkColumnViewColumn): *GtkSorter <cimport,nodecl> end
global function gtk_column_view_column_set_visible(self: *GtkColumnViewColumn, visible: gboolean): void <cimport,nodecl> end
global function gtk_column_view_column_get_visible(self: *GtkColumnViewColumn): gboolean <cimport,nodecl> end
global function gtk_column_view_column_set_header_menu(self: *GtkColumnViewColumn, menu: *GMenuModel): void <cimport,nodecl> end
global function gtk_column_view_column_get_header_menu(self: *GtkColumnViewColumn): *GMenuModel <cimport,nodecl> end
global function gtk_column_view_column_set_fixed_width(self: *GtkColumnViewColumn, fixed_width: cint): void <cimport,nodecl> end
global function gtk_column_view_column_get_fixed_width(self: *GtkColumnViewColumn): cint <cimport,nodecl> end
global function gtk_column_view_column_set_resizable(self: *GtkColumnViewColumn, resizable: gboolean): void <cimport,nodecl> end
global function gtk_column_view_column_get_resizable(self: *GtkColumnViewColumn): gboolean <cimport,nodecl> end
global function gtk_column_view_column_set_expand(self: *GtkColumnViewColumn, expand: gboolean): void <cimport,nodecl> end
global function gtk_column_view_column_get_expand(self: *GtkColumnViewColumn): gboolean <cimport,nodecl> end
global function gtk_tree_sortable_get_type(): GType <cimport,nodecl> end
global function gtk_tree_sortable_sort_column_changed(sortable: *GtkTreeSortable): void <cimport,nodecl> end
global function gtk_tree_sortable_get_sort_column_id(sortable: *GtkTreeSortable, sort_column_id: *cint, order: *GtkSortType): gboolean <cimport,nodecl> end
global function gtk_tree_sortable_set_sort_column_id(sortable: *GtkTreeSortable, sort_column_id: cint, order: GtkSortType): void <cimport,nodecl> end
global function gtk_tree_sortable_set_sort_func(sortable: *GtkTreeSortable, sort_column_id: cint, sort_func: GtkTreeIterCompareFunc, user_data: gpointer, destroy: GDestroyNotify): void <cimport,nodecl> end
global function gtk_tree_sortable_set_default_sort_func(sortable: *GtkTreeSortable, sort_func: GtkTreeIterCompareFunc, user_data: gpointer, destroy: GDestroyNotify): void <cimport,nodecl> end
global function gtk_tree_sortable_has_default_sort_func(sortable: *GtkTreeSortable): gboolean <cimport,nodecl> end
global function gtk_tree_view_column_get_type(): GType <cimport,nodecl> end
global function gtk_tree_view_column_new(): *GtkTreeViewColumn <cimport,nodecl> end
global function gtk_tree_view_column_new_with_area(area: *GtkCellArea): *GtkTreeViewColumn <cimport,nodecl> end
global function gtk_tree_view_column_new_with_attributes(title: cstring, cell: *GtkCellRenderer, ...: cvarargs): *GtkTreeViewColumn <cimport,nodecl> end
global function gtk_tree_view_column_pack_start(tree_column: *GtkTreeViewColumn, cell: *GtkCellRenderer, expand: gboolean): void <cimport,nodecl> end
global function gtk_tree_view_column_pack_end(tree_column: *GtkTreeViewColumn, cell: *GtkCellRenderer, expand: gboolean): void <cimport,nodecl> end
global function gtk_tree_view_column_clear(tree_column: *GtkTreeViewColumn): void <cimport,nodecl> end
global function gtk_tree_view_column_add_attribute(tree_column: *GtkTreeViewColumn, cell_renderer: *GtkCellRenderer, attribute: cstring, column: cint): void <cimport,nodecl> end
global function gtk_tree_view_column_set_attributes(tree_column: *GtkTreeViewColumn, cell_renderer: *GtkCellRenderer, ...: cvarargs): void <cimport,nodecl> end
global function gtk_tree_view_column_set_cell_data_func(tree_column: *GtkTreeViewColumn, cell_renderer: *GtkCellRenderer, func: GtkTreeCellDataFunc, func_data: gpointer, destroy: GDestroyNotify): void <cimport,nodecl> end
global function gtk_tree_view_column_clear_attributes(tree_column: *GtkTreeViewColumn, cell_renderer: *GtkCellRenderer): void <cimport,nodecl> end
global function gtk_tree_view_column_set_spacing(tree_column: *GtkTreeViewColumn, spacing: cint): void <cimport,nodecl> end
global function gtk_tree_view_column_get_spacing(tree_column: *GtkTreeViewColumn): cint <cimport,nodecl> end
global function gtk_tree_view_column_set_visible(tree_column: *GtkTreeViewColumn, visible: gboolean): void <cimport,nodecl> end
global function gtk_tree_view_column_get_visible(tree_column: *GtkTreeViewColumn): gboolean <cimport,nodecl> end
global function gtk_tree_view_column_set_resizable(tree_column: *GtkTreeViewColumn, resizable: gboolean): void <cimport,nodecl> end
global function gtk_tree_view_column_get_resizable(tree_column: *GtkTreeViewColumn): gboolean <cimport,nodecl> end
global function gtk_tree_view_column_set_sizing(tree_column: *GtkTreeViewColumn, type: GtkTreeViewColumnSizing): void <cimport,nodecl> end
global function gtk_tree_view_column_get_sizing(tree_column: *GtkTreeViewColumn): GtkTreeViewColumnSizing <cimport,nodecl> end
global function gtk_tree_view_column_get_x_offset(tree_column: *GtkTreeViewColumn): cint <cimport,nodecl> end
global function gtk_tree_view_column_get_width(tree_column: *GtkTreeViewColumn): cint <cimport,nodecl> end
global function gtk_tree_view_column_get_fixed_width(tree_column: *GtkTreeViewColumn): cint <cimport,nodecl> end
global function gtk_tree_view_column_set_fixed_width(tree_column: *GtkTreeViewColumn, fixed_width: cint): void <cimport,nodecl> end
global function gtk_tree_view_column_set_min_width(tree_column: *GtkTreeViewColumn, min_width: cint): void <cimport,nodecl> end
global function gtk_tree_view_column_get_min_width(tree_column: *GtkTreeViewColumn): cint <cimport,nodecl> end
global function gtk_tree_view_column_set_max_width(tree_column: *GtkTreeViewColumn, max_width: cint): void <cimport,nodecl> end
global function gtk_tree_view_column_get_max_width(tree_column: *GtkTreeViewColumn): cint <cimport,nodecl> end
global function gtk_tree_view_column_clicked(tree_column: *GtkTreeViewColumn): void <cimport,nodecl> end
global function gtk_tree_view_column_set_title(tree_column: *GtkTreeViewColumn, title: cstring): void <cimport,nodecl> end
global function gtk_tree_view_column_get_title(tree_column: *GtkTreeViewColumn): cstring <cimport,nodecl> end
global function gtk_tree_view_column_set_expand(tree_column: *GtkTreeViewColumn, expand: gboolean): void <cimport,nodecl> end
global function gtk_tree_view_column_get_expand(tree_column: *GtkTreeViewColumn): gboolean <cimport,nodecl> end
global function gtk_tree_view_column_set_clickable(tree_column: *GtkTreeViewColumn, clickable: gboolean): void <cimport,nodecl> end
global function gtk_tree_view_column_get_clickable(tree_column: *GtkTreeViewColumn): gboolean <cimport,nodecl> end
global function gtk_tree_view_column_set_widget(tree_column: *GtkTreeViewColumn, widget: *GtkWidget): void <cimport,nodecl> end
global function gtk_tree_view_column_get_widget(tree_column: *GtkTreeViewColumn): *GtkWidget <cimport,nodecl> end
global function gtk_tree_view_column_set_alignment(tree_column: *GtkTreeViewColumn, xalign: float32): void <cimport,nodecl> end
global function gtk_tree_view_column_get_alignment(tree_column: *GtkTreeViewColumn): float32 <cimport,nodecl> end
global function gtk_tree_view_column_set_reorderable(tree_column: *GtkTreeViewColumn, reorderable: gboolean): void <cimport,nodecl> end
global function gtk_tree_view_column_get_reorderable(tree_column: *GtkTreeViewColumn): gboolean <cimport,nodecl> end
global function gtk_tree_view_column_set_sort_column_id(tree_column: *GtkTreeViewColumn, sort_column_id: cint): void <cimport,nodecl> end
global function gtk_tree_view_column_get_sort_column_id(tree_column: *GtkTreeViewColumn): cint <cimport,nodecl> end
global function gtk_tree_view_column_set_sort_indicator(tree_column: *GtkTreeViewColumn, setting: gboolean): void <cimport,nodecl> end
global function gtk_tree_view_column_get_sort_indicator(tree_column: *GtkTreeViewColumn): gboolean <cimport,nodecl> end
global function gtk_tree_view_column_set_sort_order(tree_column: *GtkTreeViewColumn, order: GtkSortType): void <cimport,nodecl> end
global function gtk_tree_view_column_get_sort_order(tree_column: *GtkTreeViewColumn): GtkSortType <cimport,nodecl> end
global function gtk_tree_view_column_cell_set_cell_data(tree_column: *GtkTreeViewColumn, tree_model: *GtkTreeModel, iter: *GtkTreeIter, is_expander: gboolean, is_expanded: gboolean): void <cimport,nodecl> end
global function gtk_tree_view_column_cell_get_size(tree_column: *GtkTreeViewColumn, x_offset: *cint, y_offset: *cint, width: *cint, height: *cint): void <cimport,nodecl> end
global function gtk_tree_view_column_cell_is_visible(tree_column: *GtkTreeViewColumn): gboolean <cimport,nodecl> end
global function gtk_tree_view_column_focus_cell(tree_column: *GtkTreeViewColumn, cell: *GtkCellRenderer): void <cimport,nodecl> end
global function gtk_tree_view_column_cell_get_position(tree_column: *GtkTreeViewColumn, cell_renderer: *GtkCellRenderer, x_offset: *cint, width: *cint): gboolean <cimport,nodecl> end
global function gtk_tree_view_column_queue_resize(tree_column: *GtkTreeViewColumn): void <cimport,nodecl> end
global function gtk_tree_view_column_get_tree_view(tree_column: *GtkTreeViewColumn): *GtkWidget <cimport,nodecl> end
global function gtk_tree_view_column_get_button(tree_column: *GtkTreeViewColumn): *GtkWidget <cimport,nodecl> end
global function gtk_editable_get_type(): GType <cimport,nodecl> end
global function gtk_editable_get_text(editable: *GtkEditable): cstring <cimport,nodecl> end
global function gtk_editable_set_text(editable: *GtkEditable, text: cstring): void <cimport,nodecl> end
global function gtk_editable_get_chars(editable: *GtkEditable, start_pos: cint, end_pos: cint): cstring <cimport,nodecl> end
global function gtk_editable_insert_text(editable: *GtkEditable, text: cstring, length: cint, position: *cint): void <cimport,nodecl> end
global function gtk_editable_delete_text(editable: *GtkEditable, start_pos: cint, end_pos: cint): void <cimport,nodecl> end
global function gtk_editable_get_selection_bounds(editable: *GtkEditable, start_pos: *cint, end_pos: *cint): gboolean <cimport,nodecl> end
global function gtk_editable_delete_selection(editable: *GtkEditable): void <cimport,nodecl> end
global function gtk_editable_select_region(editable: *GtkEditable, start_pos: cint, end_pos: cint): void <cimport,nodecl> end
global function gtk_editable_set_position(editable: *GtkEditable, position: cint): void <cimport,nodecl> end
global function gtk_editable_get_position(editable: *GtkEditable): cint <cimport,nodecl> end
global function gtk_editable_get_editable(editable: *GtkEditable): gboolean <cimport,nodecl> end
global function gtk_editable_set_editable(editable: *GtkEditable, is_editable: gboolean): void <cimport,nodecl> end
global function gtk_editable_get_alignment(editable: *GtkEditable): float32 <cimport,nodecl> end
global function gtk_editable_set_alignment(editable: *GtkEditable, xalign: float32): void <cimport,nodecl> end
global function gtk_editable_get_width_chars(editable: *GtkEditable): cint <cimport,nodecl> end
global function gtk_editable_set_width_chars(editable: *GtkEditable, n_chars: cint): void <cimport,nodecl> end
global function gtk_editable_get_max_width_chars(editable: *GtkEditable): cint <cimport,nodecl> end
global function gtk_editable_set_max_width_chars(editable: *GtkEditable, n_chars: cint): void <cimport,nodecl> end
global function gtk_editable_get_enable_undo(editable: *GtkEditable): gboolean <cimport,nodecl> end
global function gtk_editable_set_enable_undo(editable: *GtkEditable, enable_undo: gboolean): void <cimport,nodecl> end
global function gtk_editable_install_properties(object_class: *GObjectClass, first_prop: guint): guint <cimport,nodecl> end
global function gtk_editable_get_delegate(editable: *GtkEditable): *GtkEditable <cimport,nodecl> end
global function gtk_editable_init_delegate(editable: *GtkEditable): void <cimport,nodecl> end
global function gtk_editable_finish_delegate(editable: *GtkEditable): void <cimport,nodecl> end
global function gtk_editable_delegate_set_property(object: *GObject, prop_id: guint, value: *GValue, pspec: *GParamSpec): gboolean <cimport,nodecl> end
global function gtk_editable_delegate_get_property(object: *GObject, prop_id: guint, value: *GValue, pspec: *GParamSpec): gboolean <cimport,nodecl> end
global function gtk_im_context_get_type(): GType <cimport,nodecl> end
global function gtk_im_context_set_client_widget(context: *GtkIMContext, widget: *GtkWidget): void <cimport,nodecl> end
global function gtk_im_context_get_preedit_string(context: *GtkIMContext, str: *cstring, attrs: **PangoAttrList, cursor_pos: *cint): void <cimport,nodecl> end
global function gtk_im_context_filter_keypress(context: *GtkIMContext, event: *GdkEvent): gboolean <cimport,nodecl> end
global function gtk_im_context_filter_key(context: *GtkIMContext, press: gboolean, surface: *GdkSurface, device: *GdkDevice, time: guint32, keycode: guint, state: GdkModifierType, group: cint): gboolean <cimport,nodecl> end
global function gtk_im_context_focus_in(context: *GtkIMContext): void <cimport,nodecl> end
global function gtk_im_context_focus_out(context: *GtkIMContext): void <cimport,nodecl> end
global function gtk_im_context_reset(context: *GtkIMContext): void <cimport,nodecl> end
global function gtk_im_context_set_cursor_location(context: *GtkIMContext, area: *GdkRectangle): void <cimport,nodecl> end
global function gtk_im_context_set_use_preedit(context: *GtkIMContext, use_preedit: gboolean): void <cimport,nodecl> end
global function gtk_im_context_set_surrounding(context: *GtkIMContext, text: cstring, len: cint, cursor_index: cint): void <cimport,nodecl> end
global function gtk_im_context_get_surrounding(context: *GtkIMContext, text: *cstring, cursor_index: *cint): gboolean <cimport,nodecl> end
global function gtk_im_context_set_surrounding_with_selection(context: *GtkIMContext, text: cstring, len: cint, cursor_index: cint, anchor_index: cint): void <cimport,nodecl> end
global function gtk_im_context_get_surrounding_with_selection(context: *GtkIMContext, text: *cstring, cursor_index: *cint, anchor_index: *cint): gboolean <cimport,nodecl> end
global function gtk_im_context_delete_surrounding(context: *GtkIMContext, offset: cint, n_chars: cint): gboolean <cimport,nodecl> end
global function gtk_entry_buffer_get_type(): GType <cimport,nodecl> end
global function gtk_entry_buffer_new(initial_chars: cstring, n_initial_chars: cint): *GtkEntryBuffer <cimport,nodecl> end
global function gtk_entry_buffer_get_bytes(buffer: *GtkEntryBuffer): gsize <cimport,nodecl> end
global function gtk_entry_buffer_get_length(buffer: *GtkEntryBuffer): guint <cimport,nodecl> end
global function gtk_entry_buffer_get_text(buffer: *GtkEntryBuffer): cstring <cimport,nodecl> end
global function gtk_entry_buffer_set_text(buffer: *GtkEntryBuffer, chars: cstring, n_chars: cint): void <cimport,nodecl> end
global function gtk_entry_buffer_set_max_length(buffer: *GtkEntryBuffer, max_length: cint): void <cimport,nodecl> end
global function gtk_entry_buffer_get_max_length(buffer: *GtkEntryBuffer): cint <cimport,nodecl> end
global function gtk_entry_buffer_insert_text(buffer: *GtkEntryBuffer, position: guint, chars: cstring, n_chars: cint): guint <cimport,nodecl> end
global function gtk_entry_buffer_delete_text(buffer: *GtkEntryBuffer, position: guint, n_chars: cint): guint <cimport,nodecl> end
global function gtk_entry_buffer_emit_inserted_text(buffer: *GtkEntryBuffer, position: guint, chars: cstring, n_chars: guint): void <cimport,nodecl> end
global function gtk_entry_buffer_emit_deleted_text(buffer: *GtkEntryBuffer, position: guint, n_chars: guint): void <cimport,nodecl> end
global function glib_autoptr_clear_GtkEntryBuffer(_ptr: *GtkEntryBuffer): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GtkEntryBuffer(_ptr: **GtkEntryBuffer): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GtkEntryBuffer(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GtkEntryBuffer(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GtkEntryBuffer(_q: **GQueue): void <cimport,nodecl> end
global function gtk_list_store_get_type(): GType <cimport,nodecl> end
global function gtk_list_store_new(n_columns: cint, ...: cvarargs): *GtkListStore <cimport,nodecl> end
global function gtk_list_store_newv(n_columns: cint, types: *GType): *GtkListStore <cimport,nodecl> end
global function gtk_list_store_set_column_types(list_store: *GtkListStore, n_columns: cint, types: *GType): void <cimport,nodecl> end
global function gtk_list_store_set_value(list_store: *GtkListStore, iter: *GtkTreeIter, column: cint, value: *GValue): void <cimport,nodecl> end
global function gtk_list_store_set(list_store: *GtkListStore, iter: *GtkTreeIter, ...: cvarargs): void <cimport,nodecl> end
global function gtk_list_store_set_valuesv(list_store: *GtkListStore, iter: *GtkTreeIter, columns: *cint, values: *GValue, n_values: cint): void <cimport,nodecl> end
global function gtk_list_store_set_valist(list_store: *GtkListStore, iter: *GtkTreeIter, var_args: cvalist): void <cimport,nodecl> end
global function gtk_list_store_remove(list_store: *GtkListStore, iter: *GtkTreeIter): gboolean <cimport,nodecl> end
global function gtk_list_store_insert(list_store: *GtkListStore, iter: *GtkTreeIter, position: cint): void <cimport,nodecl> end
global function gtk_list_store_insert_before(list_store: *GtkListStore, iter: *GtkTreeIter, sibling: *GtkTreeIter): void <cimport,nodecl> end
global function gtk_list_store_insert_after(list_store: *GtkListStore, iter: *GtkTreeIter, sibling: *GtkTreeIter): void <cimport,nodecl> end
global function gtk_list_store_insert_with_values(list_store: *GtkListStore, iter: *GtkTreeIter, position: cint, ...: cvarargs): void <cimport,nodecl> end
global function gtk_list_store_insert_with_valuesv(list_store: *GtkListStore, iter: *GtkTreeIter, position: cint, columns: *cint, values: *GValue, n_values: cint): void <cimport,nodecl> end
global function gtk_list_store_prepend(list_store: *GtkListStore, iter: *GtkTreeIter): void <cimport,nodecl> end
global function gtk_list_store_append(list_store: *GtkListStore, iter: *GtkTreeIter): void <cimport,nodecl> end
global function gtk_list_store_clear(list_store: *GtkListStore): void <cimport,nodecl> end
global function gtk_list_store_iter_is_valid(list_store: *GtkListStore, iter: *GtkTreeIter): gboolean <cimport,nodecl> end
global function gtk_list_store_reorder(store: *GtkListStore, new_order: *cint): void <cimport,nodecl> end
global function gtk_list_store_swap(store: *GtkListStore, a: *GtkTreeIter, b: *GtkTreeIter): void <cimport,nodecl> end
global function gtk_list_store_move_after(store: *GtkListStore, iter: *GtkTreeIter, position: *GtkTreeIter): void <cimport,nodecl> end
global function gtk_list_store_move_before(store: *GtkListStore, iter: *GtkTreeIter, position: *GtkTreeIter): void <cimport,nodecl> end
global function gtk_tree_model_filter_get_type(): GType <cimport,nodecl> end
global function gtk_tree_model_filter_new(child_model: *GtkTreeModel, root: *GtkTreePath): *GtkTreeModel <cimport,nodecl> end
global function gtk_tree_model_filter_set_visible_func(filter: *GtkTreeModelFilter, func: GtkTreeModelFilterVisibleFunc, data: gpointer, destroy: GDestroyNotify): void <cimport,nodecl> end
global function gtk_tree_model_filter_set_modify_func(filter: *GtkTreeModelFilter, n_columns: cint, types: *GType, func: GtkTreeModelFilterModifyFunc, data: gpointer, destroy: GDestroyNotify): void <cimport,nodecl> end
global function gtk_tree_model_filter_set_visible_column(filter: *GtkTreeModelFilter, column: cint): void <cimport,nodecl> end
global function gtk_tree_model_filter_get_model(filter: *GtkTreeModelFilter): *GtkTreeModel <cimport,nodecl> end
global function gtk_tree_model_filter_convert_child_iter_to_iter(filter: *GtkTreeModelFilter, filter_iter: *GtkTreeIter, child_iter: *GtkTreeIter): gboolean <cimport,nodecl> end
global function gtk_tree_model_filter_convert_iter_to_child_iter(filter: *GtkTreeModelFilter, child_iter: *GtkTreeIter, filter_iter: *GtkTreeIter): void <cimport,nodecl> end
global function gtk_tree_model_filter_convert_child_path_to_path(filter: *GtkTreeModelFilter, child_path: *GtkTreePath): *GtkTreePath <cimport,nodecl> end
global function gtk_tree_model_filter_convert_path_to_child_path(filter: *GtkTreeModelFilter, filter_path: *GtkTreePath): *GtkTreePath <cimport,nodecl> end
global function gtk_tree_model_filter_refilter(filter: *GtkTreeModelFilter): void <cimport,nodecl> end
global function gtk_tree_model_filter_clear_cache(filter: *GtkTreeModelFilter): void <cimport,nodecl> end
global function gtk_entry_completion_get_type(): GType <cimport,nodecl> end
global function gtk_entry_completion_new(): *GtkEntryCompletion <cimport,nodecl> end
global function gtk_entry_completion_new_with_area(area: *GtkCellArea): *GtkEntryCompletion <cimport,nodecl> end
global function gtk_entry_completion_get_entry(completion: *GtkEntryCompletion): *GtkWidget <cimport,nodecl> end
global function gtk_entry_completion_set_model(completion: *GtkEntryCompletion, model: *GtkTreeModel): void <cimport,nodecl> end
global function gtk_entry_completion_get_model(completion: *GtkEntryCompletion): *GtkTreeModel <cimport,nodecl> end
global function gtk_entry_completion_set_match_func(completion: *GtkEntryCompletion, func: GtkEntryCompletionMatchFunc, func_data: gpointer, func_notify: GDestroyNotify): void <cimport,nodecl> end
global function gtk_entry_completion_set_minimum_key_length(completion: *GtkEntryCompletion, length: cint): void <cimport,nodecl> end
global function gtk_entry_completion_get_minimum_key_length(completion: *GtkEntryCompletion): cint <cimport,nodecl> end
global function gtk_entry_completion_compute_prefix(completion: *GtkEntryCompletion, key: cstring): cstring <cimport,nodecl> end
global function gtk_entry_completion_complete(completion: *GtkEntryCompletion): void <cimport,nodecl> end
global function gtk_entry_completion_insert_prefix(completion: *GtkEntryCompletion): void <cimport,nodecl> end
global function gtk_entry_completion_set_inline_completion(completion: *GtkEntryCompletion, inline_completion: gboolean): void <cimport,nodecl> end
global function gtk_entry_completion_get_inline_completion(completion: *GtkEntryCompletion): gboolean <cimport,nodecl> end
global function gtk_entry_completion_set_inline_selection(completion: *GtkEntryCompletion, inline_selection: gboolean): void <cimport,nodecl> end
global function gtk_entry_completion_get_inline_selection(completion: *GtkEntryCompletion): gboolean <cimport,nodecl> end
global function gtk_entry_completion_set_popup_completion(completion: *GtkEntryCompletion, popup_completion: gboolean): void <cimport,nodecl> end
global function gtk_entry_completion_get_popup_completion(completion: *GtkEntryCompletion): gboolean <cimport,nodecl> end
global function gtk_entry_completion_set_popup_set_width(completion: *GtkEntryCompletion, popup_set_width: gboolean): void <cimport,nodecl> end
global function gtk_entry_completion_get_popup_set_width(completion: *GtkEntryCompletion): gboolean <cimport,nodecl> end
global function gtk_entry_completion_set_popup_single_match(completion: *GtkEntryCompletion, popup_single_match: gboolean): void <cimport,nodecl> end
global function gtk_entry_completion_get_popup_single_match(completion: *GtkEntryCompletion): gboolean <cimport,nodecl> end
global function gtk_entry_completion_get_completion_prefix(completion: *GtkEntryCompletion): cstring <cimport,nodecl> end
global function gtk_entry_completion_set_text_column(completion: *GtkEntryCompletion, column: cint): void <cimport,nodecl> end
global function gtk_entry_completion_get_text_column(completion: *GtkEntryCompletion): cint <cimport,nodecl> end
global function gtk_image_get_type(): GType <cimport,nodecl> end
global function gtk_image_new(): *GtkWidget <cimport,nodecl> end
global function gtk_image_new_from_file(filename: cstring): *GtkWidget <cimport,nodecl> end
global function gtk_image_new_from_resource(resource_path: cstring): *GtkWidget <cimport,nodecl> end
global function gtk_image_new_from_pixbuf(pixbuf: *GdkPixbuf): *GtkWidget <cimport,nodecl> end
global function gtk_image_new_from_paintable(paintable: *GdkPaintable): *GtkWidget <cimport,nodecl> end
global function gtk_image_new_from_icon_name(icon_name: cstring): *GtkWidget <cimport,nodecl> end
global function gtk_image_new_from_gicon(icon: *GIcon): *GtkWidget <cimport,nodecl> end
global function gtk_image_clear(image: *GtkImage): void <cimport,nodecl> end
global function gtk_image_set_from_file(image: *GtkImage, filename: cstring): void <cimport,nodecl> end
global function gtk_image_set_from_resource(image: *GtkImage, resource_path: cstring): void <cimport,nodecl> end
global function gtk_image_set_from_pixbuf(image: *GtkImage, pixbuf: *GdkPixbuf): void <cimport,nodecl> end
global function gtk_image_set_from_paintable(image: *GtkImage, paintable: *GdkPaintable): void <cimport,nodecl> end
global function gtk_image_set_from_icon_name(image: *GtkImage, icon_name: cstring): void <cimport,nodecl> end
global function gtk_image_set_from_gicon(image: *GtkImage, icon: *GIcon): void <cimport,nodecl> end
global function gtk_image_set_pixel_size(image: *GtkImage, pixel_size: cint): void <cimport,nodecl> end
global function gtk_image_set_icon_size(image: *GtkImage, icon_size: GtkIconSize): void <cimport,nodecl> end
global function gtk_image_get_storage_type(image: *GtkImage): GtkImageType <cimport,nodecl> end
global function gtk_image_get_paintable(image: *GtkImage): *GdkPaintable <cimport,nodecl> end
global function gtk_image_get_icon_name(image: *GtkImage): cstring <cimport,nodecl> end
global function gtk_image_get_gicon(image: *GtkImage): *GIcon <cimport,nodecl> end
global function gtk_image_get_pixel_size(image: *GtkImage): cint <cimport,nodecl> end
global function gtk_image_get_icon_size(image: *GtkImage): GtkIconSize <cimport,nodecl> end
global function gtk_entry_get_type(): GType <cimport,nodecl> end
global function gtk_entry_new(): *GtkWidget <cimport,nodecl> end
global function gtk_entry_new_with_buffer(buffer: *GtkEntryBuffer): *GtkWidget <cimport,nodecl> end
global function gtk_entry_get_buffer(entry: *GtkEntry): *GtkEntryBuffer <cimport,nodecl> end
global function gtk_entry_set_buffer(entry: *GtkEntry, buffer: *GtkEntryBuffer): void <cimport,nodecl> end
global function gtk_entry_set_visibility(entry: *GtkEntry, visible: gboolean): void <cimport,nodecl> end
global function gtk_entry_get_visibility(entry: *GtkEntry): gboolean <cimport,nodecl> end
global function gtk_entry_set_invisible_char(entry: *GtkEntry, ch: gunichar): void <cimport,nodecl> end
global function gtk_entry_get_invisible_char(entry: *GtkEntry): gunichar <cimport,nodecl> end
global function gtk_entry_unset_invisible_char(entry: *GtkEntry): void <cimport,nodecl> end
global function gtk_entry_set_has_frame(entry: *GtkEntry, setting: gboolean): void <cimport,nodecl> end
global function gtk_entry_get_has_frame(entry: *GtkEntry): gboolean <cimport,nodecl> end
global function gtk_entry_set_overwrite_mode(entry: *GtkEntry, overwrite: gboolean): void <cimport,nodecl> end
global function gtk_entry_get_overwrite_mode(entry: *GtkEntry): gboolean <cimport,nodecl> end
global function gtk_entry_set_max_length(entry: *GtkEntry, max: cint): void <cimport,nodecl> end
global function gtk_entry_get_max_length(entry: *GtkEntry): cint <cimport,nodecl> end
global function gtk_entry_get_text_length(entry: *GtkEntry): guint16 <cimport,nodecl> end
global function gtk_entry_set_activates_default(entry: *GtkEntry, setting: gboolean): void <cimport,nodecl> end
global function gtk_entry_get_activates_default(entry: *GtkEntry): gboolean <cimport,nodecl> end
global function gtk_entry_set_alignment(entry: *GtkEntry, xalign: float32): void <cimport,nodecl> end
global function gtk_entry_get_alignment(entry: *GtkEntry): float32 <cimport,nodecl> end
global function gtk_entry_set_completion(entry: *GtkEntry, completion: *GtkEntryCompletion): void <cimport,nodecl> end
global function gtk_entry_get_completion(entry: *GtkEntry): *GtkEntryCompletion <cimport,nodecl> end
global function gtk_entry_set_progress_fraction(entry: *GtkEntry, fraction: float64): void <cimport,nodecl> end
global function gtk_entry_get_progress_fraction(entry: *GtkEntry): float64 <cimport,nodecl> end
global function gtk_entry_set_progress_pulse_step(entry: *GtkEntry, fraction: float64): void <cimport,nodecl> end
global function gtk_entry_get_progress_pulse_step(entry: *GtkEntry): float64 <cimport,nodecl> end
global function gtk_entry_progress_pulse(entry: *GtkEntry): void <cimport,nodecl> end
global function gtk_entry_get_placeholder_text(entry: *GtkEntry): cstring <cimport,nodecl> end
global function gtk_entry_set_placeholder_text(entry: *GtkEntry, text: cstring): void <cimport,nodecl> end
global function gtk_entry_set_icon_from_paintable(entry: *GtkEntry, icon_pos: GtkEntryIconPosition, paintable: *GdkPaintable): void <cimport,nodecl> end
global function gtk_entry_set_icon_from_icon_name(entry: *GtkEntry, icon_pos: GtkEntryIconPosition, icon_name: cstring): void <cimport,nodecl> end
global function gtk_entry_set_icon_from_gicon(entry: *GtkEntry, icon_pos: GtkEntryIconPosition, icon: *GIcon): void <cimport,nodecl> end
global function gtk_entry_get_icon_storage_type(entry: *GtkEntry, icon_pos: GtkEntryIconPosition): GtkImageType <cimport,nodecl> end
global function gtk_entry_get_icon_paintable(entry: *GtkEntry, icon_pos: GtkEntryIconPosition): *GdkPaintable <cimport,nodecl> end
global function gtk_entry_get_icon_name(entry: *GtkEntry, icon_pos: GtkEntryIconPosition): cstring <cimport,nodecl> end
global function gtk_entry_get_icon_gicon(entry: *GtkEntry, icon_pos: GtkEntryIconPosition): *GIcon <cimport,nodecl> end
global function gtk_entry_set_icon_activatable(entry: *GtkEntry, icon_pos: GtkEntryIconPosition, activatable: gboolean): void <cimport,nodecl> end
global function gtk_entry_get_icon_activatable(entry: *GtkEntry, icon_pos: GtkEntryIconPosition): gboolean <cimport,nodecl> end
global function gtk_entry_set_icon_sensitive(entry: *GtkEntry, icon_pos: GtkEntryIconPosition, sensitive: gboolean): void <cimport,nodecl> end
global function gtk_entry_get_icon_sensitive(entry: *GtkEntry, icon_pos: GtkEntryIconPosition): gboolean <cimport,nodecl> end
global function gtk_entry_get_icon_at_pos(entry: *GtkEntry, x: cint, y: cint): cint <cimport,nodecl> end
global function gtk_entry_set_icon_tooltip_text(entry: *GtkEntry, icon_pos: GtkEntryIconPosition, tooltip: cstring): void <cimport,nodecl> end
global function gtk_entry_get_icon_tooltip_text(entry: *GtkEntry, icon_pos: GtkEntryIconPosition): cstring <cimport,nodecl> end
global function gtk_entry_set_icon_tooltip_markup(entry: *GtkEntry, icon_pos: GtkEntryIconPosition, tooltip: cstring): void <cimport,nodecl> end
global function gtk_entry_get_icon_tooltip_markup(entry: *GtkEntry, icon_pos: GtkEntryIconPosition): cstring <cimport,nodecl> end
global function gtk_entry_set_icon_drag_source(entry: *GtkEntry, icon_pos: GtkEntryIconPosition, provider: *GdkContentProvider, actions: GdkDragAction): void <cimport,nodecl> end
global function gtk_entry_get_current_icon_drag_source(entry: *GtkEntry): cint <cimport,nodecl> end
global function gtk_entry_get_icon_area(entry: *GtkEntry, icon_pos: GtkEntryIconPosition, icon_area: *GdkRectangle): void <cimport,nodecl> end
global function gtk_entry_reset_im_context(entry: *GtkEntry): void <cimport,nodecl> end
global function gtk_entry_set_input_purpose(entry: *GtkEntry, purpose: GtkInputPurpose): void <cimport,nodecl> end
global function gtk_entry_get_input_purpose(entry: *GtkEntry): GtkInputPurpose <cimport,nodecl> end
global function gtk_entry_set_input_hints(entry: *GtkEntry, hints: GtkInputHints): void <cimport,nodecl> end
global function gtk_entry_get_input_hints(entry: *GtkEntry): GtkInputHints <cimport,nodecl> end
global function gtk_entry_set_attributes(entry: *GtkEntry, attrs: *PangoAttrList): void <cimport,nodecl> end
global function gtk_entry_get_attributes(entry: *GtkEntry): *PangoAttrList <cimport,nodecl> end
global function gtk_entry_set_tabs(entry: *GtkEntry, tabs: *PangoTabArray): void <cimport,nodecl> end
global function gtk_entry_get_tabs(entry: *GtkEntry): *PangoTabArray <cimport,nodecl> end
global function gtk_entry_grab_focus_without_selecting(entry: *GtkEntry): gboolean <cimport,nodecl> end
global function gtk_entry_set_extra_menu(entry: *GtkEntry, model: *GMenuModel): void <cimport,nodecl> end
global function gtk_entry_get_extra_menu(entry: *GtkEntry): *GMenuModel <cimport,nodecl> end
global function gtk_tree_view_get_type(): GType <cimport,nodecl> end
global function gtk_tree_view_new(): *GtkWidget <cimport,nodecl> end
global function gtk_tree_view_new_with_model(model: *GtkTreeModel): *GtkWidget <cimport,nodecl> end
global function gtk_tree_view_get_model(tree_view: *GtkTreeView): *GtkTreeModel <cimport,nodecl> end
global function gtk_tree_view_set_model(tree_view: *GtkTreeView, model: *GtkTreeModel): void <cimport,nodecl> end
global function gtk_tree_view_get_selection(tree_view: *GtkTreeView): *GtkTreeSelection <cimport,nodecl> end
global function gtk_tree_view_get_headers_visible(tree_view: *GtkTreeView): gboolean <cimport,nodecl> end
global function gtk_tree_view_set_headers_visible(tree_view: *GtkTreeView, headers_visible: gboolean): void <cimport,nodecl> end
global function gtk_tree_view_columns_autosize(tree_view: *GtkTreeView): void <cimport,nodecl> end
global function gtk_tree_view_get_headers_clickable(tree_view: *GtkTreeView): gboolean <cimport,nodecl> end
global function gtk_tree_view_set_headers_clickable(tree_view: *GtkTreeView, setting: gboolean): void <cimport,nodecl> end
global function gtk_tree_view_get_activate_on_single_click(tree_view: *GtkTreeView): gboolean <cimport,nodecl> end
global function gtk_tree_view_set_activate_on_single_click(tree_view: *GtkTreeView, single: gboolean): void <cimport,nodecl> end
global function gtk_tree_view_append_column(tree_view: *GtkTreeView, column: *GtkTreeViewColumn): cint <cimport,nodecl> end
global function gtk_tree_view_remove_column(tree_view: *GtkTreeView, column: *GtkTreeViewColumn): cint <cimport,nodecl> end
global function gtk_tree_view_insert_column(tree_view: *GtkTreeView, column: *GtkTreeViewColumn, position: cint): cint <cimport,nodecl> end
global function gtk_tree_view_insert_column_with_attributes(tree_view: *GtkTreeView, position: cint, title: cstring, cell: *GtkCellRenderer, ...: cvarargs): cint <cimport,nodecl> end
global function gtk_tree_view_insert_column_with_data_func(tree_view: *GtkTreeView, position: cint, title: cstring, cell: *GtkCellRenderer, func: GtkTreeCellDataFunc, data: gpointer, dnotify: GDestroyNotify): cint <cimport,nodecl> end
global function gtk_tree_view_get_n_columns(tree_view: *GtkTreeView): guint <cimport,nodecl> end
global function gtk_tree_view_get_column(tree_view: *GtkTreeView, n: cint): *GtkTreeViewColumn <cimport,nodecl> end
global function gtk_tree_view_get_columns(tree_view: *GtkTreeView): *GList <cimport,nodecl> end
global function gtk_tree_view_move_column_after(tree_view: *GtkTreeView, column: *GtkTreeViewColumn, base_column: *GtkTreeViewColumn): void <cimport,nodecl> end
global function gtk_tree_view_set_expander_column(tree_view: *GtkTreeView, column: *GtkTreeViewColumn): void <cimport,nodecl> end
global function gtk_tree_view_get_expander_column(tree_view: *GtkTreeView): *GtkTreeViewColumn <cimport,nodecl> end
global function gtk_tree_view_set_column_drag_function(tree_view: *GtkTreeView, func: GtkTreeViewColumnDropFunc, user_data: gpointer, destroy: GDestroyNotify): void <cimport,nodecl> end
global function gtk_tree_view_scroll_to_point(tree_view: *GtkTreeView, tree_x: cint, tree_y: cint): void <cimport,nodecl> end
global function gtk_tree_view_scroll_to_cell(tree_view: *GtkTreeView, path: *GtkTreePath, column: *GtkTreeViewColumn, use_align: gboolean, row_align: float32, col_align: float32): void <cimport,nodecl> end
global function gtk_tree_view_row_activated(tree_view: *GtkTreeView, path: *GtkTreePath, column: *GtkTreeViewColumn): void <cimport,nodecl> end
global function gtk_tree_view_expand_all(tree_view: *GtkTreeView): void <cimport,nodecl> end
global function gtk_tree_view_collapse_all(tree_view: *GtkTreeView): void <cimport,nodecl> end
global function gtk_tree_view_expand_to_path(tree_view: *GtkTreeView, path: *GtkTreePath): void <cimport,nodecl> end
global function gtk_tree_view_expand_row(tree_view: *GtkTreeView, path: *GtkTreePath, open_all: gboolean): gboolean <cimport,nodecl> end
global function gtk_tree_view_collapse_row(tree_view: *GtkTreeView, path: *GtkTreePath): gboolean <cimport,nodecl> end
global function gtk_tree_view_map_expanded_rows(tree_view: *GtkTreeView, func: GtkTreeViewMappingFunc, data: gpointer): void <cimport,nodecl> end
global function gtk_tree_view_row_expanded(tree_view: *GtkTreeView, path: *GtkTreePath): gboolean <cimport,nodecl> end
global function gtk_tree_view_set_reorderable(tree_view: *GtkTreeView, reorderable: gboolean): void <cimport,nodecl> end
global function gtk_tree_view_get_reorderable(tree_view: *GtkTreeView): gboolean <cimport,nodecl> end
global function gtk_tree_view_set_cursor(tree_view: *GtkTreeView, path: *GtkTreePath, focus_column: *GtkTreeViewColumn, start_editing: gboolean): void <cimport,nodecl> end
global function gtk_tree_view_set_cursor_on_cell(tree_view: *GtkTreeView, path: *GtkTreePath, focus_column: *GtkTreeViewColumn, focus_cell: *GtkCellRenderer, start_editing: gboolean): void <cimport,nodecl> end
global function gtk_tree_view_get_cursor(tree_view: *GtkTreeView, path: **GtkTreePath, focus_column: **GtkTreeViewColumn): void <cimport,nodecl> end
global function gtk_tree_view_get_path_at_pos(tree_view: *GtkTreeView, x: cint, y: cint, path: **GtkTreePath, column: **GtkTreeViewColumn, cell_x: *cint, cell_y: *cint): gboolean <cimport,nodecl> end
global function gtk_tree_view_get_cell_area(tree_view: *GtkTreeView, path: *GtkTreePath, column: *GtkTreeViewColumn, rect: *GdkRectangle): void <cimport,nodecl> end
global function gtk_tree_view_get_background_area(tree_view: *GtkTreeView, path: *GtkTreePath, column: *GtkTreeViewColumn, rect: *GdkRectangle): void <cimport,nodecl> end
global function gtk_tree_view_get_visible_rect(tree_view: *GtkTreeView, visible_rect: *GdkRectangle): void <cimport,nodecl> end
global function gtk_tree_view_get_visible_range(tree_view: *GtkTreeView, start_path: **GtkTreePath, end_path: **GtkTreePath): gboolean <cimport,nodecl> end
global function gtk_tree_view_is_blank_at_pos(tree_view: *GtkTreeView, x: cint, y: cint, path: **GtkTreePath, column: **GtkTreeViewColumn, cell_x: *cint, cell_y: *cint): gboolean <cimport,nodecl> end
global function gtk_tree_view_enable_model_drag_source(tree_view: *GtkTreeView, start_button_mask: GdkModifierType, formats: *GdkContentFormats, actions: GdkDragAction): void <cimport,nodecl> end
global function gtk_tree_view_enable_model_drag_dest(tree_view: *GtkTreeView, formats: *GdkContentFormats, actions: GdkDragAction): void <cimport,nodecl> end
global function gtk_tree_view_unset_rows_drag_source(tree_view: *GtkTreeView): void <cimport,nodecl> end
global function gtk_tree_view_unset_rows_drag_dest(tree_view: *GtkTreeView): void <cimport,nodecl> end
global function gtk_tree_view_set_drag_dest_row(tree_view: *GtkTreeView, path: *GtkTreePath, pos: GtkTreeViewDropPosition): void <cimport,nodecl> end
global function gtk_tree_view_get_drag_dest_row(tree_view: *GtkTreeView, path: **GtkTreePath, pos: *GtkTreeViewDropPosition): void <cimport,nodecl> end
global function gtk_tree_view_get_dest_row_at_pos(tree_view: *GtkTreeView, drag_x: cint, drag_y: cint, path: **GtkTreePath, pos: *GtkTreeViewDropPosition): gboolean <cimport,nodecl> end
global function gtk_tree_view_create_row_drag_icon(tree_view: *GtkTreeView, path: *GtkTreePath): *GdkPaintable <cimport,nodecl> end
global function gtk_tree_view_set_enable_search(tree_view: *GtkTreeView, enable_search: gboolean): void <cimport,nodecl> end
global function gtk_tree_view_get_enable_search(tree_view: *GtkTreeView): gboolean <cimport,nodecl> end
global function gtk_tree_view_get_search_column(tree_view: *GtkTreeView): cint <cimport,nodecl> end
global function gtk_tree_view_set_search_column(tree_view: *GtkTreeView, column: cint): void <cimport,nodecl> end
global function gtk_tree_view_get_search_equal_func(tree_view: *GtkTreeView): GtkTreeViewSearchEqualFunc <cimport,nodecl> end
global function gtk_tree_view_set_search_equal_func(tree_view: *GtkTreeView, search_equal_func: GtkTreeViewSearchEqualFunc, search_user_data: gpointer, search_destroy: GDestroyNotify): void <cimport,nodecl> end
global function gtk_tree_view_get_search_entry(tree_view: *GtkTreeView): *GtkEditable <cimport,nodecl> end
global function gtk_tree_view_set_search_entry(tree_view: *GtkTreeView, entry: *GtkEditable): void <cimport,nodecl> end
global function gtk_tree_view_convert_widget_to_tree_coords(tree_view: *GtkTreeView, wx: cint, wy: cint, tx: *cint, ty: *cint): void <cimport,nodecl> end
global function gtk_tree_view_convert_tree_to_widget_coords(tree_view: *GtkTreeView, tx: cint, ty: cint, wx: *cint, wy: *cint): void <cimport,nodecl> end
global function gtk_tree_view_convert_widget_to_bin_window_coords(tree_view: *GtkTreeView, wx: cint, wy: cint, bx: *cint, by: *cint): void <cimport,nodecl> end
global function gtk_tree_view_convert_bin_window_to_widget_coords(tree_view: *GtkTreeView, bx: cint, by: cint, wx: *cint, wy: *cint): void <cimport,nodecl> end
global function gtk_tree_view_convert_tree_to_bin_window_coords(tree_view: *GtkTreeView, tx: cint, ty: cint, bx: *cint, by: *cint): void <cimport,nodecl> end
global function gtk_tree_view_convert_bin_window_to_tree_coords(tree_view: *GtkTreeView, bx: cint, by: cint, tx: *cint, ty: *cint): void <cimport,nodecl> end
global function gtk_tree_view_set_fixed_height_mode(tree_view: *GtkTreeView, enable: gboolean): void <cimport,nodecl> end
global function gtk_tree_view_get_fixed_height_mode(tree_view: *GtkTreeView): gboolean <cimport,nodecl> end
global function gtk_tree_view_set_hover_selection(tree_view: *GtkTreeView, hover: gboolean): void <cimport,nodecl> end
global function gtk_tree_view_get_hover_selection(tree_view: *GtkTreeView): gboolean <cimport,nodecl> end
global function gtk_tree_view_set_hover_expand(tree_view: *GtkTreeView, expand: gboolean): void <cimport,nodecl> end
global function gtk_tree_view_get_hover_expand(tree_view: *GtkTreeView): gboolean <cimport,nodecl> end
global function gtk_tree_view_set_rubber_banding(tree_view: *GtkTreeView, enable: gboolean): void <cimport,nodecl> end
global function gtk_tree_view_get_rubber_banding(tree_view: *GtkTreeView): gboolean <cimport,nodecl> end
global function gtk_tree_view_is_rubber_banding_active(tree_view: *GtkTreeView): gboolean <cimport,nodecl> end
global function gtk_tree_view_get_row_separator_func(tree_view: *GtkTreeView): GtkTreeViewRowSeparatorFunc <cimport,nodecl> end
global function gtk_tree_view_set_row_separator_func(tree_view: *GtkTreeView, func: GtkTreeViewRowSeparatorFunc, data: gpointer, destroy: GDestroyNotify): void <cimport,nodecl> end
global function gtk_tree_view_get_grid_lines(tree_view: *GtkTreeView): GtkTreeViewGridLines <cimport,nodecl> end
global function gtk_tree_view_set_grid_lines(tree_view: *GtkTreeView, grid_lines: GtkTreeViewGridLines): void <cimport,nodecl> end
global function gtk_tree_view_get_enable_tree_lines(tree_view: *GtkTreeView): gboolean <cimport,nodecl> end
global function gtk_tree_view_set_enable_tree_lines(tree_view: *GtkTreeView, enabled: gboolean): void <cimport,nodecl> end
global function gtk_tree_view_set_show_expanders(tree_view: *GtkTreeView, enabled: gboolean): void <cimport,nodecl> end
global function gtk_tree_view_get_show_expanders(tree_view: *GtkTreeView): gboolean <cimport,nodecl> end
global function gtk_tree_view_set_level_indentation(tree_view: *GtkTreeView, indentation: cint): void <cimport,nodecl> end
global function gtk_tree_view_get_level_indentation(tree_view: *GtkTreeView): cint <cimport,nodecl> end
global function gtk_tree_view_set_tooltip_row(tree_view: *GtkTreeView, tooltip: *GtkTooltip, path: *GtkTreePath): void <cimport,nodecl> end
global function gtk_tree_view_set_tooltip_cell(tree_view: *GtkTreeView, tooltip: *GtkTooltip, path: *GtkTreePath, column: *GtkTreeViewColumn, cell: *GtkCellRenderer): void <cimport,nodecl> end
global function gtk_tree_view_get_tooltip_context(tree_view: *GtkTreeView, x: cint, y: cint, keyboard_tip: gboolean, model: **GtkTreeModel, path: **GtkTreePath, iter: *GtkTreeIter): gboolean <cimport,nodecl> end
global function gtk_tree_view_set_tooltip_column(tree_view: *GtkTreeView, column: cint): void <cimport,nodecl> end
global function gtk_tree_view_get_tooltip_column(tree_view: *GtkTreeView): cint <cimport,nodecl> end
global function gtk_combo_box_get_type(): GType <cimport,nodecl> end
global function gtk_combo_box_new(): *GtkWidget <cimport,nodecl> end
global function gtk_combo_box_new_with_entry(): *GtkWidget <cimport,nodecl> end
global function gtk_combo_box_new_with_model(model: *GtkTreeModel): *GtkWidget <cimport,nodecl> end
global function gtk_combo_box_new_with_model_and_entry(model: *GtkTreeModel): *GtkWidget <cimport,nodecl> end
global function gtk_combo_box_get_active(combo_box: *GtkComboBox): cint <cimport,nodecl> end
global function gtk_combo_box_set_active(combo_box: *GtkComboBox, index_: cint): void <cimport,nodecl> end
global function gtk_combo_box_get_active_iter(combo_box: *GtkComboBox, iter: *GtkTreeIter): gboolean <cimport,nodecl> end
global function gtk_combo_box_set_active_iter(combo_box: *GtkComboBox, iter: *GtkTreeIter): void <cimport,nodecl> end
global function gtk_combo_box_set_model(combo_box: *GtkComboBox, model: *GtkTreeModel): void <cimport,nodecl> end
global function gtk_combo_box_get_model(combo_box: *GtkComboBox): *GtkTreeModel <cimport,nodecl> end
global function gtk_combo_box_get_row_separator_func(combo_box: *GtkComboBox): GtkTreeViewRowSeparatorFunc <cimport,nodecl> end
global function gtk_combo_box_set_row_separator_func(combo_box: *GtkComboBox, func: GtkTreeViewRowSeparatorFunc, data: gpointer, destroy: GDestroyNotify): void <cimport,nodecl> end
global function gtk_combo_box_set_button_sensitivity(combo_box: *GtkComboBox, sensitivity: GtkSensitivityType): void <cimport,nodecl> end
global function gtk_combo_box_get_button_sensitivity(combo_box: *GtkComboBox): GtkSensitivityType <cimport,nodecl> end
global function gtk_combo_box_get_has_entry(combo_box: *GtkComboBox): gboolean <cimport,nodecl> end
global function gtk_combo_box_set_entry_text_column(combo_box: *GtkComboBox, text_column: cint): void <cimport,nodecl> end
global function gtk_combo_box_get_entry_text_column(combo_box: *GtkComboBox): cint <cimport,nodecl> end
global function gtk_combo_box_set_popup_fixed_width(combo_box: *GtkComboBox, fixed: gboolean): void <cimport,nodecl> end
global function gtk_combo_box_get_popup_fixed_width(combo_box: *GtkComboBox): gboolean <cimport,nodecl> end
global function gtk_combo_box_popup(combo_box: *GtkComboBox): void <cimport,nodecl> end
global function gtk_combo_box_popup_for_device(combo_box: *GtkComboBox, device: *GdkDevice): void <cimport,nodecl> end
global function gtk_combo_box_popdown(combo_box: *GtkComboBox): void <cimport,nodecl> end
global function gtk_combo_box_get_id_column(combo_box: *GtkComboBox): cint <cimport,nodecl> end
global function gtk_combo_box_set_id_column(combo_box: *GtkComboBox, id_column: cint): void <cimport,nodecl> end
global function gtk_combo_box_get_active_id(combo_box: *GtkComboBox): cstring <cimport,nodecl> end
global function gtk_combo_box_set_active_id(combo_box: *GtkComboBox, active_id: cstring): gboolean <cimport,nodecl> end
global function gtk_combo_box_set_child(combo_box: *GtkComboBox, child: *GtkWidget): void <cimport,nodecl> end
global function gtk_combo_box_get_child(combo_box: *GtkComboBox): *GtkWidget <cimport,nodecl> end
global function gtk_combo_box_text_get_type(): GType <cimport,nodecl> end
global function gtk_combo_box_text_new(): *GtkWidget <cimport,nodecl> end
global function gtk_combo_box_text_new_with_entry(): *GtkWidget <cimport,nodecl> end
global function gtk_combo_box_text_append_text(combo_box: *GtkComboBoxText, text: cstring): void <cimport,nodecl> end
global function gtk_combo_box_text_insert_text(combo_box: *GtkComboBoxText, position: cint, text: cstring): void <cimport,nodecl> end
global function gtk_combo_box_text_prepend_text(combo_box: *GtkComboBoxText, text: cstring): void <cimport,nodecl> end
global function gtk_combo_box_text_remove(combo_box: *GtkComboBoxText, position: cint): void <cimport,nodecl> end
global function gtk_combo_box_text_remove_all(combo_box: *GtkComboBoxText): void <cimport,nodecl> end
global function gtk_combo_box_text_get_active_text(combo_box: *GtkComboBoxText): cstring <cimport,nodecl> end
global function gtk_combo_box_text_insert(combo_box: *GtkComboBoxText, position: cint, id: cstring, text: cstring): void <cimport,nodecl> end
global function gtk_combo_box_text_append(combo_box: *GtkComboBoxText, id: cstring, text: cstring): void <cimport,nodecl> end
global function gtk_combo_box_text_prepend(combo_box: *GtkComboBoxText, id: cstring, text: cstring): void <cimport,nodecl> end
global function gtk_constraint_target_get_type(): GType <cimport,nodecl> end
global function glib_autoptr_clear_GtkConstraintTarget(_ptr: *GtkConstraintTarget): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GtkConstraintTarget(_ptr: **GtkConstraintTarget): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GtkConstraintTarget(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GtkConstraintTarget(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GtkConstraintTarget(_q: **GQueue): void <cimport,nodecl> end
global function GTK_CONSTRAINT_TARGET(ptr: gpointer): *GtkConstraintTarget <cimport,nodecl> end
global function GTK_IS_CONSTRAINT_TARGET(ptr: gpointer): gboolean <cimport,nodecl> end
global function GTK_CONSTRAINT_TARGET_GET_IFACE(ptr: gpointer): *GtkConstraintTargetInterface <cimport,nodecl> end
global function gtk_constraint_get_type(): GType <cimport,nodecl> end
global function glib_autoptr_clear_GtkConstraint(_ptr: *GtkConstraint): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GtkConstraint(_ptr: **GtkConstraint): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GtkConstraint(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GtkConstraint(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GtkConstraint(_q: **GQueue): void <cimport,nodecl> end
global function glib_autoptr_clear_GtkConstraintClass(_ptr: *GtkConstraintClass): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GtkConstraintClass(_ptr: **GtkConstraintClass): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GtkConstraintClass(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GtkConstraintClass(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GtkConstraintClass(_q: **GQueue): void <cimport,nodecl> end
global function GTK_CONSTRAINT(ptr: gpointer): *GtkConstraint <cimport,nodecl> end
global function GTK_IS_CONSTRAINT(ptr: gpointer): gboolean <cimport,nodecl> end
global function gtk_constraint_new(target: gpointer, target_attribute: GtkConstraintAttribute, relation: GtkConstraintRelation, source: gpointer, source_attribute: GtkConstraintAttribute, multiplier: float64, constant: float64, strength: cint): *GtkConstraint <cimport,nodecl> end
global function gtk_constraint_new_constant(target: gpointer, target_attribute: GtkConstraintAttribute, relation: GtkConstraintRelation, constant: float64, strength: cint): *GtkConstraint <cimport,nodecl> end
global function gtk_constraint_get_target(constraint: *GtkConstraint): *GtkConstraintTarget <cimport,nodecl> end
global function gtk_constraint_get_target_attribute(constraint: *GtkConstraint): GtkConstraintAttribute <cimport,nodecl> end
global function gtk_constraint_get_source(constraint: *GtkConstraint): *GtkConstraintTarget <cimport,nodecl> end
global function gtk_constraint_get_source_attribute(constraint: *GtkConstraint): GtkConstraintAttribute <cimport,nodecl> end
global function gtk_constraint_get_relation(constraint: *GtkConstraint): GtkConstraintRelation <cimport,nodecl> end
global function gtk_constraint_get_multiplier(constraint: *GtkConstraint): float64 <cimport,nodecl> end
global function gtk_constraint_get_constant(constraint: *GtkConstraint): float64 <cimport,nodecl> end
global function gtk_constraint_get_strength(constraint: *GtkConstraint): cint <cimport,nodecl> end
global function gtk_constraint_is_required(constraint: *GtkConstraint): gboolean <cimport,nodecl> end
global function gtk_constraint_is_attached(constraint: *GtkConstraint): gboolean <cimport,nodecl> end
global function gtk_constraint_is_constant(constraint: *GtkConstraint): gboolean <cimport,nodecl> end
global function gtk_license_get_type(): GType <cimport,nodecl> end
global function gtk_application_inhibit_flags_get_type(): GType <cimport,nodecl> end
global function gtk_assistant_page_type_get_type(): GType <cimport,nodecl> end
global function gtk_builder_error_get_type(): GType <cimport,nodecl> end
global function gtk_builder_closure_flags_get_type(): GType <cimport,nodecl> end
global function gtk_cell_renderer_state_get_type(): GType <cimport,nodecl> end
global function gtk_cell_renderer_mode_get_type(): GType <cimport,nodecl> end
global function gtk_cell_renderer_accel_mode_get_type(): GType <cimport,nodecl> end
global function gtk_debug_flags_get_type(): GType <cimport,nodecl> end
global function gtk_dialog_flags_get_type(): GType <cimport,nodecl> end
global function gtk_response_type_get_type(): GType <cimport,nodecl> end
global function gtk_editable_properties_get_type(): GType <cimport,nodecl> end
global function gtk_entry_icon_position_get_type(): GType <cimport,nodecl> end
global function gtk_align_get_type(): GType <cimport,nodecl> end
global function gtk_arrow_type_get_type(): GType <cimport,nodecl> end
global function gtk_baseline_position_get_type(): GType <cimport,nodecl> end
global function gtk_delete_type_get_type(): GType <cimport,nodecl> end
global function gtk_direction_type_get_type(): GType <cimport,nodecl> end
global function gtk_icon_size_get_type(): GType <cimport,nodecl> end
global function gtk_sensitivity_type_get_type(): GType <cimport,nodecl> end
global function gtk_text_direction_get_type(): GType <cimport,nodecl> end
global function gtk_justification_get_type(): GType <cimport,nodecl> end
global function gtk_message_type_get_type(): GType <cimport,nodecl> end
global function gtk_movement_step_get_type(): GType <cimport,nodecl> end
global function gtk_natural_wrap_mode_get_type(): GType <cimport,nodecl> end
global function gtk_scroll_step_get_type(): GType <cimport,nodecl> end
global function gtk_orientation_get_type(): GType <cimport,nodecl> end
global function gtk_overflow_get_type(): GType <cimport,nodecl> end
global function gtk_pack_type_get_type(): GType <cimport,nodecl> end
global function gtk_position_type_get_type(): GType <cimport,nodecl> end
global function gtk_scroll_type_get_type(): GType <cimport,nodecl> end
global function gtk_selection_mode_get_type(): GType <cimport,nodecl> end
global function gtk_wrap_mode_get_type(): GType <cimport,nodecl> end
global function gtk_sort_type_get_type(): GType <cimport,nodecl> end
global function gtk_print_pages_get_type(): GType <cimport,nodecl> end
global function gtk_page_set_get_type(): GType <cimport,nodecl> end
global function gtk_number_up_layout_get_type(): GType <cimport,nodecl> end
global function gtk_ordering_get_type(): GType <cimport,nodecl> end
global function gtk_page_orientation_get_type(): GType <cimport,nodecl> end
global function gtk_print_quality_get_type(): GType <cimport,nodecl> end
global function gtk_print_duplex_get_type(): GType <cimport,nodecl> end
global function gtk_unit_get_type(): GType <cimport,nodecl> end
global function gtk_tree_view_grid_lines_get_type(): GType <cimport,nodecl> end
global function gtk_size_group_mode_get_type(): GType <cimport,nodecl> end
global function gtk_size_request_mode_get_type(): GType <cimport,nodecl> end
global function gtk_scrollable_policy_get_type(): GType <cimport,nodecl> end
global function gtk_state_flags_get_type(): GType <cimport,nodecl> end
global function gtk_border_style_get_type(): GType <cimport,nodecl> end
global function gtk_level_bar_mode_get_type(): GType <cimport,nodecl> end
global function gtk_input_purpose_get_type(): GType <cimport,nodecl> end
global function gtk_input_hints_get_type(): GType <cimport,nodecl> end
global function gtk_propagation_phase_get_type(): GType <cimport,nodecl> end
global function gtk_propagation_limit_get_type(): GType <cimport,nodecl> end
global function gtk_event_sequence_state_get_type(): GType <cimport,nodecl> end
global function gtk_pan_direction_get_type(): GType <cimport,nodecl> end
global function gtk_shortcut_scope_get_type(): GType <cimport,nodecl> end
global function gtk_pick_flags_get_type(): GType <cimport,nodecl> end
global function gtk_constraint_relation_get_type(): GType <cimport,nodecl> end
global function gtk_constraint_strength_get_type(): GType <cimport,nodecl> end
global function gtk_constraint_attribute_get_type(): GType <cimport,nodecl> end
global function gtk_constraint_vfl_parser_error_get_type(): GType <cimport,nodecl> end
global function gtk_system_setting_get_type(): GType <cimport,nodecl> end
global function gtk_symbolic_color_get_type(): GType <cimport,nodecl> end
global function gtk_accessible_role_get_type(): GType <cimport,nodecl> end
global function gtk_accessible_state_get_type(): GType <cimport,nodecl> end
global function gtk_accessible_property_get_type(): GType <cimport,nodecl> end
global function gtk_accessible_relation_get_type(): GType <cimport,nodecl> end
global function gtk_accessible_tristate_get_type(): GType <cimport,nodecl> end
global function gtk_accessible_invalid_state_get_type(): GType <cimport,nodecl> end
global function gtk_accessible_autocomplete_get_type(): GType <cimport,nodecl> end
global function gtk_accessible_sort_get_type(): GType <cimport,nodecl> end
global function gtk_event_controller_scroll_flags_get_type(): GType <cimport,nodecl> end
global function gtk_file_chooser_action_get_type(): GType <cimport,nodecl> end
global function gtk_file_chooser_error_get_type(): GType <cimport,nodecl> end
global function gtk_filter_match_get_type(): GType <cimport,nodecl> end
global function gtk_filter_change_get_type(): GType <cimport,nodecl> end
global function gtk_font_chooser_level_get_type(): GType <cimport,nodecl> end
global function gtk_icon_lookup_flags_get_type(): GType <cimport,nodecl> end
global function gtk_icon_theme_error_get_type(): GType <cimport,nodecl> end
global function gtk_icon_view_drop_position_get_type(): GType <cimport,nodecl> end
global function gtk_image_type_get_type(): GType <cimport,nodecl> end
global function gtk_buttons_type_get_type(): GType <cimport,nodecl> end
global function gtk_notebook_tab_get_type(): GType <cimport,nodecl> end
global function gtk_pad_action_type_get_type(): GType <cimport,nodecl> end
global function gtk_popover_menu_flags_get_type(): GType <cimport,nodecl> end
global function gtk_print_status_get_type(): GType <cimport,nodecl> end
global function gtk_print_operation_result_get_type(): GType <cimport,nodecl> end
global function gtk_print_operation_action_get_type(): GType <cimport,nodecl> end
global function gtk_print_error_get_type(): GType <cimport,nodecl> end
global function gtk_recent_manager_error_get_type(): GType <cimport,nodecl> end
global function gtk_revealer_transition_type_get_type(): GType <cimport,nodecl> end
global function gtk_corner_type_get_type(): GType <cimport,nodecl> end
global function gtk_policy_type_get_type(): GType <cimport,nodecl> end
global function gtk_shortcut_action_flags_get_type(): GType <cimport,nodecl> end
global function gtk_shortcut_type_get_type(): GType <cimport,nodecl> end
global function gtk_sorter_order_get_type(): GType <cimport,nodecl> end
global function gtk_sorter_change_get_type(): GType <cimport,nodecl> end
global function gtk_spin_button_update_policy_get_type(): GType <cimport,nodecl> end
global function gtk_spin_type_get_type(): GType <cimport,nodecl> end
global function gtk_stack_transition_type_get_type(): GType <cimport,nodecl> end
global function gtk_string_filter_match_mode_get_type(): GType <cimport,nodecl> end
global function gtk_style_context_print_flags_get_type(): GType <cimport,nodecl> end
global function gtk_text_search_flags_get_type(): GType <cimport,nodecl> end
global function gtk_text_window_type_get_type(): GType <cimport,nodecl> end
global function gtk_text_view_layer_get_type(): GType <cimport,nodecl> end
global function gtk_text_extend_selection_get_type(): GType <cimport,nodecl> end
global function gtk_tree_model_flags_get_type(): GType <cimport,nodecl> end
global function gtk_tree_view_drop_position_get_type(): GType <cimport,nodecl> end
global function gtk_tree_view_column_sizing_get_type(): GType <cimport,nodecl> end
global function gtk_constraint_guide_get_type(): GType <cimport,nodecl> end
global function glib_autoptr_clear_GtkConstraintGuide(_ptr: *GtkConstraintGuide): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GtkConstraintGuide(_ptr: **GtkConstraintGuide): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GtkConstraintGuide(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GtkConstraintGuide(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GtkConstraintGuide(_q: **GQueue): void <cimport,nodecl> end
global function glib_autoptr_clear_GtkConstraintGuideClass(_ptr: *GtkConstraintGuideClass): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GtkConstraintGuideClass(_ptr: **GtkConstraintGuideClass): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GtkConstraintGuideClass(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GtkConstraintGuideClass(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GtkConstraintGuideClass(_q: **GQueue): void <cimport,nodecl> end
global function GTK_CONSTRAINT_GUIDE(ptr: gpointer): *GtkConstraintGuide <cimport,nodecl> end
global function GTK_IS_CONSTRAINT_GUIDE(ptr: gpointer): gboolean <cimport,nodecl> end
global function gtk_constraint_guide_new(): *GtkConstraintGuide <cimport,nodecl> end
global function gtk_constraint_guide_set_min_size(guide: *GtkConstraintGuide, width: cint, height: cint): void <cimport,nodecl> end
global function gtk_constraint_guide_get_min_size(guide: *GtkConstraintGuide, width: *cint, height: *cint): void <cimport,nodecl> end
global function gtk_constraint_guide_set_nat_size(guide: *GtkConstraintGuide, width: cint, height: cint): void <cimport,nodecl> end
global function gtk_constraint_guide_get_nat_size(guide: *GtkConstraintGuide, width: *cint, height: *cint): void <cimport,nodecl> end
global function gtk_constraint_guide_set_max_size(guide: *GtkConstraintGuide, width: cint, height: cint): void <cimport,nodecl> end
global function gtk_constraint_guide_get_max_size(guide: *GtkConstraintGuide, width: *cint, height: *cint): void <cimport,nodecl> end
global function gtk_constraint_guide_get_strength(guide: *GtkConstraintGuide): GtkConstraintStrength <cimport,nodecl> end
global function gtk_constraint_guide_set_strength(guide: *GtkConstraintGuide, strength: GtkConstraintStrength): void <cimport,nodecl> end
global function gtk_constraint_guide_set_name(guide: *GtkConstraintGuide, name: cstring): void <cimport,nodecl> end
global function gtk_constraint_guide_get_name(guide: *GtkConstraintGuide): cstring <cimport,nodecl> end
global function gtk_constraint_layout_child_get_type(): GType <cimport,nodecl> end
global function glib_autoptr_clear_GtkConstraintLayoutChild(_ptr: *GtkConstraintLayoutChild): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GtkConstraintLayoutChild(_ptr: **GtkConstraintLayoutChild): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GtkConstraintLayoutChild(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GtkConstraintLayoutChild(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GtkConstraintLayoutChild(_q: **GQueue): void <cimport,nodecl> end
global function glib_autoptr_clear_GtkConstraintLayoutChildClass(_ptr: *GtkConstraintLayoutChildClass): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GtkConstraintLayoutChildClass(_ptr: **GtkConstraintLayoutChildClass): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GtkConstraintLayoutChildClass(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GtkConstraintLayoutChildClass(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GtkConstraintLayoutChildClass(_q: **GQueue): void <cimport,nodecl> end
global function GTK_CONSTRAINT_LAYOUT_CHILD(ptr: gpointer): *GtkConstraintLayoutChild <cimport,nodecl> end
global function GTK_IS_CONSTRAINT_LAYOUT_CHILD(ptr: gpointer): gboolean <cimport,nodecl> end
global function gtk_constraint_layout_get_type(): GType <cimport,nodecl> end
global function glib_autoptr_clear_GtkConstraintLayout(_ptr: *GtkConstraintLayout): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GtkConstraintLayout(_ptr: **GtkConstraintLayout): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GtkConstraintLayout(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GtkConstraintLayout(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GtkConstraintLayout(_q: **GQueue): void <cimport,nodecl> end
global function glib_autoptr_clear_GtkConstraintLayoutClass(_ptr: *GtkConstraintLayoutClass): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GtkConstraintLayoutClass(_ptr: **GtkConstraintLayoutClass): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GtkConstraintLayoutClass(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GtkConstraintLayoutClass(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GtkConstraintLayoutClass(_q: **GQueue): void <cimport,nodecl> end
global function GTK_CONSTRAINT_LAYOUT(ptr: gpointer): *GtkConstraintLayout <cimport,nodecl> end
global function GTK_IS_CONSTRAINT_LAYOUT(ptr: gpointer): gboolean <cimport,nodecl> end
global function gtk_constraint_vfl_parser_error_quark(): GQuark <cimport,nodecl> end
global function gtk_constraint_layout_new(): *GtkLayoutManager <cimport,nodecl> end
global function gtk_constraint_layout_add_constraint(layout: *GtkConstraintLayout, constraint: *GtkConstraint): void <cimport,nodecl> end
global function gtk_constraint_layout_remove_constraint(layout: *GtkConstraintLayout, constraint: *GtkConstraint): void <cimport,nodecl> end
global function gtk_constraint_layout_add_guide(layout: *GtkConstraintLayout, guide: *GtkConstraintGuide): void <cimport,nodecl> end
global function gtk_constraint_layout_remove_guide(layout: *GtkConstraintLayout, guide: *GtkConstraintGuide): void <cimport,nodecl> end
global function gtk_constraint_layout_remove_all_constraints(layout: *GtkConstraintLayout): void <cimport,nodecl> end
global function gtk_constraint_layout_add_constraints_from_description(layout: *GtkConstraintLayout, lines: *[0]cstring, n_lines: gsize, hspacing: cint, vspacing: cint, error: **GError, first_view: cstring, ...: cvarargs): *GList <cimport,nodecl> end
global function gtk_constraint_layout_add_constraints_from_descriptionv(layout: *GtkConstraintLayout, lines: *[0]cstring, n_lines: gsize, hspacing: cint, vspacing: cint, views: *GHashTable, error: **GError): *GList <cimport,nodecl> end
global function gtk_constraint_layout_observe_constraints(layout: *GtkConstraintLayout): *GListModel <cimport,nodecl> end
global function gtk_constraint_layout_observe_guides(layout: *GtkConstraintLayout): *GListModel <cimport,nodecl> end
global function gtk_css_provider_get_type(): GType <cimport,nodecl> end
global function gtk_css_provider_new(): *GtkCssProvider <cimport,nodecl> end
global function gtk_css_provider_to_string(provider: *GtkCssProvider): cstring <cimport,nodecl> end
global function gtk_css_provider_load_from_data(css_provider: *GtkCssProvider, data: cstring, length: gssize): void <cimport,nodecl> end
global function gtk_css_provider_load_from_file(css_provider: *GtkCssProvider, file: *GFile): void <cimport,nodecl> end
global function gtk_css_provider_load_from_path(css_provider: *GtkCssProvider, path: cstring): void <cimport,nodecl> end
global function gtk_css_provider_load_from_resource(css_provider: *GtkCssProvider, resource_path: cstring): void <cimport,nodecl> end
global function gtk_css_provider_load_named(provider: *GtkCssProvider, name: cstring, variant: cstring): void <cimport,nodecl> end
global function gtk_custom_layout_get_type(): GType <cimport,nodecl> end
global function glib_autoptr_clear_GtkCustomLayout(_ptr: *GtkCustomLayout): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GtkCustomLayout(_ptr: **GtkCustomLayout): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GtkCustomLayout(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GtkCustomLayout(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GtkCustomLayout(_q: **GQueue): void <cimport,nodecl> end
global function glib_autoptr_clear_GtkCustomLayoutClass(_ptr: *GtkCustomLayoutClass): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GtkCustomLayoutClass(_ptr: **GtkCustomLayoutClass): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GtkCustomLayoutClass(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GtkCustomLayoutClass(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GtkCustomLayoutClass(_q: **GQueue): void <cimport,nodecl> end
global function GTK_CUSTOM_LAYOUT(ptr: gpointer): *GtkCustomLayout <cimport,nodecl> end
global function GTK_IS_CUSTOM_LAYOUT(ptr: gpointer): gboolean <cimport,nodecl> end
global function gtk_custom_layout_new(request_mode: GtkCustomRequestModeFunc, measure: GtkCustomMeasureFunc, allocate: GtkCustomAllocateFunc): *GtkLayoutManager <cimport,nodecl> end
global function gtk_custom_sorter_get_type(): GType <cimport,nodecl> end
global function glib_autoptr_clear_GtkCustomSorter(_ptr: *GtkCustomSorter): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GtkCustomSorter(_ptr: **GtkCustomSorter): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GtkCustomSorter(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GtkCustomSorter(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GtkCustomSorter(_q: **GQueue): void <cimport,nodecl> end
global function glib_autoptr_clear_GtkCustomSorterClass(_ptr: *GtkCustomSorterClass): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GtkCustomSorterClass(_ptr: **GtkCustomSorterClass): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GtkCustomSorterClass(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GtkCustomSorterClass(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GtkCustomSorterClass(_q: **GQueue): void <cimport,nodecl> end
global function GTK_CUSTOM_SORTER(ptr: gpointer): *GtkCustomSorter <cimport,nodecl> end
global function GTK_IS_CUSTOM_SORTER(ptr: gpointer): gboolean <cimport,nodecl> end
global function gtk_custom_sorter_new(sort_func: GCompareDataFunc, user_data: gpointer, user_destroy: GDestroyNotify): *GtkCustomSorter <cimport,nodecl> end
global function gtk_custom_sorter_set_sort_func(self: *GtkCustomSorter, sort_func: GCompareDataFunc, user_data: gpointer, user_destroy: GDestroyNotify): void <cimport,nodecl> end
global function gtk_get_debug_flags(): GtkDebugFlags <cimport,nodecl> end
global function gtk_set_debug_flags(flags: GtkDebugFlags): void <cimport,nodecl> end
global function gtk_directory_list_get_type(): GType <cimport,nodecl> end
global function glib_autoptr_clear_GtkDirectoryList(_ptr: *GtkDirectoryList): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GtkDirectoryList(_ptr: **GtkDirectoryList): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GtkDirectoryList(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GtkDirectoryList(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GtkDirectoryList(_q: **GQueue): void <cimport,nodecl> end
global function glib_autoptr_clear_GtkDirectoryListClass(_ptr: *GtkDirectoryListClass): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GtkDirectoryListClass(_ptr: **GtkDirectoryListClass): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GtkDirectoryListClass(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GtkDirectoryListClass(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GtkDirectoryListClass(_q: **GQueue): void <cimport,nodecl> end
global function GTK_DIRECTORY_LIST(ptr: gpointer): *GtkDirectoryList <cimport,nodecl> end
global function GTK_IS_DIRECTORY_LIST(ptr: gpointer): gboolean <cimport,nodecl> end
global function gtk_directory_list_new(attributes: cstring, file: *GFile): *GtkDirectoryList <cimport,nodecl> end
global function gtk_directory_list_set_file(self: *GtkDirectoryList, file: *GFile): void <cimport,nodecl> end
global function gtk_directory_list_get_file(self: *GtkDirectoryList): *GFile <cimport,nodecl> end
global function gtk_directory_list_set_attributes(self: *GtkDirectoryList, attributes: cstring): void <cimport,nodecl> end
global function gtk_directory_list_get_attributes(self: *GtkDirectoryList): cstring <cimport,nodecl> end
global function gtk_directory_list_set_io_priority(self: *GtkDirectoryList, io_priority: cint): void <cimport,nodecl> end
global function gtk_directory_list_get_io_priority(self: *GtkDirectoryList): cint <cimport,nodecl> end
global function gtk_directory_list_is_loading(self: *GtkDirectoryList): gboolean <cimport,nodecl> end
global function gtk_directory_list_get_error(self: *GtkDirectoryList): *GError <cimport,nodecl> end
global function gtk_directory_list_set_monitored(self: *GtkDirectoryList, monitored: gboolean): void <cimport,nodecl> end
global function gtk_directory_list_get_monitored(self: *GtkDirectoryList): gboolean <cimport,nodecl> end
global function gtk_drag_icon_get_type(): GType <cimport,nodecl> end
global function glib_autoptr_clear_GtkDragIcon(_ptr: *GtkDragIcon): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GtkDragIcon(_ptr: **GtkDragIcon): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GtkDragIcon(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GtkDragIcon(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GtkDragIcon(_q: **GQueue): void <cimport,nodecl> end
global function glib_autoptr_clear_GtkDragIconClass(_ptr: *GtkDragIconClass): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GtkDragIconClass(_ptr: **GtkDragIconClass): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GtkDragIconClass(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GtkDragIconClass(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GtkDragIconClass(_q: **GQueue): void <cimport,nodecl> end
global function GTK_DRAG_ICON(ptr: gpointer): *GtkDragIcon <cimport,nodecl> end
global function GTK_IS_DRAG_ICON(ptr: gpointer): gboolean <cimport,nodecl> end
global function gtk_drag_icon_get_for_drag(drag: *GdkDrag): *GtkWidget <cimport,nodecl> end
global function gtk_drag_icon_set_child(self: *GtkDragIcon, child: *GtkWidget): void <cimport,nodecl> end
global function gtk_drag_icon_get_child(self: *GtkDragIcon): *GtkWidget <cimport,nodecl> end
global function gtk_drag_icon_set_from_paintable(drag: *GdkDrag, paintable: *GdkPaintable, hot_x: cint, hot_y: cint): void <cimport,nodecl> end
global function gtk_drag_icon_create_widget_for_value(value: *GValue): *GtkWidget <cimport,nodecl> end
global function gtk_drag_source_get_type(): GType <cimport,nodecl> end
global function gtk_drag_source_new(): *GtkDragSource <cimport,nodecl> end
global function gtk_drag_source_set_content(source: *GtkDragSource, content: *GdkContentProvider): void <cimport,nodecl> end
global function gtk_drag_source_get_content(source: *GtkDragSource): *GdkContentProvider <cimport,nodecl> end
global function gtk_drag_source_set_actions(source: *GtkDragSource, actions: GdkDragAction): void <cimport,nodecl> end
global function gtk_drag_source_get_actions(source: *GtkDragSource): GdkDragAction <cimport,nodecl> end
global function gtk_drag_source_set_icon(source: *GtkDragSource, paintable: *GdkPaintable, hot_x: cint, hot_y: cint): void <cimport,nodecl> end
global function gtk_drag_source_drag_cancel(source: *GtkDragSource): void <cimport,nodecl> end
global function gtk_drag_source_get_drag(source: *GtkDragSource): *GdkDrag <cimport,nodecl> end
global function gtk_drag_check_threshold(widget: *GtkWidget, start_x: cint, start_y: cint, current_x: cint, current_y: cint): gboolean <cimport,nodecl> end
global function gtk_drawing_area_get_type(): GType <cimport,nodecl> end
global function gtk_drawing_area_new(): *GtkWidget <cimport,nodecl> end
global function gtk_drawing_area_set_content_width(self: *GtkDrawingArea, width: cint): void <cimport,nodecl> end
global function gtk_drawing_area_get_content_width(self: *GtkDrawingArea): cint <cimport,nodecl> end
global function gtk_drawing_area_set_content_height(self: *GtkDrawingArea, height: cint): void <cimport,nodecl> end
global function gtk_drawing_area_get_content_height(self: *GtkDrawingArea): cint <cimport,nodecl> end
global function gtk_drawing_area_set_draw_func(self: *GtkDrawingArea, draw_func: GtkDrawingAreaDrawFunc, user_data: gpointer, destroy: GDestroyNotify): void <cimport,nodecl> end
global function gtk_event_controller_get_type(): GType <cimport,nodecl> end
global function gtk_event_controller_get_widget(controller: *GtkEventController): *GtkWidget <cimport,nodecl> end
global function gtk_event_controller_reset(controller: *GtkEventController): void <cimport,nodecl> end
global function gtk_event_controller_get_propagation_phase(controller: *GtkEventController): GtkPropagationPhase <cimport,nodecl> end
global function gtk_event_controller_set_propagation_phase(controller: *GtkEventController, phase: GtkPropagationPhase): void <cimport,nodecl> end
global function gtk_event_controller_get_propagation_limit(controller: *GtkEventController): GtkPropagationLimit <cimport,nodecl> end
global function gtk_event_controller_set_propagation_limit(controller: *GtkEventController, limit: GtkPropagationLimit): void <cimport,nodecl> end
global function gtk_event_controller_get_name(controller: *GtkEventController): cstring <cimport,nodecl> end
global function gtk_event_controller_set_name(controller: *GtkEventController, name: cstring): void <cimport,nodecl> end
global function gtk_event_controller_get_current_event(controller: *GtkEventController): *GdkEvent <cimport,nodecl> end
global function gtk_event_controller_get_current_event_time(controller: *GtkEventController): guint32 <cimport,nodecl> end
global function gtk_event_controller_get_current_event_device(controller: *GtkEventController): *GdkDevice <cimport,nodecl> end
global function gtk_event_controller_get_current_event_state(controller: *GtkEventController): GdkModifierType <cimport,nodecl> end
global function gtk_drop_controller_motion_get_type(): GType <cimport,nodecl> end
global function gtk_drop_controller_motion_new(): *GtkEventController <cimport,nodecl> end
global function gtk_drop_controller_motion_contains_pointer(self: *GtkDropControllerMotion): gboolean <cimport,nodecl> end
global function gtk_drop_controller_motion_get_drop(self: *GtkDropControllerMotion): *GdkDrop <cimport,nodecl> end
global function gtk_drop_controller_motion_is_pointer(self: *GtkDropControllerMotion): gboolean <cimport,nodecl> end
global function gtk_drop_target_get_type(): GType <cimport,nodecl> end
global function gtk_drop_target_new(type: GType, actions: GdkDragAction): *GtkDropTarget <cimport,nodecl> end
global function gtk_drop_target_set_gtypes(self: *GtkDropTarget, types: *GType, n_types: gsize): void <cimport,nodecl> end
global function gtk_drop_target_get_gtypes(self: *GtkDropTarget, n_types: *gsize): *GType <cimport,nodecl> end
global function gtk_drop_target_get_formats(self: *GtkDropTarget): *GdkContentFormats <cimport,nodecl> end
global function gtk_drop_target_set_actions(self: *GtkDropTarget, actions: GdkDragAction): void <cimport,nodecl> end
global function gtk_drop_target_get_actions(self: *GtkDropTarget): GdkDragAction <cimport,nodecl> end
global function gtk_drop_target_set_preload(self: *GtkDropTarget, preload: gboolean): void <cimport,nodecl> end
global function gtk_drop_target_get_preload(self: *GtkDropTarget): gboolean <cimport,nodecl> end
global function gtk_drop_target_get_drop(self: *GtkDropTarget): *GdkDrop <cimport,nodecl> end
global function gtk_drop_target_get_current_drop(self: *GtkDropTarget): *GdkDrop <cimport,nodecl> end
global function gtk_drop_target_get_value(self: *GtkDropTarget): *GValue <cimport,nodecl> end
global function gtk_drop_target_reject(self: *GtkDropTarget): void <cimport,nodecl> end
global function gtk_drop_target_async_get_type(): GType <cimport,nodecl> end
global function gtk_drop_target_async_new(formats: *GdkContentFormats, actions: GdkDragAction): *GtkDropTargetAsync <cimport,nodecl> end
global function gtk_drop_target_async_set_formats(self: *GtkDropTargetAsync, formats: *GdkContentFormats): void <cimport,nodecl> end
global function gtk_drop_target_async_get_formats(self: *GtkDropTargetAsync): *GdkContentFormats <cimport,nodecl> end
global function gtk_drop_target_async_set_actions(self: *GtkDropTargetAsync, actions: GdkDragAction): void <cimport,nodecl> end
global function gtk_drop_target_async_get_actions(self: *GtkDropTargetAsync): GdkDragAction <cimport,nodecl> end
global function gtk_drop_target_async_reject_drop(self: *GtkDropTargetAsync, drop: *GdkDrop): void <cimport,nodecl> end
global function gtk_drop_down_get_type(): GType <cimport,nodecl> end
global function glib_autoptr_clear_GtkDropDown(_ptr: *GtkDropDown): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GtkDropDown(_ptr: **GtkDropDown): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GtkDropDown(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GtkDropDown(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GtkDropDown(_q: **GQueue): void <cimport,nodecl> end
global function glib_autoptr_clear_GtkDropDownClass(_ptr: *GtkDropDownClass): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GtkDropDownClass(_ptr: **GtkDropDownClass): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GtkDropDownClass(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GtkDropDownClass(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GtkDropDownClass(_q: **GQueue): void <cimport,nodecl> end
global function GTK_DROP_DOWN(ptr: gpointer): *GtkDropDown <cimport,nodecl> end
global function GTK_IS_DROP_DOWN(ptr: gpointer): gboolean <cimport,nodecl> end
global function gtk_drop_down_new(model: *GListModel, expression: *GtkExpression): *GtkWidget <cimport,nodecl> end
global function gtk_drop_down_new_from_strings(strings: *cstring): *GtkWidget <cimport,nodecl> end
global function gtk_drop_down_set_model(self: *GtkDropDown, model: *GListModel): void <cimport,nodecl> end
global function gtk_drop_down_get_model(self: *GtkDropDown): *GListModel <cimport,nodecl> end
global function gtk_drop_down_set_selected(self: *GtkDropDown, position: guint): void <cimport,nodecl> end
global function gtk_drop_down_get_selected(self: *GtkDropDown): guint <cimport,nodecl> end
global function gtk_drop_down_get_selected_item(self: *GtkDropDown): gpointer <cimport,nodecl> end
global function gtk_drop_down_set_factory(self: *GtkDropDown, factory: *GtkListItemFactory): void <cimport,nodecl> end
global function gtk_drop_down_get_factory(self: *GtkDropDown): *GtkListItemFactory <cimport,nodecl> end
global function gtk_drop_down_set_list_factory(self: *GtkDropDown, factory: *GtkListItemFactory): void <cimport,nodecl> end
global function gtk_drop_down_get_list_factory(self: *GtkDropDown): *GtkListItemFactory <cimport,nodecl> end
global function gtk_drop_down_set_expression(self: *GtkDropDown, expression: *GtkExpression): void <cimport,nodecl> end
global function gtk_drop_down_get_expression(self: *GtkDropDown): *GtkExpression <cimport,nodecl> end
global function gtk_drop_down_set_enable_search(self: *GtkDropDown, enable_search: gboolean): void <cimport,nodecl> end
global function gtk_drop_down_get_enable_search(self: *GtkDropDown): gboolean <cimport,nodecl> end
global function gtk_drop_down_set_show_arrow(self: *GtkDropDown, show_arrow: gboolean): void <cimport,nodecl> end
global function gtk_drop_down_get_show_arrow(self: *GtkDropDown): gboolean <cimport,nodecl> end
global function gtk_editable_label_get_type(): GType <cimport,nodecl> end
global function glib_autoptr_clear_GtkEditableLabel(_ptr: *GtkEditableLabel): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GtkEditableLabel(_ptr: **GtkEditableLabel): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GtkEditableLabel(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GtkEditableLabel(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GtkEditableLabel(_q: **GQueue): void <cimport,nodecl> end
global function glib_autoptr_clear_GtkEditableLabelClass(_ptr: *GtkEditableLabelClass): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GtkEditableLabelClass(_ptr: **GtkEditableLabelClass): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GtkEditableLabelClass(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GtkEditableLabelClass(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GtkEditableLabelClass(_q: **GQueue): void <cimport,nodecl> end
global function GTK_EDITABLE_LABEL(ptr: gpointer): *GtkEditableLabel <cimport,nodecl> end
global function GTK_IS_EDITABLE_LABEL(ptr: gpointer): gboolean <cimport,nodecl> end
global function gtk_editable_label_new(str: cstring): *GtkWidget <cimport,nodecl> end
global function gtk_editable_label_get_editing(self: *GtkEditableLabel): gboolean <cimport,nodecl> end
global function gtk_editable_label_start_editing(self: *GtkEditableLabel): void <cimport,nodecl> end
global function gtk_editable_label_stop_editing(self: *GtkEditableLabel, commit: gboolean): void <cimport,nodecl> end
global function gtk_emoji_chooser_get_type(): GType <cimport,nodecl> end
global function gtk_emoji_chooser_new(): *GtkWidget <cimport,nodecl> end
global function gtk_event_controller_focus_get_type(): GType <cimport,nodecl> end
global function gtk_event_controller_focus_new(): *GtkEventController <cimport,nodecl> end
global function gtk_event_controller_focus_contains_focus(self: *GtkEventControllerFocus): gboolean <cimport,nodecl> end
global function gtk_event_controller_focus_is_focus(self: *GtkEventControllerFocus): gboolean <cimport,nodecl> end
global function gtk_event_controller_key_get_type(): GType <cimport,nodecl> end
global function gtk_event_controller_key_new(): *GtkEventController <cimport,nodecl> end
global function gtk_event_controller_key_set_im_context(controller: *GtkEventControllerKey, im_context: *GtkIMContext): void <cimport,nodecl> end
global function gtk_event_controller_key_get_im_context(controller: *GtkEventControllerKey): *GtkIMContext <cimport,nodecl> end
global function gtk_event_controller_key_forward(controller: *GtkEventControllerKey, widget: *GtkWidget): gboolean <cimport,nodecl> end
global function gtk_event_controller_key_get_group(controller: *GtkEventControllerKey): guint <cimport,nodecl> end
global function gtk_event_controller_legacy_get_type(): GType <cimport,nodecl> end
global function gtk_event_controller_legacy_new(): *GtkEventController <cimport,nodecl> end
global function gtk_event_controller_motion_get_type(): GType <cimport,nodecl> end
global function gtk_event_controller_motion_new(): *GtkEventController <cimport,nodecl> end
global function gtk_event_controller_motion_contains_pointer(self: *GtkEventControllerMotion): gboolean <cimport,nodecl> end
global function gtk_event_controller_motion_is_pointer(self: *GtkEventControllerMotion): gboolean <cimport,nodecl> end
global function gtk_event_controller_scroll_get_type(): GType <cimport,nodecl> end
global function gtk_event_controller_scroll_new(flags: GtkEventControllerScrollFlags): *GtkEventController <cimport,nodecl> end
global function gtk_event_controller_scroll_set_flags(scroll: *GtkEventControllerScroll, flags: GtkEventControllerScrollFlags): void <cimport,nodecl> end
global function gtk_event_controller_scroll_get_flags(scroll: *GtkEventControllerScroll): GtkEventControllerScrollFlags <cimport,nodecl> end
global function gtk_expander_get_type(): GType <cimport,nodecl> end
global function gtk_expander_new(label: cstring): *GtkWidget <cimport,nodecl> end
global function gtk_expander_new_with_mnemonic(label: cstring): *GtkWidget <cimport,nodecl> end
global function gtk_expander_set_expanded(expander: *GtkExpander, expanded: gboolean): void <cimport,nodecl> end
global function gtk_expander_get_expanded(expander: *GtkExpander): gboolean <cimport,nodecl> end
global function gtk_expander_set_label(expander: *GtkExpander, label: cstring): void <cimport,nodecl> end
global function gtk_expander_get_label(expander: *GtkExpander): cstring <cimport,nodecl> end
global function gtk_expander_set_use_underline(expander: *GtkExpander, use_underline: gboolean): void <cimport,nodecl> end
global function gtk_expander_get_use_underline(expander: *GtkExpander): gboolean <cimport,nodecl> end
global function gtk_expander_set_use_markup(expander: *GtkExpander, use_markup: gboolean): void <cimport,nodecl> end
global function gtk_expander_get_use_markup(expander: *GtkExpander): gboolean <cimport,nodecl> end
global function gtk_expander_set_label_widget(expander: *GtkExpander, label_widget: *GtkWidget): void <cimport,nodecl> end
global function gtk_expander_get_label_widget(expander: *GtkExpander): *GtkWidget <cimport,nodecl> end
global function gtk_expander_set_resize_toplevel(expander: *GtkExpander, resize_toplevel: gboolean): void <cimport,nodecl> end
global function gtk_expander_get_resize_toplevel(expander: *GtkExpander): gboolean <cimport,nodecl> end
global function gtk_expander_set_child(expander: *GtkExpander, child: *GtkWidget): void <cimport,nodecl> end
global function gtk_expander_get_child(expander: *GtkExpander): *GtkWidget <cimport,nodecl> end
global function gtk_fixed_get_type(): GType <cimport,nodecl> end
global function gtk_fixed_new(): *GtkWidget <cimport,nodecl> end
global function gtk_fixed_put(fixed: *GtkFixed, widget: *GtkWidget, x: float64, y: float64): void <cimport,nodecl> end
global function gtk_fixed_remove(fixed: *GtkFixed, widget: *GtkWidget): void <cimport,nodecl> end
global function gtk_fixed_move(fixed: *GtkFixed, widget: *GtkWidget, x: float64, y: float64): void <cimport,nodecl> end
global function gtk_fixed_get_child_position(fixed: *GtkFixed, widget: *GtkWidget, x: *float64, y: *float64): void <cimport,nodecl> end
global function gtk_fixed_set_child_transform(fixed: *GtkFixed, widget: *GtkWidget, transform: *GskTransform): void <cimport,nodecl> end
global function gtk_fixed_get_child_transform(fixed: *GtkFixed, widget: *GtkWidget): *GskTransform <cimport,nodecl> end
global function gtk_fixed_layout_get_type(): GType <cimport,nodecl> end
global function glib_autoptr_clear_GtkFixedLayout(_ptr: *GtkFixedLayout): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GtkFixedLayout(_ptr: **GtkFixedLayout): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GtkFixedLayout(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GtkFixedLayout(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GtkFixedLayout(_q: **GQueue): void <cimport,nodecl> end
global function glib_autoptr_clear_GtkFixedLayoutClass(_ptr: *GtkFixedLayoutClass): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GtkFixedLayoutClass(_ptr: **GtkFixedLayoutClass): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GtkFixedLayoutClass(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GtkFixedLayoutClass(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GtkFixedLayoutClass(_q: **GQueue): void <cimport,nodecl> end
global function GTK_FIXED_LAYOUT(ptr: gpointer): *GtkFixedLayout <cimport,nodecl> end
global function GTK_IS_FIXED_LAYOUT(ptr: gpointer): gboolean <cimport,nodecl> end
global function gtk_fixed_layout_new(): *GtkLayoutManager <cimport,nodecl> end
global function gtk_fixed_layout_child_get_type(): GType <cimport,nodecl> end
global function glib_autoptr_clear_GtkFixedLayoutChild(_ptr: *GtkFixedLayoutChild): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GtkFixedLayoutChild(_ptr: **GtkFixedLayoutChild): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GtkFixedLayoutChild(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GtkFixedLayoutChild(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GtkFixedLayoutChild(_q: **GQueue): void <cimport,nodecl> end
global function glib_autoptr_clear_GtkFixedLayoutChildClass(_ptr: *GtkFixedLayoutChildClass): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GtkFixedLayoutChildClass(_ptr: **GtkFixedLayoutChildClass): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GtkFixedLayoutChildClass(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GtkFixedLayoutChildClass(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GtkFixedLayoutChildClass(_q: **GQueue): void <cimport,nodecl> end
global function GTK_FIXED_LAYOUT_CHILD(ptr: gpointer): *GtkFixedLayoutChild <cimport,nodecl> end
global function GTK_IS_FIXED_LAYOUT_CHILD(ptr: gpointer): gboolean <cimport,nodecl> end
global function gtk_fixed_layout_child_set_transform(child: *GtkFixedLayoutChild, transform: *GskTransform): void <cimport,nodecl> end
global function gtk_fixed_layout_child_get_transform(child: *GtkFixedLayoutChild): *GskTransform <cimport,nodecl> end
global function gtk_file_filter_get_type(): GType <cimport,nodecl> end
global function gtk_file_filter_new(): *GtkFileFilter <cimport,nodecl> end
global function gtk_file_filter_set_name(filter: *GtkFileFilter, name: cstring): void <cimport,nodecl> end
global function gtk_file_filter_get_name(filter: *GtkFileFilter): cstring <cimport,nodecl> end
global function gtk_file_filter_add_mime_type(filter: *GtkFileFilter, mime_type: cstring): void <cimport,nodecl> end
global function gtk_file_filter_add_pattern(filter: *GtkFileFilter, pattern: cstring): void <cimport,nodecl> end
global function gtk_file_filter_add_suffix(filter: *GtkFileFilter, suffix: cstring): void <cimport,nodecl> end
global function gtk_file_filter_add_pixbuf_formats(filter: *GtkFileFilter): void <cimport,nodecl> end
global function gtk_file_filter_get_attributes(filter: *GtkFileFilter): *cstring <cimport,nodecl> end
global function gtk_file_filter_to_gvariant(filter: *GtkFileFilter): *GVariant <cimport,nodecl> end
global function gtk_file_filter_new_from_gvariant(variant: *GVariant): *GtkFileFilter <cimport,nodecl> end
global function gtk_file_chooser_get_type(): GType <cimport,nodecl> end
global function gtk_file_chooser_error_quark(): GQuark <cimport,nodecl> end
global function gtk_file_chooser_set_action(chooser: *GtkFileChooser, action: GtkFileChooserAction): void <cimport,nodecl> end
global function gtk_file_chooser_get_action(chooser: *GtkFileChooser): GtkFileChooserAction <cimport,nodecl> end
global function gtk_file_chooser_set_select_multiple(chooser: *GtkFileChooser, select_multiple: gboolean): void <cimport,nodecl> end
global function gtk_file_chooser_get_select_multiple(chooser: *GtkFileChooser): gboolean <cimport,nodecl> end
global function gtk_file_chooser_set_create_folders(chooser: *GtkFileChooser, create_folders: gboolean): void <cimport,nodecl> end
global function gtk_file_chooser_get_create_folders(chooser: *GtkFileChooser): gboolean <cimport,nodecl> end
global function gtk_file_chooser_set_current_name(chooser: *GtkFileChooser, name: cstring): void <cimport,nodecl> end
global function gtk_file_chooser_get_current_name(chooser: *GtkFileChooser): cstring <cimport,nodecl> end
global function gtk_file_chooser_get_file(chooser: *GtkFileChooser): *GFile <cimport,nodecl> end
global function gtk_file_chooser_set_file(chooser: *GtkFileChooser, file: *GFile, error: **GError): gboolean <cimport,nodecl> end
global function gtk_file_chooser_get_files(chooser: *GtkFileChooser): *GListModel <cimport,nodecl> end
global function gtk_file_chooser_set_current_folder(chooser: *GtkFileChooser, file: *GFile, error: **GError): gboolean <cimport,nodecl> end
global function gtk_file_chooser_get_current_folder(chooser: *GtkFileChooser): *GFile <cimport,nodecl> end
global function gtk_file_chooser_add_filter(chooser: *GtkFileChooser, filter: *GtkFileFilter): void <cimport,nodecl> end
global function gtk_file_chooser_remove_filter(chooser: *GtkFileChooser, filter: *GtkFileFilter): void <cimport,nodecl> end
global function gtk_file_chooser_get_filters(chooser: *GtkFileChooser): *GListModel <cimport,nodecl> end
global function gtk_file_chooser_set_filter(chooser: *GtkFileChooser, filter: *GtkFileFilter): void <cimport,nodecl> end
global function gtk_file_chooser_get_filter(chooser: *GtkFileChooser): *GtkFileFilter <cimport,nodecl> end
global function gtk_file_chooser_add_shortcut_folder(chooser: *GtkFileChooser, folder: *GFile, error: **GError): gboolean <cimport,nodecl> end
global function gtk_file_chooser_remove_shortcut_folder(chooser: *GtkFileChooser, folder: *GFile, error: **GError): gboolean <cimport,nodecl> end
global function gtk_file_chooser_get_shortcut_folders(chooser: *GtkFileChooser): *GListModel <cimport,nodecl> end
global function gtk_file_chooser_add_choice(chooser: *GtkFileChooser, id: cstring, label: cstring, options: *cstring, option_labels: *cstring): void <cimport,nodecl> end
global function gtk_file_chooser_remove_choice(chooser: *GtkFileChooser, id: cstring): void <cimport,nodecl> end
global function gtk_file_chooser_set_choice(chooser: *GtkFileChooser, id: cstring, option: cstring): void <cimport,nodecl> end
global function gtk_file_chooser_get_choice(chooser: *GtkFileChooser, id: cstring): cstring <cimport,nodecl> end
global function gtk_file_chooser_dialog_get_type(): GType <cimport,nodecl> end
global function gtk_file_chooser_dialog_new(title: cstring, parent: *GtkWindow, action: GtkFileChooserAction, first_button_text: cstring, ...: cvarargs): *GtkWidget <cimport,nodecl> end
global function gtk_native_dialog_get_type(): GType <cimport,nodecl> end
global function glib_autoptr_clear_GtkNativeDialog(_ptr: *GtkNativeDialog): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GtkNativeDialog(_ptr: **GtkNativeDialog): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GtkNativeDialog(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GtkNativeDialog(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GtkNativeDialog(_q: **GQueue): void <cimport,nodecl> end
global function glib_autoptr_clear_GtkNativeDialogClass(_ptr: *GtkNativeDialogClass): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GtkNativeDialogClass(_ptr: **GtkNativeDialogClass): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GtkNativeDialogClass(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GtkNativeDialogClass(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GtkNativeDialogClass(_q: **GQueue): void <cimport,nodecl> end
global function GTK_NATIVE_DIALOG(ptr: gpointer): *GtkNativeDialog <cimport,nodecl> end
global function GTK_NATIVE_DIALOG_CLASS(ptr: gpointer): *GtkNativeDialogClass <cimport,nodecl> end
global function GTK_IS_NATIVE_DIALOG(ptr: gpointer): gboolean <cimport,nodecl> end
global function GTK_IS_NATIVE_DIALOG_CLASS(ptr: gpointer): gboolean <cimport,nodecl> end
global function GTK_NATIVE_DIALOG_GET_CLASS(ptr: gpointer): *GtkNativeDialogClass <cimport,nodecl> end
global function gtk_native_dialog_show(self: *GtkNativeDialog): void <cimport,nodecl> end
global function gtk_native_dialog_hide(self: *GtkNativeDialog): void <cimport,nodecl> end
global function gtk_native_dialog_destroy(self: *GtkNativeDialog): void <cimport,nodecl> end
global function gtk_native_dialog_get_visible(self: *GtkNativeDialog): gboolean <cimport,nodecl> end
global function gtk_native_dialog_set_modal(self: *GtkNativeDialog, modal: gboolean): void <cimport,nodecl> end
global function gtk_native_dialog_get_modal(self: *GtkNativeDialog): gboolean <cimport,nodecl> end
global function gtk_native_dialog_set_title(self: *GtkNativeDialog, title: cstring): void <cimport,nodecl> end
global function gtk_native_dialog_get_title(self: *GtkNativeDialog): cstring <cimport,nodecl> end
global function gtk_native_dialog_set_transient_for(self: *GtkNativeDialog, parent: *GtkWindow): void <cimport,nodecl> end
global function gtk_native_dialog_get_transient_for(self: *GtkNativeDialog): *GtkWindow <cimport,nodecl> end
global function gtk_file_chooser_native_get_type(): GType <cimport,nodecl> end
global function glib_autoptr_clear_GtkFileChooserNative(_ptr: *GtkFileChooserNative): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GtkFileChooserNative(_ptr: **GtkFileChooserNative): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GtkFileChooserNative(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GtkFileChooserNative(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GtkFileChooserNative(_q: **GQueue): void <cimport,nodecl> end
global function glib_autoptr_clear_GtkFileChooserNativeClass(_ptr: *GtkFileChooserNativeClass): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GtkFileChooserNativeClass(_ptr: **GtkFileChooserNativeClass): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GtkFileChooserNativeClass(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GtkFileChooserNativeClass(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GtkFileChooserNativeClass(_q: **GQueue): void <cimport,nodecl> end
global function GTK_FILE_CHOOSER_NATIVE(ptr: gpointer): *GtkFileChooserNative <cimport,nodecl> end
global function GTK_IS_FILE_CHOOSER_NATIVE(ptr: gpointer): gboolean <cimport,nodecl> end
global function gtk_file_chooser_native_new(title: cstring, parent: *GtkWindow, action: GtkFileChooserAction, accept_label: cstring, cancel_label: cstring): *GtkFileChooserNative <cimport,nodecl> end
global function gtk_file_chooser_native_get_accept_label(self: *GtkFileChooserNative): cstring <cimport,nodecl> end
global function gtk_file_chooser_native_set_accept_label(self: *GtkFileChooserNative, accept_label: cstring): void <cimport,nodecl> end
global function gtk_file_chooser_native_get_cancel_label(self: *GtkFileChooserNative): cstring <cimport,nodecl> end
global function gtk_file_chooser_native_set_cancel_label(self: *GtkFileChooserNative, cancel_label: cstring): void <cimport,nodecl> end
global function gtk_file_chooser_widget_get_type(): GType <cimport,nodecl> end
global function gtk_file_chooser_widget_new(action: GtkFileChooserAction): *GtkWidget <cimport,nodecl> end
global function gtk_filter_list_model_get_type(): GType <cimport,nodecl> end
global function glib_autoptr_clear_GtkFilterListModel(_ptr: *GtkFilterListModel): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GtkFilterListModel(_ptr: **GtkFilterListModel): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GtkFilterListModel(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GtkFilterListModel(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GtkFilterListModel(_q: **GQueue): void <cimport,nodecl> end
global function glib_autoptr_clear_GtkFilterListModelClass(_ptr: *GtkFilterListModelClass): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GtkFilterListModelClass(_ptr: **GtkFilterListModelClass): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GtkFilterListModelClass(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GtkFilterListModelClass(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GtkFilterListModelClass(_q: **GQueue): void <cimport,nodecl> end
global function GTK_FILTER_LIST_MODEL(ptr: gpointer): *GtkFilterListModel <cimport,nodecl> end
global function GTK_IS_FILTER_LIST_MODEL(ptr: gpointer): gboolean <cimport,nodecl> end
global function gtk_filter_list_model_new(model: *GListModel, filter: *GtkFilter): *GtkFilterListModel <cimport,nodecl> end
global function gtk_filter_list_model_set_filter(self: *GtkFilterListModel, filter: *GtkFilter): void <cimport,nodecl> end
global function gtk_filter_list_model_get_filter(self: *GtkFilterListModel): *GtkFilter <cimport,nodecl> end
global function gtk_filter_list_model_set_model(self: *GtkFilterListModel, model: *GListModel): void <cimport,nodecl> end
global function gtk_filter_list_model_get_model(self: *GtkFilterListModel): *GListModel <cimport,nodecl> end
global function gtk_filter_list_model_set_incremental(self: *GtkFilterListModel, incremental: gboolean): void <cimport,nodecl> end
global function gtk_filter_list_model_get_incremental(self: *GtkFilterListModel): gboolean <cimport,nodecl> end
global function gtk_filter_list_model_get_pending(self: *GtkFilterListModel): guint <cimport,nodecl> end
global function gtk_custom_filter_get_type(): GType <cimport,nodecl> end
global function glib_autoptr_clear_GtkCustomFilter(_ptr: *GtkCustomFilter): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GtkCustomFilter(_ptr: **GtkCustomFilter): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GtkCustomFilter(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GtkCustomFilter(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GtkCustomFilter(_q: **GQueue): void <cimport,nodecl> end
global function glib_autoptr_clear_GtkCustomFilterClass(_ptr: *GtkCustomFilterClass): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GtkCustomFilterClass(_ptr: **GtkCustomFilterClass): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GtkCustomFilterClass(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GtkCustomFilterClass(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GtkCustomFilterClass(_q: **GQueue): void <cimport,nodecl> end
global function GTK_CUSTOM_FILTER(ptr: gpointer): *GtkCustomFilter <cimport,nodecl> end
global function GTK_IS_CUSTOM_FILTER(ptr: gpointer): gboolean <cimport,nodecl> end
global function gtk_custom_filter_new(match_func: GtkCustomFilterFunc, user_data: gpointer, user_destroy: GDestroyNotify): *GtkCustomFilter <cimport,nodecl> end
global function gtk_custom_filter_set_filter_func(self: *GtkCustomFilter, match_func: GtkCustomFilterFunc, user_data: gpointer, user_destroy: GDestroyNotify): void <cimport,nodecl> end
global function gtk_flatten_list_model_get_type(): GType <cimport,nodecl> end
global function glib_autoptr_clear_GtkFlattenListModel(_ptr: *GtkFlattenListModel): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GtkFlattenListModel(_ptr: **GtkFlattenListModel): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GtkFlattenListModel(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GtkFlattenListModel(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GtkFlattenListModel(_q: **GQueue): void <cimport,nodecl> end
global function glib_autoptr_clear_GtkFlattenListModelClass(_ptr: *GtkFlattenListModelClass): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GtkFlattenListModelClass(_ptr: **GtkFlattenListModelClass): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GtkFlattenListModelClass(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GtkFlattenListModelClass(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GtkFlattenListModelClass(_q: **GQueue): void <cimport,nodecl> end
global function GTK_FLATTEN_LIST_MODEL(ptr: gpointer): *GtkFlattenListModel <cimport,nodecl> end
global function GTK_IS_FLATTEN_LIST_MODEL(ptr: gpointer): gboolean <cimport,nodecl> end
global function gtk_flatten_list_model_new(model: *GListModel): *GtkFlattenListModel <cimport,nodecl> end
global function gtk_flatten_list_model_set_model(self: *GtkFlattenListModel, model: *GListModel): void <cimport,nodecl> end
global function gtk_flatten_list_model_get_model(self: *GtkFlattenListModel): *GListModel <cimport,nodecl> end
global function gtk_flatten_list_model_get_model_for_item(self: *GtkFlattenListModel, position: guint): *GListModel <cimport,nodecl> end
global function gtk_flow_box_child_get_type(): GType <cimport,nodecl> end
global function gtk_flow_box_child_new(): *GtkWidget <cimport,nodecl> end
global function gtk_flow_box_child_set_child(self: *GtkFlowBoxChild, child: *GtkWidget): void <cimport,nodecl> end
global function gtk_flow_box_child_get_child(self: *GtkFlowBoxChild): *GtkWidget <cimport,nodecl> end
global function gtk_flow_box_child_get_index(child: *GtkFlowBoxChild): cint <cimport,nodecl> end
global function gtk_flow_box_child_is_selected(child: *GtkFlowBoxChild): gboolean <cimport,nodecl> end
global function gtk_flow_box_child_changed(child: *GtkFlowBoxChild): void <cimport,nodecl> end
global function gtk_flow_box_get_type(): GType <cimport,nodecl> end
global function gtk_flow_box_new(): *GtkWidget <cimport,nodecl> end
global function gtk_flow_box_bind_model(box: *GtkFlowBox, model: *GListModel, create_widget_func: GtkFlowBoxCreateWidgetFunc, user_data: gpointer, user_data_free_func: GDestroyNotify): void <cimport,nodecl> end
global function gtk_flow_box_set_homogeneous(box: *GtkFlowBox, homogeneous: gboolean): void <cimport,nodecl> end
global function gtk_flow_box_get_homogeneous(box: *GtkFlowBox): gboolean <cimport,nodecl> end
global function gtk_flow_box_set_row_spacing(box: *GtkFlowBox, spacing: guint): void <cimport,nodecl> end
global function gtk_flow_box_get_row_spacing(box: *GtkFlowBox): guint <cimport,nodecl> end
global function gtk_flow_box_set_column_spacing(box: *GtkFlowBox, spacing: guint): void <cimport,nodecl> end
global function gtk_flow_box_get_column_spacing(box: *GtkFlowBox): guint <cimport,nodecl> end
global function gtk_flow_box_set_min_children_per_line(box: *GtkFlowBox, n_children: guint): void <cimport,nodecl> end
global function gtk_flow_box_get_min_children_per_line(box: *GtkFlowBox): guint <cimport,nodecl> end
global function gtk_flow_box_set_max_children_per_line(box: *GtkFlowBox, n_children: guint): void <cimport,nodecl> end
global function gtk_flow_box_get_max_children_per_line(box: *GtkFlowBox): guint <cimport,nodecl> end
global function gtk_flow_box_set_activate_on_single_click(box: *GtkFlowBox, single: gboolean): void <cimport,nodecl> end
global function gtk_flow_box_get_activate_on_single_click(box: *GtkFlowBox): gboolean <cimport,nodecl> end
global function gtk_flow_box_prepend(self: *GtkFlowBox, child: *GtkWidget): void <cimport,nodecl> end
global function gtk_flow_box_append(self: *GtkFlowBox, child: *GtkWidget): void <cimport,nodecl> end
global function gtk_flow_box_insert(box: *GtkFlowBox, widget: *GtkWidget, position: cint): void <cimport,nodecl> end
global function gtk_flow_box_remove(box: *GtkFlowBox, widget: *GtkWidget): void <cimport,nodecl> end
global function gtk_flow_box_get_child_at_index(box: *GtkFlowBox, idx: cint): *GtkFlowBoxChild <cimport,nodecl> end
global function gtk_flow_box_get_child_at_pos(box: *GtkFlowBox, x: cint, y: cint): *GtkFlowBoxChild <cimport,nodecl> end
global function gtk_flow_box_selected_foreach(box: *GtkFlowBox, func: GtkFlowBoxForeachFunc, data: gpointer): void <cimport,nodecl> end
global function gtk_flow_box_get_selected_children(box: *GtkFlowBox): *GList <cimport,nodecl> end
global function gtk_flow_box_select_child(box: *GtkFlowBox, child: *GtkFlowBoxChild): void <cimport,nodecl> end
global function gtk_flow_box_unselect_child(box: *GtkFlowBox, child: *GtkFlowBoxChild): void <cimport,nodecl> end
global function gtk_flow_box_select_all(box: *GtkFlowBox): void <cimport,nodecl> end
global function gtk_flow_box_unselect_all(box: *GtkFlowBox): void <cimport,nodecl> end
global function gtk_flow_box_set_selection_mode(box: *GtkFlowBox, mode: GtkSelectionMode): void <cimport,nodecl> end
global function gtk_flow_box_get_selection_mode(box: *GtkFlowBox): GtkSelectionMode <cimport,nodecl> end
global function gtk_flow_box_set_hadjustment(box: *GtkFlowBox, adjustment: *GtkAdjustment): void <cimport,nodecl> end
global function gtk_flow_box_set_vadjustment(box: *GtkFlowBox, adjustment: *GtkAdjustment): void <cimport,nodecl> end
global function gtk_flow_box_set_filter_func(box: *GtkFlowBox, filter_func: GtkFlowBoxFilterFunc, user_data: gpointer, destroy: GDestroyNotify): void <cimport,nodecl> end
global function gtk_flow_box_invalidate_filter(box: *GtkFlowBox): void <cimport,nodecl> end
global function gtk_flow_box_set_sort_func(box: *GtkFlowBox, sort_func: GtkFlowBoxSortFunc, user_data: gpointer, destroy: GDestroyNotify): void <cimport,nodecl> end
global function gtk_flow_box_invalidate_sort(box: *GtkFlowBox): void <cimport,nodecl> end
global function gtk_font_button_get_type(): GType <cimport,nodecl> end
global function gtk_font_button_new(): *GtkWidget <cimport,nodecl> end
global function gtk_font_button_new_with_font(fontname: cstring): *GtkWidget <cimport,nodecl> end
global function gtk_font_button_get_title(font_button: *GtkFontButton): cstring <cimport,nodecl> end
global function gtk_font_button_set_title(font_button: *GtkFontButton, title: cstring): void <cimport,nodecl> end
global function gtk_font_button_get_modal(font_button: *GtkFontButton): gboolean <cimport,nodecl> end
global function gtk_font_button_set_modal(font_button: *GtkFontButton, modal: gboolean): void <cimport,nodecl> end
global function gtk_font_button_get_use_font(font_button: *GtkFontButton): gboolean <cimport,nodecl> end
global function gtk_font_button_set_use_font(font_button: *GtkFontButton, use_font: gboolean): void <cimport,nodecl> end
global function gtk_font_button_get_use_size(font_button: *GtkFontButton): gboolean <cimport,nodecl> end
global function gtk_font_button_set_use_size(font_button: *GtkFontButton, use_size: gboolean): void <cimport,nodecl> end
global function gtk_font_chooser_get_type(): GType <cimport,nodecl> end
global function gtk_font_chooser_get_font_family(fontchooser: *GtkFontChooser): *PangoFontFamily <cimport,nodecl> end
global function gtk_font_chooser_get_font_face(fontchooser: *GtkFontChooser): *PangoFontFace <cimport,nodecl> end
global function gtk_font_chooser_get_font_size(fontchooser: *GtkFontChooser): cint <cimport,nodecl> end
global function gtk_font_chooser_get_font_desc(fontchooser: *GtkFontChooser): *PangoFontDescription <cimport,nodecl> end
global function gtk_font_chooser_set_font_desc(fontchooser: *GtkFontChooser, font_desc: *PangoFontDescription): void <cimport,nodecl> end
global function gtk_font_chooser_get_font(fontchooser: *GtkFontChooser): cstring <cimport,nodecl> end
global function gtk_font_chooser_set_font(fontchooser: *GtkFontChooser, fontname: cstring): void <cimport,nodecl> end
global function gtk_font_chooser_get_preview_text(fontchooser: *GtkFontChooser): cstring <cimport,nodecl> end
global function gtk_font_chooser_set_preview_text(fontchooser: *GtkFontChooser, text: cstring): void <cimport,nodecl> end
global function gtk_font_chooser_get_show_preview_entry(fontchooser: *GtkFontChooser): gboolean <cimport,nodecl> end
global function gtk_font_chooser_set_show_preview_entry(fontchooser: *GtkFontChooser, show_preview_entry: gboolean): void <cimport,nodecl> end
global function gtk_font_chooser_set_filter_func(fontchooser: *GtkFontChooser, filter: GtkFontFilterFunc, user_data: gpointer, destroy: GDestroyNotify): void <cimport,nodecl> end
global function gtk_font_chooser_set_font_map(fontchooser: *GtkFontChooser, fontmap: *PangoFontMap): void <cimport,nodecl> end
global function gtk_font_chooser_get_font_map(fontchooser: *GtkFontChooser): *PangoFontMap <cimport,nodecl> end
global function gtk_font_chooser_set_level(fontchooser: *GtkFontChooser, level: GtkFontChooserLevel): void <cimport,nodecl> end
global function gtk_font_chooser_get_level(fontchooser: *GtkFontChooser): GtkFontChooserLevel <cimport,nodecl> end
global function gtk_font_chooser_get_font_features(fontchooser: *GtkFontChooser): cstring <cimport,nodecl> end
global function gtk_font_chooser_get_language(fontchooser: *GtkFontChooser): cstring <cimport,nodecl> end
global function gtk_font_chooser_set_language(fontchooser: *GtkFontChooser, language: cstring): void <cimport,nodecl> end
global function gtk_font_chooser_dialog_get_type(): GType <cimport,nodecl> end
global function gtk_font_chooser_dialog_new(title: cstring, parent: *GtkWindow): *GtkWidget <cimport,nodecl> end
global function gtk_font_chooser_widget_get_type(): GType <cimport,nodecl> end
global function gtk_font_chooser_widget_new(): *GtkWidget <cimport,nodecl> end
global function gtk_frame_get_type(): GType <cimport,nodecl> end
global function gtk_frame_new(label: cstring): *GtkWidget <cimport,nodecl> end
global function gtk_frame_set_label(frame: *GtkFrame, label: cstring): void <cimport,nodecl> end
global function gtk_frame_get_label(frame: *GtkFrame): cstring <cimport,nodecl> end
global function gtk_frame_set_label_widget(frame: *GtkFrame, label_widget: *GtkWidget): void <cimport,nodecl> end
global function gtk_frame_get_label_widget(frame: *GtkFrame): *GtkWidget <cimport,nodecl> end
global function gtk_frame_set_label_align(frame: *GtkFrame, xalign: float32): void <cimport,nodecl> end
global function gtk_frame_get_label_align(frame: *GtkFrame): float32 <cimport,nodecl> end
global function gtk_frame_set_child(frame: *GtkFrame, child: *GtkWidget): void <cimport,nodecl> end
global function gtk_frame_get_child(frame: *GtkFrame): *GtkWidget <cimport,nodecl> end
global function gtk_gesture_get_type(): GType <cimport,nodecl> end
global function gtk_gesture_get_device(gesture: *GtkGesture): *GdkDevice <cimport,nodecl> end
global function gtk_gesture_set_state(gesture: *GtkGesture, state: GtkEventSequenceState): gboolean <cimport,nodecl> end
global function gtk_gesture_get_sequence_state(gesture: *GtkGesture, sequence: *GdkEventSequence): GtkEventSequenceState <cimport,nodecl> end
global function gtk_gesture_set_sequence_state(gesture: *GtkGesture, sequence: *GdkEventSequence, state: GtkEventSequenceState): gboolean <cimport,nodecl> end
global function gtk_gesture_get_sequences(gesture: *GtkGesture): *GList <cimport,nodecl> end
global function gtk_gesture_get_last_updated_sequence(gesture: *GtkGesture): *GdkEventSequence <cimport,nodecl> end
global function gtk_gesture_handles_sequence(gesture: *GtkGesture, sequence: *GdkEventSequence): gboolean <cimport,nodecl> end
global function gtk_gesture_get_last_event(gesture: *GtkGesture, sequence: *GdkEventSequence): *GdkEvent <cimport,nodecl> end
global function gtk_gesture_get_point(gesture: *GtkGesture, sequence: *GdkEventSequence, x: *float64, y: *float64): gboolean <cimport,nodecl> end
global function gtk_gesture_get_bounding_box(gesture: *GtkGesture, rect: *GdkRectangle): gboolean <cimport,nodecl> end
global function gtk_gesture_get_bounding_box_center(gesture: *GtkGesture, x: *float64, y: *float64): gboolean <cimport,nodecl> end
global function gtk_gesture_is_active(gesture: *GtkGesture): gboolean <cimport,nodecl> end
global function gtk_gesture_is_recognized(gesture: *GtkGesture): gboolean <cimport,nodecl> end
global function gtk_gesture_group(group_gesture: *GtkGesture, gesture: *GtkGesture): void <cimport,nodecl> end
global function gtk_gesture_ungroup(gesture: *GtkGesture): void <cimport,nodecl> end
global function gtk_gesture_get_group(gesture: *GtkGesture): *GList <cimport,nodecl> end
global function gtk_gesture_is_grouped_with(gesture: *GtkGesture, other: *GtkGesture): gboolean <cimport,nodecl> end
global function gtk_gesture_single_get_type(): GType <cimport,nodecl> end
global function gtk_gesture_single_get_touch_only(gesture: *GtkGestureSingle): gboolean <cimport,nodecl> end
global function gtk_gesture_single_set_touch_only(gesture: *GtkGestureSingle, touch_only: gboolean): void <cimport,nodecl> end
global function gtk_gesture_single_get_exclusive(gesture: *GtkGestureSingle): gboolean <cimport,nodecl> end
global function gtk_gesture_single_set_exclusive(gesture: *GtkGestureSingle, exclusive: gboolean): void <cimport,nodecl> end
global function gtk_gesture_single_get_button(gesture: *GtkGestureSingle): guint <cimport,nodecl> end
global function gtk_gesture_single_set_button(gesture: *GtkGestureSingle, button: guint): void <cimport,nodecl> end
global function gtk_gesture_single_get_current_button(gesture: *GtkGestureSingle): guint <cimport,nodecl> end
global function gtk_gesture_single_get_current_sequence(gesture: *GtkGestureSingle): *GdkEventSequence <cimport,nodecl> end
global function gtk_gesture_click_get_type(): GType <cimport,nodecl> end
global function gtk_gesture_click_new(): *GtkGesture <cimport,nodecl> end
global function gtk_gesture_drag_get_type(): GType <cimport,nodecl> end
global function gtk_gesture_drag_new(): *GtkGesture <cimport,nodecl> end
global function gtk_gesture_drag_get_start_point(gesture: *GtkGestureDrag, x: *float64, y: *float64): gboolean <cimport,nodecl> end
global function gtk_gesture_drag_get_offset(gesture: *GtkGestureDrag, x: *float64, y: *float64): gboolean <cimport,nodecl> end
global function gtk_gesture_long_press_get_type(): GType <cimport,nodecl> end
global function gtk_gesture_long_press_new(): *GtkGesture <cimport,nodecl> end
global function gtk_gesture_long_press_set_delay_factor(gesture: *GtkGestureLongPress, delay_factor: float64): void <cimport,nodecl> end
global function gtk_gesture_long_press_get_delay_factor(gesture: *GtkGestureLongPress): float64 <cimport,nodecl> end
global function gtk_gesture_pan_get_type(): GType <cimport,nodecl> end
global function gtk_gesture_pan_new(orientation: GtkOrientation): *GtkGesture <cimport,nodecl> end
global function gtk_gesture_pan_get_orientation(gesture: *GtkGesturePan): GtkOrientation <cimport,nodecl> end
global function gtk_gesture_pan_set_orientation(gesture: *GtkGesturePan, orientation: GtkOrientation): void <cimport,nodecl> end
global function gtk_gesture_rotate_get_type(): GType <cimport,nodecl> end
global function gtk_gesture_rotate_new(): *GtkGesture <cimport,nodecl> end
global function gtk_gesture_rotate_get_angle_delta(gesture: *GtkGestureRotate): float64 <cimport,nodecl> end
global function gtk_gesture_stylus_get_type(): GType <cimport,nodecl> end
global function gtk_gesture_stylus_new(): *GtkGesture <cimport,nodecl> end
global function gtk_gesture_stylus_get_axis(gesture: *GtkGestureStylus, axis: GdkAxisUse, value: *float64): gboolean <cimport,nodecl> end
global function gtk_gesture_stylus_get_axes(gesture: *GtkGestureStylus, axes: *[0]GdkAxisUse, values: **float64): gboolean <cimport,nodecl> end
global function gtk_gesture_stylus_get_backlog(gesture: *GtkGestureStylus, backlog: **GdkTimeCoord, n_elems: *guint): gboolean <cimport,nodecl> end
global function gtk_gesture_stylus_get_device_tool(gesture: *GtkGestureStylus): *GdkDeviceTool <cimport,nodecl> end
global function gtk_gesture_swipe_get_type(): GType <cimport,nodecl> end
global function gtk_gesture_swipe_new(): *GtkGesture <cimport,nodecl> end
global function gtk_gesture_swipe_get_velocity(gesture: *GtkGestureSwipe, velocity_x: *float64, velocity_y: *float64): gboolean <cimport,nodecl> end
global function gtk_gesture_zoom_get_type(): GType <cimport,nodecl> end
global function gtk_gesture_zoom_new(): *GtkGesture <cimport,nodecl> end
global function gtk_gesture_zoom_get_scale_delta(gesture: *GtkGestureZoom): float64 <cimport,nodecl> end
global function gtk_gl_area_get_type(): GType <cimport,nodecl> end
global function gtk_gl_area_new(): *GtkWidget <cimport,nodecl> end
global function gtk_gl_area_set_use_es(area: *GtkGLArea, use_es: gboolean): void <cimport,nodecl> end
global function gtk_gl_area_get_use_es(area: *GtkGLArea): gboolean <cimport,nodecl> end
global function gtk_gl_area_set_required_version(area: *GtkGLArea, major: cint, minor: cint): void <cimport,nodecl> end
global function gtk_gl_area_get_required_version(area: *GtkGLArea, major: *cint, minor: *cint): void <cimport,nodecl> end
global function gtk_gl_area_get_has_depth_buffer(area: *GtkGLArea): gboolean <cimport,nodecl> end
global function gtk_gl_area_set_has_depth_buffer(area: *GtkGLArea, has_depth_buffer: gboolean): void <cimport,nodecl> end
global function gtk_gl_area_get_has_stencil_buffer(area: *GtkGLArea): gboolean <cimport,nodecl> end
global function gtk_gl_area_set_has_stencil_buffer(area: *GtkGLArea, has_stencil_buffer: gboolean): void <cimport,nodecl> end
global function gtk_gl_area_get_auto_render(area: *GtkGLArea): gboolean <cimport,nodecl> end
global function gtk_gl_area_set_auto_render(area: *GtkGLArea, auto_render: gboolean): void <cimport,nodecl> end
global function gtk_gl_area_queue_render(area: *GtkGLArea): void <cimport,nodecl> end
global function gtk_gl_area_get_context(area: *GtkGLArea): *GdkGLContext <cimport,nodecl> end
global function gtk_gl_area_make_current(area: *GtkGLArea): void <cimport,nodecl> end
global function gtk_gl_area_attach_buffers(area: *GtkGLArea): void <cimport,nodecl> end
global function gtk_gl_area_set_error(area: *GtkGLArea, error: *GError): void <cimport,nodecl> end
global function gtk_gl_area_get_error(area: *GtkGLArea): *GError <cimport,nodecl> end
global function gtk_grid_get_type(): GType <cimport,nodecl> end
global function gtk_grid_new(): *GtkWidget <cimport,nodecl> end
global function gtk_grid_attach(grid: *GtkGrid, child: *GtkWidget, column: cint, row: cint, width: cint, height: cint): void <cimport,nodecl> end
global function gtk_grid_attach_next_to(grid: *GtkGrid, child: *GtkWidget, sibling: *GtkWidget, side: GtkPositionType, width: cint, height: cint): void <cimport,nodecl> end
global function gtk_grid_get_child_at(grid: *GtkGrid, column: cint, row: cint): *GtkWidget <cimport,nodecl> end
global function gtk_grid_remove(grid: *GtkGrid, child: *GtkWidget): void <cimport,nodecl> end
global function gtk_grid_insert_row(grid: *GtkGrid, position: cint): void <cimport,nodecl> end
global function gtk_grid_insert_column(grid: *GtkGrid, position: cint): void <cimport,nodecl> end
global function gtk_grid_remove_row(grid: *GtkGrid, position: cint): void <cimport,nodecl> end
global function gtk_grid_remove_column(grid: *GtkGrid, position: cint): void <cimport,nodecl> end
global function gtk_grid_insert_next_to(grid: *GtkGrid, sibling: *GtkWidget, side: GtkPositionType): void <cimport,nodecl> end
global function gtk_grid_set_row_homogeneous(grid: *GtkGrid, homogeneous: gboolean): void <cimport,nodecl> end
global function gtk_grid_get_row_homogeneous(grid: *GtkGrid): gboolean <cimport,nodecl> end
global function gtk_grid_set_row_spacing(grid: *GtkGrid, spacing: guint): void <cimport,nodecl> end
global function gtk_grid_get_row_spacing(grid: *GtkGrid): guint <cimport,nodecl> end
global function gtk_grid_set_column_homogeneous(grid: *GtkGrid, homogeneous: gboolean): void <cimport,nodecl> end
global function gtk_grid_get_column_homogeneous(grid: *GtkGrid): gboolean <cimport,nodecl> end
global function gtk_grid_set_column_spacing(grid: *GtkGrid, spacing: guint): void <cimport,nodecl> end
global function gtk_grid_get_column_spacing(grid: *GtkGrid): guint <cimport,nodecl> end
global function gtk_grid_set_row_baseline_position(grid: *GtkGrid, row: cint, pos: GtkBaselinePosition): void <cimport,nodecl> end
global function gtk_grid_get_row_baseline_position(grid: *GtkGrid, row: cint): GtkBaselinePosition <cimport,nodecl> end
global function gtk_grid_set_baseline_row(grid: *GtkGrid, row: cint): void <cimport,nodecl> end
global function gtk_grid_get_baseline_row(grid: *GtkGrid): cint <cimport,nodecl> end
global function gtk_grid_query_child(grid: *GtkGrid, child: *GtkWidget, column: *cint, row: *cint, width: *cint, height: *cint): void <cimport,nodecl> end
global function gtk_grid_layout_get_type(): GType <cimport,nodecl> end
global function glib_autoptr_clear_GtkGridLayout(_ptr: *GtkGridLayout): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GtkGridLayout(_ptr: **GtkGridLayout): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GtkGridLayout(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GtkGridLayout(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GtkGridLayout(_q: **GQueue): void <cimport,nodecl> end
global function glib_autoptr_clear_GtkGridLayoutClass(_ptr: *GtkGridLayoutClass): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GtkGridLayoutClass(_ptr: **GtkGridLayoutClass): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GtkGridLayoutClass(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GtkGridLayoutClass(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GtkGridLayoutClass(_q: **GQueue): void <cimport,nodecl> end
global function GTK_GRID_LAYOUT(ptr: gpointer): *GtkGridLayout <cimport,nodecl> end
global function GTK_IS_GRID_LAYOUT(ptr: gpointer): gboolean <cimport,nodecl> end
global function gtk_grid_layout_new(): *GtkLayoutManager <cimport,nodecl> end
global function gtk_grid_layout_set_row_homogeneous(grid: *GtkGridLayout, homogeneous: gboolean): void <cimport,nodecl> end
global function gtk_grid_layout_get_row_homogeneous(grid: *GtkGridLayout): gboolean <cimport,nodecl> end
global function gtk_grid_layout_set_row_spacing(grid: *GtkGridLayout, spacing: guint): void <cimport,nodecl> end
global function gtk_grid_layout_get_row_spacing(grid: *GtkGridLayout): guint <cimport,nodecl> end
global function gtk_grid_layout_set_column_homogeneous(grid: *GtkGridLayout, homogeneous: gboolean): void <cimport,nodecl> end
global function gtk_grid_layout_get_column_homogeneous(grid: *GtkGridLayout): gboolean <cimport,nodecl> end
global function gtk_grid_layout_set_column_spacing(grid: *GtkGridLayout, spacing: guint): void <cimport,nodecl> end
global function gtk_grid_layout_get_column_spacing(grid: *GtkGridLayout): guint <cimport,nodecl> end
global function gtk_grid_layout_set_row_baseline_position(grid: *GtkGridLayout, row: cint, pos: GtkBaselinePosition): void <cimport,nodecl> end
global function gtk_grid_layout_get_row_baseline_position(grid: *GtkGridLayout, row: cint): GtkBaselinePosition <cimport,nodecl> end
global function gtk_grid_layout_set_baseline_row(grid: *GtkGridLayout, row: cint): void <cimport,nodecl> end
global function gtk_grid_layout_get_baseline_row(grid: *GtkGridLayout): cint <cimport,nodecl> end
global function gtk_grid_layout_child_get_type(): GType <cimport,nodecl> end
global function glib_autoptr_clear_GtkGridLayoutChild(_ptr: *GtkGridLayoutChild): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GtkGridLayoutChild(_ptr: **GtkGridLayoutChild): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GtkGridLayoutChild(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GtkGridLayoutChild(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GtkGridLayoutChild(_q: **GQueue): void <cimport,nodecl> end
global function glib_autoptr_clear_GtkGridLayoutChildClass(_ptr: *GtkGridLayoutChildClass): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GtkGridLayoutChildClass(_ptr: **GtkGridLayoutChildClass): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GtkGridLayoutChildClass(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GtkGridLayoutChildClass(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GtkGridLayoutChildClass(_q: **GQueue): void <cimport,nodecl> end
global function GTK_GRID_LAYOUT_CHILD(ptr: gpointer): *GtkGridLayoutChild <cimport,nodecl> end
global function GTK_IS_GRID_LAYOUT_CHILD(ptr: gpointer): gboolean <cimport,nodecl> end
global function gtk_grid_layout_child_set_row(child: *GtkGridLayoutChild, row: cint): void <cimport,nodecl> end
global function gtk_grid_layout_child_get_row(child: *GtkGridLayoutChild): cint <cimport,nodecl> end
global function gtk_grid_layout_child_set_column(child: *GtkGridLayoutChild, column: cint): void <cimport,nodecl> end
global function gtk_grid_layout_child_get_column(child: *GtkGridLayoutChild): cint <cimport,nodecl> end
global function gtk_grid_layout_child_set_column_span(child: *GtkGridLayoutChild, span: cint): void <cimport,nodecl> end
global function gtk_grid_layout_child_get_column_span(child: *GtkGridLayoutChild): cint <cimport,nodecl> end
global function gtk_grid_layout_child_set_row_span(child: *GtkGridLayoutChild, span: cint): void <cimport,nodecl> end
global function gtk_grid_layout_child_get_row_span(child: *GtkGridLayoutChild): cint <cimport,nodecl> end
global function gtk_list_base_get_type(): GType <cimport,nodecl> end
global function gtk_grid_view_get_type(): GType <cimport,nodecl> end
global function gtk_grid_view_new(model: *GtkSelectionModel, factory: *GtkListItemFactory): *GtkWidget <cimport,nodecl> end
global function gtk_grid_view_get_model(self: *GtkGridView): *GtkSelectionModel <cimport,nodecl> end
global function gtk_grid_view_set_model(self: *GtkGridView, model: *GtkSelectionModel): void <cimport,nodecl> end
global function gtk_grid_view_set_factory(self: *GtkGridView, factory: *GtkListItemFactory): void <cimport,nodecl> end
global function gtk_grid_view_get_factory(self: *GtkGridView): *GtkListItemFactory <cimport,nodecl> end
global function gtk_grid_view_get_min_columns(self: *GtkGridView): guint <cimport,nodecl> end
global function gtk_grid_view_set_min_columns(self: *GtkGridView, min_columns: guint): void <cimport,nodecl> end
global function gtk_grid_view_get_max_columns(self: *GtkGridView): guint <cimport,nodecl> end
global function gtk_grid_view_set_max_columns(self: *GtkGridView, max_columns: guint): void <cimport,nodecl> end
global function gtk_grid_view_set_enable_rubberband(self: *GtkGridView, enable_rubberband: gboolean): void <cimport,nodecl> end
global function gtk_grid_view_get_enable_rubberband(self: *GtkGridView): gboolean <cimport,nodecl> end
global function gtk_grid_view_set_single_click_activate(self: *GtkGridView, single_click_activate: gboolean): void <cimport,nodecl> end
global function gtk_grid_view_get_single_click_activate(self: *GtkGridView): gboolean <cimport,nodecl> end
global function gtk_header_bar_get_type(): GType <cimport,nodecl> end
global function gtk_header_bar_new(): *GtkWidget <cimport,nodecl> end
global function gtk_header_bar_set_title_widget(bar: *GtkHeaderBar, title_widget: *GtkWidget): void <cimport,nodecl> end
global function gtk_header_bar_get_title_widget(bar: *GtkHeaderBar): *GtkWidget <cimport,nodecl> end
global function gtk_header_bar_pack_start(bar: *GtkHeaderBar, child: *GtkWidget): void <cimport,nodecl> end
global function gtk_header_bar_pack_end(bar: *GtkHeaderBar, child: *GtkWidget): void <cimport,nodecl> end
global function gtk_header_bar_remove(bar: *GtkHeaderBar, child: *GtkWidget): void <cimport,nodecl> end
global function gtk_header_bar_get_show_title_buttons(bar: *GtkHeaderBar): gboolean <cimport,nodecl> end
global function gtk_header_bar_set_show_title_buttons(bar: *GtkHeaderBar, setting: gboolean): void <cimport,nodecl> end
global function gtk_header_bar_set_decoration_layout(bar: *GtkHeaderBar, layout: cstring): void <cimport,nodecl> end
global function gtk_header_bar_get_decoration_layout(bar: *GtkHeaderBar): cstring <cimport,nodecl> end
global function gtk_icon_theme_error_quark(): GQuark <cimport,nodecl> end
global function gtk_icon_theme_get_type(): GType <cimport,nodecl> end
global function gtk_icon_theme_new(): *GtkIconTheme <cimport,nodecl> end
global function gtk_icon_theme_get_for_display(display: *GdkDisplay): *GtkIconTheme <cimport,nodecl> end
global function gtk_icon_theme_get_display(self: *GtkIconTheme): *GdkDisplay <cimport,nodecl> end
global function gtk_icon_theme_set_search_path(self: *GtkIconTheme, path: *cstring): void <cimport,nodecl> end
global function gtk_icon_theme_get_search_path(self: *GtkIconTheme): *cstring <cimport,nodecl> end
global function gtk_icon_theme_add_search_path(self: *GtkIconTheme, path: cstring): void <cimport,nodecl> end
global function gtk_icon_theme_set_resource_path(self: *GtkIconTheme, path: *cstring): void <cimport,nodecl> end
global function gtk_icon_theme_get_resource_path(self: *GtkIconTheme): *cstring <cimport,nodecl> end
global function gtk_icon_theme_add_resource_path(self: *GtkIconTheme, path: cstring): void <cimport,nodecl> end
global function gtk_icon_theme_set_theme_name(self: *GtkIconTheme, theme_name: cstring): void <cimport,nodecl> end
global function gtk_icon_theme_get_theme_name(self: *GtkIconTheme): cstring <cimport,nodecl> end
global function gtk_icon_theme_has_icon(self: *GtkIconTheme, icon_name: cstring): gboolean <cimport,nodecl> end
global function gtk_icon_theme_has_gicon(self: *GtkIconTheme, gicon: *GIcon): gboolean <cimport,nodecl> end
global function gtk_icon_theme_get_icon_sizes(self: *GtkIconTheme, icon_name: cstring): *cint <cimport,nodecl> end
global function gtk_icon_theme_lookup_icon(self: *GtkIconTheme, icon_name: cstring, fallbacks: *[0]cstring, size: cint, scale: cint, direction: GtkTextDirection, flags: GtkIconLookupFlags): *GtkIconPaintable <cimport,nodecl> end
global function gtk_icon_theme_lookup_by_gicon(self: *GtkIconTheme, icon: *GIcon, size: cint, scale: cint, direction: GtkTextDirection, flags: GtkIconLookupFlags): *GtkIconPaintable <cimport,nodecl> end
global function gtk_icon_paintable_new_for_file(file: *GFile, size: cint, scale: cint): *GtkIconPaintable <cimport,nodecl> end
global function gtk_icon_theme_get_icon_names(self: *GtkIconTheme): *cstring <cimport,nodecl> end
global function gtk_icon_paintable_get_type(): GType <cimport,nodecl> end
global function gtk_icon_paintable_get_file(self: *GtkIconPaintable): *GFile <cimport,nodecl> end
global function gtk_icon_paintable_get_icon_name(self: *GtkIconPaintable): cstring <cimport,nodecl> end
global function gtk_icon_paintable_is_symbolic(self: *GtkIconPaintable): gboolean <cimport,nodecl> end
global function gtk_tooltip_get_type(): GType <cimport,nodecl> end
global function gtk_tooltip_set_markup(tooltip: *GtkTooltip, markup: cstring): void <cimport,nodecl> end
global function gtk_tooltip_set_text(tooltip: *GtkTooltip, text: cstring): void <cimport,nodecl> end
global function gtk_tooltip_set_icon(tooltip: *GtkTooltip, paintable: *GdkPaintable): void <cimport,nodecl> end
global function gtk_tooltip_set_icon_from_icon_name(tooltip: *GtkTooltip, icon_name: cstring): void <cimport,nodecl> end
global function gtk_tooltip_set_icon_from_gicon(tooltip: *GtkTooltip, gicon: *GIcon): void <cimport,nodecl> end
global function gtk_tooltip_set_custom(tooltip: *GtkTooltip, custom_widget: *GtkWidget): void <cimport,nodecl> end
global function gtk_tooltip_set_tip_area(tooltip: *GtkTooltip, rect: *GdkRectangle): void <cimport,nodecl> end
global function gtk_icon_view_get_type(): GType <cimport,nodecl> end
global function gtk_icon_view_new(): *GtkWidget <cimport,nodecl> end
global function gtk_icon_view_new_with_area(area: *GtkCellArea): *GtkWidget <cimport,nodecl> end
global function gtk_icon_view_new_with_model(model: *GtkTreeModel): *GtkWidget <cimport,nodecl> end
global function gtk_icon_view_set_model(icon_view: *GtkIconView, model: *GtkTreeModel): void <cimport,nodecl> end
global function gtk_icon_view_get_model(icon_view: *GtkIconView): *GtkTreeModel <cimport,nodecl> end
global function gtk_icon_view_set_text_column(icon_view: *GtkIconView, column: cint): void <cimport,nodecl> end
global function gtk_icon_view_get_text_column(icon_view: *GtkIconView): cint <cimport,nodecl> end
global function gtk_icon_view_set_markup_column(icon_view: *GtkIconView, column: cint): void <cimport,nodecl> end
global function gtk_icon_view_get_markup_column(icon_view: *GtkIconView): cint <cimport,nodecl> end
global function gtk_icon_view_set_pixbuf_column(icon_view: *GtkIconView, column: cint): void <cimport,nodecl> end
global function gtk_icon_view_get_pixbuf_column(icon_view: *GtkIconView): cint <cimport,nodecl> end
global function gtk_icon_view_set_item_orientation(icon_view: *GtkIconView, orientation: GtkOrientation): void <cimport,nodecl> end
global function gtk_icon_view_get_item_orientation(icon_view: *GtkIconView): GtkOrientation <cimport,nodecl> end
global function gtk_icon_view_set_columns(icon_view: *GtkIconView, columns: cint): void <cimport,nodecl> end
global function gtk_icon_view_get_columns(icon_view: *GtkIconView): cint <cimport,nodecl> end
global function gtk_icon_view_set_item_width(icon_view: *GtkIconView, item_width: cint): void <cimport,nodecl> end
global function gtk_icon_view_get_item_width(icon_view: *GtkIconView): cint <cimport,nodecl> end
global function gtk_icon_view_set_spacing(icon_view: *GtkIconView, spacing: cint): void <cimport,nodecl> end
global function gtk_icon_view_get_spacing(icon_view: *GtkIconView): cint <cimport,nodecl> end
global function gtk_icon_view_set_row_spacing(icon_view: *GtkIconView, row_spacing: cint): void <cimport,nodecl> end
global function gtk_icon_view_get_row_spacing(icon_view: *GtkIconView): cint <cimport,nodecl> end
global function gtk_icon_view_set_column_spacing(icon_view: *GtkIconView, column_spacing: cint): void <cimport,nodecl> end
global function gtk_icon_view_get_column_spacing(icon_view: *GtkIconView): cint <cimport,nodecl> end
global function gtk_icon_view_set_margin(icon_view: *GtkIconView, margin: cint): void <cimport,nodecl> end
global function gtk_icon_view_get_margin(icon_view: *GtkIconView): cint <cimport,nodecl> end
global function gtk_icon_view_set_item_padding(icon_view: *GtkIconView, item_padding: cint): void <cimport,nodecl> end
global function gtk_icon_view_get_item_padding(icon_view: *GtkIconView): cint <cimport,nodecl> end
global function gtk_icon_view_get_path_at_pos(icon_view: *GtkIconView, x: cint, y: cint): *GtkTreePath <cimport,nodecl> end
global function gtk_icon_view_get_item_at_pos(icon_view: *GtkIconView, x: cint, y: cint, path: **GtkTreePath, cell: **GtkCellRenderer): gboolean <cimport,nodecl> end
global function gtk_icon_view_get_visible_range(icon_view: *GtkIconView, start_path: **GtkTreePath, end_path: **GtkTreePath): gboolean <cimport,nodecl> end
global function gtk_icon_view_set_activate_on_single_click(icon_view: *GtkIconView, single: gboolean): void <cimport,nodecl> end
global function gtk_icon_view_get_activate_on_single_click(icon_view: *GtkIconView): gboolean <cimport,nodecl> end
global function gtk_icon_view_selected_foreach(icon_view: *GtkIconView, func: GtkIconViewForeachFunc, data: gpointer): void <cimport,nodecl> end
global function gtk_icon_view_set_selection_mode(icon_view: *GtkIconView, mode: GtkSelectionMode): void <cimport,nodecl> end
global function gtk_icon_view_get_selection_mode(icon_view: *GtkIconView): GtkSelectionMode <cimport,nodecl> end
global function gtk_icon_view_select_path(icon_view: *GtkIconView, path: *GtkTreePath): void <cimport,nodecl> end
global function gtk_icon_view_unselect_path(icon_view: *GtkIconView, path: *GtkTreePath): void <cimport,nodecl> end
global function gtk_icon_view_path_is_selected(icon_view: *GtkIconView, path: *GtkTreePath): gboolean <cimport,nodecl> end
global function gtk_icon_view_get_item_row(icon_view: *GtkIconView, path: *GtkTreePath): cint <cimport,nodecl> end
global function gtk_icon_view_get_item_column(icon_view: *GtkIconView, path: *GtkTreePath): cint <cimport,nodecl> end
global function gtk_icon_view_get_selected_items(icon_view: *GtkIconView): *GList <cimport,nodecl> end
global function gtk_icon_view_select_all(icon_view: *GtkIconView): void <cimport,nodecl> end
global function gtk_icon_view_unselect_all(icon_view: *GtkIconView): void <cimport,nodecl> end
global function gtk_icon_view_item_activated(icon_view: *GtkIconView, path: *GtkTreePath): void <cimport,nodecl> end
global function gtk_icon_view_set_cursor(icon_view: *GtkIconView, path: *GtkTreePath, cell: *GtkCellRenderer, start_editing: gboolean): void <cimport,nodecl> end
global function gtk_icon_view_get_cursor(icon_view: *GtkIconView, path: **GtkTreePath, cell: **GtkCellRenderer): gboolean <cimport,nodecl> end
global function gtk_icon_view_scroll_to_path(icon_view: *GtkIconView, path: *GtkTreePath, use_align: gboolean, row_align: float32, col_align: float32): void <cimport,nodecl> end
global function gtk_icon_view_enable_model_drag_source(icon_view: *GtkIconView, start_button_mask: GdkModifierType, formats: *GdkContentFormats, actions: GdkDragAction): void <cimport,nodecl> end
global function gtk_icon_view_enable_model_drag_dest(icon_view: *GtkIconView, formats: *GdkContentFormats, actions: GdkDragAction): void <cimport,nodecl> end
global function gtk_icon_view_unset_model_drag_source(icon_view: *GtkIconView): void <cimport,nodecl> end
global function gtk_icon_view_unset_model_drag_dest(icon_view: *GtkIconView): void <cimport,nodecl> end
global function gtk_icon_view_set_reorderable(icon_view: *GtkIconView, reorderable: gboolean): void <cimport,nodecl> end
global function gtk_icon_view_get_reorderable(icon_view: *GtkIconView): gboolean <cimport,nodecl> end
global function gtk_icon_view_set_drag_dest_item(icon_view: *GtkIconView, path: *GtkTreePath, pos: GtkIconViewDropPosition): void <cimport,nodecl> end
global function gtk_icon_view_get_drag_dest_item(icon_view: *GtkIconView, path: **GtkTreePath, pos: *GtkIconViewDropPosition): void <cimport,nodecl> end
global function gtk_icon_view_get_dest_item_at_pos(icon_view: *GtkIconView, drag_x: cint, drag_y: cint, path: **GtkTreePath, pos: *GtkIconViewDropPosition): gboolean <cimport,nodecl> end
global function gtk_icon_view_create_drag_icon(icon_view: *GtkIconView, path: *GtkTreePath): *GdkPaintable <cimport,nodecl> end
global function gtk_icon_view_get_cell_rect(icon_view: *GtkIconView, path: *GtkTreePath, cell: *GtkCellRenderer, rect: *GdkRectangle): gboolean <cimport,nodecl> end
global function gtk_icon_view_set_tooltip_item(icon_view: *GtkIconView, tooltip: *GtkTooltip, path: *GtkTreePath): void <cimport,nodecl> end
global function gtk_icon_view_set_tooltip_cell(icon_view: *GtkIconView, tooltip: *GtkTooltip, path: *GtkTreePath, cell: *GtkCellRenderer): void <cimport,nodecl> end
global function gtk_icon_view_get_tooltip_context(icon_view: *GtkIconView, x: cint, y: cint, keyboard_tip: gboolean, model: **GtkTreeModel, path: **GtkTreePath, iter: *GtkTreeIter): gboolean <cimport,nodecl> end
global function gtk_icon_view_set_tooltip_column(icon_view: *GtkIconView, column: cint): void <cimport,nodecl> end
global function gtk_icon_view_get_tooltip_column(icon_view: *GtkIconView): cint <cimport,nodecl> end
global function gtk_im_context_simple_get_type(): GType <cimport,nodecl> end
global function gtk_im_context_simple_new(): *GtkIMContext <cimport,nodecl> end
global function gtk_im_context_simple_add_table(context_simple: *GtkIMContextSimple, data: *guint16, max_seq_len: cint, n_seqs: cint): void <cimport,nodecl> end
global function gtk_im_context_simple_add_compose_file(context_simple: *GtkIMContextSimple, compose_file: cstring): void <cimport,nodecl> end
global function gtk_im_multicontext_get_type(): GType <cimport,nodecl> end
global function gtk_im_multicontext_new(): *GtkIMContext <cimport,nodecl> end
global function gtk_im_multicontext_get_context_id(context: *GtkIMMulticontext): cstring <cimport,nodecl> end
global function gtk_im_multicontext_set_context_id(context: *GtkIMMulticontext, context_id: cstring): void <cimport,nodecl> end
global function gtk_info_bar_get_type(): GType <cimport,nodecl> end
global function gtk_info_bar_new(): *GtkWidget <cimport,nodecl> end
global function gtk_info_bar_new_with_buttons(first_button_text: cstring, ...: cvarargs): *GtkWidget <cimport,nodecl> end
global function gtk_info_bar_add_action_widget(info_bar: *GtkInfoBar, child: *GtkWidget, response_id: cint): void <cimport,nodecl> end
global function gtk_info_bar_remove_action_widget(info_bar: *GtkInfoBar, widget: *GtkWidget): void <cimport,nodecl> end
global function gtk_info_bar_add_button(info_bar: *GtkInfoBar, button_text: cstring, response_id: cint): *GtkWidget <cimport,nodecl> end
global function gtk_info_bar_add_buttons(info_bar: *GtkInfoBar, first_button_text: cstring, ...: cvarargs): void <cimport,nodecl> end
global function gtk_info_bar_add_child(info_bar: *GtkInfoBar, widget: *GtkWidget): void <cimport,nodecl> end
global function gtk_info_bar_remove_child(info_bar: *GtkInfoBar, widget: *GtkWidget): void <cimport,nodecl> end
global function gtk_info_bar_set_response_sensitive(info_bar: *GtkInfoBar, response_id: cint, setting: gboolean): void <cimport,nodecl> end
global function gtk_info_bar_set_default_response(info_bar: *GtkInfoBar, response_id: cint): void <cimport,nodecl> end
global function gtk_info_bar_response(info_bar: *GtkInfoBar, response_id: cint): void <cimport,nodecl> end
global function gtk_info_bar_set_message_type(info_bar: *GtkInfoBar, message_type: GtkMessageType): void <cimport,nodecl> end
global function gtk_info_bar_get_message_type(info_bar: *GtkInfoBar): GtkMessageType <cimport,nodecl> end
global function gtk_info_bar_set_show_close_button(info_bar: *GtkInfoBar, setting: gboolean): void <cimport,nodecl> end
global function gtk_info_bar_get_show_close_button(info_bar: *GtkInfoBar): gboolean <cimport,nodecl> end
global function gtk_info_bar_set_revealed(info_bar: *GtkInfoBar, revealed: gboolean): void <cimport,nodecl> end
global function gtk_info_bar_get_revealed(info_bar: *GtkInfoBar): gboolean <cimport,nodecl> end
global function gtk_label_get_type(): GType <cimport,nodecl> end
global function gtk_label_new(str: cstring): *GtkWidget <cimport,nodecl> end
global function gtk_label_new_with_mnemonic(str: cstring): *GtkWidget <cimport,nodecl> end
global function gtk_label_set_text(self: *GtkLabel, str: cstring): void <cimport,nodecl> end
global function gtk_label_get_text(self: *GtkLabel): cstring <cimport,nodecl> end
global function gtk_label_set_attributes(self: *GtkLabel, attrs: *PangoAttrList): void <cimport,nodecl> end
global function gtk_label_get_attributes(self: *GtkLabel): *PangoAttrList <cimport,nodecl> end
global function gtk_label_set_label(self: *GtkLabel, str: cstring): void <cimport,nodecl> end
global function gtk_label_get_label(self: *GtkLabel): cstring <cimport,nodecl> end
global function gtk_label_set_markup(self: *GtkLabel, str: cstring): void <cimport,nodecl> end
global function gtk_label_set_use_markup(self: *GtkLabel, setting: gboolean): void <cimport,nodecl> end
global function gtk_label_get_use_markup(self: *GtkLabel): gboolean <cimport,nodecl> end
global function gtk_label_set_use_underline(self: *GtkLabel, setting: gboolean): void <cimport,nodecl> end
global function gtk_label_get_use_underline(self: *GtkLabel): gboolean <cimport,nodecl> end
global function gtk_label_set_markup_with_mnemonic(self: *GtkLabel, str: cstring): void <cimport,nodecl> end
global function gtk_label_get_mnemonic_keyval(self: *GtkLabel): guint <cimport,nodecl> end
global function gtk_label_set_mnemonic_widget(self: *GtkLabel, widget: *GtkWidget): void <cimport,nodecl> end
global function gtk_label_get_mnemonic_widget(self: *GtkLabel): *GtkWidget <cimport,nodecl> end
global function gtk_label_set_text_with_mnemonic(self: *GtkLabel, str: cstring): void <cimport,nodecl> end
global function gtk_label_set_justify(self: *GtkLabel, jtype: GtkJustification): void <cimport,nodecl> end
global function gtk_label_get_justify(self: *GtkLabel): GtkJustification <cimport,nodecl> end
global function gtk_label_set_ellipsize(self: *GtkLabel, mode: PangoEllipsizeMode): void <cimport,nodecl> end
global function gtk_label_get_ellipsize(self: *GtkLabel): PangoEllipsizeMode <cimport,nodecl> end
global function gtk_label_set_width_chars(self: *GtkLabel, n_chars: cint): void <cimport,nodecl> end
global function gtk_label_get_width_chars(self: *GtkLabel): cint <cimport,nodecl> end
global function gtk_label_set_max_width_chars(self: *GtkLabel, n_chars: cint): void <cimport,nodecl> end
global function gtk_label_get_max_width_chars(self: *GtkLabel): cint <cimport,nodecl> end
global function gtk_label_set_lines(self: *GtkLabel, lines: cint): void <cimport,nodecl> end
global function gtk_label_get_lines(self: *GtkLabel): cint <cimport,nodecl> end
global function gtk_label_set_wrap(self: *GtkLabel, wrap: gboolean): void <cimport,nodecl> end
global function gtk_label_get_wrap(self: *GtkLabel): gboolean <cimport,nodecl> end
global function gtk_label_set_wrap_mode(self: *GtkLabel, wrap_mode: PangoWrapMode): void <cimport,nodecl> end
global function gtk_label_get_wrap_mode(self: *GtkLabel): PangoWrapMode <cimport,nodecl> end
global function gtk_label_set_natural_wrap_mode(self: *GtkLabel, wrap_mode: GtkNaturalWrapMode): void <cimport,nodecl> end
global function gtk_label_get_natural_wrap_mode(self: *GtkLabel): GtkNaturalWrapMode <cimport,nodecl> end
global function gtk_label_set_selectable(self: *GtkLabel, setting: gboolean): void <cimport,nodecl> end
global function gtk_label_get_selectable(self: *GtkLabel): gboolean <cimport,nodecl> end
global function gtk_label_select_region(self: *GtkLabel, start_offset: cint, end_offset: cint): void <cimport,nodecl> end
global function gtk_label_get_selection_bounds(self: *GtkLabel, start: *cint, end_: *cint): gboolean <cimport,nodecl> end
global function gtk_label_get_layout(self: *GtkLabel): *PangoLayout <cimport,nodecl> end
global function gtk_label_get_layout_offsets(self: *GtkLabel, x: *cint, y: *cint): void <cimport,nodecl> end
global function gtk_label_set_single_line_mode(self: *GtkLabel, single_line_mode: gboolean): void <cimport,nodecl> end
global function gtk_label_get_single_line_mode(self: *GtkLabel): gboolean <cimport,nodecl> end
global function gtk_label_get_current_uri(self: *GtkLabel): cstring <cimport,nodecl> end
global function gtk_label_set_xalign(self: *GtkLabel, xalign: float32): void <cimport,nodecl> end
global function gtk_label_get_xalign(self: *GtkLabel): float32 <cimport,nodecl> end
global function gtk_label_set_yalign(self: *GtkLabel, yalign: float32): void <cimport,nodecl> end
global function gtk_label_get_yalign(self: *GtkLabel): float32 <cimport,nodecl> end
global function gtk_label_set_extra_menu(self: *GtkLabel, model: *GMenuModel): void <cimport,nodecl> end
global function gtk_label_get_extra_menu(self: *GtkLabel): *GMenuModel <cimport,nodecl> end
global function glib_autoptr_clear_GtkLabel(_ptr: *GtkLabel): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GtkLabel(_ptr: **GtkLabel): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GtkLabel(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GtkLabel(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GtkLabel(_q: **GQueue): void <cimport,nodecl> end
global function gtk_level_bar_get_type(): GType <cimport,nodecl> end
global function gtk_level_bar_new(): *GtkWidget <cimport,nodecl> end
global function gtk_level_bar_new_for_interval(min_value: float64, max_value: float64): *GtkWidget <cimport,nodecl> end
global function gtk_level_bar_set_mode(self: *GtkLevelBar, mode: GtkLevelBarMode): void <cimport,nodecl> end
global function gtk_level_bar_get_mode(self: *GtkLevelBar): GtkLevelBarMode <cimport,nodecl> end
global function gtk_level_bar_set_value(self: *GtkLevelBar, value: float64): void <cimport,nodecl> end
global function gtk_level_bar_get_value(self: *GtkLevelBar): float64 <cimport,nodecl> end
global function gtk_level_bar_set_min_value(self: *GtkLevelBar, value: float64): void <cimport,nodecl> end
global function gtk_level_bar_get_min_value(self: *GtkLevelBar): float64 <cimport,nodecl> end
global function gtk_level_bar_set_max_value(self: *GtkLevelBar, value: float64): void <cimport,nodecl> end
global function gtk_level_bar_get_max_value(self: *GtkLevelBar): float64 <cimport,nodecl> end
global function gtk_level_bar_set_inverted(self: *GtkLevelBar, inverted: gboolean): void <cimport,nodecl> end
global function gtk_level_bar_get_inverted(self: *GtkLevelBar): gboolean <cimport,nodecl> end
global function gtk_level_bar_add_offset_value(self: *GtkLevelBar, name: cstring, value: float64): void <cimport,nodecl> end
global function gtk_level_bar_remove_offset_value(self: *GtkLevelBar, name: cstring): void <cimport,nodecl> end
global function gtk_level_bar_get_offset_value(self: *GtkLevelBar, name: cstring, value: *float64): gboolean <cimport,nodecl> end
global function gtk_link_button_get_type(): GType <cimport,nodecl> end
global function gtk_link_button_new(uri: cstring): *GtkWidget <cimport,nodecl> end
global function gtk_link_button_new_with_label(uri: cstring, label: cstring): *GtkWidget <cimport,nodecl> end
global function gtk_link_button_get_uri(link_button: *GtkLinkButton): cstring <cimport,nodecl> end
global function gtk_link_button_set_uri(link_button: *GtkLinkButton, uri: cstring): void <cimport,nodecl> end
global function gtk_link_button_get_visited(link_button: *GtkLinkButton): gboolean <cimport,nodecl> end
global function gtk_link_button_set_visited(link_button: *GtkLinkButton, visited: gboolean): void <cimport,nodecl> end
global function gtk_list_box_row_get_type(): GType <cimport,nodecl> end
global function gtk_list_box_row_new(): *GtkWidget <cimport,nodecl> end
global function gtk_list_box_row_set_child(row: *GtkListBoxRow, child: *GtkWidget): void <cimport,nodecl> end
global function gtk_list_box_row_get_child(row: *GtkListBoxRow): *GtkWidget <cimport,nodecl> end
global function gtk_list_box_row_get_header(row: *GtkListBoxRow): *GtkWidget <cimport,nodecl> end
global function gtk_list_box_row_set_header(row: *GtkListBoxRow, header: *GtkWidget): void <cimport,nodecl> end
global function gtk_list_box_row_get_index(row: *GtkListBoxRow): cint <cimport,nodecl> end
global function gtk_list_box_row_changed(row: *GtkListBoxRow): void <cimport,nodecl> end
global function gtk_list_box_row_is_selected(row: *GtkListBoxRow): gboolean <cimport,nodecl> end
global function gtk_list_box_row_set_selectable(row: *GtkListBoxRow, selectable: gboolean): void <cimport,nodecl> end
global function gtk_list_box_row_get_selectable(row: *GtkListBoxRow): gboolean <cimport,nodecl> end
global function gtk_list_box_row_set_activatable(row: *GtkListBoxRow, activatable: gboolean): void <cimport,nodecl> end
global function gtk_list_box_row_get_activatable(row: *GtkListBoxRow): gboolean <cimport,nodecl> end
global function gtk_list_box_get_type(): GType <cimport,nodecl> end
global function gtk_list_box_prepend(box: *GtkListBox, child: *GtkWidget): void <cimport,nodecl> end
global function gtk_list_box_append(box: *GtkListBox, child: *GtkWidget): void <cimport,nodecl> end
global function gtk_list_box_insert(box: *GtkListBox, child: *GtkWidget, position: cint): void <cimport,nodecl> end
global function gtk_list_box_remove(box: *GtkListBox, child: *GtkWidget): void <cimport,nodecl> end
global function gtk_list_box_get_selected_row(box: *GtkListBox): *GtkListBoxRow <cimport,nodecl> end
global function gtk_list_box_get_row_at_index(box: *GtkListBox, index_: cint): *GtkListBoxRow <cimport,nodecl> end
global function gtk_list_box_get_row_at_y(box: *GtkListBox, y: cint): *GtkListBoxRow <cimport,nodecl> end
global function gtk_list_box_select_row(box: *GtkListBox, row: *GtkListBoxRow): void <cimport,nodecl> end
global function gtk_list_box_set_placeholder(box: *GtkListBox, placeholder: *GtkWidget): void <cimport,nodecl> end
global function gtk_list_box_set_adjustment(box: *GtkListBox, adjustment: *GtkAdjustment): void <cimport,nodecl> end
global function gtk_list_box_get_adjustment(box: *GtkListBox): *GtkAdjustment <cimport,nodecl> end
global function gtk_list_box_selected_foreach(box: *GtkListBox, func: GtkListBoxForeachFunc, data: gpointer): void <cimport,nodecl> end
global function gtk_list_box_get_selected_rows(box: *GtkListBox): *GList <cimport,nodecl> end
global function gtk_list_box_unselect_row(box: *GtkListBox, row: *GtkListBoxRow): void <cimport,nodecl> end
global function gtk_list_box_select_all(box: *GtkListBox): void <cimport,nodecl> end
global function gtk_list_box_unselect_all(box: *GtkListBox): void <cimport,nodecl> end
global function gtk_list_box_set_selection_mode(box: *GtkListBox, mode: GtkSelectionMode): void <cimport,nodecl> end
global function gtk_list_box_get_selection_mode(box: *GtkListBox): GtkSelectionMode <cimport,nodecl> end
global function gtk_list_box_set_filter_func(box: *GtkListBox, filter_func: GtkListBoxFilterFunc, user_data: gpointer, destroy: GDestroyNotify): void <cimport,nodecl> end
global function gtk_list_box_set_header_func(box: *GtkListBox, update_header: GtkListBoxUpdateHeaderFunc, user_data: gpointer, destroy: GDestroyNotify): void <cimport,nodecl> end
global function gtk_list_box_invalidate_filter(box: *GtkListBox): void <cimport,nodecl> end
global function gtk_list_box_invalidate_sort(box: *GtkListBox): void <cimport,nodecl> end
global function gtk_list_box_invalidate_headers(box: *GtkListBox): void <cimport,nodecl> end
global function gtk_list_box_set_sort_func(box: *GtkListBox, sort_func: GtkListBoxSortFunc, user_data: gpointer, destroy: GDestroyNotify): void <cimport,nodecl> end
global function gtk_list_box_set_activate_on_single_click(box: *GtkListBox, single: gboolean): void <cimport,nodecl> end
global function gtk_list_box_get_activate_on_single_click(box: *GtkListBox): gboolean <cimport,nodecl> end
global function gtk_list_box_drag_unhighlight_row(box: *GtkListBox): void <cimport,nodecl> end
global function gtk_list_box_drag_highlight_row(box: *GtkListBox, row: *GtkListBoxRow): void <cimport,nodecl> end
global function gtk_list_box_new(): *GtkWidget <cimport,nodecl> end
global function gtk_list_box_bind_model(box: *GtkListBox, model: *GListModel, create_widget_func: GtkListBoxCreateWidgetFunc, user_data: gpointer, user_data_free_func: GDestroyNotify): void <cimport,nodecl> end
global function gtk_list_box_set_show_separators(box: *GtkListBox, show_separators: gboolean): void <cimport,nodecl> end
global function gtk_list_box_get_show_separators(box: *GtkListBox): gboolean <cimport,nodecl> end
global function glib_autoptr_clear_GtkListBox(_ptr: *GtkListBox): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GtkListBox(_ptr: **GtkListBox): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GtkListBox(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GtkListBox(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GtkListBox(_q: **GQueue): void <cimport,nodecl> end
global function glib_autoptr_clear_GtkListBoxRow(_ptr: *GtkListBoxRow): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GtkListBoxRow(_ptr: **GtkListBoxRow): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GtkListBoxRow(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GtkListBoxRow(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GtkListBoxRow(_q: **GQueue): void <cimport,nodecl> end
global function gtk_list_item_get_type(): GType <cimport,nodecl> end
global function gtk_list_item_get_item(self: *GtkListItem): gpointer <cimport,nodecl> end
global function gtk_list_item_get_position(self: *GtkListItem): guint <cimport,nodecl> end
global function gtk_list_item_get_selected(self: *GtkListItem): gboolean <cimport,nodecl> end
global function gtk_list_item_get_selectable(self: *GtkListItem): gboolean <cimport,nodecl> end
global function gtk_list_item_set_selectable(self: *GtkListItem, selectable: gboolean): void <cimport,nodecl> end
global function gtk_list_item_get_activatable(self: *GtkListItem): gboolean <cimport,nodecl> end
global function gtk_list_item_set_activatable(self: *GtkListItem, activatable: gboolean): void <cimport,nodecl> end
global function gtk_list_item_set_child(self: *GtkListItem, child: *GtkWidget): void <cimport,nodecl> end
global function gtk_list_item_get_child(self: *GtkListItem): *GtkWidget <cimport,nodecl> end
global function gtk_list_view_get_type(): GType <cimport,nodecl> end
global function gtk_list_view_new(model: *GtkSelectionModel, factory: *GtkListItemFactory): *GtkWidget <cimport,nodecl> end
global function gtk_list_view_get_model(self: *GtkListView): *GtkSelectionModel <cimport,nodecl> end
global function gtk_list_view_set_model(self: *GtkListView, model: *GtkSelectionModel): void <cimport,nodecl> end
global function gtk_list_view_set_factory(self: *GtkListView, factory: *GtkListItemFactory): void <cimport,nodecl> end
global function gtk_list_view_get_factory(self: *GtkListView): *GtkListItemFactory <cimport,nodecl> end
global function gtk_list_view_set_show_separators(self: *GtkListView, show_separators: gboolean): void <cimport,nodecl> end
global function gtk_list_view_get_show_separators(self: *GtkListView): gboolean <cimport,nodecl> end
global function gtk_list_view_set_single_click_activate(self: *GtkListView, single_click_activate: gboolean): void <cimport,nodecl> end
global function gtk_list_view_get_single_click_activate(self: *GtkListView): gboolean <cimport,nodecl> end
global function gtk_list_view_set_enable_rubberband(self: *GtkListView, enable_rubberband: gboolean): void <cimport,nodecl> end
global function gtk_list_view_get_enable_rubberband(self: *GtkListView): gboolean <cimport,nodecl> end
global function glib_autoptr_clear_GtkListView(_ptr: *GtkListView): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GtkListView(_ptr: **GtkListView): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GtkListView(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GtkListView(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GtkListView(_q: **GQueue): void <cimport,nodecl> end
global function gtk_lock_button_get_type(): GType <cimport,nodecl> end
global function gtk_lock_button_new(permission: *GPermission): *GtkWidget <cimport,nodecl> end
global function gtk_lock_button_get_permission(button: *GtkLockButton): *GPermission <cimport,nodecl> end
global function gtk_lock_button_set_permission(button: *GtkLockButton, permission: *GPermission): void <cimport,nodecl> end
global function gtk_init(): void <cimport,nodecl> end
global function gtk_init_check(): gboolean <cimport,nodecl> end
global function gtk_is_initialized(): gboolean <cimport,nodecl> end
global function gtk_disable_setlocale(): void <cimport,nodecl> end
global function gtk_get_default_language(): *PangoLanguage <cimport,nodecl> end
global function gtk_get_locale_direction(): GtkTextDirection <cimport,nodecl> end
global function gtk_map_list_model_get_type(): GType <cimport,nodecl> end
global function glib_autoptr_clear_GtkMapListModel(_ptr: *GtkMapListModel): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GtkMapListModel(_ptr: **GtkMapListModel): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GtkMapListModel(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GtkMapListModel(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GtkMapListModel(_q: **GQueue): void <cimport,nodecl> end
global function glib_autoptr_clear_GtkMapListModelClass(_ptr: *GtkMapListModelClass): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GtkMapListModelClass(_ptr: **GtkMapListModelClass): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GtkMapListModelClass(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GtkMapListModelClass(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GtkMapListModelClass(_q: **GQueue): void <cimport,nodecl> end
global function GTK_MAP_LIST_MODEL(ptr: gpointer): *GtkMapListModel <cimport,nodecl> end
global function GTK_IS_MAP_LIST_MODEL(ptr: gpointer): gboolean <cimport,nodecl> end
global function gtk_map_list_model_new(model: *GListModel, map_func: GtkMapListModelMapFunc, user_data: gpointer, user_destroy: GDestroyNotify): *GtkMapListModel <cimport,nodecl> end
global function gtk_map_list_model_set_map_func(self: *GtkMapListModel, map_func: GtkMapListModelMapFunc, user_data: gpointer, user_destroy: GDestroyNotify): void <cimport,nodecl> end
global function gtk_map_list_model_set_model(self: *GtkMapListModel, model: *GListModel): void <cimport,nodecl> end
global function gtk_map_list_model_get_model(self: *GtkMapListModel): *GListModel <cimport,nodecl> end
global function gtk_map_list_model_has_map(self: *GtkMapListModel): gboolean <cimport,nodecl> end
global function gtk_media_stream_get_type(): GType <cimport,nodecl> end
global function glib_autoptr_clear_GtkMediaStream(_ptr: *GtkMediaStream): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GtkMediaStream(_ptr: **GtkMediaStream): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GtkMediaStream(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GtkMediaStream(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GtkMediaStream(_q: **GQueue): void <cimport,nodecl> end
global function glib_autoptr_clear_GtkMediaStreamClass(_ptr: *GtkMediaStreamClass): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GtkMediaStreamClass(_ptr: **GtkMediaStreamClass): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GtkMediaStreamClass(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GtkMediaStreamClass(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GtkMediaStreamClass(_q: **GQueue): void <cimport,nodecl> end
global function GTK_MEDIA_STREAM(ptr: gpointer): *GtkMediaStream <cimport,nodecl> end
global function GTK_MEDIA_STREAM_CLASS(ptr: gpointer): *GtkMediaStreamClass <cimport,nodecl> end
global function GTK_IS_MEDIA_STREAM(ptr: gpointer): gboolean <cimport,nodecl> end
global function GTK_IS_MEDIA_STREAM_CLASS(ptr: gpointer): gboolean <cimport,nodecl> end
global function GTK_MEDIA_STREAM_GET_CLASS(ptr: gpointer): *GtkMediaStreamClass <cimport,nodecl> end
global function gtk_media_stream_is_prepared(self: *GtkMediaStream): gboolean <cimport,nodecl> end
global function gtk_media_stream_get_error(self: *GtkMediaStream): *GError <cimport,nodecl> end
global function gtk_media_stream_has_audio(self: *GtkMediaStream): gboolean <cimport,nodecl> end
global function gtk_media_stream_has_video(self: *GtkMediaStream): gboolean <cimport,nodecl> end
global function gtk_media_stream_play(self: *GtkMediaStream): void <cimport,nodecl> end
global function gtk_media_stream_pause(self: *GtkMediaStream): void <cimport,nodecl> end
global function gtk_media_stream_get_playing(self: *GtkMediaStream): gboolean <cimport,nodecl> end
global function gtk_media_stream_set_playing(self: *GtkMediaStream, playing: gboolean): void <cimport,nodecl> end
global function gtk_media_stream_get_ended(self: *GtkMediaStream): gboolean <cimport,nodecl> end
global function gtk_media_stream_get_timestamp(self: *GtkMediaStream): gint64 <cimport,nodecl> end
global function gtk_media_stream_get_duration(self: *GtkMediaStream): gint64 <cimport,nodecl> end
global function gtk_media_stream_is_seekable(self: *GtkMediaStream): gboolean <cimport,nodecl> end
global function gtk_media_stream_is_seeking(self: *GtkMediaStream): gboolean <cimport,nodecl> end
global function gtk_media_stream_seek(self: *GtkMediaStream, timestamp: gint64): void <cimport,nodecl> end
global function gtk_media_stream_get_loop(self: *GtkMediaStream): gboolean <cimport,nodecl> end
global function gtk_media_stream_set_loop(self: *GtkMediaStream, loop: gboolean): void <cimport,nodecl> end
global function gtk_media_stream_get_muted(self: *GtkMediaStream): gboolean <cimport,nodecl> end
global function gtk_media_stream_set_muted(self: *GtkMediaStream, muted: gboolean): void <cimport,nodecl> end
global function gtk_media_stream_get_volume(self: *GtkMediaStream): float64 <cimport,nodecl> end
global function gtk_media_stream_set_volume(self: *GtkMediaStream, volume: float64): void <cimport,nodecl> end
global function gtk_media_stream_realize(self: *GtkMediaStream, surface: *GdkSurface): void <cimport,nodecl> end
global function gtk_media_stream_unrealize(self: *GtkMediaStream, surface: *GdkSurface): void <cimport,nodecl> end
global function gtk_media_stream_prepared(self: *GtkMediaStream, has_audio: gboolean, has_video: gboolean, seekable: gboolean, duration: gint64): void <cimport,nodecl> end
global function gtk_media_stream_unprepared(self: *GtkMediaStream): void <cimport,nodecl> end
global function gtk_media_stream_stream_prepared(self: *GtkMediaStream, has_audio: gboolean, has_video: gboolean, seekable: gboolean, duration: gint64): void <cimport,nodecl> end
global function gtk_media_stream_stream_unprepared(self: *GtkMediaStream): void <cimport,nodecl> end
global function gtk_media_stream_update(self: *GtkMediaStream, timestamp: gint64): void <cimport,nodecl> end
global function gtk_media_stream_ended(self: *GtkMediaStream): void <cimport,nodecl> end
global function gtk_media_stream_stream_ended(self: *GtkMediaStream): void <cimport,nodecl> end
global function gtk_media_stream_seek_success(self: *GtkMediaStream): void <cimport,nodecl> end
global function gtk_media_stream_seek_failed(self: *GtkMediaStream): void <cimport,nodecl> end
global function gtk_media_stream_gerror(self: *GtkMediaStream, error: *GError): void <cimport,nodecl> end
global function gtk_media_stream_error(self: *GtkMediaStream, domain: GQuark, code: cint, format: cstring, ...: cvarargs): void <cimport,nodecl> end
global function gtk_media_stream_error_valist(self: *GtkMediaStream, domain: GQuark, code: cint, format: cstring, args: cvalist): void <cimport,nodecl> end
global function gtk_media_controls_get_type(): GType <cimport,nodecl> end
global function glib_autoptr_clear_GtkMediaControls(_ptr: *GtkMediaControls): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GtkMediaControls(_ptr: **GtkMediaControls): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GtkMediaControls(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GtkMediaControls(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GtkMediaControls(_q: **GQueue): void <cimport,nodecl> end
global function glib_autoptr_clear_GtkMediaControlsClass(_ptr: *GtkMediaControlsClass): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GtkMediaControlsClass(_ptr: **GtkMediaControlsClass): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GtkMediaControlsClass(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GtkMediaControlsClass(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GtkMediaControlsClass(_q: **GQueue): void <cimport,nodecl> end
global function GTK_MEDIA_CONTROLS(ptr: gpointer): *GtkMediaControls <cimport,nodecl> end
global function GTK_IS_MEDIA_CONTROLS(ptr: gpointer): gboolean <cimport,nodecl> end
global function gtk_media_controls_new(stream: *GtkMediaStream): *GtkWidget <cimport,nodecl> end
global function gtk_media_controls_get_media_stream(controls: *GtkMediaControls): *GtkMediaStream <cimport,nodecl> end
global function gtk_media_controls_set_media_stream(controls: *GtkMediaControls, stream: *GtkMediaStream): void <cimport,nodecl> end
global function gtk_media_file_get_type(): GType <cimport,nodecl> end
global function glib_autoptr_clear_GtkMediaFile(_ptr: *GtkMediaFile): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GtkMediaFile(_ptr: **GtkMediaFile): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GtkMediaFile(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GtkMediaFile(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GtkMediaFile(_q: **GQueue): void <cimport,nodecl> end
global function glib_autoptr_clear_GtkMediaFileClass(_ptr: *GtkMediaFileClass): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GtkMediaFileClass(_ptr: **GtkMediaFileClass): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GtkMediaFileClass(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GtkMediaFileClass(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GtkMediaFileClass(_q: **GQueue): void <cimport,nodecl> end
global function GTK_MEDIA_FILE(ptr: gpointer): *GtkMediaFile <cimport,nodecl> end
global function GTK_MEDIA_FILE_CLASS(ptr: gpointer): *GtkMediaFileClass <cimport,nodecl> end
global function GTK_IS_MEDIA_FILE(ptr: gpointer): gboolean <cimport,nodecl> end
global function GTK_IS_MEDIA_FILE_CLASS(ptr: gpointer): gboolean <cimport,nodecl> end
global function GTK_MEDIA_FILE_GET_CLASS(ptr: gpointer): *GtkMediaFileClass <cimport,nodecl> end
global function gtk_media_file_new(): *GtkMediaStream <cimport,nodecl> end
global function gtk_media_file_new_for_filename(filename: cstring): *GtkMediaStream <cimport,nodecl> end
global function gtk_media_file_new_for_resource(resource_path: cstring): *GtkMediaStream <cimport,nodecl> end
global function gtk_media_file_new_for_file(file: *GFile): *GtkMediaStream <cimport,nodecl> end
global function gtk_media_file_new_for_input_stream(stream: *GInputStream): *GtkMediaStream <cimport,nodecl> end
global function gtk_media_file_clear(self: *GtkMediaFile): void <cimport,nodecl> end
global function gtk_media_file_set_filename(self: *GtkMediaFile, filename: cstring): void <cimport,nodecl> end
global function gtk_media_file_set_resource(self: *GtkMediaFile, resource_path: cstring): void <cimport,nodecl> end
global function gtk_media_file_set_file(self: *GtkMediaFile, file: *GFile): void <cimport,nodecl> end
global function gtk_media_file_get_file(self: *GtkMediaFile): *GFile <cimport,nodecl> end
global function gtk_media_file_set_input_stream(self: *GtkMediaFile, stream: *GInputStream): void <cimport,nodecl> end
global function gtk_media_file_get_input_stream(self: *GtkMediaFile): *GInputStream <cimport,nodecl> end
global function gtk_popover_get_type(): GType <cimport,nodecl> end
global function gtk_popover_new(): *GtkWidget <cimport,nodecl> end
global function gtk_popover_set_child(popover: *GtkPopover, child: *GtkWidget): void <cimport,nodecl> end
global function gtk_popover_get_child(popover: *GtkPopover): *GtkWidget <cimport,nodecl> end
global function gtk_popover_set_pointing_to(popover: *GtkPopover, rect: *GdkRectangle): void <cimport,nodecl> end
global function gtk_popover_get_pointing_to(popover: *GtkPopover, rect: *GdkRectangle): gboolean <cimport,nodecl> end
global function gtk_popover_set_position(popover: *GtkPopover, position: GtkPositionType): void <cimport,nodecl> end
global function gtk_popover_get_position(popover: *GtkPopover): GtkPositionType <cimport,nodecl> end
global function gtk_popover_set_autohide(popover: *GtkPopover, autohide: gboolean): void <cimport,nodecl> end
global function gtk_popover_get_autohide(popover: *GtkPopover): gboolean <cimport,nodecl> end
global function gtk_popover_set_has_arrow(popover: *GtkPopover, has_arrow: gboolean): void <cimport,nodecl> end
global function gtk_popover_get_has_arrow(popover: *GtkPopover): gboolean <cimport,nodecl> end
global function gtk_popover_set_mnemonics_visible(popover: *GtkPopover, mnemonics_visible: gboolean): void <cimport,nodecl> end
global function gtk_popover_get_mnemonics_visible(popover: *GtkPopover): gboolean <cimport,nodecl> end
global function gtk_popover_popup(popover: *GtkPopover): void <cimport,nodecl> end
global function gtk_popover_popdown(popover: *GtkPopover): void <cimport,nodecl> end
global function gtk_popover_set_offset(popover: *GtkPopover, x_offset: cint, y_offset: cint): void <cimport,nodecl> end
global function gtk_popover_get_offset(popover: *GtkPopover, x_offset: *cint, y_offset: *cint): void <cimport,nodecl> end
global function gtk_popover_set_cascade_popdown(popover: *GtkPopover, cascade_popdown: gboolean): void <cimport,nodecl> end
global function gtk_popover_get_cascade_popdown(popover: *GtkPopover): gboolean <cimport,nodecl> end
global function gtk_popover_set_default_widget(popover: *GtkPopover, widget: *GtkWidget): void <cimport,nodecl> end
global function gtk_popover_present(popover: *GtkPopover): void <cimport,nodecl> end
global function gtk_menu_button_get_type(): GType <cimport,nodecl> end
global function gtk_menu_button_new(): *GtkWidget <cimport,nodecl> end
global function gtk_menu_button_set_popover(menu_button: *GtkMenuButton, popover: *GtkWidget): void <cimport,nodecl> end
global function gtk_menu_button_get_popover(menu_button: *GtkMenuButton): *GtkPopover <cimport,nodecl> end
global function gtk_menu_button_set_direction(menu_button: *GtkMenuButton, direction: GtkArrowType): void <cimport,nodecl> end
global function gtk_menu_button_get_direction(menu_button: *GtkMenuButton): GtkArrowType <cimport,nodecl> end
global function gtk_menu_button_set_menu_model(menu_button: *GtkMenuButton, menu_model: *GMenuModel): void <cimport,nodecl> end
global function gtk_menu_button_get_menu_model(menu_button: *GtkMenuButton): *GMenuModel <cimport,nodecl> end
global function gtk_menu_button_set_icon_name(menu_button: *GtkMenuButton, icon_name: cstring): void <cimport,nodecl> end
global function gtk_menu_button_get_icon_name(menu_button: *GtkMenuButton): cstring <cimport,nodecl> end
global function gtk_menu_button_set_always_show_arrow(menu_button: *GtkMenuButton, always_show_arrow: gboolean): void <cimport,nodecl> end
global function gtk_menu_button_get_always_show_arrow(menu_button: *GtkMenuButton): gboolean <cimport,nodecl> end
global function gtk_menu_button_set_label(menu_button: *GtkMenuButton, label: cstring): void <cimport,nodecl> end
global function gtk_menu_button_get_label(menu_button: *GtkMenuButton): cstring <cimport,nodecl> end
global function gtk_menu_button_set_use_underline(menu_button: *GtkMenuButton, use_underline: gboolean): void <cimport,nodecl> end
global function gtk_menu_button_get_use_underline(menu_button: *GtkMenuButton): gboolean <cimport,nodecl> end
global function gtk_menu_button_set_has_frame(menu_button: *GtkMenuButton, has_frame: gboolean): void <cimport,nodecl> end
global function gtk_menu_button_get_has_frame(menu_button: *GtkMenuButton): gboolean <cimport,nodecl> end
global function gtk_menu_button_popup(menu_button: *GtkMenuButton): void <cimport,nodecl> end
global function gtk_menu_button_popdown(menu_button: *GtkMenuButton): void <cimport,nodecl> end
global function gtk_menu_button_set_create_popup_func(menu_button: *GtkMenuButton, func: GtkMenuButtonCreatePopupFunc, user_data: gpointer, destroy_notify: GDestroyNotify): void <cimport,nodecl> end
global function gtk_menu_button_set_primary(menu_button: *GtkMenuButton, primary: gboolean): void <cimport,nodecl> end
global function gtk_menu_button_get_primary(menu_button: *GtkMenuButton): gboolean <cimport,nodecl> end
global function gtk_menu_button_set_child(menu_button: *GtkMenuButton, child: *GtkWidget): void <cimport,nodecl> end
global function gtk_menu_button_get_child(menu_button: *GtkMenuButton): *GtkWidget <cimport,nodecl> end
global function gtk_message_dialog_get_type(): GType <cimport,nodecl> end
global function gtk_message_dialog_new(parent: *GtkWindow, flags: GtkDialogFlags, type: GtkMessageType, buttons: GtkButtonsType, message_format: cstring, ...: cvarargs): *GtkWidget <cimport,nodecl> end
global function gtk_message_dialog_new_with_markup(parent: *GtkWindow, flags: GtkDialogFlags, type: GtkMessageType, buttons: GtkButtonsType, message_format: cstring, ...: cvarargs): *GtkWidget <cimport,nodecl> end
global function gtk_message_dialog_set_markup(message_dialog: *GtkMessageDialog, str: cstring): void <cimport,nodecl> end
global function gtk_message_dialog_format_secondary_text(message_dialog: *GtkMessageDialog, message_format: cstring, ...: cvarargs): void <cimport,nodecl> end
global function gtk_message_dialog_format_secondary_markup(message_dialog: *GtkMessageDialog, message_format: cstring, ...: cvarargs): void <cimport,nodecl> end
global function gtk_message_dialog_get_message_area(message_dialog: *GtkMessageDialog): *GtkWidget <cimport,nodecl> end
global function gtk_mount_operation_get_type(): GType <cimport,nodecl> end
global function gtk_mount_operation_new(parent: *GtkWindow): *GMountOperation <cimport,nodecl> end
global function gtk_mount_operation_is_showing(op: *GtkMountOperation): gboolean <cimport,nodecl> end
global function gtk_mount_operation_set_parent(op: *GtkMountOperation, parent: *GtkWindow): void <cimport,nodecl> end
global function gtk_mount_operation_get_parent(op: *GtkMountOperation): *GtkWindow <cimport,nodecl> end
global function gtk_mount_operation_set_display(op: *GtkMountOperation, display: *GdkDisplay): void <cimport,nodecl> end
global function gtk_mount_operation_get_display(op: *GtkMountOperation): *GdkDisplay <cimport,nodecl> end
global function gtk_multi_filter_get_type(): GType <cimport,nodecl> end
global function glib_autoptr_clear_GtkMultiFilter(_ptr: *GtkMultiFilter): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GtkMultiFilter(_ptr: **GtkMultiFilter): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GtkMultiFilter(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GtkMultiFilter(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GtkMultiFilter(_q: **GQueue): void <cimport,nodecl> end
global function glib_autoptr_clear_GtkMultiFilterClass(_ptr: *GtkMultiFilterClass): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GtkMultiFilterClass(_ptr: **GtkMultiFilterClass): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GtkMultiFilterClass(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GtkMultiFilterClass(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GtkMultiFilterClass(_q: **GQueue): void <cimport,nodecl> end
global function GTK_MULTI_FILTER(ptr: gpointer): *GtkMultiFilter <cimport,nodecl> end
global function GTK_MULTI_FILTER_CLASS(ptr: gpointer): *GtkMultiFilterClass <cimport,nodecl> end
global function GTK_IS_MULTI_FILTER(ptr: gpointer): gboolean <cimport,nodecl> end
global function GTK_IS_MULTI_FILTER_CLASS(ptr: gpointer): gboolean <cimport,nodecl> end
global function GTK_MULTI_FILTER_GET_CLASS(ptr: gpointer): *GtkMultiFilterClass <cimport,nodecl> end
global function gtk_multi_filter_append(self: *GtkMultiFilter, filter: *GtkFilter): void <cimport,nodecl> end
global function gtk_multi_filter_remove(self: *GtkMultiFilter, position: guint): void <cimport,nodecl> end
global function gtk_any_filter_get_type(): GType <cimport,nodecl> end
global function glib_autoptr_clear_GtkAnyFilter(_ptr: *GtkAnyFilter): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GtkAnyFilter(_ptr: **GtkAnyFilter): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GtkAnyFilter(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GtkAnyFilter(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GtkAnyFilter(_q: **GQueue): void <cimport,nodecl> end
global function glib_autoptr_clear_GtkAnyFilterClass(_ptr: *GtkAnyFilterClass): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GtkAnyFilterClass(_ptr: **GtkAnyFilterClass): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GtkAnyFilterClass(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GtkAnyFilterClass(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GtkAnyFilterClass(_q: **GQueue): void <cimport,nodecl> end
global function GTK_ANY_FILTER(ptr: gpointer): *GtkAnyFilter <cimport,nodecl> end
global function GTK_ANY_FILTER_CLASS(ptr: gpointer): *GtkAnyFilterClass <cimport,nodecl> end
global function GTK_IS_ANY_FILTER(ptr: gpointer): gboolean <cimport,nodecl> end
global function GTK_IS_ANY_FILTER_CLASS(ptr: gpointer): gboolean <cimport,nodecl> end
global function GTK_ANY_FILTER_GET_CLASS(ptr: gpointer): *GtkAnyFilterClass <cimport,nodecl> end
global function gtk_any_filter_new(): *GtkAnyFilter <cimport,nodecl> end
global function gtk_every_filter_get_type(): GType <cimport,nodecl> end
global function glib_autoptr_clear_GtkEveryFilter(_ptr: *GtkEveryFilter): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GtkEveryFilter(_ptr: **GtkEveryFilter): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GtkEveryFilter(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GtkEveryFilter(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GtkEveryFilter(_q: **GQueue): void <cimport,nodecl> end
global function glib_autoptr_clear_GtkEveryFilterClass(_ptr: *GtkEveryFilterClass): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GtkEveryFilterClass(_ptr: **GtkEveryFilterClass): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GtkEveryFilterClass(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GtkEveryFilterClass(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GtkEveryFilterClass(_q: **GQueue): void <cimport,nodecl> end
global function GTK_EVERY_FILTER(ptr: gpointer): *GtkEveryFilter <cimport,nodecl> end
global function GTK_EVERY_FILTER_CLASS(ptr: gpointer): *GtkEveryFilterClass <cimport,nodecl> end
global function GTK_IS_EVERY_FILTER(ptr: gpointer): gboolean <cimport,nodecl> end
global function GTK_IS_EVERY_FILTER_CLASS(ptr: gpointer): gboolean <cimport,nodecl> end
global function GTK_EVERY_FILTER_GET_CLASS(ptr: gpointer): *GtkEveryFilterClass <cimport,nodecl> end
global function gtk_every_filter_new(): *GtkEveryFilter <cimport,nodecl> end
global function gtk_multi_selection_get_type(): GType <cimport,nodecl> end
global function glib_autoptr_clear_GtkMultiSelection(_ptr: *GtkMultiSelection): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GtkMultiSelection(_ptr: **GtkMultiSelection): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GtkMultiSelection(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GtkMultiSelection(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GtkMultiSelection(_q: **GQueue): void <cimport,nodecl> end
global function glib_autoptr_clear_GtkMultiSelectionClass(_ptr: *GtkMultiSelectionClass): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GtkMultiSelectionClass(_ptr: **GtkMultiSelectionClass): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GtkMultiSelectionClass(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GtkMultiSelectionClass(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GtkMultiSelectionClass(_q: **GQueue): void <cimport,nodecl> end
global function GTK_MULTI_SELECTION(ptr: gpointer): *GtkMultiSelection <cimport,nodecl> end
global function GTK_IS_MULTI_SELECTION(ptr: gpointer): gboolean <cimport,nodecl> end
global function gtk_multi_selection_new(model: *GListModel): *GtkMultiSelection <cimport,nodecl> end
global function gtk_multi_selection_get_model(self: *GtkMultiSelection): *GListModel <cimport,nodecl> end
global function gtk_multi_selection_set_model(self: *GtkMultiSelection, model: *GListModel): void <cimport,nodecl> end
global function gtk_multi_sorter_get_type(): GType <cimport,nodecl> end
global function glib_autoptr_clear_GtkMultiSorter(_ptr: *GtkMultiSorter): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GtkMultiSorter(_ptr: **GtkMultiSorter): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GtkMultiSorter(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GtkMultiSorter(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GtkMultiSorter(_q: **GQueue): void <cimport,nodecl> end
global function glib_autoptr_clear_GtkMultiSorterClass(_ptr: *GtkMultiSorterClass): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GtkMultiSorterClass(_ptr: **GtkMultiSorterClass): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GtkMultiSorterClass(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GtkMultiSorterClass(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GtkMultiSorterClass(_q: **GQueue): void <cimport,nodecl> end
global function GTK_MULTI_SORTER(ptr: gpointer): *GtkMultiSorter <cimport,nodecl> end
global function GTK_IS_MULTI_SORTER(ptr: gpointer): gboolean <cimport,nodecl> end
global function gtk_multi_sorter_new(): *GtkMultiSorter <cimport,nodecl> end
global function gtk_multi_sorter_append(self: *GtkMultiSorter, sorter: *GtkSorter): void <cimport,nodecl> end
global function gtk_multi_sorter_remove(self: *GtkMultiSorter, position: guint): void <cimport,nodecl> end
global function gtk_native_get_type(): GType <cimport,nodecl> end
global function glib_autoptr_clear_GtkNative(_ptr: *GtkNative): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GtkNative(_ptr: **GtkNative): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GtkNative(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GtkNative(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GtkNative(_q: **GQueue): void <cimport,nodecl> end
global function GTK_NATIVE(ptr: gpointer): *GtkNative <cimport,nodecl> end
global function GTK_IS_NATIVE(ptr: gpointer): gboolean <cimport,nodecl> end
global function GTK_NATIVE_GET_IFACE(ptr: gpointer): *GtkNativeInterface <cimport,nodecl> end
global function gtk_native_realize(self: *GtkNative): void <cimport,nodecl> end
global function gtk_native_unrealize(self: *GtkNative): void <cimport,nodecl> end
global function gtk_native_get_for_surface(surface: *GdkSurface): *GtkNative <cimport,nodecl> end
global function gtk_native_get_surface(self: *GtkNative): *GdkSurface <cimport,nodecl> end
global function gtk_native_get_renderer(self: *GtkNative): *GskRenderer <cimport,nodecl> end
global function gtk_native_get_surface_transform(self: *GtkNative, x: *float64, y: *float64): void <cimport,nodecl> end
global function gtk_no_selection_get_type(): GType <cimport,nodecl> end
global function glib_autoptr_clear_GtkNoSelection(_ptr: *GtkNoSelection): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GtkNoSelection(_ptr: **GtkNoSelection): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GtkNoSelection(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GtkNoSelection(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GtkNoSelection(_q: **GQueue): void <cimport,nodecl> end
global function glib_autoptr_clear_GtkNoSelectionClass(_ptr: *GtkNoSelectionClass): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GtkNoSelectionClass(_ptr: **GtkNoSelectionClass): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GtkNoSelectionClass(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GtkNoSelectionClass(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GtkNoSelectionClass(_q: **GQueue): void <cimport,nodecl> end
global function GTK_NO_SELECTION(ptr: gpointer): *GtkNoSelection <cimport,nodecl> end
global function GTK_IS_NO_SELECTION(ptr: gpointer): gboolean <cimport,nodecl> end
global function gtk_no_selection_new(model: *GListModel): *GtkNoSelection <cimport,nodecl> end
global function gtk_no_selection_get_model(self: *GtkNoSelection): *GListModel <cimport,nodecl> end
global function gtk_no_selection_set_model(self: *GtkNoSelection, model: *GListModel): void <cimport,nodecl> end
global function gtk_notebook_get_type(): GType <cimport,nodecl> end
global function gtk_notebook_new(): *GtkWidget <cimport,nodecl> end
global function gtk_notebook_append_page(notebook: *GtkNotebook, child: *GtkWidget, tab_label: *GtkWidget): cint <cimport,nodecl> end
global function gtk_notebook_append_page_menu(notebook: *GtkNotebook, child: *GtkWidget, tab_label: *GtkWidget, menu_label: *GtkWidget): cint <cimport,nodecl> end
global function gtk_notebook_prepend_page(notebook: *GtkNotebook, child: *GtkWidget, tab_label: *GtkWidget): cint <cimport,nodecl> end
global function gtk_notebook_prepend_page_menu(notebook: *GtkNotebook, child: *GtkWidget, tab_label: *GtkWidget, menu_label: *GtkWidget): cint <cimport,nodecl> end
global function gtk_notebook_insert_page(notebook: *GtkNotebook, child: *GtkWidget, tab_label: *GtkWidget, position: cint): cint <cimport,nodecl> end
global function gtk_notebook_insert_page_menu(notebook: *GtkNotebook, child: *GtkWidget, tab_label: *GtkWidget, menu_label: *GtkWidget, position: cint): cint <cimport,nodecl> end
global function gtk_notebook_remove_page(notebook: *GtkNotebook, page_num: cint): void <cimport,nodecl> end
global function gtk_notebook_set_group_name(notebook: *GtkNotebook, group_name: cstring): void <cimport,nodecl> end
global function gtk_notebook_get_group_name(notebook: *GtkNotebook): cstring <cimport,nodecl> end
global function gtk_notebook_get_current_page(notebook: *GtkNotebook): cint <cimport,nodecl> end
global function gtk_notebook_get_nth_page(notebook: *GtkNotebook, page_num: cint): *GtkWidget <cimport,nodecl> end
global function gtk_notebook_get_n_pages(notebook: *GtkNotebook): cint <cimport,nodecl> end
global function gtk_notebook_page_num(notebook: *GtkNotebook, child: *GtkWidget): cint <cimport,nodecl> end
global function gtk_notebook_set_current_page(notebook: *GtkNotebook, page_num: cint): void <cimport,nodecl> end
global function gtk_notebook_next_page(notebook: *GtkNotebook): void <cimport,nodecl> end
global function gtk_notebook_prev_page(notebook: *GtkNotebook): void <cimport,nodecl> end
global function gtk_notebook_set_show_border(notebook: *GtkNotebook, show_border: gboolean): void <cimport,nodecl> end
global function gtk_notebook_get_show_border(notebook: *GtkNotebook): gboolean <cimport,nodecl> end
global function gtk_notebook_set_show_tabs(notebook: *GtkNotebook, show_tabs: gboolean): void <cimport,nodecl> end
global function gtk_notebook_get_show_tabs(notebook: *GtkNotebook): gboolean <cimport,nodecl> end
global function gtk_notebook_set_tab_pos(notebook: *GtkNotebook, pos: GtkPositionType): void <cimport,nodecl> end
global function gtk_notebook_get_tab_pos(notebook: *GtkNotebook): GtkPositionType <cimport,nodecl> end
global function gtk_notebook_set_scrollable(notebook: *GtkNotebook, scrollable: gboolean): void <cimport,nodecl> end
global function gtk_notebook_get_scrollable(notebook: *GtkNotebook): gboolean <cimport,nodecl> end
global function gtk_notebook_popup_enable(notebook: *GtkNotebook): void <cimport,nodecl> end
global function gtk_notebook_popup_disable(notebook: *GtkNotebook): void <cimport,nodecl> end
global function gtk_notebook_get_tab_label(notebook: *GtkNotebook, child: *GtkWidget): *GtkWidget <cimport,nodecl> end
global function gtk_notebook_set_tab_label(notebook: *GtkNotebook, child: *GtkWidget, tab_label: *GtkWidget): void <cimport,nodecl> end
global function gtk_notebook_set_tab_label_text(notebook: *GtkNotebook, child: *GtkWidget, tab_text: cstring): void <cimport,nodecl> end
global function gtk_notebook_get_tab_label_text(notebook: *GtkNotebook, child: *GtkWidget): cstring <cimport,nodecl> end
global function gtk_notebook_get_menu_label(notebook: *GtkNotebook, child: *GtkWidget): *GtkWidget <cimport,nodecl> end
global function gtk_notebook_set_menu_label(notebook: *GtkNotebook, child: *GtkWidget, menu_label: *GtkWidget): void <cimport,nodecl> end
global function gtk_notebook_set_menu_label_text(notebook: *GtkNotebook, child: *GtkWidget, menu_text: cstring): void <cimport,nodecl> end
global function gtk_notebook_get_menu_label_text(notebook: *GtkNotebook, child: *GtkWidget): cstring <cimport,nodecl> end
global function gtk_notebook_reorder_child(notebook: *GtkNotebook, child: *GtkWidget, position: cint): void <cimport,nodecl> end
global function gtk_notebook_get_tab_reorderable(notebook: *GtkNotebook, child: *GtkWidget): gboolean <cimport,nodecl> end
global function gtk_notebook_set_tab_reorderable(notebook: *GtkNotebook, child: *GtkWidget, reorderable: gboolean): void <cimport,nodecl> end
global function gtk_notebook_get_tab_detachable(notebook: *GtkNotebook, child: *GtkWidget): gboolean <cimport,nodecl> end
global function gtk_notebook_set_tab_detachable(notebook: *GtkNotebook, child: *GtkWidget, detachable: gboolean): void <cimport,nodecl> end
global function gtk_notebook_detach_tab(notebook: *GtkNotebook, child: *GtkWidget): void <cimport,nodecl> end
global function gtk_notebook_get_action_widget(notebook: *GtkNotebook, pack_type: GtkPackType): *GtkWidget <cimport,nodecl> end
global function gtk_notebook_set_action_widget(notebook: *GtkNotebook, widget: *GtkWidget, pack_type: GtkPackType): void <cimport,nodecl> end
global function gtk_notebook_page_get_type(): GType <cimport,nodecl> end
global function gtk_notebook_get_page(notebook: *GtkNotebook, child: *GtkWidget): *GtkNotebookPage <cimport,nodecl> end
global function gtk_notebook_page_get_child(page: *GtkNotebookPage): *GtkWidget <cimport,nodecl> end
global function gtk_notebook_get_pages(notebook: *GtkNotebook): *GListModel <cimport,nodecl> end
global function gtk_numeric_sorter_get_type(): GType <cimport,nodecl> end
global function glib_autoptr_clear_GtkNumericSorter(_ptr: *GtkNumericSorter): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GtkNumericSorter(_ptr: **GtkNumericSorter): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GtkNumericSorter(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GtkNumericSorter(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GtkNumericSorter(_q: **GQueue): void <cimport,nodecl> end
global function glib_autoptr_clear_GtkNumericSorterClass(_ptr: *GtkNumericSorterClass): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GtkNumericSorterClass(_ptr: **GtkNumericSorterClass): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GtkNumericSorterClass(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GtkNumericSorterClass(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GtkNumericSorterClass(_q: **GQueue): void <cimport,nodecl> end
global function GTK_NUMERIC_SORTER(ptr: gpointer): *GtkNumericSorter <cimport,nodecl> end
global function GTK_IS_NUMERIC_SORTER(ptr: gpointer): gboolean <cimport,nodecl> end
global function gtk_numeric_sorter_new(expression: *GtkExpression): *GtkNumericSorter <cimport,nodecl> end
global function gtk_numeric_sorter_get_expression(self: *GtkNumericSorter): *GtkExpression <cimport,nodecl> end
global function gtk_numeric_sorter_set_expression(self: *GtkNumericSorter, expression: *GtkExpression): void <cimport,nodecl> end
global function gtk_numeric_sorter_get_sort_order(self: *GtkNumericSorter): GtkSortType <cimport,nodecl> end
global function gtk_numeric_sorter_set_sort_order(self: *GtkNumericSorter, sort_order: GtkSortType): void <cimport,nodecl> end
global function gtk_orientable_get_type(): GType <cimport,nodecl> end
global function gtk_orientable_set_orientation(orientable: *GtkOrientable, orientation: GtkOrientation): void <cimport,nodecl> end
global function gtk_orientable_get_orientation(orientable: *GtkOrientable): GtkOrientation <cimport,nodecl> end
global function gtk_overlay_get_type(): GType <cimport,nodecl> end
global function gtk_overlay_new(): *GtkWidget <cimport,nodecl> end
global function gtk_overlay_add_overlay(overlay: *GtkOverlay, widget: *GtkWidget): void <cimport,nodecl> end
global function gtk_overlay_remove_overlay(overlay: *GtkOverlay, widget: *GtkWidget): void <cimport,nodecl> end
global function gtk_overlay_set_child(overlay: *GtkOverlay, child: *GtkWidget): void <cimport,nodecl> end
global function gtk_overlay_get_child(overlay: *GtkOverlay): *GtkWidget <cimport,nodecl> end
global function gtk_overlay_get_measure_overlay(overlay: *GtkOverlay, widget: *GtkWidget): gboolean <cimport,nodecl> end
global function gtk_overlay_set_measure_overlay(overlay: *GtkOverlay, widget: *GtkWidget, measure: gboolean): void <cimport,nodecl> end
global function gtk_overlay_get_clip_overlay(overlay: *GtkOverlay, widget: *GtkWidget): gboolean <cimport,nodecl> end
global function gtk_overlay_set_clip_overlay(overlay: *GtkOverlay, widget: *GtkWidget, clip_overlay: gboolean): void <cimport,nodecl> end
global function gtk_overlay_layout_get_type(): GType <cimport,nodecl> end
global function glib_autoptr_clear_GtkOverlayLayout(_ptr: *GtkOverlayLayout): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GtkOverlayLayout(_ptr: **GtkOverlayLayout): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GtkOverlayLayout(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GtkOverlayLayout(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GtkOverlayLayout(_q: **GQueue): void <cimport,nodecl> end
global function glib_autoptr_clear_GtkOverlayLayoutClass(_ptr: *GtkOverlayLayoutClass): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GtkOverlayLayoutClass(_ptr: **GtkOverlayLayoutClass): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GtkOverlayLayoutClass(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GtkOverlayLayoutClass(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GtkOverlayLayoutClass(_q: **GQueue): void <cimport,nodecl> end
global function GTK_OVERLAY_LAYOUT(ptr: gpointer): *GtkOverlayLayout <cimport,nodecl> end
global function GTK_IS_OVERLAY_LAYOUT(ptr: gpointer): gboolean <cimport,nodecl> end
global function gtk_overlay_layout_new(): *GtkLayoutManager <cimport,nodecl> end
global function gtk_overlay_layout_child_get_type(): GType <cimport,nodecl> end
global function glib_autoptr_clear_GtkOverlayLayoutChild(_ptr: *GtkOverlayLayoutChild): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GtkOverlayLayoutChild(_ptr: **GtkOverlayLayoutChild): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GtkOverlayLayoutChild(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GtkOverlayLayoutChild(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GtkOverlayLayoutChild(_q: **GQueue): void <cimport,nodecl> end
global function glib_autoptr_clear_GtkOverlayLayoutChildClass(_ptr: *GtkOverlayLayoutChildClass): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GtkOverlayLayoutChildClass(_ptr: **GtkOverlayLayoutChildClass): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GtkOverlayLayoutChildClass(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GtkOverlayLayoutChildClass(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GtkOverlayLayoutChildClass(_q: **GQueue): void <cimport,nodecl> end
global function GTK_OVERLAY_LAYOUT_CHILD(ptr: gpointer): *GtkOverlayLayoutChild <cimport,nodecl> end
global function GTK_IS_OVERLAY_LAYOUT_CHILD(ptr: gpointer): gboolean <cimport,nodecl> end
global function gtk_overlay_layout_child_set_measure(child: *GtkOverlayLayoutChild, measure: gboolean): void <cimport,nodecl> end
global function gtk_overlay_layout_child_get_measure(child: *GtkOverlayLayoutChild): gboolean <cimport,nodecl> end
global function gtk_overlay_layout_child_set_clip_overlay(child: *GtkOverlayLayoutChild, clip_overlay: gboolean): void <cimport,nodecl> end
global function gtk_overlay_layout_child_get_clip_overlay(child: *GtkOverlayLayoutChild): gboolean <cimport,nodecl> end
global function gtk_pad_controller_get_type(): GType <cimport,nodecl> end
global function gtk_pad_controller_new(group: *GActionGroup, pad: *GdkDevice): *GtkPadController <cimport,nodecl> end
global function gtk_pad_controller_set_action_entries(controller: *GtkPadController, entries: *GtkPadActionEntry, n_entries: cint): void <cimport,nodecl> end
global function gtk_pad_controller_set_action(controller: *GtkPadController, type: GtkPadActionType, index: cint, mode: cint, label: cstring, action_name: cstring): void <cimport,nodecl> end
global function gtk_paper_size_get_type(): GType <cimport,nodecl> end
global function gtk_paper_size_new(name: cstring): *GtkPaperSize <cimport,nodecl> end
global function gtk_paper_size_new_from_ppd(ppd_name: cstring, ppd_display_name: cstring, width: float64, height: float64): *GtkPaperSize <cimport,nodecl> end
global function gtk_paper_size_new_from_ipp(ipp_name: cstring, width: float64, height: float64): *GtkPaperSize <cimport,nodecl> end
global function gtk_paper_size_new_custom(name: cstring, display_name: cstring, width: float64, height: float64, unit: GtkUnit): *GtkPaperSize <cimport,nodecl> end
global function gtk_paper_size_copy(other: *GtkPaperSize): *GtkPaperSize <cimport,nodecl> end
global function gtk_paper_size_free(size: *GtkPaperSize): void <cimport,nodecl> end
global function gtk_paper_size_is_equal(size1: *GtkPaperSize, size2: *GtkPaperSize): gboolean <cimport,nodecl> end
global function gtk_paper_size_get_paper_sizes(include_custom: gboolean): *GList <cimport,nodecl> end
global function gtk_paper_size_get_name(size: *GtkPaperSize): cstring <cimport,nodecl> end
global function gtk_paper_size_get_display_name(size: *GtkPaperSize): cstring <cimport,nodecl> end
global function gtk_paper_size_get_ppd_name(size: *GtkPaperSize): cstring <cimport,nodecl> end
global function gtk_paper_size_get_width(size: *GtkPaperSize, unit: GtkUnit): float64 <cimport,nodecl> end
global function gtk_paper_size_get_height(size: *GtkPaperSize, unit: GtkUnit): float64 <cimport,nodecl> end
global function gtk_paper_size_is_custom(size: *GtkPaperSize): gboolean <cimport,nodecl> end
global function gtk_paper_size_is_ipp(size: *GtkPaperSize): gboolean <cimport,nodecl> end
global function gtk_paper_size_set_size(size: *GtkPaperSize, width: float64, height: float64, unit: GtkUnit): void <cimport,nodecl> end
global function gtk_paper_size_get_default_top_margin(size: *GtkPaperSize, unit: GtkUnit): float64 <cimport,nodecl> end
global function gtk_paper_size_get_default_bottom_margin(size: *GtkPaperSize, unit: GtkUnit): float64 <cimport,nodecl> end
global function gtk_paper_size_get_default_left_margin(size: *GtkPaperSize, unit: GtkUnit): float64 <cimport,nodecl> end
global function gtk_paper_size_get_default_right_margin(size: *GtkPaperSize, unit: GtkUnit): float64 <cimport,nodecl> end
global function gtk_paper_size_get_default(): cstring <cimport,nodecl> end
global function gtk_paper_size_new_from_key_file(key_file: *GKeyFile, group_name: cstring, error: **GError): *GtkPaperSize <cimport,nodecl> end
global function gtk_paper_size_to_key_file(size: *GtkPaperSize, key_file: *GKeyFile, group_name: cstring): void <cimport,nodecl> end
global function gtk_paper_size_new_from_gvariant(variant: *GVariant): *GtkPaperSize <cimport,nodecl> end
global function gtk_paper_size_to_gvariant(paper_size: *GtkPaperSize): *GVariant <cimport,nodecl> end
global function gtk_page_setup_get_type(): GType <cimport,nodecl> end
global function gtk_page_setup_new(): *GtkPageSetup <cimport,nodecl> end
global function gtk_page_setup_copy(other: *GtkPageSetup): *GtkPageSetup <cimport,nodecl> end
global function gtk_page_setup_get_orientation(setup: *GtkPageSetup): GtkPageOrientation <cimport,nodecl> end
global function gtk_page_setup_set_orientation(setup: *GtkPageSetup, orientation: GtkPageOrientation): void <cimport,nodecl> end
global function gtk_page_setup_get_paper_size(setup: *GtkPageSetup): *GtkPaperSize <cimport,nodecl> end
global function gtk_page_setup_set_paper_size(setup: *GtkPageSetup, size: *GtkPaperSize): void <cimport,nodecl> end
global function gtk_page_setup_get_top_margin(setup: *GtkPageSetup, unit: GtkUnit): float64 <cimport,nodecl> end
global function gtk_page_setup_set_top_margin(setup: *GtkPageSetup, margin: float64, unit: GtkUnit): void <cimport,nodecl> end
global function gtk_page_setup_get_bottom_margin(setup: *GtkPageSetup, unit: GtkUnit): float64 <cimport,nodecl> end
global function gtk_page_setup_set_bottom_margin(setup: *GtkPageSetup, margin: float64, unit: GtkUnit): void <cimport,nodecl> end
global function gtk_page_setup_get_left_margin(setup: *GtkPageSetup, unit: GtkUnit): float64 <cimport,nodecl> end
global function gtk_page_setup_set_left_margin(setup: *GtkPageSetup, margin: float64, unit: GtkUnit): void <cimport,nodecl> end
global function gtk_page_setup_get_right_margin(setup: *GtkPageSetup, unit: GtkUnit): float64 <cimport,nodecl> end
global function gtk_page_setup_set_right_margin(setup: *GtkPageSetup, margin: float64, unit: GtkUnit): void <cimport,nodecl> end
global function gtk_page_setup_set_paper_size_and_default_margins(setup: *GtkPageSetup, size: *GtkPaperSize): void <cimport,nodecl> end
global function gtk_page_setup_get_paper_width(setup: *GtkPageSetup, unit: GtkUnit): float64 <cimport,nodecl> end
global function gtk_page_setup_get_paper_height(setup: *GtkPageSetup, unit: GtkUnit): float64 <cimport,nodecl> end
global function gtk_page_setup_get_page_width(setup: *GtkPageSetup, unit: GtkUnit): float64 <cimport,nodecl> end
global function gtk_page_setup_get_page_height(setup: *GtkPageSetup, unit: GtkUnit): float64 <cimport,nodecl> end
global function gtk_page_setup_new_from_file(file_name: cstring, error: **GError): *GtkPageSetup <cimport,nodecl> end
global function gtk_page_setup_load_file(setup: *GtkPageSetup, file_name: cstring, error: **GError): gboolean <cimport,nodecl> end
global function gtk_page_setup_to_file(setup: *GtkPageSetup, file_name: cstring, error: **GError): gboolean <cimport,nodecl> end
global function gtk_page_setup_new_from_key_file(key_file: *GKeyFile, group_name: cstring, error: **GError): *GtkPageSetup <cimport,nodecl> end
global function gtk_page_setup_load_key_file(setup: *GtkPageSetup, key_file: *GKeyFile, group_name: cstring, error: **GError): gboolean <cimport,nodecl> end
global function gtk_page_setup_to_key_file(setup: *GtkPageSetup, key_file: *GKeyFile, group_name: cstring): void <cimport,nodecl> end
global function gtk_page_setup_to_gvariant(setup: *GtkPageSetup): *GVariant <cimport,nodecl> end
global function gtk_page_setup_new_from_gvariant(variant: *GVariant): *GtkPageSetup <cimport,nodecl> end
global function gtk_paned_get_type(): GType <cimport,nodecl> end
global function gtk_paned_new(orientation: GtkOrientation): *GtkWidget <cimport,nodecl> end
global function gtk_paned_set_start_child(paned: *GtkPaned, child: *GtkWidget): void <cimport,nodecl> end
global function gtk_paned_get_start_child(paned: *GtkPaned): *GtkWidget <cimport,nodecl> end
global function gtk_paned_set_resize_start_child(paned: *GtkPaned, resize: gboolean): void <cimport,nodecl> end
global function gtk_paned_get_resize_start_child(paned: *GtkPaned): gboolean <cimport,nodecl> end
global function gtk_paned_set_end_child(paned: *GtkPaned, child: *GtkWidget): void <cimport,nodecl> end
global function gtk_paned_get_end_child(paned: *GtkPaned): *GtkWidget <cimport,nodecl> end
global function gtk_paned_set_shrink_start_child(paned: *GtkPaned, resize: gboolean): void <cimport,nodecl> end
global function gtk_paned_get_shrink_start_child(paned: *GtkPaned): gboolean <cimport,nodecl> end
global function gtk_paned_set_resize_end_child(paned: *GtkPaned, resize: gboolean): void <cimport,nodecl> end
global function gtk_paned_get_resize_end_child(paned: *GtkPaned): gboolean <cimport,nodecl> end
global function gtk_paned_set_shrink_end_child(paned: *GtkPaned, resize: gboolean): void <cimport,nodecl> end
global function gtk_paned_get_shrink_end_child(paned: *GtkPaned): gboolean <cimport,nodecl> end
global function gtk_paned_get_position(paned: *GtkPaned): cint <cimport,nodecl> end
global function gtk_paned_set_position(paned: *GtkPaned, position: cint): void <cimport,nodecl> end
global function gtk_paned_set_wide_handle(paned: *GtkPaned, wide: gboolean): void <cimport,nodecl> end
global function gtk_paned_get_wide_handle(paned: *GtkPaned): gboolean <cimport,nodecl> end
global function gtk_password_entry_get_type(): GType <cimport,nodecl> end
global function gtk_password_entry_new(): *GtkWidget <cimport,nodecl> end
global function gtk_password_entry_set_show_peek_icon(entry: *GtkPasswordEntry, show_peek_icon: gboolean): void <cimport,nodecl> end
global function gtk_password_entry_get_show_peek_icon(entry: *GtkPasswordEntry): gboolean <cimport,nodecl> end
global function gtk_password_entry_set_extra_menu(entry: *GtkPasswordEntry, model: *GMenuModel): void <cimport,nodecl> end
global function gtk_password_entry_get_extra_menu(entry: *GtkPasswordEntry): *GMenuModel <cimport,nodecl> end
global function gtk_password_entry_buffer_get_type(): GType <cimport,nodecl> end
global function glib_autoptr_clear_GtkPasswordEntryBuffer(_ptr: *GtkPasswordEntryBuffer): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GtkPasswordEntryBuffer(_ptr: **GtkPasswordEntryBuffer): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GtkPasswordEntryBuffer(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GtkPasswordEntryBuffer(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GtkPasswordEntryBuffer(_q: **GQueue): void <cimport,nodecl> end
global function glib_autoptr_clear_GtkPasswordEntryBufferClass(_ptr: *GtkPasswordEntryBufferClass): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GtkPasswordEntryBufferClass(_ptr: **GtkPasswordEntryBufferClass): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GtkPasswordEntryBufferClass(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GtkPasswordEntryBufferClass(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GtkPasswordEntryBufferClass(_q: **GQueue): void <cimport,nodecl> end
global function GTK_PASSWORD_ENTRY_BUFFER(ptr: gpointer): *GtkPasswordEntryBuffer <cimport,nodecl> end
global function GTK_IS_PASSWORD_ENTRY_BUFFER(ptr: gpointer): gboolean <cimport,nodecl> end
global function gtk_password_entry_buffer_new(): *GtkEntryBuffer <cimport,nodecl> end
global function gtk_picture_get_type(): GType <cimport,nodecl> end
global function glib_autoptr_clear_GtkPicture(_ptr: *GtkPicture): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GtkPicture(_ptr: **GtkPicture): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GtkPicture(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GtkPicture(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GtkPicture(_q: **GQueue): void <cimport,nodecl> end
global function glib_autoptr_clear_GtkPictureClass(_ptr: *GtkPictureClass): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GtkPictureClass(_ptr: **GtkPictureClass): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GtkPictureClass(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GtkPictureClass(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GtkPictureClass(_q: **GQueue): void <cimport,nodecl> end
global function GTK_PICTURE(ptr: gpointer): *GtkPicture <cimport,nodecl> end
global function GTK_IS_PICTURE(ptr: gpointer): gboolean <cimport,nodecl> end
global function gtk_picture_new(): *GtkWidget <cimport,nodecl> end
global function gtk_picture_new_for_paintable(paintable: *GdkPaintable): *GtkWidget <cimport,nodecl> end
global function gtk_picture_new_for_pixbuf(pixbuf: *GdkPixbuf): *GtkWidget <cimport,nodecl> end
global function gtk_picture_new_for_file(file: *GFile): *GtkWidget <cimport,nodecl> end
global function gtk_picture_new_for_filename(filename: cstring): *GtkWidget <cimport,nodecl> end
global function gtk_picture_new_for_resource(resource_path: cstring): *GtkWidget <cimport,nodecl> end
global function gtk_picture_set_paintable(self: *GtkPicture, paintable: *GdkPaintable): void <cimport,nodecl> end
global function gtk_picture_get_paintable(self: *GtkPicture): *GdkPaintable <cimport,nodecl> end
global function gtk_picture_set_file(self: *GtkPicture, file: *GFile): void <cimport,nodecl> end
global function gtk_picture_get_file(self: *GtkPicture): *GFile <cimport,nodecl> end
global function gtk_picture_set_filename(self: *GtkPicture, filename: cstring): void <cimport,nodecl> end
global function gtk_picture_set_resource(self: *GtkPicture, resource_path: cstring): void <cimport,nodecl> end
global function gtk_picture_set_pixbuf(self: *GtkPicture, pixbuf: *GdkPixbuf): void <cimport,nodecl> end
global function gtk_picture_set_keep_aspect_ratio(self: *GtkPicture, keep_aspect_ratio: gboolean): void <cimport,nodecl> end
global function gtk_picture_get_keep_aspect_ratio(self: *GtkPicture): gboolean <cimport,nodecl> end
global function gtk_picture_set_can_shrink(self: *GtkPicture, can_shrink: gboolean): void <cimport,nodecl> end
global function gtk_picture_get_can_shrink(self: *GtkPicture): gboolean <cimport,nodecl> end
global function gtk_picture_set_alternative_text(self: *GtkPicture, alternative_text: cstring): void <cimport,nodecl> end
global function gtk_picture_get_alternative_text(self: *GtkPicture): cstring <cimport,nodecl> end
global function gtk_popover_menu_get_type(): GType <cimport,nodecl> end
global function gtk_popover_menu_new_from_model(model: *GMenuModel): *GtkWidget <cimport,nodecl> end
global function gtk_popover_menu_new_from_model_full(model: *GMenuModel, flags: GtkPopoverMenuFlags): *GtkWidget <cimport,nodecl> end
global function gtk_popover_menu_set_menu_model(popover: *GtkPopoverMenu, model: *GMenuModel): void <cimport,nodecl> end
global function gtk_popover_menu_get_menu_model(popover: *GtkPopoverMenu): *GMenuModel <cimport,nodecl> end
global function gtk_popover_menu_add_child(popover: *GtkPopoverMenu, child: *GtkWidget, id: cstring): gboolean <cimport,nodecl> end
global function gtk_popover_menu_remove_child(popover: *GtkPopoverMenu, child: *GtkWidget): gboolean <cimport,nodecl> end
global function gtk_popover_menu_bar_get_type(): GType <cimport,nodecl> end
global function gtk_popover_menu_bar_new_from_model(model: *GMenuModel): *GtkWidget <cimport,nodecl> end
global function gtk_popover_menu_bar_set_menu_model(bar: *GtkPopoverMenuBar, model: *GMenuModel): void <cimport,nodecl> end
global function gtk_popover_menu_bar_get_menu_model(bar: *GtkPopoverMenuBar): *GMenuModel <cimport,nodecl> end
global function gtk_popover_menu_bar_add_child(bar: *GtkPopoverMenuBar, child: *GtkWidget, id: cstring): gboolean <cimport,nodecl> end
global function gtk_popover_menu_bar_remove_child(bar: *GtkPopoverMenuBar, child: *GtkWidget): gboolean <cimport,nodecl> end
global function gtk_print_context_get_type(): GType <cimport,nodecl> end
global function gtk_print_context_get_cairo_context(context: *GtkPrintContext): *cairo_t <cimport,nodecl> end
global function gtk_print_context_get_page_setup(context: *GtkPrintContext): *GtkPageSetup <cimport,nodecl> end
global function gtk_print_context_get_width(context: *GtkPrintContext): float64 <cimport,nodecl> end
global function gtk_print_context_get_height(context: *GtkPrintContext): float64 <cimport,nodecl> end
global function gtk_print_context_get_dpi_x(context: *GtkPrintContext): float64 <cimport,nodecl> end
global function gtk_print_context_get_dpi_y(context: *GtkPrintContext): float64 <cimport,nodecl> end
global function gtk_print_context_get_hard_margins(context: *GtkPrintContext, top: *float64, bottom: *float64, left: *float64, right: *float64): gboolean <cimport,nodecl> end
global function gtk_print_context_get_pango_fontmap(context: *GtkPrintContext): *PangoFontMap <cimport,nodecl> end
global function gtk_print_context_create_pango_context(context: *GtkPrintContext): *PangoContext <cimport,nodecl> end
global function gtk_print_context_create_pango_layout(context: *GtkPrintContext): *PangoLayout <cimport,nodecl> end
global function gtk_print_context_set_cairo_context(context: *GtkPrintContext, cr: *cairo_t, dpi_x: float64, dpi_y: float64): void <cimport,nodecl> end
global function gtk_print_settings_get_type(): GType <cimport,nodecl> end
global function gtk_print_settings_new(): *GtkPrintSettings <cimport,nodecl> end
global function gtk_print_settings_copy(other: *GtkPrintSettings): *GtkPrintSettings <cimport,nodecl> end
global function gtk_print_settings_new_from_file(file_name: cstring, error: **GError): *GtkPrintSettings <cimport,nodecl> end
global function gtk_print_settings_load_file(settings: *GtkPrintSettings, file_name: cstring, error: **GError): gboolean <cimport,nodecl> end
global function gtk_print_settings_to_file(settings: *GtkPrintSettings, file_name: cstring, error: **GError): gboolean <cimport,nodecl> end
global function gtk_print_settings_new_from_key_file(key_file: *GKeyFile, group_name: cstring, error: **GError): *GtkPrintSettings <cimport,nodecl> end
global function gtk_print_settings_load_key_file(settings: *GtkPrintSettings, key_file: *GKeyFile, group_name: cstring, error: **GError): gboolean <cimport,nodecl> end
global function gtk_print_settings_to_key_file(settings: *GtkPrintSettings, key_file: *GKeyFile, group_name: cstring): void <cimport,nodecl> end
global function gtk_print_settings_has_key(settings: *GtkPrintSettings, key: cstring): gboolean <cimport,nodecl> end
global function gtk_print_settings_get(settings: *GtkPrintSettings, key: cstring): cstring <cimport,nodecl> end
global function gtk_print_settings_set(settings: *GtkPrintSettings, key: cstring, value: cstring): void <cimport,nodecl> end
global function gtk_print_settings_unset(settings: *GtkPrintSettings, key: cstring): void <cimport,nodecl> end
global function gtk_print_settings_foreach(settings: *GtkPrintSettings, func: GtkPrintSettingsFunc, user_data: gpointer): void <cimport,nodecl> end
global function gtk_print_settings_get_bool(settings: *GtkPrintSettings, key: cstring): gboolean <cimport,nodecl> end
global function gtk_print_settings_set_bool(settings: *GtkPrintSettings, key: cstring, value: gboolean): void <cimport,nodecl> end
global function gtk_print_settings_get_double(settings: *GtkPrintSettings, key: cstring): float64 <cimport,nodecl> end
global function gtk_print_settings_get_double_with_default(settings: *GtkPrintSettings, key: cstring, def: float64): float64 <cimport,nodecl> end
global function gtk_print_settings_set_double(settings: *GtkPrintSettings, key: cstring, value: float64): void <cimport,nodecl> end
global function gtk_print_settings_get_length(settings: *GtkPrintSettings, key: cstring, unit: GtkUnit): float64 <cimport,nodecl> end
global function gtk_print_settings_set_length(settings: *GtkPrintSettings, key: cstring, value: float64, unit: GtkUnit): void <cimport,nodecl> end
global function gtk_print_settings_get_int(settings: *GtkPrintSettings, key: cstring): cint <cimport,nodecl> end
global function gtk_print_settings_get_int_with_default(settings: *GtkPrintSettings, key: cstring, def: cint): cint <cimport,nodecl> end
global function gtk_print_settings_set_int(settings: *GtkPrintSettings, key: cstring, value: cint): void <cimport,nodecl> end
global function gtk_print_settings_get_printer(settings: *GtkPrintSettings): cstring <cimport,nodecl> end
global function gtk_print_settings_set_printer(settings: *GtkPrintSettings, printer: cstring): void <cimport,nodecl> end
global function gtk_print_settings_get_orientation(settings: *GtkPrintSettings): GtkPageOrientation <cimport,nodecl> end
global function gtk_print_settings_set_orientation(settings: *GtkPrintSettings, orientation: GtkPageOrientation): void <cimport,nodecl> end
global function gtk_print_settings_get_paper_size(settings: *GtkPrintSettings): *GtkPaperSize <cimport,nodecl> end
global function gtk_print_settings_set_paper_size(settings: *GtkPrintSettings, paper_size: *GtkPaperSize): void <cimport,nodecl> end
global function gtk_print_settings_get_paper_width(settings: *GtkPrintSettings, unit: GtkUnit): float64 <cimport,nodecl> end
global function gtk_print_settings_set_paper_width(settings: *GtkPrintSettings, width: float64, unit: GtkUnit): void <cimport,nodecl> end
global function gtk_print_settings_get_paper_height(settings: *GtkPrintSettings, unit: GtkUnit): float64 <cimport,nodecl> end
global function gtk_print_settings_set_paper_height(settings: *GtkPrintSettings, height: float64, unit: GtkUnit): void <cimport,nodecl> end
global function gtk_print_settings_get_use_color(settings: *GtkPrintSettings): gboolean <cimport,nodecl> end
global function gtk_print_settings_set_use_color(settings: *GtkPrintSettings, use_color: gboolean): void <cimport,nodecl> end
global function gtk_print_settings_get_collate(settings: *GtkPrintSettings): gboolean <cimport,nodecl> end
global function gtk_print_settings_set_collate(settings: *GtkPrintSettings, collate: gboolean): void <cimport,nodecl> end
global function gtk_print_settings_get_reverse(settings: *GtkPrintSettings): gboolean <cimport,nodecl> end
global function gtk_print_settings_set_reverse(settings: *GtkPrintSettings, reverse: gboolean): void <cimport,nodecl> end
global function gtk_print_settings_get_duplex(settings: *GtkPrintSettings): GtkPrintDuplex <cimport,nodecl> end
global function gtk_print_settings_set_duplex(settings: *GtkPrintSettings, duplex: GtkPrintDuplex): void <cimport,nodecl> end
global function gtk_print_settings_get_quality(settings: *GtkPrintSettings): GtkPrintQuality <cimport,nodecl> end
global function gtk_print_settings_set_quality(settings: *GtkPrintSettings, quality: GtkPrintQuality): void <cimport,nodecl> end
global function gtk_print_settings_get_n_copies(settings: *GtkPrintSettings): cint <cimport,nodecl> end
global function gtk_print_settings_set_n_copies(settings: *GtkPrintSettings, num_copies: cint): void <cimport,nodecl> end
global function gtk_print_settings_get_number_up(settings: *GtkPrintSettings): cint <cimport,nodecl> end
global function gtk_print_settings_set_number_up(settings: *GtkPrintSettings, number_up: cint): void <cimport,nodecl> end
global function gtk_print_settings_get_number_up_layout(settings: *GtkPrintSettings): GtkNumberUpLayout <cimport,nodecl> end
global function gtk_print_settings_set_number_up_layout(settings: *GtkPrintSettings, number_up_layout: GtkNumberUpLayout): void <cimport,nodecl> end
global function gtk_print_settings_get_resolution(settings: *GtkPrintSettings): cint <cimport,nodecl> end
global function gtk_print_settings_set_resolution(settings: *GtkPrintSettings, resolution: cint): void <cimport,nodecl> end
global function gtk_print_settings_get_resolution_x(settings: *GtkPrintSettings): cint <cimport,nodecl> end
global function gtk_print_settings_get_resolution_y(settings: *GtkPrintSettings): cint <cimport,nodecl> end
global function gtk_print_settings_set_resolution_xy(settings: *GtkPrintSettings, resolution_x: cint, resolution_y: cint): void <cimport,nodecl> end
global function gtk_print_settings_get_printer_lpi(settings: *GtkPrintSettings): float64 <cimport,nodecl> end
global function gtk_print_settings_set_printer_lpi(settings: *GtkPrintSettings, lpi: float64): void <cimport,nodecl> end
global function gtk_print_settings_get_scale(settings: *GtkPrintSettings): float64 <cimport,nodecl> end
global function gtk_print_settings_set_scale(settings: *GtkPrintSettings, scale: float64): void <cimport,nodecl> end
global function gtk_print_settings_get_print_pages(settings: *GtkPrintSettings): GtkPrintPages <cimport,nodecl> end
global function gtk_print_settings_set_print_pages(settings: *GtkPrintSettings, pages: GtkPrintPages): void <cimport,nodecl> end
global function gtk_print_settings_get_page_ranges(settings: *GtkPrintSettings, num_ranges: *cint): *GtkPageRange <cimport,nodecl> end
global function gtk_print_settings_set_page_ranges(settings: *GtkPrintSettings, page_ranges: *GtkPageRange, num_ranges: cint): void <cimport,nodecl> end
global function gtk_print_settings_get_page_set(settings: *GtkPrintSettings): GtkPageSet <cimport,nodecl> end
global function gtk_print_settings_set_page_set(settings: *GtkPrintSettings, page_set: GtkPageSet): void <cimport,nodecl> end
global function gtk_print_settings_get_default_source(settings: *GtkPrintSettings): cstring <cimport,nodecl> end
global function gtk_print_settings_set_default_source(settings: *GtkPrintSettings, default_source: cstring): void <cimport,nodecl> end
global function gtk_print_settings_get_media_type(settings: *GtkPrintSettings): cstring <cimport,nodecl> end
global function gtk_print_settings_set_media_type(settings: *GtkPrintSettings, media_type: cstring): void <cimport,nodecl> end
global function gtk_print_settings_get_dither(settings: *GtkPrintSettings): cstring <cimport,nodecl> end
global function gtk_print_settings_set_dither(settings: *GtkPrintSettings, dither: cstring): void <cimport,nodecl> end
global function gtk_print_settings_get_finishings(settings: *GtkPrintSettings): cstring <cimport,nodecl> end
global function gtk_print_settings_set_finishings(settings: *GtkPrintSettings, finishings: cstring): void <cimport,nodecl> end
global function gtk_print_settings_get_output_bin(settings: *GtkPrintSettings): cstring <cimport,nodecl> end
global function gtk_print_settings_set_output_bin(settings: *GtkPrintSettings, output_bin: cstring): void <cimport,nodecl> end
global function gtk_print_settings_to_gvariant(settings: *GtkPrintSettings): *GVariant <cimport,nodecl> end
global function gtk_print_settings_new_from_gvariant(variant: *GVariant): *GtkPrintSettings <cimport,nodecl> end
global function gtk_print_operation_preview_get_type(): GType <cimport,nodecl> end
global function gtk_print_operation_preview_render_page(preview: *GtkPrintOperationPreview, page_nr: cint): void <cimport,nodecl> end
global function gtk_print_operation_preview_end_preview(preview: *GtkPrintOperationPreview): void <cimport,nodecl> end
global function gtk_print_operation_preview_is_selected(preview: *GtkPrintOperationPreview, page_nr: cint): gboolean <cimport,nodecl> end
global function gtk_print_error_quark(): GQuark <cimport,nodecl> end
global function gtk_print_operation_get_type(): GType <cimport,nodecl> end
global function gtk_print_operation_new(): *GtkPrintOperation <cimport,nodecl> end
global function gtk_print_operation_set_default_page_setup(op: *GtkPrintOperation, default_page_setup: *GtkPageSetup): void <cimport,nodecl> end
global function gtk_print_operation_get_default_page_setup(op: *GtkPrintOperation): *GtkPageSetup <cimport,nodecl> end
global function gtk_print_operation_set_print_settings(op: *GtkPrintOperation, print_settings: *GtkPrintSettings): void <cimport,nodecl> end
global function gtk_print_operation_get_print_settings(op: *GtkPrintOperation): *GtkPrintSettings <cimport,nodecl> end
global function gtk_print_operation_set_job_name(op: *GtkPrintOperation, job_name: cstring): void <cimport,nodecl> end
global function gtk_print_operation_set_n_pages(op: *GtkPrintOperation, n_pages: cint): void <cimport,nodecl> end
global function gtk_print_operation_set_current_page(op: *GtkPrintOperation, current_page: cint): void <cimport,nodecl> end
global function gtk_print_operation_set_use_full_page(op: *GtkPrintOperation, full_page: gboolean): void <cimport,nodecl> end
global function gtk_print_operation_set_unit(op: *GtkPrintOperation, unit: GtkUnit): void <cimport,nodecl> end
global function gtk_print_operation_set_export_filename(op: *GtkPrintOperation, filename: cstring): void <cimport,nodecl> end
global function gtk_print_operation_set_track_print_status(op: *GtkPrintOperation, track_status: gboolean): void <cimport,nodecl> end
global function gtk_print_operation_set_show_progress(op: *GtkPrintOperation, show_progress: gboolean): void <cimport,nodecl> end
global function gtk_print_operation_set_allow_async(op: *GtkPrintOperation, allow_async: gboolean): void <cimport,nodecl> end
global function gtk_print_operation_set_custom_tab_label(op: *GtkPrintOperation, label: cstring): void <cimport,nodecl> end
global function gtk_print_operation_run(op: *GtkPrintOperation, action: GtkPrintOperationAction, parent: *GtkWindow, error: **GError): GtkPrintOperationResult <cimport,nodecl> end
global function gtk_print_operation_get_error(op: *GtkPrintOperation, error: **GError): void <cimport,nodecl> end
global function gtk_print_operation_get_status(op: *GtkPrintOperation): GtkPrintStatus <cimport,nodecl> end
global function gtk_print_operation_get_status_string(op: *GtkPrintOperation): cstring <cimport,nodecl> end
global function gtk_print_operation_is_finished(op: *GtkPrintOperation): gboolean <cimport,nodecl> end
global function gtk_print_operation_cancel(op: *GtkPrintOperation): void <cimport,nodecl> end
global function gtk_print_operation_draw_page_finish(op: *GtkPrintOperation): void <cimport,nodecl> end
global function gtk_print_operation_set_defer_drawing(op: *GtkPrintOperation): void <cimport,nodecl> end
global function gtk_print_operation_set_support_selection(op: *GtkPrintOperation, support_selection: gboolean): void <cimport,nodecl> end
global function gtk_print_operation_get_support_selection(op: *GtkPrintOperation): gboolean <cimport,nodecl> end
global function gtk_print_operation_set_has_selection(op: *GtkPrintOperation, has_selection: gboolean): void <cimport,nodecl> end
global function gtk_print_operation_get_has_selection(op: *GtkPrintOperation): gboolean <cimport,nodecl> end
global function gtk_print_operation_set_embed_page_setup(op: *GtkPrintOperation, embed: gboolean): void <cimport,nodecl> end
global function gtk_print_operation_get_embed_page_setup(op: *GtkPrintOperation): gboolean <cimport,nodecl> end
global function gtk_print_operation_get_n_pages_to_print(op: *GtkPrintOperation): cint <cimport,nodecl> end
global function gtk_print_run_page_setup_dialog(parent: *GtkWindow, page_setup: *GtkPageSetup, settings: *GtkPrintSettings): *GtkPageSetup <cimport,nodecl> end
global function gtk_print_run_page_setup_dialog_async(parent: *GtkWindow, page_setup: *GtkPageSetup, settings: *GtkPrintSettings, done_cb: GtkPageSetupDoneFunc, data: gpointer): void <cimport,nodecl> end
global function gtk_progress_bar_get_type(): GType <cimport,nodecl> end
global function gtk_progress_bar_new(): *GtkWidget <cimport,nodecl> end
global function gtk_progress_bar_pulse(pbar: *GtkProgressBar): void <cimport,nodecl> end
global function gtk_progress_bar_set_text(pbar: *GtkProgressBar, text: cstring): void <cimport,nodecl> end
global function gtk_progress_bar_set_fraction(pbar: *GtkProgressBar, fraction: float64): void <cimport,nodecl> end
global function gtk_progress_bar_set_pulse_step(pbar: *GtkProgressBar, fraction: float64): void <cimport,nodecl> end
global function gtk_progress_bar_set_inverted(pbar: *GtkProgressBar, inverted: gboolean): void <cimport,nodecl> end
global function gtk_progress_bar_get_text(pbar: *GtkProgressBar): cstring <cimport,nodecl> end
global function gtk_progress_bar_get_fraction(pbar: *GtkProgressBar): float64 <cimport,nodecl> end
global function gtk_progress_bar_get_pulse_step(pbar: *GtkProgressBar): float64 <cimport,nodecl> end
global function gtk_progress_bar_get_inverted(pbar: *GtkProgressBar): gboolean <cimport,nodecl> end
global function gtk_progress_bar_set_ellipsize(pbar: *GtkProgressBar, mode: PangoEllipsizeMode): void <cimport,nodecl> end
global function gtk_progress_bar_get_ellipsize(pbar: *GtkProgressBar): PangoEllipsizeMode <cimport,nodecl> end
global function gtk_progress_bar_set_show_text(pbar: *GtkProgressBar, show_text: gboolean): void <cimport,nodecl> end
global function gtk_progress_bar_get_show_text(pbar: *GtkProgressBar): gboolean <cimport,nodecl> end
global function gtk_range_get_type(): GType <cimport,nodecl> end
global function gtk_range_set_adjustment(range: *GtkRange, adjustment: *GtkAdjustment): void <cimport,nodecl> end
global function gtk_range_get_adjustment(range: *GtkRange): *GtkAdjustment <cimport,nodecl> end
global function gtk_range_set_inverted(range: *GtkRange, setting: gboolean): void <cimport,nodecl> end
global function gtk_range_get_inverted(range: *GtkRange): gboolean <cimport,nodecl> end
global function gtk_range_set_flippable(range: *GtkRange, flippable: gboolean): void <cimport,nodecl> end
global function gtk_range_get_flippable(range: *GtkRange): gboolean <cimport,nodecl> end
global function gtk_range_set_slider_size_fixed(range: *GtkRange, size_fixed: gboolean): void <cimport,nodecl> end
global function gtk_range_get_slider_size_fixed(range: *GtkRange): gboolean <cimport,nodecl> end
global function gtk_range_get_range_rect(range: *GtkRange, range_rect: *GdkRectangle): void <cimport,nodecl> end
global function gtk_range_get_slider_range(range: *GtkRange, slider_start: *cint, slider_end: *cint): void <cimport,nodecl> end
global function gtk_range_set_increments(range: *GtkRange, step: float64, page: float64): void <cimport,nodecl> end
global function gtk_range_set_range(range: *GtkRange, min: float64, max: float64): void <cimport,nodecl> end
global function gtk_range_set_value(range: *GtkRange, value: float64): void <cimport,nodecl> end
global function gtk_range_get_value(range: *GtkRange): float64 <cimport,nodecl> end
global function gtk_range_set_show_fill_level(range: *GtkRange, show_fill_level: gboolean): void <cimport,nodecl> end
global function gtk_range_get_show_fill_level(range: *GtkRange): gboolean <cimport,nodecl> end
global function gtk_range_set_restrict_to_fill_level(range: *GtkRange, restrict_to_fill_level: gboolean): void <cimport,nodecl> end
global function gtk_range_get_restrict_to_fill_level(range: *GtkRange): gboolean <cimport,nodecl> end
global function gtk_range_set_fill_level(range: *GtkRange, fill_level: float64): void <cimport,nodecl> end
global function gtk_range_get_fill_level(range: *GtkRange): float64 <cimport,nodecl> end
global function gtk_range_set_round_digits(range: *GtkRange, round_digits: cint): void <cimport,nodecl> end
global function gtk_range_get_round_digits(range: *GtkRange): cint <cimport,nodecl> end
global function gtk_recent_manager_error_quark(): GQuark <cimport,nodecl> end
global function gtk_recent_manager_get_type(): GType <cimport,nodecl> end
global function gtk_recent_manager_new(): *GtkRecentManager <cimport,nodecl> end
global function gtk_recent_manager_get_default(): *GtkRecentManager <cimport,nodecl> end
global function gtk_recent_manager_add_item(manager: *GtkRecentManager, uri: cstring): gboolean <cimport,nodecl> end
global function gtk_recent_manager_add_full(manager: *GtkRecentManager, uri: cstring, recent_data: *GtkRecentData): gboolean <cimport,nodecl> end
global function gtk_recent_manager_remove_item(manager: *GtkRecentManager, uri: cstring, error: **GError): gboolean <cimport,nodecl> end
global function gtk_recent_manager_lookup_item(manager: *GtkRecentManager, uri: cstring, error: **GError): *GtkRecentInfo <cimport,nodecl> end
global function gtk_recent_manager_has_item(manager: *GtkRecentManager, uri: cstring): gboolean <cimport,nodecl> end
global function gtk_recent_manager_move_item(manager: *GtkRecentManager, uri: cstring, new_uri: cstring, error: **GError): gboolean <cimport,nodecl> end
global function gtk_recent_manager_get_items(manager: *GtkRecentManager): *GList <cimport,nodecl> end
global function gtk_recent_manager_purge_items(manager: *GtkRecentManager, error: **GError): cint <cimport,nodecl> end
global function gtk_recent_info_get_type(): GType <cimport,nodecl> end
global function gtk_recent_info_ref(info: *GtkRecentInfo): *GtkRecentInfo <cimport,nodecl> end
global function gtk_recent_info_unref(info: *GtkRecentInfo): void <cimport,nodecl> end
global function gtk_recent_info_get_uri(info: *GtkRecentInfo): cstring <cimport,nodecl> end
global function gtk_recent_info_get_display_name(info: *GtkRecentInfo): cstring <cimport,nodecl> end
global function gtk_recent_info_get_description(info: *GtkRecentInfo): cstring <cimport,nodecl> end
global function gtk_recent_info_get_mime_type(info: *GtkRecentInfo): cstring <cimport,nodecl> end
global function gtk_recent_info_get_added(info: *GtkRecentInfo): *GDateTime <cimport,nodecl> end
global function gtk_recent_info_get_modified(info: *GtkRecentInfo): *GDateTime <cimport,nodecl> end
global function gtk_recent_info_get_visited(info: *GtkRecentInfo): *GDateTime <cimport,nodecl> end
global function gtk_recent_info_get_private_hint(info: *GtkRecentInfo): gboolean <cimport,nodecl> end
global function gtk_recent_info_get_application_info(info: *GtkRecentInfo, app_name: cstring, app_exec: *cstring, count: *guint, stamp: **GDateTime): gboolean <cimport,nodecl> end
global function gtk_recent_info_create_app_info(info: *GtkRecentInfo, app_name: cstring, error: **GError): *GAppInfo <cimport,nodecl> end
global function gtk_recent_info_get_applications(info: *GtkRecentInfo, length: *gsize): *cstring <cimport,nodecl> end
global function gtk_recent_info_last_application(info: *GtkRecentInfo): cstring <cimport,nodecl> end
global function gtk_recent_info_has_application(info: *GtkRecentInfo, app_name: cstring): gboolean <cimport,nodecl> end
global function gtk_recent_info_get_groups(info: *GtkRecentInfo, length: *gsize): *cstring <cimport,nodecl> end
global function gtk_recent_info_has_group(info: *GtkRecentInfo, group_name: cstring): gboolean <cimport,nodecl> end
global function gtk_recent_info_get_gicon(info: *GtkRecentInfo): *GIcon <cimport,nodecl> end
global function gtk_recent_info_get_short_name(info: *GtkRecentInfo): cstring <cimport,nodecl> end
global function gtk_recent_info_get_uri_display(info: *GtkRecentInfo): cstring <cimport,nodecl> end
global function gtk_recent_info_get_age(info: *GtkRecentInfo): cint <cimport,nodecl> end
global function gtk_recent_info_is_local(info: *GtkRecentInfo): gboolean <cimport,nodecl> end
global function gtk_recent_info_exists(info: *GtkRecentInfo): gboolean <cimport,nodecl> end
global function gtk_recent_info_match(info_a: *GtkRecentInfo, info_b: *GtkRecentInfo): gboolean <cimport,nodecl> end
global function _gtk_recent_manager_sync(): void <cimport,nodecl> end
global function gtk_render_check(context: *GtkStyleContext, cr: *cairo_t, x: float64, y: float64, width: float64, height: float64): void <cimport,nodecl> end
global function gtk_render_option(context: *GtkStyleContext, cr: *cairo_t, x: float64, y: float64, width: float64, height: float64): void <cimport,nodecl> end
global function gtk_render_arrow(context: *GtkStyleContext, cr: *cairo_t, angle: float64, x: float64, y: float64, size: float64): void <cimport,nodecl> end
global function gtk_render_background(context: *GtkStyleContext, cr: *cairo_t, x: float64, y: float64, width: float64, height: float64): void <cimport,nodecl> end
global function gtk_render_frame(context: *GtkStyleContext, cr: *cairo_t, x: float64, y: float64, width: float64, height: float64): void <cimport,nodecl> end
global function gtk_render_expander(context: *GtkStyleContext, cr: *cairo_t, x: float64, y: float64, width: float64, height: float64): void <cimport,nodecl> end
global function gtk_render_focus(context: *GtkStyleContext, cr: *cairo_t, x: float64, y: float64, width: float64, height: float64): void <cimport,nodecl> end
global function gtk_render_layout(context: *GtkStyleContext, cr: *cairo_t, x: float64, y: float64, layout: *PangoLayout): void <cimport,nodecl> end
global function gtk_render_line(context: *GtkStyleContext, cr: *cairo_t, x0: float64, y0: float64, x1: float64, y1: float64): void <cimport,nodecl> end
global function gtk_render_handle(context: *GtkStyleContext, cr: *cairo_t, x: float64, y: float64, width: float64, height: float64): void <cimport,nodecl> end
global function gtk_render_activity(context: *GtkStyleContext, cr: *cairo_t, x: float64, y: float64, width: float64, height: float64): void <cimport,nodecl> end
global function gtk_render_icon(context: *GtkStyleContext, cr: *cairo_t, texture: *GdkTexture, x: float64, y: float64): void <cimport,nodecl> end
global function gtk_revealer_get_type(): GType <cimport,nodecl> end
global function gtk_revealer_new(): *GtkWidget <cimport,nodecl> end
global function gtk_revealer_get_reveal_child(revealer: *GtkRevealer): gboolean <cimport,nodecl> end
global function gtk_revealer_set_reveal_child(revealer: *GtkRevealer, reveal_child: gboolean): void <cimport,nodecl> end
global function gtk_revealer_get_child_revealed(revealer: *GtkRevealer): gboolean <cimport,nodecl> end
global function gtk_revealer_get_transition_duration(revealer: *GtkRevealer): guint <cimport,nodecl> end
global function gtk_revealer_set_transition_duration(revealer: *GtkRevealer, duration: guint): void <cimport,nodecl> end
global function gtk_revealer_set_transition_type(revealer: *GtkRevealer, transition: GtkRevealerTransitionType): void <cimport,nodecl> end
global function gtk_revealer_get_transition_type(revealer: *GtkRevealer): GtkRevealerTransitionType <cimport,nodecl> end
global function gtk_revealer_set_child(revealer: *GtkRevealer, child: *GtkWidget): void <cimport,nodecl> end
global function gtk_revealer_get_child(revealer: *GtkRevealer): *GtkWidget <cimport,nodecl> end
global function gtk_root_get_type(): GType <cimport,nodecl> end
global function glib_autoptr_clear_GtkRoot(_ptr: *GtkRoot): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GtkRoot(_ptr: **GtkRoot): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GtkRoot(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GtkRoot(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GtkRoot(_q: **GQueue): void <cimport,nodecl> end
global function GTK_ROOT(ptr: gpointer): *GtkRoot <cimport,nodecl> end
global function GTK_IS_ROOT(ptr: gpointer): gboolean <cimport,nodecl> end
global function GTK_ROOT_GET_IFACE(ptr: gpointer): *GtkRootInterface <cimport,nodecl> end
global function gtk_root_get_display(self: *GtkRoot): *GdkDisplay <cimport,nodecl> end
global function gtk_root_set_focus(self: *GtkRoot, focus: *GtkWidget): void <cimport,nodecl> end
global function gtk_root_get_focus(self: *GtkRoot): *GtkWidget <cimport,nodecl> end
global function gtk_scale_get_type(): GType <cimport,nodecl> end
global function gtk_scale_new(orientation: GtkOrientation, adjustment: *GtkAdjustment): *GtkWidget <cimport,nodecl> end
global function gtk_scale_new_with_range(orientation: GtkOrientation, min: float64, max: float64, step: float64): *GtkWidget <cimport,nodecl> end
global function gtk_scale_set_digits(scale: *GtkScale, digits: cint): void <cimport,nodecl> end
global function gtk_scale_get_digits(scale: *GtkScale): cint <cimport,nodecl> end
global function gtk_scale_set_draw_value(scale: *GtkScale, draw_value: gboolean): void <cimport,nodecl> end
global function gtk_scale_get_draw_value(scale: *GtkScale): gboolean <cimport,nodecl> end
global function gtk_scale_set_has_origin(scale: *GtkScale, has_origin: gboolean): void <cimport,nodecl> end
global function gtk_scale_get_has_origin(scale: *GtkScale): gboolean <cimport,nodecl> end
global function gtk_scale_set_value_pos(scale: *GtkScale, pos: GtkPositionType): void <cimport,nodecl> end
global function gtk_scale_get_value_pos(scale: *GtkScale): GtkPositionType <cimport,nodecl> end
global function gtk_scale_get_layout(scale: *GtkScale): *PangoLayout <cimport,nodecl> end
global function gtk_scale_get_layout_offsets(scale: *GtkScale, x: *cint, y: *cint): void <cimport,nodecl> end
global function gtk_scale_add_mark(scale: *GtkScale, value: float64, position: GtkPositionType, markup: cstring): void <cimport,nodecl> end
global function gtk_scale_clear_marks(scale: *GtkScale): void <cimport,nodecl> end
global function gtk_scale_set_format_value_func(scale: *GtkScale, func: GtkScaleFormatValueFunc, user_data: gpointer, destroy_notify: GDestroyNotify): void <cimport,nodecl> end
global function gtk_scale_button_get_type(): GType <cimport,nodecl> end
global function gtk_scale_button_new(min: float64, max: float64, step: float64, icons: *cstring): *GtkWidget <cimport,nodecl> end
global function gtk_scale_button_set_icons(button: *GtkScaleButton, icons: *cstring): void <cimport,nodecl> end
global function gtk_scale_button_get_value(button: *GtkScaleButton): float64 <cimport,nodecl> end
global function gtk_scale_button_set_value(button: *GtkScaleButton, value: float64): void <cimport,nodecl> end
global function gtk_scale_button_get_adjustment(button: *GtkScaleButton): *GtkAdjustment <cimport,nodecl> end
global function gtk_scale_button_set_adjustment(button: *GtkScaleButton, adjustment: *GtkAdjustment): void <cimport,nodecl> end
global function gtk_scale_button_get_plus_button(button: *GtkScaleButton): *GtkWidget <cimport,nodecl> end
global function gtk_scale_button_get_minus_button(button: *GtkScaleButton): *GtkWidget <cimport,nodecl> end
global function gtk_scale_button_get_popup(button: *GtkScaleButton): *GtkWidget <cimport,nodecl> end
global function gtk_scrollable_get_type(): GType <cimport,nodecl> end
global function gtk_scrollable_get_hadjustment(scrollable: *GtkScrollable): *GtkAdjustment <cimport,nodecl> end
global function gtk_scrollable_set_hadjustment(scrollable: *GtkScrollable, hadjustment: *GtkAdjustment): void <cimport,nodecl> end
global function gtk_scrollable_get_vadjustment(scrollable: *GtkScrollable): *GtkAdjustment <cimport,nodecl> end
global function gtk_scrollable_set_vadjustment(scrollable: *GtkScrollable, vadjustment: *GtkAdjustment): void <cimport,nodecl> end
global function gtk_scrollable_get_hscroll_policy(scrollable: *GtkScrollable): GtkScrollablePolicy <cimport,nodecl> end
global function gtk_scrollable_set_hscroll_policy(scrollable: *GtkScrollable, policy: GtkScrollablePolicy): void <cimport,nodecl> end
global function gtk_scrollable_get_vscroll_policy(scrollable: *GtkScrollable): GtkScrollablePolicy <cimport,nodecl> end
global function gtk_scrollable_set_vscroll_policy(scrollable: *GtkScrollable, policy: GtkScrollablePolicy): void <cimport,nodecl> end
global function gtk_scrollable_get_border(scrollable: *GtkScrollable, border: *GtkBorder): gboolean <cimport,nodecl> end
global function gtk_scrollbar_get_type(): GType <cimport,nodecl> end
global function gtk_scrollbar_new(orientation: GtkOrientation, adjustment: *GtkAdjustment): *GtkWidget <cimport,nodecl> end
global function gtk_scrollbar_set_adjustment(self: *GtkScrollbar, adjustment: *GtkAdjustment): void <cimport,nodecl> end
global function gtk_scrollbar_get_adjustment(self: *GtkScrollbar): *GtkAdjustment <cimport,nodecl> end
global function gtk_scrolled_window_get_type(): GType <cimport,nodecl> end
global function gtk_scrolled_window_new(): *GtkWidget <cimport,nodecl> end
global function gtk_scrolled_window_set_hadjustment(scrolled_window: *GtkScrolledWindow, hadjustment: *GtkAdjustment): void <cimport,nodecl> end
global function gtk_scrolled_window_set_vadjustment(scrolled_window: *GtkScrolledWindow, vadjustment: *GtkAdjustment): void <cimport,nodecl> end
global function gtk_scrolled_window_get_hadjustment(scrolled_window: *GtkScrolledWindow): *GtkAdjustment <cimport,nodecl> end
global function gtk_scrolled_window_get_vadjustment(scrolled_window: *GtkScrolledWindow): *GtkAdjustment <cimport,nodecl> end
global function gtk_scrolled_window_get_hscrollbar(scrolled_window: *GtkScrolledWindow): *GtkWidget <cimport,nodecl> end
global function gtk_scrolled_window_get_vscrollbar(scrolled_window: *GtkScrolledWindow): *GtkWidget <cimport,nodecl> end
global function gtk_scrolled_window_set_policy(scrolled_window: *GtkScrolledWindow, hscrollbar_policy: GtkPolicyType, vscrollbar_policy: GtkPolicyType): void <cimport,nodecl> end
global function gtk_scrolled_window_get_policy(scrolled_window: *GtkScrolledWindow, hscrollbar_policy: *GtkPolicyType, vscrollbar_policy: *GtkPolicyType): void <cimport,nodecl> end
global function gtk_scrolled_window_set_placement(scrolled_window: *GtkScrolledWindow, window_placement: GtkCornerType): void <cimport,nodecl> end
global function gtk_scrolled_window_unset_placement(scrolled_window: *GtkScrolledWindow): void <cimport,nodecl> end
global function gtk_scrolled_window_get_placement(scrolled_window: *GtkScrolledWindow): GtkCornerType <cimport,nodecl> end
global function gtk_scrolled_window_set_has_frame(scrolled_window: *GtkScrolledWindow, has_frame: gboolean): void <cimport,nodecl> end
global function gtk_scrolled_window_get_has_frame(scrolled_window: *GtkScrolledWindow): gboolean <cimport,nodecl> end
global function gtk_scrolled_window_get_min_content_width(scrolled_window: *GtkScrolledWindow): cint <cimport,nodecl> end
global function gtk_scrolled_window_set_min_content_width(scrolled_window: *GtkScrolledWindow, width: cint): void <cimport,nodecl> end
global function gtk_scrolled_window_get_min_content_height(scrolled_window: *GtkScrolledWindow): cint <cimport,nodecl> end
global function gtk_scrolled_window_set_min_content_height(scrolled_window: *GtkScrolledWindow, height: cint): void <cimport,nodecl> end
global function gtk_scrolled_window_set_kinetic_scrolling(scrolled_window: *GtkScrolledWindow, kinetic_scrolling: gboolean): void <cimport,nodecl> end
global function gtk_scrolled_window_get_kinetic_scrolling(scrolled_window: *GtkScrolledWindow): gboolean <cimport,nodecl> end
global function gtk_scrolled_window_set_overlay_scrolling(scrolled_window: *GtkScrolledWindow, overlay_scrolling: gboolean): void <cimport,nodecl> end
global function gtk_scrolled_window_get_overlay_scrolling(scrolled_window: *GtkScrolledWindow): gboolean <cimport,nodecl> end
global function gtk_scrolled_window_set_max_content_width(scrolled_window: *GtkScrolledWindow, width: cint): void <cimport,nodecl> end
global function gtk_scrolled_window_get_max_content_width(scrolled_window: *GtkScrolledWindow): cint <cimport,nodecl> end
global function gtk_scrolled_window_set_max_content_height(scrolled_window: *GtkScrolledWindow, height: cint): void <cimport,nodecl> end
global function gtk_scrolled_window_get_max_content_height(scrolled_window: *GtkScrolledWindow): cint <cimport,nodecl> end
global function gtk_scrolled_window_set_propagate_natural_width(scrolled_window: *GtkScrolledWindow, propagate: gboolean): void <cimport,nodecl> end
global function gtk_scrolled_window_get_propagate_natural_width(scrolled_window: *GtkScrolledWindow): gboolean <cimport,nodecl> end
global function gtk_scrolled_window_set_propagate_natural_height(scrolled_window: *GtkScrolledWindow, propagate: gboolean): void <cimport,nodecl> end
global function gtk_scrolled_window_get_propagate_natural_height(scrolled_window: *GtkScrolledWindow): gboolean <cimport,nodecl> end
global function gtk_scrolled_window_set_child(scrolled_window: *GtkScrolledWindow, child: *GtkWidget): void <cimport,nodecl> end
global function gtk_scrolled_window_get_child(scrolled_window: *GtkScrolledWindow): *GtkWidget <cimport,nodecl> end
global function gtk_search_bar_get_type(): GType <cimport,nodecl> end
global function gtk_search_bar_new(): *GtkWidget <cimport,nodecl> end
global function gtk_search_bar_connect_entry(bar: *GtkSearchBar, entry: *GtkEditable): void <cimport,nodecl> end
global function gtk_search_bar_get_search_mode(bar: *GtkSearchBar): gboolean <cimport,nodecl> end
global function gtk_search_bar_set_search_mode(bar: *GtkSearchBar, search_mode: gboolean): void <cimport,nodecl> end
global function gtk_search_bar_get_show_close_button(bar: *GtkSearchBar): gboolean <cimport,nodecl> end
global function gtk_search_bar_set_show_close_button(bar: *GtkSearchBar, visible: gboolean): void <cimport,nodecl> end
global function gtk_search_bar_set_key_capture_widget(bar: *GtkSearchBar, widget: *GtkWidget): void <cimport,nodecl> end
global function gtk_search_bar_get_key_capture_widget(bar: *GtkSearchBar): *GtkWidget <cimport,nodecl> end
global function gtk_search_bar_set_child(bar: *GtkSearchBar, child: *GtkWidget): void <cimport,nodecl> end
global function gtk_search_bar_get_child(bar: *GtkSearchBar): *GtkWidget <cimport,nodecl> end
global function gtk_search_entry_get_type(): GType <cimport,nodecl> end
global function gtk_search_entry_new(): *GtkWidget <cimport,nodecl> end
global function gtk_search_entry_set_key_capture_widget(entry: *GtkSearchEntry, widget: *GtkWidget): void <cimport,nodecl> end
global function gtk_search_entry_get_key_capture_widget(entry: *GtkSearchEntry): *GtkWidget <cimport,nodecl> end
global function gtk_selection_filter_model_get_type(): GType <cimport,nodecl> end
global function glib_autoptr_clear_GtkSelectionFilterModel(_ptr: *GtkSelectionFilterModel): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GtkSelectionFilterModel(_ptr: **GtkSelectionFilterModel): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GtkSelectionFilterModel(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GtkSelectionFilterModel(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GtkSelectionFilterModel(_q: **GQueue): void <cimport,nodecl> end
global function glib_autoptr_clear_GtkSelectionFilterModelClass(_ptr: *GtkSelectionFilterModelClass): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GtkSelectionFilterModelClass(_ptr: **GtkSelectionFilterModelClass): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GtkSelectionFilterModelClass(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GtkSelectionFilterModelClass(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GtkSelectionFilterModelClass(_q: **GQueue): void <cimport,nodecl> end
global function GTK_SELECTION_FILTER_MODEL(ptr: gpointer): *GtkSelectionFilterModel <cimport,nodecl> end
global function GTK_IS_SELECTION_FILTER_MODEL(ptr: gpointer): gboolean <cimport,nodecl> end
global function gtk_selection_filter_model_new(model: *GtkSelectionModel): *GtkSelectionFilterModel <cimport,nodecl> end
global function gtk_selection_filter_model_set_model(self: *GtkSelectionFilterModel, model: *GtkSelectionModel): void <cimport,nodecl> end
global function gtk_selection_filter_model_get_model(self: *GtkSelectionFilterModel): *GtkSelectionModel <cimport,nodecl> end
global function gtk_separator_get_type(): GType <cimport,nodecl> end
global function gtk_separator_new(orientation: GtkOrientation): *GtkWidget <cimport,nodecl> end
global function gtk_settings_get_type(): GType <cimport,nodecl> end
global function gtk_settings_get_default(): *GtkSettings <cimport,nodecl> end
global function gtk_settings_get_for_display(display: *GdkDisplay): *GtkSettings <cimport,nodecl> end
global function gtk_settings_reset_property(settings: *GtkSettings, name: cstring): void <cimport,nodecl> end
global function gtk_shortcut_controller_get_type(): GType <cimport,nodecl> end
global function gtk_shortcut_controller_new(): *GtkEventController <cimport,nodecl> end
global function gtk_shortcut_controller_new_for_model(model: *GListModel): *GtkEventController <cimport,nodecl> end
global function gtk_shortcut_controller_set_mnemonics_modifiers(self: *GtkShortcutController, modifiers: GdkModifierType): void <cimport,nodecl> end
global function gtk_shortcut_controller_get_mnemonics_modifiers(self: *GtkShortcutController): GdkModifierType <cimport,nodecl> end
global function gtk_shortcut_controller_set_scope(self: *GtkShortcutController, scope: GtkShortcutScope): void <cimport,nodecl> end
global function gtk_shortcut_controller_get_scope(self: *GtkShortcutController): GtkShortcutScope <cimport,nodecl> end
global function gtk_shortcut_controller_add_shortcut(self: *GtkShortcutController, shortcut: *GtkShortcut): void <cimport,nodecl> end
global function gtk_shortcut_controller_remove_shortcut(self: *GtkShortcutController, shortcut: *GtkShortcut): void <cimport,nodecl> end
global function gtk_shortcut_label_get_type(): GType <cimport,nodecl> end
global function gtk_shortcut_label_new(accelerator: cstring): *GtkWidget <cimport,nodecl> end
global function gtk_shortcut_label_get_accelerator(self: *GtkShortcutLabel): cstring <cimport,nodecl> end
global function gtk_shortcut_label_set_accelerator(self: *GtkShortcutLabel, accelerator: cstring): void <cimport,nodecl> end
global function gtk_shortcut_label_get_disabled_text(self: *GtkShortcutLabel): cstring <cimport,nodecl> end
global function gtk_shortcut_label_set_disabled_text(self: *GtkShortcutLabel, disabled_text: cstring): void <cimport,nodecl> end
global function gtk_shortcut_manager_get_type(): GType <cimport,nodecl> end
global function glib_autoptr_clear_GtkShortcutManager(_ptr: *GtkShortcutManager): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GtkShortcutManager(_ptr: **GtkShortcutManager): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GtkShortcutManager(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GtkShortcutManager(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GtkShortcutManager(_q: **GQueue): void <cimport,nodecl> end
global function GTK_SHORTCUT_MANAGER(ptr: gpointer): *GtkShortcutManager <cimport,nodecl> end
global function GTK_IS_SHORTCUT_MANAGER(ptr: gpointer): gboolean <cimport,nodecl> end
global function GTK_SHORTCUT_MANAGER_GET_IFACE(ptr: gpointer): *GtkShortcutManagerInterface <cimport,nodecl> end
global function gtk_shortcuts_group_get_type(): GType <cimport,nodecl> end
global function gtk_shortcuts_section_get_type(): GType <cimport,nodecl> end
global function gtk_shortcuts_shortcut_get_type(): GType <cimport,nodecl> end
global function gtk_shortcut_trigger_get_type(): GType <cimport,nodecl> end
global function glib_autoptr_clear_GtkShortcutTrigger(_ptr: *GtkShortcutTrigger): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GtkShortcutTrigger(_ptr: **GtkShortcutTrigger): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GtkShortcutTrigger(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GtkShortcutTrigger(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GtkShortcutTrigger(_q: **GQueue): void <cimport,nodecl> end
global function glib_autoptr_clear_GtkShortcutTriggerClass(_ptr: *GtkShortcutTriggerClass): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GtkShortcutTriggerClass(_ptr: **GtkShortcutTriggerClass): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GtkShortcutTriggerClass(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GtkShortcutTriggerClass(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GtkShortcutTriggerClass(_q: **GQueue): void <cimport,nodecl> end
global function GTK_SHORTCUT_TRIGGER(ptr: gpointer): *GtkShortcutTrigger <cimport,nodecl> end
global function GTK_SHORTCUT_TRIGGER_CLASS(ptr: gpointer): *GtkShortcutTriggerClass <cimport,nodecl> end
global function GTK_IS_SHORTCUT_TRIGGER(ptr: gpointer): gboolean <cimport,nodecl> end
global function GTK_IS_SHORTCUT_TRIGGER_CLASS(ptr: gpointer): gboolean <cimport,nodecl> end
global function GTK_SHORTCUT_TRIGGER_GET_CLASS(ptr: gpointer): *GtkShortcutTriggerClass <cimport,nodecl> end
global function gtk_shortcut_trigger_parse_string(string: cstring): *GtkShortcutTrigger <cimport,nodecl> end
global function gtk_shortcut_trigger_to_string(self: *GtkShortcutTrigger): cstring <cimport,nodecl> end
global function gtk_shortcut_trigger_print(self: *GtkShortcutTrigger, string: *GString): void <cimport,nodecl> end
global function gtk_shortcut_trigger_to_label(self: *GtkShortcutTrigger, display: *GdkDisplay): cstring <cimport,nodecl> end
global function gtk_shortcut_trigger_print_label(self: *GtkShortcutTrigger, display: *GdkDisplay, string: *GString): gboolean <cimport,nodecl> end
global function gtk_shortcut_trigger_hash(trigger: gconstpointer): guint <cimport,nodecl> end
global function gtk_shortcut_trigger_equal(trigger1: gconstpointer, trigger2: gconstpointer): gboolean <cimport,nodecl> end
global function gtk_shortcut_trigger_compare(trigger1: gconstpointer, trigger2: gconstpointer): cint <cimport,nodecl> end
global function gtk_shortcut_trigger_trigger(self: *GtkShortcutTrigger, event: *GdkEvent, enable_mnemonics: gboolean): GdkKeyMatch <cimport,nodecl> end
global function gtk_never_trigger_get_type(): GType <cimport,nodecl> end
global function glib_autoptr_clear_GtkNeverTrigger(_ptr: *GtkNeverTrigger): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GtkNeverTrigger(_ptr: **GtkNeverTrigger): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GtkNeverTrigger(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GtkNeverTrigger(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GtkNeverTrigger(_q: **GQueue): void <cimport,nodecl> end
global function glib_autoptr_clear_GtkNeverTriggerClass(_ptr: *GtkNeverTriggerClass): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GtkNeverTriggerClass(_ptr: **GtkNeverTriggerClass): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GtkNeverTriggerClass(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GtkNeverTriggerClass(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GtkNeverTriggerClass(_q: **GQueue): void <cimport,nodecl> end
global function GTK_NEVER_TRIGGER(ptr: gpointer): *GtkNeverTrigger <cimport,nodecl> end
global function GTK_NEVER_TRIGGER_CLASS(ptr: gpointer): *GtkNeverTriggerClass <cimport,nodecl> end
global function GTK_IS_NEVER_TRIGGER(ptr: gpointer): gboolean <cimport,nodecl> end
global function GTK_IS_NEVER_TRIGGER_CLASS(ptr: gpointer): gboolean <cimport,nodecl> end
global function GTK_NEVER_TRIGGER_GET_CLASS(ptr: gpointer): *GtkNeverTriggerClass <cimport,nodecl> end
global function gtk_never_trigger_get(): *GtkShortcutTrigger <cimport,nodecl> end
global function gtk_keyval_trigger_get_type(): GType <cimport,nodecl> end
global function glib_autoptr_clear_GtkKeyvalTrigger(_ptr: *GtkKeyvalTrigger): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GtkKeyvalTrigger(_ptr: **GtkKeyvalTrigger): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GtkKeyvalTrigger(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GtkKeyvalTrigger(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GtkKeyvalTrigger(_q: **GQueue): void <cimport,nodecl> end
global function glib_autoptr_clear_GtkKeyvalTriggerClass(_ptr: *GtkKeyvalTriggerClass): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GtkKeyvalTriggerClass(_ptr: **GtkKeyvalTriggerClass): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GtkKeyvalTriggerClass(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GtkKeyvalTriggerClass(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GtkKeyvalTriggerClass(_q: **GQueue): void <cimport,nodecl> end
global function GTK_KEYVAL_TRIGGER(ptr: gpointer): *GtkKeyvalTrigger <cimport,nodecl> end
global function GTK_KEYVAL_TRIGGER_CLASS(ptr: gpointer): *GtkKeyvalTriggerClass <cimport,nodecl> end
global function GTK_IS_KEYVAL_TRIGGER(ptr: gpointer): gboolean <cimport,nodecl> end
global function GTK_IS_KEYVAL_TRIGGER_CLASS(ptr: gpointer): gboolean <cimport,nodecl> end
global function GTK_KEYVAL_TRIGGER_GET_CLASS(ptr: gpointer): *GtkKeyvalTriggerClass <cimport,nodecl> end
global function gtk_keyval_trigger_new(keyval: guint, modifiers: GdkModifierType): *GtkShortcutTrigger <cimport,nodecl> end
global function gtk_keyval_trigger_get_modifiers(self: *GtkKeyvalTrigger): GdkModifierType <cimport,nodecl> end
global function gtk_keyval_trigger_get_keyval(self: *GtkKeyvalTrigger): guint <cimport,nodecl> end
global function gtk_mnemonic_trigger_get_type(): GType <cimport,nodecl> end
global function glib_autoptr_clear_GtkMnemonicTrigger(_ptr: *GtkMnemonicTrigger): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GtkMnemonicTrigger(_ptr: **GtkMnemonicTrigger): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GtkMnemonicTrigger(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GtkMnemonicTrigger(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GtkMnemonicTrigger(_q: **GQueue): void <cimport,nodecl> end
global function glib_autoptr_clear_GtkMnemonicTriggerClass(_ptr: *GtkMnemonicTriggerClass): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GtkMnemonicTriggerClass(_ptr: **GtkMnemonicTriggerClass): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GtkMnemonicTriggerClass(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GtkMnemonicTriggerClass(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GtkMnemonicTriggerClass(_q: **GQueue): void <cimport,nodecl> end
global function GTK_MNEMONIC_TRIGGER(ptr: gpointer): *GtkMnemonicTrigger <cimport,nodecl> end
global function GTK_MNEMONIC_TRIGGER_CLASS(ptr: gpointer): *GtkMnemonicTriggerClass <cimport,nodecl> end
global function GTK_IS_MNEMONIC_TRIGGER(ptr: gpointer): gboolean <cimport,nodecl> end
global function GTK_IS_MNEMONIC_TRIGGER_CLASS(ptr: gpointer): gboolean <cimport,nodecl> end
global function GTK_MNEMONIC_TRIGGER_GET_CLASS(ptr: gpointer): *GtkMnemonicTriggerClass <cimport,nodecl> end
global function gtk_mnemonic_trigger_new(keyval: guint): *GtkShortcutTrigger <cimport,nodecl> end
global function gtk_mnemonic_trigger_get_keyval(self: *GtkMnemonicTrigger): guint <cimport,nodecl> end
global function gtk_alternative_trigger_get_type(): GType <cimport,nodecl> end
global function glib_autoptr_clear_GtkAlternativeTrigger(_ptr: *GtkAlternativeTrigger): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GtkAlternativeTrigger(_ptr: **GtkAlternativeTrigger): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GtkAlternativeTrigger(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GtkAlternativeTrigger(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GtkAlternativeTrigger(_q: **GQueue): void <cimport,nodecl> end
global function glib_autoptr_clear_GtkAlternativeTriggerClass(_ptr: *GtkAlternativeTriggerClass): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GtkAlternativeTriggerClass(_ptr: **GtkAlternativeTriggerClass): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GtkAlternativeTriggerClass(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GtkAlternativeTriggerClass(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GtkAlternativeTriggerClass(_q: **GQueue): void <cimport,nodecl> end
global function GTK_ALTERNATIVE_TRIGGER(ptr: gpointer): *GtkAlternativeTrigger <cimport,nodecl> end
global function GTK_ALTERNATIVE_TRIGGER_CLASS(ptr: gpointer): *GtkAlternativeTriggerClass <cimport,nodecl> end
global function GTK_IS_ALTERNATIVE_TRIGGER(ptr: gpointer): gboolean <cimport,nodecl> end
global function GTK_IS_ALTERNATIVE_TRIGGER_CLASS(ptr: gpointer): gboolean <cimport,nodecl> end
global function GTK_ALTERNATIVE_TRIGGER_GET_CLASS(ptr: gpointer): *GtkAlternativeTriggerClass <cimport,nodecl> end
global function gtk_alternative_trigger_new(first: *GtkShortcutTrigger, second: *GtkShortcutTrigger): *GtkShortcutTrigger <cimport,nodecl> end
global function gtk_alternative_trigger_get_first(self: *GtkAlternativeTrigger): *GtkShortcutTrigger <cimport,nodecl> end
global function gtk_alternative_trigger_get_second(self: *GtkAlternativeTrigger): *GtkShortcutTrigger <cimport,nodecl> end
global function gtk_show_uri_full(parent: *GtkWindow, uri: cstring, timestamp: guint32, cancellable: *GCancellable, callback: GAsyncReadyCallback, user_data: gpointer): void <cimport,nodecl> end
global function gtk_show_uri_full_finish(parent: *GtkWindow, result: *GAsyncResult, error: **GError): gboolean <cimport,nodecl> end
global function gtk_show_uri(parent: *GtkWindow, uri: cstring, timestamp: guint32): void <cimport,nodecl> end
global function gtk_signal_list_item_factory_get_type(): GType <cimport,nodecl> end
global function gtk_signal_list_item_factory_new(): *GtkListItemFactory <cimport,nodecl> end
global function gtk_single_selection_get_type(): GType <cimport,nodecl> end
global function glib_autoptr_clear_GtkSingleSelection(_ptr: *GtkSingleSelection): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GtkSingleSelection(_ptr: **GtkSingleSelection): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GtkSingleSelection(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GtkSingleSelection(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GtkSingleSelection(_q: **GQueue): void <cimport,nodecl> end
global function glib_autoptr_clear_GtkSingleSelectionClass(_ptr: *GtkSingleSelectionClass): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GtkSingleSelectionClass(_ptr: **GtkSingleSelectionClass): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GtkSingleSelectionClass(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GtkSingleSelectionClass(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GtkSingleSelectionClass(_q: **GQueue): void <cimport,nodecl> end
global function GTK_SINGLE_SELECTION(ptr: gpointer): *GtkSingleSelection <cimport,nodecl> end
global function GTK_IS_SINGLE_SELECTION(ptr: gpointer): gboolean <cimport,nodecl> end
global function gtk_single_selection_new(model: *GListModel): *GtkSingleSelection <cimport,nodecl> end
global function gtk_single_selection_get_model(self: *GtkSingleSelection): *GListModel <cimport,nodecl> end
global function gtk_single_selection_set_model(self: *GtkSingleSelection, model: *GListModel): void <cimport,nodecl> end
global function gtk_single_selection_get_selected(self: *GtkSingleSelection): guint <cimport,nodecl> end
global function gtk_single_selection_set_selected(self: *GtkSingleSelection, position: guint): void <cimport,nodecl> end
global function gtk_single_selection_get_selected_item(self: *GtkSingleSelection): gpointer <cimport,nodecl> end
global function gtk_single_selection_get_autoselect(self: *GtkSingleSelection): gboolean <cimport,nodecl> end
global function gtk_single_selection_set_autoselect(self: *GtkSingleSelection, autoselect: gboolean): void <cimport,nodecl> end
global function gtk_single_selection_get_can_unselect(self: *GtkSingleSelection): gboolean <cimport,nodecl> end
global function gtk_single_selection_set_can_unselect(self: *GtkSingleSelection, can_unselect: gboolean): void <cimport,nodecl> end
global function gtk_slice_list_model_get_type(): GType <cimport,nodecl> end
global function glib_autoptr_clear_GtkSliceListModel(_ptr: *GtkSliceListModel): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GtkSliceListModel(_ptr: **GtkSliceListModel): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GtkSliceListModel(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GtkSliceListModel(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GtkSliceListModel(_q: **GQueue): void <cimport,nodecl> end
global function glib_autoptr_clear_GtkSliceListModelClass(_ptr: *GtkSliceListModelClass): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GtkSliceListModelClass(_ptr: **GtkSliceListModelClass): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GtkSliceListModelClass(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GtkSliceListModelClass(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GtkSliceListModelClass(_q: **GQueue): void <cimport,nodecl> end
global function GTK_SLICE_LIST_MODEL(ptr: gpointer): *GtkSliceListModel <cimport,nodecl> end
global function GTK_IS_SLICE_LIST_MODEL(ptr: gpointer): gboolean <cimport,nodecl> end
global function gtk_slice_list_model_new(model: *GListModel, offset: guint, size: guint): *GtkSliceListModel <cimport,nodecl> end
global function gtk_slice_list_model_set_model(self: *GtkSliceListModel, model: *GListModel): void <cimport,nodecl> end
global function gtk_slice_list_model_get_model(self: *GtkSliceListModel): *GListModel <cimport,nodecl> end
global function gtk_slice_list_model_set_offset(self: *GtkSliceListModel, offset: guint): void <cimport,nodecl> end
global function gtk_slice_list_model_get_offset(self: *GtkSliceListModel): guint <cimport,nodecl> end
global function gtk_slice_list_model_set_size(self: *GtkSliceListModel, size: guint): void <cimport,nodecl> end
global function gtk_slice_list_model_get_size(self: *GtkSliceListModel): guint <cimport,nodecl> end
global function glib_autoptr_clear_GtkSnapshot(_ptr: *GtkSnapshot): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GtkSnapshot(_ptr: **GtkSnapshot): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GtkSnapshot(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GtkSnapshot(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GtkSnapshot(_q: **GQueue): void <cimport,nodecl> end
global function gtk_snapshot_get_type(): GType <cimport,nodecl> end
global function gtk_snapshot_new(): *GtkSnapshot <cimport,nodecl> end
global function gtk_snapshot_free_to_node(snapshot: *GtkSnapshot): *GskRenderNode <cimport,nodecl> end
global function gtk_snapshot_free_to_paintable(snapshot: *GtkSnapshot, size: *graphene_size_t): *GdkPaintable <cimport,nodecl> end
global function gtk_snapshot_to_node(snapshot: *GtkSnapshot): *GskRenderNode <cimport,nodecl> end
global function gtk_snapshot_to_paintable(snapshot: *GtkSnapshot, size: *graphene_size_t): *GdkPaintable <cimport,nodecl> end
global function gtk_snapshot_push_debug(snapshot: *GtkSnapshot, message: cstring, ...: cvarargs): void <cimport,nodecl> end
global function gtk_snapshot_push_opacity(snapshot: *GtkSnapshot, opacity: float64): void <cimport,nodecl> end
global function gtk_snapshot_push_blur(snapshot: *GtkSnapshot, radius: float64): void <cimport,nodecl> end
global function gtk_snapshot_push_color_matrix(snapshot: *GtkSnapshot, color_matrix: *graphene_matrix_t, color_offset: *graphene_vec4_t): void <cimport,nodecl> end
global function gtk_snapshot_push_repeat(snapshot: *GtkSnapshot, bounds: *graphene_rect_t, child_bounds: *graphene_rect_t): void <cimport,nodecl> end
global function gtk_snapshot_push_clip(snapshot: *GtkSnapshot, bounds: *graphene_rect_t): void <cimport,nodecl> end
global function gtk_snapshot_push_rounded_clip(snapshot: *GtkSnapshot, bounds: *GskRoundedRect): void <cimport,nodecl> end
global function gtk_snapshot_push_shadow(snapshot: *GtkSnapshot, shadow: *GskShadow, n_shadows: gsize): void <cimport,nodecl> end
global function gtk_snapshot_push_blend(snapshot: *GtkSnapshot, blend_mode: GskBlendMode): void <cimport,nodecl> end
global function gtk_snapshot_push_cross_fade(snapshot: *GtkSnapshot, progress: float64): void <cimport,nodecl> end
global function gtk_snapshot_push_gl_shader(snapshot: *GtkSnapshot, shader: *GskGLShader, bounds: *graphene_rect_t, take_args: *GBytes): void <cimport,nodecl> end
global function gtk_snapshot_gl_shader_pop_texture(snapshot: *GtkSnapshot): void <cimport,nodecl> end
global function gtk_snapshot_pop(snapshot: *GtkSnapshot): void <cimport,nodecl> end
global function gtk_snapshot_save(snapshot: *GtkSnapshot): void <cimport,nodecl> end
global function gtk_snapshot_restore(snapshot: *GtkSnapshot): void <cimport,nodecl> end
global function gtk_snapshot_transform(snapshot: *GtkSnapshot, transform: *GskTransform): void <cimport,nodecl> end
global function gtk_snapshot_transform_matrix(snapshot: *GtkSnapshot, matrix: *graphene_matrix_t): void <cimport,nodecl> end
global function gtk_snapshot_translate(snapshot: *GtkSnapshot, point: *graphene_point_t): void <cimport,nodecl> end
global function gtk_snapshot_translate_3d(snapshot: *GtkSnapshot, point: *graphene_point3d_t): void <cimport,nodecl> end
global function gtk_snapshot_rotate(snapshot: *GtkSnapshot, angle: float32): void <cimport,nodecl> end
global function gtk_snapshot_rotate_3d(snapshot: *GtkSnapshot, angle: float32, axis: *graphene_vec3_t): void <cimport,nodecl> end
global function gtk_snapshot_scale(snapshot: *GtkSnapshot, factor_x: float32, factor_y: float32): void <cimport,nodecl> end
global function gtk_snapshot_scale_3d(snapshot: *GtkSnapshot, factor_x: float32, factor_y: float32, factor_z: float32): void <cimport,nodecl> end
global function gtk_snapshot_perspective(snapshot: *GtkSnapshot, depth: float32): void <cimport,nodecl> end
global function gtk_snapshot_append_node(snapshot: *GtkSnapshot, node: *GskRenderNode): void <cimport,nodecl> end
global function gtk_snapshot_append_cairo(snapshot: *GtkSnapshot, bounds: *graphene_rect_t): *cairo_t <cimport,nodecl> end
global function gtk_snapshot_append_texture(snapshot: *GtkSnapshot, texture: *GdkTexture, bounds: *graphene_rect_t): void <cimport,nodecl> end
global function gtk_snapshot_append_color(snapshot: *GtkSnapshot, color: *GdkRGBA, bounds: *graphene_rect_t): void <cimport,nodecl> end
global function gtk_snapshot_append_linear_gradient(snapshot: *GtkSnapshot, bounds: *graphene_rect_t, start_point: *graphene_point_t, end_point: *graphene_point_t, stops: *GskColorStop, n_stops: gsize): void <cimport,nodecl> end
global function gtk_snapshot_append_repeating_linear_gradient(snapshot: *GtkSnapshot, bounds: *graphene_rect_t, start_point: *graphene_point_t, end_point: *graphene_point_t, stops: *GskColorStop, n_stops: gsize): void <cimport,nodecl> end
global function gtk_snapshot_append_radial_gradient(snapshot: *GtkSnapshot, bounds: *graphene_rect_t, center: *graphene_point_t, hradius: float32, vradius: float32, start: float32, end_: float32, stops: *GskColorStop, n_stops: gsize): void <cimport,nodecl> end
global function gtk_snapshot_append_repeating_radial_gradient(snapshot: *GtkSnapshot, bounds: *graphene_rect_t, center: *graphene_point_t, hradius: float32, vradius: float32, start: float32, end_: float32, stops: *GskColorStop, n_stops: gsize): void <cimport,nodecl> end
global function gtk_snapshot_append_conic_gradient(snapshot: *GtkSnapshot, bounds: *graphene_rect_t, center: *graphene_point_t, rotation: float32, stops: *GskColorStop, n_stops: gsize): void <cimport,nodecl> end
global function gtk_snapshot_append_border(snapshot: *GtkSnapshot, outline: *GskRoundedRect, border_width: *[4]float32, border_color: *[4]GdkRGBA): void <cimport,nodecl> end
global function gtk_snapshot_append_inset_shadow(snapshot: *GtkSnapshot, outline: *GskRoundedRect, color: *GdkRGBA, dx: float32, dy: float32, spread: float32, blur_radius: float32): void <cimport,nodecl> end
global function gtk_snapshot_append_outset_shadow(snapshot: *GtkSnapshot, outline: *GskRoundedRect, color: *GdkRGBA, dx: float32, dy: float32, spread: float32, blur_radius: float32): void <cimport,nodecl> end
global function gtk_snapshot_append_layout(snapshot: *GtkSnapshot, layout: *PangoLayout, color: *GdkRGBA): void <cimport,nodecl> end
global function gtk_snapshot_render_background(snapshot: *GtkSnapshot, context: *GtkStyleContext, x: float64, y: float64, width: float64, height: float64): void <cimport,nodecl> end
global function gtk_snapshot_render_frame(snapshot: *GtkSnapshot, context: *GtkStyleContext, x: float64, y: float64, width: float64, height: float64): void <cimport,nodecl> end
global function gtk_snapshot_render_focus(snapshot: *GtkSnapshot, context: *GtkStyleContext, x: float64, y: float64, width: float64, height: float64): void <cimport,nodecl> end
global function gtk_snapshot_render_layout(snapshot: *GtkSnapshot, context: *GtkStyleContext, x: float64, y: float64, layout: *PangoLayout): void <cimport,nodecl> end
global function gtk_snapshot_render_insertion_cursor(snapshot: *GtkSnapshot, context: *GtkStyleContext, x: float64, y: float64, layout: *PangoLayout, index: cint, direction: PangoDirection): void <cimport,nodecl> end
global function gtk_stack_page_get_type(): GType <cimport,nodecl> end
global function gtk_stack_page_get_child(self: *GtkStackPage): *GtkWidget <cimport,nodecl> end
global function gtk_stack_page_get_visible(self: *GtkStackPage): gboolean <cimport,nodecl> end
global function gtk_stack_page_set_visible(self: *GtkStackPage, visible: gboolean): void <cimport,nodecl> end
global function gtk_stack_page_get_needs_attention(self: *GtkStackPage): gboolean <cimport,nodecl> end
global function gtk_stack_page_set_needs_attention(self: *GtkStackPage, setting: gboolean): void <cimport,nodecl> end
global function gtk_stack_page_get_use_underline(self: *GtkStackPage): gboolean <cimport,nodecl> end
global function gtk_stack_page_set_use_underline(self: *GtkStackPage, setting: gboolean): void <cimport,nodecl> end
global function gtk_stack_page_get_name(self: *GtkStackPage): cstring <cimport,nodecl> end
global function gtk_stack_page_set_name(self: *GtkStackPage, setting: cstring): void <cimport,nodecl> end
global function gtk_stack_page_get_title(self: *GtkStackPage): cstring <cimport,nodecl> end
global function gtk_stack_page_set_title(self: *GtkStackPage, setting: cstring): void <cimport,nodecl> end
global function gtk_stack_page_get_icon_name(self: *GtkStackPage): cstring <cimport,nodecl> end
global function gtk_stack_page_set_icon_name(self: *GtkStackPage, setting: cstring): void <cimport,nodecl> end
global function gtk_stack_get_type(): GType <cimport,nodecl> end
global function gtk_stack_new(): *GtkWidget <cimport,nodecl> end
global function gtk_stack_add_child(stack: *GtkStack, child: *GtkWidget): *GtkStackPage <cimport,nodecl> end
global function gtk_stack_add_named(stack: *GtkStack, child: *GtkWidget, name: cstring): *GtkStackPage <cimport,nodecl> end
global function gtk_stack_add_titled(stack: *GtkStack, child: *GtkWidget, name: cstring, title: cstring): *GtkStackPage <cimport,nodecl> end
global function gtk_stack_remove(stack: *GtkStack, child: *GtkWidget): void <cimport,nodecl> end
global function gtk_stack_get_page(stack: *GtkStack, child: *GtkWidget): *GtkStackPage <cimport,nodecl> end
global function gtk_stack_get_child_by_name(stack: *GtkStack, name: cstring): *GtkWidget <cimport,nodecl> end
global function gtk_stack_set_visible_child(stack: *GtkStack, child: *GtkWidget): void <cimport,nodecl> end
global function gtk_stack_get_visible_child(stack: *GtkStack): *GtkWidget <cimport,nodecl> end
global function gtk_stack_set_visible_child_name(stack: *GtkStack, name: cstring): void <cimport,nodecl> end
global function gtk_stack_get_visible_child_name(stack: *GtkStack): cstring <cimport,nodecl> end
global function gtk_stack_set_visible_child_full(stack: *GtkStack, name: cstring, transition: GtkStackTransitionType): void <cimport,nodecl> end
global function gtk_stack_set_hhomogeneous(stack: *GtkStack, hhomogeneous: gboolean): void <cimport,nodecl> end
global function gtk_stack_get_hhomogeneous(stack: *GtkStack): gboolean <cimport,nodecl> end
global function gtk_stack_set_vhomogeneous(stack: *GtkStack, vhomogeneous: gboolean): void <cimport,nodecl> end
global function gtk_stack_get_vhomogeneous(stack: *GtkStack): gboolean <cimport,nodecl> end
global function gtk_stack_set_transition_duration(stack: *GtkStack, duration: guint): void <cimport,nodecl> end
global function gtk_stack_get_transition_duration(stack: *GtkStack): guint <cimport,nodecl> end
global function gtk_stack_set_transition_type(stack: *GtkStack, transition: GtkStackTransitionType): void <cimport,nodecl> end
global function gtk_stack_get_transition_type(stack: *GtkStack): GtkStackTransitionType <cimport,nodecl> end
global function gtk_stack_get_transition_running(stack: *GtkStack): gboolean <cimport,nodecl> end
global function gtk_stack_set_interpolate_size(stack: *GtkStack, interpolate_size: gboolean): void <cimport,nodecl> end
global function gtk_stack_get_interpolate_size(stack: *GtkStack): gboolean <cimport,nodecl> end
global function gtk_stack_get_pages(stack: *GtkStack): *GtkSelectionModel <cimport,nodecl> end
global function gtk_stack_sidebar_get_type(): GType <cimport,nodecl> end
global function gtk_stack_sidebar_new(): *GtkWidget <cimport,nodecl> end
global function gtk_stack_sidebar_set_stack(self: *GtkStackSidebar, stack: *GtkStack): void <cimport,nodecl> end
global function gtk_stack_sidebar_get_stack(self: *GtkStackSidebar): *GtkStack <cimport,nodecl> end
global function gtk_size_group_get_type(): GType <cimport,nodecl> end
global function gtk_size_group_new(mode: GtkSizeGroupMode): *GtkSizeGroup <cimport,nodecl> end
global function gtk_size_group_set_mode(size_group: *GtkSizeGroup, mode: GtkSizeGroupMode): void <cimport,nodecl> end
global function gtk_size_group_get_mode(size_group: *GtkSizeGroup): GtkSizeGroupMode <cimport,nodecl> end
global function gtk_size_group_add_widget(size_group: *GtkSizeGroup, widget: *GtkWidget): void <cimport,nodecl> end
global function gtk_size_group_remove_widget(size_group: *GtkSizeGroup, widget: *GtkWidget): void <cimport,nodecl> end
global function gtk_size_group_get_widgets(size_group: *GtkSizeGroup): *GSList <cimport,nodecl> end
global function gtk_distribute_natural_allocation(extra_space: cint, n_requested_sizes: guint, sizes: *GtkRequestedSize): cint <cimport,nodecl> end
global function gtk_spin_button_get_type(): GType <cimport,nodecl> end
global function gtk_spin_button_configure(spin_button: *GtkSpinButton, adjustment: *GtkAdjustment, climb_rate: float64, digits: guint): void <cimport,nodecl> end
global function gtk_spin_button_new(adjustment: *GtkAdjustment, climb_rate: float64, digits: guint): *GtkWidget <cimport,nodecl> end
global function gtk_spin_button_new_with_range(min: float64, max: float64, step: float64): *GtkWidget <cimport,nodecl> end
global function gtk_spin_button_set_adjustment(spin_button: *GtkSpinButton, adjustment: *GtkAdjustment): void <cimport,nodecl> end
global function gtk_spin_button_get_adjustment(spin_button: *GtkSpinButton): *GtkAdjustment <cimport,nodecl> end
global function gtk_spin_button_set_digits(spin_button: *GtkSpinButton, digits: guint): void <cimport,nodecl> end
global function gtk_spin_button_get_digits(spin_button: *GtkSpinButton): guint <cimport,nodecl> end
global function gtk_spin_button_set_increments(spin_button: *GtkSpinButton, step: float64, page: float64): void <cimport,nodecl> end
global function gtk_spin_button_get_increments(spin_button: *GtkSpinButton, step: *float64, page: *float64): void <cimport,nodecl> end
global function gtk_spin_button_set_range(spin_button: *GtkSpinButton, min: float64, max: float64): void <cimport,nodecl> end
global function gtk_spin_button_get_range(spin_button: *GtkSpinButton, min: *float64, max: *float64): void <cimport,nodecl> end
global function gtk_spin_button_get_value(spin_button: *GtkSpinButton): float64 <cimport,nodecl> end
global function gtk_spin_button_get_value_as_int(spin_button: *GtkSpinButton): cint <cimport,nodecl> end
global function gtk_spin_button_set_value(spin_button: *GtkSpinButton, value: float64): void <cimport,nodecl> end
global function gtk_spin_button_set_update_policy(spin_button: *GtkSpinButton, policy: GtkSpinButtonUpdatePolicy): void <cimport,nodecl> end
global function gtk_spin_button_get_update_policy(spin_button: *GtkSpinButton): GtkSpinButtonUpdatePolicy <cimport,nodecl> end
global function gtk_spin_button_set_numeric(spin_button: *GtkSpinButton, numeric: gboolean): void <cimport,nodecl> end
global function gtk_spin_button_get_numeric(spin_button: *GtkSpinButton): gboolean <cimport,nodecl> end
global function gtk_spin_button_spin(spin_button: *GtkSpinButton, direction: GtkSpinType, increment: float64): void <cimport,nodecl> end
global function gtk_spin_button_set_wrap(spin_button: *GtkSpinButton, wrap: gboolean): void <cimport,nodecl> end
global function gtk_spin_button_get_wrap(spin_button: *GtkSpinButton): gboolean <cimport,nodecl> end
global function gtk_spin_button_set_snap_to_ticks(spin_button: *GtkSpinButton, snap_to_ticks: gboolean): void <cimport,nodecl> end
global function gtk_spin_button_get_snap_to_ticks(spin_button: *GtkSpinButton): gboolean <cimport,nodecl> end
global function gtk_spin_button_set_climb_rate(spin_button: *GtkSpinButton, climb_rate: float64): void <cimport,nodecl> end
global function gtk_spin_button_get_climb_rate(spin_button: *GtkSpinButton): float64 <cimport,nodecl> end
global function gtk_spin_button_update(spin_button: *GtkSpinButton): void <cimport,nodecl> end
global function gtk_spinner_get_type(): GType <cimport,nodecl> end
global function gtk_spinner_new(): *GtkWidget <cimport,nodecl> end
global function gtk_spinner_start(spinner: *GtkSpinner): void <cimport,nodecl> end
global function gtk_spinner_stop(spinner: *GtkSpinner): void <cimport,nodecl> end
global function gtk_spinner_set_spinning(spinner: *GtkSpinner, spinning: gboolean): void <cimport,nodecl> end
global function gtk_spinner_get_spinning(spinner: *GtkSpinner): gboolean <cimport,nodecl> end
global function gtk_stack_switcher_get_type(): GType <cimport,nodecl> end
global function gtk_stack_switcher_new(): *GtkWidget <cimport,nodecl> end
global function gtk_stack_switcher_set_stack(switcher: *GtkStackSwitcher, stack: *GtkStack): void <cimport,nodecl> end
global function gtk_stack_switcher_get_stack(switcher: *GtkStackSwitcher): *GtkStack <cimport,nodecl> end
global function gtk_statusbar_get_type(): GType <cimport,nodecl> end
global function gtk_statusbar_new(): *GtkWidget <cimport,nodecl> end
global function gtk_statusbar_get_context_id(statusbar: *GtkStatusbar, context_description: cstring): guint <cimport,nodecl> end
global function gtk_statusbar_push(statusbar: *GtkStatusbar, context_id: guint, text: cstring): guint <cimport,nodecl> end
global function gtk_statusbar_pop(statusbar: *GtkStatusbar, context_id: guint): void <cimport,nodecl> end
global function gtk_statusbar_remove(statusbar: *GtkStatusbar, context_id: guint, message_id: guint): void <cimport,nodecl> end
global function gtk_statusbar_remove_all(statusbar: *GtkStatusbar, context_id: guint): void <cimport,nodecl> end
global function gtk_string_filter_get_type(): GType <cimport,nodecl> end
global function glib_autoptr_clear_GtkStringFilter(_ptr: *GtkStringFilter): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GtkStringFilter(_ptr: **GtkStringFilter): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GtkStringFilter(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GtkStringFilter(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GtkStringFilter(_q: **GQueue): void <cimport,nodecl> end
global function glib_autoptr_clear_GtkStringFilterClass(_ptr: *GtkStringFilterClass): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GtkStringFilterClass(_ptr: **GtkStringFilterClass): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GtkStringFilterClass(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GtkStringFilterClass(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GtkStringFilterClass(_q: **GQueue): void <cimport,nodecl> end
global function GTK_STRING_FILTER(ptr: gpointer): *GtkStringFilter <cimport,nodecl> end
global function GTK_IS_STRING_FILTER(ptr: gpointer): gboolean <cimport,nodecl> end
global function gtk_string_filter_new(expression: *GtkExpression): *GtkStringFilter <cimport,nodecl> end
global function gtk_string_filter_get_search(self: *GtkStringFilter): cstring <cimport,nodecl> end
global function gtk_string_filter_set_search(self: *GtkStringFilter, search: cstring): void <cimport,nodecl> end
global function gtk_string_filter_get_expression(self: *GtkStringFilter): *GtkExpression <cimport,nodecl> end
global function gtk_string_filter_set_expression(self: *GtkStringFilter, expression: *GtkExpression): void <cimport,nodecl> end
global function gtk_string_filter_get_ignore_case(self: *GtkStringFilter): gboolean <cimport,nodecl> end
global function gtk_string_filter_set_ignore_case(self: *GtkStringFilter, ignore_case: gboolean): void <cimport,nodecl> end
global function gtk_string_filter_get_match_mode(self: *GtkStringFilter): GtkStringFilterMatchMode <cimport,nodecl> end
global function gtk_string_filter_set_match_mode(self: *GtkStringFilter, mode: GtkStringFilterMatchMode): void <cimport,nodecl> end
global function gtk_string_object_get_type(): GType <cimport,nodecl> end
global function glib_autoptr_clear_GtkStringObject(_ptr: *GtkStringObject): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GtkStringObject(_ptr: **GtkStringObject): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GtkStringObject(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GtkStringObject(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GtkStringObject(_q: **GQueue): void <cimport,nodecl> end
global function glib_autoptr_clear_GtkStringObjectClass(_ptr: *GtkStringObjectClass): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GtkStringObjectClass(_ptr: **GtkStringObjectClass): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GtkStringObjectClass(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GtkStringObjectClass(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GtkStringObjectClass(_q: **GQueue): void <cimport,nodecl> end
global function GTK_STRING_OBJECT(ptr: gpointer): *GtkStringObject <cimport,nodecl> end
global function GTK_IS_STRING_OBJECT(ptr: gpointer): gboolean <cimport,nodecl> end
global function gtk_string_object_new(string: cstring): *GtkStringObject <cimport,nodecl> end
global function gtk_string_object_get_string(self: *GtkStringObject): cstring <cimport,nodecl> end
global function gtk_string_list_get_type(): GType <cimport,nodecl> end
global function glib_autoptr_clear_GtkStringList(_ptr: *GtkStringList): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GtkStringList(_ptr: **GtkStringList): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GtkStringList(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GtkStringList(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GtkStringList(_q: **GQueue): void <cimport,nodecl> end
global function glib_autoptr_clear_GtkStringListClass(_ptr: *GtkStringListClass): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GtkStringListClass(_ptr: **GtkStringListClass): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GtkStringListClass(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GtkStringListClass(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GtkStringListClass(_q: **GQueue): void <cimport,nodecl> end
global function GTK_STRING_LIST(ptr: gpointer): *GtkStringList <cimport,nodecl> end
global function GTK_IS_STRING_LIST(ptr: gpointer): gboolean <cimport,nodecl> end
global function gtk_string_list_new(strings: *cstring): *GtkStringList <cimport,nodecl> end
global function gtk_string_list_append(self: *GtkStringList, string: cstring): void <cimport,nodecl> end
global function gtk_string_list_take(self: *GtkStringList, string: cstring): void <cimport,nodecl> end
global function gtk_string_list_remove(self: *GtkStringList, position: guint): void <cimport,nodecl> end
global function gtk_string_list_splice(self: *GtkStringList, position: guint, n_removals: guint, additions: *cstring): void <cimport,nodecl> end
global function gtk_string_list_get_string(self: *GtkStringList, position: guint): cstring <cimport,nodecl> end
global function gtk_string_sorter_get_type(): GType <cimport,nodecl> end
global function glib_autoptr_clear_GtkStringSorter(_ptr: *GtkStringSorter): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GtkStringSorter(_ptr: **GtkStringSorter): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GtkStringSorter(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GtkStringSorter(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GtkStringSorter(_q: **GQueue): void <cimport,nodecl> end
global function glib_autoptr_clear_GtkStringSorterClass(_ptr: *GtkStringSorterClass): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GtkStringSorterClass(_ptr: **GtkStringSorterClass): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GtkStringSorterClass(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GtkStringSorterClass(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GtkStringSorterClass(_q: **GQueue): void <cimport,nodecl> end
global function GTK_STRING_SORTER(ptr: gpointer): *GtkStringSorter <cimport,nodecl> end
global function GTK_IS_STRING_SORTER(ptr: gpointer): gboolean <cimport,nodecl> end
global function gtk_string_sorter_new(expression: *GtkExpression): *GtkStringSorter <cimport,nodecl> end
global function gtk_string_sorter_get_expression(self: *GtkStringSorter): *GtkExpression <cimport,nodecl> end
global function gtk_string_sorter_set_expression(self: *GtkStringSorter, expression: *GtkExpression): void <cimport,nodecl> end
global function gtk_string_sorter_get_ignore_case(self: *GtkStringSorter): gboolean <cimport,nodecl> end
global function gtk_string_sorter_set_ignore_case(self: *GtkStringSorter, ignore_case: gboolean): void <cimport,nodecl> end
global function gtk_style_provider_get_type(): GType <cimport,nodecl> end
global function gtk_style_context_get_type(): GType <cimport,nodecl> end
global function gtk_style_context_add_provider_for_display(display: *GdkDisplay, provider: *GtkStyleProvider, priority: guint): void <cimport,nodecl> end
global function gtk_style_context_remove_provider_for_display(display: *GdkDisplay, provider: *GtkStyleProvider): void <cimport,nodecl> end
global function gtk_style_context_add_provider(context: *GtkStyleContext, provider: *GtkStyleProvider, priority: guint): void <cimport,nodecl> end
global function gtk_style_context_remove_provider(context: *GtkStyleContext, provider: *GtkStyleProvider): void <cimport,nodecl> end
global function gtk_style_context_save(context: *GtkStyleContext): void <cimport,nodecl> end
global function gtk_style_context_restore(context: *GtkStyleContext): void <cimport,nodecl> end
global function gtk_style_context_set_state(context: *GtkStyleContext, flags: GtkStateFlags): void <cimport,nodecl> end
global function gtk_style_context_get_state(context: *GtkStyleContext): GtkStateFlags <cimport,nodecl> end
global function gtk_style_context_set_scale(context: *GtkStyleContext, scale: cint): void <cimport,nodecl> end
global function gtk_style_context_get_scale(context: *GtkStyleContext): cint <cimport,nodecl> end
global function gtk_style_context_add_class(context: *GtkStyleContext, class_name: cstring): void <cimport,nodecl> end
global function gtk_style_context_remove_class(context: *GtkStyleContext, class_name: cstring): void <cimport,nodecl> end
global function gtk_style_context_has_class(context: *GtkStyleContext, class_name: cstring): gboolean <cimport,nodecl> end
global function gtk_style_context_set_display(context: *GtkStyleContext, display: *GdkDisplay): void <cimport,nodecl> end
global function gtk_style_context_get_display(context: *GtkStyleContext): *GdkDisplay <cimport,nodecl> end
global function gtk_style_context_lookup_color(context: *GtkStyleContext, color_name: cstring, color: *GdkRGBA): gboolean <cimport,nodecl> end
global function gtk_style_context_get_color(context: *GtkStyleContext, color: *GdkRGBA): void <cimport,nodecl> end
global function gtk_style_context_get_border(context: *GtkStyleContext, border: *GtkBorder): void <cimport,nodecl> end
global function gtk_style_context_get_padding(context: *GtkStyleContext, padding: *GtkBorder): void <cimport,nodecl> end
global function gtk_style_context_get_margin(context: *GtkStyleContext, margin: *GtkBorder): void <cimport,nodecl> end
global function gtk_style_context_to_string(context: *GtkStyleContext, flags: GtkStyleContextPrintFlags): cstring <cimport,nodecl> end
global function gtk_switch_get_type(): GType <cimport,nodecl> end
global function gtk_switch_new(): *GtkWidget <cimport,nodecl> end
global function gtk_switch_set_active(self: *GtkSwitch, is_active: gboolean): void <cimport,nodecl> end
global function gtk_switch_get_active(self: *GtkSwitch): gboolean <cimport,nodecl> end
global function gtk_switch_set_state(self: *GtkSwitch, state: gboolean): void <cimport,nodecl> end
global function gtk_switch_get_state(self: *GtkSwitch): gboolean <cimport,nodecl> end
global function gtk_symbolic_paintable_get_type(): GType <cimport,nodecl> end
global function glib_autoptr_clear_GtkSymbolicPaintable(_ptr: *GtkSymbolicPaintable): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GtkSymbolicPaintable(_ptr: **GtkSymbolicPaintable): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GtkSymbolicPaintable(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GtkSymbolicPaintable(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GtkSymbolicPaintable(_q: **GQueue): void <cimport,nodecl> end
global function GTK_SYMBOLIC_PAINTABLE(ptr: gpointer): *GtkSymbolicPaintable <cimport,nodecl> end
global function GTK_IS_SYMBOLIC_PAINTABLE(ptr: gpointer): gboolean <cimport,nodecl> end
global function GTK_SYMBOLIC_PAINTABLE_GET_IFACE(ptr: gpointer): *GtkSymbolicPaintableInterface <cimport,nodecl> end
global function gtk_symbolic_paintable_snapshot_symbolic(paintable: *GtkSymbolicPaintable, snapshot: *GdkSnapshot, width: float64, height: float64, colors: *GdkRGBA, n_colors: gsize): void <cimport,nodecl> end
global function gtk_text_get_type(): GType <cimport,nodecl> end
global function gtk_text_new(): *GtkWidget <cimport,nodecl> end
global function gtk_text_new_with_buffer(buffer: *GtkEntryBuffer): *GtkWidget <cimport,nodecl> end
global function gtk_text_get_buffer(self: *GtkText): *GtkEntryBuffer <cimport,nodecl> end
global function gtk_text_set_buffer(self: *GtkText, buffer: *GtkEntryBuffer): void <cimport,nodecl> end
global function gtk_text_set_visibility(self: *GtkText, visible: gboolean): void <cimport,nodecl> end
global function gtk_text_get_visibility(self: *GtkText): gboolean <cimport,nodecl> end
global function gtk_text_set_invisible_char(self: *GtkText, ch: gunichar): void <cimport,nodecl> end
global function gtk_text_get_invisible_char(self: *GtkText): gunichar <cimport,nodecl> end
global function gtk_text_unset_invisible_char(self: *GtkText): void <cimport,nodecl> end
global function gtk_text_set_overwrite_mode(self: *GtkText, overwrite: gboolean): void <cimport,nodecl> end
global function gtk_text_get_overwrite_mode(self: *GtkText): gboolean <cimport,nodecl> end
global function gtk_text_set_max_length(self: *GtkText, length: cint): void <cimport,nodecl> end
global function gtk_text_get_max_length(self: *GtkText): cint <cimport,nodecl> end
global function gtk_text_get_text_length(self: *GtkText): guint16 <cimport,nodecl> end
global function gtk_text_set_activates_default(self: *GtkText, activates: gboolean): void <cimport,nodecl> end
global function gtk_text_get_activates_default(self: *GtkText): gboolean <cimport,nodecl> end
global function gtk_text_get_placeholder_text(self: *GtkText): cstring <cimport,nodecl> end
global function gtk_text_set_placeholder_text(self: *GtkText, text: cstring): void <cimport,nodecl> end
global function gtk_text_set_input_purpose(self: *GtkText, purpose: GtkInputPurpose): void <cimport,nodecl> end
global function gtk_text_get_input_purpose(self: *GtkText): GtkInputPurpose <cimport,nodecl> end
global function gtk_text_set_input_hints(self: *GtkText, hints: GtkInputHints): void <cimport,nodecl> end
global function gtk_text_get_input_hints(self: *GtkText): GtkInputHints <cimport,nodecl> end
global function gtk_text_set_attributes(self: *GtkText, attrs: *PangoAttrList): void <cimport,nodecl> end
global function gtk_text_get_attributes(self: *GtkText): *PangoAttrList <cimport,nodecl> end
global function gtk_text_set_tabs(self: *GtkText, tabs: *PangoTabArray): void <cimport,nodecl> end
global function gtk_text_get_tabs(self: *GtkText): *PangoTabArray <cimport,nodecl> end
global function gtk_text_grab_focus_without_selecting(self: *GtkText): gboolean <cimport,nodecl> end
global function gtk_text_set_extra_menu(self: *GtkText, model: *GMenuModel): void <cimport,nodecl> end
global function gtk_text_get_extra_menu(self: *GtkText): *GMenuModel <cimport,nodecl> end
global function gtk_text_set_enable_emoji_completion(self: *GtkText, enable_emoji_completion: gboolean): void <cimport,nodecl> end
global function gtk_text_get_enable_emoji_completion(self: *GtkText): gboolean <cimport,nodecl> end
global function gtk_text_set_propagate_text_width(self: *GtkText, propagate_text_width: gboolean): void <cimport,nodecl> end
global function gtk_text_get_propagate_text_width(self: *GtkText): gboolean <cimport,nodecl> end
global function gtk_text_set_truncate_multiline(self: *GtkText, truncate_multiline: gboolean): void <cimport,nodecl> end
global function gtk_text_get_truncate_multiline(self: *GtkText): gboolean <cimport,nodecl> end
global function gtk_text_compute_cursor_extents(self: *GtkText, position: gsize, strong: *graphene_rect_t, weak: *graphene_rect_t): void <cimport,nodecl> end
global function gtk_text_tag_get_type(): GType <cimport,nodecl> end
global function gtk_text_tag_new(name: cstring): *GtkTextTag <cimport,nodecl> end
global function gtk_text_tag_get_priority(tag: *GtkTextTag): cint <cimport,nodecl> end
global function gtk_text_tag_set_priority(tag: *GtkTextTag, priority: cint): void <cimport,nodecl> end
global function gtk_text_tag_changed(tag: *GtkTextTag, size_changed: gboolean): void <cimport,nodecl> end
global function gtk_text_tag_table_get_type(): GType <cimport,nodecl> end
global function gtk_text_tag_table_new(): *GtkTextTagTable <cimport,nodecl> end
global function gtk_text_tag_table_add(table: *GtkTextTagTable, tag: *GtkTextTag): gboolean <cimport,nodecl> end
global function gtk_text_tag_table_remove(table: *GtkTextTagTable, tag: *GtkTextTag): void <cimport,nodecl> end
global function gtk_text_tag_table_lookup(table: *GtkTextTagTable, name: cstring): *GtkTextTag <cimport,nodecl> end
global function gtk_text_tag_table_foreach(table: *GtkTextTagTable, func: GtkTextTagTableForeach, data: gpointer): void <cimport,nodecl> end
global function gtk_text_tag_table_get_size(table: *GtkTextTagTable): cint <cimport,nodecl> end
global function gtk_text_child_anchor_get_type(): GType <cimport,nodecl> end
global function gtk_text_child_anchor_new(): *GtkTextChildAnchor <cimport,nodecl> end
global function gtk_text_child_anchor_new_with_replacement(character: cstring): *GtkTextChildAnchor <cimport,nodecl> end
global function gtk_text_child_anchor_get_widgets(anchor: *GtkTextChildAnchor, out_len: *guint): **GtkWidget <cimport,nodecl> end
global function gtk_text_child_anchor_get_deleted(anchor: *GtkTextChildAnchor): gboolean <cimport,nodecl> end
global function gtk_text_iter_get_buffer(iter: *GtkTextIter): *GtkTextBuffer <cimport,nodecl> end
global function gtk_text_iter_copy(iter: *GtkTextIter): *GtkTextIter <cimport,nodecl> end
global function gtk_text_iter_free(iter: *GtkTextIter): void <cimport,nodecl> end
global function gtk_text_iter_assign(iter: *GtkTextIter, other: *GtkTextIter): void <cimport,nodecl> end
global function gtk_text_iter_get_type(): GType <cimport,nodecl> end
global function gtk_text_iter_get_offset(iter: *GtkTextIter): cint <cimport,nodecl> end
global function gtk_text_iter_get_line(iter: *GtkTextIter): cint <cimport,nodecl> end
global function gtk_text_iter_get_line_offset(iter: *GtkTextIter): cint <cimport,nodecl> end
global function gtk_text_iter_get_line_index(iter: *GtkTextIter): cint <cimport,nodecl> end
global function gtk_text_iter_get_visible_line_offset(iter: *GtkTextIter): cint <cimport,nodecl> end
global function gtk_text_iter_get_visible_line_index(iter: *GtkTextIter): cint <cimport,nodecl> end
global function gtk_text_iter_get_char(iter: *GtkTextIter): gunichar <cimport,nodecl> end
global function gtk_text_iter_get_slice(start: *GtkTextIter, end_: *GtkTextIter): cstring <cimport,nodecl> end
global function gtk_text_iter_get_text(start: *GtkTextIter, end_: *GtkTextIter): cstring <cimport,nodecl> end
global function gtk_text_iter_get_visible_slice(start: *GtkTextIter, end_: *GtkTextIter): cstring <cimport,nodecl> end
global function gtk_text_iter_get_visible_text(start: *GtkTextIter, end_: *GtkTextIter): cstring <cimport,nodecl> end
global function gtk_text_iter_get_paintable(iter: *GtkTextIter): *GdkPaintable <cimport,nodecl> end
global function gtk_text_iter_get_marks(iter: *GtkTextIter): *GSList <cimport,nodecl> end
global function gtk_text_iter_get_child_anchor(iter: *GtkTextIter): *GtkTextChildAnchor <cimport,nodecl> end
global function gtk_text_iter_get_toggled_tags(iter: *GtkTextIter, toggled_on: gboolean): *GSList <cimport,nodecl> end
global function gtk_text_iter_starts_tag(iter: *GtkTextIter, tag: *GtkTextTag): gboolean <cimport,nodecl> end
global function gtk_text_iter_ends_tag(iter: *GtkTextIter, tag: *GtkTextTag): gboolean <cimport,nodecl> end
global function gtk_text_iter_toggles_tag(iter: *GtkTextIter, tag: *GtkTextTag): gboolean <cimport,nodecl> end
global function gtk_text_iter_has_tag(iter: *GtkTextIter, tag: *GtkTextTag): gboolean <cimport,nodecl> end
global function gtk_text_iter_get_tags(iter: *GtkTextIter): *GSList <cimport,nodecl> end
global function gtk_text_iter_editable(iter: *GtkTextIter, default_setting: gboolean): gboolean <cimport,nodecl> end
global function gtk_text_iter_can_insert(iter: *GtkTextIter, default_editability: gboolean): gboolean <cimport,nodecl> end
global function gtk_text_iter_starts_word(iter: *GtkTextIter): gboolean <cimport,nodecl> end
global function gtk_text_iter_ends_word(iter: *GtkTextIter): gboolean <cimport,nodecl> end
global function gtk_text_iter_inside_word(iter: *GtkTextIter): gboolean <cimport,nodecl> end
global function gtk_text_iter_starts_sentence(iter: *GtkTextIter): gboolean <cimport,nodecl> end
global function gtk_text_iter_ends_sentence(iter: *GtkTextIter): gboolean <cimport,nodecl> end
global function gtk_text_iter_inside_sentence(iter: *GtkTextIter): gboolean <cimport,nodecl> end
global function gtk_text_iter_starts_line(iter: *GtkTextIter): gboolean <cimport,nodecl> end
global function gtk_text_iter_ends_line(iter: *GtkTextIter): gboolean <cimport,nodecl> end
global function gtk_text_iter_is_cursor_position(iter: *GtkTextIter): gboolean <cimport,nodecl> end
global function gtk_text_iter_get_chars_in_line(iter: *GtkTextIter): cint <cimport,nodecl> end
global function gtk_text_iter_get_bytes_in_line(iter: *GtkTextIter): cint <cimport,nodecl> end
global function gtk_text_iter_get_language(iter: *GtkTextIter): *PangoLanguage <cimport,nodecl> end
global function gtk_text_iter_is_end(iter: *GtkTextIter): gboolean <cimport,nodecl> end
global function gtk_text_iter_is_start(iter: *GtkTextIter): gboolean <cimport,nodecl> end
global function gtk_text_iter_forward_char(iter: *GtkTextIter): gboolean <cimport,nodecl> end
global function gtk_text_iter_backward_char(iter: *GtkTextIter): gboolean <cimport,nodecl> end
global function gtk_text_iter_forward_chars(iter: *GtkTextIter, count: cint): gboolean <cimport,nodecl> end
global function gtk_text_iter_backward_chars(iter: *GtkTextIter, count: cint): gboolean <cimport,nodecl> end
global function gtk_text_iter_forward_line(iter: *GtkTextIter): gboolean <cimport,nodecl> end
global function gtk_text_iter_backward_line(iter: *GtkTextIter): gboolean <cimport,nodecl> end
global function gtk_text_iter_forward_lines(iter: *GtkTextIter, count: cint): gboolean <cimport,nodecl> end
global function gtk_text_iter_backward_lines(iter: *GtkTextIter, count: cint): gboolean <cimport,nodecl> end
global function gtk_text_iter_forward_word_end(iter: *GtkTextIter): gboolean <cimport,nodecl> end
global function gtk_text_iter_backward_word_start(iter: *GtkTextIter): gboolean <cimport,nodecl> end
global function gtk_text_iter_forward_word_ends(iter: *GtkTextIter, count: cint): gboolean <cimport,nodecl> end
global function gtk_text_iter_backward_word_starts(iter: *GtkTextIter, count: cint): gboolean <cimport,nodecl> end
global function gtk_text_iter_forward_visible_line(iter: *GtkTextIter): gboolean <cimport,nodecl> end
global function gtk_text_iter_backward_visible_line(iter: *GtkTextIter): gboolean <cimport,nodecl> end
global function gtk_text_iter_forward_visible_lines(iter: *GtkTextIter, count: cint): gboolean <cimport,nodecl> end
global function gtk_text_iter_backward_visible_lines(iter: *GtkTextIter, count: cint): gboolean <cimport,nodecl> end
global function gtk_text_iter_forward_visible_word_end(iter: *GtkTextIter): gboolean <cimport,nodecl> end
global function gtk_text_iter_backward_visible_word_start(iter: *GtkTextIter): gboolean <cimport,nodecl> end
global function gtk_text_iter_forward_visible_word_ends(iter: *GtkTextIter, count: cint): gboolean <cimport,nodecl> end
global function gtk_text_iter_backward_visible_word_starts(iter: *GtkTextIter, count: cint): gboolean <cimport,nodecl> end
global function gtk_text_iter_forward_sentence_end(iter: *GtkTextIter): gboolean <cimport,nodecl> end
global function gtk_text_iter_backward_sentence_start(iter: *GtkTextIter): gboolean <cimport,nodecl> end
global function gtk_text_iter_forward_sentence_ends(iter: *GtkTextIter, count: cint): gboolean <cimport,nodecl> end
global function gtk_text_iter_backward_sentence_starts(iter: *GtkTextIter, count: cint): gboolean <cimport,nodecl> end
global function gtk_text_iter_forward_cursor_position(iter: *GtkTextIter): gboolean <cimport,nodecl> end
global function gtk_text_iter_backward_cursor_position(iter: *GtkTextIter): gboolean <cimport,nodecl> end
global function gtk_text_iter_forward_cursor_positions(iter: *GtkTextIter, count: cint): gboolean <cimport,nodecl> end
global function gtk_text_iter_backward_cursor_positions(iter: *GtkTextIter, count: cint): gboolean <cimport,nodecl> end
global function gtk_text_iter_forward_visible_cursor_position(iter: *GtkTextIter): gboolean <cimport,nodecl> end
global function gtk_text_iter_backward_visible_cursor_position(iter: *GtkTextIter): gboolean <cimport,nodecl> end
global function gtk_text_iter_forward_visible_cursor_positions(iter: *GtkTextIter, count: cint): gboolean <cimport,nodecl> end
global function gtk_text_iter_backward_visible_cursor_positions(iter: *GtkTextIter, count: cint): gboolean <cimport,nodecl> end
global function gtk_text_iter_set_offset(iter: *GtkTextIter, char_offset: cint): void <cimport,nodecl> end
global function gtk_text_iter_set_line(iter: *GtkTextIter, line_number: cint): void <cimport,nodecl> end
global function gtk_text_iter_set_line_offset(iter: *GtkTextIter, char_on_line: cint): void <cimport,nodecl> end
global function gtk_text_iter_set_line_index(iter: *GtkTextIter, byte_on_line: cint): void <cimport,nodecl> end
global function gtk_text_iter_forward_to_end(iter: *GtkTextIter): void <cimport,nodecl> end
global function gtk_text_iter_forward_to_line_end(iter: *GtkTextIter): gboolean <cimport,nodecl> end
global function gtk_text_iter_set_visible_line_offset(iter: *GtkTextIter, char_on_line: cint): void <cimport,nodecl> end
global function gtk_text_iter_set_visible_line_index(iter: *GtkTextIter, byte_on_line: cint): void <cimport,nodecl> end
global function gtk_text_iter_forward_to_tag_toggle(iter: *GtkTextIter, tag: *GtkTextTag): gboolean <cimport,nodecl> end
global function gtk_text_iter_backward_to_tag_toggle(iter: *GtkTextIter, tag: *GtkTextTag): gboolean <cimport,nodecl> end
global function gtk_text_iter_forward_find_char(iter: *GtkTextIter, pred: GtkTextCharPredicate, user_data: gpointer, limit: *GtkTextIter): gboolean <cimport,nodecl> end
global function gtk_text_iter_backward_find_char(iter: *GtkTextIter, pred: GtkTextCharPredicate, user_data: gpointer, limit: *GtkTextIter): gboolean <cimport,nodecl> end
global function gtk_text_iter_forward_search(iter: *GtkTextIter, str: cstring, flags: GtkTextSearchFlags, match_start: *GtkTextIter, match_end: *GtkTextIter, limit: *GtkTextIter): gboolean <cimport,nodecl> end
global function gtk_text_iter_backward_search(iter: *GtkTextIter, str: cstring, flags: GtkTextSearchFlags, match_start: *GtkTextIter, match_end: *GtkTextIter, limit: *GtkTextIter): gboolean <cimport,nodecl> end
global function gtk_text_iter_equal(lhs: *GtkTextIter, rhs: *GtkTextIter): gboolean <cimport,nodecl> end
global function gtk_text_iter_compare(lhs: *GtkTextIter, rhs: *GtkTextIter): cint <cimport,nodecl> end
global function gtk_text_iter_in_range(iter: *GtkTextIter, start: *GtkTextIter, end_: *GtkTextIter): gboolean <cimport,nodecl> end
global function gtk_text_iter_order(first: *GtkTextIter, second: *GtkTextIter): void <cimport,nodecl> end
global function gtk_text_mark_get_type(): GType <cimport,nodecl> end
global function gtk_text_mark_new(name: cstring, left_gravity: gboolean): *GtkTextMark <cimport,nodecl> end
global function gtk_text_mark_set_visible(mark: *GtkTextMark, setting: gboolean): void <cimport,nodecl> end
global function gtk_text_mark_get_visible(mark: *GtkTextMark): gboolean <cimport,nodecl> end
global function gtk_text_mark_get_name(mark: *GtkTextMark): cstring <cimport,nodecl> end
global function gtk_text_mark_get_deleted(mark: *GtkTextMark): gboolean <cimport,nodecl> end
global function gtk_text_mark_get_buffer(mark: *GtkTextMark): *GtkTextBuffer <cimport,nodecl> end
global function gtk_text_mark_get_left_gravity(mark: *GtkTextMark): gboolean <cimport,nodecl> end
global function gtk_text_buffer_get_type(): GType <cimport,nodecl> end
global function gtk_text_buffer_new(table: *GtkTextTagTable): *GtkTextBuffer <cimport,nodecl> end
global function gtk_text_buffer_get_line_count(buffer: *GtkTextBuffer): cint <cimport,nodecl> end
global function gtk_text_buffer_get_char_count(buffer: *GtkTextBuffer): cint <cimport,nodecl> end
global function gtk_text_buffer_get_tag_table(buffer: *GtkTextBuffer): *GtkTextTagTable <cimport,nodecl> end
global function gtk_text_buffer_set_text(buffer: *GtkTextBuffer, text: cstring, len: cint): void <cimport,nodecl> end
global function gtk_text_buffer_insert(buffer: *GtkTextBuffer, iter: *GtkTextIter, text: cstring, len: cint): void <cimport,nodecl> end
global function gtk_text_buffer_insert_at_cursor(buffer: *GtkTextBuffer, text: cstring, len: cint): void <cimport,nodecl> end
global function gtk_text_buffer_insert_interactive(buffer: *GtkTextBuffer, iter: *GtkTextIter, text: cstring, len: cint, default_editable: gboolean): gboolean <cimport,nodecl> end
global function gtk_text_buffer_insert_interactive_at_cursor(buffer: *GtkTextBuffer, text: cstring, len: cint, default_editable: gboolean): gboolean <cimport,nodecl> end
global function gtk_text_buffer_insert_range(buffer: *GtkTextBuffer, iter: *GtkTextIter, start: *GtkTextIter, end_: *GtkTextIter): void <cimport,nodecl> end
global function gtk_text_buffer_insert_range_interactive(buffer: *GtkTextBuffer, iter: *GtkTextIter, start: *GtkTextIter, end_: *GtkTextIter, default_editable: gboolean): gboolean <cimport,nodecl> end
global function gtk_text_buffer_insert_with_tags(buffer: *GtkTextBuffer, iter: *GtkTextIter, text: cstring, len: cint, first_tag: *GtkTextTag, ...: cvarargs): void <cimport,nodecl> end
global function gtk_text_buffer_insert_with_tags_by_name(buffer: *GtkTextBuffer, iter: *GtkTextIter, text: cstring, len: cint, first_tag_name: cstring, ...: cvarargs): void <cimport,nodecl> end
global function gtk_text_buffer_insert_markup(buffer: *GtkTextBuffer, iter: *GtkTextIter, markup: cstring, len: cint): void <cimport,nodecl> end
global function gtk_text_buffer_delete(buffer: *GtkTextBuffer, start: *GtkTextIter, end_: *GtkTextIter): void <cimport,nodecl> end
global function gtk_text_buffer_delete_interactive(buffer: *GtkTextBuffer, start_iter: *GtkTextIter, end_iter: *GtkTextIter, default_editable: gboolean): gboolean <cimport,nodecl> end
global function gtk_text_buffer_backspace(buffer: *GtkTextBuffer, iter: *GtkTextIter, interactive: gboolean, default_editable: gboolean): gboolean <cimport,nodecl> end
global function gtk_text_buffer_get_text(buffer: *GtkTextBuffer, start: *GtkTextIter, end_: *GtkTextIter, include_hidden_chars: gboolean): cstring <cimport,nodecl> end
global function gtk_text_buffer_get_slice(buffer: *GtkTextBuffer, start: *GtkTextIter, end_: *GtkTextIter, include_hidden_chars: gboolean): cstring <cimport,nodecl> end
global function gtk_text_buffer_insert_paintable(buffer: *GtkTextBuffer, iter: *GtkTextIter, paintable: *GdkPaintable): void <cimport,nodecl> end
global function gtk_text_buffer_insert_child_anchor(buffer: *GtkTextBuffer, iter: *GtkTextIter, anchor: *GtkTextChildAnchor): void <cimport,nodecl> end
global function gtk_text_buffer_create_child_anchor(buffer: *GtkTextBuffer, iter: *GtkTextIter): *GtkTextChildAnchor <cimport,nodecl> end
global function gtk_text_buffer_add_mark(buffer: *GtkTextBuffer, mark: *GtkTextMark, where: *GtkTextIter): void <cimport,nodecl> end
global function gtk_text_buffer_create_mark(buffer: *GtkTextBuffer, mark_name: cstring, where: *GtkTextIter, left_gravity: gboolean): *GtkTextMark <cimport,nodecl> end
global function gtk_text_buffer_move_mark(buffer: *GtkTextBuffer, mark: *GtkTextMark, where: *GtkTextIter): void <cimport,nodecl> end
global function gtk_text_buffer_delete_mark(buffer: *GtkTextBuffer, mark: *GtkTextMark): void <cimport,nodecl> end
global function gtk_text_buffer_get_mark(buffer: *GtkTextBuffer, name: cstring): *GtkTextMark <cimport,nodecl> end
global function gtk_text_buffer_move_mark_by_name(buffer: *GtkTextBuffer, name: cstring, where: *GtkTextIter): void <cimport,nodecl> end
global function gtk_text_buffer_delete_mark_by_name(buffer: *GtkTextBuffer, name: cstring): void <cimport,nodecl> end
global function gtk_text_buffer_get_insert(buffer: *GtkTextBuffer): *GtkTextMark <cimport,nodecl> end
global function gtk_text_buffer_get_selection_bound(buffer: *GtkTextBuffer): *GtkTextMark <cimport,nodecl> end
global function gtk_text_buffer_place_cursor(buffer: *GtkTextBuffer, where: *GtkTextIter): void <cimport,nodecl> end
global function gtk_text_buffer_select_range(buffer: *GtkTextBuffer, ins: *GtkTextIter, bound: *GtkTextIter): void <cimport,nodecl> end
global function gtk_text_buffer_apply_tag(buffer: *GtkTextBuffer, tag: *GtkTextTag, start: *GtkTextIter, end_: *GtkTextIter): void <cimport,nodecl> end
global function gtk_text_buffer_remove_tag(buffer: *GtkTextBuffer, tag: *GtkTextTag, start: *GtkTextIter, end_: *GtkTextIter): void <cimport,nodecl> end
global function gtk_text_buffer_apply_tag_by_name(buffer: *GtkTextBuffer, name: cstring, start: *GtkTextIter, end_: *GtkTextIter): void <cimport,nodecl> end
global function gtk_text_buffer_remove_tag_by_name(buffer: *GtkTextBuffer, name: cstring, start: *GtkTextIter, end_: *GtkTextIter): void <cimport,nodecl> end
global function gtk_text_buffer_remove_all_tags(buffer: *GtkTextBuffer, start: *GtkTextIter, end_: *GtkTextIter): void <cimport,nodecl> end
global function gtk_text_buffer_create_tag(buffer: *GtkTextBuffer, tag_name: cstring, first_property_name: cstring, ...: cvarargs): *GtkTextTag <cimport,nodecl> end
global function gtk_text_buffer_get_iter_at_line_offset(buffer: *GtkTextBuffer, iter: *GtkTextIter, line_number: cint, char_offset: cint): gboolean <cimport,nodecl> end
global function gtk_text_buffer_get_iter_at_line_index(buffer: *GtkTextBuffer, iter: *GtkTextIter, line_number: cint, byte_index: cint): gboolean <cimport,nodecl> end
global function gtk_text_buffer_get_iter_at_offset(buffer: *GtkTextBuffer, iter: *GtkTextIter, char_offset: cint): void <cimport,nodecl> end
global function gtk_text_buffer_get_iter_at_line(buffer: *GtkTextBuffer, iter: *GtkTextIter, line_number: cint): gboolean <cimport,nodecl> end
global function gtk_text_buffer_get_start_iter(buffer: *GtkTextBuffer, iter: *GtkTextIter): void <cimport,nodecl> end
global function gtk_text_buffer_get_end_iter(buffer: *GtkTextBuffer, iter: *GtkTextIter): void <cimport,nodecl> end
global function gtk_text_buffer_get_bounds(buffer: *GtkTextBuffer, start: *GtkTextIter, end_: *GtkTextIter): void <cimport,nodecl> end
global function gtk_text_buffer_get_iter_at_mark(buffer: *GtkTextBuffer, iter: *GtkTextIter, mark: *GtkTextMark): void <cimport,nodecl> end
global function gtk_text_buffer_get_iter_at_child_anchor(buffer: *GtkTextBuffer, iter: *GtkTextIter, anchor: *GtkTextChildAnchor): void <cimport,nodecl> end
global function gtk_text_buffer_get_modified(buffer: *GtkTextBuffer): gboolean <cimport,nodecl> end
global function gtk_text_buffer_set_modified(buffer: *GtkTextBuffer, setting: gboolean): void <cimport,nodecl> end
global function gtk_text_buffer_get_has_selection(buffer: *GtkTextBuffer): gboolean <cimport,nodecl> end
global function gtk_text_buffer_add_selection_clipboard(buffer: *GtkTextBuffer, clipboard: *GdkClipboard): void <cimport,nodecl> end
global function gtk_text_buffer_remove_selection_clipboard(buffer: *GtkTextBuffer, clipboard: *GdkClipboard): void <cimport,nodecl> end
global function gtk_text_buffer_cut_clipboard(buffer: *GtkTextBuffer, clipboard: *GdkClipboard, default_editable: gboolean): void <cimport,nodecl> end
global function gtk_text_buffer_copy_clipboard(buffer: *GtkTextBuffer, clipboard: *GdkClipboard): void <cimport,nodecl> end
global function gtk_text_buffer_paste_clipboard(buffer: *GtkTextBuffer, clipboard: *GdkClipboard, override_location: *GtkTextIter, default_editable: gboolean): void <cimport,nodecl> end
global function gtk_text_buffer_get_selection_bounds(buffer: *GtkTextBuffer, start: *GtkTextIter, end_: *GtkTextIter): gboolean <cimport,nodecl> end
global function gtk_text_buffer_delete_selection(buffer: *GtkTextBuffer, interactive: gboolean, default_editable: gboolean): gboolean <cimport,nodecl> end
global function gtk_text_buffer_get_selection_content(buffer: *GtkTextBuffer): *GdkContentProvider <cimport,nodecl> end
global function gtk_text_buffer_get_can_undo(buffer: *GtkTextBuffer): gboolean <cimport,nodecl> end
global function gtk_text_buffer_get_can_redo(buffer: *GtkTextBuffer): gboolean <cimport,nodecl> end
global function gtk_text_buffer_get_enable_undo(buffer: *GtkTextBuffer): gboolean <cimport,nodecl> end
global function gtk_text_buffer_set_enable_undo(buffer: *GtkTextBuffer, enable_undo: gboolean): void <cimport,nodecl> end
global function gtk_text_buffer_get_max_undo_levels(buffer: *GtkTextBuffer): guint <cimport,nodecl> end
global function gtk_text_buffer_set_max_undo_levels(buffer: *GtkTextBuffer, max_undo_levels: guint): void <cimport,nodecl> end
global function gtk_text_buffer_undo(buffer: *GtkTextBuffer): void <cimport,nodecl> end
global function gtk_text_buffer_redo(buffer: *GtkTextBuffer): void <cimport,nodecl> end
global function gtk_text_buffer_begin_irreversible_action(buffer: *GtkTextBuffer): void <cimport,nodecl> end
global function gtk_text_buffer_end_irreversible_action(buffer: *GtkTextBuffer): void <cimport,nodecl> end
global function gtk_text_buffer_begin_user_action(buffer: *GtkTextBuffer): void <cimport,nodecl> end
global function gtk_text_buffer_end_user_action(buffer: *GtkTextBuffer): void <cimport,nodecl> end
global function gtk_text_view_get_type(): GType <cimport,nodecl> end
global function gtk_text_view_new(): *GtkWidget <cimport,nodecl> end
global function gtk_text_view_new_with_buffer(buffer: *GtkTextBuffer): *GtkWidget <cimport,nodecl> end
global function gtk_text_view_set_buffer(text_view: *GtkTextView, buffer: *GtkTextBuffer): void <cimport,nodecl> end
global function gtk_text_view_get_buffer(text_view: *GtkTextView): *GtkTextBuffer <cimport,nodecl> end
global function gtk_text_view_scroll_to_iter(text_view: *GtkTextView, iter: *GtkTextIter, within_margin: float64, use_align: gboolean, xalign: float64, yalign: float64): gboolean <cimport,nodecl> end
global function gtk_text_view_scroll_to_mark(text_view: *GtkTextView, mark: *GtkTextMark, within_margin: float64, use_align: gboolean, xalign: float64, yalign: float64): void <cimport,nodecl> end
global function gtk_text_view_scroll_mark_onscreen(text_view: *GtkTextView, mark: *GtkTextMark): void <cimport,nodecl> end
global function gtk_text_view_move_mark_onscreen(text_view: *GtkTextView, mark: *GtkTextMark): gboolean <cimport,nodecl> end
global function gtk_text_view_place_cursor_onscreen(text_view: *GtkTextView): gboolean <cimport,nodecl> end
global function gtk_text_view_get_visible_rect(text_view: *GtkTextView, visible_rect: *GdkRectangle): void <cimport,nodecl> end
global function gtk_text_view_set_cursor_visible(text_view: *GtkTextView, setting: gboolean): void <cimport,nodecl> end
global function gtk_text_view_get_cursor_visible(text_view: *GtkTextView): gboolean <cimport,nodecl> end
global function gtk_text_view_reset_cursor_blink(text_view: *GtkTextView): void <cimport,nodecl> end
global function gtk_text_view_get_cursor_locations(text_view: *GtkTextView, iter: *GtkTextIter, strong: *GdkRectangle, weak: *GdkRectangle): void <cimport,nodecl> end
global function gtk_text_view_get_iter_location(text_view: *GtkTextView, iter: *GtkTextIter, location: *GdkRectangle): void <cimport,nodecl> end
global function gtk_text_view_get_iter_at_location(text_view: *GtkTextView, iter: *GtkTextIter, x: cint, y: cint): gboolean <cimport,nodecl> end
global function gtk_text_view_get_iter_at_position(text_view: *GtkTextView, iter: *GtkTextIter, trailing: *cint, x: cint, y: cint): gboolean <cimport,nodecl> end
global function gtk_text_view_get_line_yrange(text_view: *GtkTextView, iter: *GtkTextIter, y: *cint, height: *cint): void <cimport,nodecl> end
global function gtk_text_view_get_line_at_y(text_view: *GtkTextView, target_iter: *GtkTextIter, y: cint, line_top: *cint): void <cimport,nodecl> end
global function gtk_text_view_buffer_to_window_coords(text_view: *GtkTextView, win: GtkTextWindowType, buffer_x: cint, buffer_y: cint, window_x: *cint, window_y: *cint): void <cimport,nodecl> end
global function gtk_text_view_window_to_buffer_coords(text_view: *GtkTextView, win: GtkTextWindowType, window_x: cint, window_y: cint, buffer_x: *cint, buffer_y: *cint): void <cimport,nodecl> end
global function gtk_text_view_forward_display_line(text_view: *GtkTextView, iter: *GtkTextIter): gboolean <cimport,nodecl> end
global function gtk_text_view_backward_display_line(text_view: *GtkTextView, iter: *GtkTextIter): gboolean <cimport,nodecl> end
global function gtk_text_view_forward_display_line_end(text_view: *GtkTextView, iter: *GtkTextIter): gboolean <cimport,nodecl> end
global function gtk_text_view_backward_display_line_start(text_view: *GtkTextView, iter: *GtkTextIter): gboolean <cimport,nodecl> end
global function gtk_text_view_starts_display_line(text_view: *GtkTextView, iter: *GtkTextIter): gboolean <cimport,nodecl> end
global function gtk_text_view_move_visually(text_view: *GtkTextView, iter: *GtkTextIter, count: cint): gboolean <cimport,nodecl> end
global function gtk_text_view_im_context_filter_keypress(text_view: *GtkTextView, event: *GdkEvent): gboolean <cimport,nodecl> end
global function gtk_text_view_reset_im_context(text_view: *GtkTextView): void <cimport,nodecl> end
global function gtk_text_view_get_gutter(text_view: *GtkTextView, win: GtkTextWindowType): *GtkWidget <cimport,nodecl> end
global function gtk_text_view_set_gutter(text_view: *GtkTextView, win: GtkTextWindowType, widget: *GtkWidget): void <cimport,nodecl> end
global function gtk_text_view_add_child_at_anchor(text_view: *GtkTextView, child: *GtkWidget, anchor: *GtkTextChildAnchor): void <cimport,nodecl> end
global function gtk_text_view_add_overlay(text_view: *GtkTextView, child: *GtkWidget, xpos: cint, ypos: cint): void <cimport,nodecl> end
global function gtk_text_view_move_overlay(text_view: *GtkTextView, child: *GtkWidget, xpos: cint, ypos: cint): void <cimport,nodecl> end
global function gtk_text_view_remove(text_view: *GtkTextView, child: *GtkWidget): void <cimport,nodecl> end
global function gtk_text_view_set_wrap_mode(text_view: *GtkTextView, wrap_mode: GtkWrapMode): void <cimport,nodecl> end
global function gtk_text_view_get_wrap_mode(text_view: *GtkTextView): GtkWrapMode <cimport,nodecl> end
global function gtk_text_view_set_editable(text_view: *GtkTextView, setting: gboolean): void <cimport,nodecl> end
global function gtk_text_view_get_editable(text_view: *GtkTextView): gboolean <cimport,nodecl> end
global function gtk_text_view_set_overwrite(text_view: *GtkTextView, overwrite: gboolean): void <cimport,nodecl> end
global function gtk_text_view_get_overwrite(text_view: *GtkTextView): gboolean <cimport,nodecl> end
global function gtk_text_view_set_accepts_tab(text_view: *GtkTextView, accepts_tab: gboolean): void <cimport,nodecl> end
global function gtk_text_view_get_accepts_tab(text_view: *GtkTextView): gboolean <cimport,nodecl> end
global function gtk_text_view_set_pixels_above_lines(text_view: *GtkTextView, pixels_above_lines: cint): void <cimport,nodecl> end
global function gtk_text_view_get_pixels_above_lines(text_view: *GtkTextView): cint <cimport,nodecl> end
global function gtk_text_view_set_pixels_below_lines(text_view: *GtkTextView, pixels_below_lines: cint): void <cimport,nodecl> end
global function gtk_text_view_get_pixels_below_lines(text_view: *GtkTextView): cint <cimport,nodecl> end
global function gtk_text_view_set_pixels_inside_wrap(text_view: *GtkTextView, pixels_inside_wrap: cint): void <cimport,nodecl> end
global function gtk_text_view_get_pixels_inside_wrap(text_view: *GtkTextView): cint <cimport,nodecl> end
global function gtk_text_view_set_justification(text_view: *GtkTextView, justification: GtkJustification): void <cimport,nodecl> end
global function gtk_text_view_get_justification(text_view: *GtkTextView): GtkJustification <cimport,nodecl> end
global function gtk_text_view_set_left_margin(text_view: *GtkTextView, left_margin: cint): void <cimport,nodecl> end
global function gtk_text_view_get_left_margin(text_view: *GtkTextView): cint <cimport,nodecl> end
global function gtk_text_view_set_right_margin(text_view: *GtkTextView, right_margin: cint): void <cimport,nodecl> end
global function gtk_text_view_get_right_margin(text_view: *GtkTextView): cint <cimport,nodecl> end
global function gtk_text_view_set_top_margin(text_view: *GtkTextView, top_margin: cint): void <cimport,nodecl> end
global function gtk_text_view_get_top_margin(text_view: *GtkTextView): cint <cimport,nodecl> end
global function gtk_text_view_set_bottom_margin(text_view: *GtkTextView, bottom_margin: cint): void <cimport,nodecl> end
global function gtk_text_view_get_bottom_margin(text_view: *GtkTextView): cint <cimport,nodecl> end
global function gtk_text_view_set_indent(text_view: *GtkTextView, indent: cint): void <cimport,nodecl> end
global function gtk_text_view_get_indent(text_view: *GtkTextView): cint <cimport,nodecl> end
global function gtk_text_view_set_tabs(text_view: *GtkTextView, tabs: *PangoTabArray): void <cimport,nodecl> end
global function gtk_text_view_get_tabs(text_view: *GtkTextView): *PangoTabArray <cimport,nodecl> end
global function gtk_text_view_set_input_purpose(text_view: *GtkTextView, purpose: GtkInputPurpose): void <cimport,nodecl> end
global function gtk_text_view_get_input_purpose(text_view: *GtkTextView): GtkInputPurpose <cimport,nodecl> end
global function gtk_text_view_set_input_hints(text_view: *GtkTextView, hints: GtkInputHints): void <cimport,nodecl> end
global function gtk_text_view_get_input_hints(text_view: *GtkTextView): GtkInputHints <cimport,nodecl> end
global function gtk_text_view_set_monospace(text_view: *GtkTextView, monospace: gboolean): void <cimport,nodecl> end
global function gtk_text_view_get_monospace(text_view: *GtkTextView): gboolean <cimport,nodecl> end
global function gtk_text_view_set_extra_menu(text_view: *GtkTextView, model: *GMenuModel): void <cimport,nodecl> end
global function gtk_text_view_get_extra_menu(text_view: *GtkTextView): *GMenuModel <cimport,nodecl> end
global function gtk_text_view_get_rtl_context(text_view: *GtkTextView): *PangoContext <cimport,nodecl> end
global function gtk_text_view_get_ltr_context(text_view: *GtkTextView): *PangoContext <cimport,nodecl> end
global function gtk_test_accessible_has_role(accessible: *GtkAccessible, role: GtkAccessibleRole): gboolean <cimport,nodecl> end
global function gtk_test_accessible_has_property(accessible: *GtkAccessible, property: GtkAccessibleProperty): gboolean <cimport,nodecl> end
global function gtk_test_accessible_has_relation(accessible: *GtkAccessible, relation: GtkAccessibleRelation): gboolean <cimport,nodecl> end
global function gtk_test_accessible_has_state(accessible: *GtkAccessible, state: GtkAccessibleState): gboolean <cimport,nodecl> end
global function gtk_test_accessible_check_property(accessible: *GtkAccessible, property: GtkAccessibleProperty, ...: cvarargs): cstring <cimport,nodecl> end
global function gtk_test_accessible_check_relation(accessible: *GtkAccessible, relation: GtkAccessibleRelation, ...: cvarargs): cstring <cimport,nodecl> end
global function gtk_test_accessible_check_state(accessible: *GtkAccessible, state: GtkAccessibleState, ...: cvarargs): cstring <cimport,nodecl> end
global function gtk_test_accessible_assertion_message_role(domain: cstring, file: cstring, line: cint, func: cstring, expr: cstring, accessible: *GtkAccessible, expected_role: GtkAccessibleRole, actual_role: GtkAccessibleRole): void <cimport,nodecl> end
global function gtk_test_init(argcp: *cint, argvp: **cstring, ...: cvarargs): void <cimport,nodecl> end
global function gtk_test_register_all_types(): void <cimport,nodecl> end
global function gtk_test_list_all_types(n_types: *guint): *GType <cimport,nodecl> end
global function gtk_test_widget_wait_for_draw(widget: *GtkWidget): void <cimport,nodecl> end
global function gtk_tree_row_data_get_type(): GType <cimport,nodecl> end
global function gtk_tree_drag_source_get_type(): GType <cimport,nodecl> end
global function gtk_tree_drag_source_row_draggable(drag_source: *GtkTreeDragSource, path: *GtkTreePath): gboolean <cimport,nodecl> end
global function gtk_tree_drag_source_drag_data_delete(drag_source: *GtkTreeDragSource, path: *GtkTreePath): gboolean <cimport,nodecl> end
global function gtk_tree_drag_source_drag_data_get(drag_source: *GtkTreeDragSource, path: *GtkTreePath): *GdkContentProvider <cimport,nodecl> end
global function gtk_tree_drag_dest_get_type(): GType <cimport,nodecl> end
global function gtk_tree_drag_dest_drag_data_received(drag_dest: *GtkTreeDragDest, dest: *GtkTreePath, value: *GValue): gboolean <cimport,nodecl> end
global function gtk_tree_drag_dest_row_drop_possible(drag_dest: *GtkTreeDragDest, dest_path: *GtkTreePath, value: *GValue): gboolean <cimport,nodecl> end
global function gtk_tree_create_row_drag_content(tree_model: *GtkTreeModel, path: *GtkTreePath): *GdkContentProvider <cimport,nodecl> end
global function gtk_tree_get_row_drag_data(value: *GValue, tree_model: **GtkTreeModel, path: **GtkTreePath): gboolean <cimport,nodecl> end
global function gtk_tree_list_model_get_type(): GType <cimport,nodecl> end
global function glib_autoptr_clear_GtkTreeListModel(_ptr: *GtkTreeListModel): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GtkTreeListModel(_ptr: **GtkTreeListModel): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GtkTreeListModel(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GtkTreeListModel(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GtkTreeListModel(_q: **GQueue): void <cimport,nodecl> end
global function glib_autoptr_clear_GtkTreeListModelClass(_ptr: *GtkTreeListModelClass): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GtkTreeListModelClass(_ptr: **GtkTreeListModelClass): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GtkTreeListModelClass(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GtkTreeListModelClass(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GtkTreeListModelClass(_q: **GQueue): void <cimport,nodecl> end
global function GTK_TREE_LIST_MODEL(ptr: gpointer): *GtkTreeListModel <cimport,nodecl> end
global function GTK_IS_TREE_LIST_MODEL(ptr: gpointer): gboolean <cimport,nodecl> end
global function gtk_tree_list_row_get_type(): GType <cimport,nodecl> end
global function glib_autoptr_clear_GtkTreeListRow(_ptr: *GtkTreeListRow): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GtkTreeListRow(_ptr: **GtkTreeListRow): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GtkTreeListRow(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GtkTreeListRow(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GtkTreeListRow(_q: **GQueue): void <cimport,nodecl> end
global function glib_autoptr_clear_GtkTreeListRowClass(_ptr: *GtkTreeListRowClass): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GtkTreeListRowClass(_ptr: **GtkTreeListRowClass): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GtkTreeListRowClass(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GtkTreeListRowClass(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GtkTreeListRowClass(_q: **GQueue): void <cimport,nodecl> end
global function GTK_TREE_LIST_ROW(ptr: gpointer): *GtkTreeListRow <cimport,nodecl> end
global function GTK_IS_TREE_LIST_ROW(ptr: gpointer): gboolean <cimport,nodecl> end
global function gtk_tree_list_model_new(root: *GListModel, passthrough: gboolean, autoexpand: gboolean, create_func: GtkTreeListModelCreateModelFunc, user_data: gpointer, user_destroy: GDestroyNotify): *GtkTreeListModel <cimport,nodecl> end
global function gtk_tree_list_model_get_model(self: *GtkTreeListModel): *GListModel <cimport,nodecl> end
global function gtk_tree_list_model_get_passthrough(self: *GtkTreeListModel): gboolean <cimport,nodecl> end
global function gtk_tree_list_model_set_autoexpand(self: *GtkTreeListModel, autoexpand: gboolean): void <cimport,nodecl> end
global function gtk_tree_list_model_get_autoexpand(self: *GtkTreeListModel): gboolean <cimport,nodecl> end
global function gtk_tree_list_model_get_child_row(self: *GtkTreeListModel, position: guint): *GtkTreeListRow <cimport,nodecl> end
global function gtk_tree_list_model_get_row(self: *GtkTreeListModel, position: guint): *GtkTreeListRow <cimport,nodecl> end
global function gtk_tree_list_row_get_item(self: *GtkTreeListRow): gpointer <cimport,nodecl> end
global function gtk_tree_list_row_set_expanded(self: *GtkTreeListRow, expanded: gboolean): void <cimport,nodecl> end
global function gtk_tree_list_row_get_expanded(self: *GtkTreeListRow): gboolean <cimport,nodecl> end
global function gtk_tree_list_row_is_expandable(self: *GtkTreeListRow): gboolean <cimport,nodecl> end
global function gtk_tree_list_row_get_position(self: *GtkTreeListRow): guint <cimport,nodecl> end
global function gtk_tree_list_row_get_depth(self: *GtkTreeListRow): guint <cimport,nodecl> end
global function gtk_tree_list_row_get_children(self: *GtkTreeListRow): *GListModel <cimport,nodecl> end
global function gtk_tree_list_row_get_parent(self: *GtkTreeListRow): *GtkTreeListRow <cimport,nodecl> end
global function gtk_tree_list_row_get_child_row(self: *GtkTreeListRow, position: guint): *GtkTreeListRow <cimport,nodecl> end
global function gtk_tree_expander_get_type(): GType <cimport,nodecl> end
global function glib_autoptr_clear_GtkTreeExpander(_ptr: *GtkTreeExpander): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GtkTreeExpander(_ptr: **GtkTreeExpander): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GtkTreeExpander(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GtkTreeExpander(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GtkTreeExpander(_q: **GQueue): void <cimport,nodecl> end
global function glib_autoptr_clear_GtkTreeExpanderClass(_ptr: *GtkTreeExpanderClass): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GtkTreeExpanderClass(_ptr: **GtkTreeExpanderClass): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GtkTreeExpanderClass(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GtkTreeExpanderClass(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GtkTreeExpanderClass(_q: **GQueue): void <cimport,nodecl> end
global function GTK_TREE_EXPANDER(ptr: gpointer): *GtkTreeExpander <cimport,nodecl> end
global function GTK_IS_TREE_EXPANDER(ptr: gpointer): gboolean <cimport,nodecl> end
global function gtk_tree_expander_new(): *GtkWidget <cimport,nodecl> end
global function gtk_tree_expander_get_child(self: *GtkTreeExpander): *GtkWidget <cimport,nodecl> end
global function gtk_tree_expander_set_child(self: *GtkTreeExpander, child: *GtkWidget): void <cimport,nodecl> end
global function gtk_tree_expander_get_item(self: *GtkTreeExpander): gpointer <cimport,nodecl> end
global function gtk_tree_expander_get_list_row(self: *GtkTreeExpander): *GtkTreeListRow <cimport,nodecl> end
global function gtk_tree_expander_set_list_row(self: *GtkTreeExpander, list_row: *GtkTreeListRow): void <cimport,nodecl> end
global function gtk_tree_expander_get_indent_for_icon(self: *GtkTreeExpander): gboolean <cimport,nodecl> end
global function gtk_tree_expander_set_indent_for_icon(self: *GtkTreeExpander, indent_for_icon: gboolean): void <cimport,nodecl> end
global function gtk_tree_list_row_sorter_get_type(): GType <cimport,nodecl> end
global function glib_autoptr_clear_GtkTreeListRowSorter(_ptr: *GtkTreeListRowSorter): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GtkTreeListRowSorter(_ptr: **GtkTreeListRowSorter): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GtkTreeListRowSorter(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GtkTreeListRowSorter(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GtkTreeListRowSorter(_q: **GQueue): void <cimport,nodecl> end
global function glib_autoptr_clear_GtkTreeListRowSorterClass(_ptr: *GtkTreeListRowSorterClass): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GtkTreeListRowSorterClass(_ptr: **GtkTreeListRowSorterClass): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GtkTreeListRowSorterClass(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GtkTreeListRowSorterClass(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GtkTreeListRowSorterClass(_q: **GQueue): void <cimport,nodecl> end
global function GTK_TREE_LIST_ROW_SORTER(ptr: gpointer): *GtkTreeListRowSorter <cimport,nodecl> end
global function GTK_IS_TREE_LIST_ROW_SORTER(ptr: gpointer): gboolean <cimport,nodecl> end
global function gtk_tree_list_row_sorter_new(sorter: *GtkSorter): *GtkTreeListRowSorter <cimport,nodecl> end
global function gtk_tree_list_row_sorter_get_sorter(self: *GtkTreeListRowSorter): *GtkSorter <cimport,nodecl> end
global function gtk_tree_list_row_sorter_set_sorter(self: *GtkTreeListRowSorter, sorter: *GtkSorter): void <cimport,nodecl> end
global function gtk_tree_model_sort_get_type(): GType <cimport,nodecl> end
global function gtk_tree_model_sort_new_with_model(child_model: *GtkTreeModel): *GtkTreeModel <cimport,nodecl> end
global function gtk_tree_model_sort_get_model(tree_model: *GtkTreeModelSort): *GtkTreeModel <cimport,nodecl> end
global function gtk_tree_model_sort_convert_child_path_to_path(tree_model_sort: *GtkTreeModelSort, child_path: *GtkTreePath): *GtkTreePath <cimport,nodecl> end
global function gtk_tree_model_sort_convert_child_iter_to_iter(tree_model_sort: *GtkTreeModelSort, sort_iter: *GtkTreeIter, child_iter: *GtkTreeIter): gboolean <cimport,nodecl> end
global function gtk_tree_model_sort_convert_path_to_child_path(tree_model_sort: *GtkTreeModelSort, sorted_path: *GtkTreePath): *GtkTreePath <cimport,nodecl> end
global function gtk_tree_model_sort_convert_iter_to_child_iter(tree_model_sort: *GtkTreeModelSort, child_iter: *GtkTreeIter, sorted_iter: *GtkTreeIter): void <cimport,nodecl> end
global function gtk_tree_model_sort_reset_default_sort_func(tree_model_sort: *GtkTreeModelSort): void <cimport,nodecl> end
global function gtk_tree_model_sort_clear_cache(tree_model_sort: *GtkTreeModelSort): void <cimport,nodecl> end
global function gtk_tree_model_sort_iter_is_valid(tree_model_sort: *GtkTreeModelSort, iter: *GtkTreeIter): gboolean <cimport,nodecl> end
global function gtk_tree_selection_get_type(): GType <cimport,nodecl> end
global function gtk_tree_selection_set_mode(selection: *GtkTreeSelection, type: GtkSelectionMode): void <cimport,nodecl> end
global function gtk_tree_selection_get_mode(selection: *GtkTreeSelection): GtkSelectionMode <cimport,nodecl> end
global function gtk_tree_selection_set_select_function(selection: *GtkTreeSelection, func: GtkTreeSelectionFunc, data: gpointer, destroy: GDestroyNotify): void <cimport,nodecl> end
global function gtk_tree_selection_get_user_data(selection: *GtkTreeSelection): gpointer <cimport,nodecl> end
global function gtk_tree_selection_get_tree_view(selection: *GtkTreeSelection): *GtkTreeView <cimport,nodecl> end
global function gtk_tree_selection_get_select_function(selection: *GtkTreeSelection): GtkTreeSelectionFunc <cimport,nodecl> end
global function gtk_tree_selection_get_selected(selection: *GtkTreeSelection, model: **GtkTreeModel, iter: *GtkTreeIter): gboolean <cimport,nodecl> end
global function gtk_tree_selection_get_selected_rows(selection: *GtkTreeSelection, model: **GtkTreeModel): *GList <cimport,nodecl> end
global function gtk_tree_selection_count_selected_rows(selection: *GtkTreeSelection): cint <cimport,nodecl> end
global function gtk_tree_selection_selected_foreach(selection: *GtkTreeSelection, func: GtkTreeSelectionForeachFunc, data: gpointer): void <cimport,nodecl> end
global function gtk_tree_selection_select_path(selection: *GtkTreeSelection, path: *GtkTreePath): void <cimport,nodecl> end
global function gtk_tree_selection_unselect_path(selection: *GtkTreeSelection, path: *GtkTreePath): void <cimport,nodecl> end
global function gtk_tree_selection_select_iter(selection: *GtkTreeSelection, iter: *GtkTreeIter): void <cimport,nodecl> end
global function gtk_tree_selection_unselect_iter(selection: *GtkTreeSelection, iter: *GtkTreeIter): void <cimport,nodecl> end
global function gtk_tree_selection_path_is_selected(selection: *GtkTreeSelection, path: *GtkTreePath): gboolean <cimport,nodecl> end
global function gtk_tree_selection_iter_is_selected(selection: *GtkTreeSelection, iter: *GtkTreeIter): gboolean <cimport,nodecl> end
global function gtk_tree_selection_select_all(selection: *GtkTreeSelection): void <cimport,nodecl> end
global function gtk_tree_selection_unselect_all(selection: *GtkTreeSelection): void <cimport,nodecl> end
global function gtk_tree_selection_select_range(selection: *GtkTreeSelection, start_path: *GtkTreePath, end_path: *GtkTreePath): void <cimport,nodecl> end
global function gtk_tree_selection_unselect_range(selection: *GtkTreeSelection, start_path: *GtkTreePath, end_path: *GtkTreePath): void <cimport,nodecl> end
global function gtk_tree_store_get_type(): GType <cimport,nodecl> end
global function gtk_tree_store_new(n_columns: cint, ...: cvarargs): *GtkTreeStore <cimport,nodecl> end
global function gtk_tree_store_newv(n_columns: cint, types: *GType): *GtkTreeStore <cimport,nodecl> end
global function gtk_tree_store_set_column_types(tree_store: *GtkTreeStore, n_columns: cint, types: *GType): void <cimport,nodecl> end
global function gtk_tree_store_set_value(tree_store: *GtkTreeStore, iter: *GtkTreeIter, column: cint, value: *GValue): void <cimport,nodecl> end
global function gtk_tree_store_set(tree_store: *GtkTreeStore, iter: *GtkTreeIter, ...: cvarargs): void <cimport,nodecl> end
global function gtk_tree_store_set_valuesv(tree_store: *GtkTreeStore, iter: *GtkTreeIter, columns: *cint, values: *GValue, n_values: cint): void <cimport,nodecl> end
global function gtk_tree_store_set_valist(tree_store: *GtkTreeStore, iter: *GtkTreeIter, var_args: cvalist): void <cimport,nodecl> end
global function gtk_tree_store_remove(tree_store: *GtkTreeStore, iter: *GtkTreeIter): gboolean <cimport,nodecl> end
global function gtk_tree_store_insert(tree_store: *GtkTreeStore, iter: *GtkTreeIter, parent: *GtkTreeIter, position: cint): void <cimport,nodecl> end
global function gtk_tree_store_insert_before(tree_store: *GtkTreeStore, iter: *GtkTreeIter, parent: *GtkTreeIter, sibling: *GtkTreeIter): void <cimport,nodecl> end
global function gtk_tree_store_insert_after(tree_store: *GtkTreeStore, iter: *GtkTreeIter, parent: *GtkTreeIter, sibling: *GtkTreeIter): void <cimport,nodecl> end
global function gtk_tree_store_insert_with_values(tree_store: *GtkTreeStore, iter: *GtkTreeIter, parent: *GtkTreeIter, position: cint, ...: cvarargs): void <cimport,nodecl> end
global function gtk_tree_store_insert_with_valuesv(tree_store: *GtkTreeStore, iter: *GtkTreeIter, parent: *GtkTreeIter, position: cint, columns: *cint, values: *GValue, n_values: cint): void <cimport,nodecl> end
global function gtk_tree_store_prepend(tree_store: *GtkTreeStore, iter: *GtkTreeIter, parent: *GtkTreeIter): void <cimport,nodecl> end
global function gtk_tree_store_append(tree_store: *GtkTreeStore, iter: *GtkTreeIter, parent: *GtkTreeIter): void <cimport,nodecl> end
global function gtk_tree_store_is_ancestor(tree_store: *GtkTreeStore, iter: *GtkTreeIter, descendant: *GtkTreeIter): gboolean <cimport,nodecl> end
global function gtk_tree_store_iter_depth(tree_store: *GtkTreeStore, iter: *GtkTreeIter): cint <cimport,nodecl> end
global function gtk_tree_store_clear(tree_store: *GtkTreeStore): void <cimport,nodecl> end
global function gtk_tree_store_iter_is_valid(tree_store: *GtkTreeStore, iter: *GtkTreeIter): gboolean <cimport,nodecl> end
global function gtk_tree_store_reorder(tree_store: *GtkTreeStore, parent: *GtkTreeIter, new_order: *cint): void <cimport,nodecl> end
global function gtk_tree_store_swap(tree_store: *GtkTreeStore, a: *GtkTreeIter, b: *GtkTreeIter): void <cimport,nodecl> end
global function gtk_tree_store_move_before(tree_store: *GtkTreeStore, iter: *GtkTreeIter, position: *GtkTreeIter): void <cimport,nodecl> end
global function gtk_tree_store_move_after(tree_store: *GtkTreeStore, iter: *GtkTreeIter, position: *GtkTreeIter): void <cimport,nodecl> end
global function gtk_get_major_version(): guint <cimport,nodecl> end
global function gtk_get_minor_version(): guint <cimport,nodecl> end
global function gtk_get_micro_version(): guint <cimport,nodecl> end
global function gtk_get_binary_age(): guint <cimport,nodecl> end
global function gtk_get_interface_age(): guint <cimport,nodecl> end
global function gtk_check_version(required_major: guint, required_minor: guint, required_micro: guint): cstring <cimport,nodecl> end
global function gtk_video_get_type(): GType <cimport,nodecl> end
global function glib_autoptr_clear_GtkVideo(_ptr: *GtkVideo): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GtkVideo(_ptr: **GtkVideo): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GtkVideo(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GtkVideo(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GtkVideo(_q: **GQueue): void <cimport,nodecl> end
global function glib_autoptr_clear_GtkVideoClass(_ptr: *GtkVideoClass): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GtkVideoClass(_ptr: **GtkVideoClass): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GtkVideoClass(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GtkVideoClass(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GtkVideoClass(_q: **GQueue): void <cimport,nodecl> end
global function GTK_VIDEO(ptr: gpointer): *GtkVideo <cimport,nodecl> end
global function GTK_IS_VIDEO(ptr: gpointer): gboolean <cimport,nodecl> end
global function gtk_video_new(): *GtkWidget <cimport,nodecl> end
global function gtk_video_new_for_media_stream(stream: *GtkMediaStream): *GtkWidget <cimport,nodecl> end
global function gtk_video_new_for_file(file: *GFile): *GtkWidget <cimport,nodecl> end
global function gtk_video_new_for_filename(filename: cstring): *GtkWidget <cimport,nodecl> end
global function gtk_video_new_for_resource(resource_path: cstring): *GtkWidget <cimport,nodecl> end
global function gtk_video_get_media_stream(self: *GtkVideo): *GtkMediaStream <cimport,nodecl> end
global function gtk_video_set_media_stream(self: *GtkVideo, stream: *GtkMediaStream): void <cimport,nodecl> end
global function gtk_video_get_file(self: *GtkVideo): *GFile <cimport,nodecl> end
global function gtk_video_set_file(self: *GtkVideo, file: *GFile): void <cimport,nodecl> end
global function gtk_video_set_filename(self: *GtkVideo, filename: cstring): void <cimport,nodecl> end
global function gtk_video_set_resource(self: *GtkVideo, resource_path: cstring): void <cimport,nodecl> end
global function gtk_video_get_autoplay(self: *GtkVideo): gboolean <cimport,nodecl> end
global function gtk_video_set_autoplay(self: *GtkVideo, autoplay: gboolean): void <cimport,nodecl> end
global function gtk_video_get_loop(self: *GtkVideo): gboolean <cimport,nodecl> end
global function gtk_video_set_loop(self: *GtkVideo, loop: gboolean): void <cimport,nodecl> end
global function gtk_viewport_get_type(): GType <cimport,nodecl> end
global function gtk_viewport_new(hadjustment: *GtkAdjustment, vadjustment: *GtkAdjustment): *GtkWidget <cimport,nodecl> end
global function gtk_viewport_get_scroll_to_focus(viewport: *GtkViewport): gboolean <cimport,nodecl> end
global function gtk_viewport_set_scroll_to_focus(viewport: *GtkViewport, scroll_to_focus: gboolean): void <cimport,nodecl> end
global function gtk_viewport_set_child(viewport: *GtkViewport, child: *GtkWidget): void <cimport,nodecl> end
global function gtk_viewport_get_child(viewport: *GtkViewport): *GtkWidget <cimport,nodecl> end
global function gtk_volume_button_get_type(): GType <cimport,nodecl> end
global function gtk_volume_button_new(): *GtkWidget <cimport,nodecl> end
global function gtk_widget_paintable_get_type(): GType <cimport,nodecl> end
global function glib_autoptr_clear_GtkWidgetPaintable(_ptr: *GtkWidgetPaintable): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GtkWidgetPaintable(_ptr: **GtkWidgetPaintable): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GtkWidgetPaintable(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GtkWidgetPaintable(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GtkWidgetPaintable(_q: **GQueue): void <cimport,nodecl> end
global function glib_autoptr_clear_GtkWidgetPaintableClass(_ptr: *GtkWidgetPaintableClass): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GtkWidgetPaintableClass(_ptr: **GtkWidgetPaintableClass): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GtkWidgetPaintableClass(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GtkWidgetPaintableClass(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GtkWidgetPaintableClass(_q: **GQueue): void <cimport,nodecl> end
global function GTK_WIDGET_PAINTABLE(ptr: gpointer): *GtkWidgetPaintable <cimport,nodecl> end
global function GTK_IS_WIDGET_PAINTABLE(ptr: gpointer): gboolean <cimport,nodecl> end
global function gtk_widget_paintable_new(widget: *GtkWidget): *GdkPaintable <cimport,nodecl> end
global function gtk_widget_paintable_get_widget(self: *GtkWidgetPaintable): *GtkWidget <cimport,nodecl> end
global function gtk_widget_paintable_set_widget(self: *GtkWidgetPaintable, widget: *GtkWidget): void <cimport,nodecl> end
global function gtk_window_controls_get_type(): GType <cimport,nodecl> end
global function glib_autoptr_clear_GtkWindowControls(_ptr: *GtkWindowControls): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GtkWindowControls(_ptr: **GtkWindowControls): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GtkWindowControls(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GtkWindowControls(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GtkWindowControls(_q: **GQueue): void <cimport,nodecl> end
global function glib_autoptr_clear_GtkWindowControlsClass(_ptr: *GtkWindowControlsClass): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GtkWindowControlsClass(_ptr: **GtkWindowControlsClass): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GtkWindowControlsClass(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GtkWindowControlsClass(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GtkWindowControlsClass(_q: **GQueue): void <cimport,nodecl> end
global function GTK_WINDOW_CONTROLS(ptr: gpointer): *GtkWindowControls <cimport,nodecl> end
global function GTK_IS_WINDOW_CONTROLS(ptr: gpointer): gboolean <cimport,nodecl> end
global function gtk_window_controls_new(side: GtkPackType): *GtkWidget <cimport,nodecl> end
global function gtk_window_controls_get_side(self: *GtkWindowControls): GtkPackType <cimport,nodecl> end
global function gtk_window_controls_set_side(self: *GtkWindowControls, side: GtkPackType): void <cimport,nodecl> end
global function gtk_window_controls_get_decoration_layout(self: *GtkWindowControls): cstring <cimport,nodecl> end
global function gtk_window_controls_set_decoration_layout(self: *GtkWindowControls, layout: cstring): void <cimport,nodecl> end
global function gtk_window_controls_get_empty(self: *GtkWindowControls): gboolean <cimport,nodecl> end
global function gtk_window_group_get_type(): GType <cimport,nodecl> end
global function gtk_window_group_new(): *GtkWindowGroup <cimport,nodecl> end
global function gtk_window_group_add_window(window_group: *GtkWindowGroup, window: *GtkWindow): void <cimport,nodecl> end
global function gtk_window_group_remove_window(window_group: *GtkWindowGroup, window: *GtkWindow): void <cimport,nodecl> end
global function gtk_window_group_list_windows(window_group: *GtkWindowGroup): *GList <cimport,nodecl> end
global function gtk_window_handle_get_type(): GType <cimport,nodecl> end
global function glib_autoptr_clear_GtkWindowHandle(_ptr: *GtkWindowHandle): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GtkWindowHandle(_ptr: **GtkWindowHandle): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GtkWindowHandle(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GtkWindowHandle(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GtkWindowHandle(_q: **GQueue): void <cimport,nodecl> end
global function glib_autoptr_clear_GtkWindowHandleClass(_ptr: *GtkWindowHandleClass): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GtkWindowHandleClass(_ptr: **GtkWindowHandleClass): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GtkWindowHandleClass(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GtkWindowHandleClass(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GtkWindowHandleClass(_q: **GQueue): void <cimport,nodecl> end
global function GTK_WINDOW_HANDLE(ptr: gpointer): *GtkWindowHandle <cimport,nodecl> end
global function GTK_IS_WINDOW_HANDLE(ptr: gpointer): gboolean <cimport,nodecl> end
global function gtk_window_handle_new(): *GtkWidget <cimport,nodecl> end
global function gtk_window_handle_get_child(self: *GtkWindowHandle): *GtkWidget <cimport,nodecl> end
global function gtk_window_handle_set_child(self: *GtkWindowHandle, child: *GtkWidget): void <cimport,nodecl> end
global function glib_autoptr_clear_GtkActionBar(_ptr: *GtkActionBar): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GtkActionBar(_ptr: **GtkActionBar): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GtkActionBar(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GtkActionBar(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GtkActionBar(_q: **GQueue): void <cimport,nodecl> end
global function glib_autoptr_clear_GtkActionable(_ptr: *GtkActionable): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GtkActionable(_ptr: **GtkActionable): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GtkActionable(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GtkActionable(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GtkActionable(_q: **GQueue): void <cimport,nodecl> end
global function glib_autoptr_clear_GtkAdjustment(_ptr: *GtkAdjustment): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GtkAdjustment(_ptr: **GtkAdjustment): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GtkAdjustment(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GtkAdjustment(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GtkAdjustment(_q: **GQueue): void <cimport,nodecl> end
global function glib_autoptr_clear_GtkAppChooser(_ptr: *GtkAppChooser): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GtkAppChooser(_ptr: **GtkAppChooser): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GtkAppChooser(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GtkAppChooser(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GtkAppChooser(_q: **GQueue): void <cimport,nodecl> end
global function glib_autoptr_clear_GtkAppChooserButton(_ptr: *GtkAppChooserButton): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GtkAppChooserButton(_ptr: **GtkAppChooserButton): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GtkAppChooserButton(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GtkAppChooserButton(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GtkAppChooserButton(_q: **GQueue): void <cimport,nodecl> end
global function glib_autoptr_clear_GtkAppChooserDialog(_ptr: *GtkAppChooserDialog): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GtkAppChooserDialog(_ptr: **GtkAppChooserDialog): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GtkAppChooserDialog(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GtkAppChooserDialog(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GtkAppChooserDialog(_q: **GQueue): void <cimport,nodecl> end
global function glib_autoptr_clear_GtkAppChooserWidget(_ptr: *GtkAppChooserWidget): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GtkAppChooserWidget(_ptr: **GtkAppChooserWidget): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GtkAppChooserWidget(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GtkAppChooserWidget(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GtkAppChooserWidget(_q: **GQueue): void <cimport,nodecl> end
global function glib_autoptr_clear_GtkApplicationWindow(_ptr: *GtkApplicationWindow): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GtkApplicationWindow(_ptr: **GtkApplicationWindow): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GtkApplicationWindow(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GtkApplicationWindow(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GtkApplicationWindow(_q: **GQueue): void <cimport,nodecl> end
global function glib_autoptr_clear_GtkAspectFrame(_ptr: *GtkAspectFrame): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GtkAspectFrame(_ptr: **GtkAspectFrame): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GtkAspectFrame(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GtkAspectFrame(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GtkAspectFrame(_q: **GQueue): void <cimport,nodecl> end
global function glib_autoptr_clear_GtkAssistant(_ptr: *GtkAssistant): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GtkAssistant(_ptr: **GtkAssistant): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GtkAssistant(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GtkAssistant(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GtkAssistant(_q: **GQueue): void <cimport,nodecl> end
global function glib_autoptr_clear_GtkBox(_ptr: *GtkBox): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GtkBox(_ptr: **GtkBox): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GtkBox(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GtkBox(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GtkBox(_q: **GQueue): void <cimport,nodecl> end
global function glib_autoptr_clear_GtkBuildable(_ptr: *GtkBuildable): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GtkBuildable(_ptr: **GtkBuildable): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GtkBuildable(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GtkBuildable(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GtkBuildable(_q: **GQueue): void <cimport,nodecl> end
global function glib_autoptr_clear_GtkBuilder(_ptr: *GtkBuilder): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GtkBuilder(_ptr: **GtkBuilder): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GtkBuilder(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GtkBuilder(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GtkBuilder(_q: **GQueue): void <cimport,nodecl> end
global function glib_autoptr_clear_GtkButton(_ptr: *GtkButton): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GtkButton(_ptr: **GtkButton): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GtkButton(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GtkButton(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GtkButton(_q: **GQueue): void <cimport,nodecl> end
global function glib_autoptr_clear_GtkCalendar(_ptr: *GtkCalendar): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GtkCalendar(_ptr: **GtkCalendar): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GtkCalendar(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GtkCalendar(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GtkCalendar(_q: **GQueue): void <cimport,nodecl> end
global function glib_autoptr_clear_GtkCellArea(_ptr: *GtkCellArea): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GtkCellArea(_ptr: **GtkCellArea): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GtkCellArea(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GtkCellArea(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GtkCellArea(_q: **GQueue): void <cimport,nodecl> end
global function glib_autoptr_clear_GtkCellAreaBox(_ptr: *GtkCellAreaBox): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GtkCellAreaBox(_ptr: **GtkCellAreaBox): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GtkCellAreaBox(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GtkCellAreaBox(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GtkCellAreaBox(_q: **GQueue): void <cimport,nodecl> end
global function glib_autoptr_clear_GtkCellAreaContext(_ptr: *GtkCellAreaContext): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GtkCellAreaContext(_ptr: **GtkCellAreaContext): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GtkCellAreaContext(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GtkCellAreaContext(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GtkCellAreaContext(_q: **GQueue): void <cimport,nodecl> end
global function glib_autoptr_clear_GtkCellEditable(_ptr: *GtkCellEditable): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GtkCellEditable(_ptr: **GtkCellEditable): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GtkCellEditable(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GtkCellEditable(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GtkCellEditable(_q: **GQueue): void <cimport,nodecl> end
global function glib_autoptr_clear_GtkCellLayout(_ptr: *GtkCellLayout): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GtkCellLayout(_ptr: **GtkCellLayout): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GtkCellLayout(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GtkCellLayout(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GtkCellLayout(_q: **GQueue): void <cimport,nodecl> end
global function glib_autoptr_clear_GtkCellRenderer(_ptr: *GtkCellRenderer): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GtkCellRenderer(_ptr: **GtkCellRenderer): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GtkCellRenderer(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GtkCellRenderer(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GtkCellRenderer(_q: **GQueue): void <cimport,nodecl> end
global function glib_autoptr_clear_GtkCellRendererAccel(_ptr: *GtkCellRendererAccel): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GtkCellRendererAccel(_ptr: **GtkCellRendererAccel): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GtkCellRendererAccel(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GtkCellRendererAccel(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GtkCellRendererAccel(_q: **GQueue): void <cimport,nodecl> end
global function glib_autoptr_clear_GtkCellRendererCombo(_ptr: *GtkCellRendererCombo): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GtkCellRendererCombo(_ptr: **GtkCellRendererCombo): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GtkCellRendererCombo(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GtkCellRendererCombo(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GtkCellRendererCombo(_q: **GQueue): void <cimport,nodecl> end
global function glib_autoptr_clear_GtkCellRendererPixbuf(_ptr: *GtkCellRendererPixbuf): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GtkCellRendererPixbuf(_ptr: **GtkCellRendererPixbuf): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GtkCellRendererPixbuf(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GtkCellRendererPixbuf(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GtkCellRendererPixbuf(_q: **GQueue): void <cimport,nodecl> end
global function glib_autoptr_clear_GtkCellRendererProgress(_ptr: *GtkCellRendererProgress): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GtkCellRendererProgress(_ptr: **GtkCellRendererProgress): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GtkCellRendererProgress(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GtkCellRendererProgress(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GtkCellRendererProgress(_q: **GQueue): void <cimport,nodecl> end
global function glib_autoptr_clear_GtkCellRendererSpin(_ptr: *GtkCellRendererSpin): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GtkCellRendererSpin(_ptr: **GtkCellRendererSpin): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GtkCellRendererSpin(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GtkCellRendererSpin(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GtkCellRendererSpin(_q: **GQueue): void <cimport,nodecl> end
global function glib_autoptr_clear_GtkCellRendererSpinner(_ptr: *GtkCellRendererSpinner): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GtkCellRendererSpinner(_ptr: **GtkCellRendererSpinner): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GtkCellRendererSpinner(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GtkCellRendererSpinner(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GtkCellRendererSpinner(_q: **GQueue): void <cimport,nodecl> end
global function glib_autoptr_clear_GtkCellRendererText(_ptr: *GtkCellRendererText): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GtkCellRendererText(_ptr: **GtkCellRendererText): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GtkCellRendererText(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GtkCellRendererText(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GtkCellRendererText(_q: **GQueue): void <cimport,nodecl> end
global function glib_autoptr_clear_GtkCellRendererToggle(_ptr: *GtkCellRendererToggle): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GtkCellRendererToggle(_ptr: **GtkCellRendererToggle): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GtkCellRendererToggle(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GtkCellRendererToggle(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GtkCellRendererToggle(_q: **GQueue): void <cimport,nodecl> end
global function glib_autoptr_clear_GtkCellView(_ptr: *GtkCellView): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GtkCellView(_ptr: **GtkCellView): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GtkCellView(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GtkCellView(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GtkCellView(_q: **GQueue): void <cimport,nodecl> end
global function glib_autoptr_clear_GtkCheckButton(_ptr: *GtkCheckButton): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GtkCheckButton(_ptr: **GtkCheckButton): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GtkCheckButton(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GtkCheckButton(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GtkCheckButton(_q: **GQueue): void <cimport,nodecl> end
global function glib_autoptr_clear_GtkColorButton(_ptr: *GtkColorButton): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GtkColorButton(_ptr: **GtkColorButton): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GtkColorButton(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GtkColorButton(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GtkColorButton(_q: **GQueue): void <cimport,nodecl> end
global function glib_autoptr_clear_GtkColorChooser(_ptr: *GtkColorChooser): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GtkColorChooser(_ptr: **GtkColorChooser): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GtkColorChooser(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GtkColorChooser(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GtkColorChooser(_q: **GQueue): void <cimport,nodecl> end
global function glib_autoptr_clear_GtkColorChooserDialog(_ptr: *GtkColorChooserDialog): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GtkColorChooserDialog(_ptr: **GtkColorChooserDialog): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GtkColorChooserDialog(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GtkColorChooserDialog(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GtkColorChooserDialog(_q: **GQueue): void <cimport,nodecl> end
global function glib_autoptr_clear_GtkColorChooserWidget(_ptr: *GtkColorChooserWidget): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GtkColorChooserWidget(_ptr: **GtkColorChooserWidget): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GtkColorChooserWidget(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GtkColorChooserWidget(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GtkColorChooserWidget(_q: **GQueue): void <cimport,nodecl> end
global function glib_autoptr_clear_GtkComboBox(_ptr: *GtkComboBox): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GtkComboBox(_ptr: **GtkComboBox): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GtkComboBox(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GtkComboBox(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GtkComboBox(_q: **GQueue): void <cimport,nodecl> end
global function glib_autoptr_clear_GtkComboBoxText(_ptr: *GtkComboBoxText): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GtkComboBoxText(_ptr: **GtkComboBoxText): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GtkComboBoxText(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GtkComboBoxText(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GtkComboBoxText(_q: **GQueue): void <cimport,nodecl> end
global function glib_autoptr_clear_GtkCssProvider(_ptr: *GtkCssProvider): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GtkCssProvider(_ptr: **GtkCssProvider): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GtkCssProvider(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GtkCssProvider(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GtkCssProvider(_q: **GQueue): void <cimport,nodecl> end
global function glib_autoptr_clear_GtkDrawingArea(_ptr: *GtkDrawingArea): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GtkDrawingArea(_ptr: **GtkDrawingArea): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GtkDrawingArea(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GtkDrawingArea(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GtkDrawingArea(_q: **GQueue): void <cimport,nodecl> end
global function glib_autoptr_clear_GtkEditable(_ptr: *GtkEditable): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GtkEditable(_ptr: **GtkEditable): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GtkEditable(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GtkEditable(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GtkEditable(_q: **GQueue): void <cimport,nodecl> end
global function glib_autoptr_clear_GtkEntry(_ptr: *GtkEntry): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GtkEntry(_ptr: **GtkEntry): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GtkEntry(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GtkEntry(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GtkEntry(_q: **GQueue): void <cimport,nodecl> end
global function glib_autoptr_clear_GtkEntryCompletion(_ptr: *GtkEntryCompletion): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GtkEntryCompletion(_ptr: **GtkEntryCompletion): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GtkEntryCompletion(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GtkEntryCompletion(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GtkEntryCompletion(_q: **GQueue): void <cimport,nodecl> end
global function glib_autoptr_clear_GtkEventController(_ptr: *GtkEventController): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GtkEventController(_ptr: **GtkEventController): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GtkEventController(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GtkEventController(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GtkEventController(_q: **GQueue): void <cimport,nodecl> end
global function glib_autoptr_clear_GtkExpander(_ptr: *GtkExpander): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GtkExpander(_ptr: **GtkExpander): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GtkExpander(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GtkExpander(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GtkExpander(_q: **GQueue): void <cimport,nodecl> end
global function glib_autoptr_clear_GtkFileChooserDialog(_ptr: *GtkFileChooserDialog): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GtkFileChooserDialog(_ptr: **GtkFileChooserDialog): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GtkFileChooserDialog(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GtkFileChooserDialog(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GtkFileChooserDialog(_q: **GQueue): void <cimport,nodecl> end
global function glib_autoptr_clear_GtkFileChooserWidget(_ptr: *GtkFileChooserWidget): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GtkFileChooserWidget(_ptr: **GtkFileChooserWidget): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GtkFileChooserWidget(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GtkFileChooserWidget(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GtkFileChooserWidget(_q: **GQueue): void <cimport,nodecl> end
global function glib_autoptr_clear_GtkFileFilter(_ptr: *GtkFileFilter): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GtkFileFilter(_ptr: **GtkFileFilter): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GtkFileFilter(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GtkFileFilter(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GtkFileFilter(_q: **GQueue): void <cimport,nodecl> end
global function glib_autoptr_clear_GtkFixed(_ptr: *GtkFixed): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GtkFixed(_ptr: **GtkFixed): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GtkFixed(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GtkFixed(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GtkFixed(_q: **GQueue): void <cimport,nodecl> end
global function glib_autoptr_clear_GtkFlowBox(_ptr: *GtkFlowBox): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GtkFlowBox(_ptr: **GtkFlowBox): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GtkFlowBox(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GtkFlowBox(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GtkFlowBox(_q: **GQueue): void <cimport,nodecl> end
global function glib_autoptr_clear_GtkFlowBoxChild(_ptr: *GtkFlowBoxChild): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GtkFlowBoxChild(_ptr: **GtkFlowBoxChild): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GtkFlowBoxChild(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GtkFlowBoxChild(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GtkFlowBoxChild(_q: **GQueue): void <cimport,nodecl> end
global function glib_autoptr_clear_GtkFontButton(_ptr: *GtkFontButton): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GtkFontButton(_ptr: **GtkFontButton): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GtkFontButton(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GtkFontButton(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GtkFontButton(_q: **GQueue): void <cimport,nodecl> end
global function glib_autoptr_clear_GtkFontChooser(_ptr: *GtkFontChooser): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GtkFontChooser(_ptr: **GtkFontChooser): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GtkFontChooser(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GtkFontChooser(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GtkFontChooser(_q: **GQueue): void <cimport,nodecl> end
global function glib_autoptr_clear_GtkFontChooserDialog(_ptr: *GtkFontChooserDialog): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GtkFontChooserDialog(_ptr: **GtkFontChooserDialog): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GtkFontChooserDialog(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GtkFontChooserDialog(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GtkFontChooserDialog(_q: **GQueue): void <cimport,nodecl> end
global function glib_autoptr_clear_GtkFontChooserWidget(_ptr: *GtkFontChooserWidget): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GtkFontChooserWidget(_ptr: **GtkFontChooserWidget): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GtkFontChooserWidget(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GtkFontChooserWidget(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GtkFontChooserWidget(_q: **GQueue): void <cimport,nodecl> end
global function glib_autoptr_clear_GtkFrame(_ptr: *GtkFrame): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GtkFrame(_ptr: **GtkFrame): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GtkFrame(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GtkFrame(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GtkFrame(_q: **GQueue): void <cimport,nodecl> end
global function glib_autoptr_clear_GtkGLArea(_ptr: *GtkGLArea): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GtkGLArea(_ptr: **GtkGLArea): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GtkGLArea(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GtkGLArea(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GtkGLArea(_q: **GQueue): void <cimport,nodecl> end
global function glib_autoptr_clear_GtkGesture(_ptr: *GtkGesture): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GtkGesture(_ptr: **GtkGesture): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GtkGesture(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GtkGesture(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GtkGesture(_q: **GQueue): void <cimport,nodecl> end
global function glib_autoptr_clear_GtkGestureDrag(_ptr: *GtkGestureDrag): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GtkGestureDrag(_ptr: **GtkGestureDrag): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GtkGestureDrag(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GtkGestureDrag(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GtkGestureDrag(_q: **GQueue): void <cimport,nodecl> end
global function glib_autoptr_clear_GtkGestureLongPress(_ptr: *GtkGestureLongPress): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GtkGestureLongPress(_ptr: **GtkGestureLongPress): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GtkGestureLongPress(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GtkGestureLongPress(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GtkGestureLongPress(_q: **GQueue): void <cimport,nodecl> end
global function glib_autoptr_clear_GtkGestureClick(_ptr: *GtkGestureClick): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GtkGestureClick(_ptr: **GtkGestureClick): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GtkGestureClick(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GtkGestureClick(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GtkGestureClick(_q: **GQueue): void <cimport,nodecl> end
global function glib_autoptr_clear_GtkGesturePan(_ptr: *GtkGesturePan): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GtkGesturePan(_ptr: **GtkGesturePan): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GtkGesturePan(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GtkGesturePan(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GtkGesturePan(_q: **GQueue): void <cimport,nodecl> end
global function glib_autoptr_clear_GtkGestureRotate(_ptr: *GtkGestureRotate): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GtkGestureRotate(_ptr: **GtkGestureRotate): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GtkGestureRotate(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GtkGestureRotate(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GtkGestureRotate(_q: **GQueue): void <cimport,nodecl> end
global function glib_autoptr_clear_GtkGestureSingle(_ptr: *GtkGestureSingle): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GtkGestureSingle(_ptr: **GtkGestureSingle): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GtkGestureSingle(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GtkGestureSingle(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GtkGestureSingle(_q: **GQueue): void <cimport,nodecl> end
global function glib_autoptr_clear_GtkGestureSwipe(_ptr: *GtkGestureSwipe): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GtkGestureSwipe(_ptr: **GtkGestureSwipe): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GtkGestureSwipe(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GtkGestureSwipe(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GtkGestureSwipe(_q: **GQueue): void <cimport,nodecl> end
global function glib_autoptr_clear_GtkGestureZoom(_ptr: *GtkGestureZoom): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GtkGestureZoom(_ptr: **GtkGestureZoom): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GtkGestureZoom(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GtkGestureZoom(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GtkGestureZoom(_q: **GQueue): void <cimport,nodecl> end
global function glib_autoptr_clear_GtkGrid(_ptr: *GtkGrid): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GtkGrid(_ptr: **GtkGrid): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GtkGrid(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GtkGrid(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GtkGrid(_q: **GQueue): void <cimport,nodecl> end
global function glib_autoptr_clear_GtkGridView(_ptr: *GtkGridView): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GtkGridView(_ptr: **GtkGridView): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GtkGridView(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GtkGridView(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GtkGridView(_q: **GQueue): void <cimport,nodecl> end
global function glib_autoptr_clear_GtkHeaderBar(_ptr: *GtkHeaderBar): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GtkHeaderBar(_ptr: **GtkHeaderBar): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GtkHeaderBar(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GtkHeaderBar(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GtkHeaderBar(_q: **GQueue): void <cimport,nodecl> end
global function glib_autoptr_clear_GtkIMContext(_ptr: *GtkIMContext): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GtkIMContext(_ptr: **GtkIMContext): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GtkIMContext(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GtkIMContext(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GtkIMContext(_q: **GQueue): void <cimport,nodecl> end
global function glib_autoptr_clear_GtkIMContextSimple(_ptr: *GtkIMContextSimple): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GtkIMContextSimple(_ptr: **GtkIMContextSimple): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GtkIMContextSimple(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GtkIMContextSimple(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GtkIMContextSimple(_q: **GQueue): void <cimport,nodecl> end
global function glib_autoptr_clear_GtkIMMulticontext(_ptr: *GtkIMMulticontext): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GtkIMMulticontext(_ptr: **GtkIMMulticontext): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GtkIMMulticontext(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GtkIMMulticontext(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GtkIMMulticontext(_q: **GQueue): void <cimport,nodecl> end
global function glib_autoptr_clear_GtkIconPaintable(_ptr: *GtkIconPaintable): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GtkIconPaintable(_ptr: **GtkIconPaintable): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GtkIconPaintable(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GtkIconPaintable(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GtkIconPaintable(_q: **GQueue): void <cimport,nodecl> end
global function glib_autoptr_clear_GtkIconTheme(_ptr: *GtkIconTheme): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GtkIconTheme(_ptr: **GtkIconTheme): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GtkIconTheme(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GtkIconTheme(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GtkIconTheme(_q: **GQueue): void <cimport,nodecl> end
global function glib_autoptr_clear_GtkIconView(_ptr: *GtkIconView): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GtkIconView(_ptr: **GtkIconView): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GtkIconView(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GtkIconView(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GtkIconView(_q: **GQueue): void <cimport,nodecl> end
global function glib_autoptr_clear_GtkImage(_ptr: *GtkImage): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GtkImage(_ptr: **GtkImage): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GtkImage(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GtkImage(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GtkImage(_q: **GQueue): void <cimport,nodecl> end
global function glib_autoptr_clear_GtkInfoBar(_ptr: *GtkInfoBar): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GtkInfoBar(_ptr: **GtkInfoBar): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GtkInfoBar(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GtkInfoBar(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GtkInfoBar(_q: **GQueue): void <cimport,nodecl> end
global function glib_autoptr_clear_GtkLevelBar(_ptr: *GtkLevelBar): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GtkLevelBar(_ptr: **GtkLevelBar): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GtkLevelBar(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GtkLevelBar(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GtkLevelBar(_q: **GQueue): void <cimport,nodecl> end
global function glib_autoptr_clear_GtkLinkButton(_ptr: *GtkLinkButton): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GtkLinkButton(_ptr: **GtkLinkButton): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GtkLinkButton(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GtkLinkButton(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GtkLinkButton(_q: **GQueue): void <cimport,nodecl> end
global function glib_autoptr_clear_GtkListItem(_ptr: *GtkListItem): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GtkListItem(_ptr: **GtkListItem): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GtkListItem(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GtkListItem(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GtkListItem(_q: **GQueue): void <cimport,nodecl> end
global function glib_autoptr_clear_GtkListItemFactory(_ptr: *GtkListItemFactory): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GtkListItemFactory(_ptr: **GtkListItemFactory): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GtkListItemFactory(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GtkListItemFactory(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GtkListItemFactory(_q: **GQueue): void <cimport,nodecl> end
global function glib_autoptr_clear_GtkListStore(_ptr: *GtkListStore): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GtkListStore(_ptr: **GtkListStore): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GtkListStore(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GtkListStore(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GtkListStore(_q: **GQueue): void <cimport,nodecl> end
global function glib_autoptr_clear_GtkLockButton(_ptr: *GtkLockButton): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GtkLockButton(_ptr: **GtkLockButton): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GtkLockButton(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GtkLockButton(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GtkLockButton(_q: **GQueue): void <cimport,nodecl> end
global function glib_autoptr_clear_GtkMenuButton(_ptr: *GtkMenuButton): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GtkMenuButton(_ptr: **GtkMenuButton): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GtkMenuButton(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GtkMenuButton(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GtkMenuButton(_q: **GQueue): void <cimport,nodecl> end
global function glib_autoptr_clear_GtkMessageDialog(_ptr: *GtkMessageDialog): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GtkMessageDialog(_ptr: **GtkMessageDialog): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GtkMessageDialog(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GtkMessageDialog(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GtkMessageDialog(_q: **GQueue): void <cimport,nodecl> end
global function glib_autoptr_clear_GtkMountOperation(_ptr: *GtkMountOperation): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GtkMountOperation(_ptr: **GtkMountOperation): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GtkMountOperation(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GtkMountOperation(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GtkMountOperation(_q: **GQueue): void <cimport,nodecl> end
global function glib_autoptr_clear_GtkNotebook(_ptr: *GtkNotebook): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GtkNotebook(_ptr: **GtkNotebook): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GtkNotebook(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GtkNotebook(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GtkNotebook(_q: **GQueue): void <cimport,nodecl> end
global function glib_autoptr_clear_GtkOrientable(_ptr: *GtkOrientable): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GtkOrientable(_ptr: **GtkOrientable): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GtkOrientable(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GtkOrientable(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GtkOrientable(_q: **GQueue): void <cimport,nodecl> end
global function glib_autoptr_clear_GtkOverlay(_ptr: *GtkOverlay): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GtkOverlay(_ptr: **GtkOverlay): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GtkOverlay(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GtkOverlay(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GtkOverlay(_q: **GQueue): void <cimport,nodecl> end
global function glib_autoptr_clear_GtkPageSetup(_ptr: *GtkPageSetup): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GtkPageSetup(_ptr: **GtkPageSetup): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GtkPageSetup(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GtkPageSetup(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GtkPageSetup(_q: **GQueue): void <cimport,nodecl> end
global function glib_autoptr_clear_GtkPaned(_ptr: *GtkPaned): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GtkPaned(_ptr: **GtkPaned): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GtkPaned(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GtkPaned(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GtkPaned(_q: **GQueue): void <cimport,nodecl> end
global function glib_autoptr_clear_GtkPopover(_ptr: *GtkPopover): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GtkPopover(_ptr: **GtkPopover): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GtkPopover(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GtkPopover(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GtkPopover(_q: **GQueue): void <cimport,nodecl> end
global function glib_autoptr_clear_GtkPopoverMenu(_ptr: *GtkPopoverMenu): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GtkPopoverMenu(_ptr: **GtkPopoverMenu): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GtkPopoverMenu(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GtkPopoverMenu(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GtkPopoverMenu(_q: **GQueue): void <cimport,nodecl> end
global function glib_autoptr_clear_GtkPrintContext(_ptr: *GtkPrintContext): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GtkPrintContext(_ptr: **GtkPrintContext): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GtkPrintContext(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GtkPrintContext(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GtkPrintContext(_q: **GQueue): void <cimport,nodecl> end
global function glib_autoptr_clear_GtkPrintOperation(_ptr: *GtkPrintOperation): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GtkPrintOperation(_ptr: **GtkPrintOperation): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GtkPrintOperation(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GtkPrintOperation(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GtkPrintOperation(_q: **GQueue): void <cimport,nodecl> end
global function glib_autoptr_clear_GtkPrintOperationPreview(_ptr: *GtkPrintOperationPreview): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GtkPrintOperationPreview(_ptr: **GtkPrintOperationPreview): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GtkPrintOperationPreview(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GtkPrintOperationPreview(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GtkPrintOperationPreview(_q: **GQueue): void <cimport,nodecl> end
global function glib_autoptr_clear_GtkPrintSettings(_ptr: *GtkPrintSettings): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GtkPrintSettings(_ptr: **GtkPrintSettings): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GtkPrintSettings(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GtkPrintSettings(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GtkPrintSettings(_q: **GQueue): void <cimport,nodecl> end
global function glib_autoptr_clear_GtkProgressBar(_ptr: *GtkProgressBar): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GtkProgressBar(_ptr: **GtkProgressBar): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GtkProgressBar(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GtkProgressBar(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GtkProgressBar(_q: **GQueue): void <cimport,nodecl> end
global function glib_autoptr_clear_GtkRange(_ptr: *GtkRange): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GtkRange(_ptr: **GtkRange): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GtkRange(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GtkRange(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GtkRange(_q: **GQueue): void <cimport,nodecl> end
global function glib_autoptr_clear_GtkRecentManager(_ptr: *GtkRecentManager): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GtkRecentManager(_ptr: **GtkRecentManager): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GtkRecentManager(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GtkRecentManager(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GtkRecentManager(_q: **GQueue): void <cimport,nodecl> end
global function glib_autoptr_clear_GtkRevealer(_ptr: *GtkRevealer): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GtkRevealer(_ptr: **GtkRevealer): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GtkRevealer(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GtkRevealer(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GtkRevealer(_q: **GQueue): void <cimport,nodecl> end
global function glib_autoptr_clear_GtkScale(_ptr: *GtkScale): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GtkScale(_ptr: **GtkScale): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GtkScale(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GtkScale(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GtkScale(_q: **GQueue): void <cimport,nodecl> end
global function glib_autoptr_clear_GtkScaleButton(_ptr: *GtkScaleButton): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GtkScaleButton(_ptr: **GtkScaleButton): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GtkScaleButton(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GtkScaleButton(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GtkScaleButton(_q: **GQueue): void <cimport,nodecl> end
global function glib_autoptr_clear_GtkScrollable(_ptr: *GtkScrollable): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GtkScrollable(_ptr: **GtkScrollable): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GtkScrollable(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GtkScrollable(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GtkScrollable(_q: **GQueue): void <cimport,nodecl> end
global function glib_autoptr_clear_GtkScrollbar(_ptr: *GtkScrollbar): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GtkScrollbar(_ptr: **GtkScrollbar): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GtkScrollbar(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GtkScrollbar(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GtkScrollbar(_q: **GQueue): void <cimport,nodecl> end
global function glib_autoptr_clear_GtkScrolledWindow(_ptr: *GtkScrolledWindow): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GtkScrolledWindow(_ptr: **GtkScrolledWindow): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GtkScrolledWindow(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GtkScrolledWindow(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GtkScrolledWindow(_q: **GQueue): void <cimport,nodecl> end
global function glib_autoptr_clear_GtkSearchBar(_ptr: *GtkSearchBar): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GtkSearchBar(_ptr: **GtkSearchBar): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GtkSearchBar(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GtkSearchBar(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GtkSearchBar(_q: **GQueue): void <cimport,nodecl> end
global function glib_autoptr_clear_GtkSearchEntry(_ptr: *GtkSearchEntry): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GtkSearchEntry(_ptr: **GtkSearchEntry): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GtkSearchEntry(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GtkSearchEntry(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GtkSearchEntry(_q: **GQueue): void <cimport,nodecl> end
global function glib_autoptr_clear_GtkSeparator(_ptr: *GtkSeparator): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GtkSeparator(_ptr: **GtkSeparator): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GtkSeparator(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GtkSeparator(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GtkSeparator(_q: **GQueue): void <cimport,nodecl> end
global function glib_autoptr_clear_GtkSettings(_ptr: *GtkSettings): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GtkSettings(_ptr: **GtkSettings): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GtkSettings(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GtkSettings(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GtkSettings(_q: **GQueue): void <cimport,nodecl> end
global function glib_autoptr_clear_GtkStackSidebar(_ptr: *GtkStackSidebar): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GtkStackSidebar(_ptr: **GtkStackSidebar): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GtkStackSidebar(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GtkStackSidebar(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GtkStackSidebar(_q: **GQueue): void <cimport,nodecl> end
global function glib_autoptr_clear_GtkSizeGroup(_ptr: *GtkSizeGroup): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GtkSizeGroup(_ptr: **GtkSizeGroup): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GtkSizeGroup(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GtkSizeGroup(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GtkSizeGroup(_q: **GQueue): void <cimport,nodecl> end
global function glib_autoptr_clear_GtkSpinButton(_ptr: *GtkSpinButton): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GtkSpinButton(_ptr: **GtkSpinButton): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GtkSpinButton(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GtkSpinButton(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GtkSpinButton(_q: **GQueue): void <cimport,nodecl> end
global function glib_autoptr_clear_GtkSpinner(_ptr: *GtkSpinner): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GtkSpinner(_ptr: **GtkSpinner): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GtkSpinner(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GtkSpinner(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GtkSpinner(_q: **GQueue): void <cimport,nodecl> end
global function glib_autoptr_clear_GtkStack(_ptr: *GtkStack): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GtkStack(_ptr: **GtkStack): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GtkStack(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GtkStack(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GtkStack(_q: **GQueue): void <cimport,nodecl> end
global function glib_autoptr_clear_GtkStackSwitcher(_ptr: *GtkStackSwitcher): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GtkStackSwitcher(_ptr: **GtkStackSwitcher): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GtkStackSwitcher(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GtkStackSwitcher(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GtkStackSwitcher(_q: **GQueue): void <cimport,nodecl> end
global function glib_autoptr_clear_GtkStatusbar(_ptr: *GtkStatusbar): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GtkStatusbar(_ptr: **GtkStatusbar): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GtkStatusbar(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GtkStatusbar(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GtkStatusbar(_q: **GQueue): void <cimport,nodecl> end
global function glib_autoptr_clear_GtkStyleContext(_ptr: *GtkStyleContext): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GtkStyleContext(_ptr: **GtkStyleContext): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GtkStyleContext(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GtkStyleContext(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GtkStyleContext(_q: **GQueue): void <cimport,nodecl> end
global function glib_autoptr_clear_GtkStyleProvider(_ptr: *GtkStyleProvider): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GtkStyleProvider(_ptr: **GtkStyleProvider): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GtkStyleProvider(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GtkStyleProvider(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GtkStyleProvider(_q: **GQueue): void <cimport,nodecl> end
global function glib_autoptr_clear_GtkSwitch(_ptr: *GtkSwitch): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GtkSwitch(_ptr: **GtkSwitch): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GtkSwitch(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GtkSwitch(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GtkSwitch(_q: **GQueue): void <cimport,nodecl> end
global function glib_autoptr_clear_GtkTextBuffer(_ptr: *GtkTextBuffer): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GtkTextBuffer(_ptr: **GtkTextBuffer): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GtkTextBuffer(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GtkTextBuffer(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GtkTextBuffer(_q: **GQueue): void <cimport,nodecl> end
global function glib_autoptr_clear_GtkTextChildAnchor(_ptr: *GtkTextChildAnchor): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GtkTextChildAnchor(_ptr: **GtkTextChildAnchor): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GtkTextChildAnchor(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GtkTextChildAnchor(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GtkTextChildAnchor(_q: **GQueue): void <cimport,nodecl> end
global function glib_autoptr_clear_GtkTextMark(_ptr: *GtkTextMark): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GtkTextMark(_ptr: **GtkTextMark): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GtkTextMark(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GtkTextMark(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GtkTextMark(_q: **GQueue): void <cimport,nodecl> end
global function glib_autoptr_clear_GtkTextTag(_ptr: *GtkTextTag): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GtkTextTag(_ptr: **GtkTextTag): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GtkTextTag(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GtkTextTag(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GtkTextTag(_q: **GQueue): void <cimport,nodecl> end
global function glib_autoptr_clear_GtkTextTagTable(_ptr: *GtkTextTagTable): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GtkTextTagTable(_ptr: **GtkTextTagTable): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GtkTextTagTable(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GtkTextTagTable(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GtkTextTagTable(_q: **GQueue): void <cimport,nodecl> end
global function glib_autoptr_clear_GtkTextView(_ptr: *GtkTextView): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GtkTextView(_ptr: **GtkTextView): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GtkTextView(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GtkTextView(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GtkTextView(_q: **GQueue): void <cimport,nodecl> end
global function glib_autoptr_clear_GtkToggleButton(_ptr: *GtkToggleButton): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GtkToggleButton(_ptr: **GtkToggleButton): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GtkToggleButton(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GtkToggleButton(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GtkToggleButton(_q: **GQueue): void <cimport,nodecl> end
global function glib_autoptr_clear_GtkTooltip(_ptr: *GtkTooltip): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GtkTooltip(_ptr: **GtkTooltip): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GtkTooltip(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GtkTooltip(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GtkTooltip(_q: **GQueue): void <cimport,nodecl> end
global function glib_autoptr_clear_GtkTreeDragDest(_ptr: *GtkTreeDragDest): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GtkTreeDragDest(_ptr: **GtkTreeDragDest): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GtkTreeDragDest(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GtkTreeDragDest(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GtkTreeDragDest(_q: **GQueue): void <cimport,nodecl> end
global function glib_autoptr_clear_GtkTreeDragSource(_ptr: *GtkTreeDragSource): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GtkTreeDragSource(_ptr: **GtkTreeDragSource): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GtkTreeDragSource(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GtkTreeDragSource(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GtkTreeDragSource(_q: **GQueue): void <cimport,nodecl> end
global function glib_autoptr_clear_GtkTreeModel(_ptr: *GtkTreeModel): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GtkTreeModel(_ptr: **GtkTreeModel): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GtkTreeModel(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GtkTreeModel(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GtkTreeModel(_q: **GQueue): void <cimport,nodecl> end
global function glib_autoptr_clear_GtkTreeModelFilter(_ptr: *GtkTreeModelFilter): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GtkTreeModelFilter(_ptr: **GtkTreeModelFilter): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GtkTreeModelFilter(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GtkTreeModelFilter(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GtkTreeModelFilter(_q: **GQueue): void <cimport,nodecl> end
global function glib_autoptr_clear_GtkTreeModelSort(_ptr: *GtkTreeModelSort): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GtkTreeModelSort(_ptr: **GtkTreeModelSort): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GtkTreeModelSort(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GtkTreeModelSort(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GtkTreeModelSort(_q: **GQueue): void <cimport,nodecl> end
global function glib_autoptr_clear_GtkTreeSelection(_ptr: *GtkTreeSelection): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GtkTreeSelection(_ptr: **GtkTreeSelection): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GtkTreeSelection(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GtkTreeSelection(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GtkTreeSelection(_q: **GQueue): void <cimport,nodecl> end
global function glib_autoptr_clear_GtkTreeSortable(_ptr: *GtkTreeSortable): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GtkTreeSortable(_ptr: **GtkTreeSortable): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GtkTreeSortable(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GtkTreeSortable(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GtkTreeSortable(_q: **GQueue): void <cimport,nodecl> end
global function glib_autoptr_clear_GtkTreeStore(_ptr: *GtkTreeStore): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GtkTreeStore(_ptr: **GtkTreeStore): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GtkTreeStore(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GtkTreeStore(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GtkTreeStore(_q: **GQueue): void <cimport,nodecl> end
global function glib_autoptr_clear_GtkTreeView(_ptr: *GtkTreeView): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GtkTreeView(_ptr: **GtkTreeView): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GtkTreeView(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GtkTreeView(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GtkTreeView(_q: **GQueue): void <cimport,nodecl> end
global function glib_autoptr_clear_GtkTreeViewColumn(_ptr: *GtkTreeViewColumn): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GtkTreeViewColumn(_ptr: **GtkTreeViewColumn): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GtkTreeViewColumn(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GtkTreeViewColumn(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GtkTreeViewColumn(_q: **GQueue): void <cimport,nodecl> end
global function glib_autoptr_clear_GtkViewport(_ptr: *GtkViewport): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GtkViewport(_ptr: **GtkViewport): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GtkViewport(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GtkViewport(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GtkViewport(_q: **GQueue): void <cimport,nodecl> end
global function glib_autoptr_clear_GtkVolumeButton(_ptr: *GtkVolumeButton): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GtkVolumeButton(_ptr: **GtkVolumeButton): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GtkVolumeButton(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GtkVolumeButton(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GtkVolumeButton(_q: **GQueue): void <cimport,nodecl> end
global function glib_autoptr_clear_GtkPaperSize(_ptr: *GtkPaperSize): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GtkPaperSize(_ptr: **GtkPaperSize): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GtkPaperSize(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GtkPaperSize(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GtkPaperSize(_q: **GQueue): void <cimport,nodecl> end
global function glib_autoptr_clear_GtkRecentInfo(_ptr: *GtkRecentInfo): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GtkRecentInfo(_ptr: **GtkRecentInfo): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GtkRecentInfo(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GtkRecentInfo(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GtkRecentInfo(_q: **GQueue): void <cimport,nodecl> end
global function glib_autoptr_clear_GtkTextIter(_ptr: *GtkTextIter): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GtkTextIter(_ptr: **GtkTextIter): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GtkTextIter(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GtkTextIter(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GtkTextIter(_q: **GQueue): void <cimport,nodecl> end
global function glib_autoptr_clear_GtkTreeIter(_ptr: *GtkTreeIter): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GtkTreeIter(_ptr: **GtkTreeIter): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GtkTreeIter(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GtkTreeIter(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GtkTreeIter(_q: **GQueue): void <cimport,nodecl> end
global function glib_autoptr_clear_GtkTreePath(_ptr: *GtkTreePath): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GtkTreePath(_ptr: **GtkTreePath): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GtkTreePath(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GtkTreePath(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GtkTreePath(_q: **GQueue): void <cimport,nodecl> end
global function glib_autoptr_clear_GtkTreeRowReference(_ptr: *GtkTreeRowReference): void <cimport,nodecl> end
global function glib_autoptr_cleanup_GtkTreeRowReference(_ptr: **GtkTreeRowReference): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_GtkTreeRowReference(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_GtkTreeRowReference(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_GtkTreeRowReference(_q: **GQueue): void <cimport,nodecl> end
global function adw_get_major_version(): guint <cimport,nodecl> end
global function adw_get_minor_version(): guint <cimport,nodecl> end
global function adw_get_micro_version(): guint <cimport,nodecl> end
global function adw_preferences_row_get_type(): GType <cimport,nodecl> end
global function glib_autoptr_clear_AdwPreferencesRow(_ptr: *AdwPreferencesRow): void <cimport,nodecl> end
global function glib_autoptr_cleanup_AdwPreferencesRow(_ptr: **AdwPreferencesRow): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_AdwPreferencesRow(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_AdwPreferencesRow(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_AdwPreferencesRow(_q: **GQueue): void <cimport,nodecl> end
global function glib_autoptr_clear_AdwPreferencesRowClass(_ptr: *AdwPreferencesRowClass): void <cimport,nodecl> end
global function glib_autoptr_cleanup_AdwPreferencesRowClass(_ptr: **AdwPreferencesRowClass): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_AdwPreferencesRowClass(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_AdwPreferencesRowClass(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_AdwPreferencesRowClass(_q: **GQueue): void <cimport,nodecl> end
global function ADW_PREFERENCES_ROW(ptr: gpointer): *AdwPreferencesRow <cimport,nodecl> end
global function ADW_PREFERENCES_ROW_CLASS(ptr: gpointer): *AdwPreferencesRowClass <cimport,nodecl> end
global function ADW_IS_PREFERENCES_ROW(ptr: gpointer): gboolean <cimport,nodecl> end
global function ADW_IS_PREFERENCES_ROW_CLASS(ptr: gpointer): gboolean <cimport,nodecl> end
global function ADW_PREFERENCES_ROW_GET_CLASS(ptr: gpointer): *AdwPreferencesRowClass <cimport,nodecl> end
global function adw_preferences_row_new(): *GtkWidget <cimport,nodecl> end
global function adw_preferences_row_get_title(self: *AdwPreferencesRow): cstring <cimport,nodecl> end
global function adw_preferences_row_set_title(self: *AdwPreferencesRow, title: cstring): void <cimport,nodecl> end
global function adw_preferences_row_get_use_underline(self: *AdwPreferencesRow): gboolean <cimport,nodecl> end
global function adw_preferences_row_set_use_underline(self: *AdwPreferencesRow, use_underline: gboolean): void <cimport,nodecl> end
global function adw_action_row_get_type(): GType <cimport,nodecl> end
global function glib_autoptr_clear_AdwActionRow(_ptr: *AdwActionRow): void <cimport,nodecl> end
global function glib_autoptr_cleanup_AdwActionRow(_ptr: **AdwActionRow): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_AdwActionRow(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_AdwActionRow(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_AdwActionRow(_q: **GQueue): void <cimport,nodecl> end
global function glib_autoptr_clear_AdwActionRowClass(_ptr: *AdwActionRowClass): void <cimport,nodecl> end
global function glib_autoptr_cleanup_AdwActionRowClass(_ptr: **AdwActionRowClass): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_AdwActionRowClass(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_AdwActionRowClass(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_AdwActionRowClass(_q: **GQueue): void <cimport,nodecl> end
global function ADW_ACTION_ROW(ptr: gpointer): *AdwActionRow <cimport,nodecl> end
global function ADW_ACTION_ROW_CLASS(ptr: gpointer): *AdwActionRowClass <cimport,nodecl> end
global function ADW_IS_ACTION_ROW(ptr: gpointer): gboolean <cimport,nodecl> end
global function ADW_IS_ACTION_ROW_CLASS(ptr: gpointer): gboolean <cimport,nodecl> end
global function ADW_ACTION_ROW_GET_CLASS(ptr: gpointer): *AdwActionRowClass <cimport,nodecl> end
global function adw_action_row_new(): *GtkWidget <cimport,nodecl> end
global function adw_action_row_get_subtitle(self: *AdwActionRow): cstring <cimport,nodecl> end
global function adw_action_row_set_subtitle(self: *AdwActionRow, subtitle: cstring): void <cimport,nodecl> end
global function adw_action_row_get_icon_name(self: *AdwActionRow): cstring <cimport,nodecl> end
global function adw_action_row_set_icon_name(self: *AdwActionRow, icon_name: cstring): void <cimport,nodecl> end
global function adw_action_row_get_activatable_widget(self: *AdwActionRow): *GtkWidget <cimport,nodecl> end
global function adw_action_row_set_activatable_widget(self: *AdwActionRow, widget: *GtkWidget): void <cimport,nodecl> end
global function adw_action_row_get_title_lines(self: *AdwActionRow): cint <cimport,nodecl> end
global function adw_action_row_set_title_lines(self: *AdwActionRow, title_lines: cint): void <cimport,nodecl> end
global function adw_action_row_get_subtitle_lines(self: *AdwActionRow): cint <cimport,nodecl> end
global function adw_action_row_set_subtitle_lines(self: *AdwActionRow, subtitle_lines: cint): void <cimport,nodecl> end
global function adw_action_row_add_prefix(self: *AdwActionRow, widget: *GtkWidget): void <cimport,nodecl> end
global function adw_action_row_add_suffix(self: *AdwActionRow, widget: *GtkWidget): void <cimport,nodecl> end
global function adw_action_row_remove(self: *AdwActionRow, widget: *GtkWidget): void <cimport,nodecl> end
global function adw_action_row_activate(self: *AdwActionRow): void <cimport,nodecl> end
global function adw_animation_target_get_type(): GType <cimport,nodecl> end
global function glib_autoptr_clear_AdwAnimationTarget(_ptr: *AdwAnimationTarget): void <cimport,nodecl> end
global function glib_autoptr_cleanup_AdwAnimationTarget(_ptr: **AdwAnimationTarget): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_AdwAnimationTarget(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_AdwAnimationTarget(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_AdwAnimationTarget(_q: **GQueue): void <cimport,nodecl> end
global function glib_autoptr_clear_AdwAnimationTargetClass(_ptr: *AdwAnimationTargetClass): void <cimport,nodecl> end
global function glib_autoptr_cleanup_AdwAnimationTargetClass(_ptr: **AdwAnimationTargetClass): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_AdwAnimationTargetClass(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_AdwAnimationTargetClass(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_AdwAnimationTargetClass(_q: **GQueue): void <cimport,nodecl> end
global function ADW_ANIMATION_TARGET(ptr: gpointer): *AdwAnimationTarget <cimport,nodecl> end
global function ADW_ANIMATION_TARGET_CLASS(ptr: gpointer): *AdwAnimationTargetClass <cimport,nodecl> end
global function ADW_IS_ANIMATION_TARGET(ptr: gpointer): gboolean <cimport,nodecl> end
global function ADW_IS_ANIMATION_TARGET_CLASS(ptr: gpointer): gboolean <cimport,nodecl> end
global function ADW_ANIMATION_TARGET_GET_CLASS(ptr: gpointer): *AdwAnimationTargetClass <cimport,nodecl> end
global function adw_callback_animation_target_get_type(): GType <cimport,nodecl> end
global function glib_autoptr_clear_AdwCallbackAnimationTarget(_ptr: *AdwCallbackAnimationTarget): void <cimport,nodecl> end
global function glib_autoptr_cleanup_AdwCallbackAnimationTarget(_ptr: **AdwCallbackAnimationTarget): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_AdwCallbackAnimationTarget(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_AdwCallbackAnimationTarget(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_AdwCallbackAnimationTarget(_q: **GQueue): void <cimport,nodecl> end
global function glib_autoptr_clear_AdwCallbackAnimationTargetClass(_ptr: *AdwCallbackAnimationTargetClass): void <cimport,nodecl> end
global function glib_autoptr_cleanup_AdwCallbackAnimationTargetClass(_ptr: **AdwCallbackAnimationTargetClass): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_AdwCallbackAnimationTargetClass(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_AdwCallbackAnimationTargetClass(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_AdwCallbackAnimationTargetClass(_q: **GQueue): void <cimport,nodecl> end
global function ADW_CALLBACK_ANIMATION_TARGET(ptr: gpointer): *AdwCallbackAnimationTarget <cimport,nodecl> end
global function ADW_CALLBACK_ANIMATION_TARGET_CLASS(ptr: gpointer): *AdwCallbackAnimationTargetClass <cimport,nodecl> end
global function ADW_IS_CALLBACK_ANIMATION_TARGET(ptr: gpointer): gboolean <cimport,nodecl> end
global function ADW_IS_CALLBACK_ANIMATION_TARGET_CLASS(ptr: gpointer): gboolean <cimport,nodecl> end
global function ADW_CALLBACK_ANIMATION_TARGET_GET_CLASS(ptr: gpointer): *AdwCallbackAnimationTargetClass <cimport,nodecl> end
global function adw_callback_animation_target_new(callback: AdwAnimationTargetFunc, user_data: gpointer, destroy: GDestroyNotify): *AdwAnimationTarget <cimport,nodecl> end
global function adw_animation_state_get_type(): GType <cimport,nodecl> end
global function adw_easing_get_type(): GType <cimport,nodecl> end
global function adw_flap_fold_policy_get_type(): GType <cimport,nodecl> end
global function adw_flap_transition_type_get_type(): GType <cimport,nodecl> end
global function adw_fold_threshold_policy_get_type(): GType <cimport,nodecl> end
global function adw_centering_policy_get_type(): GType <cimport,nodecl> end
global function adw_leaflet_transition_type_get_type(): GType <cimport,nodecl> end
global function adw_navigation_direction_get_type(): GType <cimport,nodecl> end
global function adw_squeezer_transition_type_get_type(): GType <cimport,nodecl> end
global function adw_color_scheme_get_type(): GType <cimport,nodecl> end
global function adw_toast_priority_get_type(): GType <cimport,nodecl> end
global function adw_view_switcher_policy_get_type(): GType <cimport,nodecl> end
global function adw_animation_get_type(): GType <cimport,nodecl> end
global function glib_autoptr_clear_AdwAnimation(_ptr: *AdwAnimation): void <cimport,nodecl> end
global function glib_autoptr_cleanup_AdwAnimation(_ptr: **AdwAnimation): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_AdwAnimation(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_AdwAnimation(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_AdwAnimation(_q: **GQueue): void <cimport,nodecl> end
global function glib_autoptr_clear_AdwAnimationClass(_ptr: *AdwAnimationClass): void <cimport,nodecl> end
global function glib_autoptr_cleanup_AdwAnimationClass(_ptr: **AdwAnimationClass): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_AdwAnimationClass(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_AdwAnimationClass(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_AdwAnimationClass(_q: **GQueue): void <cimport,nodecl> end
global function ADW_ANIMATION(ptr: gpointer): *AdwAnimation <cimport,nodecl> end
global function ADW_ANIMATION_CLASS(ptr: gpointer): *AdwAnimationClass <cimport,nodecl> end
global function ADW_IS_ANIMATION(ptr: gpointer): gboolean <cimport,nodecl> end
global function ADW_IS_ANIMATION_CLASS(ptr: gpointer): gboolean <cimport,nodecl> end
global function ADW_ANIMATION_GET_CLASS(ptr: gpointer): *AdwAnimationClass <cimport,nodecl> end
global function adw_animation_get_widget(self: *AdwAnimation): *GtkWidget <cimport,nodecl> end
global function adw_animation_get_target(self: *AdwAnimation): *AdwAnimationTarget <cimport,nodecl> end
global function adw_animation_get_value(self: *AdwAnimation): float64 <cimport,nodecl> end
global function adw_animation_get_state(self: *AdwAnimation): AdwAnimationState <cimport,nodecl> end
global function adw_animation_play(self: *AdwAnimation): void <cimport,nodecl> end
global function adw_animation_pause(self: *AdwAnimation): void <cimport,nodecl> end
global function adw_animation_resume(self: *AdwAnimation): void <cimport,nodecl> end
global function adw_animation_reset(self: *AdwAnimation): void <cimport,nodecl> end
global function adw_animation_skip(self: *AdwAnimation): void <cimport,nodecl> end
global function adw_lerp(a: float64, b: float64, t: float64): float64 <cimport,nodecl> end
global function adw_get_enable_animations(widget: *GtkWidget): gboolean <cimport,nodecl> end
global function adw_style_manager_get_type(): GType <cimport,nodecl> end
global function glib_autoptr_clear_AdwStyleManager(_ptr: *AdwStyleManager): void <cimport,nodecl> end
global function glib_autoptr_cleanup_AdwStyleManager(_ptr: **AdwStyleManager): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_AdwStyleManager(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_AdwStyleManager(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_AdwStyleManager(_q: **GQueue): void <cimport,nodecl> end
global function glib_autoptr_clear_AdwStyleManagerClass(_ptr: *AdwStyleManagerClass): void <cimport,nodecl> end
global function glib_autoptr_cleanup_AdwStyleManagerClass(_ptr: **AdwStyleManagerClass): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_AdwStyleManagerClass(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_AdwStyleManagerClass(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_AdwStyleManagerClass(_q: **GQueue): void <cimport,nodecl> end
global function ADW_STYLE_MANAGER(ptr: gpointer): *AdwStyleManager <cimport,nodecl> end
global function ADW_IS_STYLE_MANAGER(ptr: gpointer): gboolean <cimport,nodecl> end
global function adw_style_manager_get_default(): *AdwStyleManager <cimport,nodecl> end
global function adw_style_manager_get_for_display(display: *GdkDisplay): *AdwStyleManager <cimport,nodecl> end
global function adw_style_manager_get_display(self: *AdwStyleManager): *GdkDisplay <cimport,nodecl> end
global function adw_style_manager_get_color_scheme(self: *AdwStyleManager): AdwColorScheme <cimport,nodecl> end
global function adw_style_manager_set_color_scheme(self: *AdwStyleManager, color_scheme: AdwColorScheme): void <cimport,nodecl> end
global function adw_style_manager_get_system_supports_color_schemes(self: *AdwStyleManager): gboolean <cimport,nodecl> end
global function adw_style_manager_get_dark(self: *AdwStyleManager): gboolean <cimport,nodecl> end
global function adw_style_manager_get_high_contrast(self: *AdwStyleManager): gboolean <cimport,nodecl> end
global function adw_application_get_type(): GType <cimport,nodecl> end
global function glib_autoptr_clear_AdwApplication(_ptr: *AdwApplication): void <cimport,nodecl> end
global function glib_autoptr_cleanup_AdwApplication(_ptr: **AdwApplication): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_AdwApplication(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_AdwApplication(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_AdwApplication(_q: **GQueue): void <cimport,nodecl> end
global function glib_autoptr_clear_AdwApplicationClass(_ptr: *AdwApplicationClass): void <cimport,nodecl> end
global function glib_autoptr_cleanup_AdwApplicationClass(_ptr: **AdwApplicationClass): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_AdwApplicationClass(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_AdwApplicationClass(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_AdwApplicationClass(_q: **GQueue): void <cimport,nodecl> end
global function ADW_APPLICATION(ptr: gpointer): *AdwApplication <cimport,nodecl> end
global function ADW_APPLICATION_CLASS(ptr: gpointer): *AdwApplicationClass <cimport,nodecl> end
global function ADW_IS_APPLICATION(ptr: gpointer): gboolean <cimport,nodecl> end
global function ADW_IS_APPLICATION_CLASS(ptr: gpointer): gboolean <cimport,nodecl> end
global function ADW_APPLICATION_GET_CLASS(ptr: gpointer): *AdwApplicationClass <cimport,nodecl> end
global function adw_application_new(application_id: cstring, flags: GApplicationFlags): *AdwApplication <cimport,nodecl> end
global function adw_application_get_style_manager(self: *AdwApplication): *AdwStyleManager <cimport,nodecl> end
global function adw_application_window_get_type(): GType <cimport,nodecl> end
global function glib_autoptr_clear_AdwApplicationWindow(_ptr: *AdwApplicationWindow): void <cimport,nodecl> end
global function glib_autoptr_cleanup_AdwApplicationWindow(_ptr: **AdwApplicationWindow): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_AdwApplicationWindow(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_AdwApplicationWindow(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_AdwApplicationWindow(_q: **GQueue): void <cimport,nodecl> end
global function glib_autoptr_clear_AdwApplicationWindowClass(_ptr: *AdwApplicationWindowClass): void <cimport,nodecl> end
global function glib_autoptr_cleanup_AdwApplicationWindowClass(_ptr: **AdwApplicationWindowClass): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_AdwApplicationWindowClass(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_AdwApplicationWindowClass(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_AdwApplicationWindowClass(_q: **GQueue): void <cimport,nodecl> end
global function ADW_APPLICATION_WINDOW(ptr: gpointer): *AdwApplicationWindow <cimport,nodecl> end
global function ADW_APPLICATION_WINDOW_CLASS(ptr: gpointer): *AdwApplicationWindowClass <cimport,nodecl> end
global function ADW_IS_APPLICATION_WINDOW(ptr: gpointer): gboolean <cimport,nodecl> end
global function ADW_IS_APPLICATION_WINDOW_CLASS(ptr: gpointer): gboolean <cimport,nodecl> end
global function ADW_APPLICATION_WINDOW_GET_CLASS(ptr: gpointer): *AdwApplicationWindowClass <cimport,nodecl> end
global function adw_application_window_new(app: *GtkApplication): *GtkWidget <cimport,nodecl> end
global function adw_application_window_set_content(self: *AdwApplicationWindow, content: *GtkWidget): void <cimport,nodecl> end
global function adw_application_window_get_content(self: *AdwApplicationWindow): *GtkWidget <cimport,nodecl> end
global function adw_avatar_get_type(): GType <cimport,nodecl> end
global function glib_autoptr_clear_AdwAvatar(_ptr: *AdwAvatar): void <cimport,nodecl> end
global function glib_autoptr_cleanup_AdwAvatar(_ptr: **AdwAvatar): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_AdwAvatar(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_AdwAvatar(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_AdwAvatar(_q: **GQueue): void <cimport,nodecl> end
global function glib_autoptr_clear_AdwAvatarClass(_ptr: *AdwAvatarClass): void <cimport,nodecl> end
global function glib_autoptr_cleanup_AdwAvatarClass(_ptr: **AdwAvatarClass): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_AdwAvatarClass(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_AdwAvatarClass(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_AdwAvatarClass(_q: **GQueue): void <cimport,nodecl> end
global function ADW_AVATAR(ptr: gpointer): *AdwAvatar <cimport,nodecl> end
global function ADW_IS_AVATAR(ptr: gpointer): gboolean <cimport,nodecl> end
global function adw_avatar_new(size: cint, text: cstring, show_initials: gboolean): *GtkWidget <cimport,nodecl> end
global function adw_avatar_get_icon_name(self: *AdwAvatar): cstring <cimport,nodecl> end
global function adw_avatar_set_icon_name(self: *AdwAvatar, icon_name: cstring): void <cimport,nodecl> end
global function adw_avatar_get_text(self: *AdwAvatar): cstring <cimport,nodecl> end
global function adw_avatar_set_text(self: *AdwAvatar, text: cstring): void <cimport,nodecl> end
global function adw_avatar_get_show_initials(self: *AdwAvatar): gboolean <cimport,nodecl> end
global function adw_avatar_set_show_initials(self: *AdwAvatar, show_initials: gboolean): void <cimport,nodecl> end
global function adw_avatar_get_custom_image(self: *AdwAvatar): *GdkPaintable <cimport,nodecl> end
global function adw_avatar_set_custom_image(self: *AdwAvatar, custom_image: *GdkPaintable): void <cimport,nodecl> end
global function adw_avatar_get_size(self: *AdwAvatar): cint <cimport,nodecl> end
global function adw_avatar_set_size(self: *AdwAvatar, size: cint): void <cimport,nodecl> end
global function adw_avatar_draw_to_texture(self: *AdwAvatar, scale_factor: cint): *GdkTexture <cimport,nodecl> end
global function adw_bin_get_type(): GType <cimport,nodecl> end
global function glib_autoptr_clear_AdwBin(_ptr: *AdwBin): void <cimport,nodecl> end
global function glib_autoptr_cleanup_AdwBin(_ptr: **AdwBin): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_AdwBin(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_AdwBin(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_AdwBin(_q: **GQueue): void <cimport,nodecl> end
global function glib_autoptr_clear_AdwBinClass(_ptr: *AdwBinClass): void <cimport,nodecl> end
global function glib_autoptr_cleanup_AdwBinClass(_ptr: **AdwBinClass): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_AdwBinClass(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_AdwBinClass(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_AdwBinClass(_q: **GQueue): void <cimport,nodecl> end
global function ADW_BIN(ptr: gpointer): *AdwBin <cimport,nodecl> end
global function ADW_BIN_CLASS(ptr: gpointer): *AdwBinClass <cimport,nodecl> end
global function ADW_IS_BIN(ptr: gpointer): gboolean <cimport,nodecl> end
global function ADW_IS_BIN_CLASS(ptr: gpointer): gboolean <cimport,nodecl> end
global function ADW_BIN_GET_CLASS(ptr: gpointer): *AdwBinClass <cimport,nodecl> end
global function adw_bin_new(): *GtkWidget <cimport,nodecl> end
global function adw_bin_get_child(self: *AdwBin): *GtkWidget <cimport,nodecl> end
global function adw_bin_set_child(self: *AdwBin, child: *GtkWidget): void <cimport,nodecl> end
global function adw_button_content_get_type(): GType <cimport,nodecl> end
global function glib_autoptr_clear_AdwButtonContent(_ptr: *AdwButtonContent): void <cimport,nodecl> end
global function glib_autoptr_cleanup_AdwButtonContent(_ptr: **AdwButtonContent): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_AdwButtonContent(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_AdwButtonContent(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_AdwButtonContent(_q: **GQueue): void <cimport,nodecl> end
global function glib_autoptr_clear_AdwButtonContentClass(_ptr: *AdwButtonContentClass): void <cimport,nodecl> end
global function glib_autoptr_cleanup_AdwButtonContentClass(_ptr: **AdwButtonContentClass): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_AdwButtonContentClass(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_AdwButtonContentClass(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_AdwButtonContentClass(_q: **GQueue): void <cimport,nodecl> end
global function ADW_BUTTON_CONTENT(ptr: gpointer): *AdwButtonContent <cimport,nodecl> end
global function ADW_IS_BUTTON_CONTENT(ptr: gpointer): gboolean <cimport,nodecl> end
global function adw_button_content_new(): *GtkWidget <cimport,nodecl> end
global function adw_button_content_get_label(self: *AdwButtonContent): cstring <cimport,nodecl> end
global function adw_button_content_set_label(self: *AdwButtonContent, label: cstring): void <cimport,nodecl> end
global function adw_button_content_get_icon_name(self: *AdwButtonContent): cstring <cimport,nodecl> end
global function adw_button_content_set_icon_name(self: *AdwButtonContent, icon_name: cstring): void <cimport,nodecl> end
global function adw_button_content_get_use_underline(self: *AdwButtonContent): gboolean <cimport,nodecl> end
global function adw_button_content_set_use_underline(self: *AdwButtonContent, use_underline: gboolean): void <cimport,nodecl> end
global function adw_spring_params_get_type(): GType <cimport,nodecl> end
global function adw_spring_params_new(damping_ratio: float64, mass: float64, stiffness: float64): *AdwSpringParams <cimport,nodecl> end
global function adw_spring_params_new_full(damping: float64, mass: float64, stiffness: float64): *AdwSpringParams <cimport,nodecl> end
global function adw_spring_params_ref(self: *AdwSpringParams): *AdwSpringParams <cimport,nodecl> end
global function adw_spring_params_unref(self: *AdwSpringParams): void <cimport,nodecl> end
global function adw_spring_params_get_damping(self: *AdwSpringParams): float64 <cimport,nodecl> end
global function adw_spring_params_get_damping_ratio(self: *AdwSpringParams): float64 <cimport,nodecl> end
global function adw_spring_params_get_mass(self: *AdwSpringParams): float64 <cimport,nodecl> end
global function adw_spring_params_get_stiffness(self: *AdwSpringParams): float64 <cimport,nodecl> end
global function glib_autoptr_clear_AdwSpringParams(_ptr: *AdwSpringParams): void <cimport,nodecl> end
global function glib_autoptr_cleanup_AdwSpringParams(_ptr: **AdwSpringParams): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_AdwSpringParams(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_AdwSpringParams(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_AdwSpringParams(_q: **GQueue): void <cimport,nodecl> end
global function adw_carousel_get_type(): GType <cimport,nodecl> end
global function glib_autoptr_clear_AdwCarousel(_ptr: *AdwCarousel): void <cimport,nodecl> end
global function glib_autoptr_cleanup_AdwCarousel(_ptr: **AdwCarousel): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_AdwCarousel(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_AdwCarousel(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_AdwCarousel(_q: **GQueue): void <cimport,nodecl> end
global function glib_autoptr_clear_AdwCarouselClass(_ptr: *AdwCarouselClass): void <cimport,nodecl> end
global function glib_autoptr_cleanup_AdwCarouselClass(_ptr: **AdwCarouselClass): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_AdwCarouselClass(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_AdwCarouselClass(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_AdwCarouselClass(_q: **GQueue): void <cimport,nodecl> end
global function ADW_CAROUSEL(ptr: gpointer): *AdwCarousel <cimport,nodecl> end
global function ADW_IS_CAROUSEL(ptr: gpointer): gboolean <cimport,nodecl> end
global function adw_carousel_new(): *GtkWidget <cimport,nodecl> end
global function adw_carousel_prepend(self: *AdwCarousel, child: *GtkWidget): void <cimport,nodecl> end
global function adw_carousel_append(self: *AdwCarousel, child: *GtkWidget): void <cimport,nodecl> end
global function adw_carousel_insert(self: *AdwCarousel, child: *GtkWidget, position: cint): void <cimport,nodecl> end
global function adw_carousel_reorder(self: *AdwCarousel, child: *GtkWidget, position: cint): void <cimport,nodecl> end
global function adw_carousel_remove(self: *AdwCarousel, child: *GtkWidget): void <cimport,nodecl> end
global function adw_carousel_scroll_to(self: *AdwCarousel, widget: *GtkWidget, animate: gboolean): void <cimport,nodecl> end
global function adw_carousel_get_nth_page(self: *AdwCarousel, n: guint): *GtkWidget <cimport,nodecl> end
global function adw_carousel_get_n_pages(self: *AdwCarousel): guint <cimport,nodecl> end
global function adw_carousel_get_position(self: *AdwCarousel): float64 <cimport,nodecl> end
global function adw_carousel_get_interactive(self: *AdwCarousel): gboolean <cimport,nodecl> end
global function adw_carousel_set_interactive(self: *AdwCarousel, interactive: gboolean): void <cimport,nodecl> end
global function adw_carousel_get_spacing(self: *AdwCarousel): guint <cimport,nodecl> end
global function adw_carousel_set_spacing(self: *AdwCarousel, spacing: guint): void <cimport,nodecl> end
global function adw_carousel_get_scroll_params(self: *AdwCarousel): *AdwSpringParams <cimport,nodecl> end
global function adw_carousel_set_scroll_params(self: *AdwCarousel, params: *AdwSpringParams): void <cimport,nodecl> end
global function adw_carousel_get_allow_mouse_drag(self: *AdwCarousel): gboolean <cimport,nodecl> end
global function adw_carousel_set_allow_mouse_drag(self: *AdwCarousel, allow_mouse_drag: gboolean): void <cimport,nodecl> end
global function adw_carousel_get_allow_scroll_wheel(self: *AdwCarousel): gboolean <cimport,nodecl> end
global function adw_carousel_set_allow_scroll_wheel(self: *AdwCarousel, allow_scroll_wheel: gboolean): void <cimport,nodecl> end
global function adw_carousel_get_allow_long_swipes(self: *AdwCarousel): gboolean <cimport,nodecl> end
global function adw_carousel_set_allow_long_swipes(self: *AdwCarousel, allow_long_swipes: gboolean): void <cimport,nodecl> end
global function adw_carousel_get_reveal_duration(self: *AdwCarousel): guint <cimport,nodecl> end
global function adw_carousel_set_reveal_duration(self: *AdwCarousel, reveal_duration: guint): void <cimport,nodecl> end
global function adw_carousel_indicator_dots_get_type(): GType <cimport,nodecl> end
global function glib_autoptr_clear_AdwCarouselIndicatorDots(_ptr: *AdwCarouselIndicatorDots): void <cimport,nodecl> end
global function glib_autoptr_cleanup_AdwCarouselIndicatorDots(_ptr: **AdwCarouselIndicatorDots): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_AdwCarouselIndicatorDots(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_AdwCarouselIndicatorDots(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_AdwCarouselIndicatorDots(_q: **GQueue): void <cimport,nodecl> end
global function glib_autoptr_clear_AdwCarouselIndicatorDotsClass(_ptr: *AdwCarouselIndicatorDotsClass): void <cimport,nodecl> end
global function glib_autoptr_cleanup_AdwCarouselIndicatorDotsClass(_ptr: **AdwCarouselIndicatorDotsClass): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_AdwCarouselIndicatorDotsClass(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_AdwCarouselIndicatorDotsClass(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_AdwCarouselIndicatorDotsClass(_q: **GQueue): void <cimport,nodecl> end
global function ADW_CAROUSEL_INDICATOR_DOTS(ptr: gpointer): *AdwCarouselIndicatorDots <cimport,nodecl> end
global function ADW_IS_CAROUSEL_INDICATOR_DOTS(ptr: gpointer): gboolean <cimport,nodecl> end
global function adw_carousel_indicator_dots_new(): *GtkWidget <cimport,nodecl> end
global function adw_carousel_indicator_dots_get_carousel(self: *AdwCarouselIndicatorDots): *AdwCarousel <cimport,nodecl> end
global function adw_carousel_indicator_dots_set_carousel(self: *AdwCarouselIndicatorDots, carousel: *AdwCarousel): void <cimport,nodecl> end
global function adw_carousel_indicator_lines_get_type(): GType <cimport,nodecl> end
global function glib_autoptr_clear_AdwCarouselIndicatorLines(_ptr: *AdwCarouselIndicatorLines): void <cimport,nodecl> end
global function glib_autoptr_cleanup_AdwCarouselIndicatorLines(_ptr: **AdwCarouselIndicatorLines): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_AdwCarouselIndicatorLines(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_AdwCarouselIndicatorLines(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_AdwCarouselIndicatorLines(_q: **GQueue): void <cimport,nodecl> end
global function glib_autoptr_clear_AdwCarouselIndicatorLinesClass(_ptr: *AdwCarouselIndicatorLinesClass): void <cimport,nodecl> end
global function glib_autoptr_cleanup_AdwCarouselIndicatorLinesClass(_ptr: **AdwCarouselIndicatorLinesClass): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_AdwCarouselIndicatorLinesClass(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_AdwCarouselIndicatorLinesClass(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_AdwCarouselIndicatorLinesClass(_q: **GQueue): void <cimport,nodecl> end
global function ADW_CAROUSEL_INDICATOR_LINES(ptr: gpointer): *AdwCarouselIndicatorLines <cimport,nodecl> end
global function ADW_IS_CAROUSEL_INDICATOR_LINES(ptr: gpointer): gboolean <cimport,nodecl> end
global function adw_carousel_indicator_lines_new(): *GtkWidget <cimport,nodecl> end
global function adw_carousel_indicator_lines_get_carousel(self: *AdwCarouselIndicatorLines): *AdwCarousel <cimport,nodecl> end
global function adw_carousel_indicator_lines_set_carousel(self: *AdwCarouselIndicatorLines, carousel: *AdwCarousel): void <cimport,nodecl> end
global function adw_clamp_get_type(): GType <cimport,nodecl> end
global function glib_autoptr_clear_AdwClamp(_ptr: *AdwClamp): void <cimport,nodecl> end
global function glib_autoptr_cleanup_AdwClamp(_ptr: **AdwClamp): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_AdwClamp(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_AdwClamp(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_AdwClamp(_q: **GQueue): void <cimport,nodecl> end
global function glib_autoptr_clear_AdwClampClass(_ptr: *AdwClampClass): void <cimport,nodecl> end
global function glib_autoptr_cleanup_AdwClampClass(_ptr: **AdwClampClass): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_AdwClampClass(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_AdwClampClass(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_AdwClampClass(_q: **GQueue): void <cimport,nodecl> end
global function ADW_CLAMP(ptr: gpointer): *AdwClamp <cimport,nodecl> end
global function ADW_IS_CLAMP(ptr: gpointer): gboolean <cimport,nodecl> end
global function adw_clamp_new(): *GtkWidget <cimport,nodecl> end
global function adw_clamp_get_child(self: *AdwClamp): *GtkWidget <cimport,nodecl> end
global function adw_clamp_set_child(self: *AdwClamp, child: *GtkWidget): void <cimport,nodecl> end
global function adw_clamp_get_maximum_size(self: *AdwClamp): cint <cimport,nodecl> end
global function adw_clamp_set_maximum_size(self: *AdwClamp, maximum_size: cint): void <cimport,nodecl> end
global function adw_clamp_get_tightening_threshold(self: *AdwClamp): cint <cimport,nodecl> end
global function adw_clamp_set_tightening_threshold(self: *AdwClamp, tightening_threshold: cint): void <cimport,nodecl> end
global function adw_clamp_layout_get_type(): GType <cimport,nodecl> end
global function glib_autoptr_clear_AdwClampLayout(_ptr: *AdwClampLayout): void <cimport,nodecl> end
global function glib_autoptr_cleanup_AdwClampLayout(_ptr: **AdwClampLayout): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_AdwClampLayout(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_AdwClampLayout(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_AdwClampLayout(_q: **GQueue): void <cimport,nodecl> end
global function glib_autoptr_clear_AdwClampLayoutClass(_ptr: *AdwClampLayoutClass): void <cimport,nodecl> end
global function glib_autoptr_cleanup_AdwClampLayoutClass(_ptr: **AdwClampLayoutClass): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_AdwClampLayoutClass(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_AdwClampLayoutClass(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_AdwClampLayoutClass(_q: **GQueue): void <cimport,nodecl> end
global function ADW_CLAMP_LAYOUT(ptr: gpointer): *AdwClampLayout <cimport,nodecl> end
global function ADW_IS_CLAMP_LAYOUT(ptr: gpointer): gboolean <cimport,nodecl> end
global function adw_clamp_layout_new(): *GtkLayoutManager <cimport,nodecl> end
global function adw_clamp_layout_get_maximum_size(self: *AdwClampLayout): cint <cimport,nodecl> end
global function adw_clamp_layout_set_maximum_size(self: *AdwClampLayout, maximum_size: cint): void <cimport,nodecl> end
global function adw_clamp_layout_get_tightening_threshold(self: *AdwClampLayout): cint <cimport,nodecl> end
global function adw_clamp_layout_set_tightening_threshold(self: *AdwClampLayout, tightening_threshold: cint): void <cimport,nodecl> end
global function adw_clamp_scrollable_get_type(): GType <cimport,nodecl> end
global function glib_autoptr_clear_AdwClampScrollable(_ptr: *AdwClampScrollable): void <cimport,nodecl> end
global function glib_autoptr_cleanup_AdwClampScrollable(_ptr: **AdwClampScrollable): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_AdwClampScrollable(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_AdwClampScrollable(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_AdwClampScrollable(_q: **GQueue): void <cimport,nodecl> end
global function glib_autoptr_clear_AdwClampScrollableClass(_ptr: *AdwClampScrollableClass): void <cimport,nodecl> end
global function glib_autoptr_cleanup_AdwClampScrollableClass(_ptr: **AdwClampScrollableClass): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_AdwClampScrollableClass(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_AdwClampScrollableClass(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_AdwClampScrollableClass(_q: **GQueue): void <cimport,nodecl> end
global function ADW_CLAMP_SCROLLABLE(ptr: gpointer): *AdwClampScrollable <cimport,nodecl> end
global function ADW_IS_CLAMP_SCROLLABLE(ptr: gpointer): gboolean <cimport,nodecl> end
global function adw_clamp_scrollable_new(): *GtkWidget <cimport,nodecl> end
global function adw_clamp_scrollable_get_child(self: *AdwClampScrollable): *GtkWidget <cimport,nodecl> end
global function adw_clamp_scrollable_set_child(self: *AdwClampScrollable, child: *GtkWidget): void <cimport,nodecl> end
global function adw_clamp_scrollable_get_maximum_size(self: *AdwClampScrollable): cint <cimport,nodecl> end
global function adw_clamp_scrollable_set_maximum_size(self: *AdwClampScrollable, maximum_size: cint): void <cimport,nodecl> end
global function adw_clamp_scrollable_get_tightening_threshold(self: *AdwClampScrollable): cint <cimport,nodecl> end
global function adw_clamp_scrollable_set_tightening_threshold(self: *AdwClampScrollable, tightening_threshold: cint): void <cimport,nodecl> end
global function adw_combo_row_get_type(): GType <cimport,nodecl> end
global function glib_autoptr_clear_AdwComboRow(_ptr: *AdwComboRow): void <cimport,nodecl> end
global function glib_autoptr_cleanup_AdwComboRow(_ptr: **AdwComboRow): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_AdwComboRow(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_AdwComboRow(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_AdwComboRow(_q: **GQueue): void <cimport,nodecl> end
global function glib_autoptr_clear_AdwComboRowClass(_ptr: *AdwComboRowClass): void <cimport,nodecl> end
global function glib_autoptr_cleanup_AdwComboRowClass(_ptr: **AdwComboRowClass): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_AdwComboRowClass(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_AdwComboRowClass(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_AdwComboRowClass(_q: **GQueue): void <cimport,nodecl> end
global function ADW_COMBO_ROW(ptr: gpointer): *AdwComboRow <cimport,nodecl> end
global function ADW_COMBO_ROW_CLASS(ptr: gpointer): *AdwComboRowClass <cimport,nodecl> end
global function ADW_IS_COMBO_ROW(ptr: gpointer): gboolean <cimport,nodecl> end
global function ADW_IS_COMBO_ROW_CLASS(ptr: gpointer): gboolean <cimport,nodecl> end
global function ADW_COMBO_ROW_GET_CLASS(ptr: gpointer): *AdwComboRowClass <cimport,nodecl> end
global function adw_combo_row_new(): *GtkWidget <cimport,nodecl> end
global function adw_combo_row_get_model(self: *AdwComboRow): *GListModel <cimport,nodecl> end
global function adw_combo_row_set_model(self: *AdwComboRow, model: *GListModel): void <cimport,nodecl> end
global function adw_combo_row_get_selected(self: *AdwComboRow): guint <cimport,nodecl> end
global function adw_combo_row_set_selected(self: *AdwComboRow, position: guint): void <cimport,nodecl> end
global function adw_combo_row_get_selected_item(self: *AdwComboRow): gpointer <cimport,nodecl> end
global function adw_combo_row_get_factory(self: *AdwComboRow): *GtkListItemFactory <cimport,nodecl> end
global function adw_combo_row_set_factory(self: *AdwComboRow, factory: *GtkListItemFactory): void <cimport,nodecl> end
global function adw_combo_row_get_list_factory(self: *AdwComboRow): *GtkListItemFactory <cimport,nodecl> end
global function adw_combo_row_set_list_factory(self: *AdwComboRow, factory: *GtkListItemFactory): void <cimport,nodecl> end
global function adw_combo_row_get_expression(self: *AdwComboRow): *GtkExpression <cimport,nodecl> end
global function adw_combo_row_set_expression(self: *AdwComboRow, expression: *GtkExpression): void <cimport,nodecl> end
global function adw_combo_row_get_use_subtitle(self: *AdwComboRow): gboolean <cimport,nodecl> end
global function adw_combo_row_set_use_subtitle(self: *AdwComboRow, use_subtitle: gboolean): void <cimport,nodecl> end
global function adw_easing_ease(self: AdwEasing, value: float64): float64 <cimport,nodecl> end
global function adw_enum_list_item_get_type(): GType <cimport,nodecl> end
global function glib_autoptr_clear_AdwEnumListItem(_ptr: *AdwEnumListItem): void <cimport,nodecl> end
global function glib_autoptr_cleanup_AdwEnumListItem(_ptr: **AdwEnumListItem): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_AdwEnumListItem(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_AdwEnumListItem(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_AdwEnumListItem(_q: **GQueue): void <cimport,nodecl> end
global function glib_autoptr_clear_AdwEnumListItemClass(_ptr: *AdwEnumListItemClass): void <cimport,nodecl> end
global function glib_autoptr_cleanup_AdwEnumListItemClass(_ptr: **AdwEnumListItemClass): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_AdwEnumListItemClass(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_AdwEnumListItemClass(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_AdwEnumListItemClass(_q: **GQueue): void <cimport,nodecl> end
global function ADW_ENUM_LIST_ITEM(ptr: gpointer): *AdwEnumListItem <cimport,nodecl> end
global function ADW_IS_ENUM_LIST_ITEM(ptr: gpointer): gboolean <cimport,nodecl> end
global function adw_enum_list_item_get_value(self: *AdwEnumListItem): cint <cimport,nodecl> end
global function adw_enum_list_item_get_name(self: *AdwEnumListItem): cstring <cimport,nodecl> end
global function adw_enum_list_item_get_nick(self: *AdwEnumListItem): cstring <cimport,nodecl> end
global function adw_enum_list_model_get_type(): GType <cimport,nodecl> end
global function glib_autoptr_clear_AdwEnumListModel(_ptr: *AdwEnumListModel): void <cimport,nodecl> end
global function glib_autoptr_cleanup_AdwEnumListModel(_ptr: **AdwEnumListModel): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_AdwEnumListModel(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_AdwEnumListModel(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_AdwEnumListModel(_q: **GQueue): void <cimport,nodecl> end
global function glib_autoptr_clear_AdwEnumListModelClass(_ptr: *AdwEnumListModelClass): void <cimport,nodecl> end
global function glib_autoptr_cleanup_AdwEnumListModelClass(_ptr: **AdwEnumListModelClass): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_AdwEnumListModelClass(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_AdwEnumListModelClass(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_AdwEnumListModelClass(_q: **GQueue): void <cimport,nodecl> end
global function ADW_ENUM_LIST_MODEL(ptr: gpointer): *AdwEnumListModel <cimport,nodecl> end
global function ADW_IS_ENUM_LIST_MODEL(ptr: gpointer): gboolean <cimport,nodecl> end
global function adw_enum_list_model_new(enum_type: GType): *AdwEnumListModel <cimport,nodecl> end
global function adw_enum_list_model_get_enum_type(self: *AdwEnumListModel): GType <cimport,nodecl> end
global function adw_enum_list_model_find_position(self: *AdwEnumListModel, value: cint): guint <cimport,nodecl> end
global function adw_expander_row_get_type(): GType <cimport,nodecl> end
global function glib_autoptr_clear_AdwExpanderRow(_ptr: *AdwExpanderRow): void <cimport,nodecl> end
global function glib_autoptr_cleanup_AdwExpanderRow(_ptr: **AdwExpanderRow): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_AdwExpanderRow(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_AdwExpanderRow(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_AdwExpanderRow(_q: **GQueue): void <cimport,nodecl> end
global function glib_autoptr_clear_AdwExpanderRowClass(_ptr: *AdwExpanderRowClass): void <cimport,nodecl> end
global function glib_autoptr_cleanup_AdwExpanderRowClass(_ptr: **AdwExpanderRowClass): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_AdwExpanderRowClass(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_AdwExpanderRowClass(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_AdwExpanderRowClass(_q: **GQueue): void <cimport,nodecl> end
global function ADW_EXPANDER_ROW(ptr: gpointer): *AdwExpanderRow <cimport,nodecl> end
global function ADW_EXPANDER_ROW_CLASS(ptr: gpointer): *AdwExpanderRowClass <cimport,nodecl> end
global function ADW_IS_EXPANDER_ROW(ptr: gpointer): gboolean <cimport,nodecl> end
global function ADW_IS_EXPANDER_ROW_CLASS(ptr: gpointer): gboolean <cimport,nodecl> end
global function ADW_EXPANDER_ROW_GET_CLASS(ptr: gpointer): *AdwExpanderRowClass <cimport,nodecl> end
global function adw_expander_row_new(): *GtkWidget <cimport,nodecl> end
global function adw_expander_row_get_subtitle(self: *AdwExpanderRow): cstring <cimport,nodecl> end
global function adw_expander_row_set_subtitle(self: *AdwExpanderRow, subtitle: cstring): void <cimport,nodecl> end
global function adw_expander_row_get_icon_name(self: *AdwExpanderRow): cstring <cimport,nodecl> end
global function adw_expander_row_set_icon_name(self: *AdwExpanderRow, icon_name: cstring): void <cimport,nodecl> end
global function adw_expander_row_get_expanded(self: *AdwExpanderRow): gboolean <cimport,nodecl> end
global function adw_expander_row_set_expanded(self: *AdwExpanderRow, expanded: gboolean): void <cimport,nodecl> end
global function adw_expander_row_get_enable_expansion(self: *AdwExpanderRow): gboolean <cimport,nodecl> end
global function adw_expander_row_set_enable_expansion(self: *AdwExpanderRow, enable_expansion: gboolean): void <cimport,nodecl> end
global function adw_expander_row_get_show_enable_switch(self: *AdwExpanderRow): gboolean <cimport,nodecl> end
global function adw_expander_row_set_show_enable_switch(self: *AdwExpanderRow, show_enable_switch: gboolean): void <cimport,nodecl> end
global function adw_expander_row_add_action(self: *AdwExpanderRow, widget: *GtkWidget): void <cimport,nodecl> end
global function adw_expander_row_add_prefix(self: *AdwExpanderRow, widget: *GtkWidget): void <cimport,nodecl> end
global function adw_expander_row_add_row(self: *AdwExpanderRow, child: *GtkWidget): void <cimport,nodecl> end
global function adw_expander_row_remove(self: *AdwExpanderRow, child: *GtkWidget): void <cimport,nodecl> end
global function adw_flap_get_type(): GType <cimport,nodecl> end
global function glib_autoptr_clear_AdwFlap(_ptr: *AdwFlap): void <cimport,nodecl> end
global function glib_autoptr_cleanup_AdwFlap(_ptr: **AdwFlap): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_AdwFlap(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_AdwFlap(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_AdwFlap(_q: **GQueue): void <cimport,nodecl> end
global function glib_autoptr_clear_AdwFlapClass(_ptr: *AdwFlapClass): void <cimport,nodecl> end
global function glib_autoptr_cleanup_AdwFlapClass(_ptr: **AdwFlapClass): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_AdwFlapClass(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_AdwFlapClass(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_AdwFlapClass(_q: **GQueue): void <cimport,nodecl> end
global function ADW_FLAP(ptr: gpointer): *AdwFlap <cimport,nodecl> end
global function ADW_IS_FLAP(ptr: gpointer): gboolean <cimport,nodecl> end
global function adw_flap_new(): *GtkWidget <cimport,nodecl> end
global function adw_flap_get_content(self: *AdwFlap): *GtkWidget <cimport,nodecl> end
global function adw_flap_set_content(self: *AdwFlap, content: *GtkWidget): void <cimport,nodecl> end
global function adw_flap_get_flap(self: *AdwFlap): *GtkWidget <cimport,nodecl> end
global function adw_flap_set_flap(self: *AdwFlap, flap: *GtkWidget): void <cimport,nodecl> end
global function adw_flap_get_separator(self: *AdwFlap): *GtkWidget <cimport,nodecl> end
global function adw_flap_set_separator(self: *AdwFlap, separator: *GtkWidget): void <cimport,nodecl> end
global function adw_flap_get_flap_position(self: *AdwFlap): GtkPackType <cimport,nodecl> end
global function adw_flap_set_flap_position(self: *AdwFlap, position: GtkPackType): void <cimport,nodecl> end
global function adw_flap_get_reveal_flap(self: *AdwFlap): gboolean <cimport,nodecl> end
global function adw_flap_set_reveal_flap(self: *AdwFlap, reveal_flap: gboolean): void <cimport,nodecl> end
global function adw_flap_get_reveal_params(self: *AdwFlap): *AdwSpringParams <cimport,nodecl> end
global function adw_flap_set_reveal_params(self: *AdwFlap, params: *AdwSpringParams): void <cimport,nodecl> end
global function adw_flap_get_reveal_progress(self: *AdwFlap): float64 <cimport,nodecl> end
global function adw_flap_get_fold_policy(self: *AdwFlap): AdwFlapFoldPolicy <cimport,nodecl> end
global function adw_flap_set_fold_policy(self: *AdwFlap, policy: AdwFlapFoldPolicy): void <cimport,nodecl> end
global function adw_flap_get_fold_duration(self: *AdwFlap): guint <cimport,nodecl> end
global function adw_flap_set_fold_duration(self: *AdwFlap, duration: guint): void <cimport,nodecl> end
global function adw_flap_get_folded(self: *AdwFlap): gboolean <cimport,nodecl> end
global function adw_flap_get_locked(self: *AdwFlap): gboolean <cimport,nodecl> end
global function adw_flap_set_locked(self: *AdwFlap, locked: gboolean): void <cimport,nodecl> end
global function adw_flap_get_transition_type(self: *AdwFlap): AdwFlapTransitionType <cimport,nodecl> end
global function adw_flap_set_transition_type(self: *AdwFlap, transition_type: AdwFlapTransitionType): void <cimport,nodecl> end
global function adw_flap_get_modal(self: *AdwFlap): gboolean <cimport,nodecl> end
global function adw_flap_set_modal(self: *AdwFlap, modal: gboolean): void <cimport,nodecl> end
global function adw_flap_get_swipe_to_open(self: *AdwFlap): gboolean <cimport,nodecl> end
global function adw_flap_set_swipe_to_open(self: *AdwFlap, swipe_to_open: gboolean): void <cimport,nodecl> end
global function adw_flap_get_swipe_to_close(self: *AdwFlap): gboolean <cimport,nodecl> end
global function adw_flap_set_swipe_to_close(self: *AdwFlap, swipe_to_close: gboolean): void <cimport,nodecl> end
global function adw_flap_get_fold_threshold_policy(self: *AdwFlap): AdwFoldThresholdPolicy <cimport,nodecl> end
global function adw_flap_set_fold_threshold_policy(self: *AdwFlap, policy: AdwFoldThresholdPolicy): void <cimport,nodecl> end
global function adw_header_bar_get_type(): GType <cimport,nodecl> end
global function glib_autoptr_clear_AdwHeaderBar(_ptr: *AdwHeaderBar): void <cimport,nodecl> end
global function glib_autoptr_cleanup_AdwHeaderBar(_ptr: **AdwHeaderBar): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_AdwHeaderBar(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_AdwHeaderBar(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_AdwHeaderBar(_q: **GQueue): void <cimport,nodecl> end
global function glib_autoptr_clear_AdwHeaderBarClass(_ptr: *AdwHeaderBarClass): void <cimport,nodecl> end
global function glib_autoptr_cleanup_AdwHeaderBarClass(_ptr: **AdwHeaderBarClass): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_AdwHeaderBarClass(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_AdwHeaderBarClass(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_AdwHeaderBarClass(_q: **GQueue): void <cimport,nodecl> end
global function ADW_HEADER_BAR(ptr: gpointer): *AdwHeaderBar <cimport,nodecl> end
global function ADW_IS_HEADER_BAR(ptr: gpointer): gboolean <cimport,nodecl> end
global function adw_header_bar_new(): *GtkWidget <cimport,nodecl> end
global function adw_header_bar_get_title_widget(self: *AdwHeaderBar): *GtkWidget <cimport,nodecl> end
global function adw_header_bar_set_title_widget(self: *AdwHeaderBar, title_widget: *GtkWidget): void <cimport,nodecl> end
global function adw_header_bar_pack_start(self: *AdwHeaderBar, child: *GtkWidget): void <cimport,nodecl> end
global function adw_header_bar_pack_end(self: *AdwHeaderBar, child: *GtkWidget): void <cimport,nodecl> end
global function adw_header_bar_remove(self: *AdwHeaderBar, child: *GtkWidget): void <cimport,nodecl> end
global function adw_header_bar_get_show_start_title_buttons(self: *AdwHeaderBar): gboolean <cimport,nodecl> end
global function adw_header_bar_set_show_start_title_buttons(self: *AdwHeaderBar, setting: gboolean): void <cimport,nodecl> end
global function adw_header_bar_get_show_end_title_buttons(self: *AdwHeaderBar): gboolean <cimport,nodecl> end
global function adw_header_bar_set_show_end_title_buttons(self: *AdwHeaderBar, setting: gboolean): void <cimport,nodecl> end
global function adw_header_bar_get_decoration_layout(self: *AdwHeaderBar): cstring <cimport,nodecl> end
global function adw_header_bar_set_decoration_layout(self: *AdwHeaderBar, layout: cstring): void <cimport,nodecl> end
global function adw_header_bar_get_centering_policy(self: *AdwHeaderBar): AdwCenteringPolicy <cimport,nodecl> end
global function adw_header_bar_set_centering_policy(self: *AdwHeaderBar, centering_policy: AdwCenteringPolicy): void <cimport,nodecl> end
global function adw_leaflet_page_get_type(): GType <cimport,nodecl> end
global function glib_autoptr_clear_AdwLeafletPage(_ptr: *AdwLeafletPage): void <cimport,nodecl> end
global function glib_autoptr_cleanup_AdwLeafletPage(_ptr: **AdwLeafletPage): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_AdwLeafletPage(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_AdwLeafletPage(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_AdwLeafletPage(_q: **GQueue): void <cimport,nodecl> end
global function glib_autoptr_clear_AdwLeafletPageClass(_ptr: *AdwLeafletPageClass): void <cimport,nodecl> end
global function glib_autoptr_cleanup_AdwLeafletPageClass(_ptr: **AdwLeafletPageClass): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_AdwLeafletPageClass(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_AdwLeafletPageClass(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_AdwLeafletPageClass(_q: **GQueue): void <cimport,nodecl> end
global function ADW_LEAFLET_PAGE(ptr: gpointer): *AdwLeafletPage <cimport,nodecl> end
global function ADW_IS_LEAFLET_PAGE(ptr: gpointer): gboolean <cimport,nodecl> end
global function adw_leaflet_page_get_child(self: *AdwLeafletPage): *GtkWidget <cimport,nodecl> end
global function adw_leaflet_page_get_name(self: *AdwLeafletPage): cstring <cimport,nodecl> end
global function adw_leaflet_page_set_name(self: *AdwLeafletPage, name: cstring): void <cimport,nodecl> end
global function adw_leaflet_page_get_navigatable(self: *AdwLeafletPage): gboolean <cimport,nodecl> end
global function adw_leaflet_page_set_navigatable(self: *AdwLeafletPage, navigatable: gboolean): void <cimport,nodecl> end
global function adw_leaflet_get_type(): GType <cimport,nodecl> end
global function glib_autoptr_clear_AdwLeaflet(_ptr: *AdwLeaflet): void <cimport,nodecl> end
global function glib_autoptr_cleanup_AdwLeaflet(_ptr: **AdwLeaflet): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_AdwLeaflet(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_AdwLeaflet(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_AdwLeaflet(_q: **GQueue): void <cimport,nodecl> end
global function glib_autoptr_clear_AdwLeafletClass(_ptr: *AdwLeafletClass): void <cimport,nodecl> end
global function glib_autoptr_cleanup_AdwLeafletClass(_ptr: **AdwLeafletClass): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_AdwLeafletClass(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_AdwLeafletClass(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_AdwLeafletClass(_q: **GQueue): void <cimport,nodecl> end
global function ADW_LEAFLET(ptr: gpointer): *AdwLeaflet <cimport,nodecl> end
global function ADW_IS_LEAFLET(ptr: gpointer): gboolean <cimport,nodecl> end
global function adw_leaflet_new(): *GtkWidget <cimport,nodecl> end
global function adw_leaflet_append(self: *AdwLeaflet, child: *GtkWidget): *AdwLeafletPage <cimport,nodecl> end
global function adw_leaflet_prepend(self: *AdwLeaflet, child: *GtkWidget): *AdwLeafletPage <cimport,nodecl> end
global function adw_leaflet_insert_child_after(self: *AdwLeaflet, child: *GtkWidget, sibling: *GtkWidget): *AdwLeafletPage <cimport,nodecl> end
global function adw_leaflet_reorder_child_after(self: *AdwLeaflet, child: *GtkWidget, sibling: *GtkWidget): void <cimport,nodecl> end
global function adw_leaflet_remove(self: *AdwLeaflet, child: *GtkWidget): void <cimport,nodecl> end
global function adw_leaflet_get_page(self: *AdwLeaflet, child: *GtkWidget): *AdwLeafletPage <cimport,nodecl> end
global function adw_leaflet_get_folded(self: *AdwLeaflet): gboolean <cimport,nodecl> end
global function adw_leaflet_get_homogeneous(self: *AdwLeaflet): gboolean <cimport,nodecl> end
global function adw_leaflet_set_homogeneous(self: *AdwLeaflet, homogeneous: gboolean): void <cimport,nodecl> end
global function adw_leaflet_get_visible_child(self: *AdwLeaflet): *GtkWidget <cimport,nodecl> end
global function adw_leaflet_set_visible_child(self: *AdwLeaflet, visible_child: *GtkWidget): void <cimport,nodecl> end
global function adw_leaflet_get_visible_child_name(self: *AdwLeaflet): cstring <cimport,nodecl> end
global function adw_leaflet_set_visible_child_name(self: *AdwLeaflet, name: cstring): void <cimport,nodecl> end
global function adw_leaflet_get_transition_type(self: *AdwLeaflet): AdwLeafletTransitionType <cimport,nodecl> end
global function adw_leaflet_set_transition_type(self: *AdwLeaflet, transition: AdwLeafletTransitionType): void <cimport,nodecl> end
global function adw_leaflet_get_mode_transition_duration(self: *AdwLeaflet): guint <cimport,nodecl> end
global function adw_leaflet_set_mode_transition_duration(self: *AdwLeaflet, duration: guint): void <cimport,nodecl> end
global function adw_leaflet_get_child_transition_params(self: *AdwLeaflet): *AdwSpringParams <cimport,nodecl> end
global function adw_leaflet_set_child_transition_params(self: *AdwLeaflet, params: *AdwSpringParams): void <cimport,nodecl> end
global function adw_leaflet_get_child_transition_running(self: *AdwLeaflet): gboolean <cimport,nodecl> end
global function adw_leaflet_get_can_navigate_back(self: *AdwLeaflet): gboolean <cimport,nodecl> end
global function adw_leaflet_set_can_navigate_back(self: *AdwLeaflet, can_navigate_back: gboolean): void <cimport,nodecl> end
global function adw_leaflet_get_can_navigate_forward(self: *AdwLeaflet): gboolean <cimport,nodecl> end
global function adw_leaflet_set_can_navigate_forward(self: *AdwLeaflet, can_navigate_forward: gboolean): void <cimport,nodecl> end
global function adw_leaflet_get_adjacent_child(self: *AdwLeaflet, direction: AdwNavigationDirection): *GtkWidget <cimport,nodecl> end
global function adw_leaflet_navigate(self: *AdwLeaflet, direction: AdwNavigationDirection): gboolean <cimport,nodecl> end
global function adw_leaflet_get_child_by_name(self: *AdwLeaflet, name: cstring): *GtkWidget <cimport,nodecl> end
global function adw_leaflet_get_can_unfold(self: *AdwLeaflet): gboolean <cimport,nodecl> end
global function adw_leaflet_set_can_unfold(self: *AdwLeaflet, can_unfold: gboolean): void <cimport,nodecl> end
global function adw_leaflet_get_pages(self: *AdwLeaflet): *GtkSelectionModel <cimport,nodecl> end
global function adw_leaflet_get_fold_threshold_policy(self: *AdwLeaflet): AdwFoldThresholdPolicy <cimport,nodecl> end
global function adw_leaflet_set_fold_threshold_policy(self: *AdwLeaflet, policy: AdwFoldThresholdPolicy): void <cimport,nodecl> end
global function adw_init(): void <cimport,nodecl> end
global function adw_is_initialized(): gboolean <cimport,nodecl> end
global function adw_preferences_group_get_type(): GType <cimport,nodecl> end
global function glib_autoptr_clear_AdwPreferencesGroup(_ptr: *AdwPreferencesGroup): void <cimport,nodecl> end
global function glib_autoptr_cleanup_AdwPreferencesGroup(_ptr: **AdwPreferencesGroup): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_AdwPreferencesGroup(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_AdwPreferencesGroup(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_AdwPreferencesGroup(_q: **GQueue): void <cimport,nodecl> end
global function glib_autoptr_clear_AdwPreferencesGroupClass(_ptr: *AdwPreferencesGroupClass): void <cimport,nodecl> end
global function glib_autoptr_cleanup_AdwPreferencesGroupClass(_ptr: **AdwPreferencesGroupClass): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_AdwPreferencesGroupClass(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_AdwPreferencesGroupClass(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_AdwPreferencesGroupClass(_q: **GQueue): void <cimport,nodecl> end
global function ADW_PREFERENCES_GROUP(ptr: gpointer): *AdwPreferencesGroup <cimport,nodecl> end
global function ADW_PREFERENCES_GROUP_CLASS(ptr: gpointer): *AdwPreferencesGroupClass <cimport,nodecl> end
global function ADW_IS_PREFERENCES_GROUP(ptr: gpointer): gboolean <cimport,nodecl> end
global function ADW_IS_PREFERENCES_GROUP_CLASS(ptr: gpointer): gboolean <cimport,nodecl> end
global function ADW_PREFERENCES_GROUP_GET_CLASS(ptr: gpointer): *AdwPreferencesGroupClass <cimport,nodecl> end
global function adw_preferences_group_new(): *GtkWidget <cimport,nodecl> end
global function adw_preferences_group_get_title(self: *AdwPreferencesGroup): cstring <cimport,nodecl> end
global function adw_preferences_group_set_title(self: *AdwPreferencesGroup, title: cstring): void <cimport,nodecl> end
global function adw_preferences_group_get_description(self: *AdwPreferencesGroup): cstring <cimport,nodecl> end
global function adw_preferences_group_set_description(self: *AdwPreferencesGroup, description: cstring): void <cimport,nodecl> end
global function adw_preferences_group_add(self: *AdwPreferencesGroup, child: *GtkWidget): void <cimport,nodecl> end
global function adw_preferences_group_remove(self: *AdwPreferencesGroup, child: *GtkWidget): void <cimport,nodecl> end
global function adw_preferences_page_get_type(): GType <cimport,nodecl> end
global function glib_autoptr_clear_AdwPreferencesPage(_ptr: *AdwPreferencesPage): void <cimport,nodecl> end
global function glib_autoptr_cleanup_AdwPreferencesPage(_ptr: **AdwPreferencesPage): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_AdwPreferencesPage(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_AdwPreferencesPage(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_AdwPreferencesPage(_q: **GQueue): void <cimport,nodecl> end
global function glib_autoptr_clear_AdwPreferencesPageClass(_ptr: *AdwPreferencesPageClass): void <cimport,nodecl> end
global function glib_autoptr_cleanup_AdwPreferencesPageClass(_ptr: **AdwPreferencesPageClass): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_AdwPreferencesPageClass(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_AdwPreferencesPageClass(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_AdwPreferencesPageClass(_q: **GQueue): void <cimport,nodecl> end
global function ADW_PREFERENCES_PAGE(ptr: gpointer): *AdwPreferencesPage <cimport,nodecl> end
global function ADW_PREFERENCES_PAGE_CLASS(ptr: gpointer): *AdwPreferencesPageClass <cimport,nodecl> end
global function ADW_IS_PREFERENCES_PAGE(ptr: gpointer): gboolean <cimport,nodecl> end
global function ADW_IS_PREFERENCES_PAGE_CLASS(ptr: gpointer): gboolean <cimport,nodecl> end
global function ADW_PREFERENCES_PAGE_GET_CLASS(ptr: gpointer): *AdwPreferencesPageClass <cimport,nodecl> end
global function adw_preferences_page_new(): *GtkWidget <cimport,nodecl> end
global function adw_preferences_page_get_icon_name(self: *AdwPreferencesPage): cstring <cimport,nodecl> end
global function adw_preferences_page_set_icon_name(self: *AdwPreferencesPage, icon_name: cstring): void <cimport,nodecl> end
global function adw_preferences_page_get_title(self: *AdwPreferencesPage): cstring <cimport,nodecl> end
global function adw_preferences_page_set_title(self: *AdwPreferencesPage, title: cstring): void <cimport,nodecl> end
global function adw_preferences_page_get_name(self: *AdwPreferencesPage): cstring <cimport,nodecl> end
global function adw_preferences_page_set_name(self: *AdwPreferencesPage, name: cstring): void <cimport,nodecl> end
global function adw_preferences_page_get_use_underline(self: *AdwPreferencesPage): gboolean <cimport,nodecl> end
global function adw_preferences_page_set_use_underline(self: *AdwPreferencesPage, use_underline: gboolean): void <cimport,nodecl> end
global function adw_preferences_page_add(self: *AdwPreferencesPage, group: *AdwPreferencesGroup): void <cimport,nodecl> end
global function adw_preferences_page_remove(self: *AdwPreferencesPage, group: *AdwPreferencesGroup): void <cimport,nodecl> end
global function adw_toast_get_type(): GType <cimport,nodecl> end
global function glib_autoptr_clear_AdwToast(_ptr: *AdwToast): void <cimport,nodecl> end
global function glib_autoptr_cleanup_AdwToast(_ptr: **AdwToast): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_AdwToast(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_AdwToast(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_AdwToast(_q: **GQueue): void <cimport,nodecl> end
global function glib_autoptr_clear_AdwToastClass(_ptr: *AdwToastClass): void <cimport,nodecl> end
global function glib_autoptr_cleanup_AdwToastClass(_ptr: **AdwToastClass): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_AdwToastClass(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_AdwToastClass(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_AdwToastClass(_q: **GQueue): void <cimport,nodecl> end
global function ADW_TOAST(ptr: gpointer): *AdwToast <cimport,nodecl> end
global function ADW_IS_TOAST(ptr: gpointer): gboolean <cimport,nodecl> end
global function adw_toast_new(title: cstring): *AdwToast <cimport,nodecl> end
global function adw_toast_get_title(self: *AdwToast): cstring <cimport,nodecl> end
global function adw_toast_set_title(self: *AdwToast, title: cstring): void <cimport,nodecl> end
global function adw_toast_get_button_label(self: *AdwToast): cstring <cimport,nodecl> end
global function adw_toast_set_button_label(self: *AdwToast, button_label: cstring): void <cimport,nodecl> end
global function adw_toast_get_action_name(self: *AdwToast): cstring <cimport,nodecl> end
global function adw_toast_set_action_name(self: *AdwToast, action_name: cstring): void <cimport,nodecl> end
global function adw_toast_get_action_target_value(self: *AdwToast): *GVariant <cimport,nodecl> end
global function adw_toast_set_action_target_value(self: *AdwToast, action_target: *GVariant): void <cimport,nodecl> end
global function adw_toast_set_action_target(self: *AdwToast, format_string: cstring, ...: cvarargs): void <cimport,nodecl> end
global function adw_toast_set_detailed_action_name(self: *AdwToast, detailed_action_name: cstring): void <cimport,nodecl> end
global function adw_toast_get_priority(self: *AdwToast): AdwToastPriority <cimport,nodecl> end
global function adw_toast_set_priority(self: *AdwToast, priority: AdwToastPriority): void <cimport,nodecl> end
global function adw_toast_get_timeout(self: *AdwToast): guint <cimport,nodecl> end
global function adw_toast_set_timeout(self: *AdwToast, timeout: guint): void <cimport,nodecl> end
global function adw_toast_dismiss(self: *AdwToast): void <cimport,nodecl> end
global function adw_window_get_type(): GType <cimport,nodecl> end
global function glib_autoptr_clear_AdwWindow(_ptr: *AdwWindow): void <cimport,nodecl> end
global function glib_autoptr_cleanup_AdwWindow(_ptr: **AdwWindow): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_AdwWindow(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_AdwWindow(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_AdwWindow(_q: **GQueue): void <cimport,nodecl> end
global function glib_autoptr_clear_AdwWindowClass(_ptr: *AdwWindowClass): void <cimport,nodecl> end
global function glib_autoptr_cleanup_AdwWindowClass(_ptr: **AdwWindowClass): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_AdwWindowClass(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_AdwWindowClass(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_AdwWindowClass(_q: **GQueue): void <cimport,nodecl> end
global function ADW_WINDOW(ptr: gpointer): *AdwWindow <cimport,nodecl> end
global function ADW_WINDOW_CLASS(ptr: gpointer): *AdwWindowClass <cimport,nodecl> end
global function ADW_IS_WINDOW(ptr: gpointer): gboolean <cimport,nodecl> end
global function ADW_IS_WINDOW_CLASS(ptr: gpointer): gboolean <cimport,nodecl> end
global function ADW_WINDOW_GET_CLASS(ptr: gpointer): *AdwWindowClass <cimport,nodecl> end
global function adw_window_new(): *GtkWidget <cimport,nodecl> end
global function adw_window_get_content(self: *AdwWindow): *GtkWidget <cimport,nodecl> end
global function adw_window_set_content(self: *AdwWindow, content: *GtkWidget): void <cimport,nodecl> end
global function adw_preferences_window_get_type(): GType <cimport,nodecl> end
global function glib_autoptr_clear_AdwPreferencesWindow(_ptr: *AdwPreferencesWindow): void <cimport,nodecl> end
global function glib_autoptr_cleanup_AdwPreferencesWindow(_ptr: **AdwPreferencesWindow): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_AdwPreferencesWindow(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_AdwPreferencesWindow(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_AdwPreferencesWindow(_q: **GQueue): void <cimport,nodecl> end
global function glib_autoptr_clear_AdwPreferencesWindowClass(_ptr: *AdwPreferencesWindowClass): void <cimport,nodecl> end
global function glib_autoptr_cleanup_AdwPreferencesWindowClass(_ptr: **AdwPreferencesWindowClass): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_AdwPreferencesWindowClass(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_AdwPreferencesWindowClass(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_AdwPreferencesWindowClass(_q: **GQueue): void <cimport,nodecl> end
global function ADW_PREFERENCES_WINDOW(ptr: gpointer): *AdwPreferencesWindow <cimport,nodecl> end
global function ADW_PREFERENCES_WINDOW_CLASS(ptr: gpointer): *AdwPreferencesWindowClass <cimport,nodecl> end
global function ADW_IS_PREFERENCES_WINDOW(ptr: gpointer): gboolean <cimport,nodecl> end
global function ADW_IS_PREFERENCES_WINDOW_CLASS(ptr: gpointer): gboolean <cimport,nodecl> end
global function ADW_PREFERENCES_WINDOW_GET_CLASS(ptr: gpointer): *AdwPreferencesWindowClass <cimport,nodecl> end
global function adw_preferences_window_new(): *GtkWidget <cimport,nodecl> end
global function adw_preferences_window_get_search_enabled(self: *AdwPreferencesWindow): gboolean <cimport,nodecl> end
global function adw_preferences_window_set_search_enabled(self: *AdwPreferencesWindow, search_enabled: gboolean): void <cimport,nodecl> end
global function adw_preferences_window_get_can_navigate_back(self: *AdwPreferencesWindow): gboolean <cimport,nodecl> end
global function adw_preferences_window_set_can_navigate_back(self: *AdwPreferencesWindow, can_navigate_back: gboolean): void <cimport,nodecl> end
global function adw_preferences_window_present_subpage(self: *AdwPreferencesWindow, subpage: *GtkWidget): void <cimport,nodecl> end
global function adw_preferences_window_close_subpage(self: *AdwPreferencesWindow): void <cimport,nodecl> end
global function adw_preferences_window_add(self: *AdwPreferencesWindow, page: *AdwPreferencesPage): void <cimport,nodecl> end
global function adw_preferences_window_remove(self: *AdwPreferencesWindow, page: *AdwPreferencesPage): void <cimport,nodecl> end
global function adw_preferences_window_get_visible_page(self: *AdwPreferencesWindow): *AdwPreferencesPage <cimport,nodecl> end
global function adw_preferences_window_set_visible_page(self: *AdwPreferencesWindow, page: *AdwPreferencesPage): void <cimport,nodecl> end
global function adw_preferences_window_get_visible_page_name(self: *AdwPreferencesWindow): cstring <cimport,nodecl> end
global function adw_preferences_window_set_visible_page_name(self: *AdwPreferencesWindow, name: cstring): void <cimport,nodecl> end
global function adw_preferences_window_add_toast(self: *AdwPreferencesWindow, toast: *AdwToast): void <cimport,nodecl> end
global function adw_split_button_get_type(): GType <cimport,nodecl> end
global function glib_autoptr_clear_AdwSplitButton(_ptr: *AdwSplitButton): void <cimport,nodecl> end
global function glib_autoptr_cleanup_AdwSplitButton(_ptr: **AdwSplitButton): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_AdwSplitButton(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_AdwSplitButton(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_AdwSplitButton(_q: **GQueue): void <cimport,nodecl> end
global function glib_autoptr_clear_AdwSplitButtonClass(_ptr: *AdwSplitButtonClass): void <cimport,nodecl> end
global function glib_autoptr_cleanup_AdwSplitButtonClass(_ptr: **AdwSplitButtonClass): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_AdwSplitButtonClass(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_AdwSplitButtonClass(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_AdwSplitButtonClass(_q: **GQueue): void <cimport,nodecl> end
global function ADW_SPLIT_BUTTON(ptr: gpointer): *AdwSplitButton <cimport,nodecl> end
global function ADW_IS_SPLIT_BUTTON(ptr: gpointer): gboolean <cimport,nodecl> end
global function adw_split_button_new(): *GtkWidget <cimport,nodecl> end
global function adw_split_button_get_label(self: *AdwSplitButton): cstring <cimport,nodecl> end
global function adw_split_button_set_label(self: *AdwSplitButton, label: cstring): void <cimport,nodecl> end
global function adw_split_button_get_use_underline(self: *AdwSplitButton): gboolean <cimport,nodecl> end
global function adw_split_button_set_use_underline(self: *AdwSplitButton, use_underline: gboolean): void <cimport,nodecl> end
global function adw_split_button_get_icon_name(self: *AdwSplitButton): cstring <cimport,nodecl> end
global function adw_split_button_set_icon_name(self: *AdwSplitButton, icon_name: cstring): void <cimport,nodecl> end
global function adw_split_button_get_child(self: *AdwSplitButton): *GtkWidget <cimport,nodecl> end
global function adw_split_button_set_child(self: *AdwSplitButton, child: *GtkWidget): void <cimport,nodecl> end
global function adw_split_button_get_menu_model(self: *AdwSplitButton): *GMenuModel <cimport,nodecl> end
global function adw_split_button_set_menu_model(self: *AdwSplitButton, menu_model: *GMenuModel): void <cimport,nodecl> end
global function adw_split_button_get_popover(self: *AdwSplitButton): *GtkPopover <cimport,nodecl> end
global function adw_split_button_set_popover(self: *AdwSplitButton, popover: *GtkPopover): void <cimport,nodecl> end
global function adw_split_button_get_direction(self: *AdwSplitButton): GtkArrowType <cimport,nodecl> end
global function adw_split_button_set_direction(self: *AdwSplitButton, direction: GtkArrowType): void <cimport,nodecl> end
global function adw_split_button_popup(self: *AdwSplitButton): void <cimport,nodecl> end
global function adw_split_button_popdown(self: *AdwSplitButton): void <cimport,nodecl> end
global function adw_spring_animation_get_type(): GType <cimport,nodecl> end
global function glib_autoptr_clear_AdwSpringAnimation(_ptr: *AdwSpringAnimation): void <cimport,nodecl> end
global function glib_autoptr_cleanup_AdwSpringAnimation(_ptr: **AdwSpringAnimation): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_AdwSpringAnimation(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_AdwSpringAnimation(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_AdwSpringAnimation(_q: **GQueue): void <cimport,nodecl> end
global function glib_autoptr_clear_AdwSpringAnimationClass(_ptr: *AdwSpringAnimationClass): void <cimport,nodecl> end
global function glib_autoptr_cleanup_AdwSpringAnimationClass(_ptr: **AdwSpringAnimationClass): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_AdwSpringAnimationClass(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_AdwSpringAnimationClass(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_AdwSpringAnimationClass(_q: **GQueue): void <cimport,nodecl> end
global function ADW_SPRING_ANIMATION(ptr: gpointer): *AdwSpringAnimation <cimport,nodecl> end
global function ADW_SPRING_ANIMATION_CLASS(ptr: gpointer): *AdwSpringAnimationClass <cimport,nodecl> end
global function ADW_IS_SPRING_ANIMATION(ptr: gpointer): gboolean <cimport,nodecl> end
global function ADW_IS_SPRING_ANIMATION_CLASS(ptr: gpointer): gboolean <cimport,nodecl> end
global function ADW_SPRING_ANIMATION_GET_CLASS(ptr: gpointer): *AdwSpringAnimationClass <cimport,nodecl> end
global function adw_spring_animation_new(widget: *GtkWidget, from: float64, to: float64, spring_params: *AdwSpringParams, target: *AdwAnimationTarget): *AdwAnimation <cimport,nodecl> end
global function adw_spring_animation_get_value_from(self: *AdwSpringAnimation): float64 <cimport,nodecl> end
global function adw_spring_animation_set_value_from(self: *AdwSpringAnimation, value: float64): void <cimport,nodecl> end
global function adw_spring_animation_get_value_to(self: *AdwSpringAnimation): float64 <cimport,nodecl> end
global function adw_spring_animation_set_value_to(self: *AdwSpringAnimation, value: float64): void <cimport,nodecl> end
global function adw_spring_animation_get_spring_params(self: *AdwSpringAnimation): *AdwSpringParams <cimport,nodecl> end
global function adw_spring_animation_set_spring_params(self: *AdwSpringAnimation, spring_params: *AdwSpringParams): void <cimport,nodecl> end
global function adw_spring_animation_get_initial_velocity(self: *AdwSpringAnimation): float64 <cimport,nodecl> end
global function adw_spring_animation_set_initial_velocity(self: *AdwSpringAnimation, velocity: float64): void <cimport,nodecl> end
global function adw_spring_animation_get_epsilon(self: *AdwSpringAnimation): float64 <cimport,nodecl> end
global function adw_spring_animation_set_epsilon(self: *AdwSpringAnimation, epsilon: float64): void <cimport,nodecl> end
global function adw_spring_animation_get_clamp(self: *AdwSpringAnimation): gboolean <cimport,nodecl> end
global function adw_spring_animation_set_clamp(self: *AdwSpringAnimation, clamp: gboolean): void <cimport,nodecl> end
global function adw_spring_animation_get_estimated_duration(self: *AdwSpringAnimation): guint <cimport,nodecl> end
global function adw_spring_animation_get_velocity(self: *AdwSpringAnimation): float64 <cimport,nodecl> end
global function adw_squeezer_page_get_type(): GType <cimport,nodecl> end
global function glib_autoptr_clear_AdwSqueezerPage(_ptr: *AdwSqueezerPage): void <cimport,nodecl> end
global function glib_autoptr_cleanup_AdwSqueezerPage(_ptr: **AdwSqueezerPage): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_AdwSqueezerPage(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_AdwSqueezerPage(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_AdwSqueezerPage(_q: **GQueue): void <cimport,nodecl> end
global function glib_autoptr_clear_AdwSqueezerPageClass(_ptr: *AdwSqueezerPageClass): void <cimport,nodecl> end
global function glib_autoptr_cleanup_AdwSqueezerPageClass(_ptr: **AdwSqueezerPageClass): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_AdwSqueezerPageClass(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_AdwSqueezerPageClass(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_AdwSqueezerPageClass(_q: **GQueue): void <cimport,nodecl> end
global function ADW_SQUEEZER_PAGE(ptr: gpointer): *AdwSqueezerPage <cimport,nodecl> end
global function ADW_IS_SQUEEZER_PAGE(ptr: gpointer): gboolean <cimport,nodecl> end
global function adw_squeezer_page_get_child(self: *AdwSqueezerPage): *GtkWidget <cimport,nodecl> end
global function adw_squeezer_page_get_enabled(self: *AdwSqueezerPage): gboolean <cimport,nodecl> end
global function adw_squeezer_page_set_enabled(self: *AdwSqueezerPage, enabled: gboolean): void <cimport,nodecl> end
global function adw_squeezer_get_type(): GType <cimport,nodecl> end
global function glib_autoptr_clear_AdwSqueezer(_ptr: *AdwSqueezer): void <cimport,nodecl> end
global function glib_autoptr_cleanup_AdwSqueezer(_ptr: **AdwSqueezer): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_AdwSqueezer(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_AdwSqueezer(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_AdwSqueezer(_q: **GQueue): void <cimport,nodecl> end
global function glib_autoptr_clear_AdwSqueezerClass(_ptr: *AdwSqueezerClass): void <cimport,nodecl> end
global function glib_autoptr_cleanup_AdwSqueezerClass(_ptr: **AdwSqueezerClass): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_AdwSqueezerClass(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_AdwSqueezerClass(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_AdwSqueezerClass(_q: **GQueue): void <cimport,nodecl> end
global function ADW_SQUEEZER(ptr: gpointer): *AdwSqueezer <cimport,nodecl> end
global function ADW_IS_SQUEEZER(ptr: gpointer): gboolean <cimport,nodecl> end
global function adw_squeezer_new(): *GtkWidget <cimport,nodecl> end
global function adw_squeezer_add(self: *AdwSqueezer, child: *GtkWidget): *AdwSqueezerPage <cimport,nodecl> end
global function adw_squeezer_remove(self: *AdwSqueezer, child: *GtkWidget): void <cimport,nodecl> end
global function adw_squeezer_get_page(self: *AdwSqueezer, child: *GtkWidget): *AdwSqueezerPage <cimport,nodecl> end
global function adw_squeezer_get_homogeneous(self: *AdwSqueezer): gboolean <cimport,nodecl> end
global function adw_squeezer_set_homogeneous(self: *AdwSqueezer, homogeneous: gboolean): void <cimport,nodecl> end
global function adw_squeezer_get_switch_threshold_policy(self: *AdwSqueezer): AdwFoldThresholdPolicy <cimport,nodecl> end
global function adw_squeezer_set_switch_threshold_policy(self: *AdwSqueezer, policy: AdwFoldThresholdPolicy): void <cimport,nodecl> end
global function adw_squeezer_get_allow_none(self: *AdwSqueezer): gboolean <cimport,nodecl> end
global function adw_squeezer_set_allow_none(self: *AdwSqueezer, allow_none: gboolean): void <cimport,nodecl> end
global function adw_squeezer_get_transition_duration(self: *AdwSqueezer): guint <cimport,nodecl> end
global function adw_squeezer_set_transition_duration(self: *AdwSqueezer, duration: guint): void <cimport,nodecl> end
global function adw_squeezer_get_transition_type(self: *AdwSqueezer): AdwSqueezerTransitionType <cimport,nodecl> end
global function adw_squeezer_set_transition_type(self: *AdwSqueezer, transition: AdwSqueezerTransitionType): void <cimport,nodecl> end
global function adw_squeezer_get_transition_running(self: *AdwSqueezer): gboolean <cimport,nodecl> end
global function adw_squeezer_get_interpolate_size(self: *AdwSqueezer): gboolean <cimport,nodecl> end
global function adw_squeezer_set_interpolate_size(self: *AdwSqueezer, interpolate_size: gboolean): void <cimport,nodecl> end
global function adw_squeezer_get_visible_child(self: *AdwSqueezer): *GtkWidget <cimport,nodecl> end
global function adw_squeezer_get_xalign(self: *AdwSqueezer): float32 <cimport,nodecl> end
global function adw_squeezer_set_xalign(self: *AdwSqueezer, xalign: float32): void <cimport,nodecl> end
global function adw_squeezer_get_yalign(self: *AdwSqueezer): float32 <cimport,nodecl> end
global function adw_squeezer_set_yalign(self: *AdwSqueezer, yalign: float32): void <cimport,nodecl> end
global function adw_squeezer_get_pages(self: *AdwSqueezer): *GtkSelectionModel <cimport,nodecl> end
global function adw_status_page_get_type(): GType <cimport,nodecl> end
global function glib_autoptr_clear_AdwStatusPage(_ptr: *AdwStatusPage): void <cimport,nodecl> end
global function glib_autoptr_cleanup_AdwStatusPage(_ptr: **AdwStatusPage): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_AdwStatusPage(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_AdwStatusPage(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_AdwStatusPage(_q: **GQueue): void <cimport,nodecl> end
global function glib_autoptr_clear_AdwStatusPageClass(_ptr: *AdwStatusPageClass): void <cimport,nodecl> end
global function glib_autoptr_cleanup_AdwStatusPageClass(_ptr: **AdwStatusPageClass): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_AdwStatusPageClass(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_AdwStatusPageClass(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_AdwStatusPageClass(_q: **GQueue): void <cimport,nodecl> end
global function ADW_STATUS_PAGE(ptr: gpointer): *AdwStatusPage <cimport,nodecl> end
global function ADW_IS_STATUS_PAGE(ptr: gpointer): gboolean <cimport,nodecl> end
global function adw_status_page_new(): *GtkWidget <cimport,nodecl> end
global function adw_status_page_get_icon_name(self: *AdwStatusPage): cstring <cimport,nodecl> end
global function adw_status_page_set_icon_name(self: *AdwStatusPage, icon_name: cstring): void <cimport,nodecl> end
global function adw_status_page_get_paintable(self: *AdwStatusPage): *GdkPaintable <cimport,nodecl> end
global function adw_status_page_set_paintable(self: *AdwStatusPage, paintable: *GdkPaintable): void <cimport,nodecl> end
global function adw_status_page_get_title(self: *AdwStatusPage): cstring <cimport,nodecl> end
global function adw_status_page_set_title(self: *AdwStatusPage, title: cstring): void <cimport,nodecl> end
global function adw_status_page_get_description(self: *AdwStatusPage): cstring <cimport,nodecl> end
global function adw_status_page_set_description(self: *AdwStatusPage, description: cstring): void <cimport,nodecl> end
global function adw_status_page_get_child(self: *AdwStatusPage): *GtkWidget <cimport,nodecl> end
global function adw_status_page_set_child(self: *AdwStatusPage, child: *GtkWidget): void <cimport,nodecl> end
global function adw_swipeable_get_type(): GType <cimport,nodecl> end
global function glib_autoptr_clear_AdwSwipeable(_ptr: *AdwSwipeable): void <cimport,nodecl> end
global function glib_autoptr_cleanup_AdwSwipeable(_ptr: **AdwSwipeable): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_AdwSwipeable(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_AdwSwipeable(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_AdwSwipeable(_q: **GQueue): void <cimport,nodecl> end
global function ADW_SWIPEABLE(ptr: gpointer): *AdwSwipeable <cimport,nodecl> end
global function ADW_IS_SWIPEABLE(ptr: gpointer): gboolean <cimport,nodecl> end
global function ADW_SWIPEABLE_GET_IFACE(ptr: gpointer): *AdwSwipeableInterface <cimport,nodecl> end
global function adw_swipeable_get_distance(self: *AdwSwipeable): float64 <cimport,nodecl> end
global function adw_swipeable_get_snap_points(self: *AdwSwipeable, n_snap_points: *cint): *float64 <cimport,nodecl> end
global function adw_swipeable_get_progress(self: *AdwSwipeable): float64 <cimport,nodecl> end
global function adw_swipeable_get_cancel_progress(self: *AdwSwipeable): float64 <cimport,nodecl> end
global function adw_swipeable_get_swipe_area(self: *AdwSwipeable, navigation_direction: AdwNavigationDirection, is_drag: gboolean, rect: *GdkRectangle): void <cimport,nodecl> end
global function adw_swipe_tracker_get_type(): GType <cimport,nodecl> end
global function glib_autoptr_clear_AdwSwipeTracker(_ptr: *AdwSwipeTracker): void <cimport,nodecl> end
global function glib_autoptr_cleanup_AdwSwipeTracker(_ptr: **AdwSwipeTracker): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_AdwSwipeTracker(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_AdwSwipeTracker(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_AdwSwipeTracker(_q: **GQueue): void <cimport,nodecl> end
global function glib_autoptr_clear_AdwSwipeTrackerClass(_ptr: *AdwSwipeTrackerClass): void <cimport,nodecl> end
global function glib_autoptr_cleanup_AdwSwipeTrackerClass(_ptr: **AdwSwipeTrackerClass): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_AdwSwipeTrackerClass(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_AdwSwipeTrackerClass(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_AdwSwipeTrackerClass(_q: **GQueue): void <cimport,nodecl> end
global function ADW_SWIPE_TRACKER(ptr: gpointer): *AdwSwipeTracker <cimport,nodecl> end
global function ADW_IS_SWIPE_TRACKER(ptr: gpointer): gboolean <cimport,nodecl> end
global function adw_swipe_tracker_new(swipeable: *AdwSwipeable): *AdwSwipeTracker <cimport,nodecl> end
global function adw_swipe_tracker_get_swipeable(self: *AdwSwipeTracker): *AdwSwipeable <cimport,nodecl> end
global function adw_swipe_tracker_get_enabled(self: *AdwSwipeTracker): gboolean <cimport,nodecl> end
global function adw_swipe_tracker_set_enabled(self: *AdwSwipeTracker, enabled: gboolean): void <cimport,nodecl> end
global function adw_swipe_tracker_get_reversed(self: *AdwSwipeTracker): gboolean <cimport,nodecl> end
global function adw_swipe_tracker_set_reversed(self: *AdwSwipeTracker, reversed: gboolean): void <cimport,nodecl> end
global function adw_swipe_tracker_get_allow_mouse_drag(self: *AdwSwipeTracker): gboolean <cimport,nodecl> end
global function adw_swipe_tracker_set_allow_mouse_drag(self: *AdwSwipeTracker, allow_mouse_drag: gboolean): void <cimport,nodecl> end
global function adw_swipe_tracker_get_allow_long_swipes(self: *AdwSwipeTracker): gboolean <cimport,nodecl> end
global function adw_swipe_tracker_set_allow_long_swipes(self: *AdwSwipeTracker, allow_long_swipes: gboolean): void <cimport,nodecl> end
global function adw_swipe_tracker_shift_position(self: *AdwSwipeTracker, delta: float64): void <cimport,nodecl> end
global function adw_tab_page_get_type(): GType <cimport,nodecl> end
global function glib_autoptr_clear_AdwTabPage(_ptr: *AdwTabPage): void <cimport,nodecl> end
global function glib_autoptr_cleanup_AdwTabPage(_ptr: **AdwTabPage): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_AdwTabPage(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_AdwTabPage(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_AdwTabPage(_q: **GQueue): void <cimport,nodecl> end
global function glib_autoptr_clear_AdwTabPageClass(_ptr: *AdwTabPageClass): void <cimport,nodecl> end
global function glib_autoptr_cleanup_AdwTabPageClass(_ptr: **AdwTabPageClass): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_AdwTabPageClass(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_AdwTabPageClass(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_AdwTabPageClass(_q: **GQueue): void <cimport,nodecl> end
global function ADW_TAB_PAGE(ptr: gpointer): *AdwTabPage <cimport,nodecl> end
global function ADW_IS_TAB_PAGE(ptr: gpointer): gboolean <cimport,nodecl> end
global function adw_tab_page_get_child(self: *AdwTabPage): *GtkWidget <cimport,nodecl> end
global function adw_tab_page_get_parent(self: *AdwTabPage): *AdwTabPage <cimport,nodecl> end
global function adw_tab_page_get_selected(self: *AdwTabPage): gboolean <cimport,nodecl> end
global function adw_tab_page_get_pinned(self: *AdwTabPage): gboolean <cimport,nodecl> end
global function adw_tab_page_get_title(self: *AdwTabPage): cstring <cimport,nodecl> end
global function adw_tab_page_set_title(self: *AdwTabPage, title: cstring): void <cimport,nodecl> end
global function adw_tab_page_get_tooltip(self: *AdwTabPage): cstring <cimport,nodecl> end
global function adw_tab_page_set_tooltip(self: *AdwTabPage, tooltip: cstring): void <cimport,nodecl> end
global function adw_tab_page_get_icon(self: *AdwTabPage): *GIcon <cimport,nodecl> end
global function adw_tab_page_set_icon(self: *AdwTabPage, icon: *GIcon): void <cimport,nodecl> end
global function adw_tab_page_get_loading(self: *AdwTabPage): gboolean <cimport,nodecl> end
global function adw_tab_page_set_loading(self: *AdwTabPage, loading: gboolean): void <cimport,nodecl> end
global function adw_tab_page_get_indicator_icon(self: *AdwTabPage): *GIcon <cimport,nodecl> end
global function adw_tab_page_set_indicator_icon(self: *AdwTabPage, indicator_icon: *GIcon): void <cimport,nodecl> end
global function adw_tab_page_get_indicator_activatable(self: *AdwTabPage): gboolean <cimport,nodecl> end
global function adw_tab_page_set_indicator_activatable(self: *AdwTabPage, activatable: gboolean): void <cimport,nodecl> end
global function adw_tab_page_get_needs_attention(self: *AdwTabPage): gboolean <cimport,nodecl> end
global function adw_tab_page_set_needs_attention(self: *AdwTabPage, needs_attention: gboolean): void <cimport,nodecl> end
global function adw_tab_view_get_type(): GType <cimport,nodecl> end
global function glib_autoptr_clear_AdwTabView(_ptr: *AdwTabView): void <cimport,nodecl> end
global function glib_autoptr_cleanup_AdwTabView(_ptr: **AdwTabView): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_AdwTabView(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_AdwTabView(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_AdwTabView(_q: **GQueue): void <cimport,nodecl> end
global function glib_autoptr_clear_AdwTabViewClass(_ptr: *AdwTabViewClass): void <cimport,nodecl> end
global function glib_autoptr_cleanup_AdwTabViewClass(_ptr: **AdwTabViewClass): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_AdwTabViewClass(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_AdwTabViewClass(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_AdwTabViewClass(_q: **GQueue): void <cimport,nodecl> end
global function ADW_TAB_VIEW(ptr: gpointer): *AdwTabView <cimport,nodecl> end
global function ADW_IS_TAB_VIEW(ptr: gpointer): gboolean <cimport,nodecl> end
global function adw_tab_view_new(): *AdwTabView <cimport,nodecl> end
global function adw_tab_view_get_n_pages(self: *AdwTabView): cint <cimport,nodecl> end
global function adw_tab_view_get_n_pinned_pages(self: *AdwTabView): cint <cimport,nodecl> end
global function adw_tab_view_get_is_transferring_page(self: *AdwTabView): gboolean <cimport,nodecl> end
global function adw_tab_view_get_selected_page(self: *AdwTabView): *AdwTabPage <cimport,nodecl> end
global function adw_tab_view_set_selected_page(self: *AdwTabView, selected_page: *AdwTabPage): void <cimport,nodecl> end
global function adw_tab_view_select_previous_page(self: *AdwTabView): gboolean <cimport,nodecl> end
global function adw_tab_view_select_next_page(self: *AdwTabView): gboolean <cimport,nodecl> end
global function adw_tab_view_get_default_icon(self: *AdwTabView): *GIcon <cimport,nodecl> end
global function adw_tab_view_set_default_icon(self: *AdwTabView, default_icon: *GIcon): void <cimport,nodecl> end
global function adw_tab_view_get_menu_model(self: *AdwTabView): *GMenuModel <cimport,nodecl> end
global function adw_tab_view_set_menu_model(self: *AdwTabView, menu_model: *GMenuModel): void <cimport,nodecl> end
global function adw_tab_view_set_page_pinned(self: *AdwTabView, page: *AdwTabPage, pinned: gboolean): void <cimport,nodecl> end
global function adw_tab_view_get_page(self: *AdwTabView, child: *GtkWidget): *AdwTabPage <cimport,nodecl> end
global function adw_tab_view_get_nth_page(self: *AdwTabView, position: cint): *AdwTabPage <cimport,nodecl> end
global function adw_tab_view_get_page_position(self: *AdwTabView, page: *AdwTabPage): cint <cimport,nodecl> end
global function adw_tab_view_add_page(self: *AdwTabView, child: *GtkWidget, parent: *AdwTabPage): *AdwTabPage <cimport,nodecl> end
global function adw_tab_view_insert(self: *AdwTabView, child: *GtkWidget, position: cint): *AdwTabPage <cimport,nodecl> end
global function adw_tab_view_prepend(self: *AdwTabView, child: *GtkWidget): *AdwTabPage <cimport,nodecl> end
global function adw_tab_view_append(self: *AdwTabView, child: *GtkWidget): *AdwTabPage <cimport,nodecl> end
global function adw_tab_view_insert_pinned(self: *AdwTabView, child: *GtkWidget, position: cint): *AdwTabPage <cimport,nodecl> end
global function adw_tab_view_prepend_pinned(self: *AdwTabView, child: *GtkWidget): *AdwTabPage <cimport,nodecl> end
global function adw_tab_view_append_pinned(self: *AdwTabView, child: *GtkWidget): *AdwTabPage <cimport,nodecl> end
global function adw_tab_view_close_page(self: *AdwTabView, page: *AdwTabPage): void <cimport,nodecl> end
global function adw_tab_view_close_page_finish(self: *AdwTabView, page: *AdwTabPage, confirm: gboolean): void <cimport,nodecl> end
global function adw_tab_view_close_other_pages(self: *AdwTabView, page: *AdwTabPage): void <cimport,nodecl> end
global function adw_tab_view_close_pages_before(self: *AdwTabView, page: *AdwTabPage): void <cimport,nodecl> end
global function adw_tab_view_close_pages_after(self: *AdwTabView, page: *AdwTabPage): void <cimport,nodecl> end
global function adw_tab_view_reorder_page(self: *AdwTabView, page: *AdwTabPage, position: cint): gboolean <cimport,nodecl> end
global function adw_tab_view_reorder_backward(self: *AdwTabView, page: *AdwTabPage): gboolean <cimport,nodecl> end
global function adw_tab_view_reorder_forward(self: *AdwTabView, page: *AdwTabPage): gboolean <cimport,nodecl> end
global function adw_tab_view_reorder_first(self: *AdwTabView, page: *AdwTabPage): gboolean <cimport,nodecl> end
global function adw_tab_view_reorder_last(self: *AdwTabView, page: *AdwTabPage): gboolean <cimport,nodecl> end
global function adw_tab_view_transfer_page(self: *AdwTabView, page: *AdwTabPage, other_view: *AdwTabView, position: cint): void <cimport,nodecl> end
global function adw_tab_view_get_pages(self: *AdwTabView): *GtkSelectionModel <cimport,nodecl> end
global function adw_tab_bar_get_type(): GType <cimport,nodecl> end
global function glib_autoptr_clear_AdwTabBar(_ptr: *AdwTabBar): void <cimport,nodecl> end
global function glib_autoptr_cleanup_AdwTabBar(_ptr: **AdwTabBar): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_AdwTabBar(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_AdwTabBar(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_AdwTabBar(_q: **GQueue): void <cimport,nodecl> end
global function glib_autoptr_clear_AdwTabBarClass(_ptr: *AdwTabBarClass): void <cimport,nodecl> end
global function glib_autoptr_cleanup_AdwTabBarClass(_ptr: **AdwTabBarClass): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_AdwTabBarClass(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_AdwTabBarClass(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_AdwTabBarClass(_q: **GQueue): void <cimport,nodecl> end
global function ADW_TAB_BAR(ptr: gpointer): *AdwTabBar <cimport,nodecl> end
global function ADW_IS_TAB_BAR(ptr: gpointer): gboolean <cimport,nodecl> end
global function adw_tab_bar_new(): *AdwTabBar <cimport,nodecl> end
global function adw_tab_bar_get_view(self: *AdwTabBar): *AdwTabView <cimport,nodecl> end
global function adw_tab_bar_set_view(self: *AdwTabBar, view: *AdwTabView): void <cimport,nodecl> end
global function adw_tab_bar_get_start_action_widget(self: *AdwTabBar): *GtkWidget <cimport,nodecl> end
global function adw_tab_bar_set_start_action_widget(self: *AdwTabBar, widget: *GtkWidget): void <cimport,nodecl> end
global function adw_tab_bar_get_end_action_widget(self: *AdwTabBar): *GtkWidget <cimport,nodecl> end
global function adw_tab_bar_set_end_action_widget(self: *AdwTabBar, widget: *GtkWidget): void <cimport,nodecl> end
global function adw_tab_bar_get_autohide(self: *AdwTabBar): gboolean <cimport,nodecl> end
global function adw_tab_bar_set_autohide(self: *AdwTabBar, autohide: gboolean): void <cimport,nodecl> end
global function adw_tab_bar_get_tabs_revealed(self: *AdwTabBar): gboolean <cimport,nodecl> end
global function adw_tab_bar_get_expand_tabs(self: *AdwTabBar): gboolean <cimport,nodecl> end
global function adw_tab_bar_set_expand_tabs(self: *AdwTabBar, expand_tabs: gboolean): void <cimport,nodecl> end
global function adw_tab_bar_get_inverted(self: *AdwTabBar): gboolean <cimport,nodecl> end
global function adw_tab_bar_set_inverted(self: *AdwTabBar, inverted: gboolean): void <cimport,nodecl> end
global function adw_tab_bar_setup_extra_drop_target(self: *AdwTabBar, actions: GdkDragAction, types: *GType, n_types: gsize): void <cimport,nodecl> end
global function adw_tab_bar_get_is_overflowing(self: *AdwTabBar): gboolean <cimport,nodecl> end
global function adw_timed_animation_get_type(): GType <cimport,nodecl> end
global function glib_autoptr_clear_AdwTimedAnimation(_ptr: *AdwTimedAnimation): void <cimport,nodecl> end
global function glib_autoptr_cleanup_AdwTimedAnimation(_ptr: **AdwTimedAnimation): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_AdwTimedAnimation(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_AdwTimedAnimation(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_AdwTimedAnimation(_q: **GQueue): void <cimport,nodecl> end
global function glib_autoptr_clear_AdwTimedAnimationClass(_ptr: *AdwTimedAnimationClass): void <cimport,nodecl> end
global function glib_autoptr_cleanup_AdwTimedAnimationClass(_ptr: **AdwTimedAnimationClass): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_AdwTimedAnimationClass(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_AdwTimedAnimationClass(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_AdwTimedAnimationClass(_q: **GQueue): void <cimport,nodecl> end
global function ADW_TIMED_ANIMATION(ptr: gpointer): *AdwTimedAnimation <cimport,nodecl> end
global function ADW_TIMED_ANIMATION_CLASS(ptr: gpointer): *AdwTimedAnimationClass <cimport,nodecl> end
global function ADW_IS_TIMED_ANIMATION(ptr: gpointer): gboolean <cimport,nodecl> end
global function ADW_IS_TIMED_ANIMATION_CLASS(ptr: gpointer): gboolean <cimport,nodecl> end
global function ADW_TIMED_ANIMATION_GET_CLASS(ptr: gpointer): *AdwTimedAnimationClass <cimport,nodecl> end
global function adw_timed_animation_new(widget: *GtkWidget, from: float64, to: float64, duration: guint, target: *AdwAnimationTarget): *AdwAnimation <cimport,nodecl> end
global function adw_timed_animation_get_value_from(self: *AdwTimedAnimation): float64 <cimport,nodecl> end
global function adw_timed_animation_set_value_from(self: *AdwTimedAnimation, value: float64): void <cimport,nodecl> end
global function adw_timed_animation_get_value_to(self: *AdwTimedAnimation): float64 <cimport,nodecl> end
global function adw_timed_animation_set_value_to(self: *AdwTimedAnimation, value: float64): void <cimport,nodecl> end
global function adw_timed_animation_get_duration(self: *AdwTimedAnimation): guint <cimport,nodecl> end
global function adw_timed_animation_set_duration(self: *AdwTimedAnimation, duration: guint): void <cimport,nodecl> end
global function adw_timed_animation_get_easing(self: *AdwTimedAnimation): AdwEasing <cimport,nodecl> end
global function adw_timed_animation_set_easing(self: *AdwTimedAnimation, easing: AdwEasing): void <cimport,nodecl> end
global function adw_timed_animation_get_repeat_count(self: *AdwTimedAnimation): guint <cimport,nodecl> end
global function adw_timed_animation_set_repeat_count(self: *AdwTimedAnimation, repeat_count: guint): void <cimport,nodecl> end
global function adw_timed_animation_get_reverse(self: *AdwTimedAnimation): gboolean <cimport,nodecl> end
global function adw_timed_animation_set_reverse(self: *AdwTimedAnimation, reverse: gboolean): void <cimport,nodecl> end
global function adw_timed_animation_get_alternate(self: *AdwTimedAnimation): gboolean <cimport,nodecl> end
global function adw_timed_animation_set_alternate(self: *AdwTimedAnimation, alternate: gboolean): void <cimport,nodecl> end
global function adw_toast_overlay_get_type(): GType <cimport,nodecl> end
global function glib_autoptr_clear_AdwToastOverlay(_ptr: *AdwToastOverlay): void <cimport,nodecl> end
global function glib_autoptr_cleanup_AdwToastOverlay(_ptr: **AdwToastOverlay): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_AdwToastOverlay(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_AdwToastOverlay(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_AdwToastOverlay(_q: **GQueue): void <cimport,nodecl> end
global function glib_autoptr_clear_AdwToastOverlayClass(_ptr: *AdwToastOverlayClass): void <cimport,nodecl> end
global function glib_autoptr_cleanup_AdwToastOverlayClass(_ptr: **AdwToastOverlayClass): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_AdwToastOverlayClass(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_AdwToastOverlayClass(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_AdwToastOverlayClass(_q: **GQueue): void <cimport,nodecl> end
global function ADW_TOAST_OVERLAY(ptr: gpointer): *AdwToastOverlay <cimport,nodecl> end
global function ADW_IS_TOAST_OVERLAY(ptr: gpointer): gboolean <cimport,nodecl> end
global function adw_toast_overlay_new(): *GtkWidget <cimport,nodecl> end
global function adw_toast_overlay_get_child(self: *AdwToastOverlay): *GtkWidget <cimport,nodecl> end
global function adw_toast_overlay_set_child(self: *AdwToastOverlay, child: *GtkWidget): void <cimport,nodecl> end
global function adw_toast_overlay_add_toast(self: *AdwToastOverlay, toast: *AdwToast): void <cimport,nodecl> end
global function adw_view_stack_page_get_type(): GType <cimport,nodecl> end
global function glib_autoptr_clear_AdwViewStackPage(_ptr: *AdwViewStackPage): void <cimport,nodecl> end
global function glib_autoptr_cleanup_AdwViewStackPage(_ptr: **AdwViewStackPage): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_AdwViewStackPage(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_AdwViewStackPage(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_AdwViewStackPage(_q: **GQueue): void <cimport,nodecl> end
global function glib_autoptr_clear_AdwViewStackPageClass(_ptr: *AdwViewStackPageClass): void <cimport,nodecl> end
global function glib_autoptr_cleanup_AdwViewStackPageClass(_ptr: **AdwViewStackPageClass): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_AdwViewStackPageClass(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_AdwViewStackPageClass(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_AdwViewStackPageClass(_q: **GQueue): void <cimport,nodecl> end
global function ADW_VIEW_STACK_PAGE(ptr: gpointer): *AdwViewStackPage <cimport,nodecl> end
global function ADW_IS_VIEW_STACK_PAGE(ptr: gpointer): gboolean <cimport,nodecl> end
global function adw_view_stack_page_get_child(self: *AdwViewStackPage): *GtkWidget <cimport,nodecl> end
global function adw_view_stack_page_get_visible(self: *AdwViewStackPage): gboolean <cimport,nodecl> end
global function adw_view_stack_page_set_visible(self: *AdwViewStackPage, visible: gboolean): void <cimport,nodecl> end
global function adw_view_stack_page_get_needs_attention(self: *AdwViewStackPage): gboolean <cimport,nodecl> end
global function adw_view_stack_page_set_needs_attention(self: *AdwViewStackPage, needs_attention: gboolean): void <cimport,nodecl> end
global function adw_view_stack_page_get_badge_number(self: *AdwViewStackPage): guint <cimport,nodecl> end
global function adw_view_stack_page_set_badge_number(self: *AdwViewStackPage, badge_number: guint): void <cimport,nodecl> end
global function adw_view_stack_page_get_use_underline(self: *AdwViewStackPage): gboolean <cimport,nodecl> end
global function adw_view_stack_page_set_use_underline(self: *AdwViewStackPage, use_underline: gboolean): void <cimport,nodecl> end
global function adw_view_stack_page_get_name(self: *AdwViewStackPage): cstring <cimport,nodecl> end
global function adw_view_stack_page_set_name(self: *AdwViewStackPage, name: cstring): void <cimport,nodecl> end
global function adw_view_stack_page_get_title(self: *AdwViewStackPage): cstring <cimport,nodecl> end
global function adw_view_stack_page_set_title(self: *AdwViewStackPage, title: cstring): void <cimport,nodecl> end
global function adw_view_stack_page_get_icon_name(self: *AdwViewStackPage): cstring <cimport,nodecl> end
global function adw_view_stack_page_set_icon_name(self: *AdwViewStackPage, icon_name: cstring): void <cimport,nodecl> end
global function adw_view_stack_get_type(): GType <cimport,nodecl> end
global function glib_autoptr_clear_AdwViewStack(_ptr: *AdwViewStack): void <cimport,nodecl> end
global function glib_autoptr_cleanup_AdwViewStack(_ptr: **AdwViewStack): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_AdwViewStack(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_AdwViewStack(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_AdwViewStack(_q: **GQueue): void <cimport,nodecl> end
global function glib_autoptr_clear_AdwViewStackClass(_ptr: *AdwViewStackClass): void <cimport,nodecl> end
global function glib_autoptr_cleanup_AdwViewStackClass(_ptr: **AdwViewStackClass): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_AdwViewStackClass(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_AdwViewStackClass(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_AdwViewStackClass(_q: **GQueue): void <cimport,nodecl> end
global function ADW_VIEW_STACK(ptr: gpointer): *AdwViewStack <cimport,nodecl> end
global function ADW_IS_VIEW_STACK(ptr: gpointer): gboolean <cimport,nodecl> end
global function adw_view_stack_new(): *GtkWidget <cimport,nodecl> end
global function adw_view_stack_add(self: *AdwViewStack, child: *GtkWidget): *AdwViewStackPage <cimport,nodecl> end
global function adw_view_stack_add_named(self: *AdwViewStack, child: *GtkWidget, name: cstring): *AdwViewStackPage <cimport,nodecl> end
global function adw_view_stack_add_titled(self: *AdwViewStack, child: *GtkWidget, name: cstring, title: cstring): *AdwViewStackPage <cimport,nodecl> end
global function adw_view_stack_remove(self: *AdwViewStack, child: *GtkWidget): void <cimport,nodecl> end
global function adw_view_stack_get_page(self: *AdwViewStack, child: *GtkWidget): *AdwViewStackPage <cimport,nodecl> end
global function adw_view_stack_get_child_by_name(self: *AdwViewStack, name: cstring): *GtkWidget <cimport,nodecl> end
global function adw_view_stack_set_visible_child(self: *AdwViewStack, child: *GtkWidget): void <cimport,nodecl> end
global function adw_view_stack_get_visible_child(self: *AdwViewStack): *GtkWidget <cimport,nodecl> end
global function adw_view_stack_set_visible_child_name(self: *AdwViewStack, name: cstring): void <cimport,nodecl> end
global function adw_view_stack_get_visible_child_name(self: *AdwViewStack): cstring <cimport,nodecl> end
global function adw_view_stack_set_hhomogeneous(self: *AdwViewStack, hhomogeneous: gboolean): void <cimport,nodecl> end
global function adw_view_stack_get_hhomogeneous(self: *AdwViewStack): gboolean <cimport,nodecl> end
global function adw_view_stack_set_vhomogeneous(self: *AdwViewStack, vhomogeneous: gboolean): void <cimport,nodecl> end
global function adw_view_stack_get_vhomogeneous(self: *AdwViewStack): gboolean <cimport,nodecl> end
global function adw_view_stack_get_pages(self: *AdwViewStack): *GtkSelectionModel <cimport,nodecl> end
global function adw_view_switcher_get_type(): GType <cimport,nodecl> end
global function glib_autoptr_clear_AdwViewSwitcher(_ptr: *AdwViewSwitcher): void <cimport,nodecl> end
global function glib_autoptr_cleanup_AdwViewSwitcher(_ptr: **AdwViewSwitcher): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_AdwViewSwitcher(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_AdwViewSwitcher(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_AdwViewSwitcher(_q: **GQueue): void <cimport,nodecl> end
global function glib_autoptr_clear_AdwViewSwitcherClass(_ptr: *AdwViewSwitcherClass): void <cimport,nodecl> end
global function glib_autoptr_cleanup_AdwViewSwitcherClass(_ptr: **AdwViewSwitcherClass): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_AdwViewSwitcherClass(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_AdwViewSwitcherClass(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_AdwViewSwitcherClass(_q: **GQueue): void <cimport,nodecl> end
global function ADW_VIEW_SWITCHER(ptr: gpointer): *AdwViewSwitcher <cimport,nodecl> end
global function ADW_IS_VIEW_SWITCHER(ptr: gpointer): gboolean <cimport,nodecl> end
global function adw_view_switcher_new(): *GtkWidget <cimport,nodecl> end
global function adw_view_switcher_get_policy(self: *AdwViewSwitcher): AdwViewSwitcherPolicy <cimport,nodecl> end
global function adw_view_switcher_set_policy(self: *AdwViewSwitcher, policy: AdwViewSwitcherPolicy): void <cimport,nodecl> end
global function adw_view_switcher_get_stack(self: *AdwViewSwitcher): *AdwViewStack <cimport,nodecl> end
global function adw_view_switcher_set_stack(self: *AdwViewSwitcher, stack: *AdwViewStack): void <cimport,nodecl> end
global function adw_view_switcher_bar_get_type(): GType <cimport,nodecl> end
global function glib_autoptr_clear_AdwViewSwitcherBar(_ptr: *AdwViewSwitcherBar): void <cimport,nodecl> end
global function glib_autoptr_cleanup_AdwViewSwitcherBar(_ptr: **AdwViewSwitcherBar): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_AdwViewSwitcherBar(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_AdwViewSwitcherBar(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_AdwViewSwitcherBar(_q: **GQueue): void <cimport,nodecl> end
global function glib_autoptr_clear_AdwViewSwitcherBarClass(_ptr: *AdwViewSwitcherBarClass): void <cimport,nodecl> end
global function glib_autoptr_cleanup_AdwViewSwitcherBarClass(_ptr: **AdwViewSwitcherBarClass): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_AdwViewSwitcherBarClass(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_AdwViewSwitcherBarClass(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_AdwViewSwitcherBarClass(_q: **GQueue): void <cimport,nodecl> end
global function ADW_VIEW_SWITCHER_BAR(ptr: gpointer): *AdwViewSwitcherBar <cimport,nodecl> end
global function ADW_IS_VIEW_SWITCHER_BAR(ptr: gpointer): gboolean <cimport,nodecl> end
global function adw_view_switcher_bar_new(): *GtkWidget <cimport,nodecl> end
global function adw_view_switcher_bar_get_stack(self: *AdwViewSwitcherBar): *AdwViewStack <cimport,nodecl> end
global function adw_view_switcher_bar_set_stack(self: *AdwViewSwitcherBar, stack: *AdwViewStack): void <cimport,nodecl> end
global function adw_view_switcher_bar_get_reveal(self: *AdwViewSwitcherBar): gboolean <cimport,nodecl> end
global function adw_view_switcher_bar_set_reveal(self: *AdwViewSwitcherBar, reveal: gboolean): void <cimport,nodecl> end
global function adw_view_switcher_title_get_type(): GType <cimport,nodecl> end
global function glib_autoptr_clear_AdwViewSwitcherTitle(_ptr: *AdwViewSwitcherTitle): void <cimport,nodecl> end
global function glib_autoptr_cleanup_AdwViewSwitcherTitle(_ptr: **AdwViewSwitcherTitle): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_AdwViewSwitcherTitle(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_AdwViewSwitcherTitle(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_AdwViewSwitcherTitle(_q: **GQueue): void <cimport,nodecl> end
global function glib_autoptr_clear_AdwViewSwitcherTitleClass(_ptr: *AdwViewSwitcherTitleClass): void <cimport,nodecl> end
global function glib_autoptr_cleanup_AdwViewSwitcherTitleClass(_ptr: **AdwViewSwitcherTitleClass): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_AdwViewSwitcherTitleClass(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_AdwViewSwitcherTitleClass(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_AdwViewSwitcherTitleClass(_q: **GQueue): void <cimport,nodecl> end
global function ADW_VIEW_SWITCHER_TITLE(ptr: gpointer): *AdwViewSwitcherTitle <cimport,nodecl> end
global function ADW_IS_VIEW_SWITCHER_TITLE(ptr: gpointer): gboolean <cimport,nodecl> end
global function adw_view_switcher_title_new(): *GtkWidget <cimport,nodecl> end
global function adw_view_switcher_title_get_stack(self: *AdwViewSwitcherTitle): *AdwViewStack <cimport,nodecl> end
global function adw_view_switcher_title_set_stack(self: *AdwViewSwitcherTitle, stack: *AdwViewStack): void <cimport,nodecl> end
global function adw_view_switcher_title_get_title(self: *AdwViewSwitcherTitle): cstring <cimport,nodecl> end
global function adw_view_switcher_title_set_title(self: *AdwViewSwitcherTitle, title: cstring): void <cimport,nodecl> end
global function adw_view_switcher_title_get_subtitle(self: *AdwViewSwitcherTitle): cstring <cimport,nodecl> end
global function adw_view_switcher_title_set_subtitle(self: *AdwViewSwitcherTitle, subtitle: cstring): void <cimport,nodecl> end
global function adw_view_switcher_title_get_view_switcher_enabled(self: *AdwViewSwitcherTitle): gboolean <cimport,nodecl> end
global function adw_view_switcher_title_set_view_switcher_enabled(self: *AdwViewSwitcherTitle, enabled: gboolean): void <cimport,nodecl> end
global function adw_view_switcher_title_get_title_visible(self: *AdwViewSwitcherTitle): gboolean <cimport,nodecl> end
global function adw_window_title_get_type(): GType <cimport,nodecl> end
global function glib_autoptr_clear_AdwWindowTitle(_ptr: *AdwWindowTitle): void <cimport,nodecl> end
global function glib_autoptr_cleanup_AdwWindowTitle(_ptr: **AdwWindowTitle): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_AdwWindowTitle(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_AdwWindowTitle(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_AdwWindowTitle(_q: **GQueue): void <cimport,nodecl> end
global function glib_autoptr_clear_AdwWindowTitleClass(_ptr: *AdwWindowTitleClass): void <cimport,nodecl> end
global function glib_autoptr_cleanup_AdwWindowTitleClass(_ptr: **AdwWindowTitleClass): void <cimport,nodecl> end
global function glib_listautoptr_cleanup_AdwWindowTitleClass(_l: **GList): void <cimport,nodecl> end
global function glib_slistautoptr_cleanup_AdwWindowTitleClass(_l: **GSList): void <cimport,nodecl> end
global function glib_queueautoptr_cleanup_AdwWindowTitleClass(_q: **GQueue): void <cimport,nodecl> end
global function ADW_WINDOW_TITLE(ptr: gpointer): *AdwWindowTitle <cimport,nodecl> end
global function ADW_IS_WINDOW_TITLE(ptr: gpointer): gboolean <cimport,nodecl> end
global function adw_window_title_new(title: cstring, subtitle: cstring): *GtkWidget <cimport,nodecl> end
global function adw_window_title_get_title(self: *AdwWindowTitle): cstring <cimport,nodecl> end
global function adw_window_title_set_title(self: *AdwWindowTitle, title: cstring): void <cimport,nodecl> end
global function adw_window_title_get_subtitle(self: *AdwWindowTitle): cstring <cimport,nodecl> end
global function adw_window_title_set_subtitle(self: *AdwWindowTitle, subtitle: cstring): void <cimport,nodecl> end
global G_ANALYZER_ANALYZING: cint <comptime> = 0
global FALSE: cint <comptime> = 0
global MB_LEN_MAX: cint <comptime> = 16
global NGROUPS_MAX: cint <comptime> = 65536
global MAX_CANON: cint <comptime> = 255
global MAX_INPUT: cint <comptime> = 255
global NAME_MAX: cint <comptime> = 255
global PATH_MAX: cint <comptime> = 4096
global PIPE_BUF: cint <comptime> = 4096
global XATTR_NAME_MAX: cint <comptime> = 255
global XATTR_SIZE_MAX: cint <comptime> = 65536
global XATTR_LIST_MAX: cint <comptime> = 65536
global RTSIG_MAX: cint <comptime> = 32
global PTHREAD_KEYS_MAX: cint <comptime> = 1024
global PTHREAD_DESTRUCTOR_ITERATIONS: cint <comptime> = 4
global AIO_PRIO_DELTA_MAX: cint <comptime> = 20
global PTHREAD_STACK_MIN: cint <comptime> = 16384
global DELAYTIMER_MAX: cint <comptime> = 2147483647
global TTY_NAME_MAX: cint <comptime> = 32
global LOGIN_NAME_MAX: cint <comptime> = 256
global HOST_NAME_MAX: cint <comptime> = 64
global MQ_PRIO_MAX: cint <comptime> = 32768
global SEM_VALUE_MAX: cint <comptime> = 2147483647
global BC_BASE_MAX: cint <comptime> = 99
global BC_DIM_MAX: cint <comptime> = 2048
global BC_SCALE_MAX: cint <comptime> = 99
global BC_STRING_MAX: cint <comptime> = 1000
global COLL_WEIGHTS_MAX: cint <comptime> = 255
global EXPR_NEST_MAX: cint <comptime> = 32
global LINE_MAX: cint <comptime> = 2048
global CHARCLASS_NAME_MAX: cint <comptime> = 2048
global RE_DUP_MAX: cint <comptime> = 32767
global CHAR_BIT: cint <comptime> = 8
global SCHAR_MAX: cint <comptime> = 127
global UCHAR_MAX: cint <comptime> = 255
global CHAR_MAX: cint <comptime> = 127
global SHRT_MAX: cint <comptime> = 32767
global USHRT_MAX: cint <comptime> = 65535
global INT_MAX: cint <comptime> = 2147483647
global LONG_MAX: clong <comptime> = 9223372036854775807
global LLONG_MIN: clonglong <comptime> = -9223372036854775808
global LLONG_MAX: clonglong <comptime> = 9223372036854775807
global FLT_RADIX: cint <comptime> = 2
global FLT_MANT_DIG: cint <comptime> = 24
global DBL_MANT_DIG: cint <comptime> = 53
global LDBL_MANT_DIG: cint <comptime> = 64
global FLT_DIG: cint <comptime> = 6
global DBL_DIG: cint <comptime> = 15
global LDBL_DIG: cint <comptime> = 18
global FLT_MIN_EXP: cint <comptime> = -125
global DBL_MIN_EXP: cint <comptime> = -1021
global LDBL_MIN_EXP: cint <comptime> = -16381
global FLT_MIN_10_EXP: cint <comptime> = -37
global DBL_MIN_10_EXP: cint <comptime> = -307
global LDBL_MIN_10_EXP: cint <comptime> = -4931
global FLT_MAX_EXP: cint <comptime> = 128
global DBL_MAX_EXP: cint <comptime> = 1024
global LDBL_MAX_EXP: cint <comptime> = 16384
global FLT_MAX_10_EXP: cint <comptime> = 38
global DBL_MAX_10_EXP: cint <comptime> = 308
global LDBL_MAX_10_EXP: cint <comptime> = 4932
global FLT_MAX: float32 <comptime> = 3.4028234663852886e+38
global DBL_MAX: float64 <cimport,nodecl,const>
global LDBL_MAX: clongdouble <cimport,nodecl,const>
global FLT_EPSILON: float32 <comptime> = 1.1920928955078125e-7
global DBL_EPSILON: float64 <cimport,nodecl,const>
global LDBL_EPSILON: clongdouble <cimport,nodecl,const>
global FLT_MIN: float32 <comptime> = 1.1754943508222875e-38
global DBL_MIN: float64 <cimport,nodecl,const>
global LDBL_MIN: clongdouble <cimport,nodecl,const>
global FLT_ROUNDS: cint <comptime> = 1
global FLT_EVAL_METHOD: cint <comptime> = 0
global DECIMAL_DIG: cint <comptime> = 21
global FLT_DECIMAL_DIG: cint <comptime> = 9
global DBL_DECIMAL_DIG: cint <comptime> = 17
global LDBL_DECIMAL_DIG: cint <comptime> = 21
global FLT_HAS_SUBNORM: cint <comptime> = 1
global DBL_HAS_SUBNORM: cint <comptime> = 1
global LDBL_HAS_SUBNORM: cint <comptime> = 1
global FLT_TRUE_MIN: float32 <comptime> = 1.401298464324817e-45
global DBL_TRUE_MIN: float64 <cimport,nodecl,const>
global LDBL_TRUE_MIN: clongdouble <cimport,nodecl,const>
global G_MINFLOAT: float32 <comptime> = 1.1754943508222875e-38
global G_MAXFLOAT: float32 <comptime> = 3.4028234663852886e+38
global G_MINDOUBLE: float64 <cimport,nodecl,const>
global G_MAXDOUBLE: float64 <cimport,nodecl,const>
global G_MAXSHORT: cint <comptime> = 32767
global G_MAXUSHORT: cint <comptime> = 65535
global G_MAXINT: cint <comptime> = 2147483647
global G_MAXLONG: clong <comptime> = 9223372036854775807
global G_GINT16_MODIFIER: cstring <comptime> = "h"
global G_GINT16_FORMAT: cstring <comptime> = "hi"
global G_GUINT16_FORMAT: cstring <comptime> = "hu"
global G_GINT32_MODIFIER: cstring <comptime> = ""
global G_GINT32_FORMAT: cstring <comptime> = "i"
global G_GUINT32_FORMAT: cstring <comptime> = "u"
global G_HAVE_GINT64: cint <comptime> = 1
global G_GINT64_MODIFIER: cstring <comptime> = "l"
global G_GINT64_FORMAT: cstring <comptime> = "li"
global G_GUINT64_FORMAT: cstring <comptime> = "lu"
global GLIB_SIZEOF_VOID_P: cint <comptime> = 8
global GLIB_SIZEOF_LONG: cint <comptime> = 8
global GLIB_SIZEOF_SIZE_T: cint <comptime> = 8
global GLIB_SIZEOF_SSIZE_T: cint <comptime> = 8
global G_GSIZE_MODIFIER: cstring <comptime> = "l"
global G_GSSIZE_MODIFIER: cstring <comptime> = "l"
global G_GSIZE_FORMAT: cstring <comptime> = "lu"
global G_GSSIZE_FORMAT: cstring <comptime> = "li"
global G_MAXSSIZE: clong <comptime> = 9223372036854775807
global G_GOFFSET_MODIFIER: cstring <comptime> = "l"
global G_GOFFSET_FORMAT: cstring <comptime> = "li"
global G_POLLFD_FORMAT: cstring <comptime> = "%d"
global G_GINTPTR_MODIFIER: cstring <comptime> = "l"
global G_GINTPTR_FORMAT: cstring <comptime> = "li"
global G_GUINTPTR_FORMAT: cstring <comptime> = "lu"
global GLIB_MAJOR_VERSION: cint <comptime> = 2
global GLIB_MINOR_VERSION: cint <comptime> = 70
global GLIB_MICRO_VERSION: cint <comptime> = 4
global G_VA_COPY_AS_ARRAY: cint <comptime> = 1
global G_HAVE_ISO_VARARGS: cint <comptime> = 1
global G_HAVE_GROWING_STACK: cint <comptime> = 0
global G_HAVE_GNUC_VISIBILITY: cint <comptime> = 1
global G_HAVE_GNUC_VARARGS: cint <comptime> = 1
global G_MODULE_SUFFIX: cstring <comptime> = "so"
global G_PID_FORMAT: cstring <comptime> = "i"
global GLIB_SYSDEF_AF_UNIX: cint <comptime> = 1
global GLIB_SYSDEF_AF_INET: cint <comptime> = 2
global GLIB_SYSDEF_AF_INET6: cint <comptime> = 10
global GLIB_SYSDEF_MSG_OOB: cint <comptime> = 1
global GLIB_SYSDEF_MSG_PEEK: cint <comptime> = 2
global GLIB_SYSDEF_MSG_DONTROUTE: cint <comptime> = 4
global G_DIR_SEPARATOR: cchar <comptime> = 47
global G_DIR_SEPARATOR_S: cstring <comptime> = "/"
global G_SEARCHPATH_SEPARATOR: cchar <comptime> = 58
global G_SEARCHPATH_SEPARATOR_S: cstring <comptime> = ":"
global CLOCKS_PER_SEC: cclock_t <comptime> = 1000000
global CLOCK_REALTIME: cint <comptime> = 0
global CLOCK_MONOTONIC: cint <comptime> = 1
global CLOCK_PROCESS_CPUTIME_ID: cint <comptime> = 2
global CLOCK_THREAD_CPUTIME_ID: cint <comptime> = 3
global CLOCK_MONOTONIC_RAW: cint <comptime> = 4
global CLOCK_REALTIME_COARSE: cint <comptime> = 5
global CLOCK_MONOTONIC_COARSE: cint <comptime> = 6
global CLOCK_BOOTTIME: cint <comptime> = 7
global CLOCK_REALTIME_ALARM: cint <comptime> = 8
global CLOCK_BOOTTIME_ALARM: cint <comptime> = 9
global CLOCK_TAI: cint <comptime> = 11
global TIMER_ABSTIME: cint <comptime> = 1
global TIME_UTC: cint <comptime> = 1
global G_MAXINT8: gint8 <comptime> = 127
global G_MAXUINT8: guint8 <comptime> = 255
global G_MAXINT16: gint16 <comptime> = 32767
global G_MAXUINT16: guint16 <comptime> = 65535
global G_MAXINT32: gint32 <comptime> = 2147483647
global G_MAXUINT32: guint32 <comptime> = 4294967295
global G_E: float64 <comptime> = 2.718281828459045
global G_LN2: float64 <comptime> = 0.6931471805599453
global G_LN10: float64 <comptime> = 2.302585092994046
global G_PI: float64 <comptime> = 3.141592653589793
global G_PI_2: float64 <comptime> = 1.5707963267948966
global G_PI_4: float64 <comptime> = 0.7853981633974483
global G_SQRT2: float64 <comptime> = 1.4142135623730951
global G_LITTLE_ENDIAN: cint <comptime> = 1234
global G_BIG_ENDIAN: cint <comptime> = 4321
global G_PDP_ENDIAN: cint <comptime> = 3412
global G_IEEE754_FLOAT_BIAS: cint <comptime> = 127
global G_IEEE754_DOUBLE_BIAS: cint <comptime> = 1023
global G_LOG_2_BASE_10: float64 <comptime> = 0.3010299956639812
global WNOHANG: cint <comptime> = 1
global WUNTRACED: cint <comptime> = 2
global WSTOPPED: cint <comptime> = 2
global WEXITED: cint <comptime> = 4
global WCONTINUED: cint <comptime> = 8
global WNOWAIT: cint <comptime> = 16777216
global RAND_MAX: cint <comptime> = 2147483647
global EXIT_FAILURE: cint <comptime> = 1
global EXIT_SUCCESS: cint <comptime> = 0
global MB_CUR_MAX: csize <cimport,nodecl,const>
global LITTLE_ENDIAN: cint <comptime> = 1234
global BIG_ENDIAN: cint <comptime> = 4321
global PDP_ENDIAN: cint <comptime> = 3412
global BYTE_ORDER: cint <comptime> = 1234
global FD_SETSIZE: cint <comptime> = 1024
global G_THREAD_ERROR: GQuark <cimport,nodecl,const>
global SIG_ERR: function(a1: cint): void <cimport,nodecl,const>
global SIG_DFL: function(a1: cint): void <cimport,nodecl,const>
global SIG_IGN: function(a1: cint): void <cimport,nodecl,const>
global SIGINT: cint <comptime> = 2
global SIGILL: cint <comptime> = 4
global SIGABRT: cint <comptime> = 6
global SIGFPE: cint <comptime> = 8
global SIGSEGV: cint <comptime> = 11
global SIGTERM: cint <comptime> = 15
global SIGHUP: cint <comptime> = 1
global SIGQUIT: cint <comptime> = 3
global SIGTRAP: cint <comptime> = 5
global SIGKILL: cint <comptime> = 9
global SIGPIPE: cint <comptime> = 13
global SIGALRM: cint <comptime> = 14
global SIGSTKFLT: cint <comptime> = 16
global SIGPWR: cint <comptime> = 30
global SIGBUS: cint <comptime> = 7
global SIGSYS: cint <comptime> = 31
global SIGURG: cint <comptime> = 23
global SIGSTOP: cint <comptime> = 19
global SIGTSTP: cint <comptime> = 20
global SIGCONT: cint <comptime> = 18
global SIGCHLD: cint <comptime> = 17
global SIGTTIN: cint <comptime> = 21
global SIGTTOU: cint <comptime> = 22
global SIGPOLL: cint <comptime> = 29
global SIGXFSZ: cint <comptime> = 25
global SIGXCPU: cint <comptime> = 24
global SIGVTALRM: cint <comptime> = 26
global SIGPROF: cint <comptime> = 27
global SIGUSR1: cint <comptime> = 10
global SIGUSR2: cint <comptime> = 12
global SIGWINCH: cint <comptime> = 28
global SIGIOT: cint <comptime> = 6
global NSIG: cint <comptime> = 65
global SA_NOCLDSTOP: cint <comptime> = 1
global SA_NOCLDWAIT: cint <comptime> = 2
global SA_SIGINFO: cint <comptime> = 4
global SA_ONSTACK: cint <comptime> = 134217728
global SA_RESTART: cint <comptime> = 268435456
global SA_NODEFER: cint <comptime> = 1073741824
global SA_RESETHAND: cuint <comptime> = 2147483648
global SA_INTERRUPT: cint <comptime> = 536870912
global SA_NOMASK: cint <comptime> = 1073741824
global SA_ONESHOT: cuint <comptime> = 2147483648
global SA_STACK: cint <comptime> = 134217728
global SIG_BLOCK: cint <comptime> = 0
global SIG_UNBLOCK: cint <comptime> = 1
global SIG_SETMASK: cint <comptime> = 2
global FP_XSTATE_MAGIC1: cuint <comptime> = 1179670611
global FP_XSTATE_MAGIC2: cuint <comptime> = 1179670597
global FP_XSTATE_MAGIC2_SIZE: cuint <cimport,nodecl,const>
global NGREG: cint <comptime> = 23
global MINSIGSTKSZ: cint <comptime> = 2048
global SIGSTKSZ: cint <comptime> = 8192
global SIGRTMIN: cint <cimport,nodecl,const>
global SIGRTMAX: cint <cimport,nodecl,const>
global G_BOOKMARK_FILE_ERROR: GQuark <cimport,nodecl,const>
global G_CONVERT_ERROR: GQuark <cimport,nodecl,const>
global G_DATALIST_FLAGS_MASK: cint <comptime> = 3
global G_DATE_BAD_JULIAN: cuint <comptime> = 0
global G_DATE_BAD_DAY: cuint <comptime> = 0
global G_DATE_BAD_YEAR: cuint <comptime> = 0
global MAXNAMLEN: cint <comptime> = 255
global G_FILE_ERROR: GQuark <cimport,nodecl,const>
global G_MEM_ALIGN: cint <comptime> = 8
global function g_list_free1(list: *GList): void <cimport,nodecl> end
global G_HOOK_FLAG_USER_SHIFT: cint <comptime> = 4
global function g_slist_free1(list: *GSList): void <cimport,nodecl> end
global G_PRIORITY_HIGH: cint <comptime> = -100
global G_PRIORITY_DEFAULT: cint <comptime> = 0
global G_PRIORITY_HIGH_IDLE: cint <comptime> = 100
global G_PRIORITY_DEFAULT_IDLE: cint <comptime> = 200
global G_PRIORITY_LOW: cint <comptime> = 300
global G_SOURCE_REMOVE: cint <comptime> = 0
global G_UNICHAR_MAX_DECOMPOSITION_LENGTH: cint <comptime> = 18
global G_IO_CHANNEL_ERROR: GQuark <cimport,nodecl,const>
global G_KEY_FILE_ERROR: GQuark <cimport,nodecl,const>
global G_KEY_FILE_DESKTOP_GROUP: cstring <comptime> = "Desktop Entry"
global G_KEY_FILE_DESKTOP_KEY_TYPE: cstring <comptime> = "Type"
global G_KEY_FILE_DESKTOP_KEY_VERSION: cstring <comptime> = "Version"
global G_KEY_FILE_DESKTOP_KEY_NAME: cstring <comptime> = "Name"
global G_KEY_FILE_DESKTOP_KEY_GENERIC_NAME: cstring <comptime> = "GenericName"
global G_KEY_FILE_DESKTOP_KEY_NO_DISPLAY: cstring <comptime> = "NoDisplay"
global G_KEY_FILE_DESKTOP_KEY_COMMENT: cstring <comptime> = "Comment"
global G_KEY_FILE_DESKTOP_KEY_ICON: cstring <comptime> = "Icon"
global G_KEY_FILE_DESKTOP_KEY_HIDDEN: cstring <comptime> = "Hidden"
global G_KEY_FILE_DESKTOP_KEY_ONLY_SHOW_IN: cstring <comptime> = "OnlyShowIn"
global G_KEY_FILE_DESKTOP_KEY_NOT_SHOW_IN: cstring <comptime> = "NotShowIn"
global G_KEY_FILE_DESKTOP_KEY_TRY_EXEC: cstring <comptime> = "TryExec"
global G_KEY_FILE_DESKTOP_KEY_EXEC: cstring <comptime> = "Exec"
global G_KEY_FILE_DESKTOP_KEY_PATH: cstring <comptime> = "Path"
global G_KEY_FILE_DESKTOP_KEY_TERMINAL: cstring <comptime> = "Terminal"
global G_KEY_FILE_DESKTOP_KEY_MIME_TYPE: cstring <comptime> = "MimeType"
global G_KEY_FILE_DESKTOP_KEY_CATEGORIES: cstring <comptime> = "Categories"
global G_KEY_FILE_DESKTOP_KEY_STARTUP_NOTIFY: cstring <comptime> = "StartupNotify"
global G_KEY_FILE_DESKTOP_KEY_STARTUP_WM_CLASS: cstring <comptime> = "StartupWMClass"
global G_KEY_FILE_DESKTOP_KEY_URL: cstring <comptime> = "URL"
global G_KEY_FILE_DESKTOP_KEY_DBUS_ACTIVATABLE: cstring <comptime> = "DBusActivatable"
global G_KEY_FILE_DESKTOP_KEY_ACTIONS: cstring <comptime> = "Actions"
global G_KEY_FILE_DESKTOP_TYPE_APPLICATION: cstring <comptime> = "Application"
global G_KEY_FILE_DESKTOP_TYPE_LINK: cstring <comptime> = "Link"
global G_KEY_FILE_DESKTOP_TYPE_DIRECTORY: cstring <comptime> = "Directory"
global G_MARKUP_ERROR: GQuark <cimport,nodecl,const>
global G_VARIANT_TYPE_BOOLEAN: *GVariantType <cimport,nodecl,const>
global G_VARIANT_TYPE_BYTE: *GVariantType <cimport,nodecl,const>
global G_VARIANT_TYPE_INT16: *GVariantType <cimport,nodecl,const>
global G_VARIANT_TYPE_UINT16: *GVariantType <cimport,nodecl,const>
global G_VARIANT_TYPE_INT32: *GVariantType <cimport,nodecl,const>
global G_VARIANT_TYPE_UINT32: *GVariantType <cimport,nodecl,const>
global G_VARIANT_TYPE_INT64: *GVariantType <cimport,nodecl,const>
global G_VARIANT_TYPE_UINT64: *GVariantType <cimport,nodecl,const>
global G_VARIANT_TYPE_DOUBLE: *GVariantType <cimport,nodecl,const>
global G_VARIANT_TYPE_STRING: *GVariantType <cimport,nodecl,const>
global G_VARIANT_TYPE_OBJECT_PATH: *GVariantType <cimport,nodecl,const>
global G_VARIANT_TYPE_SIGNATURE: *GVariantType <cimport,nodecl,const>
global G_VARIANT_TYPE_VARIANT: *GVariantType <cimport,nodecl,const>
global G_VARIANT_TYPE_HANDLE: *GVariantType <cimport,nodecl,const>
global G_VARIANT_TYPE_UNIT: *GVariantType <cimport,nodecl,const>
global G_VARIANT_TYPE_ANY: *GVariantType <cimport,nodecl,const>
global G_VARIANT_TYPE_BASIC: *GVariantType <cimport,nodecl,const>
global G_VARIANT_TYPE_MAYBE: *GVariantType <cimport,nodecl,const>
global G_VARIANT_TYPE_ARRAY: *GVariantType <cimport,nodecl,const>
global G_VARIANT_TYPE_TUPLE: *GVariantType <cimport,nodecl,const>
global G_VARIANT_TYPE_DICT_ENTRY: *GVariantType <cimport,nodecl,const>
global G_VARIANT_TYPE_DICTIONARY: *GVariantType <cimport,nodecl,const>
global G_VARIANT_TYPE_STRING_ARRAY: *GVariantType <cimport,nodecl,const>
global G_VARIANT_TYPE_OBJECT_PATH_ARRAY: *GVariantType <cimport,nodecl,const>
global G_VARIANT_TYPE_BYTESTRING: *GVariantType <cimport,nodecl,const>
global G_VARIANT_TYPE_BYTESTRING_ARRAY: *GVariantType <cimport,nodecl,const>
global G_VARIANT_TYPE_VARDICT: *GVariantType <cimport,nodecl,const>
global G_VARIANT_PARSE_ERROR: GQuark <cimport,nodecl,const>
global G_LOG_LEVEL_USER_SHIFT: cint <comptime> = 8
global G_LOG_FATAL_MASK: cint <comptime> = 5
global G_LOG_DOMAIN: *gchar <cimport,nodecl,const>
global G_OPTION_ERROR: GQuark <cimport,nodecl,const>
global G_OPTION_REMAINING: cstring <comptime> = ""
global G_REGEX_ERROR: GQuark <cimport,nodecl,const>
global G_CSET_A_2_Z: cstring <comptime> = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
global G_CSET_a_2_z: cstring <comptime> = "abcdefghijklmnopqrstuvwxyz"
global G_CSET_DIGITS: cstring <comptime> = "0123456789"
global G_CSET_LATINC: cstring <comptime> = "\192\193\194\195\196\197\198"
global G_CSET_LATINS: cstring <comptime> = "\223\224\225\226\227\228\229\230"
global G_SHELL_ERROR: GQuark <cimport,nodecl,const>
global G_SPAWN_ERROR: GQuark <cimport,nodecl,const>
global G_SPAWN_EXIT_ERROR: GQuark <cimport,nodecl,const>
global G_STR_DELIMITERS: cstring <comptime> = "_-|> <."
global G_ASCII_DTOSTR_BUF_SIZE: cint <comptime> = 39
global G_NUMBER_PARSER_ERROR: GQuark <cimport,nodecl,const>
global EPERM: cint <comptime> = 1
global ENOENT: cint <comptime> = 2
global ESRCH: cint <comptime> = 3
global EINTR: cint <comptime> = 4
global EIO: cint <comptime> = 5
global ENXIO: cint <comptime> = 6
global E2BIG: cint <comptime> = 7
global ENOEXEC: cint <comptime> = 8
global EBADF: cint <comptime> = 9
global ECHILD: cint <comptime> = 10
global EAGAIN: cint <comptime> = 11
global ENOMEM: cint <comptime> = 12
global EACCES: cint <comptime> = 13
global EFAULT: cint <comptime> = 14
global ENOTBLK: cint <comptime> = 15
global EBUSY: cint <comptime> = 16
global EEXIST: cint <comptime> = 17
global EXDEV: cint <comptime> = 18
global ENODEV: cint <comptime> = 19
global ENOTDIR: cint <comptime> = 20
global EISDIR: cint <comptime> = 21
global EINVAL: cint <comptime> = 22
global ENFILE: cint <comptime> = 23
global EMFILE: cint <comptime> = 24
global ENOTTY: cint <comptime> = 25
global ETXTBSY: cint <comptime> = 26
global EFBIG: cint <comptime> = 27
global ENOSPC: cint <comptime> = 28
global ESPIPE: cint <comptime> = 29
global EROFS: cint <comptime> = 30
global EMLINK: cint <comptime> = 31
global EPIPE: cint <comptime> = 32
global EDOM: cint <comptime> = 33
global ERANGE: cint <comptime> = 34
global EDEADLK: cint <comptime> = 35
global ENAMETOOLONG: cint <comptime> = 36
global ENOLCK: cint <comptime> = 37
global ENOSYS: cint <comptime> = 38
global ENOTEMPTY: cint <comptime> = 39
global ELOOP: cint <comptime> = 40
global EWOULDBLOCK: cint <comptime> = 11
global ENOMSG: cint <comptime> = 42
global EIDRM: cint <comptime> = 43
global ECHRNG: cint <comptime> = 44
global EL2NSYNC: cint <comptime> = 45
global EL3HLT: cint <comptime> = 46
global EL3RST: cint <comptime> = 47
global ELNRNG: cint <comptime> = 48
global EUNATCH: cint <comptime> = 49
global ENOCSI: cint <comptime> = 50
global EL2HLT: cint <comptime> = 51
global EBADE: cint <comptime> = 52
global EBADR: cint <comptime> = 53
global EXFULL: cint <comptime> = 54
global ENOANO: cint <comptime> = 55
global EBADRQC: cint <comptime> = 56
global EBADSLT: cint <comptime> = 57
global EDEADLOCK: cint <comptime> = 35
global EBFONT: cint <comptime> = 59
global ENOSTR: cint <comptime> = 60
global ENODATA: cint <comptime> = 61
global ETIME: cint <comptime> = 62
global ENOSR: cint <comptime> = 63
global ENONET: cint <comptime> = 64
global ENOPKG: cint <comptime> = 65
global EREMOTE: cint <comptime> = 66
global ENOLINK: cint <comptime> = 67
global EADV: cint <comptime> = 68
global ESRMNT: cint <comptime> = 69
global ECOMM: cint <comptime> = 70
global EPROTO: cint <comptime> = 71
global EMULTIHOP: cint <comptime> = 72
global EDOTDOT: cint <comptime> = 73
global EBADMSG: cint <comptime> = 74
global EOVERFLOW: cint <comptime> = 75
global ENOTUNIQ: cint <comptime> = 76
global EBADFD: cint <comptime> = 77
global EREMCHG: cint <comptime> = 78
global ELIBACC: cint <comptime> = 79
global ELIBBAD: cint <comptime> = 80
global ELIBSCN: cint <comptime> = 81
global ELIBMAX: cint <comptime> = 82
global ELIBEXEC: cint <comptime> = 83
global EILSEQ: cint <comptime> = 84
global ERESTART: cint <comptime> = 85
global ESTRPIPE: cint <comptime> = 86
global EUSERS: cint <comptime> = 87
global ENOTSOCK: cint <comptime> = 88
global EDESTADDRREQ: cint <comptime> = 89
global EMSGSIZE: cint <comptime> = 90
global EPROTOTYPE: cint <comptime> = 91
global ENOPROTOOPT: cint <comptime> = 92
global EPROTONOSUPPORT: cint <comptime> = 93
global ESOCKTNOSUPPORT: cint <comptime> = 94
global EOPNOTSUPP: cint <comptime> = 95
global EPFNOSUPPORT: cint <comptime> = 96
global EAFNOSUPPORT: cint <comptime> = 97
global EADDRINUSE: cint <comptime> = 98
global EADDRNOTAVAIL: cint <comptime> = 99
global ENETDOWN: cint <comptime> = 100
global ENETUNREACH: cint <comptime> = 101
global ENETRESET: cint <comptime> = 102
global ECONNABORTED: cint <comptime> = 103
global ECONNRESET: cint <comptime> = 104
global ENOBUFS: cint <comptime> = 105
global EISCONN: cint <comptime> = 106
global ENOTCONN: cint <comptime> = 107
global ESHUTDOWN: cint <comptime> = 108
global ETOOMANYREFS: cint <comptime> = 109
global ETIMEDOUT: cint <comptime> = 110
global ECONNREFUSED: cint <comptime> = 111
global EHOSTDOWN: cint <comptime> = 112
global EHOSTUNREACH: cint <comptime> = 113
global EALREADY: cint <comptime> = 114
global EINPROGRESS: cint <comptime> = 115
global ESTALE: cint <comptime> = 116
global EUCLEAN: cint <comptime> = 117
global ENOTNAM: cint <comptime> = 118
global ENAVAIL: cint <comptime> = 119
global EISNAM: cint <comptime> = 120
global EREMOTEIO: cint <comptime> = 121
global EDQUOT: cint <comptime> = 122
global ENOMEDIUM: cint <comptime> = 123
global EMEDIUMTYPE: cint <comptime> = 124
global ECANCELED: cint <comptime> = 125
global ENOKEY: cint <comptime> = 126
global EKEYEXPIRED: cint <comptime> = 127
global EKEYREVOKED: cint <comptime> = 128
global EKEYREJECTED: cint <comptime> = 129
global EOWNERDEAD: cint <comptime> = 130
global ENOTRECOVERABLE: cint <comptime> = 131
global ERFKILL: cint <comptime> = 132
global EHWPOISON: cint <comptime> = 133
global ENOTSUP: cint <comptime> = 95
global errno: cint <cimport,nodecl>
global G_TEST_OPTION_ISOLATE_DIRS: cstring <comptime> = "isolate_dirs"
global G_USEC_PER_SEC: cint <comptime> = 1000000
global G_URI_RESERVED_CHARS_GENERIC_DELIMITERS: cstring <comptime> = ":/?#[]@"
global G_URI_RESERVED_CHARS_SUBCOMPONENT_DELIMITERS: cstring <comptime> = "!$&'()*+,;="
global G_ALLOC_ONLY: cint <comptime> = 1
global G_ALLOC_AND_FREE: cint <comptime> = 2
global G_ALLOCATOR_LIST: cint <comptime> = 1
global G_ALLOCATOR_SLIST: cint <comptime> = 2
global G_ALLOCATOR_NODE: cint <comptime> = 3
global SCHED_OTHER: cint <comptime> = 0
global SCHED_FIFO: cint <comptime> = 1
global SCHED_RR: cint <comptime> = 2
global PTHREAD_CANCELED: pointer <cimport,nodecl,const>
global PTHREAD_ONCE_INIT: cint <comptime> = 0
global PTHREAD_BARRIER_SERIAL_THREAD: cint <comptime> = -1
global GDK_MAJOR_VERSION: cint <comptime> = 4
global GDK_MINOR_VERSION: cint <comptime> = 6
global GDK_MICRO_VERSION: cint <comptime> = 1
global G_TYPE_FUNDAMENTAL_SHIFT: cint <comptime> = 2
global G_TYPE_RESERVED_GLIB_FIRST: cint <comptime> = 22
global G_TYPE_RESERVED_GLIB_LAST: cint <comptime> = 31
global G_TYPE_RESERVED_BSE_FIRST: cint <comptime> = 32
global G_TYPE_RESERVED_BSE_LAST: cint <comptime> = 48
global G_TYPE_RESERVED_USER_FIRST: cint <comptime> = 49
global G_TYPE_FLAG_RESERVED_ID_BIT: GType <comptime> = 1
global G_VALUE_NOCOPY_CONTENTS: cint <comptime> = 134217728
global G_PARAM_STATIC_STRINGS: cint <comptime> = 224
global G_PARAM_MASK: cint <comptime> = 255
global G_PARAM_USER_SHIFT: cint <comptime> = 8
global function g_cclosure_marshal_BOOL__FLAGS(closure: *GClosure, return_value: *GValue, n_param_values: guint, param_values: *GValue, invocation_hint: gpointer, marshal_data: gpointer): void <cimport,nodecl> end
global function g_cclosure_marshal_BOOL__BOXED_BOXED(closure: *GClosure, return_value: *GValue, n_param_values: guint, param_values: *GValue, invocation_hint: gpointer, marshal_data: gpointer): void <cimport,nodecl> end
global G_SIGNAL_FLAGS_MASK: cint <comptime> = 511
global G_SIGNAL_MATCH_MASK: cint <comptime> = 63
global G_TYPE_DATE: GType <cimport,nodecl,const>
global G_TYPE_STRV: GType <cimport,nodecl,const>
global G_TYPE_GSTRING: GType <cimport,nodecl,const>
global G_TYPE_HASH_TABLE: GType <cimport,nodecl,const>
global G_TYPE_REGEX: GType <cimport,nodecl,const>
global G_TYPE_MATCH_INFO: GType <cimport,nodecl,const>
global G_TYPE_ARRAY: GType <cimport,nodecl,const>
global G_TYPE_BYTE_ARRAY: GType <cimport,nodecl,const>
global G_TYPE_PTR_ARRAY: GType <cimport,nodecl,const>
global G_TYPE_BYTES: GType <cimport,nodecl,const>
global G_TYPE_VARIANT_TYPE: GType <cimport,nodecl,const>
global G_TYPE_ERROR: GType <cimport,nodecl,const>
global G_TYPE_DATE_TIME: GType <cimport,nodecl,const>
global G_TYPE_TIME_ZONE: GType <cimport,nodecl,const>
global G_TYPE_IO_CHANNEL: GType <cimport,nodecl,const>
global G_TYPE_IO_CONDITION: GType <cimport,nodecl,const>
global G_TYPE_VARIANT_BUILDER: GType <cimport,nodecl,const>
global G_TYPE_VARIANT_DICT: GType <cimport,nodecl,const>
global G_TYPE_MAIN_LOOP: GType <cimport,nodecl,const>
global G_TYPE_MAIN_CONTEXT: GType <cimport,nodecl,const>
global G_TYPE_SOURCE: GType <cimport,nodecl,const>
global G_TYPE_POLLFD: GType <cimport,nodecl,const>
global G_TYPE_MARKUP_PARSE_CONTEXT: GType <cimport,nodecl,const>
global G_TYPE_KEY_FILE: GType <cimport,nodecl,const>
global G_TYPE_MAPPED_FILE: GType <cimport,nodecl,const>
global G_TYPE_THREAD: GType <cimport,nodecl,const>
global G_TYPE_CHECKSUM: GType <cimport,nodecl,const>
global G_TYPE_OPTION_GROUP: GType <cimport,nodecl,const>
global G_TYPE_URI: GType <cimport,nodecl,const>
global G_TYPE_TREE: GType <cimport,nodecl,const>
global G_TYPE_PATTERN_SPEC: GType <cimport,nodecl,const>
global G_TYPE_CLOSURE: GType <cimport,nodecl,const>
global G_TYPE_VALUE: GType <cimport,nodecl,const>
global G_TYPE_INITIALLY_UNOWNED: GType <cimport,nodecl,const>
global G_TYPE_BINDING_FLAGS: GType <cimport,nodecl,const>
global G_TYPE_BINDING: GType <cimport,nodecl,const>
global G_TYPE_UNICODE_TYPE: GType <cimport,nodecl,const>
global G_TYPE_UNICODE_BREAK_TYPE: GType <cimport,nodecl,const>
global G_TYPE_UNICODE_SCRIPT: GType <cimport,nodecl,const>
global G_TYPE_NORMALIZE_MODE: GType <cimport,nodecl,const>
global G_TYPE_TYPE_MODULE: GType <cimport,nodecl,const>
global G_TYPE_TYPE_PLUGIN: GType <cimport,nodecl,const>
global G_TYPE_GTYPE: GType <cimport,nodecl,const>
global GTK_TYPE_CSS_PARSER_ERROR: GType <cimport,nodecl,const>
global GTK_TYPE_CSS_PARSER_WARNING: GType <cimport,nodecl,const>
global GTK_CSS_PARSER_ERROR: GQuark <cimport,nodecl,const>
global GTK_CSS_PARSER_WARNING: GQuark <cimport,nodecl,const>
global G_TYPE_ACTION: GType <cimport,nodecl,const>
global G_TYPE_ACTION_GROUP: GType <cimport,nodecl,const>
global G_TYPE_ACTION_MAP: GType <cimport,nodecl,const>
global G_TYPE_APP_INFO: GType <cimport,nodecl,const>
global G_TYPE_APP_LAUNCH_CONTEXT: GType <cimport,nodecl,const>
global G_TYPE_APP_INFO_MONITOR: GType <cimport,nodecl,const>
global G_TYPE_APPLICATION: GType <cimport,nodecl,const>
global G_TYPE_APPLICATION_COMMAND_LINE: GType <cimport,nodecl,const>
global G_TYPE_INITABLE: GType <cimport,nodecl,const>
global G_TYPE_ASYNC_INITABLE: GType <cimport,nodecl,const>
global G_TYPE_ASYNC_RESULT: GType <cimport,nodecl,const>
global G_TYPE_INPUT_STREAM: GType <cimport,nodecl,const>
global G_TYPE_FILTER_INPUT_STREAM: GType <cimport,nodecl,const>
global G_TYPE_BUFFERED_INPUT_STREAM: GType <cimport,nodecl,const>
global G_TYPE_OUTPUT_STREAM: GType <cimport,nodecl,const>
global G_TYPE_FILTER_OUTPUT_STREAM: GType <cimport,nodecl,const>
global G_TYPE_BUFFERED_OUTPUT_STREAM: GType <cimport,nodecl,const>
global G_TYPE_BYTES_ICON: GType <cimport,nodecl,const>
global G_TYPE_CANCELLABLE: GType <cimport,nodecl,const>
global G_TYPE_CONVERTER: GType <cimport,nodecl,const>
global G_TYPE_CHARSET_CONVERTER: GType <cimport,nodecl,const>
global G_TYPE_CONVERTER_INPUT_STREAM: GType <cimport,nodecl,const>
global G_TYPE_CONVERTER_OUTPUT_STREAM: GType <cimport,nodecl,const>
global STDIN_FILENO: cint <comptime> = 0
global STDOUT_FILENO: cint <comptime> = 1
global STDERR_FILENO: cint <comptime> = 2
global R_OK: cint <comptime> = 4
global W_OK: cint <comptime> = 2
global X_OK: cint <comptime> = 1
global F_OK: cint <comptime> = 0
global L_SET: cint <comptime> = 0
global L_INCR: cint <comptime> = 1
global L_XTND: cint <comptime> = 2
global F_ULOCK: cint <comptime> = 0
global F_LOCK: cint <comptime> = 1
global F_TLOCK: cint <comptime> = 2
global F_TEST: cint <comptime> = 3
global G_TYPE_CREDENTIALS: GType <cimport,nodecl,const>
global G_TYPE_DATAGRAM_BASED: GType <cimport,nodecl,const>
global G_TYPE_DATA_INPUT_STREAM: GType <cimport,nodecl,const>
global G_TYPE_DATA_OUTPUT_STREAM: GType <cimport,nodecl,const>
global G_TYPE_DBUS_ACTION_GROUP: GType <cimport,nodecl,const>
global G_TYPE_DBUS_AUTH_OBSERVER: GType <cimport,nodecl,const>
global G_TYPE_DBUS_CONNECTION: GType <cimport,nodecl,const>
global G_DBUS_ERROR: GQuark <cimport,nodecl,const>
global G_TYPE_DBUS_INTERFACE: GType <cimport,nodecl,const>
global G_TYPE_DBUS_INTERFACE_SKELETON: GType <cimport,nodecl,const>
global G_TYPE_DBUS_NODE_INFO: GType <cimport,nodecl,const>
global G_TYPE_DBUS_INTERFACE_INFO: GType <cimport,nodecl,const>
global G_TYPE_DBUS_METHOD_INFO: GType <cimport,nodecl,const>
global G_TYPE_DBUS_SIGNAL_INFO: GType <cimport,nodecl,const>
global G_TYPE_DBUS_PROPERTY_INFO: GType <cimport,nodecl,const>
global G_TYPE_DBUS_ARG_INFO: GType <cimport,nodecl,const>
global G_TYPE_DBUS_ANNOTATION_INFO: GType <cimport,nodecl,const>
global G_TYPE_DBUS_MENU_MODEL: GType <cimport,nodecl,const>
global G_TYPE_DBUS_MESSAGE: GType <cimport,nodecl,const>
global G_TYPE_DBUS_METHOD_INVOCATION: GType <cimport,nodecl,const>
global G_TYPE_DBUS_OBJECT: GType <cimport,nodecl,const>
global G_TYPE_DBUS_OBJECT_MANAGER: GType <cimport,nodecl,const>
global G_TYPE_DBUS_OBJECT_MANAGER_CLIENT: GType <cimport,nodecl,const>
global G_TYPE_DBUS_OBJECT_MANAGER_SERVER: GType <cimport,nodecl,const>
global G_TYPE_DBUS_OBJECT_PROXY: GType <cimport,nodecl,const>
global G_TYPE_DBUS_OBJECT_SKELETON: GType <cimport,nodecl,const>
global G_TYPE_DBUS_PROXY: GType <cimport,nodecl,const>
global G_TYPE_DBUS_SERVER: GType <cimport,nodecl,const>
global G_DRIVE_IDENTIFIER_KIND_UNIX_DEVICE: cstring <comptime> = "unix-device"
global G_TYPE_DRIVE: GType <cimport,nodecl,const>
global G_TYPE_DTLS_CONNECTION: GType <cimport,nodecl,const>
global G_TYPE_DTLS_CLIENT_CONNECTION: GType <cimport,nodecl,const>
global G_TYPE_DTLS_SERVER_CONNECTION: GType <cimport,nodecl,const>
global G_TYPE_ICON: GType <cimport,nodecl,const>
global G_TYPE_EMBLEM: GType <cimport,nodecl,const>
global G_TYPE_EMBLEMED_ICON: GType <cimport,nodecl,const>
global G_TYPE_FILE: GType <cimport,nodecl,const>
global G_TYPE_FILE_ATTRIBUTE_INFO_LIST: GType <cimport,nodecl,const>
global G_TYPE_FILE_ENUMERATOR: GType <cimport,nodecl,const>
global G_TYPE_FILE_ICON: GType <cimport,nodecl,const>
global G_TYPE_FILE_INFO: GType <cimport,nodecl,const>
global G_FILE_ATTRIBUTE_STANDARD_TYPE: cstring <comptime> = "standard::type"
global G_FILE_ATTRIBUTE_STANDARD_IS_HIDDEN: cstring <comptime> = "standard::is-hidden"
global G_FILE_ATTRIBUTE_STANDARD_IS_BACKUP: cstring <comptime> = "standard::is-backup"
global G_FILE_ATTRIBUTE_STANDARD_IS_SYMLINK: cstring <comptime> = "standard::is-symlink"
global G_FILE_ATTRIBUTE_STANDARD_IS_VIRTUAL: cstring <comptime> = "standard::is-virtual"
global G_FILE_ATTRIBUTE_STANDARD_IS_VOLATILE: cstring <comptime> = "standard::is-volatile"
global G_FILE_ATTRIBUTE_STANDARD_NAME: cstring <comptime> = "standard::name"
global G_FILE_ATTRIBUTE_STANDARD_DISPLAY_NAME: cstring <comptime> = "standard::display-name"
global G_FILE_ATTRIBUTE_STANDARD_EDIT_NAME: cstring <comptime> = "standard::edit-name"
global G_FILE_ATTRIBUTE_STANDARD_COPY_NAME: cstring <comptime> = "standard::copy-name"
global G_FILE_ATTRIBUTE_STANDARD_DESCRIPTION: cstring <comptime> = "standard::description"
global G_FILE_ATTRIBUTE_STANDARD_ICON: cstring <comptime> = "standard::icon"
global G_FILE_ATTRIBUTE_STANDARD_SYMBOLIC_ICON: cstring <comptime> = "standard::symbolic-icon"
global G_FILE_ATTRIBUTE_STANDARD_CONTENT_TYPE: cstring <comptime> = "standard::content-type"
global G_FILE_ATTRIBUTE_STANDARD_FAST_CONTENT_TYPE: cstring <comptime> = "standard::fast-content-type"
global G_FILE_ATTRIBUTE_STANDARD_SIZE: cstring <comptime> = "standard::size"
global G_FILE_ATTRIBUTE_STANDARD_ALLOCATED_SIZE: cstring <comptime> = "standard::allocated-size"
global G_FILE_ATTRIBUTE_STANDARD_SYMLINK_TARGET: cstring <comptime> = "standard::symlink-target"
global G_FILE_ATTRIBUTE_STANDARD_TARGET_URI: cstring <comptime> = "standard::target-uri"
global G_FILE_ATTRIBUTE_STANDARD_SORT_ORDER: cstring <comptime> = "standard::sort-order"
global G_FILE_ATTRIBUTE_ETAG_VALUE: cstring <comptime> = "etag::value"
global G_FILE_ATTRIBUTE_ID_FILE: cstring <comptime> = "id::file"
global G_FILE_ATTRIBUTE_ID_FILESYSTEM: cstring <comptime> = "id::filesystem"
global G_FILE_ATTRIBUTE_ACCESS_CAN_READ: cstring <comptime> = "access::can-read"
global G_FILE_ATTRIBUTE_ACCESS_CAN_WRITE: cstring <comptime> = "access::can-write"
global G_FILE_ATTRIBUTE_ACCESS_CAN_EXECUTE: cstring <comptime> = "access::can-execute"
global G_FILE_ATTRIBUTE_ACCESS_CAN_DELETE: cstring <comptime> = "access::can-delete"
global G_FILE_ATTRIBUTE_ACCESS_CAN_TRASH: cstring <comptime> = "access::can-trash"
global G_FILE_ATTRIBUTE_ACCESS_CAN_RENAME: cstring <comptime> = "access::can-rename"
global G_FILE_ATTRIBUTE_MOUNTABLE_CAN_MOUNT: cstring <comptime> = "mountable::can-mount"
global G_FILE_ATTRIBUTE_MOUNTABLE_CAN_UNMOUNT: cstring <comptime> = "mountable::can-unmount"
global G_FILE_ATTRIBUTE_MOUNTABLE_CAN_EJECT: cstring <comptime> = "mountable::can-eject"
global G_FILE_ATTRIBUTE_MOUNTABLE_UNIX_DEVICE: cstring <comptime> = "mountable::unix-device"
global G_FILE_ATTRIBUTE_MOUNTABLE_UNIX_DEVICE_FILE: cstring <comptime> = "mountable::unix-device-file"
global G_FILE_ATTRIBUTE_MOUNTABLE_HAL_UDI: cstring <comptime> = "mountable::hal-udi"
global G_FILE_ATTRIBUTE_MOUNTABLE_CAN_START: cstring <comptime> = "mountable::can-start"
global G_FILE_ATTRIBUTE_MOUNTABLE_CAN_START_DEGRADED: cstring <comptime> = "mountable::can-start-degraded"
global G_FILE_ATTRIBUTE_MOUNTABLE_CAN_STOP: cstring <comptime> = "mountable::can-stop"
global G_FILE_ATTRIBUTE_MOUNTABLE_START_STOP_TYPE: cstring <comptime> = "mountable::start-stop-type"
global G_FILE_ATTRIBUTE_MOUNTABLE_CAN_POLL: cstring <comptime> = "mountable::can-poll"
global G_FILE_ATTRIBUTE_MOUNTABLE_IS_MEDIA_CHECK_AUTOMATIC: cstring <comptime> = "mountable::is-media-check-automatic"
global G_FILE_ATTRIBUTE_TIME_MODIFIED: cstring <comptime> = "time::modified"
global G_FILE_ATTRIBUTE_TIME_MODIFIED_USEC: cstring <comptime> = "time::modified-usec"
global G_FILE_ATTRIBUTE_TIME_ACCESS: cstring <comptime> = "time::access"
global G_FILE_ATTRIBUTE_TIME_ACCESS_USEC: cstring <comptime> = "time::access-usec"
global G_FILE_ATTRIBUTE_TIME_CHANGED: cstring <comptime> = "time::changed"
global G_FILE_ATTRIBUTE_TIME_CHANGED_USEC: cstring <comptime> = "time::changed-usec"
global G_FILE_ATTRIBUTE_TIME_CREATED: cstring <comptime> = "time::created"
global G_FILE_ATTRIBUTE_TIME_CREATED_USEC: cstring <comptime> = "time::created-usec"
global G_FILE_ATTRIBUTE_UNIX_DEVICE: cstring <comptime> = "unix::device"
global G_FILE_ATTRIBUTE_UNIX_INODE: cstring <comptime> = "unix::inode"
global G_FILE_ATTRIBUTE_UNIX_MODE: cstring <comptime> = "unix::mode"
global G_FILE_ATTRIBUTE_UNIX_NLINK: cstring <comptime> = "unix::nlink"
global G_FILE_ATTRIBUTE_UNIX_UID: cstring <comptime> = "unix::uid"
global G_FILE_ATTRIBUTE_UNIX_GID: cstring <comptime> = "unix::gid"
global G_FILE_ATTRIBUTE_UNIX_RDEV: cstring <comptime> = "unix::rdev"
global G_FILE_ATTRIBUTE_UNIX_BLOCK_SIZE: cstring <comptime> = "unix::block-size"
global G_FILE_ATTRIBUTE_UNIX_BLOCKS: cstring <comptime> = "unix::blocks"
global G_FILE_ATTRIBUTE_UNIX_IS_MOUNTPOINT: cstring <comptime> = "unix::is-mountpoint"
global G_FILE_ATTRIBUTE_DOS_IS_ARCHIVE: cstring <comptime> = "dos::is-archive"
global G_FILE_ATTRIBUTE_DOS_IS_SYSTEM: cstring <comptime> = "dos::is-system"
global G_FILE_ATTRIBUTE_DOS_IS_MOUNTPOINT: cstring <comptime> = "dos::is-mountpoint"
global G_FILE_ATTRIBUTE_DOS_REPARSE_POINT_TAG: cstring <comptime> = "dos::reparse-point-tag"
global G_FILE_ATTRIBUTE_OWNER_USER: cstring <comptime> = "owner::user"
global G_FILE_ATTRIBUTE_OWNER_USER_REAL: cstring <comptime> = "owner::user-real"
global G_FILE_ATTRIBUTE_OWNER_GROUP: cstring <comptime> = "owner::group"
global G_FILE_ATTRIBUTE_THUMBNAIL_PATH: cstring <comptime> = "thumbnail::path"
global G_FILE_ATTRIBUTE_THUMBNAILING_FAILED: cstring <comptime> = "thumbnail::failed"
global G_FILE_ATTRIBUTE_THUMBNAIL_IS_VALID: cstring <comptime> = "thumbnail::is-valid"
global G_FILE_ATTRIBUTE_PREVIEW_ICON: cstring <comptime> = "preview::icon"
global G_FILE_ATTRIBUTE_FILESYSTEM_SIZE: cstring <comptime> = "filesystem::size"
global G_FILE_ATTRIBUTE_FILESYSTEM_FREE: cstring <comptime> = "filesystem::free"
global G_FILE_ATTRIBUTE_FILESYSTEM_USED: cstring <comptime> = "filesystem::used"
global G_FILE_ATTRIBUTE_FILESYSTEM_TYPE: cstring <comptime> = "filesystem::type"
global G_FILE_ATTRIBUTE_FILESYSTEM_READONLY: cstring <comptime> = "filesystem::readonly"
global G_FILE_ATTRIBUTE_FILESYSTEM_USE_PREVIEW: cstring <comptime> = "filesystem::use-preview"
global G_FILE_ATTRIBUTE_FILESYSTEM_REMOTE: cstring <comptime> = "filesystem::remote"
global G_FILE_ATTRIBUTE_GVFS_BACKEND: cstring <comptime> = "gvfs::backend"
global G_FILE_ATTRIBUTE_SELINUX_CONTEXT: cstring <comptime> = "selinux::context"
global G_FILE_ATTRIBUTE_TRASH_ITEM_COUNT: cstring <comptime> = "trash::item-count"
global G_FILE_ATTRIBUTE_TRASH_ORIG_PATH: cstring <comptime> = "trash::orig-path"
global G_FILE_ATTRIBUTE_TRASH_DELETION_DATE: cstring <comptime> = "trash::deletion-date"
global G_FILE_ATTRIBUTE_RECENT_MODIFIED: cstring <comptime> = "recent::modified"
global G_TYPE_FILE_ATTRIBUTE_MATCHER: GType <cimport,nodecl,const>
global G_TYPE_FILE_INPUT_STREAM: GType <cimport,nodecl,const>
global G_IO_ERROR: GQuark <cimport,nodecl,const>
global G_TYPE_IO_STREAM: GType <cimport,nodecl,const>
global G_TYPE_FILE_IO_STREAM: GType <cimport,nodecl,const>
global G_TYPE_FILE_MONITOR: GType <cimport,nodecl,const>
global G_TYPE_FILENAME_COMPLETER: GType <cimport,nodecl,const>
global G_TYPE_FILE_OUTPUT_STREAM: GType <cimport,nodecl,const>
global G_TYPE_INET_ADDRESS: GType <cimport,nodecl,const>
global G_TYPE_INET_ADDRESS_MASK: GType <cimport,nodecl,const>
global G_TYPE_SOCKET_ADDRESS: GType <cimport,nodecl,const>
global G_TYPE_INET_SOCKET_ADDRESS: GType <cimport,nodecl,const>
global G_TYPE_APP_INFO_CREATE_FLAGS: GType <cimport,nodecl,const>
global G_TYPE_CONVERTER_FLAGS: GType <cimport,nodecl,const>
global G_TYPE_CONVERTER_RESULT: GType <cimport,nodecl,const>
global G_TYPE_DATA_STREAM_BYTE_ORDER: GType <cimport,nodecl,const>
global G_TYPE_DATA_STREAM_NEWLINE_TYPE: GType <cimport,nodecl,const>
global G_TYPE_FILE_ATTRIBUTE_TYPE: GType <cimport,nodecl,const>
global G_TYPE_FILE_ATTRIBUTE_INFO_FLAGS: GType <cimport,nodecl,const>
global G_TYPE_FILE_ATTRIBUTE_STATUS: GType <cimport,nodecl,const>
global G_TYPE_FILE_QUERY_INFO_FLAGS: GType <cimport,nodecl,const>
global G_TYPE_FILE_CREATE_FLAGS: GType <cimport,nodecl,const>
global G_TYPE_FILE_MEASURE_FLAGS: GType <cimport,nodecl,const>
global G_TYPE_MOUNT_MOUNT_FLAGS: GType <cimport,nodecl,const>
global G_TYPE_MOUNT_UNMOUNT_FLAGS: GType <cimport,nodecl,const>
global G_TYPE_DRIVE_START_FLAGS: GType <cimport,nodecl,const>
global G_TYPE_DRIVE_START_STOP_TYPE: GType <cimport,nodecl,const>
global G_TYPE_FILE_COPY_FLAGS: GType <cimport,nodecl,const>
global G_TYPE_FILE_MONITOR_FLAGS: GType <cimport,nodecl,const>
global G_TYPE_FILE_TYPE: GType <cimport,nodecl,const>
global G_TYPE_FILESYSTEM_PREVIEW_TYPE: GType <cimport,nodecl,const>
global G_TYPE_FILE_MONITOR_EVENT: GType <cimport,nodecl,const>
global G_TYPE_IO_ERROR_ENUM: GType <cimport,nodecl,const>
global G_TYPE_ASK_PASSWORD_FLAGS: GType <cimport,nodecl,const>
global G_TYPE_PASSWORD_SAVE: GType <cimport,nodecl,const>
global G_TYPE_MOUNT_OPERATION_RESULT: GType <cimport,nodecl,const>
global G_TYPE_OUTPUT_STREAM_SPLICE_FLAGS: GType <cimport,nodecl,const>
global G_TYPE_IO_STREAM_SPLICE_FLAGS: GType <cimport,nodecl,const>
global G_TYPE_EMBLEM_ORIGIN: GType <cimport,nodecl,const>
global G_TYPE_RESOLVER_ERROR: GType <cimport,nodecl,const>
global G_TYPE_RESOLVER_RECORD_TYPE: GType <cimport,nodecl,const>
global G_TYPE_RESOURCE_ERROR: GType <cimport,nodecl,const>
global G_TYPE_RESOURCE_FLAGS: GType <cimport,nodecl,const>
global G_TYPE_RESOURCE_LOOKUP_FLAGS: GType <cimport,nodecl,const>
global G_TYPE_SOCKET_FAMILY: GType <cimport,nodecl,const>
global G_TYPE_SOCKET_TYPE: GType <cimport,nodecl,const>
global G_TYPE_SOCKET_MSG_FLAGS: GType <cimport,nodecl,const>
global G_TYPE_SOCKET_PROTOCOL: GType <cimport,nodecl,const>
global G_TYPE_ZLIB_COMPRESSOR_FORMAT: GType <cimport,nodecl,const>
global G_TYPE_UNIX_SOCKET_ADDRESS_TYPE: GType <cimport,nodecl,const>
global G_TYPE_BUS_TYPE: GType <cimport,nodecl,const>
global G_TYPE_BUS_NAME_OWNER_FLAGS: GType <cimport,nodecl,const>
global G_TYPE_BUS_NAME_WATCHER_FLAGS: GType <cimport,nodecl,const>
global G_TYPE_DBUS_PROXY_FLAGS: GType <cimport,nodecl,const>
global G_TYPE_DBUS_ERROR: GType <cimport,nodecl,const>
global G_TYPE_DBUS_CONNECTION_FLAGS: GType <cimport,nodecl,const>
global G_TYPE_DBUS_CAPABILITY_FLAGS: GType <cimport,nodecl,const>
global G_TYPE_DBUS_CALL_FLAGS: GType <cimport,nodecl,const>
global G_TYPE_DBUS_MESSAGE_TYPE: GType <cimport,nodecl,const>
global G_TYPE_DBUS_MESSAGE_FLAGS: GType <cimport,nodecl,const>
global G_TYPE_DBUS_MESSAGE_HEADER_FIELD: GType <cimport,nodecl,const>
global G_TYPE_DBUS_PROPERTY_INFO_FLAGS: GType <cimport,nodecl,const>
global G_TYPE_DBUS_SUBTREE_FLAGS: GType <cimport,nodecl,const>
global G_TYPE_DBUS_SERVER_FLAGS: GType <cimport,nodecl,const>
global G_TYPE_DBUS_SIGNAL_FLAGS: GType <cimport,nodecl,const>
global G_TYPE_DBUS_SEND_MESSAGE_FLAGS: GType <cimport,nodecl,const>
global G_TYPE_CREDENTIALS_TYPE: GType <cimport,nodecl,const>
global G_TYPE_DBUS_MESSAGE_BYTE_ORDER: GType <cimport,nodecl,const>
global G_TYPE_APPLICATION_FLAGS: GType <cimport,nodecl,const>
global G_TYPE_TLS_ERROR: GType <cimport,nodecl,const>
global G_TYPE_TLS_CERTIFICATE_FLAGS: GType <cimport,nodecl,const>
global G_TYPE_TLS_AUTHENTICATION_MODE: GType <cimport,nodecl,const>
global G_TYPE_TLS_CHANNEL_BINDING_TYPE: GType <cimport,nodecl,const>
global G_TYPE_TLS_CHANNEL_BINDING_ERROR: GType <cimport,nodecl,const>
global G_TYPE_TLS_REHANDSHAKE_MODE: GType <cimport,nodecl,const>
global G_TYPE_TLS_PASSWORD_FLAGS: GType <cimport,nodecl,const>
global G_TYPE_TLS_INTERACTION_RESULT: GType <cimport,nodecl,const>
global G_TYPE_DBUS_INTERFACE_SKELETON_FLAGS: GType <cimport,nodecl,const>
global G_TYPE_DBUS_OBJECT_MANAGER_CLIENT_FLAGS: GType <cimport,nodecl,const>
global G_TYPE_TLS_DATABASE_VERIFY_FLAGS: GType <cimport,nodecl,const>
global G_TYPE_TLS_DATABASE_LOOKUP_FLAGS: GType <cimport,nodecl,const>
global G_TYPE_TLS_CERTIFICATE_REQUEST_FLAGS: GType <cimport,nodecl,const>
global G_TYPE_TLS_PROTOCOL_VERSION: GType <cimport,nodecl,const>
global G_TYPE_IO_MODULE_SCOPE_FLAGS: GType <cimport,nodecl,const>
global G_TYPE_SOCKET_CLIENT_EVENT: GType <cimport,nodecl,const>
global G_TYPE_SOCKET_LISTENER_EVENT: GType <cimport,nodecl,const>
global G_TYPE_TEST_DBUS_FLAGS: GType <cimport,nodecl,const>
global G_TYPE_SUBPROCESS_FLAGS: GType <cimport,nodecl,const>
global G_TYPE_NOTIFICATION_PRIORITY: GType <cimport,nodecl,const>
global G_TYPE_NETWORK_CONNECTIVITY: GType <cimport,nodecl,const>
global G_TYPE_POLLABLE_RETURN: GType <cimport,nodecl,const>
global G_TYPE_MEMORY_MONITOR_WARNING_LEVEL: GType <cimport,nodecl,const>
global G_TYPE_RESOLVER_NAME_LOOKUP_FLAGS: GType <cimport,nodecl,const>
global G_TYPE_SETTINGS_BIND_FLAGS: GType <cimport,nodecl,const>
global G_IO_TYPE_MODULE: GType <cimport,nodecl,const>
global G_TYPE_LIST_MODEL: GType <cimport,nodecl,const>
global G_TYPE_LIST_STORE: GType <cimport,nodecl,const>
global G_TYPE_LOADABLE_ICON: GType <cimport,nodecl,const>
global G_TYPE_MEMORY_INPUT_STREAM: GType <cimport,nodecl,const>
global G_MEMORY_MONITOR_EXTENSION_POINT_NAME: cstring <comptime> = "gio-memory-monitor"
global G_TYPE_MEMORY_MONITOR: GType <cimport,nodecl,const>
global G_TYPE_MEMORY_OUTPUT_STREAM: GType <cimport,nodecl,const>
global G_MENU_ATTRIBUTE_ACTION: cstring <comptime> = "action"
global G_MENU_ATTRIBUTE_ACTION_NAMESPACE: cstring <comptime> = "action-namespace"
global G_MENU_ATTRIBUTE_TARGET: cstring <comptime> = "target"
global G_MENU_ATTRIBUTE_LABEL: cstring <comptime> = "label"
global G_MENU_ATTRIBUTE_ICON: cstring <comptime> = "icon"
global G_MENU_LINK_SUBMENU: cstring <comptime> = "submenu"
global G_MENU_LINK_SECTION: cstring <comptime> = "section"
global G_TYPE_MENU_MODEL: GType <cimport,nodecl,const>
global G_TYPE_MENU_ATTRIBUTE_ITER: GType <cimport,nodecl,const>
global G_TYPE_MENU_LINK_ITER: GType <cimport,nodecl,const>
global G_TYPE_MENU: GType <cimport,nodecl,const>
global G_TYPE_MENU_ITEM: GType <cimport,nodecl,const>
global G_TYPE_MOUNT: GType <cimport,nodecl,const>
global G_TYPE_MOUNT_OPERATION: GType <cimport,nodecl,const>
global G_TYPE_NATIVE_SOCKET_ADDRESS: GType <cimport,nodecl,const>
global G_TYPE_VOLUME_MONITOR: GType <cimport,nodecl,const>
global G_VOLUME_MONITOR_EXTENSION_POINT_NAME: cstring <comptime> = "gio-volume-monitor"
global G_TYPE_NATIVE_VOLUME_MONITOR: GType <cimport,nodecl,const>
global G_NATIVE_VOLUME_MONITOR_EXTENSION_POINT_NAME: cstring <comptime> = "gio-native-volume-monitor"
global G_TYPE_NETWORK_ADDRESS: GType <cimport,nodecl,const>
global G_NETWORK_MONITOR_EXTENSION_POINT_NAME: cstring <comptime> = "gio-network-monitor"
global G_TYPE_NETWORK_MONITOR: GType <cimport,nodecl,const>
global G_TYPE_NETWORK_SERVICE: GType <cimport,nodecl,const>
global G_TYPE_NOTIFICATION: GType <cimport,nodecl,const>
global G_TYPE_PERMISSION: GType <cimport,nodecl,const>
global G_TYPE_POLLABLE_INPUT_STREAM: GType <cimport,nodecl,const>
global G_TYPE_POLLABLE_OUTPUT_STREAM: GType <cimport,nodecl,const>
global G_POWER_PROFILE_MONITOR_EXTENSION_POINT_NAME: cstring <comptime> = "gio-power-profile-monitor"
global G_TYPE_POWER_PROFILE_MONITOR: GType <cimport,nodecl,const>
global G_TYPE_PROPERTY_ACTION: GType <cimport,nodecl,const>
global G_TYPE_PROXY: GType <cimport,nodecl,const>
global G_PROXY_EXTENSION_POINT_NAME: cstring <comptime> = "gio-proxy"
global G_TYPE_PROXY_ADDRESS: GType <cimport,nodecl,const>
global G_TYPE_SOCKET_ADDRESS_ENUMERATOR: GType <cimport,nodecl,const>
global G_TYPE_PROXY_ADDRESS_ENUMERATOR: GType <cimport,nodecl,const>
global G_TYPE_PROXY_RESOLVER: GType <cimport,nodecl,const>
global G_PROXY_RESOLVER_EXTENSION_POINT_NAME: cstring <comptime> = "gio-proxy-resolver"
global G_TYPE_REMOTE_ACTION_GROUP: GType <cimport,nodecl,const>
global G_TYPE_RESOLVER: GType <cimport,nodecl,const>
global G_RESOLVER_ERROR: GQuark <cimport,nodecl,const>
global G_TYPE_RESOURCE: GType <cimport,nodecl,const>
global G_RESOURCE_ERROR: GQuark <cimport,nodecl,const>
global G_TYPE_SEEKABLE: GType <cimport,nodecl,const>
global G_TYPE_SETTINGS_SCHEMA_SOURCE: GType <cimport,nodecl,const>
global G_TYPE_SETTINGS_SCHEMA: GType <cimport,nodecl,const>
global G_TYPE_SETTINGS_SCHEMA_KEY: GType <cimport,nodecl,const>
global G_TYPE_SETTINGS: GType <cimport,nodecl,const>
global G_TYPE_SIMPLE_ACTION: GType <cimport,nodecl,const>
global G_TYPE_SIMPLE_ACTION_GROUP: GType <cimport,nodecl,const>
global G_TYPE_SIMPLE_ASYNC_RESULT: GType <cimport,nodecl,const>
global G_TYPE_SIMPLE_IO_STREAM: GType <cimport,nodecl,const>
global G_TYPE_SIMPLE_PERMISSION: GType <cimport,nodecl,const>
global G_TYPE_SIMPLE_PROXY_RESOLVER: GType <cimport,nodecl,const>
global G_TYPE_SOCKET: GType <cimport,nodecl,const>
global G_TYPE_SOCKET_CLIENT: GType <cimport,nodecl,const>
global G_TYPE_SOCKET_CONNECTABLE: GType <cimport,nodecl,const>
global G_TYPE_SOCKET_CONNECTION: GType <cimport,nodecl,const>
global G_TYPE_SOCKET_CONTROL_MESSAGE: GType <cimport,nodecl,const>
global G_TYPE_SOCKET_LISTENER: GType <cimport,nodecl,const>
global G_TYPE_SOCKET_SERVICE: GType <cimport,nodecl,const>
global G_TYPE_SRV_TARGET: GType <cimport,nodecl,const>
global G_TYPE_SUBPROCESS: GType <cimport,nodecl,const>
global G_TYPE_SUBPROCESS_LAUNCHER: GType <cimport,nodecl,const>
global G_TYPE_TASK: GType <cimport,nodecl,const>
global G_TYPE_TCP_CONNECTION: GType <cimport,nodecl,const>
global G_TYPE_TCP_WRAPPER_CONNECTION: GType <cimport,nodecl,const>
global G_TYPE_TEST_DBUS: GType <cimport,nodecl,const>
global G_TYPE_THEMED_ICON: GType <cimport,nodecl,const>
global G_TYPE_THREADED_SOCKET_SERVICE: GType <cimport,nodecl,const>
global G_TLS_BACKEND_EXTENSION_POINT_NAME: cstring <comptime> = "gio-tls-backend"
global G_TYPE_TLS_BACKEND: GType <cimport,nodecl,const>
global G_TYPE_TLS_CERTIFICATE: GType <cimport,nodecl,const>
global G_TYPE_TLS_CONNECTION: GType <cimport,nodecl,const>
global G_TLS_ERROR: GQuark <cimport,nodecl,const>
global G_TLS_CHANNEL_BINDING_ERROR: GQuark <cimport,nodecl,const>
global G_TYPE_TLS_CLIENT_CONNECTION: GType <cimport,nodecl,const>
global G_TLS_DATABASE_PURPOSE_AUTHENTICATE_SERVER: cstring <comptime> = "1.3.6.1.5.5.7.3.1"
global G_TLS_DATABASE_PURPOSE_AUTHENTICATE_CLIENT: cstring <comptime> = "1.3.6.1.5.5.7.3.2"
global G_TYPE_TLS_DATABASE: GType <cimport,nodecl,const>
global G_TYPE_TLS_FILE_DATABASE: GType <cimport,nodecl,const>
global G_TYPE_TLS_INTERACTION: GType <cimport,nodecl,const>
global G_TYPE_TLS_PASSWORD: GType <cimport,nodecl,const>
global G_TYPE_TLS_SERVER_CONNECTION: GType <cimport,nodecl,const>
global G_TYPE_VFS: GType <cimport,nodecl,const>
global G_VFS_EXTENSION_POINT_NAME: cstring <comptime> = "gio-vfs"
global G_VOLUME_IDENTIFIER_KIND_UNIX_DEVICE: cstring <comptime> = "unix-device"
global G_VOLUME_IDENTIFIER_KIND_LABEL: cstring <comptime> = "label"
global G_VOLUME_IDENTIFIER_KIND_UUID: cstring <comptime> = "uuid"
global G_VOLUME_IDENTIFIER_KIND_NFS_MOUNT: cstring <comptime> = "nfs-mount"
global G_VOLUME_IDENTIFIER_KIND_CLASS: cstring <comptime> = "class"
global G_TYPE_VOLUME: GType <cimport,nodecl,const>
global G_TYPE_ZLIB_COMPRESSOR: GType <cimport,nodecl,const>
global G_TYPE_ZLIB_DECOMPRESSOR: GType <cimport,nodecl,const>
global GTK_TYPE_CSS_SECTION: GType <cimport,nodecl,const>
global CAIRO_VERSION_MAJOR: cint <comptime> = 1
global CAIRO_VERSION_MINOR: cint <comptime> = 17
global CAIRO_VERSION_MICRO: cint <comptime> = 4
global CAIRO_HAS_FC_FONT: cint <comptime> = 1
global CAIRO_HAS_FT_FONT: cint <comptime> = 1
global CAIRO_HAS_GOBJECT_FUNCTIONS: cint <comptime> = 1
global CAIRO_HAS_IMAGE_SURFACE: cint <comptime> = 1
global CAIRO_HAS_INTERPRETER: cint <comptime> = 1
global CAIRO_HAS_MIME_SURFACE: cint <comptime> = 1
global CAIRO_HAS_OBSERVER_SURFACE: cint <comptime> = 1
global CAIRO_HAS_PDF_SURFACE: cint <comptime> = 1
global CAIRO_HAS_PNG_FUNCTIONS: cint <comptime> = 1
global CAIRO_HAS_PS_SURFACE: cint <comptime> = 1
global CAIRO_HAS_RECORDING_SURFACE: cint <comptime> = 1
global CAIRO_HAS_SCRIPT_SURFACE: cint <comptime> = 1
global CAIRO_HAS_SVG_SURFACE: cint <comptime> = 1
global CAIRO_HAS_TEE_SURFACE: cint <comptime> = 1
global CAIRO_HAS_USER_FONT: cint <comptime> = 1
global CAIRO_HAS_XCB_SHM_FUNCTIONS: cint <comptime> = 1
global CAIRO_HAS_XCB_SURFACE: cint <comptime> = 1
global CAIRO_HAS_XLIB_SURFACE: cint <comptime> = 1
global CAIRO_HAS_XLIB_XRENDER_SURFACE: cint <comptime> = 1
global CAIRO_HAS_XML_SURFACE: cint <comptime> = 1
global CAIRO_FONT_TYPE_ATSUI: cint <comptime> = 3
global CAIRO_TAG_DEST: cstring <comptime> = "cairo.dest"
global CAIRO_TAG_LINK: cstring <comptime> = "Link"
global CAIRO_MIME_TYPE_JPEG: cstring <comptime> = "image/jpeg"
global CAIRO_MIME_TYPE_PNG: cstring <comptime> = "image/png"
global CAIRO_MIME_TYPE_JP2: cstring <comptime> = "image/jp2"
global CAIRO_MIME_TYPE_URI: cstring <comptime> = "text/x-uri"
global CAIRO_MIME_TYPE_UNIQUE_ID: cstring <comptime> = "application/x-cairo.uuid"
global CAIRO_MIME_TYPE_JBIG2: cstring <comptime> = "application/x-cairo.jbig2"
global CAIRO_MIME_TYPE_JBIG2_GLOBAL: cstring <comptime> = "application/x-cairo.jbig2-global"
global CAIRO_MIME_TYPE_JBIG2_GLOBAL_ID: cstring <comptime> = "application/x-cairo.jbig2-global-id"
global CAIRO_MIME_TYPE_CCITT_FAX: cstring <comptime> = "image/g3fax"
global CAIRO_MIME_TYPE_CCITT_FAX_PARAMS: cstring <comptime> = "application/x-cairo.ccitt.params"
global CAIRO_MIME_TYPE_EPS: cstring <comptime> = "application/postscript"
global CAIRO_MIME_TYPE_EPS_PARAMS: cstring <comptime> = "application/x-cairo.eps.params"
global PANGO_VERSION_MAJOR: cint <comptime> = 1
global PANGO_VERSION_MINOR: cint <comptime> = 50
global PANGO_VERSION_MICRO: cint <comptime> = 5
global PANGO_VERSION_STRING: cstring <comptime> = "1.50.5"
global INT8_MIN: cint <comptime> = -128
global INT16_MIN: cint <comptime> = -32768
global INT32_MIN: cint <comptime> = -2147483648
global INT8_MAX: cint <comptime> = 127
global INT16_MAX: cint <comptime> = 32767
global INT32_MAX: cint <comptime> = 2147483647
global UINT8_MAX: cint <comptime> = 255
global UINT16_MAX: cint <comptime> = 65535
global UINT32_MAX: cuint <comptime> = 4294967295
global INT_LEAST8_MIN: cint <comptime> = -128
global INT_LEAST16_MIN: cint <comptime> = -32768
global INT_LEAST32_MIN: cint <comptime> = -2147483648
global INT_LEAST8_MAX: cint <comptime> = 127
global INT_LEAST16_MAX: cint <comptime> = 32767
global INT_LEAST32_MAX: cint <comptime> = 2147483647
global UINT_LEAST8_MAX: cint <comptime> = 255
global UINT_LEAST16_MAX: cint <comptime> = 65535
global UINT_LEAST32_MAX: cuint <comptime> = 4294967295
global INT_FAST8_MIN: cint <comptime> = -128
global INT_FAST8_MAX: cint <comptime> = 127
global INT_FAST16_MAX: clong <comptime> = 9223372036854775807
global INT_FAST32_MAX: clong <comptime> = 9223372036854775807
global UINT_FAST8_MAX: cint <comptime> = 255
global UINT_FAST16_MAX: culong <cimport,nodecl,const>
global UINT_FAST32_MAX: culong <cimport,nodecl,const>
global INTPTR_MAX: clong <comptime> = 9223372036854775807
global UINTPTR_MAX: culong <cimport,nodecl,const>
global PTRDIFF_MAX: clong <comptime> = 9223372036854775807
global SIG_ATOMIC_MIN: cint <comptime> = -2147483648
global SIG_ATOMIC_MAX: cint <comptime> = 2147483647
global SIZE_MAX: culong <cimport,nodecl,const>
global WCHAR_MIN: cint <comptime> = -2147483648
global WCHAR_MAX: cint <comptime> = 2147483647
global WINT_MIN: cuint <comptime> = 0
global WINT_MAX: cuint <comptime> = 4294967295
global HB_LANGUAGE_INVALID: hb_language_t <cimport,nodecl,const>
global HB_FEATURE_GLOBAL_START: cint <comptime> = 0
global HB_FEATURE_GLOBAL_END: cuint <cimport,nodecl,const>
global HB_UNICODE_MAX: cuint <comptime> = 1114111
global HB_SET_VALUE_INVALID: hb_codepoint_t <cimport,nodecl,const>
global HB_BUFFER_REPLACEMENT_CODEPOINT_DEFAULT: cuint <comptime> = 65533
global HB_BUFFER_FLAGS_DEFAULT: cuint <comptime> = 0
global HB_BUFFER_SERIALIZE_FLAGS_DEFAULT: cuint <comptime> = 0
global HB_UNICODE_MAX_DECOMPOSITION_LEN: cint <comptime> = 19
global HB_MAP_VALUE_INVALID: hb_codepoint_t <cimport,nodecl,const>
global HB_VERSION_MAJOR: cint <comptime> = 4
global HB_VERSION_MINOR: cint <comptime> = 0
global HB_VERSION_MICRO: cint <comptime> = 1
global HB_VERSION_STRING: cstring <comptime> = "4.0.1"
global PANGO_SCALE: cint <comptime> = 1024
global PANGO_TYPE_MATRIX: GType <cimport,nodecl,const>
global PANGO_TYPE_LANGUAGE: GType <cimport,nodecl,const>
global PANGO_SCALE_XX_SMALL: float64 <cimport,nodecl,const>
global PANGO_SCALE_X_SMALL: float64 <cimport,nodecl,const>
global PANGO_SCALE_SMALL: float64 <cimport,nodecl,const>
global PANGO_SCALE_MEDIUM: float64 <cimport,nodecl,const>
global PANGO_SCALE_LARGE: float64 <cimport,nodecl,const>
global PANGO_SCALE_X_LARGE: float64 <cimport,nodecl,const>
global PANGO_SCALE_XX_LARGE: float64 <cimport,nodecl,const>
global PANGO_TYPE_FONT_DESCRIPTION: GType <cimport,nodecl,const>
global PANGO_TYPE_FONT_METRICS: GType <cimport,nodecl,const>
global PANGO_TYPE_FONT_FAMILY: GType <cimport,nodecl,const>
global PANGO_TYPE_FONT_FACE: GType <cimport,nodecl,const>
global PANGO_TYPE_FONT: GType <cimport,nodecl,const>
global PANGO_GLYPH_EMPTY: PangoGlyph <comptime> = 268435455
global PANGO_GLYPH_INVALID_INPUT: PangoGlyph <comptime> = 4294967295
global PANGO_GLYPH_UNKNOWN_FLAG: PangoGlyph <comptime> = 268435456
global PANGO_UNKNOWN_GLYPH_WIDTH: cint <comptime> = 10
global PANGO_UNKNOWN_GLYPH_HEIGHT: cint <comptime> = 14
global PANGO_TYPE_COLOR: GType <cimport,nodecl,const>
global PANGO_ATTR_INDEX_FROM_TEXT_BEGINNING: guint <comptime> = 0
global PANGO_TYPE_ATTR_LIST: GType <cimport,nodecl,const>
global PANGO_ANALYSIS_FLAG_CENTERED_BASELINE: cint <comptime> = 1
global PANGO_ANALYSIS_FLAG_IS_ELLIPSIS: cint <comptime> = 2
global PANGO_ANALYSIS_FLAG_NEED_HYPHEN: cint <comptime> = 4
global PANGO_TYPE_ITEM: GType <cimport,nodecl,const>
global PANGO_TYPE_FONTSET: GType <cimport,nodecl,const>
global PANGO_TYPE_FONT_MAP: GType <cimport,nodecl,const>
global PANGO_TYPE_CONTEXT: GType <cimport,nodecl,const>
global PANGO_TYPE_GLYPH_STRING: GType <cimport,nodecl,const>
global PANGO_RENDER_TYPE_NONE: cstring <comptime> = "PangoRenderNone"
global PANGO_TYPE_ENGINE: GType <cimport,nodecl,const>
global PANGO_ENGINE_TYPE_LANG: cstring <comptime> = "PangoEngineLang"
global PANGO_TYPE_ENGINE_LANG: GType <cimport,nodecl,const>
global PANGO_ENGINE_TYPE_SHAPE: cstring <comptime> = "PangoEngineShape"
global PANGO_TYPE_ENGINE_SHAPE: GType <cimport,nodecl,const>
global PANGO_TYPE_ATTR_TYPE: GType <cimport,nodecl,const>
global PANGO_TYPE_UNDERLINE: GType <cimport,nodecl,const>
global PANGO_TYPE_OVERLINE: GType <cimport,nodecl,const>
global PANGO_TYPE_SHOW_FLAGS: GType <cimport,nodecl,const>
global PANGO_TYPE_TEXT_TRANSFORM: GType <cimport,nodecl,const>
global PANGO_TYPE_BASELINE_SHIFT: GType <cimport,nodecl,const>
global PANGO_TYPE_FONT_SCALE: GType <cimport,nodecl,const>
global PANGO_TYPE_BIDI_TYPE: GType <cimport,nodecl,const>
global PANGO_TYPE_COVERAGE_LEVEL: GType <cimport,nodecl,const>
global PANGO_TYPE_DIRECTION: GType <cimport,nodecl,const>
global PANGO_TYPE_STYLE: GType <cimport,nodecl,const>
global PANGO_TYPE_VARIANT: GType <cimport,nodecl,const>
global PANGO_TYPE_WEIGHT: GType <cimport,nodecl,const>
global PANGO_TYPE_STRETCH: GType <cimport,nodecl,const>
global PANGO_TYPE_FONT_MASK: GType <cimport,nodecl,const>
global PANGO_TYPE_SHAPE_FLAGS: GType <cimport,nodecl,const>
global PANGO_TYPE_GRAVITY: GType <cimport,nodecl,const>
global PANGO_TYPE_GRAVITY_HINT: GType <cimport,nodecl,const>
global PANGO_TYPE_ALIGNMENT: GType <cimport,nodecl,const>
global PANGO_TYPE_WRAP_MODE: GType <cimport,nodecl,const>
global PANGO_TYPE_ELLIPSIZE_MODE: GType <cimport,nodecl,const>
global PANGO_TYPE_LAYOUT_SERIALIZE_FLAGS: GType <cimport,nodecl,const>
global PANGO_TYPE_LAYOUT_DESERIALIZE_ERROR: GType <cimport,nodecl,const>
global PANGO_TYPE_LAYOUT_DESERIALIZE_FLAGS: GType <cimport,nodecl,const>
global PANGO_TYPE_RENDER_PART: GType <cimport,nodecl,const>
global PANGO_TYPE_SCRIPT: GType <cimport,nodecl,const>
global PANGO_TYPE_TAB_ALIGN: GType <cimport,nodecl,const>
global PANGO_TYPE_FONTSET_SIMPLE: GType <cimport,nodecl,const>
global PANGO_TYPE_GLYPH_ITEM: GType <cimport,nodecl,const>
global PANGO_TYPE_GLYPH_ITEM_ITER: GType <cimport,nodecl,const>
global PANGO_TYPE_TAB_ARRAY: GType <cimport,nodecl,const>
global PANGO_TYPE_LAYOUT: GType <cimport,nodecl,const>
global PANGO_LAYOUT_DESERIALIZE_ERROR: GQuark <cimport,nodecl,const>
global PANGO_TYPE_LAYOUT_LINE: GType <cimport,nodecl,const>
global PANGO_TYPE_LAYOUT_ITER: GType <cimport,nodecl,const>
global PANGO_TYPE_RENDERER: GType <cimport,nodecl,const>
global BUFSIZ: cint <comptime> = 8192
global EOF: cint <comptime> = -1
global SEEK_SET: cint <comptime> = 0
global SEEK_CUR: cint <comptime> = 1
global SEEK_END: cint <comptime> = 2
global P_tmpdir: cstring <comptime> = "/tmp"
global L_tmpnam: cint <comptime> = 20
global TMP_MAX: cint <comptime> = 238328
global FILENAME_MAX: cint <comptime> = 4096
global L_ctermid: cint <comptime> = 9
global FOPEN_MAX: cint <comptime> = 16
global GDK_CURRENT_TIME: clong <comptime> = 0
global GDK_TYPE_APP_LAUNCH_CONTEXT: GType <cimport,nodecl,const>
global GDK_TYPE_RGBA: GType <cimport,nodecl,const>
global GDK_PIXBUF_MAJOR: cint <comptime> = 2
global GDK_PIXBUF_MINOR: cint <comptime> = 42
global GDK_PIXBUF_MICRO: cint <comptime> = 6
global GDK_PIXBUF_VERSION: cstring <comptime> = "2.42.6"
global GDK_TYPE_PIXBUF: GType <cimport,nodecl,const>
global GDK_PIXBUF_ERROR: GQuark <cimport,nodecl,const>
global GDK_TYPE_PIXBUF_ANIMATION: GType <cimport,nodecl,const>
global GDK_TYPE_PIXBUF_ANIMATION_ITER: GType <cimport,nodecl,const>
global GDK_TYPE_PIXBUF_SIMPLE_ANIM: GType <cimport,nodecl,const>
global GDK_TYPE_PIXBUF_LOADER: GType <cimport,nodecl,const>
global GDK_TYPE_PIXBUF_ALPHA_MODE: GType <cimport,nodecl,const>
global GDK_TYPE_COLORSPACE: GType <cimport,nodecl,const>
global GDK_TYPE_PIXBUF_ERROR: GType <cimport,nodecl,const>
global GDK_TYPE_INTERP_TYPE: GType <cimport,nodecl,const>
global GDK_TYPE_PIXBUF_ROTATION: GType <cimport,nodecl,const>
global GDK_TYPE_TEXTURE: GType <cimport,nodecl,const>
global GDK_TEXTURE_ERROR: GQuark <cimport,nodecl,const>
global PANGO_TYPE_CAIRO_FONT: GType <cimport,nodecl,const>
global PANGO_TYPE_CAIRO_FONT_MAP: GType <cimport,nodecl,const>
global GDK_TYPE_CAIRO_CONTEXT: GType <cimport,nodecl,const>
global GDK_TYPE_CLIPBOARD: GType <cimport,nodecl,const>
global GDK_TYPE_CONTENT_DESERIALIZER: GType <cimport,nodecl,const>
global GDK_TYPE_CONTENT_FORMATS: GType <cimport,nodecl,const>
global GDK_TYPE_CONTENT_FORMATS_BUILDER: GType <cimport,nodecl,const>
global GDK_TYPE_FILE_LIST: GType <cimport,nodecl,const>
global GDK_TYPE_CONTENT_PROVIDER: GType <cimport,nodecl,const>
global GDK_TYPE_CONTENT_SERIALIZER: GType <cimport,nodecl,const>
global GDK_TYPE_CURSOR: GType <cimport,nodecl,const>
global GDK_MODIFIER_MASK: cint <comptime> = 469769999
global GDK_ACTION_ALL: cint <comptime> = 7
global GDK_TYPE_DEVICE_TOOL: GType <cimport,nodecl,const>
global GDK_TYPE_DEVICE: GType <cimport,nodecl,const>
global GDK_TYPE_DEVICE_PAD: GType <cimport,nodecl,const>
global GDK_TYPE_DRAG: GType <cimport,nodecl,const>
global GDK_TYPE_EVENT: GType <cimport,nodecl,const>
global GDK_TYPE_EVENT_SEQUENCE: GType <cimport,nodecl,const>
global GDK_PRIORITY_REDRAW: cint <comptime> = 120
global GDK_BUTTON_PRIMARY: cint <comptime> = 1
global GDK_BUTTON_MIDDLE: cint <comptime> = 2
global GDK_BUTTON_SECONDARY: cint <comptime> = 3
global GDK_TYPE_BUTTON_EVENT: GType <cimport,nodecl,const>
global GDK_TYPE_CROSSING_EVENT: GType <cimport,nodecl,const>
global GDK_TYPE_DELETE_EVENT: GType <cimport,nodecl,const>
global GDK_TYPE_DND_EVENT: GType <cimport,nodecl,const>
global GDK_TYPE_FOCUS_EVENT: GType <cimport,nodecl,const>
global GDK_TYPE_GRAB_BROKEN_EVENT: GType <cimport,nodecl,const>
global GDK_TYPE_KEY_EVENT: GType <cimport,nodecl,const>
global GDK_TYPE_MOTION_EVENT: GType <cimport,nodecl,const>
global GDK_TYPE_PAD_EVENT: GType <cimport,nodecl,const>
global GDK_TYPE_PROXIMITY_EVENT: GType <cimport,nodecl,const>
global GDK_TYPE_SCROLL_EVENT: GType <cimport,nodecl,const>
global GDK_TYPE_TOUCH_EVENT: GType <cimport,nodecl,const>
global GDK_TYPE_TOUCHPAD_EVENT: GType <cimport,nodecl,const>
global GDK_TYPE_FRAME_CLOCK: GType <cimport,nodecl,const>
global GDK_TYPE_RECTANGLE: GType <cimport,nodecl,const>
global GDK_TYPE_MONITOR: GType <cimport,nodecl,const>
global GDK_TYPE_POPUP_LAYOUT: GType <cimport,nodecl,const>
global GDK_TYPE_SURFACE: GType <cimport,nodecl,const>
global GDK_TYPE_SEAT: GType <cimport,nodecl,const>
global GDK_TYPE_DISPLAY: GType <cimport,nodecl,const>
global GDK_TYPE_DISPLAY_MANAGER: GType <cimport,nodecl,const>
global GDK_TYPE_DRAG_SURFACE: GType <cimport,nodecl,const>
global GDK_TYPE_DRAW_CONTEXT: GType <cimport,nodecl,const>
global GDK_TYPE_DROP: GType <cimport,nodecl,const>
global GDK_TYPE_INPUT_SOURCE: GType <cimport,nodecl,const>
global GDK_TYPE_DEVICE_PAD_FEATURE: GType <cimport,nodecl,const>
global GDK_TYPE_DEVICE_TOOL_TYPE: GType <cimport,nodecl,const>
global GDK_TYPE_DRAG_CANCEL_REASON: GType <cimport,nodecl,const>
global GDK_TYPE_GRAVITY: GType <cimport,nodecl,const>
global GDK_TYPE_MODIFIER_TYPE: GType <cimport,nodecl,const>
global GDK_TYPE_GL_ERROR: GType <cimport,nodecl,const>
global GDK_TYPE_VULKAN_ERROR: GType <cimport,nodecl,const>
global GDK_TYPE_AXIS_USE: GType <cimport,nodecl,const>
global GDK_TYPE_AXIS_FLAGS: GType <cimport,nodecl,const>
global GDK_TYPE_DRAG_ACTION: GType <cimport,nodecl,const>
global GDK_TYPE_MEMORY_FORMAT: GType <cimport,nodecl,const>
global GDK_TYPE_EVENT_TYPE: GType <cimport,nodecl,const>
global GDK_TYPE_TOUCHPAD_GESTURE_PHASE: GType <cimport,nodecl,const>
global GDK_TYPE_SCROLL_DIRECTION: GType <cimport,nodecl,const>
global GDK_TYPE_NOTIFY_TYPE: GType <cimport,nodecl,const>
global GDK_TYPE_CROSSING_MODE: GType <cimport,nodecl,const>
global GDK_TYPE_KEY_MATCH: GType <cimport,nodecl,const>
global GDK_TYPE_FRAME_CLOCK_PHASE: GType <cimport,nodecl,const>
global GDK_TYPE_GL_API: GType <cimport,nodecl,const>
global GDK_TYPE_SUBPIXEL_LAYOUT: GType <cimport,nodecl,const>
global GDK_TYPE_PAINTABLE_FLAGS: GType <cimport,nodecl,const>
global GDK_TYPE_ANCHOR_HINTS: GType <cimport,nodecl,const>
global GDK_TYPE_SEAT_CAPABILITIES: GType <cimport,nodecl,const>
global GDK_TYPE_TEXTURE_ERROR: GType <cimport,nodecl,const>
global GDK_TYPE_SURFACE_EDGE: GType <cimport,nodecl,const>
global GDK_TYPE_FULLSCREEN_MODE: GType <cimport,nodecl,const>
global GDK_TYPE_TOPLEVEL_STATE: GType <cimport,nodecl,const>
global GDK_TYPE_TITLEBAR_GESTURE: GType <cimport,nodecl,const>
global GDK_TYPE_GL_CONTEXT: GType <cimport,nodecl,const>
global GDK_GL_ERROR: GQuark <cimport,nodecl,const>
global GDK_TYPE_GL_TEXTURE: GType <cimport,nodecl,const>
global GDK_KEY_VoidSymbol: cint <comptime> = 16777215
global GDK_KEY_BackSpace: cint <comptime> = 65288
global GDK_KEY_Tab: cint <comptime> = 65289
global GDK_KEY_Linefeed: cint <comptime> = 65290
global GDK_KEY_Clear: cint <comptime> = 65291
global GDK_KEY_Return: cint <comptime> = 65293
global GDK_KEY_Pause: cint <comptime> = 65299
global GDK_KEY_Scroll_Lock: cint <comptime> = 65300
global GDK_KEY_Sys_Req: cint <comptime> = 65301
global GDK_KEY_Escape: cint <comptime> = 65307
global GDK_KEY_Delete: cint <comptime> = 65535
global GDK_KEY_Multi_key: cint <comptime> = 65312
global GDK_KEY_Codeinput: cint <comptime> = 65335
global GDK_KEY_SingleCandidate: cint <comptime> = 65340
global GDK_KEY_MultipleCandidate: cint <comptime> = 65341
global GDK_KEY_PreviousCandidate: cint <comptime> = 65342
global GDK_KEY_Kanji: cint <comptime> = 65313
global GDK_KEY_Muhenkan: cint <comptime> = 65314
global GDK_KEY_Henkan_Mode: cint <comptime> = 65315
global GDK_KEY_Henkan: cint <comptime> = 65315
global GDK_KEY_Romaji: cint <comptime> = 65316
global GDK_KEY_Hiragana: cint <comptime> = 65317
global GDK_KEY_Katakana: cint <comptime> = 65318
global GDK_KEY_Hiragana_Katakana: cint <comptime> = 65319
global GDK_KEY_Zenkaku: cint <comptime> = 65320
global GDK_KEY_Hankaku: cint <comptime> = 65321
global GDK_KEY_Zenkaku_Hankaku: cint <comptime> = 65322
global GDK_KEY_Touroku: cint <comptime> = 65323
global GDK_KEY_Massyo: cint <comptime> = 65324
global GDK_KEY_Kana_Lock: cint <comptime> = 65325
global GDK_KEY_Kana_Shift: cint <comptime> = 65326
global GDK_KEY_Eisu_Shift: cint <comptime> = 65327
global GDK_KEY_Eisu_toggle: cint <comptime> = 65328
global GDK_KEY_Kanji_Bangou: cint <comptime> = 65335
global GDK_KEY_Zen_Koho: cint <comptime> = 65341
global GDK_KEY_Mae_Koho: cint <comptime> = 65342
global GDK_KEY_Home: cint <comptime> = 65360
global GDK_KEY_Left: cint <comptime> = 65361
global GDK_KEY_Up: cint <comptime> = 65362
global GDK_KEY_Right: cint <comptime> = 65363
global GDK_KEY_Down: cint <comptime> = 65364
global GDK_KEY_Prior: cint <comptime> = 65365
global GDK_KEY_Page_Up: cint <comptime> = 65365
global GDK_KEY_Next: cint <comptime> = 65366
global GDK_KEY_Page_Down: cint <comptime> = 65366
global GDK_KEY_End: cint <comptime> = 65367
global GDK_KEY_Begin: cint <comptime> = 65368
global GDK_KEY_Select: cint <comptime> = 65376
global GDK_KEY_Print: cint <comptime> = 65377
global GDK_KEY_Execute: cint <comptime> = 65378
global GDK_KEY_Insert: cint <comptime> = 65379
global GDK_KEY_Undo: cint <comptime> = 65381
global GDK_KEY_Redo: cint <comptime> = 65382
global GDK_KEY_Menu: cint <comptime> = 65383
global GDK_KEY_Find: cint <comptime> = 65384
global GDK_KEY_Cancel: cint <comptime> = 65385
global GDK_KEY_Help: cint <comptime> = 65386
global GDK_KEY_Break: cint <comptime> = 65387
global GDK_KEY_Mode_switch: cint <comptime> = 65406
global GDK_KEY_script_switch: cint <comptime> = 65406
global GDK_KEY_Num_Lock: cint <comptime> = 65407
global GDK_KEY_KP_Space: cint <comptime> = 65408
global GDK_KEY_KP_Tab: cint <comptime> = 65417
global GDK_KEY_KP_Enter: cint <comptime> = 65421
global GDK_KEY_KP_F1: cint <comptime> = 65425
global GDK_KEY_KP_F2: cint <comptime> = 65426
global GDK_KEY_KP_F3: cint <comptime> = 65427
global GDK_KEY_KP_F4: cint <comptime> = 65428
global GDK_KEY_KP_Home: cint <comptime> = 65429
global GDK_KEY_KP_Left: cint <comptime> = 65430
global GDK_KEY_KP_Up: cint <comptime> = 65431
global GDK_KEY_KP_Right: cint <comptime> = 65432
global GDK_KEY_KP_Down: cint <comptime> = 65433
global GDK_KEY_KP_Prior: cint <comptime> = 65434
global GDK_KEY_KP_Page_Up: cint <comptime> = 65434
global GDK_KEY_KP_Next: cint <comptime> = 65435
global GDK_KEY_KP_Page_Down: cint <comptime> = 65435
global GDK_KEY_KP_End: cint <comptime> = 65436
global GDK_KEY_KP_Begin: cint <comptime> = 65437
global GDK_KEY_KP_Insert: cint <comptime> = 65438
global GDK_KEY_KP_Delete: cint <comptime> = 65439
global GDK_KEY_KP_Equal: cint <comptime> = 65469
global GDK_KEY_KP_Multiply: cint <comptime> = 65450
global GDK_KEY_KP_Add: cint <comptime> = 65451
global GDK_KEY_KP_Separator: cint <comptime> = 65452
global GDK_KEY_KP_Subtract: cint <comptime> = 65453
global GDK_KEY_KP_Decimal: cint <comptime> = 65454
global GDK_KEY_KP_Divide: cint <comptime> = 65455
global GDK_KEY_KP_0: cint <comptime> = 65456
global GDK_KEY_KP_1: cint <comptime> = 65457
global GDK_KEY_KP_2: cint <comptime> = 65458
global GDK_KEY_KP_3: cint <comptime> = 65459
global GDK_KEY_KP_4: cint <comptime> = 65460
global GDK_KEY_KP_5: cint <comptime> = 65461
global GDK_KEY_KP_6: cint <comptime> = 65462
global GDK_KEY_KP_7: cint <comptime> = 65463
global GDK_KEY_KP_8: cint <comptime> = 65464
global GDK_KEY_KP_9: cint <comptime> = 65465
global GDK_KEY_F1: cint <comptime> = 65470
global GDK_KEY_F2: cint <comptime> = 65471
global GDK_KEY_F3: cint <comptime> = 65472
global GDK_KEY_F4: cint <comptime> = 65473
global GDK_KEY_F5: cint <comptime> = 65474
global GDK_KEY_F6: cint <comptime> = 65475
global GDK_KEY_F7: cint <comptime> = 65476
global GDK_KEY_F8: cint <comptime> = 65477
global GDK_KEY_F9: cint <comptime> = 65478
global GDK_KEY_F10: cint <comptime> = 65479
global GDK_KEY_F11: cint <comptime> = 65480
global GDK_KEY_L1: cint <comptime> = 65480
global GDK_KEY_F12: cint <comptime> = 65481
global GDK_KEY_L2: cint <comptime> = 65481
global GDK_KEY_F13: cint <comptime> = 65482
global GDK_KEY_L3: cint <comptime> = 65482
global GDK_KEY_F14: cint <comptime> = 65483
global GDK_KEY_L4: cint <comptime> = 65483
global GDK_KEY_F15: cint <comptime> = 65484
global GDK_KEY_L5: cint <comptime> = 65484
global GDK_KEY_F16: cint <comptime> = 65485
global GDK_KEY_L6: cint <comptime> = 65485
global GDK_KEY_F17: cint <comptime> = 65486
global GDK_KEY_L7: cint <comptime> = 65486
global GDK_KEY_F18: cint <comptime> = 65487
global GDK_KEY_L8: cint <comptime> = 65487
global GDK_KEY_F19: cint <comptime> = 65488
global GDK_KEY_L9: cint <comptime> = 65488
global GDK_KEY_F20: cint <comptime> = 65489
global GDK_KEY_L10: cint <comptime> = 65489
global GDK_KEY_F21: cint <comptime> = 65490
global GDK_KEY_R1: cint <comptime> = 65490
global GDK_KEY_F22: cint <comptime> = 65491
global GDK_KEY_R2: cint <comptime> = 65491
global GDK_KEY_F23: cint <comptime> = 65492
global GDK_KEY_R3: cint <comptime> = 65492
global GDK_KEY_F24: cint <comptime> = 65493
global GDK_KEY_R4: cint <comptime> = 65493
global GDK_KEY_F25: cint <comptime> = 65494
global GDK_KEY_R5: cint <comptime> = 65494
global GDK_KEY_F26: cint <comptime> = 65495
global GDK_KEY_R6: cint <comptime> = 65495
global GDK_KEY_F27: cint <comptime> = 65496
global GDK_KEY_R7: cint <comptime> = 65496
global GDK_KEY_F28: cint <comptime> = 65497
global GDK_KEY_R8: cint <comptime> = 65497
global GDK_KEY_F29: cint <comptime> = 65498
global GDK_KEY_R9: cint <comptime> = 65498
global GDK_KEY_F30: cint <comptime> = 65499
global GDK_KEY_R10: cint <comptime> = 65499
global GDK_KEY_F31: cint <comptime> = 65500
global GDK_KEY_R11: cint <comptime> = 65500
global GDK_KEY_F32: cint <comptime> = 65501
global GDK_KEY_R12: cint <comptime> = 65501
global GDK_KEY_F33: cint <comptime> = 65502
global GDK_KEY_R13: cint <comptime> = 65502
global GDK_KEY_F34: cint <comptime> = 65503
global GDK_KEY_R14: cint <comptime> = 65503
global GDK_KEY_F35: cint <comptime> = 65504
global GDK_KEY_R15: cint <comptime> = 65504
global GDK_KEY_Shift_L: cint <comptime> = 65505
global GDK_KEY_Shift_R: cint <comptime> = 65506
global GDK_KEY_Control_L: cint <comptime> = 65507
global GDK_KEY_Control_R: cint <comptime> = 65508
global GDK_KEY_Caps_Lock: cint <comptime> = 65509
global GDK_KEY_Shift_Lock: cint <comptime> = 65510
global GDK_KEY_Meta_L: cint <comptime> = 65511
global GDK_KEY_Meta_R: cint <comptime> = 65512
global GDK_KEY_Alt_L: cint <comptime> = 65513
global GDK_KEY_Alt_R: cint <comptime> = 65514
global GDK_KEY_Super_L: cint <comptime> = 65515
global GDK_KEY_Super_R: cint <comptime> = 65516
global GDK_KEY_Hyper_L: cint <comptime> = 65517
global GDK_KEY_Hyper_R: cint <comptime> = 65518
global GDK_KEY_ISO_Lock: cint <comptime> = 65025
global GDK_KEY_ISO_Level2_Latch: cint <comptime> = 65026
global GDK_KEY_ISO_Level3_Shift: cint <comptime> = 65027
global GDK_KEY_ISO_Level3_Latch: cint <comptime> = 65028
global GDK_KEY_ISO_Level3_Lock: cint <comptime> = 65029
global GDK_KEY_ISO_Level5_Shift: cint <comptime> = 65041
global GDK_KEY_ISO_Level5_Latch: cint <comptime> = 65042
global GDK_KEY_ISO_Level5_Lock: cint <comptime> = 65043
global GDK_KEY_ISO_Group_Shift: cint <comptime> = 65406
global GDK_KEY_ISO_Group_Latch: cint <comptime> = 65030
global GDK_KEY_ISO_Group_Lock: cint <comptime> = 65031
global GDK_KEY_ISO_Next_Group: cint <comptime> = 65032
global GDK_KEY_ISO_Next_Group_Lock: cint <comptime> = 65033
global GDK_KEY_ISO_Prev_Group: cint <comptime> = 65034
global GDK_KEY_ISO_Prev_Group_Lock: cint <comptime> = 65035
global GDK_KEY_ISO_First_Group: cint <comptime> = 65036
global GDK_KEY_ISO_First_Group_Lock: cint <comptime> = 65037
global GDK_KEY_ISO_Last_Group: cint <comptime> = 65038
global GDK_KEY_ISO_Last_Group_Lock: cint <comptime> = 65039
global GDK_KEY_ISO_Left_Tab: cint <comptime> = 65056
global GDK_KEY_ISO_Move_Line_Up: cint <comptime> = 65057
global GDK_KEY_ISO_Move_Line_Down: cint <comptime> = 65058
global GDK_KEY_ISO_Partial_Line_Up: cint <comptime> = 65059
global GDK_KEY_ISO_Partial_Line_Down: cint <comptime> = 65060
global GDK_KEY_ISO_Partial_Space_Left: cint <comptime> = 65061
global GDK_KEY_ISO_Partial_Space_Right: cint <comptime> = 65062
global GDK_KEY_ISO_Set_Margin_Left: cint <comptime> = 65063
global GDK_KEY_ISO_Set_Margin_Right: cint <comptime> = 65064
global GDK_KEY_ISO_Release_Margin_Left: cint <comptime> = 65065
global GDK_KEY_ISO_Release_Margin_Right: cint <comptime> = 65066
global GDK_KEY_ISO_Release_Both_Margins: cint <comptime> = 65067
global GDK_KEY_ISO_Fast_Cursor_Left: cint <comptime> = 65068
global GDK_KEY_ISO_Fast_Cursor_Right: cint <comptime> = 65069
global GDK_KEY_ISO_Fast_Cursor_Up: cint <comptime> = 65070
global GDK_KEY_ISO_Fast_Cursor_Down: cint <comptime> = 65071
global GDK_KEY_ISO_Continuous_Underline: cint <comptime> = 65072
global GDK_KEY_ISO_Discontinuous_Underline: cint <comptime> = 65073
global GDK_KEY_ISO_Emphasize: cint <comptime> = 65074
global GDK_KEY_ISO_Center_Object: cint <comptime> = 65075
global GDK_KEY_ISO_Enter: cint <comptime> = 65076
global GDK_KEY_dead_grave: cint <comptime> = 65104
global GDK_KEY_dead_acute: cint <comptime> = 65105
global GDK_KEY_dead_circumflex: cint <comptime> = 65106
global GDK_KEY_dead_tilde: cint <comptime> = 65107
global GDK_KEY_dead_perispomeni: cint <comptime> = 65107
global GDK_KEY_dead_macron: cint <comptime> = 65108
global GDK_KEY_dead_breve: cint <comptime> = 65109
global GDK_KEY_dead_abovedot: cint <comptime> = 65110
global GDK_KEY_dead_diaeresis: cint <comptime> = 65111
global GDK_KEY_dead_abovering: cint <comptime> = 65112
global GDK_KEY_dead_doubleacute: cint <comptime> = 65113
global GDK_KEY_dead_caron: cint <comptime> = 65114
global GDK_KEY_dead_cedilla: cint <comptime> = 65115
global GDK_KEY_dead_ogonek: cint <comptime> = 65116
global GDK_KEY_dead_iota: cint <comptime> = 65117
global GDK_KEY_dead_voiced_sound: cint <comptime> = 65118
global GDK_KEY_dead_semivoiced_sound: cint <comptime> = 65119
global GDK_KEY_dead_belowdot: cint <comptime> = 65120
global GDK_KEY_dead_hook: cint <comptime> = 65121
global GDK_KEY_dead_horn: cint <comptime> = 65122
global GDK_KEY_dead_stroke: cint <comptime> = 65123
global GDK_KEY_dead_abovecomma: cint <comptime> = 65124
global GDK_KEY_dead_psili: cint <comptime> = 65124
global GDK_KEY_dead_abovereversedcomma: cint <comptime> = 65125
global GDK_KEY_dead_dasia: cint <comptime> = 65125
global GDK_KEY_dead_doublegrave: cint <comptime> = 65126
global GDK_KEY_dead_belowring: cint <comptime> = 65127
global GDK_KEY_dead_belowmacron: cint <comptime> = 65128
global GDK_KEY_dead_belowcircumflex: cint <comptime> = 65129
global GDK_KEY_dead_belowtilde: cint <comptime> = 65130
global GDK_KEY_dead_belowbreve: cint <comptime> = 65131
global GDK_KEY_dead_belowdiaeresis: cint <comptime> = 65132
global GDK_KEY_dead_invertedbreve: cint <comptime> = 65133
global GDK_KEY_dead_belowcomma: cint <comptime> = 65134
global GDK_KEY_dead_currency: cint <comptime> = 65135
global GDK_KEY_dead_lowline: cint <comptime> = 65168
global GDK_KEY_dead_aboveverticalline: cint <comptime> = 65169
global GDK_KEY_dead_belowverticalline: cint <comptime> = 65170
global GDK_KEY_dead_longsolidusoverlay: cint <comptime> = 65171
global GDK_KEY_dead_a: cint <comptime> = 65152
global GDK_KEY_dead_A: cint <comptime> = 65153
global GDK_KEY_dead_e: cint <comptime> = 65154
global GDK_KEY_dead_E: cint <comptime> = 65155
global GDK_KEY_dead_i: cint <comptime> = 65156
global GDK_KEY_dead_I: cint <comptime> = 65157
global GDK_KEY_dead_o: cint <comptime> = 65158
global GDK_KEY_dead_O: cint <comptime> = 65159
global GDK_KEY_dead_u: cint <comptime> = 65160
global GDK_KEY_dead_U: cint <comptime> = 65161
global GDK_KEY_dead_small_schwa: cint <comptime> = 65162
global GDK_KEY_dead_capital_schwa: cint <comptime> = 65163
global GDK_KEY_dead_greek: cint <comptime> = 65164
global GDK_KEY_First_Virtual_Screen: cint <comptime> = 65232
global GDK_KEY_Prev_Virtual_Screen: cint <comptime> = 65233
global GDK_KEY_Next_Virtual_Screen: cint <comptime> = 65234
global GDK_KEY_Last_Virtual_Screen: cint <comptime> = 65236
global GDK_KEY_Terminate_Server: cint <comptime> = 65237
global GDK_KEY_AccessX_Enable: cint <comptime> = 65136
global GDK_KEY_AccessX_Feedback_Enable: cint <comptime> = 65137
global GDK_KEY_RepeatKeys_Enable: cint <comptime> = 65138
global GDK_KEY_SlowKeys_Enable: cint <comptime> = 65139
global GDK_KEY_BounceKeys_Enable: cint <comptime> = 65140
global GDK_KEY_StickyKeys_Enable: cint <comptime> = 65141
global GDK_KEY_MouseKeys_Enable: cint <comptime> = 65142
global GDK_KEY_MouseKeys_Accel_Enable: cint <comptime> = 65143
global GDK_KEY_Overlay1_Enable: cint <comptime> = 65144
global GDK_KEY_Overlay2_Enable: cint <comptime> = 65145
global GDK_KEY_AudibleBell_Enable: cint <comptime> = 65146
global GDK_KEY_Pointer_Left: cint <comptime> = 65248
global GDK_KEY_Pointer_Right: cint <comptime> = 65249
global GDK_KEY_Pointer_Up: cint <comptime> = 65250
global GDK_KEY_Pointer_Down: cint <comptime> = 65251
global GDK_KEY_Pointer_UpLeft: cint <comptime> = 65252
global GDK_KEY_Pointer_UpRight: cint <comptime> = 65253
global GDK_KEY_Pointer_DownLeft: cint <comptime> = 65254
global GDK_KEY_Pointer_DownRight: cint <comptime> = 65255
global GDK_KEY_Pointer_Button_Dflt: cint <comptime> = 65256
global GDK_KEY_Pointer_Button1: cint <comptime> = 65257
global GDK_KEY_Pointer_Button2: cint <comptime> = 65258
global GDK_KEY_Pointer_Button3: cint <comptime> = 65259
global GDK_KEY_Pointer_Button4: cint <comptime> = 65260
global GDK_KEY_Pointer_Button5: cint <comptime> = 65261
global GDK_KEY_Pointer_DblClick_Dflt: cint <comptime> = 65262
global GDK_KEY_Pointer_DblClick1: cint <comptime> = 65263
global GDK_KEY_Pointer_DblClick2: cint <comptime> = 65264
global GDK_KEY_Pointer_DblClick3: cint <comptime> = 65265
global GDK_KEY_Pointer_DblClick4: cint <comptime> = 65266
global GDK_KEY_Pointer_DblClick5: cint <comptime> = 65267
global GDK_KEY_Pointer_Drag_Dflt: cint <comptime> = 65268
global GDK_KEY_Pointer_Drag1: cint <comptime> = 65269
global GDK_KEY_Pointer_Drag2: cint <comptime> = 65270
global GDK_KEY_Pointer_Drag3: cint <comptime> = 65271
global GDK_KEY_Pointer_Drag4: cint <comptime> = 65272
global GDK_KEY_Pointer_Drag5: cint <comptime> = 65277
global GDK_KEY_Pointer_EnableKeys: cint <comptime> = 65273
global GDK_KEY_Pointer_Accelerate: cint <comptime> = 65274
global GDK_KEY_Pointer_DfltBtnNext: cint <comptime> = 65275
global GDK_KEY_Pointer_DfltBtnPrev: cint <comptime> = 65276
global GDK_KEY_ch: cint <comptime> = 65184
global GDK_KEY_Ch: cint <comptime> = 65185
global GDK_KEY_CH: cint <comptime> = 65186
global GDK_KEY_c_h: cint <comptime> = 65187
global GDK_KEY_C_h: cint <comptime> = 65188
global GDK_KEY_3270_Duplicate: cint <comptime> = 64769
global GDK_KEY_3270_FieldMark: cint <comptime> = 64770
global GDK_KEY_3270_Right2: cint <comptime> = 64771
global GDK_KEY_3270_Left2: cint <comptime> = 64772
global GDK_KEY_3270_BackTab: cint <comptime> = 64773
global GDK_KEY_3270_EraseEOF: cint <comptime> = 64774
global GDK_KEY_3270_EraseInput: cint <comptime> = 64775
global GDK_KEY_3270_Reset: cint <comptime> = 64776
global GDK_KEY_3270_Quit: cint <comptime> = 64777
global GDK_KEY_3270_PA1: cint <comptime> = 64778
global GDK_KEY_3270_PA2: cint <comptime> = 64779
global GDK_KEY_3270_PA3: cint <comptime> = 64780
global GDK_KEY_3270_Test: cint <comptime> = 64781
global GDK_KEY_3270_Attn: cint <comptime> = 64782
global GDK_KEY_3270_CursorBlink: cint <comptime> = 64783
global GDK_KEY_3270_AltCursor: cint <comptime> = 64784
global GDK_KEY_3270_KeyClick: cint <comptime> = 64785
global GDK_KEY_3270_Jump: cint <comptime> = 64786
global GDK_KEY_3270_Ident: cint <comptime> = 64787
global GDK_KEY_3270_Rule: cint <comptime> = 64788
global GDK_KEY_3270_Copy: cint <comptime> = 64789
global GDK_KEY_3270_Play: cint <comptime> = 64790
global GDK_KEY_3270_Setup: cint <comptime> = 64791
global GDK_KEY_3270_Record: cint <comptime> = 64792
global GDK_KEY_3270_ChangeScreen: cint <comptime> = 64793
global GDK_KEY_3270_DeleteWord: cint <comptime> = 64794
global GDK_KEY_3270_ExSelect: cint <comptime> = 64795
global GDK_KEY_3270_CursorSelect: cint <comptime> = 64796
global GDK_KEY_3270_PrintScreen: cint <comptime> = 64797
global GDK_KEY_3270_Enter: cint <comptime> = 64798
global GDK_KEY_space: cint <comptime> = 32
global GDK_KEY_exclam: cint <comptime> = 33
global GDK_KEY_quotedbl: cint <comptime> = 34
global GDK_KEY_numbersign: cint <comptime> = 35
global GDK_KEY_dollar: cint <comptime> = 36
global GDK_KEY_percent: cint <comptime> = 37
global GDK_KEY_ampersand: cint <comptime> = 38
global GDK_KEY_apostrophe: cint <comptime> = 39
global GDK_KEY_quoteright: cint <comptime> = 39
global GDK_KEY_parenleft: cint <comptime> = 40
global GDK_KEY_parenright: cint <comptime> = 41
global GDK_KEY_asterisk: cint <comptime> = 42
global GDK_KEY_plus: cint <comptime> = 43
global GDK_KEY_comma: cint <comptime> = 44
global GDK_KEY_minus: cint <comptime> = 45
global GDK_KEY_period: cint <comptime> = 46
global GDK_KEY_slash: cint <comptime> = 47
global GDK_KEY_0: cint <comptime> = 48
global GDK_KEY_1: cint <comptime> = 49
global GDK_KEY_2: cint <comptime> = 50
global GDK_KEY_3: cint <comptime> = 51
global GDK_KEY_4: cint <comptime> = 52
global GDK_KEY_5: cint <comptime> = 53
global GDK_KEY_6: cint <comptime> = 54
global GDK_KEY_7: cint <comptime> = 55
global GDK_KEY_8: cint <comptime> = 56
global GDK_KEY_9: cint <comptime> = 57
global GDK_KEY_colon: cint <comptime> = 58
global GDK_KEY_semicolon: cint <comptime> = 59
global GDK_KEY_less: cint <comptime> = 60
global GDK_KEY_equal: cint <comptime> = 61
global GDK_KEY_greater: cint <comptime> = 62
global GDK_KEY_question: cint <comptime> = 63
global GDK_KEY_at: cint <comptime> = 64
global GDK_KEY_A: cint <comptime> = 65
global GDK_KEY_B: cint <comptime> = 66
global GDK_KEY_C: cint <comptime> = 67
global GDK_KEY_D: cint <comptime> = 68
global GDK_KEY_E: cint <comptime> = 69
global GDK_KEY_F: cint <comptime> = 70
global GDK_KEY_G: cint <comptime> = 71
global GDK_KEY_I: cint <comptime> = 73
global GDK_KEY_J: cint <comptime> = 74
global GDK_KEY_K: cint <comptime> = 75
global GDK_KEY_L: cint <comptime> = 76
global GDK_KEY_M: cint <comptime> = 77
global GDK_KEY_N: cint <comptime> = 78
global GDK_KEY_O: cint <comptime> = 79
global GDK_KEY_P: cint <comptime> = 80
global GDK_KEY_Q: cint <comptime> = 81
global GDK_KEY_R: cint <comptime> = 82
global GDK_KEY_S: cint <comptime> = 83
global GDK_KEY_T: cint <comptime> = 84
global GDK_KEY_U: cint <comptime> = 85
global GDK_KEY_V: cint <comptime> = 86
global GDK_KEY_W: cint <comptime> = 87
global GDK_KEY_X: cint <comptime> = 88
global GDK_KEY_Y: cint <comptime> = 89
global GDK_KEY_Z: cint <comptime> = 90
global GDK_KEY_bracketleft: cint <comptime> = 91
global GDK_KEY_backslash: cint <comptime> = 92
global GDK_KEY_bracketright: cint <comptime> = 93
global GDK_KEY_asciicircum: cint <comptime> = 94
global GDK_KEY_underscore: cint <comptime> = 95
global GDK_KEY_grave: cint <comptime> = 96
global GDK_KEY_quoteleft: cint <comptime> = 96
global GDK_KEY_a: cint <comptime> = 97
global GDK_KEY_b: cint <comptime> = 98
global GDK_KEY_c: cint <comptime> = 99
global GDK_KEY_d: cint <comptime> = 100
global GDK_KEY_e: cint <comptime> = 101
global GDK_KEY_f: cint <comptime> = 102
global GDK_KEY_g: cint <comptime> = 103
global GDK_KEY_h: cint <comptime> = 104
global GDK_KEY_i: cint <comptime> = 105
global GDK_KEY_j: cint <comptime> = 106
global GDK_KEY_k: cint <comptime> = 107
global GDK_KEY_l: cint <comptime> = 108
global GDK_KEY_m: cint <comptime> = 109
global GDK_KEY_n: cint <comptime> = 110
global GDK_KEY_o: cint <comptime> = 111
global GDK_KEY_p: cint <comptime> = 112
global GDK_KEY_q: cint <comptime> = 113
global GDK_KEY_r: cint <comptime> = 114
global GDK_KEY_s: cint <comptime> = 115
global GDK_KEY_t: cint <comptime> = 116
global GDK_KEY_u: cint <comptime> = 117
global GDK_KEY_v: cint <comptime> = 118
global GDK_KEY_w: cint <comptime> = 119
global GDK_KEY_x: cint <comptime> = 120
global GDK_KEY_y: cint <comptime> = 121
global GDK_KEY_z: cint <comptime> = 122
global GDK_KEY_braceleft: cint <comptime> = 123
global GDK_KEY_bar: cint <comptime> = 124
global GDK_KEY_braceright: cint <comptime> = 125
global GDK_KEY_asciitilde: cint <comptime> = 126
global GDK_KEY_nobreakspace: cint <comptime> = 160
global GDK_KEY_exclamdown: cint <comptime> = 161
global GDK_KEY_cent: cint <comptime> = 162
global GDK_KEY_sterling: cint <comptime> = 163
global GDK_KEY_currency: cint <comptime> = 164
global GDK_KEY_yen: cint <comptime> = 165
global GDK_KEY_brokenbar: cint <comptime> = 166
global GDK_KEY_section: cint <comptime> = 167
global GDK_KEY_diaeresis: cint <comptime> = 168
global GDK_KEY_copyright: cint <comptime> = 169
global GDK_KEY_ordfeminine: cint <comptime> = 170
global GDK_KEY_guillemotleft: cint <comptime> = 171
global GDK_KEY_notsign: cint <comptime> = 172
global GDK_KEY_hyphen: cint <comptime> = 173
global GDK_KEY_registered: cint <comptime> = 174
global GDK_KEY_macron: cint <comptime> = 175
global GDK_KEY_degree: cint <comptime> = 176
global GDK_KEY_plusminus: cint <comptime> = 177
global GDK_KEY_twosuperior: cint <comptime> = 178
global GDK_KEY_threesuperior: cint <comptime> = 179
global GDK_KEY_acute: cint <comptime> = 180
global GDK_KEY_mu: cint <comptime> = 181
global GDK_KEY_paragraph: cint <comptime> = 182
global GDK_KEY_periodcentered: cint <comptime> = 183
global GDK_KEY_cedilla: cint <comptime> = 184
global GDK_KEY_onesuperior: cint <comptime> = 185
global GDK_KEY_masculine: cint <comptime> = 186
global GDK_KEY_guillemotright: cint <comptime> = 187
global GDK_KEY_onequarter: cint <comptime> = 188
global GDK_KEY_onehalf: cint <comptime> = 189
global GDK_KEY_threequarters: cint <comptime> = 190
global GDK_KEY_questiondown: cint <comptime> = 191
global GDK_KEY_Agrave: cint <comptime> = 192
global GDK_KEY_Aacute: cint <comptime> = 193
global GDK_KEY_Acircumflex: cint <comptime> = 194
global GDK_KEY_Atilde: cint <comptime> = 195
global GDK_KEY_Adiaeresis: cint <comptime> = 196
global GDK_KEY_Aring: cint <comptime> = 197
global GDK_KEY_AE: cint <comptime> = 198
global GDK_KEY_Ccedilla: cint <comptime> = 199
global GDK_KEY_Egrave: cint <comptime> = 200
global GDK_KEY_Eacute: cint <comptime> = 201
global GDK_KEY_Ecircumflex: cint <comptime> = 202
global GDK_KEY_Ediaeresis: cint <comptime> = 203
global GDK_KEY_Igrave: cint <comptime> = 204
global GDK_KEY_Iacute: cint <comptime> = 205
global GDK_KEY_Icircumflex: cint <comptime> = 206
global GDK_KEY_Idiaeresis: cint <comptime> = 207
global GDK_KEY_ETH: cint <comptime> = 208
global GDK_KEY_Eth: cint <comptime> = 208
global GDK_KEY_Ntilde: cint <comptime> = 209
global GDK_KEY_Ograve: cint <comptime> = 210
global GDK_KEY_Oacute: cint <comptime> = 211
global GDK_KEY_Ocircumflex: cint <comptime> = 212
global GDK_KEY_Otilde: cint <comptime> = 213
global GDK_KEY_Odiaeresis: cint <comptime> = 214
global GDK_KEY_multiply: cint <comptime> = 215
global GDK_KEY_Oslash: cint <comptime> = 216
global GDK_KEY_Ooblique: cint <comptime> = 216
global GDK_KEY_Ugrave: cint <comptime> = 217
global GDK_KEY_Uacute: cint <comptime> = 218
global GDK_KEY_Ucircumflex: cint <comptime> = 219
global GDK_KEY_Udiaeresis: cint <comptime> = 220
global GDK_KEY_Yacute: cint <comptime> = 221
global GDK_KEY_THORN: cint <comptime> = 222
global GDK_KEY_Thorn: cint <comptime> = 222
global GDK_KEY_ssharp: cint <comptime> = 223
global GDK_KEY_agrave: cint <comptime> = 224
global GDK_KEY_aacute: cint <comptime> = 225
global GDK_KEY_acircumflex: cint <comptime> = 226
global GDK_KEY_atilde: cint <comptime> = 227
global GDK_KEY_adiaeresis: cint <comptime> = 228
global GDK_KEY_aring: cint <comptime> = 229
global GDK_KEY_ae: cint <comptime> = 230
global GDK_KEY_ccedilla: cint <comptime> = 231
global GDK_KEY_egrave: cint <comptime> = 232
global GDK_KEY_eacute: cint <comptime> = 233
global GDK_KEY_ecircumflex: cint <comptime> = 234
global GDK_KEY_ediaeresis: cint <comptime> = 235
global GDK_KEY_igrave: cint <comptime> = 236
global GDK_KEY_iacute: cint <comptime> = 237
global GDK_KEY_icircumflex: cint <comptime> = 238
global GDK_KEY_idiaeresis: cint <comptime> = 239
global GDK_KEY_eth: cint <comptime> = 240
global GDK_KEY_ntilde: cint <comptime> = 241
global GDK_KEY_ograve: cint <comptime> = 242
global GDK_KEY_oacute: cint <comptime> = 243
global GDK_KEY_ocircumflex: cint <comptime> = 244
global GDK_KEY_otilde: cint <comptime> = 245
global GDK_KEY_odiaeresis: cint <comptime> = 246
global GDK_KEY_division: cint <comptime> = 247
global GDK_KEY_oslash: cint <comptime> = 248
global GDK_KEY_ooblique: cint <comptime> = 248
global GDK_KEY_ugrave: cint <comptime> = 249
global GDK_KEY_uacute: cint <comptime> = 250
global GDK_KEY_ucircumflex: cint <comptime> = 251
global GDK_KEY_udiaeresis: cint <comptime> = 252
global GDK_KEY_yacute: cint <comptime> = 253
global GDK_KEY_thorn: cint <comptime> = 254
global GDK_KEY_ydiaeresis: cint <comptime> = 255
global GDK_KEY_Aogonek: cint <comptime> = 417
global GDK_KEY_breve: cint <comptime> = 418
global GDK_KEY_Lstroke: cint <comptime> = 419
global GDK_KEY_Lcaron: cint <comptime> = 421
global GDK_KEY_Sacute: cint <comptime> = 422
global GDK_KEY_Scaron: cint <comptime> = 425
global GDK_KEY_Scedilla: cint <comptime> = 426
global GDK_KEY_Tcaron: cint <comptime> = 427
global GDK_KEY_Zacute: cint <comptime> = 428
global GDK_KEY_Zcaron: cint <comptime> = 430
global GDK_KEY_Zabovedot: cint <comptime> = 431
global GDK_KEY_aogonek: cint <comptime> = 433
global GDK_KEY_ogonek: cint <comptime> = 434
global GDK_KEY_lstroke: cint <comptime> = 435
global GDK_KEY_lcaron: cint <comptime> = 437
global GDK_KEY_sacute: cint <comptime> = 438
global GDK_KEY_caron: cint <comptime> = 439
global GDK_KEY_scaron: cint <comptime> = 441
global GDK_KEY_scedilla: cint <comptime> = 442
global GDK_KEY_tcaron: cint <comptime> = 443
global GDK_KEY_zacute: cint <comptime> = 444
global GDK_KEY_doubleacute: cint <comptime> = 445
global GDK_KEY_zcaron: cint <comptime> = 446
global GDK_KEY_zabovedot: cint <comptime> = 447
global GDK_KEY_Racute: cint <comptime> = 448
global GDK_KEY_Abreve: cint <comptime> = 451
global GDK_KEY_Lacute: cint <comptime> = 453
global GDK_KEY_Cacute: cint <comptime> = 454
global GDK_KEY_Ccaron: cint <comptime> = 456
global GDK_KEY_Eogonek: cint <comptime> = 458
global GDK_KEY_Ecaron: cint <comptime> = 460
global GDK_KEY_Dcaron: cint <comptime> = 463
global GDK_KEY_Dstroke: cint <comptime> = 464
global GDK_KEY_Nacute: cint <comptime> = 465
global GDK_KEY_Ncaron: cint <comptime> = 466
global GDK_KEY_Odoubleacute: cint <comptime> = 469
global GDK_KEY_Rcaron: cint <comptime> = 472
global GDK_KEY_Uring: cint <comptime> = 473
global GDK_KEY_Udoubleacute: cint <comptime> = 475
global GDK_KEY_Tcedilla: cint <comptime> = 478
global GDK_KEY_racute: cint <comptime> = 480
global GDK_KEY_abreve: cint <comptime> = 483
global GDK_KEY_lacute: cint <comptime> = 485
global GDK_KEY_cacute: cint <comptime> = 486
global GDK_KEY_ccaron: cint <comptime> = 488
global GDK_KEY_eogonek: cint <comptime> = 490
global GDK_KEY_ecaron: cint <comptime> = 492
global GDK_KEY_dcaron: cint <comptime> = 495
global GDK_KEY_dstroke: cint <comptime> = 496
global GDK_KEY_nacute: cint <comptime> = 497
global GDK_KEY_ncaron: cint <comptime> = 498
global GDK_KEY_odoubleacute: cint <comptime> = 501
global GDK_KEY_rcaron: cint <comptime> = 504
global GDK_KEY_uring: cint <comptime> = 505
global GDK_KEY_udoubleacute: cint <comptime> = 507
global GDK_KEY_tcedilla: cint <comptime> = 510
global GDK_KEY_abovedot: cint <comptime> = 511
global GDK_KEY_Hstroke: cint <comptime> = 673
global GDK_KEY_Hcircumflex: cint <comptime> = 678
global GDK_KEY_Iabovedot: cint <comptime> = 681
global GDK_KEY_Gbreve: cint <comptime> = 683
global GDK_KEY_Jcircumflex: cint <comptime> = 684
global GDK_KEY_hstroke: cint <comptime> = 689
global GDK_KEY_hcircumflex: cint <comptime> = 694
global GDK_KEY_idotless: cint <comptime> = 697
global GDK_KEY_gbreve: cint <comptime> = 699
global GDK_KEY_jcircumflex: cint <comptime> = 700
global GDK_KEY_Cabovedot: cint <comptime> = 709
global GDK_KEY_Ccircumflex: cint <comptime> = 710
global GDK_KEY_Gabovedot: cint <comptime> = 725
global GDK_KEY_Gcircumflex: cint <comptime> = 728
global GDK_KEY_Ubreve: cint <comptime> = 733
global GDK_KEY_Scircumflex: cint <comptime> = 734
global GDK_KEY_cabovedot: cint <comptime> = 741
global GDK_KEY_ccircumflex: cint <comptime> = 742
global GDK_KEY_gabovedot: cint <comptime> = 757
global GDK_KEY_gcircumflex: cint <comptime> = 760
global GDK_KEY_ubreve: cint <comptime> = 765
global GDK_KEY_scircumflex: cint <comptime> = 766
global GDK_KEY_kra: cint <comptime> = 930
global GDK_KEY_kappa: cint <comptime> = 930
global GDK_KEY_Rcedilla: cint <comptime> = 931
global GDK_KEY_Itilde: cint <comptime> = 933
global GDK_KEY_Lcedilla: cint <comptime> = 934
global GDK_KEY_Emacron: cint <comptime> = 938
global GDK_KEY_Gcedilla: cint <comptime> = 939
global GDK_KEY_Tslash: cint <comptime> = 940
global GDK_KEY_rcedilla: cint <comptime> = 947
global GDK_KEY_itilde: cint <comptime> = 949
global GDK_KEY_lcedilla: cint <comptime> = 950
global GDK_KEY_emacron: cint <comptime> = 954
global GDK_KEY_gcedilla: cint <comptime> = 955
global GDK_KEY_tslash: cint <comptime> = 956
global GDK_KEY_ENG: cint <comptime> = 957
global GDK_KEY_eng: cint <comptime> = 959
global GDK_KEY_Amacron: cint <comptime> = 960
global GDK_KEY_Iogonek: cint <comptime> = 967
global GDK_KEY_Eabovedot: cint <comptime> = 972
global GDK_KEY_Imacron: cint <comptime> = 975
global GDK_KEY_Ncedilla: cint <comptime> = 977
global GDK_KEY_Omacron: cint <comptime> = 978
global GDK_KEY_Kcedilla: cint <comptime> = 979
global GDK_KEY_Uogonek: cint <comptime> = 985
global GDK_KEY_Utilde: cint <comptime> = 989
global GDK_KEY_Umacron: cint <comptime> = 990
global GDK_KEY_amacron: cint <comptime> = 992
global GDK_KEY_iogonek: cint <comptime> = 999
global GDK_KEY_eabovedot: cint <comptime> = 1004
global GDK_KEY_imacron: cint <comptime> = 1007
global GDK_KEY_ncedilla: cint <comptime> = 1009
global GDK_KEY_omacron: cint <comptime> = 1010
global GDK_KEY_kcedilla: cint <comptime> = 1011
global GDK_KEY_uogonek: cint <comptime> = 1017
global GDK_KEY_utilde: cint <comptime> = 1021
global GDK_KEY_umacron: cint <comptime> = 1022
global GDK_KEY_Wcircumflex: cint <comptime> = 16777588
global GDK_KEY_wcircumflex: cint <comptime> = 16777589
global GDK_KEY_Ycircumflex: cint <comptime> = 16777590
global GDK_KEY_ycircumflex: cint <comptime> = 16777591
global GDK_KEY_Babovedot: cint <comptime> = 16784898
global GDK_KEY_babovedot: cint <comptime> = 16784899
global GDK_KEY_Dabovedot: cint <comptime> = 16784906
global GDK_KEY_dabovedot: cint <comptime> = 16784907
global GDK_KEY_Fabovedot: cint <comptime> = 16784926
global GDK_KEY_fabovedot: cint <comptime> = 16784927
global GDK_KEY_Mabovedot: cint <comptime> = 16784960
global GDK_KEY_mabovedot: cint <comptime> = 16784961
global GDK_KEY_Pabovedot: cint <comptime> = 16784982
global GDK_KEY_pabovedot: cint <comptime> = 16784983
global GDK_KEY_Sabovedot: cint <comptime> = 16784992
global GDK_KEY_sabovedot: cint <comptime> = 16784993
global GDK_KEY_Tabovedot: cint <comptime> = 16785002
global GDK_KEY_tabovedot: cint <comptime> = 16785003
global GDK_KEY_Wgrave: cint <comptime> = 16785024
global GDK_KEY_wgrave: cint <comptime> = 16785025
global GDK_KEY_Wacute: cint <comptime> = 16785026
global GDK_KEY_wacute: cint <comptime> = 16785027
global GDK_KEY_Wdiaeresis: cint <comptime> = 16785028
global GDK_KEY_wdiaeresis: cint <comptime> = 16785029
global GDK_KEY_Ygrave: cint <comptime> = 16785138
global GDK_KEY_ygrave: cint <comptime> = 16785139
global GDK_KEY_OE: cint <comptime> = 5052
global GDK_KEY_oe: cint <comptime> = 5053
global GDK_KEY_Ydiaeresis: cint <comptime> = 5054
global GDK_KEY_overline: cint <comptime> = 1150
global GDK_KEY_kana_fullstop: cint <comptime> = 1185
global GDK_KEY_kana_openingbracket: cint <comptime> = 1186
global GDK_KEY_kana_closingbracket: cint <comptime> = 1187
global GDK_KEY_kana_comma: cint <comptime> = 1188
global GDK_KEY_kana_conjunctive: cint <comptime> = 1189
global GDK_KEY_kana_middledot: cint <comptime> = 1189
global GDK_KEY_kana_WO: cint <comptime> = 1190
global GDK_KEY_kana_a: cint <comptime> = 1191
global GDK_KEY_kana_i: cint <comptime> = 1192
global GDK_KEY_kana_u: cint <comptime> = 1193
global GDK_KEY_kana_e: cint <comptime> = 1194
global GDK_KEY_kana_o: cint <comptime> = 1195
global GDK_KEY_kana_ya: cint <comptime> = 1196
global GDK_KEY_kana_yu: cint <comptime> = 1197
global GDK_KEY_kana_yo: cint <comptime> = 1198
global GDK_KEY_kana_tsu: cint <comptime> = 1199
global GDK_KEY_kana_tu: cint <comptime> = 1199
global GDK_KEY_prolongedsound: cint <comptime> = 1200
global GDK_KEY_kana_A: cint <comptime> = 1201
global GDK_KEY_kana_I: cint <comptime> = 1202
global GDK_KEY_kana_U: cint <comptime> = 1203
global GDK_KEY_kana_E: cint <comptime> = 1204
global GDK_KEY_kana_O: cint <comptime> = 1205
global GDK_KEY_kana_KA: cint <comptime> = 1206
global GDK_KEY_kana_KI: cint <comptime> = 1207
global GDK_KEY_kana_KU: cint <comptime> = 1208
global GDK_KEY_kana_KE: cint <comptime> = 1209
global GDK_KEY_kana_KO: cint <comptime> = 1210
global GDK_KEY_kana_SA: cint <comptime> = 1211
global GDK_KEY_kana_SHI: cint <comptime> = 1212
global GDK_KEY_kana_SU: cint <comptime> = 1213
global GDK_KEY_kana_SE: cint <comptime> = 1214
global GDK_KEY_kana_SO: cint <comptime> = 1215
global GDK_KEY_kana_TA: cint <comptime> = 1216
global GDK_KEY_kana_CHI: cint <comptime> = 1217
global GDK_KEY_kana_TI: cint <comptime> = 1217
global GDK_KEY_kana_TSU: cint <comptime> = 1218
global GDK_KEY_kana_TU: cint <comptime> = 1218
global GDK_KEY_kana_TE: cint <comptime> = 1219
global GDK_KEY_kana_TO: cint <comptime> = 1220
global GDK_KEY_kana_NA: cint <comptime> = 1221
global GDK_KEY_kana_NI: cint <comptime> = 1222
global GDK_KEY_kana_NU: cint <comptime> = 1223
global GDK_KEY_kana_NE: cint <comptime> = 1224
global GDK_KEY_kana_NO: cint <comptime> = 1225
global GDK_KEY_kana_HA: cint <comptime> = 1226
global GDK_KEY_kana_HI: cint <comptime> = 1227
global GDK_KEY_kana_FU: cint <comptime> = 1228
global GDK_KEY_kana_HU: cint <comptime> = 1228
global GDK_KEY_kana_HE: cint <comptime> = 1229
global GDK_KEY_kana_HO: cint <comptime> = 1230
global GDK_KEY_kana_MA: cint <comptime> = 1231
global GDK_KEY_kana_MI: cint <comptime> = 1232
global GDK_KEY_kana_MU: cint <comptime> = 1233
global GDK_KEY_kana_ME: cint <comptime> = 1234
global GDK_KEY_kana_MO: cint <comptime> = 1235
global GDK_KEY_kana_YA: cint <comptime> = 1236
global GDK_KEY_kana_YU: cint <comptime> = 1237
global GDK_KEY_kana_YO: cint <comptime> = 1238
global GDK_KEY_kana_RA: cint <comptime> = 1239
global GDK_KEY_kana_RI: cint <comptime> = 1240
global GDK_KEY_kana_RU: cint <comptime> = 1241
global GDK_KEY_kana_RE: cint <comptime> = 1242
global GDK_KEY_kana_RO: cint <comptime> = 1243
global GDK_KEY_kana_WA: cint <comptime> = 1244
global GDK_KEY_kana_N: cint <comptime> = 1245
global GDK_KEY_voicedsound: cint <comptime> = 1246
global GDK_KEY_semivoicedsound: cint <comptime> = 1247
global GDK_KEY_kana_switch: cint <comptime> = 65406
global GDK_KEY_Farsi_0: cint <comptime> = 16778992
global GDK_KEY_Farsi_1: cint <comptime> = 16778993
global GDK_KEY_Farsi_2: cint <comptime> = 16778994
global GDK_KEY_Farsi_3: cint <comptime> = 16778995
global GDK_KEY_Farsi_4: cint <comptime> = 16778996
global GDK_KEY_Farsi_5: cint <comptime> = 16778997
global GDK_KEY_Farsi_6: cint <comptime> = 16778998
global GDK_KEY_Farsi_7: cint <comptime> = 16778999
global GDK_KEY_Farsi_8: cint <comptime> = 16779000
global GDK_KEY_Farsi_9: cint <comptime> = 16779001
global GDK_KEY_Arabic_percent: cint <comptime> = 16778858
global GDK_KEY_Arabic_superscript_alef: cint <comptime> = 16778864
global GDK_KEY_Arabic_tteh: cint <comptime> = 16778873
global GDK_KEY_Arabic_peh: cint <comptime> = 16778878
global GDK_KEY_Arabic_tcheh: cint <comptime> = 16778886
global GDK_KEY_Arabic_ddal: cint <comptime> = 16778888
global GDK_KEY_Arabic_rreh: cint <comptime> = 16778897
global GDK_KEY_Arabic_comma: cint <comptime> = 1452
global GDK_KEY_Arabic_fullstop: cint <comptime> = 16778964
global GDK_KEY_Arabic_0: cint <comptime> = 16778848
global GDK_KEY_Arabic_1: cint <comptime> = 16778849
global GDK_KEY_Arabic_2: cint <comptime> = 16778850
global GDK_KEY_Arabic_3: cint <comptime> = 16778851
global GDK_KEY_Arabic_4: cint <comptime> = 16778852
global GDK_KEY_Arabic_5: cint <comptime> = 16778853
global GDK_KEY_Arabic_6: cint <comptime> = 16778854
global GDK_KEY_Arabic_7: cint <comptime> = 16778855
global GDK_KEY_Arabic_8: cint <comptime> = 16778856
global GDK_KEY_Arabic_9: cint <comptime> = 16778857
global GDK_KEY_Arabic_semicolon: cint <comptime> = 1467
global GDK_KEY_Arabic_question_mark: cint <comptime> = 1471
global GDK_KEY_Arabic_hamza: cint <comptime> = 1473
global GDK_KEY_Arabic_maddaonalef: cint <comptime> = 1474
global GDK_KEY_Arabic_hamzaonalef: cint <comptime> = 1475
global GDK_KEY_Arabic_hamzaonwaw: cint <comptime> = 1476
global GDK_KEY_Arabic_hamzaunderalef: cint <comptime> = 1477
global GDK_KEY_Arabic_hamzaonyeh: cint <comptime> = 1478
global GDK_KEY_Arabic_alef: cint <comptime> = 1479
global GDK_KEY_Arabic_beh: cint <comptime> = 1480
global GDK_KEY_Arabic_tehmarbuta: cint <comptime> = 1481
global GDK_KEY_Arabic_teh: cint <comptime> = 1482
global GDK_KEY_Arabic_theh: cint <comptime> = 1483
global GDK_KEY_Arabic_jeem: cint <comptime> = 1484
global GDK_KEY_Arabic_hah: cint <comptime> = 1485
global GDK_KEY_Arabic_khah: cint <comptime> = 1486
global GDK_KEY_Arabic_dal: cint <comptime> = 1487
global GDK_KEY_Arabic_thal: cint <comptime> = 1488
global GDK_KEY_Arabic_ra: cint <comptime> = 1489
global GDK_KEY_Arabic_zain: cint <comptime> = 1490
global GDK_KEY_Arabic_seen: cint <comptime> = 1491
global GDK_KEY_Arabic_sheen: cint <comptime> = 1492
global GDK_KEY_Arabic_sad: cint <comptime> = 1493
global GDK_KEY_Arabic_dad: cint <comptime> = 1494
global GDK_KEY_Arabic_tah: cint <comptime> = 1495
global GDK_KEY_Arabic_zah: cint <comptime> = 1496
global GDK_KEY_Arabic_ain: cint <comptime> = 1497
global GDK_KEY_Arabic_ghain: cint <comptime> = 1498
global GDK_KEY_Arabic_tatweel: cint <comptime> = 1504
global GDK_KEY_Arabic_feh: cint <comptime> = 1505
global GDK_KEY_Arabic_qaf: cint <comptime> = 1506
global GDK_KEY_Arabic_kaf: cint <comptime> = 1507
global GDK_KEY_Arabic_lam: cint <comptime> = 1508
global GDK_KEY_Arabic_meem: cint <comptime> = 1509
global GDK_KEY_Arabic_noon: cint <comptime> = 1510
global GDK_KEY_Arabic_ha: cint <comptime> = 1511
global GDK_KEY_Arabic_heh: cint <comptime> = 1511
global GDK_KEY_Arabic_waw: cint <comptime> = 1512
global GDK_KEY_Arabic_alefmaksura: cint <comptime> = 1513
global GDK_KEY_Arabic_yeh: cint <comptime> = 1514
global GDK_KEY_Arabic_fathatan: cint <comptime> = 1515
global GDK_KEY_Arabic_dammatan: cint <comptime> = 1516
global GDK_KEY_Arabic_kasratan: cint <comptime> = 1517
global GDK_KEY_Arabic_fatha: cint <comptime> = 1518
global GDK_KEY_Arabic_damma: cint <comptime> = 1519
global GDK_KEY_Arabic_kasra: cint <comptime> = 1520
global GDK_KEY_Arabic_shadda: cint <comptime> = 1521
global GDK_KEY_Arabic_sukun: cint <comptime> = 1522
global GDK_KEY_Arabic_madda_above: cint <comptime> = 16778835
global GDK_KEY_Arabic_hamza_above: cint <comptime> = 16778836
global GDK_KEY_Arabic_hamza_below: cint <comptime> = 16778837
global GDK_KEY_Arabic_jeh: cint <comptime> = 16778904
global GDK_KEY_Arabic_veh: cint <comptime> = 16778916
global GDK_KEY_Arabic_keheh: cint <comptime> = 16778921
global GDK_KEY_Arabic_gaf: cint <comptime> = 16778927
global GDK_KEY_Arabic_noon_ghunna: cint <comptime> = 16778938
global GDK_KEY_Arabic_heh_doachashmee: cint <comptime> = 16778942
global GDK_KEY_Farsi_yeh: cint <comptime> = 16778956
global GDK_KEY_Arabic_farsi_yeh: cint <comptime> = 16778956
global GDK_KEY_Arabic_yeh_baree: cint <comptime> = 16778962
global GDK_KEY_Arabic_heh_goal: cint <comptime> = 16778945
global GDK_KEY_Arabic_switch: cint <comptime> = 65406
global GDK_KEY_Cyrillic_GHE_bar: cint <comptime> = 16778386
global GDK_KEY_Cyrillic_ghe_bar: cint <comptime> = 16778387
global GDK_KEY_Cyrillic_ZHE_descender: cint <comptime> = 16778390
global GDK_KEY_Cyrillic_zhe_descender: cint <comptime> = 16778391
global GDK_KEY_Cyrillic_KA_descender: cint <comptime> = 16778394
global GDK_KEY_Cyrillic_ka_descender: cint <comptime> = 16778395
global GDK_KEY_Cyrillic_KA_vertstroke: cint <comptime> = 16778396
global GDK_KEY_Cyrillic_ka_vertstroke: cint <comptime> = 16778397
global GDK_KEY_Cyrillic_EN_descender: cint <comptime> = 16778402
global GDK_KEY_Cyrillic_en_descender: cint <comptime> = 16778403
global GDK_KEY_Cyrillic_U_straight: cint <comptime> = 16778414
global GDK_KEY_Cyrillic_u_straight: cint <comptime> = 16778415
global GDK_KEY_Cyrillic_U_straight_bar: cint <comptime> = 16778416
global GDK_KEY_Cyrillic_u_straight_bar: cint <comptime> = 16778417
global GDK_KEY_Cyrillic_HA_descender: cint <comptime> = 16778418
global GDK_KEY_Cyrillic_ha_descender: cint <comptime> = 16778419
global GDK_KEY_Cyrillic_CHE_descender: cint <comptime> = 16778422
global GDK_KEY_Cyrillic_che_descender: cint <comptime> = 16778423
global GDK_KEY_Cyrillic_CHE_vertstroke: cint <comptime> = 16778424
global GDK_KEY_Cyrillic_che_vertstroke: cint <comptime> = 16778425
global GDK_KEY_Cyrillic_SHHA: cint <comptime> = 16778426
global GDK_KEY_Cyrillic_shha: cint <comptime> = 16778427
global GDK_KEY_Cyrillic_SCHWA: cint <comptime> = 16778456
global GDK_KEY_Cyrillic_schwa: cint <comptime> = 16778457
global GDK_KEY_Cyrillic_I_macron: cint <comptime> = 16778466
global GDK_KEY_Cyrillic_i_macron: cint <comptime> = 16778467
global GDK_KEY_Cyrillic_O_bar: cint <comptime> = 16778472
global GDK_KEY_Cyrillic_o_bar: cint <comptime> = 16778473
global GDK_KEY_Cyrillic_U_macron: cint <comptime> = 16778478
global GDK_KEY_Cyrillic_u_macron: cint <comptime> = 16778479
global GDK_KEY_Serbian_dje: cint <comptime> = 1697
global GDK_KEY_Macedonia_gje: cint <comptime> = 1698
global GDK_KEY_Cyrillic_io: cint <comptime> = 1699
global GDK_KEY_Ukrainian_ie: cint <comptime> = 1700
global GDK_KEY_Ukranian_je: cint <comptime> = 1700
global GDK_KEY_Macedonia_dse: cint <comptime> = 1701
global GDK_KEY_Ukrainian_i: cint <comptime> = 1702
global GDK_KEY_Ukranian_i: cint <comptime> = 1702
global GDK_KEY_Ukrainian_yi: cint <comptime> = 1703
global GDK_KEY_Ukranian_yi: cint <comptime> = 1703
global GDK_KEY_Cyrillic_je: cint <comptime> = 1704
global GDK_KEY_Serbian_je: cint <comptime> = 1704
global GDK_KEY_Cyrillic_lje: cint <comptime> = 1705
global GDK_KEY_Serbian_lje: cint <comptime> = 1705
global GDK_KEY_Cyrillic_nje: cint <comptime> = 1706
global GDK_KEY_Serbian_nje: cint <comptime> = 1706
global GDK_KEY_Serbian_tshe: cint <comptime> = 1707
global GDK_KEY_Macedonia_kje: cint <comptime> = 1708
global GDK_KEY_Ukrainian_ghe_with_upturn: cint <comptime> = 1709
global GDK_KEY_Byelorussian_shortu: cint <comptime> = 1710
global GDK_KEY_Cyrillic_dzhe: cint <comptime> = 1711
global GDK_KEY_Serbian_dze: cint <comptime> = 1711
global GDK_KEY_numerosign: cint <comptime> = 1712
global GDK_KEY_Serbian_DJE: cint <comptime> = 1713
global GDK_KEY_Macedonia_GJE: cint <comptime> = 1714
global GDK_KEY_Cyrillic_IO: cint <comptime> = 1715
global GDK_KEY_Ukrainian_IE: cint <comptime> = 1716
global GDK_KEY_Ukranian_JE: cint <comptime> = 1716
global GDK_KEY_Macedonia_DSE: cint <comptime> = 1717
global GDK_KEY_Ukrainian_I: cint <comptime> = 1718
global GDK_KEY_Ukranian_I: cint <comptime> = 1718
global GDK_KEY_Ukrainian_YI: cint <comptime> = 1719
global GDK_KEY_Ukranian_YI: cint <comptime> = 1719
global GDK_KEY_Cyrillic_JE: cint <comptime> = 1720
global GDK_KEY_Serbian_JE: cint <comptime> = 1720
global GDK_KEY_Cyrillic_LJE: cint <comptime> = 1721
global GDK_KEY_Serbian_LJE: cint <comptime> = 1721
global GDK_KEY_Cyrillic_NJE: cint <comptime> = 1722
global GDK_KEY_Serbian_NJE: cint <comptime> = 1722
global GDK_KEY_Serbian_TSHE: cint <comptime> = 1723
global GDK_KEY_Macedonia_KJE: cint <comptime> = 1724
global GDK_KEY_Ukrainian_GHE_WITH_UPTURN: cint <comptime> = 1725
global GDK_KEY_Byelorussian_SHORTU: cint <comptime> = 1726
global GDK_KEY_Cyrillic_DZHE: cint <comptime> = 1727
global GDK_KEY_Serbian_DZE: cint <comptime> = 1727
global GDK_KEY_Cyrillic_yu: cint <comptime> = 1728
global GDK_KEY_Cyrillic_a: cint <comptime> = 1729
global GDK_KEY_Cyrillic_be: cint <comptime> = 1730
global GDK_KEY_Cyrillic_tse: cint <comptime> = 1731
global GDK_KEY_Cyrillic_de: cint <comptime> = 1732
global GDK_KEY_Cyrillic_ie: cint <comptime> = 1733
global GDK_KEY_Cyrillic_ef: cint <comptime> = 1734
global GDK_KEY_Cyrillic_ghe: cint <comptime> = 1735
global GDK_KEY_Cyrillic_ha: cint <comptime> = 1736
global GDK_KEY_Cyrillic_i: cint <comptime> = 1737
global GDK_KEY_Cyrillic_shorti: cint <comptime> = 1738
global GDK_KEY_Cyrillic_ka: cint <comptime> = 1739
global GDK_KEY_Cyrillic_el: cint <comptime> = 1740
global GDK_KEY_Cyrillic_em: cint <comptime> = 1741
global GDK_KEY_Cyrillic_en: cint <comptime> = 1742
global GDK_KEY_Cyrillic_o: cint <comptime> = 1743
global GDK_KEY_Cyrillic_pe: cint <comptime> = 1744
global GDK_KEY_Cyrillic_ya: cint <comptime> = 1745
global GDK_KEY_Cyrillic_er: cint <comptime> = 1746
global GDK_KEY_Cyrillic_es: cint <comptime> = 1747
global GDK_KEY_Cyrillic_te: cint <comptime> = 1748
global GDK_KEY_Cyrillic_u: cint <comptime> = 1749
global GDK_KEY_Cyrillic_zhe: cint <comptime> = 1750
global GDK_KEY_Cyrillic_ve: cint <comptime> = 1751
global GDK_KEY_Cyrillic_softsign: cint <comptime> = 1752
global GDK_KEY_Cyrillic_yeru: cint <comptime> = 1753
global GDK_KEY_Cyrillic_ze: cint <comptime> = 1754
global GDK_KEY_Cyrillic_sha: cint <comptime> = 1755
global GDK_KEY_Cyrillic_e: cint <comptime> = 1756
global GDK_KEY_Cyrillic_shcha: cint <comptime> = 1757
global GDK_KEY_Cyrillic_che: cint <comptime> = 1758
global GDK_KEY_Cyrillic_hardsign: cint <comptime> = 1759
global GDK_KEY_Cyrillic_YU: cint <comptime> = 1760
global GDK_KEY_Cyrillic_A: cint <comptime> = 1761
global GDK_KEY_Cyrillic_BE: cint <comptime> = 1762
global GDK_KEY_Cyrillic_TSE: cint <comptime> = 1763
global GDK_KEY_Cyrillic_DE: cint <comptime> = 1764
global GDK_KEY_Cyrillic_IE: cint <comptime> = 1765
global GDK_KEY_Cyrillic_EF: cint <comptime> = 1766
global GDK_KEY_Cyrillic_GHE: cint <comptime> = 1767
global GDK_KEY_Cyrillic_HA: cint <comptime> = 1768
global GDK_KEY_Cyrillic_I: cint <comptime> = 1769
global GDK_KEY_Cyrillic_SHORTI: cint <comptime> = 1770
global GDK_KEY_Cyrillic_KA: cint <comptime> = 1771
global GDK_KEY_Cyrillic_EL: cint <comptime> = 1772
global GDK_KEY_Cyrillic_EM: cint <comptime> = 1773
global GDK_KEY_Cyrillic_EN: cint <comptime> = 1774
global GDK_KEY_Cyrillic_O: cint <comptime> = 1775
global GDK_KEY_Cyrillic_PE: cint <comptime> = 1776
global GDK_KEY_Cyrillic_YA: cint <comptime> = 1777
global GDK_KEY_Cyrillic_ER: cint <comptime> = 1778
global GDK_KEY_Cyrillic_ES: cint <comptime> = 1779
global GDK_KEY_Cyrillic_TE: cint <comptime> = 1780
global GDK_KEY_Cyrillic_U: cint <comptime> = 1781
global GDK_KEY_Cyrillic_ZHE: cint <comptime> = 1782
global GDK_KEY_Cyrillic_VE: cint <comptime> = 1783
global GDK_KEY_Cyrillic_SOFTSIGN: cint <comptime> = 1784
global GDK_KEY_Cyrillic_YERU: cint <comptime> = 1785
global GDK_KEY_Cyrillic_ZE: cint <comptime> = 1786
global GDK_KEY_Cyrillic_SHA: cint <comptime> = 1787
global GDK_KEY_Cyrillic_E: cint <comptime> = 1788
global GDK_KEY_Cyrillic_SHCHA: cint <comptime> = 1789
global GDK_KEY_Cyrillic_CHE: cint <comptime> = 1790
global GDK_KEY_Cyrillic_HARDSIGN: cint <comptime> = 1791
global GDK_KEY_Greek_ALPHAaccent: cint <comptime> = 1953
global GDK_KEY_Greek_EPSILONaccent: cint <comptime> = 1954
global GDK_KEY_Greek_ETAaccent: cint <comptime> = 1955
global GDK_KEY_Greek_IOTAaccent: cint <comptime> = 1956
global GDK_KEY_Greek_IOTAdieresis: cint <comptime> = 1957
global GDK_KEY_Greek_IOTAdiaeresis: cint <comptime> = 1957
global GDK_KEY_Greek_OMICRONaccent: cint <comptime> = 1959
global GDK_KEY_Greek_UPSILONaccent: cint <comptime> = 1960
global GDK_KEY_Greek_UPSILONdieresis: cint <comptime> = 1961
global GDK_KEY_Greek_OMEGAaccent: cint <comptime> = 1963
global GDK_KEY_Greek_accentdieresis: cint <comptime> = 1966
global GDK_KEY_Greek_horizbar: cint <comptime> = 1967
global GDK_KEY_Greek_alphaaccent: cint <comptime> = 1969
global GDK_KEY_Greek_epsilonaccent: cint <comptime> = 1970
global GDK_KEY_Greek_etaaccent: cint <comptime> = 1971
global GDK_KEY_Greek_iotaaccent: cint <comptime> = 1972
global GDK_KEY_Greek_iotadieresis: cint <comptime> = 1973
global GDK_KEY_Greek_iotaaccentdieresis: cint <comptime> = 1974
global GDK_KEY_Greek_omicronaccent: cint <comptime> = 1975
global GDK_KEY_Greek_upsilonaccent: cint <comptime> = 1976
global GDK_KEY_Greek_upsilondieresis: cint <comptime> = 1977
global GDK_KEY_Greek_upsilonaccentdieresis: cint <comptime> = 1978
global GDK_KEY_Greek_omegaaccent: cint <comptime> = 1979
global GDK_KEY_Greek_ALPHA: cint <comptime> = 1985
global GDK_KEY_Greek_BETA: cint <comptime> = 1986
global GDK_KEY_Greek_GAMMA: cint <comptime> = 1987
global GDK_KEY_Greek_DELTA: cint <comptime> = 1988
global GDK_KEY_Greek_EPSILON: cint <comptime> = 1989
global GDK_KEY_Greek_ZETA: cint <comptime> = 1990
global GDK_KEY_Greek_ETA: cint <comptime> = 1991
global GDK_KEY_Greek_THETA: cint <comptime> = 1992
global GDK_KEY_Greek_IOTA: cint <comptime> = 1993
global GDK_KEY_Greek_KAPPA: cint <comptime> = 1994
global GDK_KEY_Greek_LAMDA: cint <comptime> = 1995
global GDK_KEY_Greek_LAMBDA: cint <comptime> = 1995
global GDK_KEY_Greek_MU: cint <comptime> = 1996
global GDK_KEY_Greek_NU: cint <comptime> = 1997
global GDK_KEY_Greek_XI: cint <comptime> = 1998
global GDK_KEY_Greek_OMICRON: cint <comptime> = 1999
global GDK_KEY_Greek_PI: cint <comptime> = 2000
global GDK_KEY_Greek_RHO: cint <comptime> = 2001
global GDK_KEY_Greek_SIGMA: cint <comptime> = 2002
global GDK_KEY_Greek_TAU: cint <comptime> = 2004
global GDK_KEY_Greek_UPSILON: cint <comptime> = 2005
global GDK_KEY_Greek_PHI: cint <comptime> = 2006
global GDK_KEY_Greek_CHI: cint <comptime> = 2007
global GDK_KEY_Greek_PSI: cint <comptime> = 2008
global GDK_KEY_Greek_OMEGA: cint <comptime> = 2009
global GDK_KEY_Greek_alpha: cint <comptime> = 2017
global GDK_KEY_Greek_beta: cint <comptime> = 2018
global GDK_KEY_Greek_gamma: cint <comptime> = 2019
global GDK_KEY_Greek_delta: cint <comptime> = 2020
global GDK_KEY_Greek_epsilon: cint <comptime> = 2021
global GDK_KEY_Greek_zeta: cint <comptime> = 2022
global GDK_KEY_Greek_eta: cint <comptime> = 2023
global GDK_KEY_Greek_theta: cint <comptime> = 2024
global GDK_KEY_Greek_iota: cint <comptime> = 2025
global GDK_KEY_Greek_kappa: cint <comptime> = 2026
global GDK_KEY_Greek_lamda: cint <comptime> = 2027
global GDK_KEY_Greek_lambda: cint <comptime> = 2027
global GDK_KEY_Greek_mu: cint <comptime> = 2028
global GDK_KEY_Greek_nu: cint <comptime> = 2029
global GDK_KEY_Greek_xi: cint <comptime> = 2030
global GDK_KEY_Greek_omicron: cint <comptime> = 2031
global GDK_KEY_Greek_pi: cint <comptime> = 2032
global GDK_KEY_Greek_rho: cint <comptime> = 2033
global GDK_KEY_Greek_sigma: cint <comptime> = 2034
global GDK_KEY_Greek_finalsmallsigma: cint <comptime> = 2035
global GDK_KEY_Greek_tau: cint <comptime> = 2036
global GDK_KEY_Greek_upsilon: cint <comptime> = 2037
global GDK_KEY_Greek_phi: cint <comptime> = 2038
global GDK_KEY_Greek_chi: cint <comptime> = 2039
global GDK_KEY_Greek_psi: cint <comptime> = 2040
global GDK_KEY_Greek_omega: cint <comptime> = 2041
global GDK_KEY_Greek_switch: cint <comptime> = 65406
global GDK_KEY_leftradical: cint <comptime> = 2209
global GDK_KEY_topleftradical: cint <comptime> = 2210
global GDK_KEY_horizconnector: cint <comptime> = 2211
global GDK_KEY_topintegral: cint <comptime> = 2212
global GDK_KEY_botintegral: cint <comptime> = 2213
global GDK_KEY_vertconnector: cint <comptime> = 2214
global GDK_KEY_topleftsqbracket: cint <comptime> = 2215
global GDK_KEY_botleftsqbracket: cint <comptime> = 2216
global GDK_KEY_toprightsqbracket: cint <comptime> = 2217
global GDK_KEY_botrightsqbracket: cint <comptime> = 2218
global GDK_KEY_topleftparens: cint <comptime> = 2219
global GDK_KEY_botleftparens: cint <comptime> = 2220
global GDK_KEY_toprightparens: cint <comptime> = 2221
global GDK_KEY_botrightparens: cint <comptime> = 2222
global GDK_KEY_leftmiddlecurlybrace: cint <comptime> = 2223
global GDK_KEY_rightmiddlecurlybrace: cint <comptime> = 2224
global GDK_KEY_topleftsummation: cint <comptime> = 2225
global GDK_KEY_botleftsummation: cint <comptime> = 2226
global GDK_KEY_topvertsummationconnector: cint <comptime> = 2227
global GDK_KEY_botvertsummationconnector: cint <comptime> = 2228
global GDK_KEY_toprightsummation: cint <comptime> = 2229
global GDK_KEY_botrightsummation: cint <comptime> = 2230
global GDK_KEY_rightmiddlesummation: cint <comptime> = 2231
global GDK_KEY_lessthanequal: cint <comptime> = 2236
global GDK_KEY_notequal: cint <comptime> = 2237
global GDK_KEY_greaterthanequal: cint <comptime> = 2238
global GDK_KEY_integral: cint <comptime> = 2239
global GDK_KEY_therefore: cint <comptime> = 2240
global GDK_KEY_variation: cint <comptime> = 2241
global GDK_KEY_infinity: cint <comptime> = 2242
global GDK_KEY_nabla: cint <comptime> = 2245
global GDK_KEY_approximate: cint <comptime> = 2248
global GDK_KEY_similarequal: cint <comptime> = 2249
global GDK_KEY_ifonlyif: cint <comptime> = 2253
global GDK_KEY_implies: cint <comptime> = 2254
global GDK_KEY_identical: cint <comptime> = 2255
global GDK_KEY_radical: cint <comptime> = 2262
global GDK_KEY_includedin: cint <comptime> = 2266
global GDK_KEY_includes: cint <comptime> = 2267
global GDK_KEY_intersection: cint <comptime> = 2268
global GDK_KEY_union: cint <comptime> = 2269
global GDK_KEY_logicaland: cint <comptime> = 2270
global GDK_KEY_logicalor: cint <comptime> = 2271
global GDK_KEY_partialderivative: cint <comptime> = 2287
global GDK_KEY_function: cint <comptime> = 2294
global GDK_KEY_leftarrow: cint <comptime> = 2299
global GDK_KEY_uparrow: cint <comptime> = 2300
global GDK_KEY_rightarrow: cint <comptime> = 2301
global GDK_KEY_downarrow: cint <comptime> = 2302
global GDK_KEY_blank: cint <comptime> = 2527
global GDK_KEY_soliddiamond: cint <comptime> = 2528
global GDK_KEY_checkerboard: cint <comptime> = 2529
global GDK_KEY_ht: cint <comptime> = 2530
global GDK_KEY_ff: cint <comptime> = 2531
global GDK_KEY_cr: cint <comptime> = 2532
global GDK_KEY_lf: cint <comptime> = 2533
global GDK_KEY_nl: cint <comptime> = 2536
global GDK_KEY_vt: cint <comptime> = 2537
global GDK_KEY_lowrightcorner: cint <comptime> = 2538
global GDK_KEY_uprightcorner: cint <comptime> = 2539
global GDK_KEY_upleftcorner: cint <comptime> = 2540
global GDK_KEY_lowleftcorner: cint <comptime> = 2541
global GDK_KEY_crossinglines: cint <comptime> = 2542
global GDK_KEY_horizlinescan1: cint <comptime> = 2543
global GDK_KEY_horizlinescan3: cint <comptime> = 2544
global GDK_KEY_horizlinescan5: cint <comptime> = 2545
global GDK_KEY_horizlinescan7: cint <comptime> = 2546
global GDK_KEY_horizlinescan9: cint <comptime> = 2547
global GDK_KEY_leftt: cint <comptime> = 2548
global GDK_KEY_rightt: cint <comptime> = 2549
global GDK_KEY_bott: cint <comptime> = 2550
global GDK_KEY_topt: cint <comptime> = 2551
global GDK_KEY_vertbar: cint <comptime> = 2552
global GDK_KEY_emspace: cint <comptime> = 2721
global GDK_KEY_enspace: cint <comptime> = 2722
global GDK_KEY_em3space: cint <comptime> = 2723
global GDK_KEY_em4space: cint <comptime> = 2724
global GDK_KEY_digitspace: cint <comptime> = 2725
global GDK_KEY_punctspace: cint <comptime> = 2726
global GDK_KEY_thinspace: cint <comptime> = 2727
global GDK_KEY_hairspace: cint <comptime> = 2728
global GDK_KEY_emdash: cint <comptime> = 2729
global GDK_KEY_endash: cint <comptime> = 2730
global GDK_KEY_signifblank: cint <comptime> = 2732
global GDK_KEY_ellipsis: cint <comptime> = 2734
global GDK_KEY_doubbaselinedot: cint <comptime> = 2735
global GDK_KEY_onethird: cint <comptime> = 2736
global GDK_KEY_twothirds: cint <comptime> = 2737
global GDK_KEY_onefifth: cint <comptime> = 2738
global GDK_KEY_twofifths: cint <comptime> = 2739
global GDK_KEY_threefifths: cint <comptime> = 2740
global GDK_KEY_fourfifths: cint <comptime> = 2741
global GDK_KEY_onesixth: cint <comptime> = 2742
global GDK_KEY_fivesixths: cint <comptime> = 2743
global GDK_KEY_careof: cint <comptime> = 2744
global GDK_KEY_figdash: cint <comptime> = 2747
global GDK_KEY_leftanglebracket: cint <comptime> = 2748
global GDK_KEY_decimalpoint: cint <comptime> = 2749
global GDK_KEY_rightanglebracket: cint <comptime> = 2750
global GDK_KEY_marker: cint <comptime> = 2751
global GDK_KEY_oneeighth: cint <comptime> = 2755
global GDK_KEY_threeeighths: cint <comptime> = 2756
global GDK_KEY_fiveeighths: cint <comptime> = 2757
global GDK_KEY_seveneighths: cint <comptime> = 2758
global GDK_KEY_trademark: cint <comptime> = 2761
global GDK_KEY_signaturemark: cint <comptime> = 2762
global GDK_KEY_trademarkincircle: cint <comptime> = 2763
global GDK_KEY_leftopentriangle: cint <comptime> = 2764
global GDK_KEY_rightopentriangle: cint <comptime> = 2765
global GDK_KEY_emopencircle: cint <comptime> = 2766
global GDK_KEY_emopenrectangle: cint <comptime> = 2767
global GDK_KEY_leftsinglequotemark: cint <comptime> = 2768
global GDK_KEY_rightsinglequotemark: cint <comptime> = 2769
global GDK_KEY_leftdoublequotemark: cint <comptime> = 2770
global GDK_KEY_rightdoublequotemark: cint <comptime> = 2771
global GDK_KEY_prescription: cint <comptime> = 2772
global GDK_KEY_permille: cint <comptime> = 2773
global GDK_KEY_minutes: cint <comptime> = 2774
global GDK_KEY_seconds: cint <comptime> = 2775
global GDK_KEY_latincross: cint <comptime> = 2777
global GDK_KEY_hexagram: cint <comptime> = 2778
global GDK_KEY_filledrectbullet: cint <comptime> = 2779
global GDK_KEY_filledlefttribullet: cint <comptime> = 2780
global GDK_KEY_filledrighttribullet: cint <comptime> = 2781
global GDK_KEY_emfilledcircle: cint <comptime> = 2782
global GDK_KEY_emfilledrect: cint <comptime> = 2783
global GDK_KEY_enopencircbullet: cint <comptime> = 2784
global GDK_KEY_enopensquarebullet: cint <comptime> = 2785
global GDK_KEY_openrectbullet: cint <comptime> = 2786
global GDK_KEY_opentribulletup: cint <comptime> = 2787
global GDK_KEY_opentribulletdown: cint <comptime> = 2788
global GDK_KEY_openstar: cint <comptime> = 2789
global GDK_KEY_enfilledcircbullet: cint <comptime> = 2790
global GDK_KEY_enfilledsqbullet: cint <comptime> = 2791
global GDK_KEY_filledtribulletup: cint <comptime> = 2792
global GDK_KEY_filledtribulletdown: cint <comptime> = 2793
global GDK_KEY_leftpointer: cint <comptime> = 2794
global GDK_KEY_rightpointer: cint <comptime> = 2795
global GDK_KEY_club: cint <comptime> = 2796
global GDK_KEY_diamond: cint <comptime> = 2797
global GDK_KEY_heart: cint <comptime> = 2798
global GDK_KEY_maltesecross: cint <comptime> = 2800
global GDK_KEY_dagger: cint <comptime> = 2801
global GDK_KEY_doubledagger: cint <comptime> = 2802
global GDK_KEY_checkmark: cint <comptime> = 2803
global GDK_KEY_ballotcross: cint <comptime> = 2804
global GDK_KEY_musicalsharp: cint <comptime> = 2805
global GDK_KEY_musicalflat: cint <comptime> = 2806
global GDK_KEY_malesymbol: cint <comptime> = 2807
global GDK_KEY_femalesymbol: cint <comptime> = 2808
global GDK_KEY_telephone: cint <comptime> = 2809
global GDK_KEY_telephonerecorder: cint <comptime> = 2810
global GDK_KEY_phonographcopyright: cint <comptime> = 2811
global GDK_KEY_caret: cint <comptime> = 2812
global GDK_KEY_singlelowquotemark: cint <comptime> = 2813
global GDK_KEY_doublelowquotemark: cint <comptime> = 2814
global GDK_KEY_cursor: cint <comptime> = 2815
global GDK_KEY_leftcaret: cint <comptime> = 2979
global GDK_KEY_rightcaret: cint <comptime> = 2982
global GDK_KEY_downcaret: cint <comptime> = 2984
global GDK_KEY_upcaret: cint <comptime> = 2985
global GDK_KEY_overbar: cint <comptime> = 3008
global GDK_KEY_downtack: cint <comptime> = 3010
global GDK_KEY_upshoe: cint <comptime> = 3011
global GDK_KEY_downstile: cint <comptime> = 3012
global GDK_KEY_underbar: cint <comptime> = 3014
global GDK_KEY_jot: cint <comptime> = 3018
global GDK_KEY_quad: cint <comptime> = 3020
global GDK_KEY_uptack: cint <comptime> = 3022
global GDK_KEY_circle: cint <comptime> = 3023
global GDK_KEY_upstile: cint <comptime> = 3027
global GDK_KEY_downshoe: cint <comptime> = 3030
global GDK_KEY_rightshoe: cint <comptime> = 3032
global GDK_KEY_leftshoe: cint <comptime> = 3034
global GDK_KEY_lefttack: cint <comptime> = 3036
global GDK_KEY_righttack: cint <comptime> = 3068
global GDK_KEY_hebrew_doublelowline: cint <comptime> = 3295
global GDK_KEY_hebrew_aleph: cint <comptime> = 3296
global GDK_KEY_hebrew_bet: cint <comptime> = 3297
global GDK_KEY_hebrew_beth: cint <comptime> = 3297
global GDK_KEY_hebrew_gimel: cint <comptime> = 3298
global GDK_KEY_hebrew_gimmel: cint <comptime> = 3298
global GDK_KEY_hebrew_dalet: cint <comptime> = 3299
global GDK_KEY_hebrew_daleth: cint <comptime> = 3299
global GDK_KEY_hebrew_he: cint <comptime> = 3300
global GDK_KEY_hebrew_waw: cint <comptime> = 3301
global GDK_KEY_hebrew_zain: cint <comptime> = 3302
global GDK_KEY_hebrew_zayin: cint <comptime> = 3302
global GDK_KEY_hebrew_chet: cint <comptime> = 3303
global GDK_KEY_hebrew_het: cint <comptime> = 3303
global GDK_KEY_hebrew_tet: cint <comptime> = 3304
global GDK_KEY_hebrew_teth: cint <comptime> = 3304
global GDK_KEY_hebrew_yod: cint <comptime> = 3305
global GDK_KEY_hebrew_finalkaph: cint <comptime> = 3306
global GDK_KEY_hebrew_kaph: cint <comptime> = 3307
global GDK_KEY_hebrew_lamed: cint <comptime> = 3308
global GDK_KEY_hebrew_finalmem: cint <comptime> = 3309
global GDK_KEY_hebrew_mem: cint <comptime> = 3310
global GDK_KEY_hebrew_finalnun: cint <comptime> = 3311
global GDK_KEY_hebrew_nun: cint <comptime> = 3312
global GDK_KEY_hebrew_samech: cint <comptime> = 3313
global GDK_KEY_hebrew_samekh: cint <comptime> = 3313
global GDK_KEY_hebrew_ayin: cint <comptime> = 3314
global GDK_KEY_hebrew_finalpe: cint <comptime> = 3315
global GDK_KEY_hebrew_pe: cint <comptime> = 3316
global GDK_KEY_hebrew_finalzade: cint <comptime> = 3317
global GDK_KEY_hebrew_finalzadi: cint <comptime> = 3317
global GDK_KEY_hebrew_zade: cint <comptime> = 3318
global GDK_KEY_hebrew_zadi: cint <comptime> = 3318
global GDK_KEY_hebrew_qoph: cint <comptime> = 3319
global GDK_KEY_hebrew_kuf: cint <comptime> = 3319
global GDK_KEY_hebrew_resh: cint <comptime> = 3320
global GDK_KEY_hebrew_shin: cint <comptime> = 3321
global GDK_KEY_hebrew_taw: cint <comptime> = 3322
global GDK_KEY_hebrew_taf: cint <comptime> = 3322
global GDK_KEY_Hebrew_switch: cint <comptime> = 65406
global GDK_KEY_Thai_kokai: cint <comptime> = 3489
global GDK_KEY_Thai_khokhai: cint <comptime> = 3490
global GDK_KEY_Thai_khokhuat: cint <comptime> = 3491
global GDK_KEY_Thai_khokhwai: cint <comptime> = 3492
global GDK_KEY_Thai_khokhon: cint <comptime> = 3493
global GDK_KEY_Thai_khorakhang: cint <comptime> = 3494
global GDK_KEY_Thai_ngongu: cint <comptime> = 3495
global GDK_KEY_Thai_chochan: cint <comptime> = 3496
global GDK_KEY_Thai_choching: cint <comptime> = 3497
global GDK_KEY_Thai_chochang: cint <comptime> = 3498
global GDK_KEY_Thai_soso: cint <comptime> = 3499
global GDK_KEY_Thai_chochoe: cint <comptime> = 3500
global GDK_KEY_Thai_yoying: cint <comptime> = 3501
global GDK_KEY_Thai_dochada: cint <comptime> = 3502
global GDK_KEY_Thai_topatak: cint <comptime> = 3503
global GDK_KEY_Thai_thothan: cint <comptime> = 3504
global GDK_KEY_Thai_thonangmontho: cint <comptime> = 3505
global GDK_KEY_Thai_thophuthao: cint <comptime> = 3506
global GDK_KEY_Thai_nonen: cint <comptime> = 3507
global GDK_KEY_Thai_dodek: cint <comptime> = 3508
global GDK_KEY_Thai_totao: cint <comptime> = 3509
global GDK_KEY_Thai_thothung: cint <comptime> = 3510
global GDK_KEY_Thai_thothahan: cint <comptime> = 3511
global GDK_KEY_Thai_thothong: cint <comptime> = 3512
global GDK_KEY_Thai_nonu: cint <comptime> = 3513
global GDK_KEY_Thai_bobaimai: cint <comptime> = 3514
global GDK_KEY_Thai_popla: cint <comptime> = 3515
global GDK_KEY_Thai_phophung: cint <comptime> = 3516
global GDK_KEY_Thai_fofa: cint <comptime> = 3517
global GDK_KEY_Thai_phophan: cint <comptime> = 3518
global GDK_KEY_Thai_fofan: cint <comptime> = 3519
global GDK_KEY_Thai_phosamphao: cint <comptime> = 3520
global GDK_KEY_Thai_moma: cint <comptime> = 3521
global GDK_KEY_Thai_yoyak: cint <comptime> = 3522
global GDK_KEY_Thai_rorua: cint <comptime> = 3523
global GDK_KEY_Thai_ru: cint <comptime> = 3524
global GDK_KEY_Thai_loling: cint <comptime> = 3525
global GDK_KEY_Thai_lu: cint <comptime> = 3526
global GDK_KEY_Thai_wowaen: cint <comptime> = 3527
global GDK_KEY_Thai_sosala: cint <comptime> = 3528
global GDK_KEY_Thai_sorusi: cint <comptime> = 3529
global GDK_KEY_Thai_sosua: cint <comptime> = 3530
global GDK_KEY_Thai_hohip: cint <comptime> = 3531
global GDK_KEY_Thai_lochula: cint <comptime> = 3532
global GDK_KEY_Thai_oang: cint <comptime> = 3533
global GDK_KEY_Thai_honokhuk: cint <comptime> = 3534
global GDK_KEY_Thai_paiyannoi: cint <comptime> = 3535
global GDK_KEY_Thai_saraa: cint <comptime> = 3536
global GDK_KEY_Thai_maihanakat: cint <comptime> = 3537
global GDK_KEY_Thai_saraaa: cint <comptime> = 3538
global GDK_KEY_Thai_saraam: cint <comptime> = 3539
global GDK_KEY_Thai_sarai: cint <comptime> = 3540
global GDK_KEY_Thai_saraii: cint <comptime> = 3541
global GDK_KEY_Thai_saraue: cint <comptime> = 3542
global GDK_KEY_Thai_sarauee: cint <comptime> = 3543
global GDK_KEY_Thai_sarau: cint <comptime> = 3544
global GDK_KEY_Thai_sarauu: cint <comptime> = 3545
global GDK_KEY_Thai_phinthu: cint <comptime> = 3546
global GDK_KEY_Thai_maihanakat_maitho: cint <comptime> = 3550
global GDK_KEY_Thai_baht: cint <comptime> = 3551
global GDK_KEY_Thai_sarae: cint <comptime> = 3552
global GDK_KEY_Thai_saraae: cint <comptime> = 3553
global GDK_KEY_Thai_sarao: cint <comptime> = 3554
global GDK_KEY_Thai_saraaimaimuan: cint <comptime> = 3555
global GDK_KEY_Thai_saraaimaimalai: cint <comptime> = 3556
global GDK_KEY_Thai_lakkhangyao: cint <comptime> = 3557
global GDK_KEY_Thai_maiyamok: cint <comptime> = 3558
global GDK_KEY_Thai_maitaikhu: cint <comptime> = 3559
global GDK_KEY_Thai_maiek: cint <comptime> = 3560
global GDK_KEY_Thai_maitho: cint <comptime> = 3561
global GDK_KEY_Thai_maitri: cint <comptime> = 3562
global GDK_KEY_Thai_maichattawa: cint <comptime> = 3563
global GDK_KEY_Thai_thanthakhat: cint <comptime> = 3564
global GDK_KEY_Thai_nikhahit: cint <comptime> = 3565
global GDK_KEY_Thai_leksun: cint <comptime> = 3568
global GDK_KEY_Thai_leknung: cint <comptime> = 3569
global GDK_KEY_Thai_leksong: cint <comptime> = 3570
global GDK_KEY_Thai_leksam: cint <comptime> = 3571
global GDK_KEY_Thai_leksi: cint <comptime> = 3572
global GDK_KEY_Thai_lekha: cint <comptime> = 3573
global GDK_KEY_Thai_lekhok: cint <comptime> = 3574
global GDK_KEY_Thai_lekchet: cint <comptime> = 3575
global GDK_KEY_Thai_lekpaet: cint <comptime> = 3576
global GDK_KEY_Thai_lekkao: cint <comptime> = 3577
global GDK_KEY_Hangul: cint <comptime> = 65329
global GDK_KEY_Hangul_Start: cint <comptime> = 65330
global GDK_KEY_Hangul_End: cint <comptime> = 65331
global GDK_KEY_Hangul_Hanja: cint <comptime> = 65332
global GDK_KEY_Hangul_Jamo: cint <comptime> = 65333
global GDK_KEY_Hangul_Romaja: cint <comptime> = 65334
global GDK_KEY_Hangul_Codeinput: cint <comptime> = 65335
global GDK_KEY_Hangul_Jeonja: cint <comptime> = 65336
global GDK_KEY_Hangul_Banja: cint <comptime> = 65337
global GDK_KEY_Hangul_PreHanja: cint <comptime> = 65338
global GDK_KEY_Hangul_PostHanja: cint <comptime> = 65339
global GDK_KEY_Hangul_SingleCandidate: cint <comptime> = 65340
global GDK_KEY_Hangul_MultipleCandidate: cint <comptime> = 65341
global GDK_KEY_Hangul_PreviousCandidate: cint <comptime> = 65342
global GDK_KEY_Hangul_Special: cint <comptime> = 65343
global GDK_KEY_Hangul_switch: cint <comptime> = 65406
global GDK_KEY_Hangul_Kiyeog: cint <comptime> = 3745
global GDK_KEY_Hangul_SsangKiyeog: cint <comptime> = 3746
global GDK_KEY_Hangul_KiyeogSios: cint <comptime> = 3747
global GDK_KEY_Hangul_Nieun: cint <comptime> = 3748
global GDK_KEY_Hangul_NieunJieuj: cint <comptime> = 3749
global GDK_KEY_Hangul_NieunHieuh: cint <comptime> = 3750
global GDK_KEY_Hangul_Dikeud: cint <comptime> = 3751
global GDK_KEY_Hangul_SsangDikeud: cint <comptime> = 3752
global GDK_KEY_Hangul_Rieul: cint <comptime> = 3753
global GDK_KEY_Hangul_RieulKiyeog: cint <comptime> = 3754
global GDK_KEY_Hangul_RieulMieum: cint <comptime> = 3755
global GDK_KEY_Hangul_RieulPieub: cint <comptime> = 3756
global GDK_KEY_Hangul_RieulSios: cint <comptime> = 3757
global GDK_KEY_Hangul_RieulTieut: cint <comptime> = 3758
global GDK_KEY_Hangul_RieulPhieuf: cint <comptime> = 3759
global GDK_KEY_Hangul_RieulHieuh: cint <comptime> = 3760
global GDK_KEY_Hangul_Mieum: cint <comptime> = 3761
global GDK_KEY_Hangul_Pieub: cint <comptime> = 3762
global GDK_KEY_Hangul_SsangPieub: cint <comptime> = 3763
global GDK_KEY_Hangul_PieubSios: cint <comptime> = 3764
global GDK_KEY_Hangul_Sios: cint <comptime> = 3765
global GDK_KEY_Hangul_SsangSios: cint <comptime> = 3766
global GDK_KEY_Hangul_Ieung: cint <comptime> = 3767
global GDK_KEY_Hangul_Jieuj: cint <comptime> = 3768
global GDK_KEY_Hangul_SsangJieuj: cint <comptime> = 3769
global GDK_KEY_Hangul_Cieuc: cint <comptime> = 3770
global GDK_KEY_Hangul_Khieuq: cint <comptime> = 3771
global GDK_KEY_Hangul_Tieut: cint <comptime> = 3772
global GDK_KEY_Hangul_Phieuf: cint <comptime> = 3773
global GDK_KEY_Hangul_Hieuh: cint <comptime> = 3774
global GDK_KEY_Hangul_A: cint <comptime> = 3775
global GDK_KEY_Hangul_AE: cint <comptime> = 3776
global GDK_KEY_Hangul_YA: cint <comptime> = 3777
global GDK_KEY_Hangul_YAE: cint <comptime> = 3778
global GDK_KEY_Hangul_EO: cint <comptime> = 3779
global GDK_KEY_Hangul_E: cint <comptime> = 3780
global GDK_KEY_Hangul_YEO: cint <comptime> = 3781
global GDK_KEY_Hangul_YE: cint <comptime> = 3782
global GDK_KEY_Hangul_O: cint <comptime> = 3783
global GDK_KEY_Hangul_WA: cint <comptime> = 3784
global GDK_KEY_Hangul_WAE: cint <comptime> = 3785
global GDK_KEY_Hangul_OE: cint <comptime> = 3786
global GDK_KEY_Hangul_YO: cint <comptime> = 3787
global GDK_KEY_Hangul_U: cint <comptime> = 3788
global GDK_KEY_Hangul_WEO: cint <comptime> = 3789
global GDK_KEY_Hangul_WE: cint <comptime> = 3790
global GDK_KEY_Hangul_WI: cint <comptime> = 3791
global GDK_KEY_Hangul_YU: cint <comptime> = 3792
global GDK_KEY_Hangul_EU: cint <comptime> = 3793
global GDK_KEY_Hangul_YI: cint <comptime> = 3794
global GDK_KEY_Hangul_I: cint <comptime> = 3795
global GDK_KEY_Hangul_J_Kiyeog: cint <comptime> = 3796
global GDK_KEY_Hangul_J_SsangKiyeog: cint <comptime> = 3797
global GDK_KEY_Hangul_J_KiyeogSios: cint <comptime> = 3798
global GDK_KEY_Hangul_J_Nieun: cint <comptime> = 3799
global GDK_KEY_Hangul_J_NieunJieuj: cint <comptime> = 3800
global GDK_KEY_Hangul_J_NieunHieuh: cint <comptime> = 3801
global GDK_KEY_Hangul_J_Dikeud: cint <comptime> = 3802
global GDK_KEY_Hangul_J_Rieul: cint <comptime> = 3803
global GDK_KEY_Hangul_J_RieulKiyeog: cint <comptime> = 3804
global GDK_KEY_Hangul_J_RieulMieum: cint <comptime> = 3805
global GDK_KEY_Hangul_J_RieulPieub: cint <comptime> = 3806
global GDK_KEY_Hangul_J_RieulSios: cint <comptime> = 3807
global GDK_KEY_Hangul_J_RieulTieut: cint <comptime> = 3808
global GDK_KEY_Hangul_J_RieulPhieuf: cint <comptime> = 3809
global GDK_KEY_Hangul_J_RieulHieuh: cint <comptime> = 3810
global GDK_KEY_Hangul_J_Mieum: cint <comptime> = 3811
global GDK_KEY_Hangul_J_Pieub: cint <comptime> = 3812
global GDK_KEY_Hangul_J_PieubSios: cint <comptime> = 3813
global GDK_KEY_Hangul_J_Sios: cint <comptime> = 3814
global GDK_KEY_Hangul_J_SsangSios: cint <comptime> = 3815
global GDK_KEY_Hangul_J_Ieung: cint <comptime> = 3816
global GDK_KEY_Hangul_J_Jieuj: cint <comptime> = 3817
global GDK_KEY_Hangul_J_Cieuc: cint <comptime> = 3818
global GDK_KEY_Hangul_J_Khieuq: cint <comptime> = 3819
global GDK_KEY_Hangul_J_Tieut: cint <comptime> = 3820
global GDK_KEY_Hangul_J_Phieuf: cint <comptime> = 3821
global GDK_KEY_Hangul_J_Hieuh: cint <comptime> = 3822
global GDK_KEY_Hangul_RieulYeorinHieuh: cint <comptime> = 3823
global GDK_KEY_Hangul_SunkyeongeumMieum: cint <comptime> = 3824
global GDK_KEY_Hangul_SunkyeongeumPieub: cint <comptime> = 3825
global GDK_KEY_Hangul_PanSios: cint <comptime> = 3826
global GDK_KEY_Hangul_KkogjiDalrinIeung: cint <comptime> = 3827
global GDK_KEY_Hangul_SunkyeongeumPhieuf: cint <comptime> = 3828
global GDK_KEY_Hangul_YeorinHieuh: cint <comptime> = 3829
global GDK_KEY_Hangul_AraeA: cint <comptime> = 3830
global GDK_KEY_Hangul_AraeAE: cint <comptime> = 3831
global GDK_KEY_Hangul_J_PanSios: cint <comptime> = 3832
global GDK_KEY_Hangul_J_KkogjiDalrinIeung: cint <comptime> = 3833
global GDK_KEY_Hangul_J_YeorinHieuh: cint <comptime> = 3834
global GDK_KEY_Korean_Won: cint <comptime> = 3839
global GDK_KEY_Armenian_ligature_ew: cint <comptime> = 16778631
global GDK_KEY_Armenian_full_stop: cint <comptime> = 16778633
global GDK_KEY_Armenian_verjaket: cint <comptime> = 16778633
global GDK_KEY_Armenian_separation_mark: cint <comptime> = 16778589
global GDK_KEY_Armenian_but: cint <comptime> = 16778589
global GDK_KEY_Armenian_hyphen: cint <comptime> = 16778634
global GDK_KEY_Armenian_yentamna: cint <comptime> = 16778634
global GDK_KEY_Armenian_exclam: cint <comptime> = 16778588
global GDK_KEY_Armenian_amanak: cint <comptime> = 16778588
global GDK_KEY_Armenian_accent: cint <comptime> = 16778587
global GDK_KEY_Armenian_shesht: cint <comptime> = 16778587
global GDK_KEY_Armenian_question: cint <comptime> = 16778590
global GDK_KEY_Armenian_paruyk: cint <comptime> = 16778590
global GDK_KEY_Armenian_AYB: cint <comptime> = 16778545
global GDK_KEY_Armenian_ayb: cint <comptime> = 16778593
global GDK_KEY_Armenian_BEN: cint <comptime> = 16778546
global GDK_KEY_Armenian_ben: cint <comptime> = 16778594
global GDK_KEY_Armenian_GIM: cint <comptime> = 16778547
global GDK_KEY_Armenian_gim: cint <comptime> = 16778595
global GDK_KEY_Armenian_DA: cint <comptime> = 16778548
global GDK_KEY_Armenian_da: cint <comptime> = 16778596
global GDK_KEY_Armenian_YECH: cint <comptime> = 16778549
global GDK_KEY_Armenian_yech: cint <comptime> = 16778597
global GDK_KEY_Armenian_ZA: cint <comptime> = 16778550
global GDK_KEY_Armenian_za: cint <comptime> = 16778598
global GDK_KEY_Armenian_E: cint <comptime> = 16778551
global GDK_KEY_Armenian_e: cint <comptime> = 16778599
global GDK_KEY_Armenian_AT: cint <comptime> = 16778552
global GDK_KEY_Armenian_at: cint <comptime> = 16778600
global GDK_KEY_Armenian_TO: cint <comptime> = 16778553
global GDK_KEY_Armenian_to: cint <comptime> = 16778601
global GDK_KEY_Armenian_ZHE: cint <comptime> = 16778554
global GDK_KEY_Armenian_zhe: cint <comptime> = 16778602
global GDK_KEY_Armenian_INI: cint <comptime> = 16778555
global GDK_KEY_Armenian_ini: cint <comptime> = 16778603
global GDK_KEY_Armenian_LYUN: cint <comptime> = 16778556
global GDK_KEY_Armenian_lyun: cint <comptime> = 16778604
global GDK_KEY_Armenian_KHE: cint <comptime> = 16778557
global GDK_KEY_Armenian_khe: cint <comptime> = 16778605
global GDK_KEY_Armenian_TSA: cint <comptime> = 16778558
global GDK_KEY_Armenian_tsa: cint <comptime> = 16778606
global GDK_KEY_Armenian_KEN: cint <comptime> = 16778559
global GDK_KEY_Armenian_ken: cint <comptime> = 16778607
global GDK_KEY_Armenian_HO: cint <comptime> = 16778560
global GDK_KEY_Armenian_ho: cint <comptime> = 16778608
global GDK_KEY_Armenian_DZA: cint <comptime> = 16778561
global GDK_KEY_Armenian_dza: cint <comptime> = 16778609
global GDK_KEY_Armenian_GHAT: cint <comptime> = 16778562
global GDK_KEY_Armenian_ghat: cint <comptime> = 16778610
global GDK_KEY_Armenian_TCHE: cint <comptime> = 16778563
global GDK_KEY_Armenian_tche: cint <comptime> = 16778611
global GDK_KEY_Armenian_MEN: cint <comptime> = 16778564
global GDK_KEY_Armenian_men: cint <comptime> = 16778612
global GDK_KEY_Armenian_HI: cint <comptime> = 16778565
global GDK_KEY_Armenian_hi: cint <comptime> = 16778613
global GDK_KEY_Armenian_NU: cint <comptime> = 16778566
global GDK_KEY_Armenian_nu: cint <comptime> = 16778614
global GDK_KEY_Armenian_SHA: cint <comptime> = 16778567
global GDK_KEY_Armenian_sha: cint <comptime> = 16778615
global GDK_KEY_Armenian_VO: cint <comptime> = 16778568
global GDK_KEY_Armenian_vo: cint <comptime> = 16778616
global GDK_KEY_Armenian_CHA: cint <comptime> = 16778569
global GDK_KEY_Armenian_cha: cint <comptime> = 16778617
global GDK_KEY_Armenian_PE: cint <comptime> = 16778570
global GDK_KEY_Armenian_pe: cint <comptime> = 16778618
global GDK_KEY_Armenian_JE: cint <comptime> = 16778571
global GDK_KEY_Armenian_je: cint <comptime> = 16778619
global GDK_KEY_Armenian_RA: cint <comptime> = 16778572
global GDK_KEY_Armenian_ra: cint <comptime> = 16778620
global GDK_KEY_Armenian_SE: cint <comptime> = 16778573
global GDK_KEY_Armenian_se: cint <comptime> = 16778621
global GDK_KEY_Armenian_VEV: cint <comptime> = 16778574
global GDK_KEY_Armenian_vev: cint <comptime> = 16778622
global GDK_KEY_Armenian_TYUN: cint <comptime> = 16778575
global GDK_KEY_Armenian_tyun: cint <comptime> = 16778623
global GDK_KEY_Armenian_RE: cint <comptime> = 16778576
global GDK_KEY_Armenian_re: cint <comptime> = 16778624
global GDK_KEY_Armenian_TSO: cint <comptime> = 16778577
global GDK_KEY_Armenian_tso: cint <comptime> = 16778625
global GDK_KEY_Armenian_VYUN: cint <comptime> = 16778578
global GDK_KEY_Armenian_vyun: cint <comptime> = 16778626
global GDK_KEY_Armenian_PYUR: cint <comptime> = 16778579
global GDK_KEY_Armenian_pyur: cint <comptime> = 16778627
global GDK_KEY_Armenian_KE: cint <comptime> = 16778580
global GDK_KEY_Armenian_ke: cint <comptime> = 16778628
global GDK_KEY_Armenian_O: cint <comptime> = 16778581
global GDK_KEY_Armenian_o: cint <comptime> = 16778629
global GDK_KEY_Armenian_FE: cint <comptime> = 16778582
global GDK_KEY_Armenian_fe: cint <comptime> = 16778630
global GDK_KEY_Armenian_apostrophe: cint <comptime> = 16778586
global GDK_KEY_Georgian_an: cint <comptime> = 16781520
global GDK_KEY_Georgian_ban: cint <comptime> = 16781521
global GDK_KEY_Georgian_gan: cint <comptime> = 16781522
global GDK_KEY_Georgian_don: cint <comptime> = 16781523
global GDK_KEY_Georgian_en: cint <comptime> = 16781524
global GDK_KEY_Georgian_vin: cint <comptime> = 16781525
global GDK_KEY_Georgian_zen: cint <comptime> = 16781526
global GDK_KEY_Georgian_tan: cint <comptime> = 16781527
global GDK_KEY_Georgian_in: cint <comptime> = 16781528
global GDK_KEY_Georgian_kan: cint <comptime> = 16781529
global GDK_KEY_Georgian_las: cint <comptime> = 16781530
global GDK_KEY_Georgian_man: cint <comptime> = 16781531
global GDK_KEY_Georgian_nar: cint <comptime> = 16781532
global GDK_KEY_Georgian_on: cint <comptime> = 16781533
global GDK_KEY_Georgian_par: cint <comptime> = 16781534
global GDK_KEY_Georgian_zhar: cint <comptime> = 16781535
global GDK_KEY_Georgian_rae: cint <comptime> = 16781536
global GDK_KEY_Georgian_san: cint <comptime> = 16781537
global GDK_KEY_Georgian_tar: cint <comptime> = 16781538
global GDK_KEY_Georgian_un: cint <comptime> = 16781539
global GDK_KEY_Georgian_phar: cint <comptime> = 16781540
global GDK_KEY_Georgian_khar: cint <comptime> = 16781541
global GDK_KEY_Georgian_ghan: cint <comptime> = 16781542
global GDK_KEY_Georgian_qar: cint <comptime> = 16781543
global GDK_KEY_Georgian_shin: cint <comptime> = 16781544
global GDK_KEY_Georgian_chin: cint <comptime> = 16781545
global GDK_KEY_Georgian_can: cint <comptime> = 16781546
global GDK_KEY_Georgian_jil: cint <comptime> = 16781547
global GDK_KEY_Georgian_cil: cint <comptime> = 16781548
global GDK_KEY_Georgian_char: cint <comptime> = 16781549
global GDK_KEY_Georgian_xan: cint <comptime> = 16781550
global GDK_KEY_Georgian_jhan: cint <comptime> = 16781551
global GDK_KEY_Georgian_hae: cint <comptime> = 16781552
global GDK_KEY_Georgian_he: cint <comptime> = 16781553
global GDK_KEY_Georgian_hie: cint <comptime> = 16781554
global GDK_KEY_Georgian_we: cint <comptime> = 16781555
global GDK_KEY_Georgian_har: cint <comptime> = 16781556
global GDK_KEY_Georgian_hoe: cint <comptime> = 16781557
global GDK_KEY_Georgian_fi: cint <comptime> = 16781558
global GDK_KEY_Xabovedot: cint <comptime> = 16785034
global GDK_KEY_Ibreve: cint <comptime> = 16777516
global GDK_KEY_Zstroke: cint <comptime> = 16777653
global GDK_KEY_Gcaron: cint <comptime> = 16777702
global GDK_KEY_Ocaron: cint <comptime> = 16777681
global GDK_KEY_Obarred: cint <comptime> = 16777631
global GDK_KEY_xabovedot: cint <comptime> = 16785035
global GDK_KEY_ibreve: cint <comptime> = 16777517
global GDK_KEY_zstroke: cint <comptime> = 16777654
global GDK_KEY_gcaron: cint <comptime> = 16777703
global GDK_KEY_ocaron: cint <comptime> = 16777682
global GDK_KEY_obarred: cint <comptime> = 16777845
global GDK_KEY_SCHWA: cint <comptime> = 16777615
global GDK_KEY_schwa: cint <comptime> = 16777817
global GDK_KEY_EZH: cint <comptime> = 16777655
global GDK_KEY_ezh: cint <comptime> = 16777874
global GDK_KEY_Lbelowdot: cint <comptime> = 16784950
global GDK_KEY_lbelowdot: cint <comptime> = 16784951
global GDK_KEY_Abelowdot: cint <comptime> = 16785056
global GDK_KEY_abelowdot: cint <comptime> = 16785057
global GDK_KEY_Ahook: cint <comptime> = 16785058
global GDK_KEY_ahook: cint <comptime> = 16785059
global GDK_KEY_Acircumflexacute: cint <comptime> = 16785060
global GDK_KEY_acircumflexacute: cint <comptime> = 16785061
global GDK_KEY_Acircumflexgrave: cint <comptime> = 16785062
global GDK_KEY_acircumflexgrave: cint <comptime> = 16785063
global GDK_KEY_Acircumflexhook: cint <comptime> = 16785064
global GDK_KEY_acircumflexhook: cint <comptime> = 16785065
global GDK_KEY_Acircumflextilde: cint <comptime> = 16785066
global GDK_KEY_acircumflextilde: cint <comptime> = 16785067
global GDK_KEY_Acircumflexbelowdot: cint <comptime> = 16785068
global GDK_KEY_acircumflexbelowdot: cint <comptime> = 16785069
global GDK_KEY_Abreveacute: cint <comptime> = 16785070
global GDK_KEY_abreveacute: cint <comptime> = 16785071
global GDK_KEY_Abrevegrave: cint <comptime> = 16785072
global GDK_KEY_abrevegrave: cint <comptime> = 16785073
global GDK_KEY_Abrevehook: cint <comptime> = 16785074
global GDK_KEY_abrevehook: cint <comptime> = 16785075
global GDK_KEY_Abrevetilde: cint <comptime> = 16785076
global GDK_KEY_abrevetilde: cint <comptime> = 16785077
global GDK_KEY_Abrevebelowdot: cint <comptime> = 16785078
global GDK_KEY_abrevebelowdot: cint <comptime> = 16785079
global GDK_KEY_Ebelowdot: cint <comptime> = 16785080
global GDK_KEY_ebelowdot: cint <comptime> = 16785081
global GDK_KEY_Ehook: cint <comptime> = 16785082
global GDK_KEY_ehook: cint <comptime> = 16785083
global GDK_KEY_Etilde: cint <comptime> = 16785084
global GDK_KEY_etilde: cint <comptime> = 16785085
global GDK_KEY_Ecircumflexacute: cint <comptime> = 16785086
global GDK_KEY_ecircumflexacute: cint <comptime> = 16785087
global GDK_KEY_Ecircumflexgrave: cint <comptime> = 16785088
global GDK_KEY_ecircumflexgrave: cint <comptime> = 16785089
global GDK_KEY_Ecircumflexhook: cint <comptime> = 16785090
global GDK_KEY_ecircumflexhook: cint <comptime> = 16785091
global GDK_KEY_Ecircumflextilde: cint <comptime> = 16785092
global GDK_KEY_ecircumflextilde: cint <comptime> = 16785093
global GDK_KEY_Ecircumflexbelowdot: cint <comptime> = 16785094
global GDK_KEY_ecircumflexbelowdot: cint <comptime> = 16785095
global GDK_KEY_Ihook: cint <comptime> = 16785096
global GDK_KEY_ihook: cint <comptime> = 16785097
global GDK_KEY_Ibelowdot: cint <comptime> = 16785098
global GDK_KEY_ibelowdot: cint <comptime> = 16785099
global GDK_KEY_Obelowdot: cint <comptime> = 16785100
global GDK_KEY_obelowdot: cint <comptime> = 16785101
global GDK_KEY_Ohook: cint <comptime> = 16785102
global GDK_KEY_ohook: cint <comptime> = 16785103
global GDK_KEY_Ocircumflexacute: cint <comptime> = 16785104
global GDK_KEY_ocircumflexacute: cint <comptime> = 16785105
global GDK_KEY_Ocircumflexgrave: cint <comptime> = 16785106
global GDK_KEY_ocircumflexgrave: cint <comptime> = 16785107
global GDK_KEY_Ocircumflexhook: cint <comptime> = 16785108
global GDK_KEY_ocircumflexhook: cint <comptime> = 16785109
global GDK_KEY_Ocircumflextilde: cint <comptime> = 16785110
global GDK_KEY_ocircumflextilde: cint <comptime> = 16785111
global GDK_KEY_Ocircumflexbelowdot: cint <comptime> = 16785112
global GDK_KEY_ocircumflexbelowdot: cint <comptime> = 16785113
global GDK_KEY_Ohornacute: cint <comptime> = 16785114
global GDK_KEY_ohornacute: cint <comptime> = 16785115
global GDK_KEY_Ohorngrave: cint <comptime> = 16785116
global GDK_KEY_ohorngrave: cint <comptime> = 16785117
global GDK_KEY_Ohornhook: cint <comptime> = 16785118
global GDK_KEY_ohornhook: cint <comptime> = 16785119
global GDK_KEY_Ohorntilde: cint <comptime> = 16785120
global GDK_KEY_ohorntilde: cint <comptime> = 16785121
global GDK_KEY_Ohornbelowdot: cint <comptime> = 16785122
global GDK_KEY_ohornbelowdot: cint <comptime> = 16785123
global GDK_KEY_Ubelowdot: cint <comptime> = 16785124
global GDK_KEY_ubelowdot: cint <comptime> = 16785125
global GDK_KEY_Uhook: cint <comptime> = 16785126
global GDK_KEY_uhook: cint <comptime> = 16785127
global GDK_KEY_Uhornacute: cint <comptime> = 16785128
global GDK_KEY_uhornacute: cint <comptime> = 16785129
global GDK_KEY_Uhorngrave: cint <comptime> = 16785130
global GDK_KEY_uhorngrave: cint <comptime> = 16785131
global GDK_KEY_Uhornhook: cint <comptime> = 16785132
global GDK_KEY_uhornhook: cint <comptime> = 16785133
global GDK_KEY_Uhorntilde: cint <comptime> = 16785134
global GDK_KEY_uhorntilde: cint <comptime> = 16785135
global GDK_KEY_Uhornbelowdot: cint <comptime> = 16785136
global GDK_KEY_uhornbelowdot: cint <comptime> = 16785137
global GDK_KEY_Ybelowdot: cint <comptime> = 16785140
global GDK_KEY_ybelowdot: cint <comptime> = 16785141
global GDK_KEY_Yhook: cint <comptime> = 16785142
global GDK_KEY_yhook: cint <comptime> = 16785143
global GDK_KEY_Ytilde: cint <comptime> = 16785144
global GDK_KEY_ytilde: cint <comptime> = 16785145
global GDK_KEY_Ohorn: cint <comptime> = 16777632
global GDK_KEY_ohorn: cint <comptime> = 16777633
global GDK_KEY_Uhorn: cint <comptime> = 16777647
global GDK_KEY_uhorn: cint <comptime> = 16777648
global GDK_KEY_EcuSign: cint <comptime> = 16785568
global GDK_KEY_ColonSign: cint <comptime> = 16785569
global GDK_KEY_CruzeiroSign: cint <comptime> = 16785570
global GDK_KEY_FFrancSign: cint <comptime> = 16785571
global GDK_KEY_LiraSign: cint <comptime> = 16785572
global GDK_KEY_MillSign: cint <comptime> = 16785573
global GDK_KEY_NairaSign: cint <comptime> = 16785574
global GDK_KEY_PesetaSign: cint <comptime> = 16785575
global GDK_KEY_RupeeSign: cint <comptime> = 16785576
global GDK_KEY_WonSign: cint <comptime> = 16785577
global GDK_KEY_NewSheqelSign: cint <comptime> = 16785578
global GDK_KEY_DongSign: cint <comptime> = 16785579
global GDK_KEY_EuroSign: cint <comptime> = 8364
global GDK_KEY_zerosuperior: cint <comptime> = 16785520
global GDK_KEY_foursuperior: cint <comptime> = 16785524
global GDK_KEY_fivesuperior: cint <comptime> = 16785525
global GDK_KEY_sixsuperior: cint <comptime> = 16785526
global GDK_KEY_sevensuperior: cint <comptime> = 16785527
global GDK_KEY_eightsuperior: cint <comptime> = 16785528
global GDK_KEY_ninesuperior: cint <comptime> = 16785529
global GDK_KEY_zerosubscript: cint <comptime> = 16785536
global GDK_KEY_onesubscript: cint <comptime> = 16785537
global GDK_KEY_twosubscript: cint <comptime> = 16785538
global GDK_KEY_threesubscript: cint <comptime> = 16785539
global GDK_KEY_foursubscript: cint <comptime> = 16785540
global GDK_KEY_fivesubscript: cint <comptime> = 16785541
global GDK_KEY_sixsubscript: cint <comptime> = 16785542
global GDK_KEY_sevensubscript: cint <comptime> = 16785543
global GDK_KEY_eightsubscript: cint <comptime> = 16785544
global GDK_KEY_ninesubscript: cint <comptime> = 16785545
global GDK_KEY_partdifferential: cint <comptime> = 16785922
global GDK_KEY_emptyset: cint <comptime> = 16785925
global GDK_KEY_elementof: cint <comptime> = 16785928
global GDK_KEY_notelementof: cint <comptime> = 16785929
global GDK_KEY_containsas: cint <comptime> = 16785931
global GDK_KEY_squareroot: cint <comptime> = 16785946
global GDK_KEY_cuberoot: cint <comptime> = 16785947
global GDK_KEY_fourthroot: cint <comptime> = 16785948
global GDK_KEY_dintegral: cint <comptime> = 16785964
global GDK_KEY_tintegral: cint <comptime> = 16785965
global GDK_KEY_because: cint <comptime> = 16785973
global GDK_KEY_approxeq: cint <comptime> = 16785992
global GDK_KEY_notapproxeq: cint <comptime> = 16785991
global GDK_KEY_notidentical: cint <comptime> = 16786018
global GDK_KEY_stricteq: cint <comptime> = 16786019
global GDK_KEY_braille_dot_1: cint <comptime> = 65521
global GDK_KEY_braille_dot_2: cint <comptime> = 65522
global GDK_KEY_braille_dot_3: cint <comptime> = 65523
global GDK_KEY_braille_dot_4: cint <comptime> = 65524
global GDK_KEY_braille_dot_5: cint <comptime> = 65525
global GDK_KEY_braille_dot_6: cint <comptime> = 65526
global GDK_KEY_braille_dot_7: cint <comptime> = 65527
global GDK_KEY_braille_dot_8: cint <comptime> = 65528
global GDK_KEY_braille_dot_9: cint <comptime> = 65529
global GDK_KEY_braille_dot_10: cint <comptime> = 65530
global GDK_KEY_braille_blank: cint <comptime> = 16787456
global GDK_KEY_braille_dots_1: cint <comptime> = 16787457
global GDK_KEY_braille_dots_2: cint <comptime> = 16787458
global GDK_KEY_braille_dots_12: cint <comptime> = 16787459
global GDK_KEY_braille_dots_3: cint <comptime> = 16787460
global GDK_KEY_braille_dots_13: cint <comptime> = 16787461
global GDK_KEY_braille_dots_23: cint <comptime> = 16787462
global GDK_KEY_braille_dots_123: cint <comptime> = 16787463
global GDK_KEY_braille_dots_4: cint <comptime> = 16787464
global GDK_KEY_braille_dots_14: cint <comptime> = 16787465
global GDK_KEY_braille_dots_24: cint <comptime> = 16787466
global GDK_KEY_braille_dots_124: cint <comptime> = 16787467
global GDK_KEY_braille_dots_34: cint <comptime> = 16787468
global GDK_KEY_braille_dots_134: cint <comptime> = 16787469
global GDK_KEY_braille_dots_234: cint <comptime> = 16787470
global GDK_KEY_braille_dots_1234: cint <comptime> = 16787471
global GDK_KEY_braille_dots_5: cint <comptime> = 16787472
global GDK_KEY_braille_dots_15: cint <comptime> = 16787473
global GDK_KEY_braille_dots_25: cint <comptime> = 16787474
global GDK_KEY_braille_dots_125: cint <comptime> = 16787475
global GDK_KEY_braille_dots_35: cint <comptime> = 16787476
global GDK_KEY_braille_dots_135: cint <comptime> = 16787477
global GDK_KEY_braille_dots_235: cint <comptime> = 16787478
global GDK_KEY_braille_dots_1235: cint <comptime> = 16787479
global GDK_KEY_braille_dots_45: cint <comptime> = 16787480
global GDK_KEY_braille_dots_145: cint <comptime> = 16787481
global GDK_KEY_braille_dots_245: cint <comptime> = 16787482
global GDK_KEY_braille_dots_1245: cint <comptime> = 16787483
global GDK_KEY_braille_dots_345: cint <comptime> = 16787484
global GDK_KEY_braille_dots_1345: cint <comptime> = 16787485
global GDK_KEY_braille_dots_2345: cint <comptime> = 16787486
global GDK_KEY_braille_dots_12345: cint <comptime> = 16787487
global GDK_KEY_braille_dots_6: cint <comptime> = 16787488
global GDK_KEY_braille_dots_16: cint <comptime> = 16787489
global GDK_KEY_braille_dots_26: cint <comptime> = 16787490
global GDK_KEY_braille_dots_126: cint <comptime> = 16787491
global GDK_KEY_braille_dots_36: cint <comptime> = 16787492
global GDK_KEY_braille_dots_136: cint <comptime> = 16787493
global GDK_KEY_braille_dots_236: cint <comptime> = 16787494
global GDK_KEY_braille_dots_1236: cint <comptime> = 16787495
global GDK_KEY_braille_dots_46: cint <comptime> = 16787496
global GDK_KEY_braille_dots_146: cint <comptime> = 16787497
global GDK_KEY_braille_dots_246: cint <comptime> = 16787498
global GDK_KEY_braille_dots_1246: cint <comptime> = 16787499
global GDK_KEY_braille_dots_346: cint <comptime> = 16787500
global GDK_KEY_braille_dots_1346: cint <comptime> = 16787501
global GDK_KEY_braille_dots_2346: cint <comptime> = 16787502
global GDK_KEY_braille_dots_12346: cint <comptime> = 16787503
global GDK_KEY_braille_dots_56: cint <comptime> = 16787504
global GDK_KEY_braille_dots_156: cint <comptime> = 16787505
global GDK_KEY_braille_dots_256: cint <comptime> = 16787506
global GDK_KEY_braille_dots_1256: cint <comptime> = 16787507
global GDK_KEY_braille_dots_356: cint <comptime> = 16787508
global GDK_KEY_braille_dots_1356: cint <comptime> = 16787509
global GDK_KEY_braille_dots_2356: cint <comptime> = 16787510
global GDK_KEY_braille_dots_12356: cint <comptime> = 16787511
global GDK_KEY_braille_dots_456: cint <comptime> = 16787512
global GDK_KEY_braille_dots_1456: cint <comptime> = 16787513
global GDK_KEY_braille_dots_2456: cint <comptime> = 16787514
global GDK_KEY_braille_dots_12456: cint <comptime> = 16787515
global GDK_KEY_braille_dots_3456: cint <comptime> = 16787516
global GDK_KEY_braille_dots_13456: cint <comptime> = 16787517
global GDK_KEY_braille_dots_23456: cint <comptime> = 16787518
global GDK_KEY_braille_dots_123456: cint <comptime> = 16787519
global GDK_KEY_braille_dots_7: cint <comptime> = 16787520
global GDK_KEY_braille_dots_17: cint <comptime> = 16787521
global GDK_KEY_braille_dots_27: cint <comptime> = 16787522
global GDK_KEY_braille_dots_127: cint <comptime> = 16787523
global GDK_KEY_braille_dots_37: cint <comptime> = 16787524
global GDK_KEY_braille_dots_137: cint <comptime> = 16787525
global GDK_KEY_braille_dots_237: cint <comptime> = 16787526
global GDK_KEY_braille_dots_1237: cint <comptime> = 16787527
global GDK_KEY_braille_dots_47: cint <comptime> = 16787528
global GDK_KEY_braille_dots_147: cint <comptime> = 16787529
global GDK_KEY_braille_dots_247: cint <comptime> = 16787530
global GDK_KEY_braille_dots_1247: cint <comptime> = 16787531
global GDK_KEY_braille_dots_347: cint <comptime> = 16787532
global GDK_KEY_braille_dots_1347: cint <comptime> = 16787533
global GDK_KEY_braille_dots_2347: cint <comptime> = 16787534
global GDK_KEY_braille_dots_12347: cint <comptime> = 16787535
global GDK_KEY_braille_dots_57: cint <comptime> = 16787536
global GDK_KEY_braille_dots_157: cint <comptime> = 16787537
global GDK_KEY_braille_dots_257: cint <comptime> = 16787538
global GDK_KEY_braille_dots_1257: cint <comptime> = 16787539
global GDK_KEY_braille_dots_357: cint <comptime> = 16787540
global GDK_KEY_braille_dots_1357: cint <comptime> = 16787541
global GDK_KEY_braille_dots_2357: cint <comptime> = 16787542
global GDK_KEY_braille_dots_12357: cint <comptime> = 16787543
global GDK_KEY_braille_dots_457: cint <comptime> = 16787544
global GDK_KEY_braille_dots_1457: cint <comptime> = 16787545
global GDK_KEY_braille_dots_2457: cint <comptime> = 16787546
global GDK_KEY_braille_dots_12457: cint <comptime> = 16787547
global GDK_KEY_braille_dots_3457: cint <comptime> = 16787548
global GDK_KEY_braille_dots_13457: cint <comptime> = 16787549
global GDK_KEY_braille_dots_23457: cint <comptime> = 16787550
global GDK_KEY_braille_dots_123457: cint <comptime> = 16787551
global GDK_KEY_braille_dots_67: cint <comptime> = 16787552
global GDK_KEY_braille_dots_167: cint <comptime> = 16787553
global GDK_KEY_braille_dots_267: cint <comptime> = 16787554
global GDK_KEY_braille_dots_1267: cint <comptime> = 16787555
global GDK_KEY_braille_dots_367: cint <comptime> = 16787556
global GDK_KEY_braille_dots_1367: cint <comptime> = 16787557
global GDK_KEY_braille_dots_2367: cint <comptime> = 16787558
global GDK_KEY_braille_dots_12367: cint <comptime> = 16787559
global GDK_KEY_braille_dots_467: cint <comptime> = 16787560
global GDK_KEY_braille_dots_1467: cint <comptime> = 16787561
global GDK_KEY_braille_dots_2467: cint <comptime> = 16787562
global GDK_KEY_braille_dots_12467: cint <comptime> = 16787563
global GDK_KEY_braille_dots_3467: cint <comptime> = 16787564
global GDK_KEY_braille_dots_13467: cint <comptime> = 16787565
global GDK_KEY_braille_dots_23467: cint <comptime> = 16787566
global GDK_KEY_braille_dots_123467: cint <comptime> = 16787567
global GDK_KEY_braille_dots_567: cint <comptime> = 16787568
global GDK_KEY_braille_dots_1567: cint <comptime> = 16787569
global GDK_KEY_braille_dots_2567: cint <comptime> = 16787570
global GDK_KEY_braille_dots_12567: cint <comptime> = 16787571
global GDK_KEY_braille_dots_3567: cint <comptime> = 16787572
global GDK_KEY_braille_dots_13567: cint <comptime> = 16787573
global GDK_KEY_braille_dots_23567: cint <comptime> = 16787574
global GDK_KEY_braille_dots_123567: cint <comptime> = 16787575
global GDK_KEY_braille_dots_4567: cint <comptime> = 16787576
global GDK_KEY_braille_dots_14567: cint <comptime> = 16787577
global GDK_KEY_braille_dots_24567: cint <comptime> = 16787578
global GDK_KEY_braille_dots_124567: cint <comptime> = 16787579
global GDK_KEY_braille_dots_34567: cint <comptime> = 16787580
global GDK_KEY_braille_dots_134567: cint <comptime> = 16787581
global GDK_KEY_braille_dots_234567: cint <comptime> = 16787582
global GDK_KEY_braille_dots_1234567: cint <comptime> = 16787583
global GDK_KEY_braille_dots_8: cint <comptime> = 16787584
global GDK_KEY_braille_dots_18: cint <comptime> = 16787585
global GDK_KEY_braille_dots_28: cint <comptime> = 16787586
global GDK_KEY_braille_dots_128: cint <comptime> = 16787587
global GDK_KEY_braille_dots_38: cint <comptime> = 16787588
global GDK_KEY_braille_dots_138: cint <comptime> = 16787589
global GDK_KEY_braille_dots_238: cint <comptime> = 16787590
global GDK_KEY_braille_dots_1238: cint <comptime> = 16787591
global GDK_KEY_braille_dots_48: cint <comptime> = 16787592
global GDK_KEY_braille_dots_148: cint <comptime> = 16787593
global GDK_KEY_braille_dots_248: cint <comptime> = 16787594
global GDK_KEY_braille_dots_1248: cint <comptime> = 16787595
global GDK_KEY_braille_dots_348: cint <comptime> = 16787596
global GDK_KEY_braille_dots_1348: cint <comptime> = 16787597
global GDK_KEY_braille_dots_2348: cint <comptime> = 16787598
global GDK_KEY_braille_dots_12348: cint <comptime> = 16787599
global GDK_KEY_braille_dots_58: cint <comptime> = 16787600
global GDK_KEY_braille_dots_158: cint <comptime> = 16787601
global GDK_KEY_braille_dots_258: cint <comptime> = 16787602
global GDK_KEY_braille_dots_1258: cint <comptime> = 16787603
global GDK_KEY_braille_dots_358: cint <comptime> = 16787604
global GDK_KEY_braille_dots_1358: cint <comptime> = 16787605
global GDK_KEY_braille_dots_2358: cint <comptime> = 16787606
global GDK_KEY_braille_dots_12358: cint <comptime> = 16787607
global GDK_KEY_braille_dots_458: cint <comptime> = 16787608
global GDK_KEY_braille_dots_1458: cint <comptime> = 16787609
global GDK_KEY_braille_dots_2458: cint <comptime> = 16787610
global GDK_KEY_braille_dots_12458: cint <comptime> = 16787611
global GDK_KEY_braille_dots_3458: cint <comptime> = 16787612
global GDK_KEY_braille_dots_13458: cint <comptime> = 16787613
global GDK_KEY_braille_dots_23458: cint <comptime> = 16787614
global GDK_KEY_braille_dots_123458: cint <comptime> = 16787615
global GDK_KEY_braille_dots_68: cint <comptime> = 16787616
global GDK_KEY_braille_dots_168: cint <comptime> = 16787617
global GDK_KEY_braille_dots_268: cint <comptime> = 16787618
global GDK_KEY_braille_dots_1268: cint <comptime> = 16787619
global GDK_KEY_braille_dots_368: cint <comptime> = 16787620
global GDK_KEY_braille_dots_1368: cint <comptime> = 16787621
global GDK_KEY_braille_dots_2368: cint <comptime> = 16787622
global GDK_KEY_braille_dots_12368: cint <comptime> = 16787623
global GDK_KEY_braille_dots_468: cint <comptime> = 16787624
global GDK_KEY_braille_dots_1468: cint <comptime> = 16787625
global GDK_KEY_braille_dots_2468: cint <comptime> = 16787626
global GDK_KEY_braille_dots_12468: cint <comptime> = 16787627
global GDK_KEY_braille_dots_3468: cint <comptime> = 16787628
global GDK_KEY_braille_dots_13468: cint <comptime> = 16787629
global GDK_KEY_braille_dots_23468: cint <comptime> = 16787630
global GDK_KEY_braille_dots_123468: cint <comptime> = 16787631
global GDK_KEY_braille_dots_568: cint <comptime> = 16787632
global GDK_KEY_braille_dots_1568: cint <comptime> = 16787633
global GDK_KEY_braille_dots_2568: cint <comptime> = 16787634
global GDK_KEY_braille_dots_12568: cint <comptime> = 16787635
global GDK_KEY_braille_dots_3568: cint <comptime> = 16787636
global GDK_KEY_braille_dots_13568: cint <comptime> = 16787637
global GDK_KEY_braille_dots_23568: cint <comptime> = 16787638
global GDK_KEY_braille_dots_123568: cint <comptime> = 16787639
global GDK_KEY_braille_dots_4568: cint <comptime> = 16787640
global GDK_KEY_braille_dots_14568: cint <comptime> = 16787641
global GDK_KEY_braille_dots_24568: cint <comptime> = 16787642
global GDK_KEY_braille_dots_124568: cint <comptime> = 16787643
global GDK_KEY_braille_dots_34568: cint <comptime> = 16787644
global GDK_KEY_braille_dots_134568: cint <comptime> = 16787645
global GDK_KEY_braille_dots_234568: cint <comptime> = 16787646
global GDK_KEY_braille_dots_1234568: cint <comptime> = 16787647
global GDK_KEY_braille_dots_78: cint <comptime> = 16787648
global GDK_KEY_braille_dots_178: cint <comptime> = 16787649
global GDK_KEY_braille_dots_278: cint <comptime> = 16787650
global GDK_KEY_braille_dots_1278: cint <comptime> = 16787651
global GDK_KEY_braille_dots_378: cint <comptime> = 16787652
global GDK_KEY_braille_dots_1378: cint <comptime> = 16787653
global GDK_KEY_braille_dots_2378: cint <comptime> = 16787654
global GDK_KEY_braille_dots_12378: cint <comptime> = 16787655
global GDK_KEY_braille_dots_478: cint <comptime> = 16787656
global GDK_KEY_braille_dots_1478: cint <comptime> = 16787657
global GDK_KEY_braille_dots_2478: cint <comptime> = 16787658
global GDK_KEY_braille_dots_12478: cint <comptime> = 16787659
global GDK_KEY_braille_dots_3478: cint <comptime> = 16787660
global GDK_KEY_braille_dots_13478: cint <comptime> = 16787661
global GDK_KEY_braille_dots_23478: cint <comptime> = 16787662
global GDK_KEY_braille_dots_123478: cint <comptime> = 16787663
global GDK_KEY_braille_dots_578: cint <comptime> = 16787664
global GDK_KEY_braille_dots_1578: cint <comptime> = 16787665
global GDK_KEY_braille_dots_2578: cint <comptime> = 16787666
global GDK_KEY_braille_dots_12578: cint <comptime> = 16787667
global GDK_KEY_braille_dots_3578: cint <comptime> = 16787668
global GDK_KEY_braille_dots_13578: cint <comptime> = 16787669
global GDK_KEY_braille_dots_23578: cint <comptime> = 16787670
global GDK_KEY_braille_dots_123578: cint <comptime> = 16787671
global GDK_KEY_braille_dots_4578: cint <comptime> = 16787672
global GDK_KEY_braille_dots_14578: cint <comptime> = 16787673
global GDK_KEY_braille_dots_24578: cint <comptime> = 16787674
global GDK_KEY_braille_dots_124578: cint <comptime> = 16787675
global GDK_KEY_braille_dots_34578: cint <comptime> = 16787676
global GDK_KEY_braille_dots_134578: cint <comptime> = 16787677
global GDK_KEY_braille_dots_234578: cint <comptime> = 16787678
global GDK_KEY_braille_dots_1234578: cint <comptime> = 16787679
global GDK_KEY_braille_dots_678: cint <comptime> = 16787680
global GDK_KEY_braille_dots_1678: cint <comptime> = 16787681
global GDK_KEY_braille_dots_2678: cint <comptime> = 16787682
global GDK_KEY_braille_dots_12678: cint <comptime> = 16787683
global GDK_KEY_braille_dots_3678: cint <comptime> = 16787684
global GDK_KEY_braille_dots_13678: cint <comptime> = 16787685
global GDK_KEY_braille_dots_23678: cint <comptime> = 16787686
global GDK_KEY_braille_dots_123678: cint <comptime> = 16787687
global GDK_KEY_braille_dots_4678: cint <comptime> = 16787688
global GDK_KEY_braille_dots_14678: cint <comptime> = 16787689
global GDK_KEY_braille_dots_24678: cint <comptime> = 16787690
global GDK_KEY_braille_dots_124678: cint <comptime> = 16787691
global GDK_KEY_braille_dots_34678: cint <comptime> = 16787692
global GDK_KEY_braille_dots_134678: cint <comptime> = 16787693
global GDK_KEY_braille_dots_234678: cint <comptime> = 16787694
global GDK_KEY_braille_dots_1234678: cint <comptime> = 16787695
global GDK_KEY_braille_dots_5678: cint <comptime> = 16787696
global GDK_KEY_braille_dots_15678: cint <comptime> = 16787697
global GDK_KEY_braille_dots_25678: cint <comptime> = 16787698
global GDK_KEY_braille_dots_125678: cint <comptime> = 16787699
global GDK_KEY_braille_dots_35678: cint <comptime> = 16787700
global GDK_KEY_braille_dots_135678: cint <comptime> = 16787701
global GDK_KEY_braille_dots_235678: cint <comptime> = 16787702
global GDK_KEY_braille_dots_1235678: cint <comptime> = 16787703
global GDK_KEY_braille_dots_45678: cint <comptime> = 16787704
global GDK_KEY_braille_dots_145678: cint <comptime> = 16787705
global GDK_KEY_braille_dots_245678: cint <comptime> = 16787706
global GDK_KEY_braille_dots_1245678: cint <comptime> = 16787707
global GDK_KEY_braille_dots_345678: cint <comptime> = 16787708
global GDK_KEY_braille_dots_1345678: cint <comptime> = 16787709
global GDK_KEY_braille_dots_2345678: cint <comptime> = 16787710
global GDK_KEY_braille_dots_12345678: cint <comptime> = 16787711
global GDK_KEY_Sinh_ng: cint <comptime> = 16780674
global GDK_KEY_Sinh_h2: cint <comptime> = 16780675
global GDK_KEY_Sinh_a: cint <comptime> = 16780677
global GDK_KEY_Sinh_aa: cint <comptime> = 16780678
global GDK_KEY_Sinh_ae: cint <comptime> = 16780679
global GDK_KEY_Sinh_aee: cint <comptime> = 16780680
global GDK_KEY_Sinh_i: cint <comptime> = 16780681
global GDK_KEY_Sinh_ii: cint <comptime> = 16780682
global GDK_KEY_Sinh_u: cint <comptime> = 16780683
global GDK_KEY_Sinh_uu: cint <comptime> = 16780684
global GDK_KEY_Sinh_ri: cint <comptime> = 16780685
global GDK_KEY_Sinh_rii: cint <comptime> = 16780686
global GDK_KEY_Sinh_lu: cint <comptime> = 16780687
global GDK_KEY_Sinh_luu: cint <comptime> = 16780688
global GDK_KEY_Sinh_e: cint <comptime> = 16780689
global GDK_KEY_Sinh_ee: cint <comptime> = 16780690
global GDK_KEY_Sinh_ai: cint <comptime> = 16780691
global GDK_KEY_Sinh_o: cint <comptime> = 16780692
global GDK_KEY_Sinh_oo: cint <comptime> = 16780693
global GDK_KEY_Sinh_au: cint <comptime> = 16780694
global GDK_KEY_Sinh_ka: cint <comptime> = 16780698
global GDK_KEY_Sinh_kha: cint <comptime> = 16780699
global GDK_KEY_Sinh_ga: cint <comptime> = 16780700
global GDK_KEY_Sinh_gha: cint <comptime> = 16780701
global GDK_KEY_Sinh_ng2: cint <comptime> = 16780702
global GDK_KEY_Sinh_nga: cint <comptime> = 16780703
global GDK_KEY_Sinh_ca: cint <comptime> = 16780704
global GDK_KEY_Sinh_cha: cint <comptime> = 16780705
global GDK_KEY_Sinh_ja: cint <comptime> = 16780706
global GDK_KEY_Sinh_jha: cint <comptime> = 16780707
global GDK_KEY_Sinh_nya: cint <comptime> = 16780708
global GDK_KEY_Sinh_jnya: cint <comptime> = 16780709
global GDK_KEY_Sinh_nja: cint <comptime> = 16780710
global GDK_KEY_Sinh_tta: cint <comptime> = 16780711
global GDK_KEY_Sinh_ttha: cint <comptime> = 16780712
global GDK_KEY_Sinh_dda: cint <comptime> = 16780713
global GDK_KEY_Sinh_ddha: cint <comptime> = 16780714
global GDK_KEY_Sinh_nna: cint <comptime> = 16780715
global GDK_KEY_Sinh_ndda: cint <comptime> = 16780716
global GDK_KEY_Sinh_tha: cint <comptime> = 16780717
global GDK_KEY_Sinh_thha: cint <comptime> = 16780718
global GDK_KEY_Sinh_dha: cint <comptime> = 16780719
global GDK_KEY_Sinh_dhha: cint <comptime> = 16780720
global GDK_KEY_Sinh_na: cint <comptime> = 16780721
global GDK_KEY_Sinh_ndha: cint <comptime> = 16780723
global GDK_KEY_Sinh_pa: cint <comptime> = 16780724
global GDK_KEY_Sinh_pha: cint <comptime> = 16780725
global GDK_KEY_Sinh_ba: cint <comptime> = 16780726
global GDK_KEY_Sinh_bha: cint <comptime> = 16780727
global GDK_KEY_Sinh_ma: cint <comptime> = 16780728
global GDK_KEY_Sinh_mba: cint <comptime> = 16780729
global GDK_KEY_Sinh_ya: cint <comptime> = 16780730
global GDK_KEY_Sinh_ra: cint <comptime> = 16780731
global GDK_KEY_Sinh_la: cint <comptime> = 16780733
global GDK_KEY_Sinh_va: cint <comptime> = 16780736
global GDK_KEY_Sinh_sha: cint <comptime> = 16780737
global GDK_KEY_Sinh_ssha: cint <comptime> = 16780738
global GDK_KEY_Sinh_sa: cint <comptime> = 16780739
global GDK_KEY_Sinh_ha: cint <comptime> = 16780740
global GDK_KEY_Sinh_lla: cint <comptime> = 16780741
global GDK_KEY_Sinh_fa: cint <comptime> = 16780742
global GDK_KEY_Sinh_al: cint <comptime> = 16780746
global GDK_KEY_Sinh_aa2: cint <comptime> = 16780751
global GDK_KEY_Sinh_ae2: cint <comptime> = 16780752
global GDK_KEY_Sinh_aee2: cint <comptime> = 16780753
global GDK_KEY_Sinh_i2: cint <comptime> = 16780754
global GDK_KEY_Sinh_ii2: cint <comptime> = 16780755
global GDK_KEY_Sinh_u2: cint <comptime> = 16780756
global GDK_KEY_Sinh_uu2: cint <comptime> = 16780758
global GDK_KEY_Sinh_ru2: cint <comptime> = 16780760
global GDK_KEY_Sinh_e2: cint <comptime> = 16780761
global GDK_KEY_Sinh_ee2: cint <comptime> = 16780762
global GDK_KEY_Sinh_ai2: cint <comptime> = 16780763
global GDK_KEY_Sinh_o2: cint <comptime> = 16780764
global GDK_KEY_Sinh_oo2: cint <comptime> = 16780765
global GDK_KEY_Sinh_au2: cint <comptime> = 16780766
global GDK_KEY_Sinh_lu2: cint <comptime> = 16780767
global GDK_KEY_Sinh_ruu2: cint <comptime> = 16780786
global GDK_KEY_Sinh_luu2: cint <comptime> = 16780787
global GDK_KEY_Sinh_kunddaliya: cint <comptime> = 16780788
global GDK_KEY_ModeLock: cint <comptime> = 269025025
global GDK_KEY_MonBrightnessUp: cint <comptime> = 269025026
global GDK_KEY_MonBrightnessDown: cint <comptime> = 269025027
global GDK_KEY_KbdLightOnOff: cint <comptime> = 269025028
global GDK_KEY_KbdBrightnessUp: cint <comptime> = 269025029
global GDK_KEY_KbdBrightnessDown: cint <comptime> = 269025030
global GDK_KEY_Standby: cint <comptime> = 269025040
global GDK_KEY_AudioLowerVolume: cint <comptime> = 269025041
global GDK_KEY_AudioMute: cint <comptime> = 269025042
global GDK_KEY_AudioRaiseVolume: cint <comptime> = 269025043
global GDK_KEY_AudioPlay: cint <comptime> = 269025044
global GDK_KEY_AudioStop: cint <comptime> = 269025045
global GDK_KEY_AudioPrev: cint <comptime> = 269025046
global GDK_KEY_AudioNext: cint <comptime> = 269025047
global GDK_KEY_HomePage: cint <comptime> = 269025048
global GDK_KEY_Mail: cint <comptime> = 269025049
global GDK_KEY_Start: cint <comptime> = 269025050
global GDK_KEY_Search: cint <comptime> = 269025051
global GDK_KEY_AudioRecord: cint <comptime> = 269025052
global GDK_KEY_Calculator: cint <comptime> = 269025053
global GDK_KEY_Memo: cint <comptime> = 269025054
global GDK_KEY_ToDoList: cint <comptime> = 269025055
global GDK_KEY_Calendar: cint <comptime> = 269025056
global GDK_KEY_PowerDown: cint <comptime> = 269025057
global GDK_KEY_ContrastAdjust: cint <comptime> = 269025058
global GDK_KEY_RockerUp: cint <comptime> = 269025059
global GDK_KEY_RockerDown: cint <comptime> = 269025060
global GDK_KEY_RockerEnter: cint <comptime> = 269025061
global GDK_KEY_Back: cint <comptime> = 269025062
global GDK_KEY_Forward: cint <comptime> = 269025063
global GDK_KEY_Stop: cint <comptime> = 269025064
global GDK_KEY_Refresh: cint <comptime> = 269025065
global GDK_KEY_PowerOff: cint <comptime> = 269025066
global GDK_KEY_WakeUp: cint <comptime> = 269025067
global GDK_KEY_Eject: cint <comptime> = 269025068
global GDK_KEY_ScreenSaver: cint <comptime> = 269025069
global GDK_KEY_WWW: cint <comptime> = 269025070
global GDK_KEY_Sleep: cint <comptime> = 269025071
global GDK_KEY_Favorites: cint <comptime> = 269025072
global GDK_KEY_AudioPause: cint <comptime> = 269025073
global GDK_KEY_AudioMedia: cint <comptime> = 269025074
global GDK_KEY_MyComputer: cint <comptime> = 269025075
global GDK_KEY_VendorHome: cint <comptime> = 269025076
global GDK_KEY_LightBulb: cint <comptime> = 269025077
global GDK_KEY_Shop: cint <comptime> = 269025078
global GDK_KEY_History: cint <comptime> = 269025079
global GDK_KEY_OpenURL: cint <comptime> = 269025080
global GDK_KEY_AddFavorite: cint <comptime> = 269025081
global GDK_KEY_HotLinks: cint <comptime> = 269025082
global GDK_KEY_BrightnessAdjust: cint <comptime> = 269025083
global GDK_KEY_Finance: cint <comptime> = 269025084
global GDK_KEY_Community: cint <comptime> = 269025085
global GDK_KEY_AudioRewind: cint <comptime> = 269025086
global GDK_KEY_BackForward: cint <comptime> = 269025087
global GDK_KEY_Launch0: cint <comptime> = 269025088
global GDK_KEY_Launch1: cint <comptime> = 269025089
global GDK_KEY_Launch2: cint <comptime> = 269025090
global GDK_KEY_Launch3: cint <comptime> = 269025091
global GDK_KEY_Launch4: cint <comptime> = 269025092
global GDK_KEY_Launch5: cint <comptime> = 269025093
global GDK_KEY_Launch6: cint <comptime> = 269025094
global GDK_KEY_Launch7: cint <comptime> = 269025095
global GDK_KEY_Launch8: cint <comptime> = 269025096
global GDK_KEY_Launch9: cint <comptime> = 269025097
global GDK_KEY_LaunchA: cint <comptime> = 269025098
global GDK_KEY_LaunchB: cint <comptime> = 269025099
global GDK_KEY_LaunchC: cint <comptime> = 269025100
global GDK_KEY_LaunchD: cint <comptime> = 269025101
global GDK_KEY_LaunchE: cint <comptime> = 269025102
global GDK_KEY_LaunchF: cint <comptime> = 269025103
global GDK_KEY_ApplicationLeft: cint <comptime> = 269025104
global GDK_KEY_ApplicationRight: cint <comptime> = 269025105
global GDK_KEY_Book: cint <comptime> = 269025106
global GDK_KEY_CD: cint <comptime> = 269025107
global GDK_KEY_WindowClear: cint <comptime> = 269025109
global GDK_KEY_Close: cint <comptime> = 269025110
global GDK_KEY_Copy: cint <comptime> = 269025111
global GDK_KEY_Cut: cint <comptime> = 269025112
global GDK_KEY_Display: cint <comptime> = 269025113
global GDK_KEY_DOS: cint <comptime> = 269025114
global GDK_KEY_Documents: cint <comptime> = 269025115
global GDK_KEY_Excel: cint <comptime> = 269025116
global GDK_KEY_Explorer: cint <comptime> = 269025117
global GDK_KEY_Game: cint <comptime> = 269025118
global GDK_KEY_Go: cint <comptime> = 269025119
global GDK_KEY_iTouch: cint <comptime> = 269025120
global GDK_KEY_LogOff: cint <comptime> = 269025121
global GDK_KEY_Market: cint <comptime> = 269025122
global GDK_KEY_Meeting: cint <comptime> = 269025123
global GDK_KEY_MenuKB: cint <comptime> = 269025125
global GDK_KEY_MenuPB: cint <comptime> = 269025126
global GDK_KEY_MySites: cint <comptime> = 269025127
global GDK_KEY_New: cint <comptime> = 269025128
global GDK_KEY_News: cint <comptime> = 269025129
global GDK_KEY_OfficeHome: cint <comptime> = 269025130
global GDK_KEY_Open: cint <comptime> = 269025131
global GDK_KEY_Option: cint <comptime> = 269025132
global GDK_KEY_Paste: cint <comptime> = 269025133
global GDK_KEY_Phone: cint <comptime> = 269025134
global GDK_KEY_Reply: cint <comptime> = 269025138
global GDK_KEY_Reload: cint <comptime> = 269025139
global GDK_KEY_RotateWindows: cint <comptime> = 269025140
global GDK_KEY_RotationPB: cint <comptime> = 269025141
global GDK_KEY_RotationKB: cint <comptime> = 269025142
global GDK_KEY_Save: cint <comptime> = 269025143
global GDK_KEY_ScrollUp: cint <comptime> = 269025144
global GDK_KEY_ScrollDown: cint <comptime> = 269025145
global GDK_KEY_ScrollClick: cint <comptime> = 269025146
global GDK_KEY_Send: cint <comptime> = 269025147
global GDK_KEY_Spell: cint <comptime> = 269025148
global GDK_KEY_SplitScreen: cint <comptime> = 269025149
global GDK_KEY_Support: cint <comptime> = 269025150
global GDK_KEY_TaskPane: cint <comptime> = 269025151
global GDK_KEY_Terminal: cint <comptime> = 269025152
global GDK_KEY_Tools: cint <comptime> = 269025153
global GDK_KEY_Travel: cint <comptime> = 269025154
global GDK_KEY_UserPB: cint <comptime> = 269025156
global GDK_KEY_User1KB: cint <comptime> = 269025157
global GDK_KEY_User2KB: cint <comptime> = 269025158
global GDK_KEY_Video: cint <comptime> = 269025159
global GDK_KEY_WheelButton: cint <comptime> = 269025160
global GDK_KEY_Word: cint <comptime> = 269025161
global GDK_KEY_Xfer: cint <comptime> = 269025162
global GDK_KEY_ZoomIn: cint <comptime> = 269025163
global GDK_KEY_ZoomOut: cint <comptime> = 269025164
global GDK_KEY_Away: cint <comptime> = 269025165
global GDK_KEY_Messenger: cint <comptime> = 269025166
global GDK_KEY_WebCam: cint <comptime> = 269025167
global GDK_KEY_MailForward: cint <comptime> = 269025168
global GDK_KEY_Pictures: cint <comptime> = 269025169
global GDK_KEY_Music: cint <comptime> = 269025170
global GDK_KEY_Battery: cint <comptime> = 269025171
global GDK_KEY_Bluetooth: cint <comptime> = 269025172
global GDK_KEY_WLAN: cint <comptime> = 269025173
global GDK_KEY_UWB: cint <comptime> = 269025174
global GDK_KEY_AudioForward: cint <comptime> = 269025175
global GDK_KEY_AudioRepeat: cint <comptime> = 269025176
global GDK_KEY_AudioRandomPlay: cint <comptime> = 269025177
global GDK_KEY_Subtitle: cint <comptime> = 269025178
global GDK_KEY_AudioCycleTrack: cint <comptime> = 269025179
global GDK_KEY_CycleAngle: cint <comptime> = 269025180
global GDK_KEY_FrameBack: cint <comptime> = 269025181
global GDK_KEY_FrameForward: cint <comptime> = 269025182
global GDK_KEY_Time: cint <comptime> = 269025183
global GDK_KEY_SelectButton: cint <comptime> = 269025184
global GDK_KEY_View: cint <comptime> = 269025185
global GDK_KEY_TopMenu: cint <comptime> = 269025186
global GDK_KEY_Red: cint <comptime> = 269025187
global GDK_KEY_Green: cint <comptime> = 269025188
global GDK_KEY_Yellow: cint <comptime> = 269025189
global GDK_KEY_Blue: cint <comptime> = 269025190
global GDK_KEY_Suspend: cint <comptime> = 269025191
global GDK_KEY_Hibernate: cint <comptime> = 269025192
global GDK_KEY_TouchpadToggle: cint <comptime> = 269025193
global GDK_KEY_TouchpadOn: cint <comptime> = 269025200
global GDK_KEY_TouchpadOff: cint <comptime> = 269025201
global GDK_KEY_AudioMicMute: cint <comptime> = 269025202
global GDK_KEY_Keyboard: cint <comptime> = 269025203
global GDK_KEY_WWAN: cint <comptime> = 269025204
global GDK_KEY_RFKill: cint <comptime> = 269025205
global GDK_KEY_AudioPreset: cint <comptime> = 269025206
global GDK_KEY_Switch_VT_1: cint <comptime> = 269024769
global GDK_KEY_Switch_VT_2: cint <comptime> = 269024770
global GDK_KEY_Switch_VT_3: cint <comptime> = 269024771
global GDK_KEY_Switch_VT_4: cint <comptime> = 269024772
global GDK_KEY_Switch_VT_5: cint <comptime> = 269024773
global GDK_KEY_Switch_VT_6: cint <comptime> = 269024774
global GDK_KEY_Switch_VT_7: cint <comptime> = 269024775
global GDK_KEY_Switch_VT_8: cint <comptime> = 269024776
global GDK_KEY_Switch_VT_9: cint <comptime> = 269024777
global GDK_KEY_Switch_VT_10: cint <comptime> = 269024778
global GDK_KEY_Switch_VT_11: cint <comptime> = 269024779
global GDK_KEY_Switch_VT_12: cint <comptime> = 269024780
global GDK_KEY_Ungrab: cint <comptime> = 269024800
global GDK_KEY_ClearGrab: cint <comptime> = 269024801
global GDK_KEY_Next_VMode: cint <comptime> = 269024802
global GDK_KEY_Prev_VMode: cint <comptime> = 269024803
global GDK_KEY_LogWindowTree: cint <comptime> = 269024804
global GDK_KEY_LogGrabInfo: cint <comptime> = 269024805
global GDK_MEMORY_DEFAULT: cint <comptime> = 0
global GDK_TYPE_MEMORY_TEXTURE: GType <cimport,nodecl,const>
global GDK_TYPE_PAINTABLE: GType <cimport,nodecl,const>
global GDK_TYPE_POPUP: GType <cimport,nodecl,const>
global GDK_TYPE_SNAPSHOT: GType <cimport,nodecl,const>
global GDK_TYPE_TOPLEVEL_LAYOUT: GType <cimport,nodecl,const>
global GDK_TYPE_TOPLEVEL: GType <cimport,nodecl,const>
global GDK_TYPE_TOPLEVEL_SIZE: GType <cimport,nodecl,const>
global GDK_TYPE_VULKAN_CONTEXT: GType <cimport,nodecl,const>
global GDK_VULKAN_ERROR: GQuark <cimport,nodecl,const>
global GRAPHENE_HAS_SSE: cint <comptime> = 1
global GRAPHENE_HAS_SCALAR: cint <comptime> = 1
global GRAPHENE_SIMD_S: cstring <comptime> = "sse"
global GRAPHENE_PI: float32 <comptime> = 3.141592653589793
global GRAPHENE_PI_2: float32 <comptime> = 1.5707963267948966
global GRAPHENE_MAJOR_VERSION: cint <comptime> = 1
global GRAPHENE_MINOR_VERSION: cint <comptime> = 10
global GRAPHENE_MICRO_VERSION: cint <comptime> = 6
global GRAPHENE_VEC2_LEN: cint <comptime> = 2
global GRAPHENE_VEC3_LEN: cint <comptime> = 3
global GRAPHENE_VEC4_LEN: cint <comptime> = 4
global FP_ILOGB0: cint <comptime> = -2147483648
global FP_ILOGBNAN: cint <comptime> = -2147483648
global MATH_ERRNO: cint <comptime> = 1
global MATH_ERREXCEPT: cint <comptime> = 2
global math_errhandling: cint <comptime> = 3
global M_E: float64 <comptime> = 2.718281828459045
global M_LOG2E: float64 <comptime> = 1.4426950408889634
global M_LOG10E: float64 <comptime> = 0.4342944819032518
global M_LN2: float64 <comptime> = 0.6931471805599453
global M_LN10: float64 <comptime> = 2.302585092994046
global M_PI: float64 <comptime> = 3.141592653589793
global M_PI_2: float64 <comptime> = 1.5707963267948966
global M_PI_4: float64 <comptime> = 0.7853981633974483
global M_1_PI: float64 <comptime> = 0.3183098861837907
global M_2_PI: float64 <comptime> = 0.6366197723675814
global M_2_SQRTPI: float64 <comptime> = 1.1283791670955126
global M_SQRT2: float64 <comptime> = 1.4142135623730951
global M_SQRT1_2: float64 <comptime> = 0.7071067811865476
global GSK_TYPE_SHADER_ARGS_BUILDER: GType <cimport,nodecl,const>
global GSK_TYPE_GL_SHADER: GType <cimport,nodecl,const>
global GSK_TYPE_RENDER_NODE: GType <cimport,nodecl,const>
global GSK_SERIALIZATION_ERROR: GQuark <cimport,nodecl,const>
global GSK_TYPE_DEBUG_NODE: GType <cimport,nodecl,const>
global GSK_TYPE_COLOR_NODE: GType <cimport,nodecl,const>
global GSK_TYPE_TEXTURE_NODE: GType <cimport,nodecl,const>
global GSK_TYPE_LINEAR_GRADIENT_NODE: GType <cimport,nodecl,const>
global GSK_TYPE_REPEATING_LINEAR_GRADIENT_NODE: GType <cimport,nodecl,const>
global GSK_TYPE_RADIAL_GRADIENT_NODE: GType <cimport,nodecl,const>
global GSK_TYPE_REPEATING_RADIAL_GRADIENT_NODE: GType <cimport,nodecl,const>
global GSK_TYPE_CONIC_GRADIENT_NODE: GType <cimport,nodecl,const>
global GSK_TYPE_BORDER_NODE: GType <cimport,nodecl,const>
global GSK_TYPE_INSET_SHADOW_NODE: GType <cimport,nodecl,const>
global GSK_TYPE_OUTSET_SHADOW_NODE: GType <cimport,nodecl,const>
global GSK_TYPE_CAIRO_NODE: GType <cimport,nodecl,const>
global GSK_TYPE_CONTAINER_NODE: GType <cimport,nodecl,const>
global GSK_TYPE_TRANSFORM_NODE: GType <cimport,nodecl,const>
global GSK_TYPE_OPACITY_NODE: GType <cimport,nodecl,const>
global GSK_TYPE_COLOR_MATRIX_NODE: GType <cimport,nodecl,const>
global GSK_TYPE_REPEAT_NODE: GType <cimport,nodecl,const>
global GSK_TYPE_CLIP_NODE: GType <cimport,nodecl,const>
global GSK_TYPE_ROUNDED_CLIP_NODE: GType <cimport,nodecl,const>
global GSK_TYPE_SHADOW_NODE: GType <cimport,nodecl,const>
global GSK_TYPE_BLEND_NODE: GType <cimport,nodecl,const>
global GSK_TYPE_CROSS_FADE_NODE: GType <cimport,nodecl,const>
global GSK_TYPE_TEXT_NODE: GType <cimport,nodecl,const>
global GSK_TYPE_BLUR_NODE: GType <cimport,nodecl,const>
global GSK_TYPE_GL_SHADER_NODE: GType <cimport,nodecl,const>
global GSK_TYPE_RENDERER: GType <cimport,nodecl,const>
global GSK_TYPE_TRANSFORM: GType <cimport,nodecl,const>
global GSK_TYPE_CAIRO_RENDERER: GType <cimport,nodecl,const>
global GSK_TYPE_RENDER_NODE_TYPE: GType <cimport,nodecl,const>
global GSK_TYPE_SCALING_FILTER: GType <cimport,nodecl,const>
global GSK_TYPE_BLEND_MODE: GType <cimport,nodecl,const>
global GSK_TYPE_CORNER: GType <cimport,nodecl,const>
global GSK_TYPE_SERIALIZATION_ERROR: GType <cimport,nodecl,const>
global GSK_TYPE_TRANSFORM_CATEGORY: GType <cimport,nodecl,const>
global GSK_TYPE_GL_UNIFORM_TYPE: GType <cimport,nodecl,const>
global GTK_UNIT_PIXEL: cint <comptime> = 0
global GTK_ACCESSIBLE_VALUE_UNDEFINED: cint <comptime> = -1
global GTK_TYPE_BORDER: GType <cimport,nodecl,const>
global GTK_INVALID_LIST_POSITION: guint <comptime> = 4294967295
global GTK_TYPE_SHORTCUT: GType <cimport,nodecl,const>
global GTK_TYPE_SHORTCUT_ACTION: GType <cimport,nodecl,const>
global GTK_TYPE_NOTHING_ACTION: GType <cimport,nodecl,const>
global GTK_TYPE_CALLBACK_ACTION: GType <cimport,nodecl,const>
global GTK_TYPE_MNEMONIC_ACTION: GType <cimport,nodecl,const>
global GTK_TYPE_ACTIVATE_ACTION: GType <cimport,nodecl,const>
global GTK_TYPE_SIGNAL_ACTION: GType <cimport,nodecl,const>
global GTK_TYPE_NAMED_ACTION: GType <cimport,nodecl,const>
global GTK_TYPE_WIDGET: GType <cimport,nodecl,const>
global GTK_TYPE_REQUISITION: GType <cimport,nodecl,const>
global GTK_TYPE_APPLICATION: GType <cimport,nodecl,const>
global GTK_TYPE_WINDOW: GType <cimport,nodecl,const>
global GTK_TYPE_ABOUT_DIALOG: GType <cimport,nodecl,const>
global GTK_TYPE_ACCESSIBLE: GType <cimport,nodecl,const>
global GTK_TYPE_ACTIONABLE: GType <cimport,nodecl,const>
global GTK_TYPE_ACTION_BAR: GType <cimport,nodecl,const>
global GTK_TYPE_ADJUSTMENT: GType <cimport,nodecl,const>
global GTK_TYPE_APP_CHOOSER: GType <cimport,nodecl,const>
global GTK_TYPE_DIALOG: GType <cimport,nodecl,const>
global GTK_TYPE_APP_CHOOSER_DIALOG: GType <cimport,nodecl,const>
global GTK_TYPE_APP_CHOOSER_WIDGET: GType <cimport,nodecl,const>
global GTK_TYPE_APP_CHOOSER_BUTTON: GType <cimport,nodecl,const>
global GTK_TYPE_SHORTCUTS_WINDOW: GType <cimport,nodecl,const>
global GTK_TYPE_APPLICATION_WINDOW: GType <cimport,nodecl,const>
global GTK_TYPE_ASPECT_FRAME: GType <cimport,nodecl,const>
global GTK_TYPE_ASSISTANT: GType <cimport,nodecl,const>
global GTK_TYPE_ASSISTANT_PAGE: GType <cimport,nodecl,const>
global GTK_TYPE_AT_CONTEXT: GType <cimport,nodecl,const>
global GTK_TYPE_LAYOUT_CHILD: GType <cimport,nodecl,const>
global GTK_TYPE_LAYOUT_MANAGER: GType <cimport,nodecl,const>
global GTK_TYPE_BIN_LAYOUT: GType <cimport,nodecl,const>
global GTK_TYPE_BITSET: GType <cimport,nodecl,const>
global GTK_TYPE_BOOKMARK_LIST: GType <cimport,nodecl,const>
global GTK_TYPE_EXPRESSION: GType <cimport,nodecl,const>
global GTK_TYPE_EXPRESSION_WATCH: GType <cimport,nodecl,const>
global GTK_TYPE_PROPERTY_EXPRESSION: GType <cimport,nodecl,const>
global GTK_TYPE_CONSTANT_EXPRESSION: GType <cimport,nodecl,const>
global GTK_TYPE_OBJECT_EXPRESSION: GType <cimport,nodecl,const>
global GTK_TYPE_CLOSURE_EXPRESSION: GType <cimport,nodecl,const>
global GTK_TYPE_CCLOSURE_EXPRESSION: GType <cimport,nodecl,const>
global GTK_TYPE_PARAM_SPEC_EXPRESSION: GType <cimport,nodecl,const>
global GTK_TYPE_FILTER: GType <cimport,nodecl,const>
global GTK_TYPE_BOOL_FILTER: GType <cimport,nodecl,const>
global GTK_TYPE_BOX_LAYOUT: GType <cimport,nodecl,const>
global GTK_TYPE_BOX: GType <cimport,nodecl,const>
global GTK_TYPE_BUILDER_SCOPE: GType <cimport,nodecl,const>
global GTK_TYPE_BUILDER_CSCOPE: GType <cimport,nodecl,const>
global GTK_TYPE_BUILDER: GType <cimport,nodecl,const>
global GTK_BUILDER_ERROR: GQuark <cimport,nodecl,const>
global GTK_TYPE_BUILDABLE: GType <cimport,nodecl,const>
global GTK_TYPE_LIST_ITEM_FACTORY: GType <cimport,nodecl,const>
global GTK_TYPE_BUILDER_LIST_ITEM_FACTORY: GType <cimport,nodecl,const>
global GTK_TYPE_BUTTON: GType <cimport,nodecl,const>
global GTK_TYPE_CALENDAR: GType <cimport,nodecl,const>
global GTK_TYPE_CELL_EDITABLE: GType <cimport,nodecl,const>
global GTK_TYPE_CELL_RENDERER: GType <cimport,nodecl,const>
global GTK_TYPE_TREE_MODEL: GType <cimport,nodecl,const>
global GTK_TYPE_TREE_ITER: GType <cimport,nodecl,const>
global GTK_TYPE_TREE_PATH: GType <cimport,nodecl,const>
global GTK_TYPE_TREE_ROW_REFERENCE: GType <cimport,nodecl,const>
global GTK_TYPE_CELL_AREA: GType <cimport,nodecl,const>
global GTK_TYPE_CELL_AREA_BOX: GType <cimport,nodecl,const>
global GTK_TYPE_CELL_AREA_CONTEXT: GType <cimport,nodecl,const>
global GTK_TYPE_CELL_LAYOUT: GType <cimport,nodecl,const>
global GTK_TYPE_CELL_RENDERER_TEXT: GType <cimport,nodecl,const>
global GTK_TYPE_CELL_RENDERER_ACCEL: GType <cimport,nodecl,const>
global GTK_TYPE_CELL_RENDERER_COMBO: GType <cimport,nodecl,const>
global GTK_TYPE_CELL_RENDERER_PIXBUF: GType <cimport,nodecl,const>
global GTK_TYPE_CELL_RENDERER_PROGRESS: GType <cimport,nodecl,const>
global GTK_TYPE_CELL_RENDERER_SPIN: GType <cimport,nodecl,const>
global GTK_TYPE_CELL_RENDERER_SPINNER: GType <cimport,nodecl,const>
global GTK_TYPE_CELL_RENDERER_TOGGLE: GType <cimport,nodecl,const>
global GTK_TYPE_CELL_VIEW: GType <cimport,nodecl,const>
global GTK_TYPE_CENTER_BOX: GType <cimport,nodecl,const>
global GTK_TYPE_CENTER_LAYOUT: GType <cimport,nodecl,const>
global GTK_TYPE_TOGGLE_BUTTON: GType <cimport,nodecl,const>
global GTK_TYPE_CHECK_BUTTON: GType <cimport,nodecl,const>
global GTK_TYPE_COLOR_BUTTON: GType <cimport,nodecl,const>
global GTK_TYPE_COLOR_CHOOSER: GType <cimport,nodecl,const>
global GTK_TYPE_COLOR_CHOOSER_DIALOG: GType <cimport,nodecl,const>
global GTK_TYPE_COLOR_CHOOSER_WIDGET: GType <cimport,nodecl,const>
global GTK_TYPE_SORTER: GType <cimport,nodecl,const>
global GTK_TYPE_SORT_LIST_MODEL: GType <cimport,nodecl,const>
global GTK_TYPE_SELECTION_MODEL: GType <cimport,nodecl,const>
global GTK_TYPE_COLUMN_VIEW: GType <cimport,nodecl,const>
global GTK_TYPE_COLUMN_VIEW_COLUMN: GType <cimport,nodecl,const>
global GTK_TYPE_TREE_SORTABLE: GType <cimport,nodecl,const>
global GTK_TREE_SORTABLE_DEFAULT_SORT_COLUMN_ID: cint <comptime> = -1
global GTK_TREE_SORTABLE_UNSORTED_SORT_COLUMN_ID: cint <comptime> = -2
global GTK_TYPE_TREE_VIEW_COLUMN: GType <cimport,nodecl,const>
global GTK_TYPE_EDITABLE: GType <cimport,nodecl,const>
global GTK_TYPE_IM_CONTEXT: GType <cimport,nodecl,const>
global GTK_ENTRY_BUFFER_MAX_SIZE: cint <comptime> = 65535
global GTK_TYPE_ENTRY_BUFFER: GType <cimport,nodecl,const>
global GTK_TYPE_LIST_STORE: GType <cimport,nodecl,const>
global GTK_TYPE_TREE_MODEL_FILTER: GType <cimport,nodecl,const>
global GTK_TYPE_ENTRY_COMPLETION: GType <cimport,nodecl,const>
global GTK_TYPE_IMAGE: GType <cimport,nodecl,const>
global GTK_TYPE_ENTRY: GType <cimport,nodecl,const>
global GTK_TYPE_TREE_VIEW: GType <cimport,nodecl,const>
global GTK_TYPE_COMBO_BOX: GType <cimport,nodecl,const>
global GTK_TYPE_COMBO_BOX_TEXT: GType <cimport,nodecl,const>
global GTK_TYPE_CONSTRAINT_TARGET: GType <cimport,nodecl,const>
global GTK_TYPE_CONSTRAINT: GType <cimport,nodecl,const>
global GTK_TYPE_LICENSE: GType <cimport,nodecl,const>
global GTK_TYPE_APPLICATION_INHIBIT_FLAGS: GType <cimport,nodecl,const>
global GTK_TYPE_ASSISTANT_PAGE_TYPE: GType <cimport,nodecl,const>
global GTK_TYPE_BUILDER_ERROR: GType <cimport,nodecl,const>
global GTK_TYPE_BUILDER_CLOSURE_FLAGS: GType <cimport,nodecl,const>
global GTK_TYPE_CELL_RENDERER_STATE: GType <cimport,nodecl,const>
global GTK_TYPE_CELL_RENDERER_MODE: GType <cimport,nodecl,const>
global GTK_TYPE_CELL_RENDERER_ACCEL_MODE: GType <cimport,nodecl,const>
global GTK_TYPE_DEBUG_FLAGS: GType <cimport,nodecl,const>
global GTK_TYPE_DIALOG_FLAGS: GType <cimport,nodecl,const>
global GTK_TYPE_RESPONSE_TYPE: GType <cimport,nodecl,const>
global GTK_TYPE_EDITABLE_PROPERTIES: GType <cimport,nodecl,const>
global GTK_TYPE_ENTRY_ICON_POSITION: GType <cimport,nodecl,const>
global GTK_TYPE_ALIGN: GType <cimport,nodecl,const>
global GTK_TYPE_ARROW_TYPE: GType <cimport,nodecl,const>
global GTK_TYPE_BASELINE_POSITION: GType <cimport,nodecl,const>
global GTK_TYPE_DELETE_TYPE: GType <cimport,nodecl,const>
global GTK_TYPE_DIRECTION_TYPE: GType <cimport,nodecl,const>
global GTK_TYPE_ICON_SIZE: GType <cimport,nodecl,const>
global GTK_TYPE_SENSITIVITY_TYPE: GType <cimport,nodecl,const>
global GTK_TYPE_TEXT_DIRECTION: GType <cimport,nodecl,const>
global GTK_TYPE_JUSTIFICATION: GType <cimport,nodecl,const>
global GTK_TYPE_MESSAGE_TYPE: GType <cimport,nodecl,const>
global GTK_TYPE_MOVEMENT_STEP: GType <cimport,nodecl,const>
global GTK_TYPE_NATURAL_WRAP_MODE: GType <cimport,nodecl,const>
global GTK_TYPE_SCROLL_STEP: GType <cimport,nodecl,const>
global GTK_TYPE_ORIENTATION: GType <cimport,nodecl,const>
global GTK_TYPE_OVERFLOW: GType <cimport,nodecl,const>
global GTK_TYPE_PACK_TYPE: GType <cimport,nodecl,const>
global GTK_TYPE_POSITION_TYPE: GType <cimport,nodecl,const>
global GTK_TYPE_SCROLL_TYPE: GType <cimport,nodecl,const>
global GTK_TYPE_SELECTION_MODE: GType <cimport,nodecl,const>
global GTK_TYPE_WRAP_MODE: GType <cimport,nodecl,const>
global GTK_TYPE_SORT_TYPE: GType <cimport,nodecl,const>
global GTK_TYPE_PRINT_PAGES: GType <cimport,nodecl,const>
global GTK_TYPE_PAGE_SET: GType <cimport,nodecl,const>
global GTK_TYPE_NUMBER_UP_LAYOUT: GType <cimport,nodecl,const>
global GTK_TYPE_ORDERING: GType <cimport,nodecl,const>
global GTK_TYPE_PAGE_ORIENTATION: GType <cimport,nodecl,const>
global GTK_TYPE_PRINT_QUALITY: GType <cimport,nodecl,const>
global GTK_TYPE_PRINT_DUPLEX: GType <cimport,nodecl,const>
global GTK_TYPE_UNIT: GType <cimport,nodecl,const>
global GTK_TYPE_TREE_VIEW_GRID_LINES: GType <cimport,nodecl,const>
global GTK_TYPE_SIZE_GROUP_MODE: GType <cimport,nodecl,const>
global GTK_TYPE_SIZE_REQUEST_MODE: GType <cimport,nodecl,const>
global GTK_TYPE_SCROLLABLE_POLICY: GType <cimport,nodecl,const>
global GTK_TYPE_STATE_FLAGS: GType <cimport,nodecl,const>
global GTK_TYPE_BORDER_STYLE: GType <cimport,nodecl,const>
global GTK_TYPE_LEVEL_BAR_MODE: GType <cimport,nodecl,const>
global GTK_TYPE_INPUT_PURPOSE: GType <cimport,nodecl,const>
global GTK_TYPE_INPUT_HINTS: GType <cimport,nodecl,const>
global GTK_TYPE_PROPAGATION_PHASE: GType <cimport,nodecl,const>
global GTK_TYPE_PROPAGATION_LIMIT: GType <cimport,nodecl,const>
global GTK_TYPE_EVENT_SEQUENCE_STATE: GType <cimport,nodecl,const>
global GTK_TYPE_PAN_DIRECTION: GType <cimport,nodecl,const>
global GTK_TYPE_SHORTCUT_SCOPE: GType <cimport,nodecl,const>
global GTK_TYPE_PICK_FLAGS: GType <cimport,nodecl,const>
global GTK_TYPE_CONSTRAINT_RELATION: GType <cimport,nodecl,const>
global GTK_TYPE_CONSTRAINT_STRENGTH: GType <cimport,nodecl,const>
global GTK_TYPE_CONSTRAINT_ATTRIBUTE: GType <cimport,nodecl,const>
global GTK_TYPE_CONSTRAINT_VFL_PARSER_ERROR: GType <cimport,nodecl,const>
global GTK_TYPE_SYSTEM_SETTING: GType <cimport,nodecl,const>
global GTK_TYPE_SYMBOLIC_COLOR: GType <cimport,nodecl,const>
global GTK_TYPE_ACCESSIBLE_ROLE: GType <cimport,nodecl,const>
global GTK_TYPE_ACCESSIBLE_STATE: GType <cimport,nodecl,const>
global GTK_TYPE_ACCESSIBLE_PROPERTY: GType <cimport,nodecl,const>
global GTK_TYPE_ACCESSIBLE_RELATION: GType <cimport,nodecl,const>
global GTK_TYPE_ACCESSIBLE_TRISTATE: GType <cimport,nodecl,const>
global GTK_TYPE_ACCESSIBLE_INVALID_STATE: GType <cimport,nodecl,const>
global GTK_TYPE_ACCESSIBLE_AUTOCOMPLETE: GType <cimport,nodecl,const>
global GTK_TYPE_ACCESSIBLE_SORT: GType <cimport,nodecl,const>
global GTK_TYPE_EVENT_CONTROLLER_SCROLL_FLAGS: GType <cimport,nodecl,const>
global GTK_TYPE_FILE_CHOOSER_ACTION: GType <cimport,nodecl,const>
global GTK_TYPE_FILE_CHOOSER_ERROR: GType <cimport,nodecl,const>
global GTK_TYPE_FILTER_MATCH: GType <cimport,nodecl,const>
global GTK_TYPE_FILTER_CHANGE: GType <cimport,nodecl,const>
global GTK_TYPE_FONT_CHOOSER_LEVEL: GType <cimport,nodecl,const>
global GTK_TYPE_ICON_LOOKUP_FLAGS: GType <cimport,nodecl,const>
global GTK_TYPE_ICON_THEME_ERROR: GType <cimport,nodecl,const>
global GTK_TYPE_ICON_VIEW_DROP_POSITION: GType <cimport,nodecl,const>
global GTK_TYPE_IMAGE_TYPE: GType <cimport,nodecl,const>
global GTK_TYPE_BUTTONS_TYPE: GType <cimport,nodecl,const>
global GTK_TYPE_NOTEBOOK_TAB: GType <cimport,nodecl,const>
global GTK_TYPE_PAD_ACTION_TYPE: GType <cimport,nodecl,const>
global GTK_TYPE_POPOVER_MENU_FLAGS: GType <cimport,nodecl,const>
global GTK_TYPE_PRINT_STATUS: GType <cimport,nodecl,const>
global GTK_TYPE_PRINT_OPERATION_RESULT: GType <cimport,nodecl,const>
global GTK_TYPE_PRINT_OPERATION_ACTION: GType <cimport,nodecl,const>
global GTK_TYPE_PRINT_ERROR: GType <cimport,nodecl,const>
global GTK_TYPE_RECENT_MANAGER_ERROR: GType <cimport,nodecl,const>
global GTK_TYPE_REVEALER_TRANSITION_TYPE: GType <cimport,nodecl,const>
global GTK_TYPE_CORNER_TYPE: GType <cimport,nodecl,const>
global GTK_TYPE_POLICY_TYPE: GType <cimport,nodecl,const>
global GTK_TYPE_SHORTCUT_ACTION_FLAGS: GType <cimport,nodecl,const>
global GTK_TYPE_SHORTCUT_TYPE: GType <cimport,nodecl,const>
global GTK_TYPE_SORTER_ORDER: GType <cimport,nodecl,const>
global GTK_TYPE_SORTER_CHANGE: GType <cimport,nodecl,const>
global GTK_TYPE_SPIN_BUTTON_UPDATE_POLICY: GType <cimport,nodecl,const>
global GTK_TYPE_SPIN_TYPE: GType <cimport,nodecl,const>
global GTK_TYPE_STACK_TRANSITION_TYPE: GType <cimport,nodecl,const>
global GTK_TYPE_STRING_FILTER_MATCH_MODE: GType <cimport,nodecl,const>
global GTK_TYPE_STYLE_CONTEXT_PRINT_FLAGS: GType <cimport,nodecl,const>
global GTK_TYPE_TEXT_SEARCH_FLAGS: GType <cimport,nodecl,const>
global GTK_TYPE_TEXT_WINDOW_TYPE: GType <cimport,nodecl,const>
global GTK_TYPE_TEXT_VIEW_LAYER: GType <cimport,nodecl,const>
global GTK_TYPE_TEXT_EXTEND_SELECTION: GType <cimport,nodecl,const>
global GTK_TYPE_TREE_MODEL_FLAGS: GType <cimport,nodecl,const>
global GTK_TYPE_TREE_VIEW_DROP_POSITION: GType <cimport,nodecl,const>
global GTK_TYPE_TREE_VIEW_COLUMN_SIZING: GType <cimport,nodecl,const>
global GTK_TYPE_CONSTRAINT_GUIDE: GType <cimport,nodecl,const>
global GTK_TYPE_CONSTRAINT_LAYOUT: GType <cimport,nodecl,const>
global GTK_TYPE_CONSTRAINT_LAYOUT_CHILD: GType <cimport,nodecl,const>
global GTK_CONSTRAINT_VFL_PARSER_ERROR: GQuark <cimport,nodecl,const>
global GTK_TYPE_CSS_PROVIDER: GType <cimport,nodecl,const>
global GTK_TYPE_CUSTOM_LAYOUT: GType <cimport,nodecl,const>
global GTK_TYPE_CUSTOM_SORTER: GType <cimport,nodecl,const>
global GTK_TYPE_DIRECTORY_LIST: GType <cimport,nodecl,const>
global GTK_TYPE_DRAG_ICON: GType <cimport,nodecl,const>
global GTK_TYPE_DRAG_SOURCE: GType <cimport,nodecl,const>
global GTK_TYPE_DRAWING_AREA: GType <cimport,nodecl,const>
global GTK_TYPE_EVENT_CONTROLLER: GType <cimport,nodecl,const>
global GTK_TYPE_DROP_CONTROLLER_MOTION: GType <cimport,nodecl,const>
global GTK_TYPE_DROP_TARGET: GType <cimport,nodecl,const>
global GTK_TYPE_DROP_TARGET_ASYNC: GType <cimport,nodecl,const>
global GTK_TYPE_DROP_DOWN: GType <cimport,nodecl,const>
global GTK_TYPE_EDITABLE_LABEL: GType <cimport,nodecl,const>
global GTK_TYPE_EMOJI_CHOOSER: GType <cimport,nodecl,const>
global GTK_TYPE_EVENT_CONTROLLER_FOCUS: GType <cimport,nodecl,const>
global GTK_TYPE_EVENT_CONTROLLER_KEY: GType <cimport,nodecl,const>
global GTK_TYPE_EVENT_CONTROLLER_LEGACY: GType <cimport,nodecl,const>
global GTK_TYPE_EVENT_CONTROLLER_MOTION: GType <cimport,nodecl,const>
global GTK_TYPE_EVENT_CONTROLLER_SCROLL: GType <cimport,nodecl,const>
global GTK_TYPE_EXPANDER: GType <cimport,nodecl,const>
global GTK_TYPE_FIXED: GType <cimport,nodecl,const>
global GTK_TYPE_FIXED_LAYOUT: GType <cimport,nodecl,const>
global GTK_TYPE_FIXED_LAYOUT_CHILD: GType <cimport,nodecl,const>
global GTK_TYPE_FILE_FILTER: GType <cimport,nodecl,const>
global GTK_TYPE_FILE_CHOOSER: GType <cimport,nodecl,const>
global GTK_FILE_CHOOSER_ERROR: GQuark <cimport,nodecl,const>
global GTK_TYPE_FILE_CHOOSER_DIALOG: GType <cimport,nodecl,const>
global GTK_TYPE_NATIVE_DIALOG: GType <cimport,nodecl,const>
global GTK_TYPE_FILE_CHOOSER_NATIVE: GType <cimport,nodecl,const>
global GTK_TYPE_FILE_CHOOSER_WIDGET: GType <cimport,nodecl,const>
global GTK_TYPE_FILTER_LIST_MODEL: GType <cimport,nodecl,const>
global GTK_TYPE_CUSTOM_FILTER: GType <cimport,nodecl,const>
global GTK_TYPE_FLATTEN_LIST_MODEL: GType <cimport,nodecl,const>
global GTK_TYPE_FLOW_BOX: GType <cimport,nodecl,const>
global GTK_TYPE_FLOW_BOX_CHILD: GType <cimport,nodecl,const>
global GTK_TYPE_FONT_BUTTON: GType <cimport,nodecl,const>
global GTK_TYPE_FONT_CHOOSER: GType <cimport,nodecl,const>
global GTK_TYPE_FONT_CHOOSER_DIALOG: GType <cimport,nodecl,const>
global GTK_TYPE_FONT_CHOOSER_WIDGET: GType <cimport,nodecl,const>
global GTK_TYPE_FRAME: GType <cimport,nodecl,const>
global GTK_TYPE_GESTURE: GType <cimport,nodecl,const>
global GTK_TYPE_GESTURE_SINGLE: GType <cimport,nodecl,const>
global GTK_TYPE_GESTURE_CLICK: GType <cimport,nodecl,const>
global GTK_TYPE_GESTURE_DRAG: GType <cimport,nodecl,const>
global GTK_TYPE_GESTURE_LONG_PRESS: GType <cimport,nodecl,const>
global GTK_TYPE_GESTURE_PAN: GType <cimport,nodecl,const>
global GTK_TYPE_GESTURE_ROTATE: GType <cimport,nodecl,const>
global GTK_TYPE_GESTURE_STYLUS: GType <cimport,nodecl,const>
global GTK_TYPE_GESTURE_SWIPE: GType <cimport,nodecl,const>
global GTK_TYPE_GESTURE_ZOOM: GType <cimport,nodecl,const>
global GTK_TYPE_GL_AREA: GType <cimport,nodecl,const>
global GTK_TYPE_GRID: GType <cimport,nodecl,const>
global GTK_TYPE_GRID_LAYOUT: GType <cimport,nodecl,const>
global GTK_TYPE_GRID_LAYOUT_CHILD: GType <cimport,nodecl,const>
global GTK_TYPE_LIST_BASE: GType <cimport,nodecl,const>
global GTK_TYPE_GRID_VIEW: GType <cimport,nodecl,const>
global GTK_TYPE_HEADER_BAR: GType <cimport,nodecl,const>
global GTK_TYPE_ICON_PAINTABLE: GType <cimport,nodecl,const>
global GTK_TYPE_ICON_THEME: GType <cimport,nodecl,const>
global GTK_ICON_THEME_ERROR: GQuark <cimport,nodecl,const>
global GTK_TYPE_TOOLTIP: GType <cimport,nodecl,const>
global GTK_TYPE_ICON_VIEW: GType <cimport,nodecl,const>
global GTK_MAX_COMPOSE_LEN: cint <comptime> = 7
global GTK_TYPE_IM_CONTEXT_SIMPLE: GType <cimport,nodecl,const>
global GTK_TYPE_IM_MULTICONTEXT: GType <cimport,nodecl,const>
global GTK_TYPE_INFO_BAR: GType <cimport,nodecl,const>
global GTK_TYPE_LABEL: GType <cimport,nodecl,const>
global GTK_TYPE_LEVEL_BAR: GType <cimport,nodecl,const>
global GTK_LEVEL_BAR_OFFSET_LOW: cstring <comptime> = "low"
global GTK_LEVEL_BAR_OFFSET_HIGH: cstring <comptime> = "high"
global GTK_LEVEL_BAR_OFFSET_FULL: cstring <comptime> = "full"
global GTK_TYPE_LINK_BUTTON: GType <cimport,nodecl,const>
global GTK_TYPE_LIST_BOX: GType <cimport,nodecl,const>
global GTK_TYPE_LIST_BOX_ROW: GType <cimport,nodecl,const>
global GTK_TYPE_LIST_ITEM: GType <cimport,nodecl,const>
global GTK_TYPE_LIST_VIEW: GType <cimport,nodecl,const>
global GTK_TYPE_LOCK_BUTTON: GType <cimport,nodecl,const>
global GTK_PRIORITY_RESIZE: cint <comptime> = 110
global GTK_TYPE_MAP_LIST_MODEL: GType <cimport,nodecl,const>
global GTK_TYPE_MEDIA_STREAM: GType <cimport,nodecl,const>
global GTK_TYPE_MEDIA_CONTROLS: GType <cimport,nodecl,const>
global GTK_MEDIA_FILE_EXTENSION_POINT_NAME: cstring <comptime> = "gtk-media-file"
global GTK_TYPE_MEDIA_FILE: GType <cimport,nodecl,const>
global GTK_TYPE_POPOVER: GType <cimport,nodecl,const>
global GTK_TYPE_MENU_BUTTON: GType <cimport,nodecl,const>
global GTK_TYPE_MESSAGE_DIALOG: GType <cimport,nodecl,const>
global GTK_TYPE_MOUNT_OPERATION: GType <cimport,nodecl,const>
global GTK_TYPE_MULTI_FILTER: GType <cimport,nodecl,const>
global GTK_TYPE_ANY_FILTER: GType <cimport,nodecl,const>
global GTK_TYPE_EVERY_FILTER: GType <cimport,nodecl,const>
global GTK_TYPE_MULTI_SELECTION: GType <cimport,nodecl,const>
global GTK_TYPE_MULTI_SORTER: GType <cimport,nodecl,const>
global GTK_TYPE_NATIVE: GType <cimport,nodecl,const>
global GTK_TYPE_NO_SELECTION: GType <cimport,nodecl,const>
global GTK_TYPE_NOTEBOOK: GType <cimport,nodecl,const>
global GTK_TYPE_NOTEBOOK_PAGE: GType <cimport,nodecl,const>
global GTK_TYPE_NUMERIC_SORTER: GType <cimport,nodecl,const>
global GTK_TYPE_ORIENTABLE: GType <cimport,nodecl,const>
global GTK_TYPE_OVERLAY: GType <cimport,nodecl,const>
global GTK_TYPE_OVERLAY_LAYOUT: GType <cimport,nodecl,const>
global GTK_TYPE_OVERLAY_LAYOUT_CHILD: GType <cimport,nodecl,const>
global GTK_TYPE_PAD_CONTROLLER: GType <cimport,nodecl,const>
global GTK_TYPE_PAPER_SIZE: GType <cimport,nodecl,const>
global GTK_PAPER_NAME_A3: cstring <comptime> = "iso_a3"
global GTK_PAPER_NAME_A4: cstring <comptime> = "iso_a4"
global GTK_PAPER_NAME_A5: cstring <comptime> = "iso_a5"
global GTK_PAPER_NAME_B5: cstring <comptime> = "iso_b5"
global GTK_PAPER_NAME_LETTER: cstring <comptime> = "na_letter"
global GTK_PAPER_NAME_EXECUTIVE: cstring <comptime> = "na_executive"
global GTK_PAPER_NAME_LEGAL: cstring <comptime> = "na_legal"
global GTK_TYPE_PAGE_SETUP: GType <cimport,nodecl,const>
global GTK_TYPE_PANED: GType <cimport,nodecl,const>
global GTK_TYPE_PASSWORD_ENTRY: GType <cimport,nodecl,const>
global GTK_TYPE_PASSWORD_ENTRY_BUFFER: GType <cimport,nodecl,const>
global GTK_TYPE_PICTURE: GType <cimport,nodecl,const>
global GTK_TYPE_POPOVER_MENU: GType <cimport,nodecl,const>
global GTK_TYPE_POPOVER_MENU_BAR: GType <cimport,nodecl,const>
global GTK_TYPE_PRINT_CONTEXT: GType <cimport,nodecl,const>
global GTK_TYPE_PRINT_SETTINGS: GType <cimport,nodecl,const>
global GTK_PRINT_SETTINGS_PRINTER: cstring <comptime> = "printer"
global GTK_PRINT_SETTINGS_ORIENTATION: cstring <comptime> = "orientation"
global GTK_PRINT_SETTINGS_PAPER_FORMAT: cstring <comptime> = "paper-format"
global GTK_PRINT_SETTINGS_PAPER_WIDTH: cstring <comptime> = "paper-width"
global GTK_PRINT_SETTINGS_PAPER_HEIGHT: cstring <comptime> = "paper-height"
global GTK_PRINT_SETTINGS_N_COPIES: cstring <comptime> = "n-copies"
global GTK_PRINT_SETTINGS_DEFAULT_SOURCE: cstring <comptime> = "default-source"
global GTK_PRINT_SETTINGS_QUALITY: cstring <comptime> = "quality"
global GTK_PRINT_SETTINGS_RESOLUTION: cstring <comptime> = "resolution"
global GTK_PRINT_SETTINGS_USE_COLOR: cstring <comptime> = "use-color"
global GTK_PRINT_SETTINGS_DUPLEX: cstring <comptime> = "duplex"
global GTK_PRINT_SETTINGS_COLLATE: cstring <comptime> = "collate"
global GTK_PRINT_SETTINGS_REVERSE: cstring <comptime> = "reverse"
global GTK_PRINT_SETTINGS_MEDIA_TYPE: cstring <comptime> = "media-type"
global GTK_PRINT_SETTINGS_DITHER: cstring <comptime> = "dither"
global GTK_PRINT_SETTINGS_SCALE: cstring <comptime> = "scale"
global GTK_PRINT_SETTINGS_PRINT_PAGES: cstring <comptime> = "print-pages"
global GTK_PRINT_SETTINGS_PAGE_RANGES: cstring <comptime> = "page-ranges"
global GTK_PRINT_SETTINGS_PAGE_SET: cstring <comptime> = "page-set"
global GTK_PRINT_SETTINGS_FINISHINGS: cstring <comptime> = "finishings"
global GTK_PRINT_SETTINGS_NUMBER_UP: cstring <comptime> = "number-up"
global GTK_PRINT_SETTINGS_NUMBER_UP_LAYOUT: cstring <comptime> = "number-up-layout"
global GTK_PRINT_SETTINGS_OUTPUT_BIN: cstring <comptime> = "output-bin"
global GTK_PRINT_SETTINGS_RESOLUTION_X: cstring <comptime> = "resolution-x"
global GTK_PRINT_SETTINGS_RESOLUTION_Y: cstring <comptime> = "resolution-y"
global GTK_PRINT_SETTINGS_PRINTER_LPI: cstring <comptime> = "printer-lpi"
global GTK_PRINT_SETTINGS_OUTPUT_DIR: cstring <comptime> = "output-dir"
global GTK_PRINT_SETTINGS_OUTPUT_BASENAME: cstring <comptime> = "output-basename"
global GTK_PRINT_SETTINGS_OUTPUT_FILE_FORMAT: cstring <comptime> = "output-file-format"
global GTK_PRINT_SETTINGS_OUTPUT_URI: cstring <comptime> = "output-uri"
global GTK_PRINT_SETTINGS_WIN32_DRIVER_VERSION: cstring <comptime> = "win32-driver-version"
global GTK_PRINT_SETTINGS_WIN32_DRIVER_EXTRA: cstring <comptime> = "win32-driver-extra"
global GTK_TYPE_PRINT_OPERATION_PREVIEW: GType <cimport,nodecl,const>
global GTK_TYPE_PRINT_OPERATION: GType <cimport,nodecl,const>
global GTK_PRINT_ERROR: GQuark <cimport,nodecl,const>
global GTK_TYPE_PROGRESS_BAR: GType <cimport,nodecl,const>
global GTK_TYPE_RANGE: GType <cimport,nodecl,const>
global GTK_TYPE_RECENT_INFO: GType <cimport,nodecl,const>
global GTK_TYPE_RECENT_MANAGER: GType <cimport,nodecl,const>
global GTK_RECENT_MANAGER_ERROR: GQuark <cimport,nodecl,const>
global GTK_TYPE_REVEALER: GType <cimport,nodecl,const>
global GTK_TYPE_ROOT: GType <cimport,nodecl,const>
global GTK_TYPE_SCALE: GType <cimport,nodecl,const>
global GTK_TYPE_SCALE_BUTTON: GType <cimport,nodecl,const>
global GTK_TYPE_SCROLLABLE: GType <cimport,nodecl,const>
global GTK_TYPE_SCROLLBAR: GType <cimport,nodecl,const>
global GTK_TYPE_SCROLLED_WINDOW: GType <cimport,nodecl,const>
global GTK_TYPE_SEARCH_BAR: GType <cimport,nodecl,const>
global GTK_TYPE_SEARCH_ENTRY: GType <cimport,nodecl,const>
global GTK_TYPE_SELECTION_FILTER_MODEL: GType <cimport,nodecl,const>
global GTK_TYPE_SEPARATOR: GType <cimport,nodecl,const>
global GTK_TYPE_SETTINGS: GType <cimport,nodecl,const>
global GTK_TYPE_SHORTCUT_CONTROLLER: GType <cimport,nodecl,const>
global GTK_TYPE_SHORTCUT_LABEL: GType <cimport,nodecl,const>
global GTK_TYPE_SHORTCUT_MANAGER: GType <cimport,nodecl,const>
global GTK_TYPE_SHORTCUTS_GROUP: GType <cimport,nodecl,const>
global GTK_TYPE_SHORTCUTS_SECTION: GType <cimport,nodecl,const>
global GTK_TYPE_SHORTCUTS_SHORTCUT: GType <cimport,nodecl,const>
global GTK_TYPE_SHORTCUT_TRIGGER: GType <cimport,nodecl,const>
global GTK_TYPE_NEVER_TRIGGER: GType <cimport,nodecl,const>
global GTK_TYPE_KEYVAL_TRIGGER: GType <cimport,nodecl,const>
global GTK_TYPE_MNEMONIC_TRIGGER: GType <cimport,nodecl,const>
global GTK_TYPE_ALTERNATIVE_TRIGGER: GType <cimport,nodecl,const>
global GTK_TYPE_SIGNAL_LIST_ITEM_FACTORY: GType <cimport,nodecl,const>
global GTK_TYPE_SINGLE_SELECTION: GType <cimport,nodecl,const>
global GTK_TYPE_SLICE_LIST_MODEL: GType <cimport,nodecl,const>
global GTK_TYPE_SNAPSHOT: GType <cimport,nodecl,const>
global GTK_TYPE_STACK: GType <cimport,nodecl,const>
global GTK_TYPE_STACK_PAGE: GType <cimport,nodecl,const>
global GTK_TYPE_STACK_SIDEBAR: GType <cimport,nodecl,const>
global GTK_TYPE_SIZE_GROUP: GType <cimport,nodecl,const>
global GTK_TYPE_SPIN_BUTTON: GType <cimport,nodecl,const>
global GTK_INPUT_ERROR: cint <comptime> = -1
global GTK_TYPE_SPINNER: GType <cimport,nodecl,const>
global GTK_TYPE_STACK_SWITCHER: GType <cimport,nodecl,const>
global GTK_TYPE_STATUSBAR: GType <cimport,nodecl,const>
global GTK_TYPE_STRING_FILTER: GType <cimport,nodecl,const>
global GTK_TYPE_STRING_OBJECT: GType <cimport,nodecl,const>
global GTK_TYPE_STRING_LIST: GType <cimport,nodecl,const>
global GTK_TYPE_STRING_SORTER: GType <cimport,nodecl,const>
global GTK_TYPE_STYLE_PROVIDER: GType <cimport,nodecl,const>
global GTK_STYLE_PROVIDER_PRIORITY_FALLBACK: cint <comptime> = 1
global GTK_STYLE_PROVIDER_PRIORITY_THEME: cint <comptime> = 200
global GTK_STYLE_PROVIDER_PRIORITY_SETTINGS: cint <comptime> = 400
global GTK_STYLE_PROVIDER_PRIORITY_APPLICATION: cint <comptime> = 600
global GTK_STYLE_PROVIDER_PRIORITY_USER: cint <comptime> = 800
global GTK_TYPE_STYLE_CONTEXT: GType <cimport,nodecl,const>
global GTK_TYPE_SWITCH: GType <cimport,nodecl,const>
global GTK_TYPE_SYMBOLIC_PAINTABLE: GType <cimport,nodecl,const>
global GTK_TYPE_TEXT: GType <cimport,nodecl,const>
global GTK_TYPE_TEXT_TAG: GType <cimport,nodecl,const>
global GTK_TYPE_TEXT_TAG_TABLE: GType <cimport,nodecl,const>
global GTK_TYPE_TEXT_CHILD_ANCHOR: GType <cimport,nodecl,const>
global GTK_TYPE_TEXT_ITER: GType <cimport,nodecl,const>
global GTK_TYPE_TEXT_MARK: GType <cimport,nodecl,const>
global GTK_TYPE_TEXT_BUFFER: GType <cimport,nodecl,const>
global GTK_TYPE_TEXT_VIEW: GType <cimport,nodecl,const>
global GTK_TEXT_VIEW_PRIORITY_VALIDATE: cint <comptime> = 125
global GTK_TYPE_TREE_ROW_DATA: GType <cimport,nodecl,const>
global GTK_TYPE_TREE_DRAG_SOURCE: GType <cimport,nodecl,const>
global GTK_TYPE_TREE_DRAG_DEST: GType <cimport,nodecl,const>
global GTK_TYPE_TREE_LIST_MODEL: GType <cimport,nodecl,const>
global GTK_TYPE_TREE_LIST_ROW: GType <cimport,nodecl,const>
global GTK_TYPE_TREE_EXPANDER: GType <cimport,nodecl,const>
global GTK_TYPE_TREE_LIST_ROW_SORTER: GType <cimport,nodecl,const>
global GTK_TYPE_TREE_MODEL_SORT: GType <cimport,nodecl,const>
global GTK_TYPE_TREE_SELECTION: GType <cimport,nodecl,const>
global GTK_TYPE_TREE_STORE: GType <cimport,nodecl,const>
global GTK_MAJOR_VERSION: cint <comptime> = 4
global GTK_MINOR_VERSION: cint <comptime> = 6
global GTK_MICRO_VERSION: cint <comptime> = 1
global GTK_BINARY_AGE: cint <comptime> = 601
global GTK_INTERFACE_AGE: cint <comptime> = 1
global GTK_TYPE_VIDEO: GType <cimport,nodecl,const>
global GTK_TYPE_VIEWPORT: GType <cimport,nodecl,const>
global GTK_TYPE_VOLUME_BUTTON: GType <cimport,nodecl,const>
global GTK_TYPE_WIDGET_PAINTABLE: GType <cimport,nodecl,const>
global GTK_TYPE_WINDOW_CONTROLS: GType <cimport,nodecl,const>
global GTK_TYPE_WINDOW_GROUP: GType <cimport,nodecl,const>
global GTK_TYPE_WINDOW_HANDLE: GType <cimport,nodecl,const>
global ADW_MAJOR_VERSION: cint <comptime> = 1
global ADW_MINOR_VERSION: cint <comptime> = 0
global ADW_MICRO_VERSION: cint <comptime> = 2
global ADW_VERSION_S: cstring <comptime> = "1.0.2"
global ADW_TYPE_PREFERENCES_ROW: GType <cimport,nodecl,const>
global ADW_TYPE_ACTION_ROW: GType <cimport,nodecl,const>
global ADW_TYPE_ANIMATION_TARGET: GType <cimport,nodecl,const>
global ADW_TYPE_CALLBACK_ANIMATION_TARGET: GType <cimport,nodecl,const>
global ADW_TYPE_ANIMATION_STATE: GType <cimport,nodecl,const>
global ADW_TYPE_EASING: GType <cimport,nodecl,const>
global ADW_TYPE_FLAP_FOLD_POLICY: GType <cimport,nodecl,const>
global ADW_TYPE_FLAP_TRANSITION_TYPE: GType <cimport,nodecl,const>
global ADW_TYPE_FOLD_THRESHOLD_POLICY: GType <cimport,nodecl,const>
global ADW_TYPE_CENTERING_POLICY: GType <cimport,nodecl,const>
global ADW_TYPE_LEAFLET_TRANSITION_TYPE: GType <cimport,nodecl,const>
global ADW_TYPE_NAVIGATION_DIRECTION: GType <cimport,nodecl,const>
global ADW_TYPE_SQUEEZER_TRANSITION_TYPE: GType <cimport,nodecl,const>
global ADW_TYPE_COLOR_SCHEME: GType <cimport,nodecl,const>
global ADW_TYPE_TOAST_PRIORITY: GType <cimport,nodecl,const>
global ADW_TYPE_VIEW_SWITCHER_POLICY: GType <cimport,nodecl,const>
global ADW_DURATION_INFINITE: guint <comptime> = 4294967295
global ADW_TYPE_ANIMATION: GType <cimport,nodecl,const>
global ADW_TYPE_STYLE_MANAGER: GType <cimport,nodecl,const>
global ADW_TYPE_APPLICATION: GType <cimport,nodecl,const>
global ADW_TYPE_APPLICATION_WINDOW: GType <cimport,nodecl,const>
global ADW_TYPE_AVATAR: GType <cimport,nodecl,const>
global ADW_TYPE_BIN: GType <cimport,nodecl,const>
global ADW_TYPE_BUTTON_CONTENT: GType <cimport,nodecl,const>
global ADW_TYPE_SPRING_PARAMS: GType <cimport,nodecl,const>
global ADW_TYPE_CAROUSEL: GType <cimport,nodecl,const>
global ADW_TYPE_CAROUSEL_INDICATOR_DOTS: GType <cimport,nodecl,const>
global ADW_TYPE_CAROUSEL_INDICATOR_LINES: GType <cimport,nodecl,const>
global ADW_TYPE_CLAMP: GType <cimport,nodecl,const>
global ADW_TYPE_CLAMP_LAYOUT: GType <cimport,nodecl,const>
global ADW_TYPE_CLAMP_SCROLLABLE: GType <cimport,nodecl,const>
global ADW_TYPE_COMBO_ROW: GType <cimport,nodecl,const>
global ADW_TYPE_ENUM_LIST_ITEM: GType <cimport,nodecl,const>
global ADW_TYPE_ENUM_LIST_MODEL: GType <cimport,nodecl,const>
global ADW_TYPE_EXPANDER_ROW: GType <cimport,nodecl,const>
global ADW_TYPE_FLAP: GType <cimport,nodecl,const>
global ADW_TYPE_HEADER_BAR: GType <cimport,nodecl,const>
global ADW_TYPE_LEAFLET_PAGE: GType <cimport,nodecl,const>
global ADW_TYPE_LEAFLET: GType <cimport,nodecl,const>
global ADW_TYPE_PREFERENCES_GROUP: GType <cimport,nodecl,const>
global ADW_TYPE_PREFERENCES_PAGE: GType <cimport,nodecl,const>
global ADW_TYPE_TOAST: GType <cimport,nodecl,const>
global ADW_TYPE_WINDOW: GType <cimport,nodecl,const>
global ADW_TYPE_PREFERENCES_WINDOW: GType <cimport,nodecl,const>
global ADW_TYPE_SPLIT_BUTTON: GType <cimport,nodecl,const>
global ADW_TYPE_SPRING_ANIMATION: GType <cimport,nodecl,const>
global ADW_TYPE_SQUEEZER_PAGE: GType <cimport,nodecl,const>
global ADW_TYPE_SQUEEZER: GType <cimport,nodecl,const>
global ADW_TYPE_STATUS_PAGE: GType <cimport,nodecl,const>
global ADW_TYPE_SWIPEABLE: GType <cimport,nodecl,const>
global ADW_TYPE_SWIPE_TRACKER: GType <cimport,nodecl,const>
global ADW_TYPE_TAB_PAGE: GType <cimport,nodecl,const>
global ADW_TYPE_TAB_VIEW: GType <cimport,nodecl,const>
global ADW_TYPE_TAB_BAR: GType <cimport,nodecl,const>
global ADW_TYPE_TIMED_ANIMATION: GType <cimport,nodecl,const>
global ADW_TYPE_TOAST_OVERLAY: GType <cimport,nodecl,const>
global ADW_TYPE_VIEW_STACK_PAGE: GType <cimport,nodecl,const>
global ADW_TYPE_VIEW_STACK: GType <cimport,nodecl,const>
global ADW_TYPE_VIEW_SWITCHER: GType <cimport,nodecl,const>
global ADW_TYPE_VIEW_SWITCHER_BAR: GType <cimport,nodecl,const>
global ADW_TYPE_VIEW_SWITCHER_TITLE: GType <cimport,nodecl,const>
global ADW_TYPE_WINDOW_TITLE: GType <cimport,nodecl,const>
global SSIZE_MAX: clong <comptime> = 9223372036854775807
global SCHAR_MIN: cint <comptime> = -128
global CHAR_MIN: cint <comptime> = -128
global SHRT_MIN: cint <comptime> = -32768
global INT_MIN: cint <comptime> = -2147483648
global LONG_MIN: clong <comptime> = -9223372036854775808
global G_MINSHORT: cint <comptime> = -32768
global G_MININT: cint <comptime> = -2147483648
global G_MINLONG: clong <comptime> = -9223372036854775808
global G_MINSSIZE: clong <comptime> = -9223372036854775808
global G_BYTE_ORDER: cint <comptime> = 1234
global SIGIO: cint <comptime> = 29
global SIGCLD: cint <comptime> = 17
global G_TYPE_FUNDAMENTAL_MAX: cint <comptime> = 1020
