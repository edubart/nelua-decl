##[[
cinclude '<windows.h>'
]]
global tagLC_ID: type <cimport,nodecl,ctypedef> = @record{
  wLanguage: cushort,
  wCountry: cushort,
  wCodePage: cushort
}
global LC_ID: type = @tagLC_ID
global LPLC_ID: type = @*tagLC_ID
global _EXCEPTION_POINTERS: type <cimport,nodecl,forwarddecl,ctypedef> = @record{}
global _EXCEPTION_RECORD: type <cimport,nodecl,forwarddecl,ctypedef> = @record{}
global _CONTEXT: type <cimport,nodecl,forwarddecl,ctypedef> = @record{}
global _DISPATCHER_CONTEXT: type <cimport,nodecl,forwarddecl,ctypedef> = @record{}
global _PHNDLR: type <cimport,nodecl> = @function(cint): void
global _XCPT_ACTION: type <cimport,nodecl,ctypedef> = @record{
  XcptNum: culong,
  SigNum: cint,
  XcptAction: _PHNDLR
}
global _XcptActTab: [0]_XCPT_ACTION <cimport,nodecl>
global _XcptActTabCount: cint <cimport,nodecl>
global _XcptActTabSize: cint <cimport,nodecl>
global _First_FPE_Indx: cint <cimport,nodecl>
global _Num_FPE: cint <cimport,nodecl>
global function _XcptFilter(_ExceptionNum: culong, _ExceptionPtr: *_EXCEPTION_POINTERS): cint <cimport,nodecl> end
global PEXCEPTION_HANDLER: type <cimport,nodecl> = @function(*_EXCEPTION_RECORD, pointer, *_CONTEXT, pointer): cint
global PULONG: type = @*culong
global PUSHORT: type = @*cushort
global PUCHAR: type = @*cuchar
global PSZ: type = @cstring
global BOOL: type = @cint
global PBOOL: type = @*cint
global LPBOOL: type = @*cint
global PFLOAT: type = @*float32
global PBYTE: type = @*cuchar
global LPBYTE: type = @*cuchar
global PINT: type = @*cint
global LPINT: type = @*cint
global PWORD: type = @*cushort
global LPWORD: type = @*cushort
global LPLONG: type = @*clong
global PDWORD: type = @*culong
global LPDWORD: type = @*culong
global LPVOID: type = @pointer
global LPCVOID: type = @pointer
global PUINT: type = @*cuint
global function InterlockedBitTestAndSet64(a: *clonglong, b: clonglong): cuchar <cimport,nodecl> end
global function InterlockedBitTestAndReset64(a: *clonglong, b: clonglong): cuchar <cimport,nodecl> end
global function InterlockedBitTestAndComplement64(a: *clonglong, b: clonglong): cuchar <cimport,nodecl> end
global function _InterlockedAnd64(a1: *clonglong, a2: clonglong): clonglong <cimport,nodecl> end
global function _InterlockedOr64(a1: *clonglong, a2: clonglong): clonglong <cimport,nodecl> end
global function _InterlockedXor64(a1: *clonglong, a2: clonglong): clonglong <cimport,nodecl> end
global function _InterlockedIncrement64(Addend: *clonglong): clonglong <cimport,nodecl> end
global function _InterlockedDecrement64(Addend: *clonglong): clonglong <cimport,nodecl> end
global function _InterlockedExchange64(Target: *clonglong, Value: clonglong): clonglong <cimport,nodecl> end
global function _InterlockedExchangeAdd64(Addend: *clonglong, Value: clonglong): clonglong <cimport,nodecl> end
global function _BitScanForward64(Index: *culong, Mask: culonglong): cuchar <cimport,nodecl> end
global function _BitScanReverse64(Index: *culong, Mask: culonglong): cuchar <cimport,nodecl> end
global function _InterlockedAnd(a1: *clong, a2: clong): clong <cimport,nodecl> end
global function _InterlockedOr(a1: *clong, a2: clong): clong <cimport,nodecl> end
global function _InterlockedXor(a1: *clong, a2: clong): clong <cimport,nodecl> end
global function _InterlockedIncrement16(Addend: *cshort): cshort <cimport,nodecl> end
global function _InterlockedDecrement16(Addend: *cshort): cshort <cimport,nodecl> end
global function _InterlockedCompareExchange16(Destination: *cshort, ExChange: cshort, Comperand: cshort): cshort <cimport,nodecl> end
global function _InterlockedExchangeAdd(Addend: *clong, Value: clong): clong <cimport,nodecl> end
global function _InterlockedCompareExchange(Destination: *clong, ExChange: clong, Comperand: clong): clong <cimport,nodecl> end
global function _InterlockedIncrement(Addend: *clong): clong <cimport,nodecl> end
global function _InterlockedDecrement(Addend: *clong): clong <cimport,nodecl> end
global function _InterlockedAdd(Addend: *clong, Value: clong): clong <cimport,nodecl> end
global function _InterlockedAdd64(Addend: *clonglong, Value: clonglong): clonglong <cimport,nodecl> end
global function _InterlockedExchange(Target: *clong, Value: clong): clong <cimport,nodecl> end
global function _InterlockedCompareExchange64(Destination: *clonglong, ExChange: clonglong, Comperand: clonglong): clonglong <cimport,nodecl> end
global function _InterlockedCompareExchangePointer(Destination: *pointer, ExChange: pointer, Comperand: pointer): pointer <cimport,nodecl> end
global function _InterlockedExchangePointer(Target: *pointer, Value: pointer): pointer <cimport,nodecl> end
global function InterlockedBitTestAndSet(a: *clong, b: clong): cuchar <cimport,nodecl> end
global function InterlockedBitTestAndReset(a: *clong, b: clong): cuchar <cimport,nodecl> end
global function InterlockedBitTestAndComplement(a: *clong, b: clong): cuchar <cimport,nodecl> end
global function _BitScanForward(Index: *culong, Mask: culong): cuchar <cimport,nodecl> end
global function _BitScanReverse(Index: *culong, Mask: culong): cuchar <cimport,nodecl> end
global PINT8: type = @*cschar
global PINT16: type = @*cshort
global PINT32: type = @*cint
global PINT64: type = @*clonglong
global PUINT8: type = @*cuchar
global PUINT16: type = @*cushort
global PUINT32: type = @*cuint
global PUINT64: type = @*culonglong
global PLONG32: type = @*cint
global PULONG32: type = @*cuint
global PDWORD32: type = @*cuint
global PINT_PTR: type = @*clonglong
global PUINT_PTR: type = @*culonglong
global PLONG_PTR: type = @*clonglong
global PULONG_PTR: type = @*culonglong
global PUHALF_PTR: type = @*cuint
global PHALF_PTR: type = @*cint
global function HandleToULong(h: pointer): culong <cimport,nodecl> end
global function HandleToLong(h: pointer): clong <cimport,nodecl> end
global function ULongToHandle(h: culong): pointer <cimport,nodecl> end
global function LongToHandle(h: clong): pointer <cimport,nodecl> end
global function PtrToUlong(p: pointer): culong <cimport,nodecl> end
global function PtrToUint(p: pointer): cuint <cimport,nodecl> end
global function PtrToUshort(p: pointer): cushort <cimport,nodecl> end
global function PtrToLong(p: pointer): clong <cimport,nodecl> end
global function PtrToInt(p: pointer): cint <cimport,nodecl> end
global function PtrToShort(p: pointer): cshort <cimport,nodecl> end
global function IntToPtr(i: cint): pointer <cimport,nodecl> end
global function UIntToPtr(ui: cuint): pointer <cimport,nodecl> end
global function LongToPtr(l: clong): pointer <cimport,nodecl> end
global function ULongToPtr(ul: culong): pointer <cimport,nodecl> end
global function Ptr32ToPtr(p: pointer): pointer <cimport,nodecl> end
global function Handle32ToHandle(h: pointer): pointer <cimport,nodecl> end
global function PtrToPtr32(p: pointer): pointer <cimport,nodecl> end
global PSIZE_T: type = @*culonglong
global PSSIZE_T: type = @*clonglong
global PDWORD_PTR: type = @*culonglong
global PLONG64: type = @*clonglong
global PULONG64: type = @*culonglong
global PDWORD64: type = @*culonglong
global PKAFFINITY: type = @*culonglong
global PVOID: type = @pointer
global PVOID64: type = @pointer
global PWCHAR: type = @*cwchar_t
global LPWCH: type = @*cwchar_t
global PWCH: type = @*cwchar_t
global LPCWCH: type = @*cwchar_t
global PCWCH: type = @*cwchar_t
global NWPSTR: type = @*cwchar_t
global LPWSTR: type = @*cwchar_t
global PWSTR: type = @*cwchar_t
global PZPWSTR: type = @*PWSTR
global PCZPWSTR: type = @*PWSTR
global LPUWSTR: type = @*cwchar_t
global PUWSTR: type = @*cwchar_t
global LPCWSTR: type = @*cwchar_t
global PCWSTR: type = @*cwchar_t
global PZPCWSTR: type = @*PCWSTR
global LPCUWSTR: type = @*cwchar_t
global PCUWSTR: type = @*cwchar_t
global PZZWSTR: type = @*cwchar_t
global PCZZWSTR: type = @*cwchar_t
global PUZZWSTR: type = @*cwchar_t
global PCUZZWSTR: type = @*cwchar_t
global PNZWCH: type = @*cwchar_t
global PCNZWCH: type = @*cwchar_t
global PUNZWCH: type = @*cwchar_t
global PCUNZWCH: type = @*cwchar_t
global LPCWCHAR: type = @*cwchar_t
global PCWCHAR: type = @*cwchar_t
global LPCUWCHAR: type = @*cwchar_t
global PCUWCHAR: type = @*cwchar_t
global PUCSCHAR: type = @*culong
global PCUCSCHAR: type = @*culong
global PUCSSTR: type = @*culong
global PUUCSSTR: type = @*culong
global PCUCSSTR: type = @*culong
global PCUUCSSTR: type = @*culong
global PUUCSCHAR: type = @*culong
global PCUUCSCHAR: type = @*culong
global PCHAR: type = @cstring
global LPCH: type = @cstring
global PCH: type = @cstring
global LPCCH: type = @cstring
global PCCH: type = @cstring
global NPSTR: type = @cstring
global LPSTR: type = @cstring
global PSTR: type = @cstring
global PZPSTR: type = @*PSTR
global PCZPSTR: type = @*PSTR
global LPCSTR: type = @cstring
global PCSTR: type = @cstring
global PZPCSTR: type = @*PCSTR
global PZZSTR: type = @cstring
global PCZZSTR: type = @cstring
global PNZCH: type = @cstring
global PCNZCH: type = @cstring
global PTCHAR: type = @cstring
global PTBYTE: type = @*cuchar
global LPTCH: type = @cstring
global PTCH: type = @cstring
global LPCTCH: type = @cstring
global PCTCH: type = @cstring
global PTSTR: type = @cstring
global LPTSTR: type = @cstring
global PUTSTR: type = @cstring
global LPUTSTR: type = @cstring
global PCTSTR: type = @cstring
global LPCTSTR: type = @cstring
global PCUTSTR: type = @cstring
global LPCUTSTR: type = @cstring
global PZZTSTR: type = @cstring
global PUZZTSTR: type = @cstring
global PCZZTSTR: type = @cstring
global PCUZZTSTR: type = @cstring
global PZPTSTR: type = @*PSTR
global PNZTCH: type = @cstring
global PUNZTCH: type = @cstring
global PCNZTCH: type = @cstring
global PCUNZTCH: type = @cstring
global PSHORT: type = @*cshort
global PLONG: type = @*clong
global _GROUP_AFFINITY: type <cimport,nodecl,ctypedef> = @record{
  Mask: culonglong,
  Group: cushort,
  Reserved: [3]cushort
}
global GROUP_AFFINITY: type = @_GROUP_AFFINITY
global PGROUP_AFFINITY: type = @*_GROUP_AFFINITY
global HANDLE: type = @pointer
global PHANDLE: type = @*HANDLE
global PLCID: type = @*culong
global COMPARTMENT_ID: type <cimport,nodecl,using> = @enum(cint){
  UNSPECIFIED_COMPARTMENT_ID = 0,
  DEFAULT_COMPARTMENT_ID = 1
}
global PCOMPARTMENT_ID: type = @*cint
global _FLOAT128: type <cimport,nodecl,ctypedef> = @record{
  LowPart: clonglong,
  HighPart: clonglong
}
global FLOAT128: type = @_FLOAT128
global PFLOAT128: type = @*FLOAT128
global PLONGLONG: type = @*clonglong
global PULONGLONG: type = @*culonglong
global _LARGE_INTEGER: type <cimport,nodecl,ctypedef> = @union{
  __unnamed1: record{
    LowPart: culong,
    HighPart: clong
  },
  u: record{
    LowPart: culong,
    HighPart: clong
  },
  QuadPart: clonglong
}
global LARGE_INTEGER: type = @_LARGE_INTEGER
global PLARGE_INTEGER: type = @*LARGE_INTEGER
global _ULARGE_INTEGER: type <cimport,nodecl,ctypedef> = @union{
  __unnamed1: record{
    LowPart: culong,
    HighPart: culong
  },
  u: record{
    LowPart: culong,
    HighPart: culong
  },
  QuadPart: culonglong
}
global ULARGE_INTEGER: type = @_ULARGE_INTEGER
global PULARGE_INTEGER: type = @*ULARGE_INTEGER
global _LUID: type <cimport,nodecl,ctypedef> = @record{
  LowPart: culong,
  HighPart: clong
}
global LUID: type = @_LUID
global PLUID: type = @*_LUID
global PDWORDLONG: type = @*culonglong
global BOOLEAN: type = @cuchar
global PBOOLEAN: type = @*BOOLEAN
global _LIST_ENTRY: type <cimport,nodecl,forwarddecl,ctypedef> = @record{}
_LIST_ENTRY = @record{
  Flink: *_LIST_ENTRY,
  Blink: *_LIST_ENTRY
}
global LIST_ENTRY: type = @_LIST_ENTRY
global PLIST_ENTRY: type = @*_LIST_ENTRY
global PRLIST_ENTRY: type = @*_LIST_ENTRY
global _SINGLE_LIST_ENTRY: type <cimport,nodecl,forwarddecl,ctypedef> = @record{}
_SINGLE_LIST_ENTRY = @record{
  Next: *_SINGLE_LIST_ENTRY
}
global SINGLE_LIST_ENTRY: type = @_SINGLE_LIST_ENTRY
global PSINGLE_LIST_ENTRY: type = @*_SINGLE_LIST_ENTRY
global LIST_ENTRY32: type <cimport,nodecl> = @record{
  Flink: culong,
  Blink: culong
}
global PLIST_ENTRY32: type = @*LIST_ENTRY32
global LIST_ENTRY64: type <cimport,nodecl> = @record{
  Flink: culonglong,
  Blink: culonglong
}
global PLIST_ENTRY64: type = @*LIST_ENTRY64
global _GUID: type <cimport,nodecl,ctypedef> = @record{
  Data1: culong,
  Data2: cushort,
  Data3: cushort,
  Data4: [8]cuchar
}
global GUID: type = @_GUID
global LPGUID: type = @*GUID
global LPCGUID: type = @*GUID
global IID: type = @_GUID
global LPIID: type = @*IID
global CLSID: type = @_GUID
global LPCLSID: type = @*CLSID
global FMTID: type = @_GUID
global LPFMTID: type = @*FMTID
global _OBJECTID: type <cimport,nodecl,ctypedef> = @record{
  Lineage: GUID,
  Uniquifier: culong
}
global OBJECTID: type = @_OBJECTID
global EXCEPTION_ROUTINE: type <cimport,nodecl> = @function(*_EXCEPTION_RECORD, PVOID, *_CONTEXT, PVOID): cint
global PEXCEPTION_ROUTINE: type <cimport,nodecl> = @function(*_EXCEPTION_RECORD, PVOID, *_CONTEXT, PVOID): cint
global PKSPIN_LOCK: type = @*culonglong
global _M128A: type <cimport,nodecl,aligned(16),ctypedef> = @record{
  Low: culonglong,
  High: clonglong
}
global M128A: type = @_M128A
global PM128A: type = @*_M128A
global _XSAVE_FORMAT: type <cimport,nodecl,aligned(16),ctypedef> = @record{
  ControlWord: cushort,
  StatusWord: cushort,
  TagWord: cuchar,
  Reserved1: cuchar,
  ErrorOpcode: cushort,
  ErrorOffset: culong,
  ErrorSelector: cushort,
  Reserved2: cushort,
  DataOffset: culong,
  DataSelector: cushort,
  Reserved3: cushort,
  MxCsr: culong,
  MxCsr_Mask: culong,
  FloatRegisters: [8]M128A,
  XmmRegisters: [16]M128A,
  Reserved4: [96]cuchar
}
global XSAVE_FORMAT: type = @_XSAVE_FORMAT
global PXSAVE_FORMAT: type = @*_XSAVE_FORMAT
global _XSAVE_AREA_HEADER: type <cimport,nodecl,aligned(8),ctypedef> = @record{
  Mask: culonglong,
  Reserved: [7]culonglong
}
global XSAVE_AREA_HEADER: type = @_XSAVE_AREA_HEADER
global PXSAVE_AREA_HEADER: type = @*_XSAVE_AREA_HEADER
global _XSAVE_AREA: type <cimport,nodecl,aligned(16),ctypedef> = @record{
  LegacyState: XSAVE_FORMAT,
  Header: XSAVE_AREA_HEADER
}
global XSAVE_AREA: type = @_XSAVE_AREA
global PXSAVE_AREA: type = @*_XSAVE_AREA
global _XSTATE_CONTEXT: type <cimport,nodecl,ctypedef> = @record{
  Mask: culonglong,
  Length: culong,
  Reserved1: culong,
  Area: PXSAVE_AREA,
  Buffer: PVOID
}
global XSTATE_CONTEXT: type = @_XSTATE_CONTEXT
global PXSTATE_CONTEXT: type = @*_XSTATE_CONTEXT
global _SCOPE_TABLE_AMD64: type <cimport,nodecl,ctypedef> = @record{
  Count: culong,
  ScopeRecord: [1]record{
    BeginAddress: culong,
    EndAddress: culong,
    HandlerAddress: culong,
    JumpTarget: culong
  }
}
global SCOPE_TABLE_AMD64: type = @_SCOPE_TABLE_AMD64
global PSCOPE_TABLE_AMD64: type = @*_SCOPE_TABLE_AMD64
global _LDOUBLE: type <cimport,nodecl> = @record{
  ld: [10]cuchar
}
global _CRT_DOUBLE: type <cimport,nodecl> = @record{
  x: float64
}
global _CRT_FLOAT: type <cimport,nodecl> = @record{
  f: float32
}
global _LONGDOUBLE: type <cimport,nodecl> = @record{
  x: clongdouble
}
global _LDBL12: type <cimport,nodecl> = @record{
  ld12: [12]cuchar
}
global function _Exit(a1: cint): void <cimport,nodecl> end
global _HEAPINFO: type <cimport,nodecl> = @record{
  _pentry: *cint,
  _size: csize,
  _useflag: cint
}
global function _MarkAllocaS(_Ptr: pointer, _Marker: cuint): pointer <cimport,nodecl> end
global _Marker: cuint <cimport,nodecl>
global function _MM_GET_EXCEPTION_STATE(): cuint <cimport,nodecl> end
global function _MM_GET_EXCEPTION_MASK(): cuint <cimport,nodecl> end
global function _MM_GET_ROUNDING_MODE(): cuint <cimport,nodecl> end
global function _MM_GET_FLUSH_ZERO_MODE(): cuint <cimport,nodecl> end
global function _MM_SET_EXCEPTION_STATE(mask: cuint): void <cimport,nodecl> end
global function _MM_SET_EXCEPTION_MASK(mask: cuint): void <cimport,nodecl> end
global function _MM_SET_ROUNDING_MODE(mode: cuint): void <cimport,nodecl> end
global function _MM_SET_FLUSH_ZERO_MODE(mode: cuint): void <cimport,nodecl> end
global _MM_PERM_ENUM: type <cimport,nodecl,using> = @enum(cint){
  _MM_PERM_AAAA = 0,
  _MM_PERM_AAAB = 1,
  _MM_PERM_AAAC = 2,
  _MM_PERM_AAAD = 3,
  _MM_PERM_AABA = 4,
  _MM_PERM_AABB = 5,
  _MM_PERM_AABC = 6,
  _MM_PERM_AABD = 7,
  _MM_PERM_AACA = 8,
  _MM_PERM_AACB = 9,
  _MM_PERM_AACC = 10,
  _MM_PERM_AACD = 11,
  _MM_PERM_AADA = 12,
  _MM_PERM_AADB = 13,
  _MM_PERM_AADC = 14,
  _MM_PERM_AADD = 15,
  _MM_PERM_ABAA = 16,
  _MM_PERM_ABAB = 17,
  _MM_PERM_ABAC = 18,
  _MM_PERM_ABAD = 19,
  _MM_PERM_ABBA = 20,
  _MM_PERM_ABBB = 21,
  _MM_PERM_ABBC = 22,
  _MM_PERM_ABBD = 23,
  _MM_PERM_ABCA = 24,
  _MM_PERM_ABCB = 25,
  _MM_PERM_ABCC = 26,
  _MM_PERM_ABCD = 27,
  _MM_PERM_ABDA = 28,
  _MM_PERM_ABDB = 29,
  _MM_PERM_ABDC = 30,
  _MM_PERM_ABDD = 31,
  _MM_PERM_ACAA = 32,
  _MM_PERM_ACAB = 33,
  _MM_PERM_ACAC = 34,
  _MM_PERM_ACAD = 35,
  _MM_PERM_ACBA = 36,
  _MM_PERM_ACBB = 37,
  _MM_PERM_ACBC = 38,
  _MM_PERM_ACBD = 39,
  _MM_PERM_ACCA = 40,
  _MM_PERM_ACCB = 41,
  _MM_PERM_ACCC = 42,
  _MM_PERM_ACCD = 43,
  _MM_PERM_ACDA = 44,
  _MM_PERM_ACDB = 45,
  _MM_PERM_ACDC = 46,
  _MM_PERM_ACDD = 47,
  _MM_PERM_ADAA = 48,
  _MM_PERM_ADAB = 49,
  _MM_PERM_ADAC = 50,
  _MM_PERM_ADAD = 51,
  _MM_PERM_ADBA = 52,
  _MM_PERM_ADBB = 53,
  _MM_PERM_ADBC = 54,
  _MM_PERM_ADBD = 55,
  _MM_PERM_ADCA = 56,
  _MM_PERM_ADCB = 57,
  _MM_PERM_ADCC = 58,
  _MM_PERM_ADCD = 59,
  _MM_PERM_ADDA = 60,
  _MM_PERM_ADDB = 61,
  _MM_PERM_ADDC = 62,
  _MM_PERM_ADDD = 63,
  _MM_PERM_BAAA = 64,
  _MM_PERM_BAAB = 65,
  _MM_PERM_BAAC = 66,
  _MM_PERM_BAAD = 67,
  _MM_PERM_BABA = 68,
  _MM_PERM_BABB = 69,
  _MM_PERM_BABC = 70,
  _MM_PERM_BABD = 71,
  _MM_PERM_BACA = 72,
  _MM_PERM_BACB = 73,
  _MM_PERM_BACC = 74,
  _MM_PERM_BACD = 75,
  _MM_PERM_BADA = 76,
  _MM_PERM_BADB = 77,
  _MM_PERM_BADC = 78,
  _MM_PERM_BADD = 79,
  _MM_PERM_BBAA = 80,
  _MM_PERM_BBAB = 81,
  _MM_PERM_BBAC = 82,
  _MM_PERM_BBAD = 83,
  _MM_PERM_BBBA = 84,
  _MM_PERM_BBBB = 85,
  _MM_PERM_BBBC = 86,
  _MM_PERM_BBBD = 87,
  _MM_PERM_BBCA = 88,
  _MM_PERM_BBCB = 89,
  _MM_PERM_BBCC = 90,
  _MM_PERM_BBCD = 91,
  _MM_PERM_BBDA = 92,
  _MM_PERM_BBDB = 93,
  _MM_PERM_BBDC = 94,
  _MM_PERM_BBDD = 95,
  _MM_PERM_BCAA = 96,
  _MM_PERM_BCAB = 97,
  _MM_PERM_BCAC = 98,
  _MM_PERM_BCAD = 99,
  _MM_PERM_BCBA = 100,
  _MM_PERM_BCBB = 101,
  _MM_PERM_BCBC = 102,
  _MM_PERM_BCBD = 103,
  _MM_PERM_BCCA = 104,
  _MM_PERM_BCCB = 105,
  _MM_PERM_BCCC = 106,
  _MM_PERM_BCCD = 107,
  _MM_PERM_BCDA = 108,
  _MM_PERM_BCDB = 109,
  _MM_PERM_BCDC = 110,
  _MM_PERM_BCDD = 111,
  _MM_PERM_BDAA = 112,
  _MM_PERM_BDAB = 113,
  _MM_PERM_BDAC = 114,
  _MM_PERM_BDAD = 115,
  _MM_PERM_BDBA = 116,
  _MM_PERM_BDBB = 117,
  _MM_PERM_BDBC = 118,
  _MM_PERM_BDBD = 119,
  _MM_PERM_BDCA = 120,
  _MM_PERM_BDCB = 121,
  _MM_PERM_BDCC = 122,
  _MM_PERM_BDCD = 123,
  _MM_PERM_BDDA = 124,
  _MM_PERM_BDDB = 125,
  _MM_PERM_BDDC = 126,
  _MM_PERM_BDDD = 127,
  _MM_PERM_CAAA = 128,
  _MM_PERM_CAAB = 129,
  _MM_PERM_CAAC = 130,
  _MM_PERM_CAAD = 131,
  _MM_PERM_CABA = 132,
  _MM_PERM_CABB = 133,
  _MM_PERM_CABC = 134,
  _MM_PERM_CABD = 135,
  _MM_PERM_CACA = 136,
  _MM_PERM_CACB = 137,
  _MM_PERM_CACC = 138,
  _MM_PERM_CACD = 139,
  _MM_PERM_CADA = 140,
  _MM_PERM_CADB = 141,
  _MM_PERM_CADC = 142,
  _MM_PERM_CADD = 143,
  _MM_PERM_CBAA = 144,
  _MM_PERM_CBAB = 145,
  _MM_PERM_CBAC = 146,
  _MM_PERM_CBAD = 147,
  _MM_PERM_CBBA = 148,
  _MM_PERM_CBBB = 149,
  _MM_PERM_CBBC = 150,
  _MM_PERM_CBBD = 151,
  _MM_PERM_CBCA = 152,
  _MM_PERM_CBCB = 153,
  _MM_PERM_CBCC = 154,
  _MM_PERM_CBCD = 155,
  _MM_PERM_CBDA = 156,
  _MM_PERM_CBDB = 157,
  _MM_PERM_CBDC = 158,
  _MM_PERM_CBDD = 159,
  _MM_PERM_CCAA = 160,
  _MM_PERM_CCAB = 161,
  _MM_PERM_CCAC = 162,
  _MM_PERM_CCAD = 163,
  _MM_PERM_CCBA = 164,
  _MM_PERM_CCBB = 165,
  _MM_PERM_CCBC = 166,
  _MM_PERM_CCBD = 167,
  _MM_PERM_CCCA = 168,
  _MM_PERM_CCCB = 169,
  _MM_PERM_CCCC = 170,
  _MM_PERM_CCCD = 171,
  _MM_PERM_CCDA = 172,
  _MM_PERM_CCDB = 173,
  _MM_PERM_CCDC = 174,
  _MM_PERM_CCDD = 175,
  _MM_PERM_CDAA = 176,
  _MM_PERM_CDAB = 177,
  _MM_PERM_CDAC = 178,
  _MM_PERM_CDAD = 179,
  _MM_PERM_CDBA = 180,
  _MM_PERM_CDBB = 181,
  _MM_PERM_CDBC = 182,
  _MM_PERM_CDBD = 183,
  _MM_PERM_CDCA = 184,
  _MM_PERM_CDCB = 185,
  _MM_PERM_CDCC = 186,
  _MM_PERM_CDCD = 187,
  _MM_PERM_CDDA = 188,
  _MM_PERM_CDDB = 189,
  _MM_PERM_CDDC = 190,
  _MM_PERM_CDDD = 191,
  _MM_PERM_DAAA = 192,
  _MM_PERM_DAAB = 193,
  _MM_PERM_DAAC = 194,
  _MM_PERM_DAAD = 195,
  _MM_PERM_DABA = 196,
  _MM_PERM_DABB = 197,
  _MM_PERM_DABC = 198,
  _MM_PERM_DABD = 199,
  _MM_PERM_DACA = 200,
  _MM_PERM_DACB = 201,
  _MM_PERM_DACC = 202,
  _MM_PERM_DACD = 203,
  _MM_PERM_DADA = 204,
  _MM_PERM_DADB = 205,
  _MM_PERM_DADC = 206,
  _MM_PERM_DADD = 207,
  _MM_PERM_DBAA = 208,
  _MM_PERM_DBAB = 209,
  _MM_PERM_DBAC = 210,
  _MM_PERM_DBAD = 211,
  _MM_PERM_DBBA = 212,
  _MM_PERM_DBBB = 213,
  _MM_PERM_DBBC = 214,
  _MM_PERM_DBBD = 215,
  _MM_PERM_DBCA = 216,
  _MM_PERM_DBCB = 217,
  _MM_PERM_DBCC = 218,
  _MM_PERM_DBCD = 219,
  _MM_PERM_DBDA = 220,
  _MM_PERM_DBDB = 221,
  _MM_PERM_DBDC = 222,
  _MM_PERM_DBDD = 223,
  _MM_PERM_DCAA = 224,
  _MM_PERM_DCAB = 225,
  _MM_PERM_DCAC = 226,
  _MM_PERM_DCAD = 227,
  _MM_PERM_DCBA = 228,
  _MM_PERM_DCBB = 229,
  _MM_PERM_DCBC = 230,
  _MM_PERM_DCBD = 231,
  _MM_PERM_DCCA = 232,
  _MM_PERM_DCCB = 233,
  _MM_PERM_DCCC = 234,
  _MM_PERM_DCCD = 235,
  _MM_PERM_DCDA = 236,
  _MM_PERM_DCDB = 237,
  _MM_PERM_DCDC = 238,
  _MM_PERM_DCDD = 239,
  _MM_PERM_DDAA = 240,
  _MM_PERM_DDAB = 241,
  _MM_PERM_DDAC = 242,
  _MM_PERM_DDAD = 243,
  _MM_PERM_DDBA = 244,
  _MM_PERM_DDBB = 245,
  _MM_PERM_DDBC = 246,
  _MM_PERM_DDBD = 247,
  _MM_PERM_DDCA = 248,
  _MM_PERM_DDCB = 249,
  _MM_PERM_DDCC = 250,
  _MM_PERM_DDCD = 251,
  _MM_PERM_DDDA = 252,
  _MM_PERM_DDDB = 253,
  _MM_PERM_DDDC = 254,
  _MM_PERM_DDDD = 255
}
global _MM_MANTISSA_NORM_ENUM: type <cimport,nodecl,using> = @enum(cint){
  _MM_MANT_NORM_1_2 = 0,
  _MM_MANT_NORM_p5_2 = 1,
  _MM_MANT_NORM_p5_1 = 2,
  _MM_MANT_NORM_p75_1p5 = 3
}
global _MM_MANTISSA_SIGN_ENUM: type <cimport,nodecl,using> = @enum(cint){
  _MM_MANT_SIGN_src = 0,
  _MM_MANT_SIGN_zero = 1,
  _MM_MANT_SIGN_nan = 2
}
global function MultiplyExtract128(Multiplier: clonglong, Multiplicand: clonglong, Shift: cuchar): clonglong <cimport,nodecl> end
global function UnsignedMultiplyExtract128(Multiplier: culonglong, Multiplicand: culonglong, Shift: cuchar): culonglong <cimport,nodecl> end
global _XMM_SAVE_AREA32: type <cimport,nodecl,aligned(16),ctypedef> = @record{
  ControlWord: cushort,
  StatusWord: cushort,
  TagWord: cuchar,
  Reserved1: cuchar,
  ErrorOpcode: cushort,
  ErrorOffset: culong,
  ErrorSelector: cushort,
  Reserved2: cushort,
  DataOffset: culong,
  DataSelector: cushort,
  Reserved3: cushort,
  MxCsr: culong,
  MxCsr_Mask: culong,
  FloatRegisters: [8]M128A,
  XmmRegisters: [16]M128A,
  Reserved4: [96]cuchar
}
global XMM_SAVE_AREA32: type = @_XMM_SAVE_AREA32
global PXMM_SAVE_AREA32: type = @*_XMM_SAVE_AREA32
_CONTEXT = @record{
  P1Home: culonglong,
  P2Home: culonglong,
  P3Home: culonglong,
  P4Home: culonglong,
  P5Home: culonglong,
  P6Home: culonglong,
  ContextFlags: culong,
  MxCsr: culong,
  SegCs: cushort,
  SegDs: cushort,
  SegEs: cushort,
  SegFs: cushort,
  SegGs: cushort,
  SegSs: cushort,
  EFlags: culong,
  Dr0: culonglong,
  Dr1: culonglong,
  Dr2: culonglong,
  Dr3: culonglong,
  Dr6: culonglong,
  Dr7: culonglong,
  Rax: culonglong,
  Rcx: culonglong,
  Rdx: culonglong,
  Rbx: culonglong,
  Rsp: culonglong,
  Rbp: culonglong,
  Rsi: culonglong,
  Rdi: culonglong,
  R8: culonglong,
  R9: culonglong,
  R10: culonglong,
  R11: culonglong,
  R12: culonglong,
  R13: culonglong,
  R14: culonglong,
  R15: culonglong,
  Rip: culonglong,
  __unnamed1: union{
    FltSave: XMM_SAVE_AREA32,
    FloatSave: XMM_SAVE_AREA32,
    __unnamed1: record{
      Header: [2]M128A,
      Legacy: [8]M128A,
      Xmm0: M128A,
      Xmm1: M128A,
      Xmm2: M128A,
      Xmm3: M128A,
      Xmm4: M128A,
      Xmm5: M128A,
      Xmm6: M128A,
      Xmm7: M128A,
      Xmm8: M128A,
      Xmm9: M128A,
      Xmm10: M128A,
      Xmm11: M128A,
      Xmm12: M128A,
      Xmm13: M128A,
      Xmm14: M128A,
      Xmm15: M128A
    }
  },
  VectorRegister: [26]M128A,
  VectorControl: culonglong,
  DebugControl: culonglong,
  LastBranchToRip: culonglong,
  LastBranchFromRip: culonglong,
  LastExceptionToRip: culonglong,
  LastExceptionFromRip: culonglong
}
global CONTEXT: type = @_CONTEXT
global PCONTEXT: type = @*_CONTEXT
global _RUNTIME_FUNCTION: type <cimport,nodecl,ctypedef> = @record{
  BeginAddress: culong,
  EndAddress: culong,
  UnwindData: culong
}
global RUNTIME_FUNCTION: type = @_RUNTIME_FUNCTION
global PRUNTIME_FUNCTION: type = @*_RUNTIME_FUNCTION
global PGET_RUNTIME_FUNCTION_CALLBACK: type <cimport,nodecl> = @function(culonglong, PVOID): PRUNTIME_FUNCTION
global POUT_OF_PROCESS_FUNCTION_TABLE_CALLBACK: type <cimport,nodecl> = @function(HANDLE, PVOID, PDWORD, *PRUNTIME_FUNCTION): culong
global _LDT_ENTRY: type <cimport,nodecl,ctypedef> = @record{
  LimitLow: cushort,
  BaseLow: cushort,
  HighWord: union{
    Bytes: record{
      BaseMid: cuchar,
      Flags1: cuchar,
      Flags2: cuchar,
      BaseHi: cuchar
    },
    Bits: record{
      BaseMid: cuchar,
      Type: culong,
      Dpl: culong,
      Pres: culong,
      LimitHi: culong,
      Sys: culong,
      Reserved_0: culong,
      Default_Big: culong,
      Granularity: culong,
      BaseHi: cuchar
    }
  }
}
global LDT_ENTRY: type = @_LDT_ENTRY
global PLDT_ENTRY: type = @*_LDT_ENTRY
_EXCEPTION_RECORD = @record{
  ExceptionCode: culong,
  ExceptionFlags: culong,
  ExceptionRecord: *_EXCEPTION_RECORD,
  ExceptionAddress: PVOID,
  NumberParameters: culong,
  ExceptionInformation: [15]culonglong
}
global EXCEPTION_RECORD: type = @_EXCEPTION_RECORD
global PEXCEPTION_RECORD: type = @*EXCEPTION_RECORD
global _EXCEPTION_RECORD32: type <cimport,nodecl,ctypedef> = @record{
  ExceptionCode: culong,
  ExceptionFlags: culong,
  ExceptionRecord: culong,
  ExceptionAddress: culong,
  NumberParameters: culong,
  ExceptionInformation: [15]culong
}
global EXCEPTION_RECORD32: type = @_EXCEPTION_RECORD32
global PEXCEPTION_RECORD32: type = @*_EXCEPTION_RECORD32
global _EXCEPTION_RECORD64: type <cimport,nodecl,ctypedef> = @record{
  ExceptionCode: culong,
  ExceptionFlags: culong,
  ExceptionRecord: culonglong,
  ExceptionAddress: culonglong,
  NumberParameters: culong,
  __unusedAlignment: culong,
  ExceptionInformation: [15]culonglong
}
global EXCEPTION_RECORD64: type = @_EXCEPTION_RECORD64
global PEXCEPTION_RECORD64: type = @*_EXCEPTION_RECORD64
_EXCEPTION_POINTERS = @record{
  ExceptionRecord: PEXCEPTION_RECORD,
  ContextRecord: PCONTEXT
}
global EXCEPTION_POINTERS: type = @_EXCEPTION_POINTERS
global PEXCEPTION_POINTERS: type = @*_EXCEPTION_POINTERS
global _UNWIND_HISTORY_TABLE_ENTRY: type <cimport,nodecl,ctypedef> = @record{
  ImageBase: culonglong,
  FunctionEntry: PRUNTIME_FUNCTION
}
global UNWIND_HISTORY_TABLE_ENTRY: type = @_UNWIND_HISTORY_TABLE_ENTRY
global PUNWIND_HISTORY_TABLE_ENTRY: type = @*_UNWIND_HISTORY_TABLE_ENTRY
global _UNWIND_HISTORY_TABLE: type <cimport,nodecl,ctypedef> = @record{
  Count: culong,
  LocalHint: cuchar,
  GlobalHint: cuchar,
  Search: cuchar,
  Once: cuchar,
  LowAddress: culonglong,
  HighAddress: culonglong,
  Entry: [12]UNWIND_HISTORY_TABLE_ENTRY
}
global UNWIND_HISTORY_TABLE: type = @_UNWIND_HISTORY_TABLE
global PUNWIND_HISTORY_TABLE: type = @*_UNWIND_HISTORY_TABLE
global DISPATCHER_CONTEXT: type = @_DISPATCHER_CONTEXT
global PDISPATCHER_CONTEXT: type = @*_DISPATCHER_CONTEXT
_DISPATCHER_CONTEXT = @record{
  ControlPc: culonglong,
  ImageBase: culonglong,
  FunctionEntry: PRUNTIME_FUNCTION,
  EstablisherFrame: culonglong,
  TargetIp: culonglong,
  ContextRecord: PCONTEXT,
  LanguageHandler: PEXCEPTION_ROUTINE,
  HandlerData: PVOID,
  HistoryTable: PUNWIND_HISTORY_TABLE,
  ScopeIndex: culong,
  Fill0: culong
}
global _KNONVOLATILE_CONTEXT_POINTERS: type <cimport,nodecl,ctypedef> = @record{
  FloatingContext: [16]PM128A,
  IntegerContext: [16]PULONG64
}
global KNONVOLATILE_CONTEXT_POINTERS: type = @_KNONVOLATILE_CONTEXT_POINTERS
global PKNONVOLATILE_CONTEXT_POINTERS: type = @*_KNONVOLATILE_CONTEXT_POINTERS
global PACCESS_TOKEN: type = @pointer
global PSECURITY_DESCRIPTOR: type = @pointer
global PSID: type = @pointer
global PCLAIMS_BLOB: type = @pointer
global PACCESS_MASK: type = @*culong
global _GENERIC_MAPPING: type <cimport,nodecl,ctypedef> = @record{
  GenericRead: culong,
  GenericWrite: culong,
  GenericExecute: culong,
  GenericAll: culong
}
global GENERIC_MAPPING: type = @_GENERIC_MAPPING
global PGENERIC_MAPPING: type = @*GENERIC_MAPPING
global _LUID_AND_ATTRIBUTES: type <cimport,nodecl,ctypedef> = @record{
  Luid: LUID,
  Attributes: culong
}
global LUID_AND_ATTRIBUTES: type = @_LUID_AND_ATTRIBUTES
global PLUID_AND_ATTRIBUTES: type = @*_LUID_AND_ATTRIBUTES
global PLUID_AND_ATTRIBUTES_ARRAY: type = @*[1]LUID_AND_ATTRIBUTES
global _SID_IDENTIFIER_AUTHORITY: type <cimport,nodecl,ctypedef> = @record{
  Value: [6]cuchar
}
global SID_IDENTIFIER_AUTHORITY: type = @_SID_IDENTIFIER_AUTHORITY
global PSID_IDENTIFIER_AUTHORITY: type = @*_SID_IDENTIFIER_AUTHORITY
global _SID: type <cimport,nodecl,ctypedef> = @record{
  Revision: cuchar,
  SubAuthorityCount: cuchar,
  IdentifierAuthority: SID_IDENTIFIER_AUTHORITY,
  SubAuthority: [1]culong
}
global SID: type = @_SID
global PISID: type = @*_SID
global _SID_NAME_USE: type <cimport,nodecl,using,ctypedef> = @enum(cint){
  SidTypeUser = 1,
  SidTypeGroup = 2,
  SidTypeDomain = 3,
  SidTypeAlias = 4,
  SidTypeWellKnownGroup = 5,
  SidTypeDeletedAccount = 6,
  SidTypeInvalid = 7,
  SidTypeUnknown = 8,
  SidTypeComputer = 9,
  SidTypeLabel = 10,
  SidTypeLogonSession = 11
}
global SID_NAME_USE: type = @_SID_NAME_USE
global PSID_NAME_USE: type = @*_SID_NAME_USE
global _SID_AND_ATTRIBUTES: type <cimport,nodecl,ctypedef> = @record{
  Sid: PSID,
  Attributes: culong
}
global SID_AND_ATTRIBUTES: type = @_SID_AND_ATTRIBUTES
global PSID_AND_ATTRIBUTES: type = @*_SID_AND_ATTRIBUTES
global PSID_AND_ATTRIBUTES_ARRAY: type = @*[1]SID_AND_ATTRIBUTES
global PSID_HASH_ENTRY: type = @*culonglong
global _SID_AND_ATTRIBUTES_HASH: type <cimport,nodecl,ctypedef> = @record{
  SidCount: culong,
  SidAttr: PSID_AND_ATTRIBUTES,
  Hash: [32]culonglong
}
global SID_AND_ATTRIBUTES_HASH: type = @_SID_AND_ATTRIBUTES_HASH
global PSID_AND_ATTRIBUTES_HASH: type = @*_SID_AND_ATTRIBUTES_HASH
global WELL_KNOWN_SID_TYPE: type <cimport,nodecl,using> = @enum(cint){
  WinNullSid = 0,
  WinWorldSid = 1,
  WinLocalSid = 2,
  WinCreatorOwnerSid = 3,
  WinCreatorGroupSid = 4,
  WinCreatorOwnerServerSid = 5,
  WinCreatorGroupServerSid = 6,
  WinNtAuthoritySid = 7,
  WinDialupSid = 8,
  WinNetworkSid = 9,
  WinBatchSid = 10,
  WinInteractiveSid = 11,
  WinServiceSid = 12,
  WinAnonymousSid = 13,
  WinProxySid = 14,
  WinEnterpriseControllersSid = 15,
  WinSelfSid = 16,
  WinAuthenticatedUserSid = 17,
  WinRestrictedCodeSid = 18,
  WinTerminalServerSid = 19,
  WinRemoteLogonIdSid = 20,
  WinLogonIdsSid = 21,
  WinLocalSystemSid = 22,
  WinLocalServiceSid = 23,
  WinNetworkServiceSid = 24,
  WinBuiltinDomainSid = 25,
  WinBuiltinAdministratorsSid = 26,
  WinBuiltinUsersSid = 27,
  WinBuiltinGuestsSid = 28,
  WinBuiltinPowerUsersSid = 29,
  WinBuiltinAccountOperatorsSid = 30,
  WinBuiltinSystemOperatorsSid = 31,
  WinBuiltinPrintOperatorsSid = 32,
  WinBuiltinBackupOperatorsSid = 33,
  WinBuiltinReplicatorSid = 34,
  WinBuiltinPreWindows2000CompatibleAccessSid = 35,
  WinBuiltinRemoteDesktopUsersSid = 36,
  WinBuiltinNetworkConfigurationOperatorsSid = 37,
  WinAccountAdministratorSid = 38,
  WinAccountGuestSid = 39,
  WinAccountKrbtgtSid = 40,
  WinAccountDomainAdminsSid = 41,
  WinAccountDomainUsersSid = 42,
  WinAccountDomainGuestsSid = 43,
  WinAccountComputersSid = 44,
  WinAccountControllersSid = 45,
  WinAccountCertAdminsSid = 46,
  WinAccountSchemaAdminsSid = 47,
  WinAccountEnterpriseAdminsSid = 48,
  WinAccountPolicyAdminsSid = 49,
  WinAccountRasAndIasServersSid = 50,
  WinNTLMAuthenticationSid = 51,
  WinDigestAuthenticationSid = 52,
  WinSChannelAuthenticationSid = 53,
  WinThisOrganizationSid = 54,
  WinOtherOrganizationSid = 55,
  WinBuiltinIncomingForestTrustBuildersSid = 56,
  WinBuiltinPerfMonitoringUsersSid = 57,
  WinBuiltinPerfLoggingUsersSid = 58,
  WinBuiltinAuthorizationAccessSid = 59,
  WinBuiltinTerminalServerLicenseServersSid = 60,
  WinBuiltinDCOMUsersSid = 61,
  WinBuiltinIUsersSid = 62,
  WinIUserSid = 63,
  WinBuiltinCryptoOperatorsSid = 64,
  WinUntrustedLabelSid = 65,
  WinLowLabelSid = 66,
  WinMediumLabelSid = 67,
  WinHighLabelSid = 68,
  WinSystemLabelSid = 69,
  WinWriteRestrictedCodeSid = 70,
  WinCreatorOwnerRightsSid = 71,
  WinCacheablePrincipalsGroupSid = 72,
  WinNonCacheablePrincipalsGroupSid = 73,
  WinEnterpriseReadonlyControllersSid = 74,
  WinAccountReadonlyControllersSid = 75,
  WinBuiltinEventLogReadersGroup = 76,
  WinNewEnterpriseReadonlyControllersSid = 77,
  WinBuiltinCertSvcDComAccessGroup = 78,
  WinMediumPlusLabelSid = 79,
  WinLocalLogonSid = 80,
  WinConsoleLogonSid = 81,
  WinThisOrganizationCertificateSid = 82,
  WinApplicationPackageAuthoritySid = 83,
  WinBuiltinAnyPackageSid = 84,
  WinCapabilityInternetClientSid = 85,
  WinCapabilityInternetClientServerSid = 86,
  WinCapabilityPrivateNetworkClientServerSid = 87,
  WinCapabilityPicturesLibrarySid = 88,
  WinCapabilityVideosLibrarySid = 89,
  WinCapabilityMusicLibrarySid = 90,
  WinCapabilityDocumentsLibrarySid = 91,
  WinCapabilitySharedUserCertificatesSid = 92,
  WinCapabilityEnterpriseAuthenticationSid = 93,
  WinCapabilityRemovableStorageSid = 94,
  WinBuiltinRDSRemoteAccessServersSid = 95,
  WinBuiltinRDSEndpointServersSid = 96,
  WinBuiltinRDSManagementServersSid = 97,
  WinUserModeDriversSid = 98,
  WinBuiltinHyperVAdminsSid = 99,
  WinAccountCloneableControllersSid = 100,
  WinBuiltinAccessControlAssistanceOperatorsSid = 101,
  WinBuiltinRemoteManagementUsersSid = 102,
  WinAuthenticationAuthorityAssertedSid = 103,
  WinAuthenticationServiceAssertedSid = 104,
  WinLocalAccountSid = 105,
  WinLocalAccountAndAdministratorSid = 106,
  WinAccountProtectedUsersSid = 107,
  WinCapabilityAppointmentsSid = 108,
  WinCapabilityContactsSid = 109,
  WinAccountDefaultSystemManagedSid = 110,
  WinBuiltinDefaultSystemManagedGroupSid = 111,
  WinBuiltinStorageReplicaAdminsSid = 112,
  WinAccountKeyAdminsSid = 113,
  WinAccountEnterpriseKeyAdminsSid = 114,
  WinAuthenticationKeyTrustSid = 115,
  WinAuthenticationKeyPropertyMFASid = 116,
  WinAuthenticationKeyPropertyAttestationSid = 117
}
global _ACL: type <cimport,nodecl,ctypedef> = @record{
  AclRevision: cuchar,
  Sbz1: cuchar,
  AclSize: cushort,
  AceCount: cushort,
  Sbz2: cushort
}
global ACL: type = @_ACL
global PACL: type = @*ACL
global _ACE_HEADER: type <cimport,nodecl,ctypedef> = @record{
  AceType: cuchar,
  AceFlags: cuchar,
  AceSize: cushort
}
global ACE_HEADER: type = @_ACE_HEADER
global PACE_HEADER: type = @*ACE_HEADER
global _ACCESS_ALLOWED_ACE: type <cimport,nodecl,ctypedef> = @record{
  Header: ACE_HEADER,
  Mask: culong,
  SidStart: culong
}
global ACCESS_ALLOWED_ACE: type = @_ACCESS_ALLOWED_ACE
global PACCESS_ALLOWED_ACE: type = @*ACCESS_ALLOWED_ACE
global _ACCESS_DENIED_ACE: type <cimport,nodecl,ctypedef> = @record{
  Header: ACE_HEADER,
  Mask: culong,
  SidStart: culong
}
global ACCESS_DENIED_ACE: type = @_ACCESS_DENIED_ACE
global PACCESS_DENIED_ACE: type = @*ACCESS_DENIED_ACE
global _SYSTEM_AUDIT_ACE: type <cimport,nodecl,ctypedef> = @record{
  Header: ACE_HEADER,
  Mask: culong,
  SidStart: culong
}
global SYSTEM_AUDIT_ACE: type = @_SYSTEM_AUDIT_ACE
global PSYSTEM_AUDIT_ACE: type = @*SYSTEM_AUDIT_ACE
global _SYSTEM_ALARM_ACE: type <cimport,nodecl,ctypedef> = @record{
  Header: ACE_HEADER,
  Mask: culong,
  SidStart: culong
}
global SYSTEM_ALARM_ACE: type = @_SYSTEM_ALARM_ACE
global PSYSTEM_ALARM_ACE: type = @*SYSTEM_ALARM_ACE
global _SYSTEM_RESOURCE_ATTRIBUTE_ACE: type <cimport,nodecl,ctypedef> = @record{
  Header: ACE_HEADER,
  Mask: culong,
  SidStart: culong
}
global SYSTEM_RESOURCE_ATTRIBUTE_ACE: type = @_SYSTEM_RESOURCE_ATTRIBUTE_ACE
global PSYSTEM_RESOURCE_ATTRIBUTE_ACE: type = @*_SYSTEM_RESOURCE_ATTRIBUTE_ACE
global _SYSTEM_SCOPED_POLICY_ID_ACE: type <cimport,nodecl,ctypedef> = @record{
  Header: ACE_HEADER,
  Mask: culong,
  SidStart: culong
}
global SYSTEM_SCOPED_POLICY_ID_ACE: type = @_SYSTEM_SCOPED_POLICY_ID_ACE
global PSYSTEM_SCOPED_POLICY_ID_ACE: type = @*_SYSTEM_SCOPED_POLICY_ID_ACE
global _SYSTEM_MANDATORY_LABEL_ACE: type <cimport,nodecl,ctypedef> = @record{
  Header: ACE_HEADER,
  Mask: culong,
  SidStart: culong
}
global SYSTEM_MANDATORY_LABEL_ACE: type = @_SYSTEM_MANDATORY_LABEL_ACE
global PSYSTEM_MANDATORY_LABEL_ACE: type = @*_SYSTEM_MANDATORY_LABEL_ACE
global _ACCESS_ALLOWED_OBJECT_ACE: type <cimport,nodecl,ctypedef> = @record{
  Header: ACE_HEADER,
  Mask: culong,
  Flags: culong,
  ObjectType: GUID,
  InheritedObjectType: GUID,
  SidStart: culong
}
global ACCESS_ALLOWED_OBJECT_ACE: type = @_ACCESS_ALLOWED_OBJECT_ACE
global PACCESS_ALLOWED_OBJECT_ACE: type = @*_ACCESS_ALLOWED_OBJECT_ACE
global _ACCESS_DENIED_OBJECT_ACE: type <cimport,nodecl,ctypedef> = @record{
  Header: ACE_HEADER,
  Mask: culong,
  Flags: culong,
  ObjectType: GUID,
  InheritedObjectType: GUID,
  SidStart: culong
}
global ACCESS_DENIED_OBJECT_ACE: type = @_ACCESS_DENIED_OBJECT_ACE
global PACCESS_DENIED_OBJECT_ACE: type = @*_ACCESS_DENIED_OBJECT_ACE
global _SYSTEM_AUDIT_OBJECT_ACE: type <cimport,nodecl,ctypedef> = @record{
  Header: ACE_HEADER,
  Mask: culong,
  Flags: culong,
  ObjectType: GUID,
  InheritedObjectType: GUID,
  SidStart: culong
}
global SYSTEM_AUDIT_OBJECT_ACE: type = @_SYSTEM_AUDIT_OBJECT_ACE
global PSYSTEM_AUDIT_OBJECT_ACE: type = @*_SYSTEM_AUDIT_OBJECT_ACE
global _SYSTEM_ALARM_OBJECT_ACE: type <cimport,nodecl,ctypedef> = @record{
  Header: ACE_HEADER,
  Mask: culong,
  Flags: culong,
  ObjectType: GUID,
  InheritedObjectType: GUID,
  SidStart: culong
}
global SYSTEM_ALARM_OBJECT_ACE: type = @_SYSTEM_ALARM_OBJECT_ACE
global PSYSTEM_ALARM_OBJECT_ACE: type = @*_SYSTEM_ALARM_OBJECT_ACE
global _ACCESS_ALLOWED_CALLBACK_ACE: type <cimport,nodecl,ctypedef> = @record{
  Header: ACE_HEADER,
  Mask: culong,
  SidStart: culong
}
global ACCESS_ALLOWED_CALLBACK_ACE: type = @_ACCESS_ALLOWED_CALLBACK_ACE
global PACCESS_ALLOWED_CALLBACK_ACE: type = @*_ACCESS_ALLOWED_CALLBACK_ACE
global _ACCESS_DENIED_CALLBACK_ACE: type <cimport,nodecl,ctypedef> = @record{
  Header: ACE_HEADER,
  Mask: culong,
  SidStart: culong
}
global ACCESS_DENIED_CALLBACK_ACE: type = @_ACCESS_DENIED_CALLBACK_ACE
global PACCESS_DENIED_CALLBACK_ACE: type = @*_ACCESS_DENIED_CALLBACK_ACE
global _SYSTEM_AUDIT_CALLBACK_ACE: type <cimport,nodecl,ctypedef> = @record{
  Header: ACE_HEADER,
  Mask: culong,
  SidStart: culong
}
global SYSTEM_AUDIT_CALLBACK_ACE: type = @_SYSTEM_AUDIT_CALLBACK_ACE
global PSYSTEM_AUDIT_CALLBACK_ACE: type = @*_SYSTEM_AUDIT_CALLBACK_ACE
global _SYSTEM_ALARM_CALLBACK_ACE: type <cimport,nodecl,ctypedef> = @record{
  Header: ACE_HEADER,
  Mask: culong,
  SidStart: culong
}
global SYSTEM_ALARM_CALLBACK_ACE: type = @_SYSTEM_ALARM_CALLBACK_ACE
global PSYSTEM_ALARM_CALLBACK_ACE: type = @*_SYSTEM_ALARM_CALLBACK_ACE
global _ACCESS_ALLOWED_CALLBACK_OBJECT_ACE: type <cimport,nodecl,ctypedef> = @record{
  Header: ACE_HEADER,
  Mask: culong,
  Flags: culong,
  ObjectType: GUID,
  InheritedObjectType: GUID,
  SidStart: culong
}
global ACCESS_ALLOWED_CALLBACK_OBJECT_ACE: type = @_ACCESS_ALLOWED_CALLBACK_OBJECT_ACE
global PACCESS_ALLOWED_CALLBACK_OBJECT_ACE: type = @*_ACCESS_ALLOWED_CALLBACK_OBJECT_ACE
global _ACCESS_DENIED_CALLBACK_OBJECT_ACE: type <cimport,nodecl,ctypedef> = @record{
  Header: ACE_HEADER,
  Mask: culong,
  Flags: culong,
  ObjectType: GUID,
  InheritedObjectType: GUID,
  SidStart: culong
}
global ACCESS_DENIED_CALLBACK_OBJECT_ACE: type = @_ACCESS_DENIED_CALLBACK_OBJECT_ACE
global PACCESS_DENIED_CALLBACK_OBJECT_ACE: type = @*_ACCESS_DENIED_CALLBACK_OBJECT_ACE
global _SYSTEM_AUDIT_CALLBACK_OBJECT_ACE: type <cimport,nodecl,ctypedef> = @record{
  Header: ACE_HEADER,
  Mask: culong,
  Flags: culong,
  ObjectType: GUID,
  InheritedObjectType: GUID,
  SidStart: culong
}
global SYSTEM_AUDIT_CALLBACK_OBJECT_ACE: type = @_SYSTEM_AUDIT_CALLBACK_OBJECT_ACE
global PSYSTEM_AUDIT_CALLBACK_OBJECT_ACE: type = @*_SYSTEM_AUDIT_CALLBACK_OBJECT_ACE
global _SYSTEM_ALARM_CALLBACK_OBJECT_ACE: type <cimport,nodecl,ctypedef> = @record{
  Header: ACE_HEADER,
  Mask: culong,
  Flags: culong,
  ObjectType: GUID,
  InheritedObjectType: GUID,
  SidStart: culong
}
global SYSTEM_ALARM_CALLBACK_OBJECT_ACE: type = @_SYSTEM_ALARM_CALLBACK_OBJECT_ACE
global PSYSTEM_ALARM_CALLBACK_OBJECT_ACE: type = @*_SYSTEM_ALARM_CALLBACK_OBJECT_ACE
global _ACL_INFORMATION_CLASS: type <cimport,nodecl,using,ctypedef> = @enum(cint){
  AclRevisionInformation = 1,
  AclSizeInformation = 2
}
global ACL_INFORMATION_CLASS: type = @_ACL_INFORMATION_CLASS
global _ACL_REVISION_INFORMATION: type <cimport,nodecl,ctypedef> = @record{
  AclRevision: culong
}
global ACL_REVISION_INFORMATION: type = @_ACL_REVISION_INFORMATION
global PACL_REVISION_INFORMATION: type = @*ACL_REVISION_INFORMATION
global _ACL_SIZE_INFORMATION: type <cimport,nodecl,ctypedef> = @record{
  AceCount: culong,
  AclBytesInUse: culong,
  AclBytesFree: culong
}
global ACL_SIZE_INFORMATION: type = @_ACL_SIZE_INFORMATION
global PACL_SIZE_INFORMATION: type = @*ACL_SIZE_INFORMATION
global PSECURITY_DESCRIPTOR_CONTROL: type = @*cushort
global _SECURITY_DESCRIPTOR_RELATIVE: type <cimport,nodecl,ctypedef> = @record{
  Revision: cuchar,
  Sbz1: cuchar,
  Control: cushort,
  Owner: culong,
  Group: culong,
  Sacl: culong,
  Dacl: culong
}
global SECURITY_DESCRIPTOR_RELATIVE: type = @_SECURITY_DESCRIPTOR_RELATIVE
global PISECURITY_DESCRIPTOR_RELATIVE: type = @*_SECURITY_DESCRIPTOR_RELATIVE
global _SECURITY_DESCRIPTOR: type <cimport,nodecl,ctypedef> = @record{
  Revision: cuchar,
  Sbz1: cuchar,
  Control: cushort,
  Owner: PSID,
  Group: PSID,
  Sacl: PACL,
  Dacl: PACL
}
global SECURITY_DESCRIPTOR: type = @_SECURITY_DESCRIPTOR
global PISECURITY_DESCRIPTOR: type = @*_SECURITY_DESCRIPTOR
global _OBJECT_TYPE_LIST: type <cimport,nodecl,ctypedef> = @record{
  Level: cushort,
  Sbz: cushort,
  ObjectType: *GUID
}
global OBJECT_TYPE_LIST: type = @_OBJECT_TYPE_LIST
global POBJECT_TYPE_LIST: type = @*_OBJECT_TYPE_LIST
global _AUDIT_EVENT_TYPE: type <cimport,nodecl,using,ctypedef> = @enum(cint){
  AuditEventObjectAccess = 0,
  AuditEventDirectoryServiceAccess = 1
}
global AUDIT_EVENT_TYPE: type = @_AUDIT_EVENT_TYPE
global PAUDIT_EVENT_TYPE: type = @*_AUDIT_EVENT_TYPE
global _PRIVILEGE_SET: type <cimport,nodecl,ctypedef> = @record{
  PrivilegeCount: culong,
  Control: culong,
  Privilege: [1]LUID_AND_ATTRIBUTES
}
global PRIVILEGE_SET: type = @_PRIVILEGE_SET
global PPRIVILEGE_SET: type = @*_PRIVILEGE_SET
global _ACCESS_REASON_TYPE: type <cimport,nodecl,using,ctypedef> = @enum(cint){
  AccessReasonNone = 0,
  AccessReasonAllowedAce = 65536,
  AccessReasonDeniedAce = 131072,
  AccessReasonAllowedParentAce = 196608,
  AccessReasonDeniedParentAce = 262144,
  AccessReasonNotGrantedByCape = 327680,
  AccessReasonNotGrantedByParentCape = 393216,
  AccessReasonNotGrantedToAppContainer = 458752,
  AccessReasonMissingPrivilege = 1048576,
  AccessReasonFromPrivilege = 2097152,
  AccessReasonIntegrityLevel = 3145728,
  AccessReasonOwnership = 4194304,
  AccessReasonNullDacl = 5242880,
  AccessReasonEmptyDacl = 6291456,
  AccessReasonNoSD = 7340032,
  AccessReasonNoGrant = 8388608
}
global ACCESS_REASON_TYPE: type = @_ACCESS_REASON_TYPE
global _ACCESS_REASONS: type <cimport,nodecl,ctypedef> = @record{
  Data: [32]culong
}
global ACCESS_REASONS: type = @_ACCESS_REASONS
global PACCESS_REASONS: type = @*_ACCESS_REASONS
global _SE_SECURITY_DESCRIPTOR: type <cimport,nodecl,ctypedef> = @record{
  Size: culong,
  Flags: culong,
  SecurityDescriptor: PSECURITY_DESCRIPTOR
}
global SE_SECURITY_DESCRIPTOR: type = @_SE_SECURITY_DESCRIPTOR
global PSE_SECURITY_DESCRIPTOR: type = @*_SE_SECURITY_DESCRIPTOR
global _SE_ACCESS_REQUEST: type <cimport,nodecl,ctypedef> = @record{
  Size: culong,
  SeSecurityDescriptor: PSE_SECURITY_DESCRIPTOR,
  DesiredAccess: culong,
  PreviouslyGrantedAccess: culong,
  PrincipalSelfSid: PSID,
  GenericMapping: PGENERIC_MAPPING,
  ObjectTypeListCount: culong,
  ObjectTypeList: POBJECT_TYPE_LIST
}
global SE_ACCESS_REQUEST: type = @_SE_ACCESS_REQUEST
global PSE_ACCESS_REQUEST: type = @*_SE_ACCESS_REQUEST
global _SE_ACCESS_REPLY: type <cimport,nodecl,ctypedef> = @record{
  Size: culong,
  ResultListCount: culong,
  GrantedAccess: PACCESS_MASK,
  AccessStatus: PDWORD,
  AccessReason: PACCESS_REASONS,
  Privileges: *PPRIVILEGE_SET
}
global SE_ACCESS_REPLY: type = @_SE_ACCESS_REPLY
global PSE_ACCESS_REPLY: type = @*_SE_ACCESS_REPLY
global _SECURITY_IMPERSONATION_LEVEL: type <cimport,nodecl,using,ctypedef> = @enum(cint){
  SecurityAnonymous = 0,
  SecurityIdentification = 1,
  SecurityImpersonation = 2,
  SecurityDelegation = 3
}
global SECURITY_IMPERSONATION_LEVEL: type = @_SECURITY_IMPERSONATION_LEVEL
global PSECURITY_IMPERSONATION_LEVEL: type = @*_SECURITY_IMPERSONATION_LEVEL
global _TOKEN_TYPE: type <cimport,nodecl,using,ctypedef> = @enum(cint){
  TokenPrimary = 1,
  TokenImpersonation = 2
}
global TOKEN_TYPE: type = @_TOKEN_TYPE
global PTOKEN_TYPE: type = @*TOKEN_TYPE
global _TOKEN_ELEVATION_TYPE: type <cimport,nodecl,using,ctypedef> = @enum(cint){
  TokenElevationTypeDefault = 1,
  TokenElevationTypeFull = 2,
  TokenElevationTypeLimited = 3
}
global TOKEN_ELEVATION_TYPE: type = @_TOKEN_ELEVATION_TYPE
global PTOKEN_ELEVATION_TYPE: type = @*_TOKEN_ELEVATION_TYPE
global _TOKEN_INFORMATION_CLASS: type <cimport,nodecl,using,ctypedef> = @enum(cint){
  TokenUser = 1,
  TokenGroups = 2,
  TokenPrivileges = 3,
  TokenOwner = 4,
  TokenPrimaryGroup = 5,
  TokenDefaultDacl = 6,
  TokenSource = 7,
  TokenType = 8,
  TokenImpersonationLevel = 9,
  TokenStatistics = 10,
  TokenRestrictedSids = 11,
  TokenSessionId = 12,
  TokenGroupsAndPrivileges = 13,
  TokenSessionReference = 14,
  TokenSandBoxInert = 15,
  TokenAuditPolicy = 16,
  TokenOrigin = 17,
  TokenElevationType = 18,
  TokenLinkedToken = 19,
  TokenElevation = 20,
  TokenHasRestrictions = 21,
  TokenAccessInformation = 22,
  TokenVirtualizationAllowed = 23,
  TokenVirtualizationEnabled = 24,
  TokenIntegrityLevel = 25,
  TokenUIAccess = 26,
  TokenMandatoryPolicy = 27,
  TokenLogonSid = 28,
  TokenIsAppContainer = 29,
  TokenCapabilities = 30,
  TokenAppContainerSid = 31,
  TokenAppContainerNumber = 32,
  TokenUserClaimAttributes = 33,
  TokenDeviceClaimAttributes = 34,
  TokenRestrictedUserClaimAttributes = 35,
  TokenRestrictedDeviceClaimAttributes = 36,
  TokenDeviceGroups = 37,
  TokenRestrictedDeviceGroups = 38,
  TokenSecurityAttributes = 39,
  TokenIsRestricted = 40,
  MaxTokenInfoClass = 41
}
global TOKEN_INFORMATION_CLASS: type = @_TOKEN_INFORMATION_CLASS
global PTOKEN_INFORMATION_CLASS: type = @*_TOKEN_INFORMATION_CLASS
global _TOKEN_USER: type <cimport,nodecl,ctypedef> = @record{
  User: SID_AND_ATTRIBUTES
}
global TOKEN_USER: type = @_TOKEN_USER
global PTOKEN_USER: type = @*_TOKEN_USER
global _TOKEN_GROUPS: type <cimport,nodecl,ctypedef> = @record{
  GroupCount: culong,
  Groups: [1]SID_AND_ATTRIBUTES
}
global TOKEN_GROUPS: type = @_TOKEN_GROUPS
global PTOKEN_GROUPS: type = @*_TOKEN_GROUPS
global _TOKEN_PRIVILEGES: type <cimport,nodecl,ctypedef> = @record{
  PrivilegeCount: culong,
  Privileges: [1]LUID_AND_ATTRIBUTES
}
global TOKEN_PRIVILEGES: type = @_TOKEN_PRIVILEGES
global PTOKEN_PRIVILEGES: type = @*_TOKEN_PRIVILEGES
global _TOKEN_OWNER: type <cimport,nodecl,ctypedef> = @record{
  Owner: PSID
}
global TOKEN_OWNER: type = @_TOKEN_OWNER
global PTOKEN_OWNER: type = @*_TOKEN_OWNER
global _TOKEN_PRIMARY_GROUP: type <cimport,nodecl,ctypedef> = @record{
  PrimaryGroup: PSID
}
global TOKEN_PRIMARY_GROUP: type = @_TOKEN_PRIMARY_GROUP
global PTOKEN_PRIMARY_GROUP: type = @*_TOKEN_PRIMARY_GROUP
global _TOKEN_DEFAULT_DACL: type <cimport,nodecl,ctypedef> = @record{
  DefaultDacl: PACL
}
global TOKEN_DEFAULT_DACL: type = @_TOKEN_DEFAULT_DACL
global PTOKEN_DEFAULT_DACL: type = @*_TOKEN_DEFAULT_DACL
global _TOKEN_USER_CLAIMS: type <cimport,nodecl,ctypedef> = @record{
  UserClaims: PCLAIMS_BLOB
}
global TOKEN_USER_CLAIMS: type = @_TOKEN_USER_CLAIMS
global PTOKEN_USER_CLAIMS: type = @*_TOKEN_USER_CLAIMS
global _TOKEN_DEVICE_CLAIMS: type <cimport,nodecl,ctypedef> = @record{
  DeviceClaims: PCLAIMS_BLOB
}
global TOKEN_DEVICE_CLAIMS: type = @_TOKEN_DEVICE_CLAIMS
global PTOKEN_DEVICE_CLAIMS: type = @*_TOKEN_DEVICE_CLAIMS
global _TOKEN_GROUPS_AND_PRIVILEGES: type <cimport,nodecl,ctypedef> = @record{
  SidCount: culong,
  SidLength: culong,
  Sids: PSID_AND_ATTRIBUTES,
  RestrictedSidCount: culong,
  RestrictedSidLength: culong,
  RestrictedSids: PSID_AND_ATTRIBUTES,
  PrivilegeCount: culong,
  PrivilegeLength: culong,
  Privileges: PLUID_AND_ATTRIBUTES,
  AuthenticationId: LUID
}
global TOKEN_GROUPS_AND_PRIVILEGES: type = @_TOKEN_GROUPS_AND_PRIVILEGES
global PTOKEN_GROUPS_AND_PRIVILEGES: type = @*_TOKEN_GROUPS_AND_PRIVILEGES
global _TOKEN_LINKED_TOKEN: type <cimport,nodecl,ctypedef> = @record{
  LinkedToken: HANDLE
}
global TOKEN_LINKED_TOKEN: type = @_TOKEN_LINKED_TOKEN
global PTOKEN_LINKED_TOKEN: type = @*_TOKEN_LINKED_TOKEN
global _TOKEN_ELEVATION: type <cimport,nodecl,ctypedef> = @record{
  TokenIsElevated: culong
}
global TOKEN_ELEVATION: type = @_TOKEN_ELEVATION
global PTOKEN_ELEVATION: type = @*_TOKEN_ELEVATION
global _TOKEN_MANDATORY_LABEL: type <cimport,nodecl,ctypedef> = @record{
  Label: SID_AND_ATTRIBUTES
}
global TOKEN_MANDATORY_LABEL: type = @_TOKEN_MANDATORY_LABEL
global PTOKEN_MANDATORY_LABEL: type = @*_TOKEN_MANDATORY_LABEL
global _TOKEN_MANDATORY_POLICY: type <cimport,nodecl,ctypedef> = @record{
  Policy: culong
}
global TOKEN_MANDATORY_POLICY: type = @_TOKEN_MANDATORY_POLICY
global PTOKEN_MANDATORY_POLICY: type = @*_TOKEN_MANDATORY_POLICY
global _TOKEN_ACCESS_INFORMATION: type <cimport,nodecl,ctypedef> = @record{
  SidHash: PSID_AND_ATTRIBUTES_HASH,
  RestrictedSidHash: PSID_AND_ATTRIBUTES_HASH,
  Privileges: PTOKEN_PRIVILEGES,
  AuthenticationId: LUID,
  TokenType: TOKEN_TYPE,
  ImpersonationLevel: SECURITY_IMPERSONATION_LEVEL,
  MandatoryPolicy: TOKEN_MANDATORY_POLICY,
  Flags: culong,
  AppContainerNumber: culong,
  PackageSid: PSID,
  CapabilitiesHash: PSID_AND_ATTRIBUTES_HASH
}
global TOKEN_ACCESS_INFORMATION: type = @_TOKEN_ACCESS_INFORMATION
global PTOKEN_ACCESS_INFORMATION: type = @*_TOKEN_ACCESS_INFORMATION
global _TOKEN_AUDIT_POLICY: type <cimport,nodecl,ctypedef> = @record{
  PerUserPolicy: [29]cuchar
}
global TOKEN_AUDIT_POLICY: type = @_TOKEN_AUDIT_POLICY
global PTOKEN_AUDIT_POLICY: type = @*_TOKEN_AUDIT_POLICY
global _TOKEN_SOURCE: type <cimport,nodecl,ctypedef> = @record{
  SourceName: [8]cchar,
  SourceIdentifier: LUID
}
global TOKEN_SOURCE: type = @_TOKEN_SOURCE
global PTOKEN_SOURCE: type = @*_TOKEN_SOURCE
global _TOKEN_STATISTICS: type <cimport,nodecl,ctypedef> = @record{
  TokenId: LUID,
  AuthenticationId: LUID,
  ExpirationTime: LARGE_INTEGER,
  TokenType: TOKEN_TYPE,
  ImpersonationLevel: SECURITY_IMPERSONATION_LEVEL,
  DynamicCharged: culong,
  DynamicAvailable: culong,
  GroupCount: culong,
  PrivilegeCount: culong,
  ModifiedId: LUID
}
global TOKEN_STATISTICS: type = @_TOKEN_STATISTICS
global PTOKEN_STATISTICS: type = @*_TOKEN_STATISTICS
global _TOKEN_CONTROL: type <cimport,nodecl,ctypedef> = @record{
  TokenId: LUID,
  AuthenticationId: LUID,
  ModifiedId: LUID,
  TokenSource: TOKEN_SOURCE
}
global TOKEN_CONTROL: type = @_TOKEN_CONTROL
global PTOKEN_CONTROL: type = @*_TOKEN_CONTROL
global _TOKEN_ORIGIN: type <cimport,nodecl,ctypedef> = @record{
  OriginatingLogonSession: LUID
}
global TOKEN_ORIGIN: type = @_TOKEN_ORIGIN
global PTOKEN_ORIGIN: type = @*_TOKEN_ORIGIN
global _MANDATORY_LEVEL: type <cimport,nodecl,using,ctypedef> = @enum(cint){
  MandatoryLevelUntrusted = 0,
  MandatoryLevelLow = 1,
  MandatoryLevelMedium = 2,
  MandatoryLevelHigh = 3,
  MandatoryLevelSystem = 4,
  MandatoryLevelSecureProcess = 5,
  MandatoryLevelCount = 6
}
global MANDATORY_LEVEL: type = @_MANDATORY_LEVEL
global PMANDATORY_LEVEL: type = @*_MANDATORY_LEVEL
global _TOKEN_APPCONTAINER_INFORMATION: type <cimport,nodecl,ctypedef> = @record{
  TokenAppContainer: PSID
}
global TOKEN_APPCONTAINER_INFORMATION: type = @_TOKEN_APPCONTAINER_INFORMATION
global PTOKEN_APPCONTAINER_INFORMATION: type = @*_TOKEN_APPCONTAINER_INFORMATION
global _CLAIM_SECURITY_ATTRIBUTE_FQBN_VALUE: type <cimport,nodecl,ctypedef> = @record{
  Version: culonglong,
  Name: PWSTR
}
global CLAIM_SECURITY_ATTRIBUTE_FQBN_VALUE: type = @_CLAIM_SECURITY_ATTRIBUTE_FQBN_VALUE
global PCLAIM_SECURITY_ATTRIBUTE_FQBN_VALUE: type = @*_CLAIM_SECURITY_ATTRIBUTE_FQBN_VALUE
global _CLAIM_SECURITY_ATTRIBUTE_OCTET_STRING_VALUE: type <cimport,nodecl,ctypedef> = @record{
  pValue: PVOID,
  ValueLength: culong
}
global CLAIM_SECURITY_ATTRIBUTE_OCTET_STRING_VALUE: type = @_CLAIM_SECURITY_ATTRIBUTE_OCTET_STRING_VALUE
global PCLAIM_SECURITY_ATTRIBUTE_OCTET_STRING_VALUE: type = @*_CLAIM_SECURITY_ATTRIBUTE_OCTET_STRING_VALUE
global _CLAIM_SECURITY_ATTRIBUTE_V1: type <cimport,nodecl,ctypedef> = @record{
  Name: PWSTR,
  ValueType: cushort,
  Reserved: cushort,
  Flags: culong,
  ValueCount: culong,
  Values: union{
    pInt64: PLONG64,
    pUint64: PDWORD64,
    ppString: *PWSTR,
    pFqbn: PCLAIM_SECURITY_ATTRIBUTE_FQBN_VALUE,
    pOctetString: PCLAIM_SECURITY_ATTRIBUTE_OCTET_STRING_VALUE
  }
}
global CLAIM_SECURITY_ATTRIBUTE_V1: type = @_CLAIM_SECURITY_ATTRIBUTE_V1
global PCLAIM_SECURITY_ATTRIBUTE_V1: type = @*_CLAIM_SECURITY_ATTRIBUTE_V1
global _CLAIM_SECURITY_ATTRIBUTE_RELATIVE_V1: type <cimport,nodecl,ctypedef> = @record{
  Name: culong,
  ValueType: cushort,
  Reserved: cushort,
  Flags: culong,
  ValueCount: culong,
  Values: union{
    pInt64: [1]culong,
    pUint64: [1]culong,
    ppString: [1]culong,
    pFqbn: [1]culong,
    pOctetString: [1]culong
  }
}
global CLAIM_SECURITY_ATTRIBUTE_RELATIVE_V1: type = @_CLAIM_SECURITY_ATTRIBUTE_RELATIVE_V1
global PCLAIM_SECURITY_ATTRIBUTE_RELATIVE_V1: type = @*_CLAIM_SECURITY_ATTRIBUTE_RELATIVE_V1
global _CLAIM_SECURITY_ATTRIBUTES_INFORMATION: type <cimport,nodecl,ctypedef> = @record{
  Version: cushort,
  Reserved: cushort,
  AttributeCount: culong,
  Attribute: union{
    pAttributeV1: PCLAIM_SECURITY_ATTRIBUTE_V1
  }
}
global CLAIM_SECURITY_ATTRIBUTES_INFORMATION: type = @_CLAIM_SECURITY_ATTRIBUTES_INFORMATION
global PCLAIM_SECURITY_ATTRIBUTES_INFORMATION: type = @*_CLAIM_SECURITY_ATTRIBUTES_INFORMATION
global PSECURITY_CONTEXT_TRACKING_MODE: type = @*BOOLEAN
global _SECURITY_QUALITY_OF_SERVICE: type <cimport,nodecl,ctypedef> = @record{
  Length: culong,
  ImpersonationLevel: SECURITY_IMPERSONATION_LEVEL,
  ContextTrackingMode: cuchar,
  EffectiveOnly: BOOLEAN
}
global SECURITY_QUALITY_OF_SERVICE: type = @_SECURITY_QUALITY_OF_SERVICE
global PSECURITY_QUALITY_OF_SERVICE: type = @*_SECURITY_QUALITY_OF_SERVICE
global _SE_IMPERSONATION_STATE: type <cimport,nodecl,ctypedef> = @record{
  Token: PACCESS_TOKEN,
  CopyOnOpen: BOOLEAN,
  EffectiveOnly: BOOLEAN,
  Level: SECURITY_IMPERSONATION_LEVEL
}
global SE_IMPERSONATION_STATE: type = @_SE_IMPERSONATION_STATE
global PSE_IMPERSONATION_STATE: type = @*_SE_IMPERSONATION_STATE
global PSECURITY_INFORMATION: type = @*culong
global _SE_LEARNING_MODE_DATA_TYPE: type <cimport,nodecl,using,ctypedef> = @enum(cint){
  SeLearningModeInvalidType = 0,
  SeLearningModeSettings = 1,
  SeLearningModeMax = 2
}
global SE_LEARNING_MODE_DATA_TYPE: type = @_SE_LEARNING_MODE_DATA_TYPE
global _SECURITY_CAPABILITIES: type <cimport,nodecl,ctypedef> = @record{
  AppContainerSid: PSID,
  Capabilities: PSID_AND_ATTRIBUTES,
  CapabilityCount: culong,
  Reserved: culong
}
global SECURITY_CAPABILITIES: type = @_SECURITY_CAPABILITIES
global PSECURITY_CAPABILITIES: type = @*_SECURITY_CAPABILITIES
global LPSECURITY_CAPABILITIES: type = @*_SECURITY_CAPABILITIES
global _JOB_SET_ARRAY: type <cimport,nodecl,ctypedef> = @record{
  JobHandle: HANDLE,
  MemberLevel: culong,
  Flags: culong
}
global JOB_SET_ARRAY: type = @_JOB_SET_ARRAY
global PJOB_SET_ARRAY: type = @*_JOB_SET_ARRAY
global _EXCEPTION_REGISTRATION_RECORD: type <cimport,nodecl,forwarddecl,ctypedef> = @record{}
_EXCEPTION_REGISTRATION_RECORD = @record{
  __unnamed1: union{
    Next: *_EXCEPTION_REGISTRATION_RECORD,
    prev: *_EXCEPTION_REGISTRATION_RECORD
  },
  __unnamed2: union{
    Handler: PEXCEPTION_ROUTINE,
    handler: PEXCEPTION_ROUTINE
  }
}
global EXCEPTION_REGISTRATION_RECORD: type = @_EXCEPTION_REGISTRATION_RECORD
global PEXCEPTION_REGISTRATION_RECORD: type = @*EXCEPTION_REGISTRATION_RECORD
global EXCEPTION_REGISTRATION: type = @_EXCEPTION_REGISTRATION_RECORD
global PEXCEPTION_REGISTRATION: type = @*EXCEPTION_REGISTRATION_RECORD
global _NT_TIB: type <cimport,nodecl,forwarddecl,ctypedef> = @record{}
_NT_TIB = @record{
  ExceptionList: *_EXCEPTION_REGISTRATION_RECORD,
  StackBase: PVOID,
  StackLimit: PVOID,
  SubSystemTib: PVOID,
  __unnamed1: union{
    FiberData: PVOID,
    Version: culong
  },
  ArbitraryUserPointer: PVOID,
  Self: *_NT_TIB
}
global NT_TIB: type = @_NT_TIB
global PNT_TIB: type = @*NT_TIB
global _NT_TIB32: type <cimport,nodecl,ctypedef> = @record{
  ExceptionList: culong,
  StackBase: culong,
  StackLimit: culong,
  SubSystemTib: culong,
  __unnamed1: union{
    FiberData: culong,
    Version: culong
  },
  ArbitraryUserPointer: culong,
  Self: culong
}
global NT_TIB32: type = @_NT_TIB32
global PNT_TIB32: type = @*_NT_TIB32
global _NT_TIB64: type <cimport,nodecl,ctypedef> = @record{
  ExceptionList: culonglong,
  StackBase: culonglong,
  StackLimit: culonglong,
  SubSystemTib: culonglong,
  __unnamed1: union{
    FiberData: culonglong,
    Version: culong
  },
  ArbitraryUserPointer: culonglong,
  Self: culonglong
}
global NT_TIB64: type = @_NT_TIB64
global PNT_TIB64: type = @*_NT_TIB64
global _UMS_CREATE_THREAD_ATTRIBUTES: type <cimport,nodecl,ctypedef> = @record{
  UmsVersion: culong,
  UmsContext: PVOID,
  UmsCompletionList: PVOID
}
global UMS_CREATE_THREAD_ATTRIBUTES: type = @_UMS_CREATE_THREAD_ATTRIBUTES
global PUMS_CREATE_THREAD_ATTRIBUTES: type = @*_UMS_CREATE_THREAD_ATTRIBUTES
global _QUOTA_LIMITS: type <cimport,nodecl,ctypedef> = @record{
  PagedPoolLimit: culonglong,
  NonPagedPoolLimit: culonglong,
  MinimumWorkingSetSize: culonglong,
  MaximumWorkingSetSize: culonglong,
  PagefileLimit: culonglong,
  TimeLimit: LARGE_INTEGER
}
global QUOTA_LIMITS: type = @_QUOTA_LIMITS
global PQUOTA_LIMITS: type = @*_QUOTA_LIMITS
global _RATE_QUOTA_LIMIT: type <cimport,nodecl,ctypedef> = @union{
  RateData: culong,
  __unnamed1: record{
    RatePercent: culong,
    Reserved0: culong
  }
}
global RATE_QUOTA_LIMIT: type = @_RATE_QUOTA_LIMIT
global PRATE_QUOTA_LIMIT: type = @*_RATE_QUOTA_LIMIT
global _QUOTA_LIMITS_EX: type <cimport,nodecl,ctypedef> = @record{
  PagedPoolLimit: culonglong,
  NonPagedPoolLimit: culonglong,
  MinimumWorkingSetSize: culonglong,
  MaximumWorkingSetSize: culonglong,
  PagefileLimit: culonglong,
  TimeLimit: LARGE_INTEGER,
  WorkingSetLimit: culonglong,
  Reserved2: culonglong,
  Reserved3: culonglong,
  Reserved4: culonglong,
  Flags: culong,
  CpuRateLimit: RATE_QUOTA_LIMIT
}
global QUOTA_LIMITS_EX: type = @_QUOTA_LIMITS_EX
global PQUOTA_LIMITS_EX: type = @*_QUOTA_LIMITS_EX
global _IO_COUNTERS: type <cimport,nodecl,ctypedef> = @record{
  ReadOperationCount: culonglong,
  WriteOperationCount: culonglong,
  OtherOperationCount: culonglong,
  ReadTransferCount: culonglong,
  WriteTransferCount: culonglong,
  OtherTransferCount: culonglong
}
global IO_COUNTERS: type = @_IO_COUNTERS
global PIO_COUNTERS: type = @*IO_COUNTERS
global _HARDWARE_COUNTER_TYPE: type <cimport,nodecl,using,ctypedef> = @enum(cint){
  PMCCounter = 0,
  MaxHardwareCounterType = 1
}
global HARDWARE_COUNTER_TYPE: type = @_HARDWARE_COUNTER_TYPE
global PHARDWARE_COUNTER_TYPE: type = @*_HARDWARE_COUNTER_TYPE
global _PROCESS_MITIGATION_POLICY: type <cimport,nodecl,using,ctypedef> = @enum(cint){
  ProcessDEPPolicy = 0,
  ProcessASLRPolicy = 1,
  ProcessDynamicCodePolicy = 2,
  ProcessStrictHandleCheckPolicy = 3,
  ProcessSystemCallDisablePolicy = 4,
  ProcessMitigationOptionsMask = 5,
  ProcessExtensionPointDisablePolicy = 6,
  ProcessControlFlowGuardPolicy = 7,
  ProcessSignaturePolicy = 8,
  ProcessFontDisablePolicy = 9,
  ProcessImageLoadPolicy = 10,
  ProcessSystemCallFilterPolicy = 11,
  ProcessPayloadRestrictionPolicy = 12,
  ProcessChildProcessPolicy = 13,
  ProcessSideChannelIsolationPolicy = 14,
  MaxProcessMitigationPolicy = 15
}
global PROCESS_MITIGATION_POLICY: type = @_PROCESS_MITIGATION_POLICY
global PPROCESS_MITIGATION_POLICY: type = @*_PROCESS_MITIGATION_POLICY
global _PROCESS_MITIGATION_ASLR_POLICY: type <cimport,nodecl,ctypedef> = @record{
  __unnamed1: union{
    Flags: culong,
    __unnamed1: record{
      EnableBottomUpRandomization: culong,
      EnableForceRelocateImages: culong,
      EnableHighEntropy: culong,
      DisallowStrippedImages: culong,
      ReservedFlags: culong
    }
  }
}
global PROCESS_MITIGATION_ASLR_POLICY: type = @_PROCESS_MITIGATION_ASLR_POLICY
global PPROCESS_MITIGATION_ASLR_POLICY: type = @*_PROCESS_MITIGATION_ASLR_POLICY
global _PROCESS_MITIGATION_DEP_POLICY: type <cimport,nodecl,ctypedef> = @record{
  __unnamed1: union{
    Flags: culong,
    __unnamed1: record{
      Enable: culong,
      DisableAtlThunkEmulation: culong,
      ReservedFlags: culong
    }
  },
  Permanent: BOOLEAN
}
global PROCESS_MITIGATION_DEP_POLICY: type = @_PROCESS_MITIGATION_DEP_POLICY
global PPROCESS_MITIGATION_DEP_POLICY: type = @*_PROCESS_MITIGATION_DEP_POLICY
global _PROCESS_MITIGATION_STRICT_HANDLE_CHECK_POLICY: type <cimport,nodecl,ctypedef> = @record{
  __unnamed1: union{
    Flags: culong,
    __unnamed1: record{
      RaiseExceptionOnInvalidHandleReference: culong,
      HandleExceptionsPermanentlyEnabled: culong,
      ReservedFlags: culong
    }
  }
}
global PROCESS_MITIGATION_STRICT_HANDLE_CHECK_POLICY: type = @_PROCESS_MITIGATION_STRICT_HANDLE_CHECK_POLICY
global PPROCESS_MITIGATION_STRICT_HANDLE_CHECK_POLICY: type = @*_PROCESS_MITIGATION_STRICT_HANDLE_CHECK_POLICY
global _PROCESS_MITIGATION_SYSTEM_CALL_DISABLE_POLICY: type <cimport,nodecl,ctypedef> = @record{
  __unnamed1: union{
    Flags: culong,
    __unnamed1: record{
      DisallowWin32kSystemCalls: culong,
      ReservedFlags: culong
    }
  }
}
global PROCESS_MITIGATION_SYSTEM_CALL_DISABLE_POLICY: type = @_PROCESS_MITIGATION_SYSTEM_CALL_DISABLE_POLICY
global PPROCESS_MITIGATION_SYSTEM_CALL_DISABLE_POLICY: type = @*_PROCESS_MITIGATION_SYSTEM_CALL_DISABLE_POLICY
global _PROCESS_MITIGATION_EXTENSION_POINT_DISABLE_POLICY: type <cimport,nodecl,ctypedef> = @record{
  __unnamed1: union{
    Flags: culong,
    __unnamed1: record{
      DisableExtensionPoints: culong,
      ReservedFlags: culong
    }
  }
}
global PROCESS_MITIGATION_EXTENSION_POINT_DISABLE_POLICY: type = @_PROCESS_MITIGATION_EXTENSION_POINT_DISABLE_POLICY
global PPROCESS_MITIGATION_EXTENSION_POINT_DISABLE_POLICY: type = @*_PROCESS_MITIGATION_EXTENSION_POINT_DISABLE_POLICY
global _PROCESS_MITIGATION_CONTROL_FLOW_GUARD_POLICY: type <cimport,nodecl,ctypedef> = @record{
  __unnamed1: union{
    Flags: culong,
    __unnamed1: record{
      EnableControlFlowGuard: culong,
      EnableExportSuppression: culong,
      StrictMode: culong,
      ReservedFlags: culong
    }
  }
}
global PROCESS_MITIGATION_CONTROL_FLOW_GUARD_POLICY: type = @_PROCESS_MITIGATION_CONTROL_FLOW_GUARD_POLICY
global PPROCESS_MITIGATION_CONTROL_FLOW_GUARD_POLICY: type = @*_PROCESS_MITIGATION_CONTROL_FLOW_GUARD_POLICY
global _PROCESS_MITIGATION_BINARY_SIGNATURE_POLICY: type <cimport,nodecl,ctypedef> = @record{
  __unnamed1: union{
    Flags: culong,
    __unnamed1: record{
      MicrosoftSignedOnly: culong,
      StoreSignedOnly: culong,
      MitigationOptIn: culong,
      ReservedFlags: culong
    }
  }
}
global PROCESS_MITIGATION_BINARY_SIGNATURE_POLICY: type = @_PROCESS_MITIGATION_BINARY_SIGNATURE_POLICY
global PPROCESS_MITIGATION_BINARY_SIGNATURE_POLICY: type = @*_PROCESS_MITIGATION_BINARY_SIGNATURE_POLICY
global _PROCESS_MITIGATION_DYNAMIC_CODE_POLICY: type <cimport,nodecl,ctypedef> = @record{
  __unnamed1: union{
    Flags: culong,
    __unnamed1: record{
      ProhibitDynamicCode: culong,
      AllowThreadOptOut: culong,
      AllowRemoteDowngrade: culong,
      ReservedFlags: culong
    }
  }
}
global PROCESS_MITIGATION_DYNAMIC_CODE_POLICY: type = @_PROCESS_MITIGATION_DYNAMIC_CODE_POLICY
global PPROCESS_MITIGATION_DYNAMIC_CODE_POLICY: type = @*_PROCESS_MITIGATION_DYNAMIC_CODE_POLICY
global _PROCESS_MITIGATION_FONT_DISABLE_POLICY: type <cimport,nodecl,ctypedef> = @record{
  __unnamed1: union{
    Flags: culong,
    __unnamed1: record{
      DisableNonSystemFonts: culong,
      AuditNonSystemFontLoading: culong,
      ReservedFlags: culong
    }
  }
}
global PROCESS_MITIGATION_FONT_DISABLE_POLICY: type = @_PROCESS_MITIGATION_FONT_DISABLE_POLICY
global PPROCESS_MITIGATION_FONT_DISABLE_POLICY: type = @*_PROCESS_MITIGATION_FONT_DISABLE_POLICY
global _PROCESS_MITIGATION_IMAGE_LOAD_POLICY: type <cimport,nodecl,ctypedef> = @record{
  __unnamed1: union{
    Flags: culong,
    __unnamed1: record{
      NoRemoteImages: culong,
      NoLowMandatoryLabelImages: culong,
      PreferSystem32Images: culong,
      ReservedFlags: culong
    }
  }
}
global PROCESS_MITIGATION_IMAGE_LOAD_POLICY: type = @_PROCESS_MITIGATION_IMAGE_LOAD_POLICY
global PPROCESS_MITIGATION_IMAGE_LOAD_POLICY: type = @*_PROCESS_MITIGATION_IMAGE_LOAD_POLICY
global _PROCESS_MITIGATION_SYSTEM_CALL_FILTER_POLICY: type <cimport,nodecl,ctypedef> = @record{
  __unnamed1: union{
    Flags: culong,
    __unnamed1: record{
      FilterId: culong,
      ReservedFlags: culong
    }
  }
}
global PROCESS_MITIGATION_SYSTEM_CALL_FILTER_POLICY: type = @_PROCESS_MITIGATION_SYSTEM_CALL_FILTER_POLICY
global PPROCESS_MITIGATION_SYSTEM_CALL_FILTER_POLICY: type = @*_PROCESS_MITIGATION_SYSTEM_CALL_FILTER_POLICY
global _PROCESS_MITIGATION_PAYLOAD_RESTRICTION_POLICY: type <cimport,nodecl,ctypedef> = @record{
  __unnamed1: union{
    Flags: culong,
    __unnamed1: record{
      EnableExportAddressFilter: culong,
      AuditExportAddressFilter: culong,
      EnableExportAddressFilterPlus: culong,
      AuditExportAddressFilterPlus: culong,
      EnableImportAddressFilter: culong,
      AuditImportAddressFilter: culong,
      EnableRopStackPivot: culong,
      AuditRopStackPivot: culong,
      EnableRopCallerCheck: culong,
      AuditRopCallerCheck: culong,
      EnableRopSimExec: culong,
      AuditRopSimExec: culong,
      ReservedFlags: culong
    }
  }
}
global PROCESS_MITIGATION_PAYLOAD_RESTRICTION_POLICY: type = @_PROCESS_MITIGATION_PAYLOAD_RESTRICTION_POLICY
global PPROCESS_MITIGATION_PAYLOAD_RESTRICTION_POLICY: type = @*_PROCESS_MITIGATION_PAYLOAD_RESTRICTION_POLICY
global _PROCESS_MITIGATION_CHILD_PROCESS_POLICY: type <cimport,nodecl,ctypedef> = @record{
  __unnamed1: union{
    Flags: culong,
    __unnamed1: record{
      NoChildProcessCreation: culong,
      AuditNoChildProcessCreation: culong,
      AllowSecureProcessCreation: culong,
      ReservedFlags: culong
    }
  }
}
global PROCESS_MITIGATION_CHILD_PROCESS_POLICY: type = @_PROCESS_MITIGATION_CHILD_PROCESS_POLICY
global PPROCESS_MITIGATION_CHILD_PROCESS_POLICY: type = @*_PROCESS_MITIGATION_CHILD_PROCESS_POLICY
global _PROCESS_MITIGATION_SIDE_CHANNEL_ISOLATION_POLICY: type <cimport,nodecl,ctypedef> = @record{
  __unnamed1: union{
    Flags: culong,
    __unnamed1: record{
      SmtBranchTargetIsolation: culong,
      IsolateSecurityDomain: culong,
      DisablePageCombine: culong,
      SpeculativeStoreBypassDisable: culong,
      ReservedFlags: culong
    }
  }
}
global PROCESS_MITIGATION_SIDE_CHANNEL_ISOLATION_POLICY: type = @_PROCESS_MITIGATION_SIDE_CHANNEL_ISOLATION_POLICY
global PPROCESS_MITIGATION_SIDE_CHANNEL_ISOLATION_POLICY: type = @*_PROCESS_MITIGATION_SIDE_CHANNEL_ISOLATION_POLICY
global _JOBOBJECT_BASIC_ACCOUNTING_INFORMATION: type <cimport,nodecl,ctypedef> = @record{
  TotalUserTime: LARGE_INTEGER,
  TotalKernelTime: LARGE_INTEGER,
  ThisPeriodTotalUserTime: LARGE_INTEGER,
  ThisPeriodTotalKernelTime: LARGE_INTEGER,
  TotalPageFaultCount: culong,
  TotalProcesses: culong,
  ActiveProcesses: culong,
  TotalTerminatedProcesses: culong
}
global JOBOBJECT_BASIC_ACCOUNTING_INFORMATION: type = @_JOBOBJECT_BASIC_ACCOUNTING_INFORMATION
global PJOBOBJECT_BASIC_ACCOUNTING_INFORMATION: type = @*_JOBOBJECT_BASIC_ACCOUNTING_INFORMATION
global _JOBOBJECT_BASIC_LIMIT_INFORMATION: type <cimport,nodecl,ctypedef> = @record{
  PerProcessUserTimeLimit: LARGE_INTEGER,
  PerJobUserTimeLimit: LARGE_INTEGER,
  LimitFlags: culong,
  MinimumWorkingSetSize: culonglong,
  MaximumWorkingSetSize: culonglong,
  ActiveProcessLimit: culong,
  Affinity: culonglong,
  PriorityClass: culong,
  SchedulingClass: culong
}
global JOBOBJECT_BASIC_LIMIT_INFORMATION: type = @_JOBOBJECT_BASIC_LIMIT_INFORMATION
global PJOBOBJECT_BASIC_LIMIT_INFORMATION: type = @*_JOBOBJECT_BASIC_LIMIT_INFORMATION
global _JOBOBJECT_EXTENDED_LIMIT_INFORMATION: type <cimport,nodecl,ctypedef> = @record{
  BasicLimitInformation: JOBOBJECT_BASIC_LIMIT_INFORMATION,
  IoInfo: IO_COUNTERS,
  ProcessMemoryLimit: culonglong,
  JobMemoryLimit: culonglong,
  PeakProcessMemoryUsed: culonglong,
  PeakJobMemoryUsed: culonglong
}
global JOBOBJECT_EXTENDED_LIMIT_INFORMATION: type = @_JOBOBJECT_EXTENDED_LIMIT_INFORMATION
global PJOBOBJECT_EXTENDED_LIMIT_INFORMATION: type = @*_JOBOBJECT_EXTENDED_LIMIT_INFORMATION
global _JOBOBJECT_BASIC_PROCESS_ID_LIST: type <cimport,nodecl,ctypedef> = @record{
  NumberOfAssignedProcesses: culong,
  NumberOfProcessIdsInList: culong,
  ProcessIdList: [1]culonglong
}
global JOBOBJECT_BASIC_PROCESS_ID_LIST: type = @_JOBOBJECT_BASIC_PROCESS_ID_LIST
global PJOBOBJECT_BASIC_PROCESS_ID_LIST: type = @*_JOBOBJECT_BASIC_PROCESS_ID_LIST
global _JOBOBJECT_BASIC_UI_RESTRICTIONS: type <cimport,nodecl,ctypedef> = @record{
  UIRestrictionsClass: culong
}
global JOBOBJECT_BASIC_UI_RESTRICTIONS: type = @_JOBOBJECT_BASIC_UI_RESTRICTIONS
global PJOBOBJECT_BASIC_UI_RESTRICTIONS: type = @*_JOBOBJECT_BASIC_UI_RESTRICTIONS
global _JOBOBJECT_SECURITY_LIMIT_INFORMATION: type <cimport,nodecl,ctypedef> = @record{
  SecurityLimitFlags: culong,
  JobToken: HANDLE,
  SidsToDisable: PTOKEN_GROUPS,
  PrivilegesToDelete: PTOKEN_PRIVILEGES,
  RestrictedSids: PTOKEN_GROUPS
}
global JOBOBJECT_SECURITY_LIMIT_INFORMATION: type = @_JOBOBJECT_SECURITY_LIMIT_INFORMATION
global PJOBOBJECT_SECURITY_LIMIT_INFORMATION: type = @*_JOBOBJECT_SECURITY_LIMIT_INFORMATION
global _JOBOBJECT_END_OF_JOB_TIME_INFORMATION: type <cimport,nodecl,ctypedef> = @record{
  EndOfJobTimeAction: culong
}
global JOBOBJECT_END_OF_JOB_TIME_INFORMATION: type = @_JOBOBJECT_END_OF_JOB_TIME_INFORMATION
global PJOBOBJECT_END_OF_JOB_TIME_INFORMATION: type = @*_JOBOBJECT_END_OF_JOB_TIME_INFORMATION
global _JOBOBJECT_ASSOCIATE_COMPLETION_PORT: type <cimport,nodecl,ctypedef> = @record{
  CompletionKey: PVOID,
  CompletionPort: HANDLE
}
global JOBOBJECT_ASSOCIATE_COMPLETION_PORT: type = @_JOBOBJECT_ASSOCIATE_COMPLETION_PORT
global PJOBOBJECT_ASSOCIATE_COMPLETION_PORT: type = @*_JOBOBJECT_ASSOCIATE_COMPLETION_PORT
global _JOBOBJECT_BASIC_AND_IO_ACCOUNTING_INFORMATION: type <cimport,nodecl,ctypedef> = @record{
  BasicInfo: JOBOBJECT_BASIC_ACCOUNTING_INFORMATION,
  IoInfo: IO_COUNTERS
}
global JOBOBJECT_BASIC_AND_IO_ACCOUNTING_INFORMATION: type = @_JOBOBJECT_BASIC_AND_IO_ACCOUNTING_INFORMATION
global PJOBOBJECT_BASIC_AND_IO_ACCOUNTING_INFORMATION: type = @*_JOBOBJECT_BASIC_AND_IO_ACCOUNTING_INFORMATION
global _JOBOBJECT_JOBSET_INFORMATION: type <cimport,nodecl,ctypedef> = @record{
  MemberLevel: culong
}
global JOBOBJECT_JOBSET_INFORMATION: type = @_JOBOBJECT_JOBSET_INFORMATION
global PJOBOBJECT_JOBSET_INFORMATION: type = @*_JOBOBJECT_JOBSET_INFORMATION
global _JOBOBJECT_RATE_CONTROL_TOLERANCE: type <cimport,nodecl,using,ctypedef> = @enum(cint){
  ToleranceLow = 1,
  ToleranceMedium = 2,
  ToleranceHigh = 3
}
global JOBOBJECT_RATE_CONTROL_TOLERANCE: type = @_JOBOBJECT_RATE_CONTROL_TOLERANCE
global _JOBOBJECT_RATE_CONTROL_TOLERANCE_INTERVAL: type <cimport,nodecl,using,ctypedef> = @enum(cint){
  ToleranceIntervalShort = 1,
  ToleranceIntervalMedium = 2,
  ToleranceIntervalLong = 3
}
global JOBOBJECT_RATE_CONTROL_TOLERANCE_INTERVAL: type = @_JOBOBJECT_RATE_CONTROL_TOLERANCE_INTERVAL
global _JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION: type <cimport,nodecl,ctypedef> = @record{
  IoReadBytesLimit: culonglong,
  IoWriteBytesLimit: culonglong,
  PerJobUserTimeLimit: LARGE_INTEGER,
  JobMemoryLimit: culonglong,
  RateControlTolerance: JOBOBJECT_RATE_CONTROL_TOLERANCE,
  RateControlToleranceInterval: JOBOBJECT_RATE_CONTROL_TOLERANCE_INTERVAL,
  LimitFlags: culong
}
global JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION: type = @_JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION
global PJOBOBJECT_NOTIFICATION_LIMIT_INFORMATION: type = @*_JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION
global _JOBOBJECT_LIMIT_VIOLATION_INFORMATION: type <cimport,nodecl,ctypedef> = @record{
  LimitFlags: culong,
  ViolationLimitFlags: culong,
  IoReadBytes: culonglong,
  IoReadBytesLimit: culonglong,
  IoWriteBytes: culonglong,
  IoWriteBytesLimit: culonglong,
  PerJobUserTime: LARGE_INTEGER,
  PerJobUserTimeLimit: LARGE_INTEGER,
  JobMemory: culonglong,
  JobMemoryLimit: culonglong,
  RateControlTolerance: JOBOBJECT_RATE_CONTROL_TOLERANCE,
  RateControlToleranceLimit: JOBOBJECT_RATE_CONTROL_TOLERANCE_INTERVAL
}
global JOBOBJECT_LIMIT_VIOLATION_INFORMATION: type = @_JOBOBJECT_LIMIT_VIOLATION_INFORMATION
global PJOBOBJECT_LIMIT_VIOLATION_INFORMATION: type = @*_JOBOBJECT_LIMIT_VIOLATION_INFORMATION
global _JOBOBJECT_CPU_RATE_CONTROL_INFORMATION: type <cimport,nodecl,ctypedef> = @record{
  ControlFlags: culong,
  __unnamed1: union{
    CpuRate: culong,
    Weight: culong
  }
}
global JOBOBJECT_CPU_RATE_CONTROL_INFORMATION: type = @_JOBOBJECT_CPU_RATE_CONTROL_INFORMATION
global PJOBOBJECT_CPU_RATE_CONTROL_INFORMATION: type = @*_JOBOBJECT_CPU_RATE_CONTROL_INFORMATION
global _JOBOBJECTINFOCLASS: type <cimport,nodecl,using,ctypedef> = @enum(cint){
  JobObjectBasicAccountingInformation = 1,
  JobObjectBasicLimitInformation = 2,
  JobObjectBasicProcessIdList = 3,
  JobObjectBasicUIRestrictions = 4,
  JobObjectSecurityLimitInformation = 5,
  JobObjectEndOfJobTimeInformation = 6,
  JobObjectAssociateCompletionPortInformation = 7,
  JobObjectBasicAndIoAccountingInformation = 8,
  JobObjectExtendedLimitInformation = 9,
  JobObjectJobSetInformation = 10,
  JobObjectGroupInformation = 11,
  JobObjectNotificationLimitInformation = 12,
  JobObjectLimitViolationInformation = 13,
  JobObjectGroupInformationEx = 14,
  JobObjectCpuRateControlInformation = 15,
  JobObjectCompletionFilter = 16,
  JobObjectCompletionCounter = 17,
  JobObjectReserved1Information = 18,
  JobObjectReserved2Information = 19,
  JobObjectReserved3Information = 20,
  JobObjectReserved4Information = 21,
  JobObjectReserved5Information = 22,
  JobObjectReserved6Information = 23,
  JobObjectReserved7Information = 24,
  JobObjectReserved8Information = 25,
  MaxJobObjectInfoClass = 26
}
global JOBOBJECTINFOCLASS: type = @_JOBOBJECTINFOCLASS
global _FIRMWARE_TYPE: type <cimport,nodecl,using,ctypedef> = @enum(cint){
  FirmwareTypeUnknown = 0,
  FirmwareTypeBios = 1,
  FirmwareTypeUefi = 2,
  FirmwareTypeMax = 3
}
global FIRMWARE_TYPE: type = @_FIRMWARE_TYPE
global PFIRMWARE_TYPE: type = @*_FIRMWARE_TYPE
global _LOGICAL_PROCESSOR_RELATIONSHIP: type <cimport,nodecl,using,ctypedef> = @enum(cint){
  RelationProcessorCore = 0,
  RelationNumaNode = 1,
  RelationCache = 2,
  RelationProcessorPackage = 3,
  RelationGroup = 4,
  RelationAll = 65535
}
global LOGICAL_PROCESSOR_RELATIONSHIP: type = @_LOGICAL_PROCESSOR_RELATIONSHIP
global _PROCESSOR_CACHE_TYPE: type <cimport,nodecl,using,ctypedef> = @enum(cint){
  CacheUnified = 0,
  CacheInstruction = 1,
  CacheData = 2,
  CacheTrace = 3
}
global PROCESSOR_CACHE_TYPE: type = @_PROCESSOR_CACHE_TYPE
global _CACHE_DESCRIPTOR: type <cimport,nodecl,ctypedef> = @record{
  Level: cuchar,
  Associativity: cuchar,
  LineSize: cushort,
  Size: culong,
  Type: PROCESSOR_CACHE_TYPE
}
global CACHE_DESCRIPTOR: type = @_CACHE_DESCRIPTOR
global PCACHE_DESCRIPTOR: type = @*_CACHE_DESCRIPTOR
global _SYSTEM_LOGICAL_PROCESSOR_INFORMATION: type <cimport,nodecl,ctypedef> = @record{
  ProcessorMask: culonglong,
  Relationship: LOGICAL_PROCESSOR_RELATIONSHIP,
  __unnamed1: union{
    ProcessorCore: record{
      Flags: cuchar
    },
    NumaNode: record{
      NodeNumber: culong
    },
    Cache: CACHE_DESCRIPTOR,
    Reserved: [2]culonglong
  }
}
global SYSTEM_LOGICAL_PROCESSOR_INFORMATION: type = @_SYSTEM_LOGICAL_PROCESSOR_INFORMATION
global PSYSTEM_LOGICAL_PROCESSOR_INFORMATION: type = @*_SYSTEM_LOGICAL_PROCESSOR_INFORMATION
global _PROCESSOR_RELATIONSHIP: type <cimport,nodecl,ctypedef> = @record{
  Flags: cuchar,
  Reserved: [21]cuchar,
  GroupCount: cushort,
  GroupMask: [1]GROUP_AFFINITY
}
global PROCESSOR_RELATIONSHIP: type = @_PROCESSOR_RELATIONSHIP
global PPROCESSOR_RELATIONSHIP: type = @*_PROCESSOR_RELATIONSHIP
global _NUMA_NODE_RELATIONSHIP: type <cimport,nodecl,ctypedef> = @record{
  NodeNumber: culong,
  Reserved: [20]cuchar,
  GroupMask: GROUP_AFFINITY
}
global NUMA_NODE_RELATIONSHIP: type = @_NUMA_NODE_RELATIONSHIP
global PNUMA_NODE_RELATIONSHIP: type = @*_NUMA_NODE_RELATIONSHIP
global _CACHE_RELATIONSHIP: type <cimport,nodecl,ctypedef> = @record{
  Level: cuchar,
  Associativity: cuchar,
  LineSize: cushort,
  CacheSize: culong,
  Type: PROCESSOR_CACHE_TYPE,
  Reserved: [20]cuchar,
  GroupMask: GROUP_AFFINITY
}
global CACHE_RELATIONSHIP: type = @_CACHE_RELATIONSHIP
global PCACHE_RELATIONSHIP: type = @*_CACHE_RELATIONSHIP
global _PROCESSOR_GROUP_INFO: type <cimport,nodecl,ctypedef> = @record{
  MaximumProcessorCount: cuchar,
  ActiveProcessorCount: cuchar,
  Reserved: [38]cuchar,
  ActiveProcessorMask: culonglong
}
global PROCESSOR_GROUP_INFO: type = @_PROCESSOR_GROUP_INFO
global PPROCESSOR_GROUP_INFO: type = @*_PROCESSOR_GROUP_INFO
global _GROUP_RELATIONSHIP: type <cimport,nodecl,ctypedef> = @record{
  MaximumGroupCount: cushort,
  ActiveGroupCount: cushort,
  Reserved: [20]cuchar,
  GroupInfo: [1]PROCESSOR_GROUP_INFO
}
global GROUP_RELATIONSHIP: type = @_GROUP_RELATIONSHIP
global PGROUP_RELATIONSHIP: type = @*_GROUP_RELATIONSHIP
global _SYSTEM_LOGICAL_PROCESSOR_INFORMATION_EX: type <cimport,nodecl,ctypedef> = @record{
  Relationship: LOGICAL_PROCESSOR_RELATIONSHIP,
  Size: culong,
  __unnamed1: union{
    Processor: PROCESSOR_RELATIONSHIP,
    NumaNode: NUMA_NODE_RELATIONSHIP,
    Cache: CACHE_RELATIONSHIP,
    Group: GROUP_RELATIONSHIP
  }
}
global SYSTEM_LOGICAL_PROCESSOR_INFORMATION_EX: type = @_SYSTEM_LOGICAL_PROCESSOR_INFORMATION_EX
global PSYSTEM_LOGICAL_PROCESSOR_INFORMATION_EX: type = @*_SYSTEM_LOGICAL_PROCESSOR_INFORMATION_EX
global _SYSTEM_PROCESSOR_CYCLE_TIME_INFORMATION: type <cimport,nodecl,ctypedef> = @record{
  CycleTime: culonglong
}
global SYSTEM_PROCESSOR_CYCLE_TIME_INFORMATION: type = @_SYSTEM_PROCESSOR_CYCLE_TIME_INFORMATION
global PSYSTEM_PROCESSOR_CYCLE_TIME_INFORMATION: type = @*_SYSTEM_PROCESSOR_CYCLE_TIME_INFORMATION
global _XSTATE_FEATURE: type <cimport,nodecl,ctypedef> = @record{
  Offset: culong,
  Size: culong
}
global XSTATE_FEATURE: type = @_XSTATE_FEATURE
global PXSTATE_FEATURE: type = @*_XSTATE_FEATURE
global _XSTATE_CONFIGURATION: type <cimport,nodecl,cincomplete,ctypedef> = @record{
  EnabledFeatures: culonglong,
  EnabledVolatileFeatures: culonglong,
  Size: culong,
  OptimizedSave: culong,
  Features: [64]XSTATE_FEATURE
}
global XSTATE_CONFIGURATION: type = @_XSTATE_CONFIGURATION
global PXSTATE_CONFIGURATION: type = @*_XSTATE_CONFIGURATION
global _MEMORY_BASIC_INFORMATION: type <cimport,nodecl,ctypedef> = @record{
  BaseAddress: PVOID,
  AllocationBase: PVOID,
  AllocationProtect: culong,
  RegionSize: culonglong,
  State: culong,
  Protect: culong,
  Type: culong
}
global MEMORY_BASIC_INFORMATION: type = @_MEMORY_BASIC_INFORMATION
global PMEMORY_BASIC_INFORMATION: type = @*_MEMORY_BASIC_INFORMATION
global _MEMORY_BASIC_INFORMATION32: type <cimport,nodecl,ctypedef> = @record{
  BaseAddress: culong,
  AllocationBase: culong,
  AllocationProtect: culong,
  RegionSize: culong,
  State: culong,
  Protect: culong,
  Type: culong
}
global MEMORY_BASIC_INFORMATION32: type = @_MEMORY_BASIC_INFORMATION32
global PMEMORY_BASIC_INFORMATION32: type = @*_MEMORY_BASIC_INFORMATION32
global _MEMORY_BASIC_INFORMATION64: type <cimport,nodecl,aligned(16),ctypedef> = @record{
  BaseAddress: culonglong,
  AllocationBase: culonglong,
  AllocationProtect: culong,
  __alignment1: culong,
  RegionSize: culonglong,
  State: culong,
  Protect: culong,
  Type: culong,
  __alignment2: culong
}
global MEMORY_BASIC_INFORMATION64: type = @_MEMORY_BASIC_INFORMATION64
global PMEMORY_BASIC_INFORMATION64: type = @*_MEMORY_BASIC_INFORMATION64
global _CFG_CALL_TARGET_INFO: type <cimport,nodecl,ctypedef> = @record{
  Offset: culonglong,
  Flags: culonglong
}
global CFG_CALL_TARGET_INFO: type = @_CFG_CALL_TARGET_INFO
global PCFG_CALL_TARGET_INFO: type = @*_CFG_CALL_TARGET_INFO
global _MEM_ADDRESS_REQUIREMENTS: type <cimport,nodecl,ctypedef> = @record{
  LowestStartingAddress: PVOID,
  HighestEndingAddress: PVOID,
  Alignment: culonglong
}
global MEM_ADDRESS_REQUIREMENTS: type = @_MEM_ADDRESS_REQUIREMENTS
global PMEM_ADDRESS_REQUIREMENTS: type = @*_MEM_ADDRESS_REQUIREMENTS
global MEM_EXTENDED_PARAMETER_TYPE: type <cimport,nodecl,using> = @enum(cint){
  MemExtendedParameterInvalidType = 0,
  MemExtendedParameterAddressRequirements = 1,
  MemExtendedParameterNumaNode = 2,
  MemExtendedParameterPartitionHandle = 3,
  MemExtendedParameterUserPhysicalHandle = 4,
  MemExtendedParameterAttributeFlags = 5,
  MemExtendedParameterMax = 6
}
global PMEM_EXTENDED_PARAMETER_TYPE: type = @*MEM_EXTENDED_PARAMETER_TYPE
global MEM_EXTENDED_PARAMETER: type <cimport,nodecl,aligned(8)> = @record{
  __unnamed1: record{
    Type: cuchar,
    Reserved: culonglong
  },
  __unnamed2: union{
    ULong64: culonglong,
    Pointer: PVOID,
    Size: culonglong,
    Handle: HANDLE,
    ULong: culong
  }
}
global PMEM_EXTENDED_PARAMETER: type = @*MEM_EXTENDED_PARAMETER
global MEM_SECTION_EXTENDED_PARAMETER_TYPE: type <cimport,nodecl,using> = @enum(cint){
  MemSectionExtendedParameterInvalidType = 0,
  MemSectionExtendedParameterUserPhysicalFlags = 1,
  MemSectionExtendedParameterNumaNode = 2,
  MemSectionExtendedParameterMax = 3
}
global PMEM_SECTION_EXTENDED_PARAMETER_TYPE: type = @*MEM_SECTION_EXTENDED_PARAMETER_TYPE
global FILE_ID_128: type <cimport,nodecl> = @record{
  Identifier: [16]cuchar
}
global PFILE_ID_128: type = @*FILE_ID_128
global _FILE_NOTIFY_INFORMATION: type <cimport,nodecl,ctypedef> = @record{
  NextEntryOffset: culong,
  Action: culong,
  FileNameLength: culong,
  FileName: [1]cwchar_t
}
global FILE_NOTIFY_INFORMATION: type = @_FILE_NOTIFY_INFORMATION
global PFILE_NOTIFY_INFORMATION: type = @*_FILE_NOTIFY_INFORMATION
global _FILE_SEGMENT_ELEMENT: type <cimport,nodecl,ctypedef> = @union{
  Buffer: PVOID64,
  Alignment: culonglong
}
global FILE_SEGMENT_ELEMENT: type = @_FILE_SEGMENT_ELEMENT
global PFILE_SEGMENT_ELEMENT: type = @*_FILE_SEGMENT_ELEMENT
global _REPARSE_GUID_DATA_BUFFER: type <cimport,nodecl,ctypedef> = @record{
  ReparseTag: culong,
  ReparseDataLength: cushort,
  Reserved: cushort,
  ReparseGuid: GUID,
  GenericReparseBuffer: record{
    DataBuffer: [1]cuchar
  }
}
global REPARSE_GUID_DATA_BUFFER: type = @_REPARSE_GUID_DATA_BUFFER
global PREPARSE_GUID_DATA_BUFFER: type = @*_REPARSE_GUID_DATA_BUFFER
global GUID_MAX_POWER_SAVINGS: GUID <cimport,nodecl>
global GUID_MIN_POWER_SAVINGS: GUID <cimport,nodecl>
global GUID_TYPICAL_POWER_SAVINGS: GUID <cimport,nodecl>
global NO_SUBGROUP_GUID: GUID <cimport,nodecl>
global ALL_POWERSCHEMES_GUID: GUID <cimport,nodecl>
global GUID_POWERSCHEME_PERSONALITY: GUID <cimport,nodecl>
global GUID_ACTIVE_POWERSCHEME: GUID <cimport,nodecl>
global GUID_IDLE_RESILIENCY_SUBGROUP: GUID <cimport,nodecl>
global GUID_IDLE_RESILIENCY_PERIOD: GUID <cimport,nodecl>
global GUID_DISK_COALESCING_POWERDOWN_TIMEOUT: GUID <cimport,nodecl>
global GUID_EXECUTION_REQUIRED_REQUEST_TIMEOUT: GUID <cimport,nodecl>
global GUID_VIDEO_SUBGROUP: GUID <cimport,nodecl>
global GUID_VIDEO_POWERDOWN_TIMEOUT: GUID <cimport,nodecl>
global GUID_VIDEO_ANNOYANCE_TIMEOUT: GUID <cimport,nodecl>
global GUID_VIDEO_ADAPTIVE_PERCENT_INCREASE: GUID <cimport,nodecl>
global GUID_VIDEO_DIM_TIMEOUT: GUID <cimport,nodecl>
global GUID_VIDEO_ADAPTIVE_POWERDOWN: GUID <cimport,nodecl>
global GUID_MONITOR_POWER_ON: GUID <cimport,nodecl>
global GUID_DEVICE_POWER_POLICY_VIDEO_BRIGHTNESS: GUID <cimport,nodecl>
global GUID_DEVICE_POWER_POLICY_VIDEO_DIM_BRIGHTNESS: GUID <cimport,nodecl>
global GUID_VIDEO_CURRENT_MONITOR_BRIGHTNESS: GUID <cimport,nodecl>
global GUID_VIDEO_ADAPTIVE_DISPLAY_BRIGHTNESS: GUID <cimport,nodecl>
global GUID_CONSOLE_DISPLAY_STATE: GUID <cimport,nodecl>
global GUID_ALLOW_DISPLAY_REQUIRED: GUID <cimport,nodecl>
global GUID_VIDEO_CONSOLE_LOCK_TIMEOUT: GUID <cimport,nodecl>
global GUID_ADAPTIVE_POWER_BEHAVIOR_SUBGROUP: GUID <cimport,nodecl>
global GUID_NON_ADAPTIVE_INPUT_TIMEOUT: GUID <cimport,nodecl>
global GUID_DISK_SUBGROUP: GUID <cimport,nodecl>
global GUID_DISK_POWERDOWN_TIMEOUT: GUID <cimport,nodecl>
global GUID_DISK_IDLE_TIMEOUT: GUID <cimport,nodecl>
global GUID_DISK_BURST_IGNORE_THRESHOLD: GUID <cimport,nodecl>
global GUID_DISK_ADAPTIVE_POWERDOWN: GUID <cimport,nodecl>
global GUID_SLEEP_SUBGROUP: GUID <cimport,nodecl>
global GUID_SLEEP_IDLE_THRESHOLD: GUID <cimport,nodecl>
global GUID_STANDBY_TIMEOUT: GUID <cimport,nodecl>
global GUID_UNATTEND_SLEEP_TIMEOUT: GUID <cimport,nodecl>
global GUID_HIBERNATE_TIMEOUT: GUID <cimport,nodecl>
global GUID_HIBERNATE_FASTS4_POLICY: GUID <cimport,nodecl>
global GUID_CRITICAL_POWER_TRANSITION: GUID <cimport,nodecl>
global GUID_SYSTEM_AWAYMODE: GUID <cimport,nodecl>
global GUID_ALLOW_AWAYMODE: GUID <cimport,nodecl>
global GUID_ALLOW_STANDBY_STATES: GUID <cimport,nodecl>
global GUID_ALLOW_RTC_WAKE: GUID <cimport,nodecl>
global GUID_ALLOW_SYSTEM_REQUIRED: GUID <cimport,nodecl>
global GUID_SYSTEM_BUTTON_SUBGROUP: GUID <cimport,nodecl>
global GUID_POWERBUTTON_ACTION: GUID <cimport,nodecl>
global GUID_SLEEPBUTTON_ACTION: GUID <cimport,nodecl>
global GUID_USERINTERFACEBUTTON_ACTION: GUID <cimport,nodecl>
global GUID_LIDCLOSE_ACTION: GUID <cimport,nodecl>
global GUID_LIDOPEN_POWERSTATE: GUID <cimport,nodecl>
global GUID_BATTERY_SUBGROUP: GUID <cimport,nodecl>
global GUID_BATTERY_DISCHARGE_ACTION_0: GUID <cimport,nodecl>
global GUID_BATTERY_DISCHARGE_LEVEL_0: GUID <cimport,nodecl>
global GUID_BATTERY_DISCHARGE_FLAGS_0: GUID <cimport,nodecl>
global GUID_BATTERY_DISCHARGE_ACTION_1: GUID <cimport,nodecl>
global GUID_BATTERY_DISCHARGE_LEVEL_1: GUID <cimport,nodecl>
global GUID_BATTERY_DISCHARGE_FLAGS_1: GUID <cimport,nodecl>
global GUID_BATTERY_DISCHARGE_ACTION_2: GUID <cimport,nodecl>
global GUID_BATTERY_DISCHARGE_LEVEL_2: GUID <cimport,nodecl>
global GUID_BATTERY_DISCHARGE_FLAGS_2: GUID <cimport,nodecl>
global GUID_BATTERY_DISCHARGE_ACTION_3: GUID <cimport,nodecl>
global GUID_BATTERY_DISCHARGE_LEVEL_3: GUID <cimport,nodecl>
global GUID_BATTERY_DISCHARGE_FLAGS_3: GUID <cimport,nodecl>
global GUID_PROCESSOR_SETTINGS_SUBGROUP: GUID <cimport,nodecl>
global GUID_PROCESSOR_THROTTLE_POLICY: GUID <cimport,nodecl>
global GUID_PROCESSOR_THROTTLE_MAXIMUM: GUID <cimport,nodecl>
global GUID_PROCESSOR_THROTTLE_MINIMUM: GUID <cimport,nodecl>
global GUID_PROCESSOR_ALLOW_THROTTLING: GUID <cimport,nodecl>
global GUID_PROCESSOR_IDLESTATE_POLICY: GUID <cimport,nodecl>
global GUID_PROCESSOR_PERFSTATE_POLICY: GUID <cimport,nodecl>
global GUID_PROCESSOR_PERF_INCREASE_THRESHOLD: GUID <cimport,nodecl>
global GUID_PROCESSOR_PERF_DECREASE_THRESHOLD: GUID <cimport,nodecl>
global GUID_PROCESSOR_PERF_INCREASE_POLICY: GUID <cimport,nodecl>
global GUID_PROCESSOR_PERF_DECREASE_POLICY: GUID <cimport,nodecl>
global GUID_PROCESSOR_PERF_INCREASE_TIME: GUID <cimport,nodecl>
global GUID_PROCESSOR_PERF_DECREASE_TIME: GUID <cimport,nodecl>
global GUID_PROCESSOR_PERF_TIME_CHECK: GUID <cimport,nodecl>
global GUID_PROCESSOR_PERF_BOOST_POLICY: GUID <cimport,nodecl>
global GUID_PROCESSOR_PERF_BOOST_MODE: GUID <cimport,nodecl>
global GUID_PROCESSOR_IDLE_ALLOW_SCALING: GUID <cimport,nodecl>
global GUID_PROCESSOR_IDLE_DISABLE: GUID <cimport,nodecl>
global GUID_PROCESSOR_IDLE_STATE_MAXIMUM: GUID <cimport,nodecl>
global GUID_PROCESSOR_IDLE_TIME_CHECK: GUID <cimport,nodecl>
global GUID_PROCESSOR_IDLE_DEMOTE_THRESHOLD: GUID <cimport,nodecl>
global GUID_PROCESSOR_IDLE_PROMOTE_THRESHOLD: GUID <cimport,nodecl>
global GUID_PROCESSOR_CORE_PARKING_INCREASE_THRESHOLD: GUID <cimport,nodecl>
global GUID_PROCESSOR_CORE_PARKING_DECREASE_THRESHOLD: GUID <cimport,nodecl>
global GUID_PROCESSOR_CORE_PARKING_INCREASE_POLICY: GUID <cimport,nodecl>
global GUID_PROCESSOR_CORE_PARKING_DECREASE_POLICY: GUID <cimport,nodecl>
global GUID_PROCESSOR_CORE_PARKING_MAX_CORES: GUID <cimport,nodecl>
global GUID_PROCESSOR_CORE_PARKING_MIN_CORES: GUID <cimport,nodecl>
global GUID_PROCESSOR_CORE_PARKING_INCREASE_TIME: GUID <cimport,nodecl>
global GUID_PROCESSOR_CORE_PARKING_DECREASE_TIME: GUID <cimport,nodecl>
global GUID_PROCESSOR_CORE_PARKING_AFFINITY_HISTORY_DECREASE_FACTOR: GUID <cimport,nodecl>
global GUID_PROCESSOR_CORE_PARKING_AFFINITY_HISTORY_THRESHOLD: GUID <cimport,nodecl>
global GUID_PROCESSOR_CORE_PARKING_AFFINITY_WEIGHTING: GUID <cimport,nodecl>
global GUID_PROCESSOR_CORE_PARKING_OVER_UTILIZATION_HISTORY_DECREASE_FACTOR: GUID <cimport,nodecl>
global GUID_PROCESSOR_CORE_PARKING_OVER_UTILIZATION_HISTORY_THRESHOLD: GUID <cimport,nodecl>
global GUID_PROCESSOR_CORE_PARKING_OVER_UTILIZATION_WEIGHTING: GUID <cimport,nodecl>
global GUID_PROCESSOR_CORE_PARKING_OVER_UTILIZATION_THRESHOLD: GUID <cimport,nodecl>
global GUID_PROCESSOR_PARKING_CORE_OVERRIDE: GUID <cimport,nodecl>
global GUID_PROCESSOR_PARKING_PERF_STATE: GUID <cimport,nodecl>
global GUID_PROCESSOR_PARKING_CONCURRENCY_THRESHOLD: GUID <cimport,nodecl>
global GUID_PROCESSOR_PARKING_HEADROOM_THRESHOLD: GUID <cimport,nodecl>
global GUID_PROCESSOR_PERF_HISTORY: GUID <cimport,nodecl>
global GUID_PROCESSOR_PERF_LATENCY_HINT: GUID <cimport,nodecl>
global GUID_PROCESSOR_DISTRIBUTE_UTILITY: GUID <cimport,nodecl>
global GUID_SYSTEM_COOLING_POLICY: GUID <cimport,nodecl>
global GUID_LOCK_CONSOLE_ON_WAKE: GUID <cimport,nodecl>
global GUID_DEVICE_IDLE_POLICY: GUID <cimport,nodecl>
global GUID_ACDC_POWER_SOURCE: GUID <cimport,nodecl>
global GUID_LIDSWITCH_STATE_CHANGE: GUID <cimport,nodecl>
global GUID_BATTERY_PERCENTAGE_REMAINING: GUID <cimport,nodecl>
global GUID_GLOBAL_USER_PRESENCE: GUID <cimport,nodecl>
global GUID_SESSION_DISPLAY_STATUS: GUID <cimport,nodecl>
global GUID_SESSION_USER_PRESENCE: GUID <cimport,nodecl>
global GUID_IDLE_BACKGROUND_TASK: GUID <cimport,nodecl>
global GUID_BACKGROUND_TASK_NOTIFICATION: GUID <cimport,nodecl>
global GUID_APPLAUNCH_BUTTON: GUID <cimport,nodecl>
global GUID_PCIEXPRESS_SETTINGS_SUBGROUP: GUID <cimport,nodecl>
global GUID_PCIEXPRESS_ASPM_POLICY: GUID <cimport,nodecl>
global GUID_ENABLE_SWITCH_FORCED_SHUTDOWN: GUID <cimport,nodecl>
global _SYSTEM_POWER_STATE: type <cimport,nodecl,using,ctypedef> = @enum(cint){
  PowerSystemUnspecified = 0,
  PowerSystemWorking = 1,
  PowerSystemSleeping1 = 2,
  PowerSystemSleeping2 = 3,
  PowerSystemSleeping3 = 4,
  PowerSystemHibernate = 5,
  PowerSystemShutdown = 6,
  PowerSystemMaximum = 7
}
global SYSTEM_POWER_STATE: type = @_SYSTEM_POWER_STATE
global PSYSTEM_POWER_STATE: type = @*_SYSTEM_POWER_STATE
global POWER_ACTION: type <cimport,nodecl,using> = @enum(cint){
  PowerActionNone = 0,
  PowerActionReserved = 1,
  PowerActionSleep = 2,
  PowerActionHibernate = 3,
  PowerActionShutdown = 4,
  PowerActionShutdownReset = 5,
  PowerActionShutdownOff = 6,
  PowerActionWarmEject = 7
}
global PPOWER_ACTION: type = @*cint
global _DEVICE_POWER_STATE: type <cimport,nodecl,using,ctypedef> = @enum(cint){
  PowerDeviceUnspecified = 0,
  PowerDeviceD0 = 1,
  PowerDeviceD1 = 2,
  PowerDeviceD2 = 3,
  PowerDeviceD3 = 4,
  PowerDeviceMaximum = 5
}
global DEVICE_POWER_STATE: type = @_DEVICE_POWER_STATE
global PDEVICE_POWER_STATE: type = @*_DEVICE_POWER_STATE
global _MONITOR_DISPLAY_STATE: type <cimport,nodecl,using,ctypedef> = @enum(cint){
  PowerMonitorOff = 0,
  PowerMonitorOn = 1,
  PowerMonitorDim = 2
}
global MONITOR_DISPLAY_STATE: type = @_MONITOR_DISPLAY_STATE
global PMONITOR_DISPLAY_STATE: type = @*_MONITOR_DISPLAY_STATE
global _USER_ACTIVITY_PRESENCE: type <cimport,nodecl,using,ctypedef> = @enum(cint){
  PowerUserPresent = 0,
  PowerUserNotPresent = 1,
  PowerUserInactive = 2,
  PowerUserMaximum = 3,
  PowerUserInvalid = 3
}
global USER_ACTIVITY_PRESENCE: type = @_USER_ACTIVITY_PRESENCE
global PUSER_ACTIVITY_PRESENCE: type = @*_USER_ACTIVITY_PRESENCE
global PEXECUTION_STATE: type = @*culong
global LATENCY_TIME: type <cimport,nodecl,using> = @enum(cint){
  LT_DONT_CARE = 0,
  LT_LOWEST_LATENCY = 1
}
global _POWER_REQUEST_TYPE: type <cimport,nodecl,using,ctypedef> = @enum(cint){
  PowerRequestDisplayRequired = 0,
  PowerRequestSystemRequired = 1,
  PowerRequestAwayModeRequired = 2,
  PowerRequestExecutionRequired = 3
}
global POWER_REQUEST_TYPE: type = @_POWER_REQUEST_TYPE
global PPOWER_REQUEST_TYPE: type = @*_POWER_REQUEST_TYPE
global CM_Power_Data_s: type <cimport,nodecl,ctypedef> = @record{
  PD_Size: culong,
  PD_MostRecentPowerState: DEVICE_POWER_STATE,
  PD_Capabilities: culong,
  PD_D1Latency: culong,
  PD_D2Latency: culong,
  PD_D3Latency: culong,
  PD_PowerStateMapping: [7]DEVICE_POWER_STATE,
  PD_DeepestSystemWake: SYSTEM_POWER_STATE
}
global CM_POWER_DATA: type = @CM_Power_Data_s
global PCM_POWER_DATA: type = @*CM_Power_Data_s
global POWER_INFORMATION_LEVEL: type <cimport,nodecl,using> = @enum(cint){
  SystemPowerPolicyAc = 0,
  SystemPowerPolicyDc = 1,
  VerifySystemPolicyAc = 2,
  VerifySystemPolicyDc = 3,
  SystemPowerCapabilities = 4,
  SystemBatteryState = 5,
  SystemPowerStateHandler = 6,
  ProcessorStateHandler = 7,
  SystemPowerPolicyCurrent = 8,
  AdministratorPowerPolicy = 9,
  SystemReserveHiberFile = 10,
  ProcessorInformation = 11,
  SystemPowerInformation = 12,
  ProcessorStateHandler2 = 13,
  LastWakeTime = 14,
  LastSleepTime = 15,
  SystemExecutionState = 16,
  SystemPowerStateNotifyHandler = 17,
  ProcessorPowerPolicyAc = 18,
  ProcessorPowerPolicyDc = 19,
  VerifyProcessorPowerPolicyAc = 20,
  VerifyProcessorPowerPolicyDc = 21,
  ProcessorPowerPolicyCurrent = 22,
  SystemPowerStateLogging = 23,
  SystemPowerLoggingEntry = 24,
  SetPowerSettingValue = 25,
  NotifyUserPowerSetting = 26,
  PowerInformationLevelUnused0 = 27,
  SystemMonitorHiberBootPowerOff = 28,
  SystemVideoState = 29,
  TraceApplicationPowerMessage = 30,
  TraceApplicationPowerMessageEnd = 31,
  ProcessorPerfStates = 32,
  ProcessorIdleStates = 33,
  ProcessorCap = 34,
  SystemWakeSource = 35,
  SystemHiberFileInformation = 36,
  TraceServicePowerMessage = 37,
  ProcessorLoad = 38,
  PowerShutdownNotification = 39,
  MonitorCapabilities = 40,
  SessionPowerInit = 41,
  SessionDisplayState = 42,
  PowerRequestCreate = 43,
  PowerRequestAction = 44,
  GetPowerRequestList = 45,
  ProcessorInformationEx = 46,
  NotifyUserModeLegacyPowerEvent = 47,
  GroupPark = 48,
  ProcessorIdleDomains = 49,
  WakeTimerList = 50,
  SystemHiberFileSize = 51,
  ProcessorIdleStatesHv = 52,
  ProcessorPerfStatesHv = 53,
  ProcessorPerfCapHv = 54,
  ProcessorSetIdle = 55,
  LogicalProcessorIdling = 56,
  UserPresence = 57,
  PowerSettingNotificationName = 58,
  GetPowerSettingValue = 59,
  IdleResiliency = 60,
  SessionRITState = 61,
  SessionConnectNotification = 62,
  SessionPowerCleanup = 63,
  SessionLockState = 64,
  SystemHiberbootState = 65,
  PlatformInformation = 66,
  PdcInvocation = 67,
  MonitorInvocation = 68,
  FirmwareTableInformationRegistered = 69,
  SetShutdownSelectedTime = 70,
  SuspendResumeInvocation = 71,
  PlmPowerRequestCreate = 72,
  ScreenOff = 73,
  CsDeviceNotification = 74,
  PlatformRole = 75,
  LastResumePerformance = 76,
  DisplayBurst = 77,
  ExitLatencySamplingPercentage = 78,
  ApplyLowPowerScenarioSettings = 79,
  PowerInformationLevelMaximum = 80
}
global POWER_USER_PRESENCE_TYPE: type <cimport,nodecl,using> = @enum(cint){
  UserNotPresent = 0,
  UserPresent = 1,
  UserUnknown = 255
}
global PPOWER_USER_PRESENCE_TYPE: type = @*cint
global _POWER_USER_PRESENCE: type <cimport,nodecl,ctypedef> = @record{
  UserPresence: POWER_USER_PRESENCE_TYPE
}
global POWER_USER_PRESENCE: type = @_POWER_USER_PRESENCE
global PPOWER_USER_PRESENCE: type = @*_POWER_USER_PRESENCE
global _POWER_SESSION_CONNECT: type <cimport,nodecl,ctypedef> = @record{
  Connected: BOOLEAN,
  Console: BOOLEAN
}
global POWER_SESSION_CONNECT: type = @_POWER_SESSION_CONNECT
global PPOWER_SESSION_CONNECT: type = @*_POWER_SESSION_CONNECT
global _POWER_SESSION_TIMEOUTS: type <cimport,nodecl,ctypedef> = @record{
  InputTimeout: culong,
  DisplayTimeout: culong
}
global POWER_SESSION_TIMEOUTS: type = @_POWER_SESSION_TIMEOUTS
global PPOWER_SESSION_TIMEOUTS: type = @*_POWER_SESSION_TIMEOUTS
global _POWER_SESSION_RIT_STATE: type <cimport,nodecl,ctypedef> = @record{
  Active: BOOLEAN,
  LastInputTime: culong
}
global POWER_SESSION_RIT_STATE: type = @_POWER_SESSION_RIT_STATE
global PPOWER_SESSION_RIT_STATE: type = @*_POWER_SESSION_RIT_STATE
global _POWER_SESSION_WINLOGON: type <cimport,nodecl,ctypedef> = @record{
  SessionId: culong,
  Console: BOOLEAN,
  Locked: BOOLEAN
}
global POWER_SESSION_WINLOGON: type = @_POWER_SESSION_WINLOGON
global PPOWER_SESSION_WINLOGON: type = @*_POWER_SESSION_WINLOGON
global _POWER_IDLE_RESILIENCY: type <cimport,nodecl,ctypedef> = @record{
  CoalescingTimeout: culong,
  IdleResiliencyPeriod: culong
}
global POWER_IDLE_RESILIENCY: type = @_POWER_IDLE_RESILIENCY
global PPOWER_IDLE_RESILIENCY: type = @*_POWER_IDLE_RESILIENCY
global POWER_MONITOR_REQUEST_REASON: type <cimport,nodecl,using> = @enum(cint){
  MonitorRequestReasonUnknown = 0,
  MonitorRequestReasonPowerButton = 1,
  MonitorRequestReasonRemoteConnection = 2,
  MonitorRequestReasonScMonitorpower = 3,
  MonitorRequestReasonUserInput = 4,
  MonitorRequestReasonAcDcDisplayBurst = 5,
  MonitorRequestReasonUserDisplayBurst = 6,
  MonitorRequestReasonPoSetSystemState = 7,
  MonitorRequestReasonSetThreadExecutionState = 8,
  MonitorRequestReasonFullWake = 9,
  MonitorRequestReasonSessionUnlock = 10,
  MonitorRequestReasonScreenOffRequest = 11,
  MonitorRequestReasonIdleTimeout = 12,
  MonitorRequestReasonPolicyChange = 13,
  MonitorRequestReasonMax = 14
}
global _POWER_MONITOR_INVOCATION: type <cimport,nodecl,ctypedef> = @record{
  On: BOOLEAN,
  Console: BOOLEAN,
  RequestReason: POWER_MONITOR_REQUEST_REASON
}
global POWER_MONITOR_INVOCATION: type = @_POWER_MONITOR_INVOCATION
global PPOWER_MONITOR_INVOCATION: type = @*_POWER_MONITOR_INVOCATION
global _RESUME_PERFORMANCE: type <cimport,nodecl,ctypedef> = @record{
  PostTimeMs: culong,
  TotalResumeTimeMs: culonglong,
  ResumeCompleteTimestamp: culonglong
}
global RESUME_PERFORMANCE: type = @_RESUME_PERFORMANCE
global PRESUME_PERFORMANCE: type = @*_RESUME_PERFORMANCE
global SYSTEM_POWER_CONDITION: type <cimport,nodecl,using> = @enum(cint){
  PoAc = 0,
  PoDc = 1,
  PoHot = 2,
  PoConditionMaximum = 3
}
global SET_POWER_SETTING_VALUE: type <cimport,nodecl> = @record{
  Version: culong,
  Guid: GUID,
  PowerCondition: SYSTEM_POWER_CONDITION,
  DataLength: culong,
  Data: [1]cuchar
}
global PSET_POWER_SETTING_VALUE: type = @*record{
  Version: culong,
  Guid: GUID,
  PowerCondition: SYSTEM_POWER_CONDITION,
  DataLength: culong,
  Data: [1]cuchar
}
global NOTIFY_USER_POWER_SETTING: type <cimport,nodecl> = @record{
  Guid: GUID
}
global PNOTIFY_USER_POWER_SETTING: type = @*record{
  Guid: GUID
}
global _APPLICATIONLAUNCH_SETTING_VALUE: type <cimport,nodecl,ctypedef> = @record{
  ActivationTime: LARGE_INTEGER,
  Flags: culong,
  ButtonInstanceID: culong
}
global APPLICATIONLAUNCH_SETTING_VALUE: type = @_APPLICATIONLAUNCH_SETTING_VALUE
global PAPPLICATIONLAUNCH_SETTING_VALUE: type = @*_APPLICATIONLAUNCH_SETTING_VALUE
global _POWER_PLATFORM_ROLE: type <cimport,nodecl,using,ctypedef> = @enum(cint){
  PlatformRoleUnspecified = 0,
  PlatformRoleDesktop = 1,
  PlatformRoleMobile = 2,
  PlatformRoleWorkstation = 3,
  PlatformRoleEnterpriseServer = 4,
  PlatformRoleSOHOServer = 5,
  PlatformRoleAppliancePC = 6,
  PlatformRolePerformanceServer = 7,
  PlatformRoleSlate = 8,
  PlatformRoleMaximum = 9
}
global POWER_PLATFORM_ROLE: type = @_POWER_PLATFORM_ROLE
global PPOWER_PLATFORM_ROLE: type = @*_POWER_PLATFORM_ROLE
global _POWER_PLATFORM_INFORMATION: type <cimport,nodecl,ctypedef> = @record{
  AoAc: BOOLEAN
}
global POWER_PLATFORM_INFORMATION: type = @_POWER_PLATFORM_INFORMATION
global PPOWER_PLATFORM_INFORMATION: type = @*_POWER_PLATFORM_INFORMATION
global BATTERY_REPORTING_SCALE: type <cimport,nodecl> = @record{
  Granularity: culong,
  Capacity: culong
}
global PBATTERY_REPORTING_SCALE: type = @*record{
  Granularity: culong,
  Capacity: culong
}
global PPM_WMI_LEGACY_PERFSTATE: type <cimport,nodecl> = @record{
  Frequency: culong,
  Flags: culong,
  PercentFrequency: culong
}
global PPPM_WMI_LEGACY_PERFSTATE: type = @*record{
  Frequency: culong,
  Flags: culong,
  PercentFrequency: culong
}
global PPM_WMI_IDLE_STATE: type <cimport,nodecl> = @record{
  Latency: culong,
  Power: culong,
  TimeCheck: culong,
  PromotePercent: cuchar,
  DemotePercent: cuchar,
  StateType: cuchar,
  Reserved: cuchar,
  StateFlags: culong,
  Context: culong,
  IdleHandler: culong,
  Reserved1: culong
}
global PPPM_WMI_IDLE_STATE: type = @*record{
  Latency: culong,
  Power: culong,
  TimeCheck: culong,
  PromotePercent: cuchar,
  DemotePercent: cuchar,
  StateType: cuchar,
  Reserved: cuchar,
  StateFlags: culong,
  Context: culong,
  IdleHandler: culong,
  Reserved1: culong
}
global PPM_WMI_IDLE_STATES: type <cimport,nodecl> = @record{
  Type: culong,
  Count: culong,
  TargetState: culong,
  OldState: culong,
  TargetProcessors: culonglong,
  State: [1]PPM_WMI_IDLE_STATE
}
global PPPM_WMI_IDLE_STATES: type = @*record{
  Type: culong,
  Count: culong,
  TargetState: culong,
  OldState: culong,
  TargetProcessors: culonglong,
  State: [1]PPM_WMI_IDLE_STATE
}
global PPM_WMI_IDLE_STATES_EX: type <cimport,nodecl> = @record{
  Type: culong,
  Count: culong,
  TargetState: culong,
  OldState: culong,
  TargetProcessors: PVOID,
  State: [1]PPM_WMI_IDLE_STATE
}
global PPPM_WMI_IDLE_STATES_EX: type = @*record{
  Type: culong,
  Count: culong,
  TargetState: culong,
  OldState: culong,
  TargetProcessors: PVOID,
  State: [1]PPM_WMI_IDLE_STATE
}
global PPM_WMI_PERF_STATE: type <cimport,nodecl> = @record{
  Frequency: culong,
  Power: culong,
  PercentFrequency: cuchar,
  IncreaseLevel: cuchar,
  DecreaseLevel: cuchar,
  Type: cuchar,
  IncreaseTime: culong,
  DecreaseTime: culong,
  Control: culonglong,
  Status: culonglong,
  HitCount: culong,
  Reserved1: culong,
  Reserved2: culonglong,
  Reserved3: culonglong
}
global PPPM_WMI_PERF_STATE: type = @*record{
  Frequency: culong,
  Power: culong,
  PercentFrequency: cuchar,
  IncreaseLevel: cuchar,
  DecreaseLevel: cuchar,
  Type: cuchar,
  IncreaseTime: culong,
  DecreaseTime: culong,
  Control: culonglong,
  Status: culonglong,
  HitCount: culong,
  Reserved1: culong,
  Reserved2: culonglong,
  Reserved3: culonglong
}
global PPM_WMI_PERF_STATES: type <cimport,nodecl> = @record{
  Count: culong,
  MaxFrequency: culong,
  CurrentState: culong,
  MaxPerfState: culong,
  MinPerfState: culong,
  LowestPerfState: culong,
  ThermalConstraint: culong,
  BusyAdjThreshold: cuchar,
  PolicyType: cuchar,
  Type: cuchar,
  Reserved: cuchar,
  TimerInterval: culong,
  TargetProcessors: culonglong,
  PStateHandler: culong,
  PStateContext: culong,
  TStateHandler: culong,
  TStateContext: culong,
  FeedbackHandler: culong,
  Reserved1: culong,
  Reserved2: culonglong,
  State: [1]PPM_WMI_PERF_STATE
}
global PPPM_WMI_PERF_STATES: type = @*record{
  Count: culong,
  MaxFrequency: culong,
  CurrentState: culong,
  MaxPerfState: culong,
  MinPerfState: culong,
  LowestPerfState: culong,
  ThermalConstraint: culong,
  BusyAdjThreshold: cuchar,
  PolicyType: cuchar,
  Type: cuchar,
  Reserved: cuchar,
  TimerInterval: culong,
  TargetProcessors: culonglong,
  PStateHandler: culong,
  PStateContext: culong,
  TStateHandler: culong,
  TStateContext: culong,
  FeedbackHandler: culong,
  Reserved1: culong,
  Reserved2: culonglong,
  State: [1]PPM_WMI_PERF_STATE
}
global PPM_WMI_PERF_STATES_EX: type <cimport,nodecl> = @record{
  Count: culong,
  MaxFrequency: culong,
  CurrentState: culong,
  MaxPerfState: culong,
  MinPerfState: culong,
  LowestPerfState: culong,
  ThermalConstraint: culong,
  BusyAdjThreshold: cuchar,
  PolicyType: cuchar,
  Type: cuchar,
  Reserved: cuchar,
  TimerInterval: culong,
  TargetProcessors: PVOID,
  PStateHandler: culong,
  PStateContext: culong,
  TStateHandler: culong,
  TStateContext: culong,
  FeedbackHandler: culong,
  Reserved1: culong,
  Reserved2: culonglong,
  State: [1]PPM_WMI_PERF_STATE
}
global PPPM_WMI_PERF_STATES_EX: type = @*record{
  Count: culong,
  MaxFrequency: culong,
  CurrentState: culong,
  MaxPerfState: culong,
  MinPerfState: culong,
  LowestPerfState: culong,
  ThermalConstraint: culong,
  BusyAdjThreshold: cuchar,
  PolicyType: cuchar,
  Type: cuchar,
  Reserved: cuchar,
  TimerInterval: culong,
  TargetProcessors: PVOID,
  PStateHandler: culong,
  PStateContext: culong,
  TStateHandler: culong,
  TStateContext: culong,
  FeedbackHandler: culong,
  Reserved1: culong,
  Reserved2: culonglong,
  State: [1]PPM_WMI_PERF_STATE
}
global PPM_IDLE_STATE_ACCOUNTING: type <cimport,nodecl> = @record{
  IdleTransitions: culong,
  FailedTransitions: culong,
  InvalidBucketIndex: culong,
  TotalTime: culonglong,
  IdleTimeBuckets: [6]culong
}
global PPPM_IDLE_STATE_ACCOUNTING: type = @*record{
  IdleTransitions: culong,
  FailedTransitions: culong,
  InvalidBucketIndex: culong,
  TotalTime: culonglong,
  IdleTimeBuckets: [6]culong
}
global PPM_IDLE_ACCOUNTING: type <cimport,nodecl> = @record{
  StateCount: culong,
  TotalTransitions: culong,
  ResetCount: culong,
  StartTime: culonglong,
  State: [1]PPM_IDLE_STATE_ACCOUNTING
}
global PPPM_IDLE_ACCOUNTING: type = @*record{
  StateCount: culong,
  TotalTransitions: culong,
  ResetCount: culong,
  StartTime: culonglong,
  State: [1]PPM_IDLE_STATE_ACCOUNTING
}
global PPM_IDLE_STATE_BUCKET_EX: type <cimport,nodecl> = @record{
  TotalTimeUs: culonglong,
  MinTimeUs: culong,
  MaxTimeUs: culong,
  Count: culong
}
global PPPM_IDLE_STATE_BUCKET_EX: type = @*record{
  TotalTimeUs: culonglong,
  MinTimeUs: culong,
  MaxTimeUs: culong,
  Count: culong
}
global PPM_IDLE_STATE_ACCOUNTING_EX: type <cimport,nodecl> = @record{
  TotalTime: culonglong,
  IdleTransitions: culong,
  FailedTransitions: culong,
  InvalidBucketIndex: culong,
  MinTimeUs: culong,
  MaxTimeUs: culong,
  CancelledTransitions: culong,
  IdleTimeBuckets: [16]PPM_IDLE_STATE_BUCKET_EX
}
global PPPM_IDLE_STATE_ACCOUNTING_EX: type = @*record{
  TotalTime: culonglong,
  IdleTransitions: culong,
  FailedTransitions: culong,
  InvalidBucketIndex: culong,
  MinTimeUs: culong,
  MaxTimeUs: culong,
  CancelledTransitions: culong,
  IdleTimeBuckets: [16]PPM_IDLE_STATE_BUCKET_EX
}
global PPM_IDLE_ACCOUNTING_EX: type <cimport,nodecl> = @record{
  StateCount: culong,
  TotalTransitions: culong,
  ResetCount: culong,
  AbortCount: culong,
  StartTime: culonglong,
  State: [1]PPM_IDLE_STATE_ACCOUNTING_EX
}
global PPPM_IDLE_ACCOUNTING_EX: type = @*record{
  StateCount: culong,
  TotalTransitions: culong,
  ResetCount: culong,
  AbortCount: culong,
  StartTime: culonglong,
  State: [1]PPM_IDLE_STATE_ACCOUNTING_EX
}
global PPM_PERFSTATE_EVENT: type <cimport,nodecl> = @record{
  State: culong,
  Status: culong,
  Latency: culong,
  Speed: culong,
  Processor: culong
}
global PPPM_PERFSTATE_EVENT: type = @*record{
  State: culong,
  Status: culong,
  Latency: culong,
  Speed: culong,
  Processor: culong
}
global PPM_PERFSTATE_DOMAIN_EVENT: type <cimport,nodecl> = @record{
  State: culong,
  Latency: culong,
  Speed: culong,
  Processors: culonglong
}
global PPPM_PERFSTATE_DOMAIN_EVENT: type = @*record{
  State: culong,
  Latency: culong,
  Speed: culong,
  Processors: culonglong
}
global PPM_IDLESTATE_EVENT: type <cimport,nodecl> = @record{
  NewState: culong,
  OldState: culong,
  Processors: culonglong
}
global PPPM_IDLESTATE_EVENT: type = @*record{
  NewState: culong,
  OldState: culong,
  Processors: culonglong
}
global PPM_THERMALCHANGE_EVENT: type <cimport,nodecl> = @record{
  ThermalConstraint: culong,
  Processors: culonglong
}
global PPPM_THERMALCHANGE_EVENT: type = @*record{
  ThermalConstraint: culong,
  Processors: culonglong
}
global PPM_THERMAL_POLICY_EVENT: type <cimport,nodecl> = @record{
  Mode: cuchar,
  Processors: culonglong
}
global PPPM_THERMAL_POLICY_EVENT: type = @*record{
  Mode: cuchar,
  Processors: culonglong
}
global PPM_PERFSTATE_CHANGE_GUID: GUID <cimport,nodecl>
global PPM_PERFSTATE_DOMAIN_CHANGE_GUID: GUID <cimport,nodecl>
global PPM_IDLESTATE_CHANGE_GUID: GUID <cimport,nodecl>
global PPM_PERFSTATES_DATA_GUID: GUID <cimport,nodecl>
global PPM_IDLESTATES_DATA_GUID: GUID <cimport,nodecl>
global PPM_IDLE_ACCOUNTING_GUID: GUID <cimport,nodecl>
global PPM_IDLE_ACCOUNTING_EX_GUID: GUID <cimport,nodecl>
global PPM_THERMALCONSTRAINT_GUID: GUID <cimport,nodecl>
global PPM_PERFMON_PERFSTATE_GUID: GUID <cimport,nodecl>
global PPM_THERMAL_POLICY_CHANGE_GUID: GUID <cimport,nodecl>
global POWER_ACTION_POLICY: type <cimport,nodecl> = @record{
  Action: POWER_ACTION,
  Flags: culong,
  EventCode: culong
}
global PPOWER_ACTION_POLICY: type = @*record{
  Action: POWER_ACTION,
  Flags: culong,
  EventCode: culong
}
global PROCESSOR_IDLESTATE_INFO: type <cimport,nodecl> = @record{
  TimeCheck: culong,
  DemotePercent: cuchar,
  PromotePercent: cuchar,
  Spare: [2]cuchar
}
global PPROCESSOR_IDLESTATE_INFO: type = @*record{
  TimeCheck: culong,
  DemotePercent: cuchar,
  PromotePercent: cuchar,
  Spare: [2]cuchar
}
global SYSTEM_POWER_LEVEL: type <cimport,nodecl> = @record{
  Enable: BOOLEAN,
  Spare: [3]cuchar,
  BatteryLevel: culong,
  PowerPolicy: POWER_ACTION_POLICY,
  MinSystemState: SYSTEM_POWER_STATE
}
global PSYSTEM_POWER_LEVEL: type = @*record{
  Enable: BOOLEAN,
  Spare: [3]cuchar,
  BatteryLevel: culong,
  PowerPolicy: POWER_ACTION_POLICY,
  MinSystemState: SYSTEM_POWER_STATE
}
global _SYSTEM_POWER_POLICY: type <cimport,nodecl,ctypedef> = @record{
  Revision: culong,
  PowerButton: POWER_ACTION_POLICY,
  SleepButton: POWER_ACTION_POLICY,
  LidClose: POWER_ACTION_POLICY,
  LidOpenWake: SYSTEM_POWER_STATE,
  Reserved: culong,
  Idle: POWER_ACTION_POLICY,
  IdleTimeout: culong,
  IdleSensitivity: cuchar,
  DynamicThrottle: cuchar,
  Spare2: [2]cuchar,
  MinSleep: SYSTEM_POWER_STATE,
  MaxSleep: SYSTEM_POWER_STATE,
  ReducedLatencySleep: SYSTEM_POWER_STATE,
  WinLogonFlags: culong,
  Spare3: culong,
  DozeS4Timeout: culong,
  BroadcastCapacityResolution: culong,
  DischargePolicy: [4]SYSTEM_POWER_LEVEL,
  VideoTimeout: culong,
  VideoDimDisplay: BOOLEAN,
  VideoReserved: [3]culong,
  SpindownTimeout: culong,
  OptimizeForPower: BOOLEAN,
  FanThrottleTolerance: cuchar,
  ForcedThrottle: cuchar,
  MinThrottle: cuchar,
  OverThrottled: POWER_ACTION_POLICY
}
global SYSTEM_POWER_POLICY: type = @_SYSTEM_POWER_POLICY
global PSYSTEM_POWER_POLICY: type = @*_SYSTEM_POWER_POLICY
global PROCESSOR_IDLESTATE_POLICY: type <cimport,nodecl> = @record{
  Revision: cushort,
  Flags: union{
    AsWORD: cushort,
    __unnamed1: record{
      AllowScaling: cushort,
      Disabled: cushort,
      Reserved: cushort
    }
  },
  PolicyCount: culong,
  Policy: [3]PROCESSOR_IDLESTATE_INFO
}
global PPROCESSOR_IDLESTATE_POLICY: type = @*record{
  Revision: cushort,
  Flags: union{
    AsWORD: cushort,
    __unnamed1: record{
      AllowScaling: cushort,
      Disabled: cushort,
      Reserved: cushort
    }
  },
  PolicyCount: culong,
  Policy: [3]PROCESSOR_IDLESTATE_INFO
}
global _PROCESSOR_POWER_POLICY_INFO: type <cimport,nodecl,cincomplete,ctypedef> = @record{
  TimeCheck: culong,
  DemoteLimit: culong,
  PromoteLimit: culong,
  DemotePercent: cuchar,
  PromotePercent: cuchar,
  Spare: [2]cuchar,
  AllowDemotion: culong,
  AllowPromotion: culong,
  Reserved: culong
}
global PROCESSOR_POWER_POLICY_INFO: type = @_PROCESSOR_POWER_POLICY_INFO
global PPROCESSOR_POWER_POLICY_INFO: type = @*_PROCESSOR_POWER_POLICY_INFO
global _PROCESSOR_POWER_POLICY: type <cimport,nodecl,cincomplete,ctypedef> = @record{
  Revision: culong,
  DynamicThrottle: cuchar,
  Spare: [3]cuchar,
  DisableCStates: culong,
  Reserved: culong,
  PolicyCount: culong,
  Policy: [3]PROCESSOR_POWER_POLICY_INFO
}
global PROCESSOR_POWER_POLICY: type = @_PROCESSOR_POWER_POLICY
global PPROCESSOR_POWER_POLICY: type = @*_PROCESSOR_POWER_POLICY
global PROCESSOR_PERFSTATE_POLICY: type <cimport,nodecl> = @record{
  Revision: culong,
  MaxThrottle: cuchar,
  MinThrottle: cuchar,
  BusyAdjThreshold: cuchar,
  __unnamed1: union{
    Spare: cuchar,
    Flags: union{
      AsBYTE: cuchar,
      __unnamed1: record{
        NoDomainAccounting: cuchar,
        IncreasePolicy: cuchar,
        DecreasePolicy: cuchar,
        Reserved: cuchar
      }
    }
  },
  TimeCheck: culong,
  IncreaseTime: culong,
  DecreaseTime: culong,
  IncreasePercent: culong,
  DecreasePercent: culong
}
global PPROCESSOR_PERFSTATE_POLICY: type = @*record{
  Revision: culong,
  MaxThrottle: cuchar,
  MinThrottle: cuchar,
  BusyAdjThreshold: cuchar,
  __unnamed1: union{
    Spare: cuchar,
    Flags: union{
      AsBYTE: cuchar,
      __unnamed1: record{
        NoDomainAccounting: cuchar,
        IncreasePolicy: cuchar,
        DecreasePolicy: cuchar,
        Reserved: cuchar
      }
    }
  },
  TimeCheck: culong,
  IncreaseTime: culong,
  DecreaseTime: culong,
  IncreasePercent: culong,
  DecreasePercent: culong
}
global _ADMINISTRATOR_POWER_POLICY: type <cimport,nodecl,ctypedef> = @record{
  MinSleep: SYSTEM_POWER_STATE,
  MaxSleep: SYSTEM_POWER_STATE,
  MinVideoTimeout: culong,
  MaxVideoTimeout: culong,
  MinSpindownTimeout: culong,
  MaxSpindownTimeout: culong
}
global ADMINISTRATOR_POWER_POLICY: type = @_ADMINISTRATOR_POWER_POLICY
global PADMINISTRATOR_POWER_POLICY: type = @*_ADMINISTRATOR_POWER_POLICY
global SYSTEM_POWER_CAPABILITIES: type <cimport,nodecl> = @record{
  PowerButtonPresent: BOOLEAN,
  SleepButtonPresent: BOOLEAN,
  LidPresent: BOOLEAN,
  SystemS1: BOOLEAN,
  SystemS2: BOOLEAN,
  SystemS3: BOOLEAN,
  SystemS4: BOOLEAN,
  SystemS5: BOOLEAN,
  HiberFilePresent: BOOLEAN,
  FullWake: BOOLEAN,
  VideoDimPresent: BOOLEAN,
  ApmPresent: BOOLEAN,
  UpsPresent: BOOLEAN,
  ThermalControl: BOOLEAN,
  ProcessorThrottle: BOOLEAN,
  ProcessorMinThrottle: cuchar,
  ProcessorMaxThrottle: cuchar,
  FastSystemS4: BOOLEAN,
  spare2: [3]cuchar,
  DiskSpinDown: BOOLEAN,
  spare3: [8]cuchar,
  SystemBatteriesPresent: BOOLEAN,
  BatteriesAreShortTerm: BOOLEAN,
  BatteryScale: [3]BATTERY_REPORTING_SCALE,
  AcOnLineWake: SYSTEM_POWER_STATE,
  SoftLidWake: SYSTEM_POWER_STATE,
  RtcWake: SYSTEM_POWER_STATE,
  MinDeviceWakeState: SYSTEM_POWER_STATE,
  DefaultLowLatencyWake: SYSTEM_POWER_STATE
}
global PSYSTEM_POWER_CAPABILITIES: type = @*record{
  PowerButtonPresent: BOOLEAN,
  SleepButtonPresent: BOOLEAN,
  LidPresent: BOOLEAN,
  SystemS1: BOOLEAN,
  SystemS2: BOOLEAN,
  SystemS3: BOOLEAN,
  SystemS4: BOOLEAN,
  SystemS5: BOOLEAN,
  HiberFilePresent: BOOLEAN,
  FullWake: BOOLEAN,
  VideoDimPresent: BOOLEAN,
  ApmPresent: BOOLEAN,
  UpsPresent: BOOLEAN,
  ThermalControl: BOOLEAN,
  ProcessorThrottle: BOOLEAN,
  ProcessorMinThrottle: cuchar,
  ProcessorMaxThrottle: cuchar,
  FastSystemS4: BOOLEAN,
  spare2: [3]cuchar,
  DiskSpinDown: BOOLEAN,
  spare3: [8]cuchar,
  SystemBatteriesPresent: BOOLEAN,
  BatteriesAreShortTerm: BOOLEAN,
  BatteryScale: [3]BATTERY_REPORTING_SCALE,
  AcOnLineWake: SYSTEM_POWER_STATE,
  SoftLidWake: SYSTEM_POWER_STATE,
  RtcWake: SYSTEM_POWER_STATE,
  MinDeviceWakeState: SYSTEM_POWER_STATE,
  DefaultLowLatencyWake: SYSTEM_POWER_STATE
}
global SYSTEM_BATTERY_STATE: type <cimport,nodecl> = @record{
  AcOnLine: BOOLEAN,
  BatteryPresent: BOOLEAN,
  Charging: BOOLEAN,
  Discharging: BOOLEAN,
  Spare1: [4]BOOLEAN,
  MaxCapacity: culong,
  RemainingCapacity: culong,
  Rate: culong,
  EstimatedTime: culong,
  DefaultAlert1: culong,
  DefaultAlert2: culong
}
global PSYSTEM_BATTERY_STATE: type = @*record{
  AcOnLine: BOOLEAN,
  BatteryPresent: BOOLEAN,
  Charging: BOOLEAN,
  Discharging: BOOLEAN,
  Spare1: [4]BOOLEAN,
  MaxCapacity: culong,
  RemainingCapacity: culong,
  Rate: culong,
  EstimatedTime: culong,
  DefaultAlert1: culong,
  DefaultAlert2: culong
}
global _IMAGE_DOS_HEADER: type <cimport,nodecl,ctypedef> = @record{
  e_magic: cushort,
  e_cblp: cushort,
  e_cp: cushort,
  e_crlc: cushort,
  e_cparhdr: cushort,
  e_minalloc: cushort,
  e_maxalloc: cushort,
  e_ss: cushort,
  e_sp: cushort,
  e_csum: cushort,
  e_ip: cushort,
  e_cs: cushort,
  e_lfarlc: cushort,
  e_ovno: cushort,
  e_res: [4]cushort,
  e_oemid: cushort,
  e_oeminfo: cushort,
  e_res2: [10]cushort,
  e_lfanew: clong
}
global IMAGE_DOS_HEADER: type = @_IMAGE_DOS_HEADER
global PIMAGE_DOS_HEADER: type = @*_IMAGE_DOS_HEADER
global _IMAGE_OS2_HEADER: type <cimport,nodecl,ctypedef> = @record{
  ne_magic: cushort,
  ne_ver: cchar,
  ne_rev: cchar,
  ne_enttab: cushort,
  ne_cbenttab: cushort,
  ne_crc: clong,
  ne_flags: cushort,
  ne_autodata: cushort,
  ne_heap: cushort,
  ne_stack: cushort,
  ne_csip: clong,
  ne_sssp: clong,
  ne_cseg: cushort,
  ne_cmod: cushort,
  ne_cbnrestab: cushort,
  ne_segtab: cushort,
  ne_rsrctab: cushort,
  ne_restab: cushort,
  ne_modtab: cushort,
  ne_imptab: cushort,
  ne_nrestab: clong,
  ne_cmovent: cushort,
  ne_align: cushort,
  ne_cres: cushort,
  ne_exetyp: cuchar,
  ne_flagsothers: cuchar,
  ne_pretthunks: cushort,
  ne_psegrefbytes: cushort,
  ne_swaparea: cushort,
  ne_expver: cushort
}
global IMAGE_OS2_HEADER: type = @_IMAGE_OS2_HEADER
global PIMAGE_OS2_HEADER: type = @*_IMAGE_OS2_HEADER
global _IMAGE_VXD_HEADER: type <cimport,nodecl,ctypedef> = @record{
  e32_magic: cushort,
  e32_border: cuchar,
  e32_worder: cuchar,
  e32_level: culong,
  e32_cpu: cushort,
  e32_os: cushort,
  e32_ver: culong,
  e32_mflags: culong,
  e32_mpages: culong,
  e32_startobj: culong,
  e32_eip: culong,
  e32_stackobj: culong,
  e32_esp: culong,
  e32_pagesize: culong,
  e32_lastpagesize: culong,
  e32_fixupsize: culong,
  e32_fixupsum: culong,
  e32_ldrsize: culong,
  e32_ldrsum: culong,
  e32_objtab: culong,
  e32_objcnt: culong,
  e32_objmap: culong,
  e32_itermap: culong,
  e32_rsrctab: culong,
  e32_rsrccnt: culong,
  e32_restab: culong,
  e32_enttab: culong,
  e32_dirtab: culong,
  e32_dircnt: culong,
  e32_fpagetab: culong,
  e32_frectab: culong,
  e32_impmod: culong,
  e32_impmodcnt: culong,
  e32_impproc: culong,
  e32_pagesum: culong,
  e32_datapage: culong,
  e32_preload: culong,
  e32_nrestab: culong,
  e32_cbnrestab: culong,
  e32_nressum: culong,
  e32_autodata: culong,
  e32_debuginfo: culong,
  e32_debuglen: culong,
  e32_instpreload: culong,
  e32_instdemand: culong,
  e32_heapsize: culong,
  e32_res3: [12]cuchar,
  e32_winresoff: culong,
  e32_winreslen: culong,
  e32_devid: cushort,
  e32_ddkver: cushort
}
global IMAGE_VXD_HEADER: type = @_IMAGE_VXD_HEADER
global PIMAGE_VXD_HEADER: type = @*_IMAGE_VXD_HEADER
global _IMAGE_FILE_HEADER: type <cimport,nodecl,ctypedef> = @record{
  Machine: cushort,
  NumberOfSections: cushort,
  TimeDateStamp: culong,
  PointerToSymbolTable: culong,
  NumberOfSymbols: culong,
  SizeOfOptionalHeader: cushort,
  Characteristics: cushort
}
global IMAGE_FILE_HEADER: type = @_IMAGE_FILE_HEADER
global PIMAGE_FILE_HEADER: type = @*_IMAGE_FILE_HEADER
global _IMAGE_DATA_DIRECTORY: type <cimport,nodecl,ctypedef> = @record{
  VirtualAddress: culong,
  Size: culong
}
global IMAGE_DATA_DIRECTORY: type = @_IMAGE_DATA_DIRECTORY
global PIMAGE_DATA_DIRECTORY: type = @*_IMAGE_DATA_DIRECTORY
global _IMAGE_OPTIONAL_HEADER: type <cimport,nodecl,ctypedef> = @record{
  Magic: cushort,
  MajorLinkerVersion: cuchar,
  MinorLinkerVersion: cuchar,
  SizeOfCode: culong,
  SizeOfInitializedData: culong,
  SizeOfUninitializedData: culong,
  AddressOfEntryPoint: culong,
  BaseOfCode: culong,
  BaseOfData: culong,
  ImageBase: culong,
  SectionAlignment: culong,
  FileAlignment: culong,
  MajorOperatingSystemVersion: cushort,
  MinorOperatingSystemVersion: cushort,
  MajorImageVersion: cushort,
  MinorImageVersion: cushort,
  MajorSubsystemVersion: cushort,
  MinorSubsystemVersion: cushort,
  Win32VersionValue: culong,
  SizeOfImage: culong,
  SizeOfHeaders: culong,
  CheckSum: culong,
  Subsystem: cushort,
  DllCharacteristics: cushort,
  SizeOfStackReserve: culong,
  SizeOfStackCommit: culong,
  SizeOfHeapReserve: culong,
  SizeOfHeapCommit: culong,
  LoaderFlags: culong,
  NumberOfRvaAndSizes: culong,
  DataDirectory: [16]IMAGE_DATA_DIRECTORY
}
global IMAGE_OPTIONAL_HEADER32: type = @_IMAGE_OPTIONAL_HEADER
global PIMAGE_OPTIONAL_HEADER32: type = @*_IMAGE_OPTIONAL_HEADER
global _IMAGE_ROM_OPTIONAL_HEADER: type <cimport,nodecl,ctypedef> = @record{
  Magic: cushort,
  MajorLinkerVersion: cuchar,
  MinorLinkerVersion: cuchar,
  SizeOfCode: culong,
  SizeOfInitializedData: culong,
  SizeOfUninitializedData: culong,
  AddressOfEntryPoint: culong,
  BaseOfCode: culong,
  BaseOfData: culong,
  BaseOfBss: culong,
  GprMask: culong,
  CprMask: [4]culong,
  GpValue: culong
}
global IMAGE_ROM_OPTIONAL_HEADER: type = @_IMAGE_ROM_OPTIONAL_HEADER
global PIMAGE_ROM_OPTIONAL_HEADER: type = @*_IMAGE_ROM_OPTIONAL_HEADER
global _IMAGE_OPTIONAL_HEADER64: type <cimport,nodecl,ctypedef> = @record{
  Magic: cushort,
  MajorLinkerVersion: cuchar,
  MinorLinkerVersion: cuchar,
  SizeOfCode: culong,
  SizeOfInitializedData: culong,
  SizeOfUninitializedData: culong,
  AddressOfEntryPoint: culong,
  BaseOfCode: culong,
  ImageBase: culonglong,
  SectionAlignment: culong,
  FileAlignment: culong,
  MajorOperatingSystemVersion: cushort,
  MinorOperatingSystemVersion: cushort,
  MajorImageVersion: cushort,
  MinorImageVersion: cushort,
  MajorSubsystemVersion: cushort,
  MinorSubsystemVersion: cushort,
  Win32VersionValue: culong,
  SizeOfImage: culong,
  SizeOfHeaders: culong,
  CheckSum: culong,
  Subsystem: cushort,
  DllCharacteristics: cushort,
  SizeOfStackReserve: culonglong,
  SizeOfStackCommit: culonglong,
  SizeOfHeapReserve: culonglong,
  SizeOfHeapCommit: culonglong,
  LoaderFlags: culong,
  NumberOfRvaAndSizes: culong,
  DataDirectory: [16]IMAGE_DATA_DIRECTORY
}
global IMAGE_OPTIONAL_HEADER64: type = @_IMAGE_OPTIONAL_HEADER64
global PIMAGE_OPTIONAL_HEADER64: type = @*_IMAGE_OPTIONAL_HEADER64
global IMAGE_OPTIONAL_HEADER: type = @_IMAGE_OPTIONAL_HEADER64
global PIMAGE_OPTIONAL_HEADER: type = @*_IMAGE_OPTIONAL_HEADER64
global _IMAGE_NT_HEADERS64: type <cimport,nodecl,ctypedef> = @record{
  Signature: culong,
  FileHeader: IMAGE_FILE_HEADER,
  OptionalHeader: IMAGE_OPTIONAL_HEADER64
}
global IMAGE_NT_HEADERS64: type = @_IMAGE_NT_HEADERS64
global PIMAGE_NT_HEADERS64: type = @*_IMAGE_NT_HEADERS64
global _IMAGE_NT_HEADERS: type <cimport,nodecl,ctypedef> = @record{
  Signature: culong,
  FileHeader: IMAGE_FILE_HEADER,
  OptionalHeader: IMAGE_OPTIONAL_HEADER32
}
global IMAGE_NT_HEADERS32: type = @_IMAGE_NT_HEADERS
global PIMAGE_NT_HEADERS32: type = @*_IMAGE_NT_HEADERS
global _IMAGE_ROM_HEADERS: type <cimport,nodecl,ctypedef> = @record{
  FileHeader: IMAGE_FILE_HEADER,
  OptionalHeader: IMAGE_ROM_OPTIONAL_HEADER
}
global IMAGE_ROM_HEADERS: type = @_IMAGE_ROM_HEADERS
global PIMAGE_ROM_HEADERS: type = @*_IMAGE_ROM_HEADERS
global IMAGE_NT_HEADERS: type = @_IMAGE_NT_HEADERS64
global PIMAGE_NT_HEADERS: type = @*_IMAGE_NT_HEADERS64
global ANON_OBJECT_HEADER: type <cimport,nodecl> = @record{
  Sig1: cushort,
  Sig2: cushort,
  Version: cushort,
  Machine: cushort,
  TimeDateStamp: culong,
  ClassID: CLSID,
  SizeOfData: culong
}
global ANON_OBJECT_HEADER_V2: type <cimport,nodecl> = @record{
  Sig1: cushort,
  Sig2: cushort,
  Version: cushort,
  Machine: cushort,
  TimeDateStamp: culong,
  ClassID: CLSID,
  SizeOfData: culong,
  Flags: culong,
  MetaDataSize: culong,
  MetaDataOffset: culong
}
global ANON_OBJECT_HEADER_BIGOBJ: type <cimport,nodecl> = @record{
  Sig1: cushort,
  Sig2: cushort,
  Version: cushort,
  Machine: cushort,
  TimeDateStamp: culong,
  ClassID: CLSID,
  SizeOfData: culong,
  Flags: culong,
  MetaDataSize: culong,
  MetaDataOffset: culong,
  NumberOfSections: culong,
  PointerToSymbolTable: culong,
  NumberOfSymbols: culong
}
global _IMAGE_SECTION_HEADER: type <cimport,nodecl,ctypedef> = @record{
  Name: [8]cuchar,
  Misc: union{
    PhysicalAddress: culong,
    VirtualSize: culong
  },
  VirtualAddress: culong,
  SizeOfRawData: culong,
  PointerToRawData: culong,
  PointerToRelocations: culong,
  PointerToLinenumbers: culong,
  NumberOfRelocations: cushort,
  NumberOfLinenumbers: cushort,
  Characteristics: culong
}
global IMAGE_SECTION_HEADER: type = @_IMAGE_SECTION_HEADER
global PIMAGE_SECTION_HEADER: type = @*_IMAGE_SECTION_HEADER
global _IMAGE_SYMBOL: type <cimport,nodecl,ctypedef> = @record{
  N: union{
    ShortName: [8]cuchar,
    Name: record{
      Short: culong,
      Long: culong
    },
    LongName: [2]culong
  },
  Value: culong,
  SectionNumber: cshort,
  Type: cushort,
  StorageClass: cuchar,
  NumberOfAuxSymbols: cuchar
}
global IMAGE_SYMBOL: type = @_IMAGE_SYMBOL
global PIMAGE_SYMBOL: type = @*IMAGE_SYMBOL
global _IMAGE_SYMBOL_EX: type <cimport,nodecl,ctypedef> = @record{
  N: union{
    ShortName: [8]cuchar,
    Name: record{
      Short: culong,
      Long: culong
    },
    LongName: [2]culong
  },
  Value: culong,
  SectionNumber: clong,
  Type: cushort,
  StorageClass: cuchar,
  NumberOfAuxSymbols: cuchar
}
global IMAGE_SYMBOL_EX: type = @_IMAGE_SYMBOL_EX
global PIMAGE_SYMBOL_EX: type = @*_IMAGE_SYMBOL_EX
global IMAGE_AUX_SYMBOL_TOKEN_DEF: type <cimport,nodecl> = @record{
  bAuxType: cuchar,
  bReserved: cuchar,
  SymbolTableIndex: culong,
  rgbReserved: [12]cuchar
}
global PIMAGE_AUX_SYMBOL_TOKEN_DEF: type = @*IMAGE_AUX_SYMBOL_TOKEN_DEF
global _IMAGE_AUX_SYMBOL: type <cimport,nodecl,ctypedef> = @union{
  Sym: record{
    TagIndex: culong,
    Misc: union{
      LnSz: record{
        Linenumber: cushort,
        Size: cushort
      },
      TotalSize: culong
    },
    FcnAry: union{
      Function: record{
        PointerToLinenumber: culong,
        PointerToNextFunction: culong
      },
      Array: record{
        Dimension: [4]cushort
      }
    },
    TvIndex: cushort
  },
  File: record{
    Name: [18]cuchar
  },
  Section: record{
    Length: culong,
    NumberOfRelocations: cushort,
    NumberOfLinenumbers: cushort,
    CheckSum: culong,
    Number: cshort,
    Selection: cuchar
  },
  TokenDef: IMAGE_AUX_SYMBOL_TOKEN_DEF,
  CRC: record{
    crc: culong,
    rgbReserved: [14]cuchar
  }
}
global IMAGE_AUX_SYMBOL: type = @_IMAGE_AUX_SYMBOL
global PIMAGE_AUX_SYMBOL: type = @*_IMAGE_AUX_SYMBOL
global _IMAGE_AUX_SYMBOL_EX: type <cimport,nodecl,ctypedef> = @union{
  Sym: record{
    WeakDefaultSymIndex: culong,
    WeakSearchType: culong,
    rgbReserved: [12]cuchar
  },
  File: record{
    Name: [36]cuchar
  },
  Section: record{
    Length: culong,
    NumberOfRelocations: cushort,
    NumberOfLinenumbers: cushort,
    CheckSum: culong,
    Number: cshort,
    Selection: cuchar,
    bReserved: cuchar,
    HighNumber: cshort,
    rgbReserved: [2]cuchar
  },
  __unnamed1: record{
    TokenDef: IMAGE_AUX_SYMBOL_TOKEN_DEF,
    rgbReserved: [2]cuchar
  },
  CRC: record{
    crc: culong,
    rgbReserved: [16]cuchar
  }
}
global IMAGE_AUX_SYMBOL_EX: type = @_IMAGE_AUX_SYMBOL_EX
global PIMAGE_AUX_SYMBOL_EX: type = @*_IMAGE_AUX_SYMBOL_EX
global IMAGE_AUX_SYMBOL_TYPE: type <cimport,nodecl,using> = @enum(cint){
  IMAGE_AUX_SYMBOL_TYPE_TOKEN_DEF = 1
}
global _IMAGE_RELOCATION: type <cimport,nodecl,ctypedef> = @record{
  __unnamed1: union{
    VirtualAddress: culong,
    RelocCount: culong
  },
  SymbolTableIndex: culong,
  Type: cushort
}
global IMAGE_RELOCATION: type = @_IMAGE_RELOCATION
global PIMAGE_RELOCATION: type = @*IMAGE_RELOCATION
global _IMAGE_LINENUMBER: type <cimport,nodecl,ctypedef> = @record{
  Type: union{
    SymbolTableIndex: culong,
    VirtualAddress: culong
  },
  Linenumber: cushort
}
global IMAGE_LINENUMBER: type = @_IMAGE_LINENUMBER
global PIMAGE_LINENUMBER: type = @*IMAGE_LINENUMBER
global _IMAGE_BASE_RELOCATION: type <cimport,nodecl,ctypedef> = @record{
  VirtualAddress: culong,
  SizeOfBlock: culong
}
global IMAGE_BASE_RELOCATION: type = @_IMAGE_BASE_RELOCATION
global PIMAGE_BASE_RELOCATION: type = @*IMAGE_BASE_RELOCATION
global _IMAGE_ARCHIVE_MEMBER_HEADER: type <cimport,nodecl,ctypedef> = @record{
  Name: [16]cuchar,
  Date: [12]cuchar,
  UserID: [6]cuchar,
  GroupID: [6]cuchar,
  Mode: [8]cuchar,
  Size: [10]cuchar,
  EndHeader: [2]cuchar
}
global IMAGE_ARCHIVE_MEMBER_HEADER: type = @_IMAGE_ARCHIVE_MEMBER_HEADER
global PIMAGE_ARCHIVE_MEMBER_HEADER: type = @*_IMAGE_ARCHIVE_MEMBER_HEADER
global _IMAGE_EXPORT_DIRECTORY: type <cimport,nodecl,ctypedef> = @record{
  Characteristics: culong,
  TimeDateStamp: culong,
  MajorVersion: cushort,
  MinorVersion: cushort,
  Name: culong,
  Base: culong,
  NumberOfFunctions: culong,
  NumberOfNames: culong,
  AddressOfFunctions: culong,
  AddressOfNames: culong,
  AddressOfNameOrdinals: culong
}
global IMAGE_EXPORT_DIRECTORY: type = @_IMAGE_EXPORT_DIRECTORY
global PIMAGE_EXPORT_DIRECTORY: type = @*_IMAGE_EXPORT_DIRECTORY
global _IMAGE_IMPORT_BY_NAME: type <cimport,nodecl,ctypedef> = @record{
  Hint: cushort,
  Name: [1]cchar
}
global IMAGE_IMPORT_BY_NAME: type = @_IMAGE_IMPORT_BY_NAME
global PIMAGE_IMPORT_BY_NAME: type = @*_IMAGE_IMPORT_BY_NAME
global _IMAGE_THUNK_DATA64: type <cimport,nodecl,ctypedef> = @record{
  u1: union{
    ForwarderString: culonglong,
    Function: culonglong,
    Ordinal: culonglong,
    AddressOfData: culonglong
  }
}
global IMAGE_THUNK_DATA64: type = @_IMAGE_THUNK_DATA64
global PIMAGE_THUNK_DATA64: type = @*IMAGE_THUNK_DATA64
global _IMAGE_THUNK_DATA32: type <cimport,nodecl,ctypedef> = @record{
  u1: union{
    ForwarderString: culong,
    Function: culong,
    Ordinal: culong,
    AddressOfData: culong
  }
}
global IMAGE_THUNK_DATA32: type = @_IMAGE_THUNK_DATA32
global PIMAGE_THUNK_DATA32: type = @*IMAGE_THUNK_DATA32
global PIMAGE_TLS_CALLBACK: type <cimport,nodecl> = @function(PVOID, culong, PVOID): void
global _IMAGE_TLS_DIRECTORY64: type <cimport,nodecl,ctypedef> = @record{
  StartAddressOfRawData: culonglong,
  EndAddressOfRawData: culonglong,
  AddressOfIndex: culonglong,
  AddressOfCallBacks: culonglong,
  SizeOfZeroFill: culong,
  Characteristics: culong
}
global IMAGE_TLS_DIRECTORY64: type = @_IMAGE_TLS_DIRECTORY64
global PIMAGE_TLS_DIRECTORY64: type = @*IMAGE_TLS_DIRECTORY64
global _IMAGE_TLS_DIRECTORY32: type <cimport,nodecl,ctypedef> = @record{
  StartAddressOfRawData: culong,
  EndAddressOfRawData: culong,
  AddressOfIndex: culong,
  AddressOfCallBacks: culong,
  SizeOfZeroFill: culong,
  Characteristics: culong
}
global IMAGE_TLS_DIRECTORY32: type = @_IMAGE_TLS_DIRECTORY32
global PIMAGE_TLS_DIRECTORY32: type = @*IMAGE_TLS_DIRECTORY32
global IMAGE_THUNK_DATA: type = @_IMAGE_THUNK_DATA64
global PIMAGE_THUNK_DATA: type = @*IMAGE_THUNK_DATA64
global IMAGE_TLS_DIRECTORY: type = @_IMAGE_TLS_DIRECTORY64
global PIMAGE_TLS_DIRECTORY: type = @*IMAGE_TLS_DIRECTORY64
global _IMAGE_IMPORT_DESCRIPTOR: type <cimport,nodecl,ctypedef> = @record{
  __unnamed1: union{
    Characteristics: culong,
    OriginalFirstThunk: culong
  },
  TimeDateStamp: culong,
  ForwarderChain: culong,
  Name: culong,
  FirstThunk: culong
}
global IMAGE_IMPORT_DESCRIPTOR: type = @_IMAGE_IMPORT_DESCRIPTOR
global PIMAGE_IMPORT_DESCRIPTOR: type = @*IMAGE_IMPORT_DESCRIPTOR
global _IMAGE_BOUND_IMPORT_DESCRIPTOR: type <cimport,nodecl,ctypedef> = @record{
  TimeDateStamp: culong,
  OffsetModuleName: cushort,
  NumberOfModuleForwarderRefs: cushort
}
global IMAGE_BOUND_IMPORT_DESCRIPTOR: type = @_IMAGE_BOUND_IMPORT_DESCRIPTOR
global PIMAGE_BOUND_IMPORT_DESCRIPTOR: type = @*_IMAGE_BOUND_IMPORT_DESCRIPTOR
global _IMAGE_BOUND_FORWARDER_REF: type <cimport,nodecl,ctypedef> = @record{
  TimeDateStamp: culong,
  OffsetModuleName: cushort,
  Reserved: cushort
}
global IMAGE_BOUND_FORWARDER_REF: type = @_IMAGE_BOUND_FORWARDER_REF
global PIMAGE_BOUND_FORWARDER_REF: type = @*_IMAGE_BOUND_FORWARDER_REF
global _IMAGE_DELAYLOAD_DESCRIPTOR: type <cimport,nodecl,ctypedef> = @record{
  Attributes: union{
    AllAttributes: culong,
    __unnamed1: record{
      RvaBased: culong,
      ReservedAttributes: culong
    }
  },
  DllNameRVA: culong,
  ModuleHandleRVA: culong,
  ImportAddressTableRVA: culong,
  ImportNameTableRVA: culong,
  BoundImportAddressTableRVA: culong,
  UnloadInformationTableRVA: culong,
  TimeDateStamp: culong
}
global IMAGE_DELAYLOAD_DESCRIPTOR: type = @_IMAGE_DELAYLOAD_DESCRIPTOR
global PIMAGE_DELAYLOAD_DESCRIPTOR: type = @*_IMAGE_DELAYLOAD_DESCRIPTOR
global PCIMAGE_DELAYLOAD_DESCRIPTOR: type = @*IMAGE_DELAYLOAD_DESCRIPTOR
global _IMAGE_RESOURCE_DIRECTORY: type <cimport,nodecl,ctypedef> = @record{
  Characteristics: culong,
  TimeDateStamp: culong,
  MajorVersion: cushort,
  MinorVersion: cushort,
  NumberOfNamedEntries: cushort,
  NumberOfIdEntries: cushort
}
global IMAGE_RESOURCE_DIRECTORY: type = @_IMAGE_RESOURCE_DIRECTORY
global PIMAGE_RESOURCE_DIRECTORY: type = @*_IMAGE_RESOURCE_DIRECTORY
global _IMAGE_RESOURCE_DIRECTORY_ENTRY: type <cimport,nodecl,ctypedef> = @record{
  __unnamed1: union{
    __unnamed1: record{
      NameOffset: culong,
      NameIsString: culong
    },
    Name: culong,
    Id: cushort
  },
  __unnamed2: union{
    OffsetToData: culong,
    __unnamed1: record{
      OffsetToDirectory: culong,
      DataIsDirectory: culong
    }
  }
}
global IMAGE_RESOURCE_DIRECTORY_ENTRY: type = @_IMAGE_RESOURCE_DIRECTORY_ENTRY
global PIMAGE_RESOURCE_DIRECTORY_ENTRY: type = @*_IMAGE_RESOURCE_DIRECTORY_ENTRY
global _IMAGE_RESOURCE_DIRECTORY_STRING: type <cimport,nodecl,ctypedef> = @record{
  Length: cushort,
  NameString: [1]cchar
}
global IMAGE_RESOURCE_DIRECTORY_STRING: type = @_IMAGE_RESOURCE_DIRECTORY_STRING
global PIMAGE_RESOURCE_DIRECTORY_STRING: type = @*_IMAGE_RESOURCE_DIRECTORY_STRING
global _IMAGE_RESOURCE_DIR_STRING_U: type <cimport,nodecl,ctypedef> = @record{
  Length: cushort,
  NameString: [1]cwchar_t
}
global IMAGE_RESOURCE_DIR_STRING_U: type = @_IMAGE_RESOURCE_DIR_STRING_U
global PIMAGE_RESOURCE_DIR_STRING_U: type = @*_IMAGE_RESOURCE_DIR_STRING_U
global _IMAGE_RESOURCE_DATA_ENTRY: type <cimport,nodecl,ctypedef> = @record{
  OffsetToData: culong,
  Size: culong,
  CodePage: culong,
  Reserved: culong
}
global IMAGE_RESOURCE_DATA_ENTRY: type = @_IMAGE_RESOURCE_DATA_ENTRY
global PIMAGE_RESOURCE_DATA_ENTRY: type = @*_IMAGE_RESOURCE_DATA_ENTRY
global IMAGE_LOAD_CONFIG_DIRECTORY32: type <cimport,nodecl> = @record{
  Size: culong,
  TimeDateStamp: culong,
  MajorVersion: cushort,
  MinorVersion: cushort,
  GlobalFlagsClear: culong,
  GlobalFlagsSet: culong,
  CriticalSectionDefaultTimeout: culong,
  DeCommitFreeBlockThreshold: culong,
  DeCommitTotalFreeThreshold: culong,
  LockPrefixTable: culong,
  MaximumAllocationSize: culong,
  VirtualMemoryThreshold: culong,
  ProcessHeapFlags: culong,
  ProcessAffinityMask: culong,
  CSDVersion: cushort,
  Reserved1: cushort,
  EditList: culong,
  SecurityCookie: culong,
  SEHandlerTable: culong,
  SEHandlerCount: culong
}
global PIMAGE_LOAD_CONFIG_DIRECTORY32: type = @*record{
  Size: culong,
  TimeDateStamp: culong,
  MajorVersion: cushort,
  MinorVersion: cushort,
  GlobalFlagsClear: culong,
  GlobalFlagsSet: culong,
  CriticalSectionDefaultTimeout: culong,
  DeCommitFreeBlockThreshold: culong,
  DeCommitTotalFreeThreshold: culong,
  LockPrefixTable: culong,
  MaximumAllocationSize: culong,
  VirtualMemoryThreshold: culong,
  ProcessHeapFlags: culong,
  ProcessAffinityMask: culong,
  CSDVersion: cushort,
  Reserved1: cushort,
  EditList: culong,
  SecurityCookie: culong,
  SEHandlerTable: culong,
  SEHandlerCount: culong
}
global IMAGE_LOAD_CONFIG_DIRECTORY64: type <cimport,nodecl> = @record{
  Size: culong,
  TimeDateStamp: culong,
  MajorVersion: cushort,
  MinorVersion: cushort,
  GlobalFlagsClear: culong,
  GlobalFlagsSet: culong,
  CriticalSectionDefaultTimeout: culong,
  DeCommitFreeBlockThreshold: culonglong,
  DeCommitTotalFreeThreshold: culonglong,
  LockPrefixTable: culonglong,
  MaximumAllocationSize: culonglong,
  VirtualMemoryThreshold: culonglong,
  ProcessAffinityMask: culonglong,
  ProcessHeapFlags: culong,
  CSDVersion: cushort,
  Reserved1: cushort,
  EditList: culonglong,
  SecurityCookie: culonglong,
  SEHandlerTable: culonglong,
  SEHandlerCount: culonglong
}
global PIMAGE_LOAD_CONFIG_DIRECTORY64: type = @*record{
  Size: culong,
  TimeDateStamp: culong,
  MajorVersion: cushort,
  MinorVersion: cushort,
  GlobalFlagsClear: culong,
  GlobalFlagsSet: culong,
  CriticalSectionDefaultTimeout: culong,
  DeCommitFreeBlockThreshold: culonglong,
  DeCommitTotalFreeThreshold: culonglong,
  LockPrefixTable: culonglong,
  MaximumAllocationSize: culonglong,
  VirtualMemoryThreshold: culonglong,
  ProcessAffinityMask: culonglong,
  ProcessHeapFlags: culong,
  CSDVersion: cushort,
  Reserved1: cushort,
  EditList: culonglong,
  SecurityCookie: culonglong,
  SEHandlerTable: culonglong,
  SEHandlerCount: culonglong
}
global IMAGE_LOAD_CONFIG_DIRECTORY: type = @IMAGE_LOAD_CONFIG_DIRECTORY64
global PIMAGE_LOAD_CONFIG_DIRECTORY: type = @*record{
  Size: culong,
  TimeDateStamp: culong,
  MajorVersion: cushort,
  MinorVersion: cushort,
  GlobalFlagsClear: culong,
  GlobalFlagsSet: culong,
  CriticalSectionDefaultTimeout: culong,
  DeCommitFreeBlockThreshold: culonglong,
  DeCommitTotalFreeThreshold: culonglong,
  LockPrefixTable: culonglong,
  MaximumAllocationSize: culonglong,
  VirtualMemoryThreshold: culonglong,
  ProcessAffinityMask: culonglong,
  ProcessHeapFlags: culong,
  CSDVersion: cushort,
  Reserved1: cushort,
  EditList: culonglong,
  SecurityCookie: culonglong,
  SEHandlerTable: culonglong,
  SEHandlerCount: culonglong
}
global _IMAGE_CE_RUNTIME_FUNCTION_ENTRY: type <cimport,nodecl,cincomplete,ctypedef> = @record{
  FuncStart: culong,
  PrologLen: cuchar,
  FuncLen: culong,
  ThirtyTwoBit: culong,
  ExceptionFlag: culong
}
global IMAGE_CE_RUNTIME_FUNCTION_ENTRY: type = @_IMAGE_CE_RUNTIME_FUNCTION_ENTRY
global PIMAGE_CE_RUNTIME_FUNCTION_ENTRY: type = @*_IMAGE_CE_RUNTIME_FUNCTION_ENTRY
global _IMAGE_ALPHA64_RUNTIME_FUNCTION_ENTRY: type <cimport,nodecl,ctypedef> = @record{
  BeginAddress: culonglong,
  EndAddress: culonglong,
  ExceptionHandler: culonglong,
  HandlerData: culonglong,
  PrologEndAddress: culonglong
}
global IMAGE_ALPHA64_RUNTIME_FUNCTION_ENTRY: type = @_IMAGE_ALPHA64_RUNTIME_FUNCTION_ENTRY
global PIMAGE_ALPHA64_RUNTIME_FUNCTION_ENTRY: type = @*_IMAGE_ALPHA64_RUNTIME_FUNCTION_ENTRY
global _IMAGE_ALPHA_RUNTIME_FUNCTION_ENTRY: type <cimport,nodecl,ctypedef> = @record{
  BeginAddress: culong,
  EndAddress: culong,
  ExceptionHandler: culong,
  HandlerData: culong,
  PrologEndAddress: culong
}
global IMAGE_ALPHA_RUNTIME_FUNCTION_ENTRY: type = @_IMAGE_ALPHA_RUNTIME_FUNCTION_ENTRY
global PIMAGE_ALPHA_RUNTIME_FUNCTION_ENTRY: type = @*_IMAGE_ALPHA_RUNTIME_FUNCTION_ENTRY
global _IMAGE_ARM_RUNTIME_FUNCTION_ENTRY: type <cimport,nodecl,ctypedef> = @record{
  BeginAddress: culong,
  __unnamed1: union{
    UnwindData: culong,
    __unnamed1: record{
      Flag: culong,
      FunctionLength: culong,
      Ret: culong,
      H: culong,
      Reg: culong,
      R: culong,
      L: culong,
      C: culong,
      StackAdjust: culong
    }
  }
}
global IMAGE_ARM_RUNTIME_FUNCTION_ENTRY: type = @_IMAGE_ARM_RUNTIME_FUNCTION_ENTRY
global PIMAGE_ARM_RUNTIME_FUNCTION_ENTRY: type = @*_IMAGE_ARM_RUNTIME_FUNCTION_ENTRY
global _IMAGE_ARM64_RUNTIME_FUNCTION_ENTRY: type <cimport,nodecl,ctypedef> = @record{
  BeginAddress: culong,
  __unnamed1: union{
    UnwindData: culong,
    __unnamed1: record{
      Flag: culong,
      FunctionLength: culong,
      RegF: culong,
      RegI: culong,
      H: culong,
      CR: culong,
      FrameSize: culong
    }
  }
}
global IMAGE_ARM64_RUNTIME_FUNCTION_ENTRY: type = @_IMAGE_ARM64_RUNTIME_FUNCTION_ENTRY
global PIMAGE_ARM64_RUNTIME_FUNCTION_ENTRY: type = @*_IMAGE_ARM64_RUNTIME_FUNCTION_ENTRY
global _IMAGE_RUNTIME_FUNCTION_ENTRY: type <cimport,nodecl> = @record{
  BeginAddress: culong,
  EndAddress: culong,
  __unnamed1: union{
    UnwindInfoAddress: culong,
    UnwindData: culong
  }
}
global _PIMAGE_RUNTIME_FUNCTION_ENTRY: type = @*_IMAGE_RUNTIME_FUNCTION_ENTRY
global IMAGE_IA64_RUNTIME_FUNCTION_ENTRY: type = @_IMAGE_RUNTIME_FUNCTION_ENTRY
global PIMAGE_IA64_RUNTIME_FUNCTION_ENTRY: type = @*_IMAGE_RUNTIME_FUNCTION_ENTRY
global IMAGE_RUNTIME_FUNCTION_ENTRY: type = @_IMAGE_RUNTIME_FUNCTION_ENTRY
global PIMAGE_RUNTIME_FUNCTION_ENTRY: type = @*_IMAGE_RUNTIME_FUNCTION_ENTRY
global _IMAGE_DEBUG_DIRECTORY: type <cimport,nodecl,ctypedef> = @record{
  Characteristics: culong,
  TimeDateStamp: culong,
  MajorVersion: cushort,
  MinorVersion: cushort,
  Type: culong,
  SizeOfData: culong,
  AddressOfRawData: culong,
  PointerToRawData: culong
}
global IMAGE_DEBUG_DIRECTORY: type = @_IMAGE_DEBUG_DIRECTORY
global PIMAGE_DEBUG_DIRECTORY: type = @*_IMAGE_DEBUG_DIRECTORY
global _IMAGE_COFF_SYMBOLS_HEADER: type <cimport,nodecl,ctypedef> = @record{
  NumberOfSymbols: culong,
  LvaToFirstSymbol: culong,
  NumberOfLinenumbers: culong,
  LvaToFirstLinenumber: culong,
  RvaToFirstByteOfCode: culong,
  RvaToLastByteOfCode: culong,
  RvaToFirstByteOfData: culong,
  RvaToLastByteOfData: culong
}
global IMAGE_COFF_SYMBOLS_HEADER: type = @_IMAGE_COFF_SYMBOLS_HEADER
global PIMAGE_COFF_SYMBOLS_HEADER: type = @*_IMAGE_COFF_SYMBOLS_HEADER
global _FPO_DATA: type <cimport,nodecl,cincomplete,ctypedef> = @record{
  ulOffStart: culong,
  cbProcSize: culong,
  cdwLocals: culong,
  cdwParams: cushort,
  cbProlog: cuchar,
  cbRegs: cushort,
  fHasSEH: cushort,
  fUseBP: cushort,
  reserved: cushort,
  cbFrame: cushort
}
global FPO_DATA: type = @_FPO_DATA
global PFPO_DATA: type = @*_FPO_DATA
global _IMAGE_DEBUG_MISC: type <cimport,nodecl,ctypedef> = @record{
  DataType: culong,
  Length: culong,
  Unicode: BOOLEAN,
  Reserved: [3]cuchar,
  Data: [1]cuchar
}
global IMAGE_DEBUG_MISC: type = @_IMAGE_DEBUG_MISC
global PIMAGE_DEBUG_MISC: type = @*_IMAGE_DEBUG_MISC
global _IMAGE_FUNCTION_ENTRY: type <cimport,nodecl,ctypedef> = @record{
  StartingAddress: culong,
  EndingAddress: culong,
  EndOfPrologue: culong
}
global IMAGE_FUNCTION_ENTRY: type = @_IMAGE_FUNCTION_ENTRY
global PIMAGE_FUNCTION_ENTRY: type = @*_IMAGE_FUNCTION_ENTRY
global _IMAGE_FUNCTION_ENTRY64: type <cimport,nodecl,ctypedef> = @record{
  StartingAddress: culonglong,
  EndingAddress: culonglong,
  __unnamed1: union{
    EndOfPrologue: culonglong,
    UnwindInfoAddress: culonglong
  }
}
global IMAGE_FUNCTION_ENTRY64: type = @_IMAGE_FUNCTION_ENTRY64
global PIMAGE_FUNCTION_ENTRY64: type = @*_IMAGE_FUNCTION_ENTRY64
global _IMAGE_SEPARATE_DEBUG_HEADER: type <cimport,nodecl,ctypedef> = @record{
  Signature: cushort,
  Flags: cushort,
  Machine: cushort,
  Characteristics: cushort,
  TimeDateStamp: culong,
  CheckSum: culong,
  ImageBase: culong,
  SizeOfImage: culong,
  NumberOfSections: culong,
  ExportedNamesSize: culong,
  DebugDirectorySize: culong,
  SectionAlignment: culong,
  Reserved: [2]culong
}
global IMAGE_SEPARATE_DEBUG_HEADER: type = @_IMAGE_SEPARATE_DEBUG_HEADER
global PIMAGE_SEPARATE_DEBUG_HEADER: type = @*_IMAGE_SEPARATE_DEBUG_HEADER
global _NON_PAGED_DEBUG_INFO: type <cimport,nodecl,ctypedef> = @record{
  Signature: cushort,
  Flags: cushort,
  Size: culong,
  Machine: cushort,
  Characteristics: cushort,
  TimeDateStamp: culong,
  CheckSum: culong,
  SizeOfImage: culong,
  ImageBase: culonglong
}
global NON_PAGED_DEBUG_INFO: type = @_NON_PAGED_DEBUG_INFO
global PNON_PAGED_DEBUG_INFO: type = @*_NON_PAGED_DEBUG_INFO
global _ImageArchitectureHeader: type <cimport,nodecl,cincomplete,ctypedef> = @record{
  AmaskValue: cuint,
  Adummy1: cint,
  AmaskShift: cuchar,
  Adummy2: cshort,
  FirstEntryRVA: culong
}
global IMAGE_ARCHITECTURE_HEADER: type = @_ImageArchitectureHeader
global PIMAGE_ARCHITECTURE_HEADER: type = @*_ImageArchitectureHeader
global _ImageArchitectureEntry: type <cimport,nodecl,ctypedef> = @record{
  FixupInstRVA: culong,
  NewInst: culong
}
global IMAGE_ARCHITECTURE_ENTRY: type = @_ImageArchitectureEntry
global PIMAGE_ARCHITECTURE_ENTRY: type = @*_ImageArchitectureEntry
global IMPORT_OBJECT_HEADER: type <cimport,nodecl,cincomplete> = @record{
  Sig1: cushort,
  Sig2: cushort,
  Version: cushort,
  Machine: cushort,
  TimeDateStamp: culong,
  SizeOfData: culong,
  __unnamed1: union{
    Ordinal: cushort,
    Hint: cushort
  },
  Type: cushort,
  NameType: cushort,
  Reserved: cushort
}
global IMPORT_OBJECT_TYPE: type <cimport,nodecl,using> = @enum(cint){
  IMPORT_OBJECT_CODE = 0,
  IMPORT_OBJECT_DATA = 1,
  IMPORT_OBJECT_CONST = 2
}
global IMPORT_OBJECT_NAME_TYPE: type <cimport,nodecl,using> = @enum(cint){
  IMPORT_OBJECT_ORDINAL = 0,
  IMPORT_OBJECT_NAME = 1,
  IMPORT_OBJECT_NAME_NO_PREFIX = 2,
  IMPORT_OBJECT_NAME_UNDECORATE = 3
}
global ReplacesCorHdrNumericDefines: type <cimport,nodecl,using> = @enum(cint){
  COMIMAGE_FLAGS_ILONLY = 1,
  COMIMAGE_FLAGS_32BITREQUIRED = 2,
  COMIMAGE_FLAGS_IL_LIBRARY = 4,
  COMIMAGE_FLAGS_STRONGNAMESIGNED = 8,
  COMIMAGE_FLAGS_TRACKDEBUGDATA = 65536,
  COR_VERSION_MAJOR_V2 = 2,
  COR_VERSION_MAJOR = 2,
  COR_VERSION_MINOR = 0,
  COR_DELETED_NAME_LENGTH = 8,
  COR_VTABLEGAP_NAME_LENGTH = 8,
  NATIVE_TYPE_MAX_CB = 1,
  COR_ILMETHOD_SECT_SMALL_MAX_DATASIZE = 255,
  IMAGE_COR_MIH_METHODRVA = 1,
  IMAGE_COR_MIH_EHRVA = 2,
  IMAGE_COR_MIH_BASICBLOCK = 8,
  COR_VTABLE_32BIT = 1,
  COR_VTABLE_64BIT = 2,
  COR_VTABLE_FROM_UNMANAGED = 4,
  COR_VTABLE_CALL_MOST_DERIVED = 16,
  IMAGE_COR_EATJ_THUNK_SIZE = 32,
  MAX_CLASS_NAME = 1024,
  MAX_PACKAGE_NAME = 1024
}
global IMAGE_COR20_HEADER: type <cimport,nodecl> = @record{
  cb: culong,
  MajorRuntimeVersion: cushort,
  MinorRuntimeVersion: cushort,
  MetaData: IMAGE_DATA_DIRECTORY,
  Flags: culong,
  __unnamed1: union{
    EntryPointToken: culong,
    EntryPointRVA: culong
  },
  Resources: IMAGE_DATA_DIRECTORY,
  StrongNameSignature: IMAGE_DATA_DIRECTORY,
  CodeManagerTable: IMAGE_DATA_DIRECTORY,
  VTableFixups: IMAGE_DATA_DIRECTORY,
  ExportAddressTableJumps: IMAGE_DATA_DIRECTORY,
  ManagedNativeHeader: IMAGE_DATA_DIRECTORY
}
global PIMAGE_COR20_HEADER: type = @*IMAGE_COR20_HEADER
global function RtlCaptureStackBackTrace(FramesToSkip: culong, FramesToCapture: culong, BackTrace: *PVOID, BackTraceHash: PDWORD): cushort <cimport,nodecl> end
global function RtlCaptureContext(ContextRecord: PCONTEXT): void <cimport,nodecl> end
global function RtlCompareMemory(Source1: pointer, Source2: pointer, Length: culonglong): culonglong <cimport,nodecl> end
global function RtlAddFunctionTable(FunctionTable: PRUNTIME_FUNCTION, EntryCount: culong, BaseAddress: culonglong): BOOLEAN <cimport,nodecl> end
global function RtlDeleteFunctionTable(FunctionTable: PRUNTIME_FUNCTION): BOOLEAN <cimport,nodecl> end
global function RtlInstallFunctionTableCallback(TableIdentifier: culonglong, BaseAddress: culonglong, Length: culong, Callback: PGET_RUNTIME_FUNCTION_CALLBACK, Context: PVOID, OutOfProcessCallbackDll: PCWSTR): BOOLEAN <cimport,nodecl> end
global function RtlRestoreContext(ContextRecord: PCONTEXT, ExceptionRecord: *_EXCEPTION_RECORD): void <cimport,nodecl> end
global function RtlUnwind(TargetFrame: PVOID, TargetIp: PVOID, ExceptionRecord: PEXCEPTION_RECORD, ReturnValue: PVOID): void <cimport,nodecl> end
global function RtlPcToFileHeader(PcValue: PVOID, BaseOfImage: *PVOID): PVOID <cimport,nodecl> end
global function RtlLookupFunctionEntry(ControlPc: culonglong, ImageBase: PDWORD64, HistoryTable: PUNWIND_HISTORY_TABLE): PRUNTIME_FUNCTION <cimport,nodecl> end
global function RtlUnwindEx(TargetFrame: PVOID, TargetIp: PVOID, ExceptionRecord: PEXCEPTION_RECORD, ReturnValue: PVOID, ContextRecord: PCONTEXT, HistoryTable: PUNWIND_HISTORY_TABLE): void <cimport,nodecl> end
global function RtlVirtualUnwind(HandlerType: culong, ImageBase: culonglong, ControlPc: culonglong, FunctionEntry: PRUNTIME_FUNCTION, ContextRecord: PCONTEXT, HandlerData: *PVOID, EstablisherFrame: PDWORD64, ContextPointers: PKNONVOLATILE_CONTEXT_POINTERS): PEXCEPTION_ROUTINE <cimport,nodecl> end
global _SLIST_ENTRY: type <cimport,nodecl,forwarddecl,ctypedef> = @record{}
_SLIST_ENTRY = @record{
  Next: *_SLIST_ENTRY
}
global SLIST_ENTRY: type = @_SLIST_ENTRY
global PSLIST_ENTRY: type = @*_SLIST_ENTRY
global _SLIST_HEADER: type <cimport,nodecl,aligned(16),ctypedef> = @union{
  __unnamed1: record{
    Alignment: culonglong,
    Region: culonglong
  },
  Header8: record{
    Depth: cushort,
    Sequence: culonglong,
    NextEntry: culonglong,
    HeaderType: culonglong,
    Init: culonglong,
    Reserved: culonglong,
    Region: culonglong
  },
  HeaderX64: record{
    Depth: cushort,
    Sequence: culonglong,
    HeaderType: culonglong,
    Reserved: culonglong,
    NextEntry: culonglong
  }
}
global SLIST_HEADER: type = @_SLIST_HEADER
global PSLIST_HEADER: type = @*_SLIST_HEADER
global function RtlInitializeSListHead(ListHead: PSLIST_HEADER): void <cimport,nodecl> end
global function RtlFirstEntrySList(ListHead: *SLIST_HEADER): PSLIST_ENTRY <cimport,nodecl> end
global function RtlInterlockedPopEntrySList(ListHead: PSLIST_HEADER): PSLIST_ENTRY <cimport,nodecl> end
global function RtlInterlockedPushEntrySList(ListHead: PSLIST_HEADER, ListEntry: PSLIST_ENTRY): PSLIST_ENTRY <cimport,nodecl> end
global function RtlInterlockedPushListSListEx(ListHead: PSLIST_HEADER, List: PSLIST_ENTRY, ListEnd: PSLIST_ENTRY, Count: culong): PSLIST_ENTRY <cimport,nodecl> end
global function RtlInterlockedFlushSList(ListHead: PSLIST_HEADER): PSLIST_ENTRY <cimport,nodecl> end
global function RtlQueryDepthSList(ListHead: PSLIST_HEADER): cushort <cimport,nodecl> end
global _RTL_RUN_ONCE: type <cimport,nodecl,ctypedef> = @record{
  Ptr: PVOID
}
global RTL_RUN_ONCE: type = @_RTL_RUN_ONCE
global PRTL_RUN_ONCE: type = @*_RTL_RUN_ONCE
global PRTL_RUN_ONCE_INIT_FN: type <cimport,nodecl> = @function(PRTL_RUN_ONCE, PVOID, *PVOID): culong
global _RTL_BARRIER: type <cimport,nodecl,ctypedef> = @record{
  Reserved1: culong,
  Reserved2: culong,
  Reserved3: [2]culonglong,
  Reserved4: culong,
  Reserved5: culong
}
global RTL_BARRIER: type = @_RTL_BARRIER
global PRTL_BARRIER: type = @*_RTL_BARRIER
global function RtlSecureZeroMemory(ptr: PVOID, cnt: culonglong): PVOID <cimport,nodecl> end
global _MESSAGE_RESOURCE_ENTRY: type <cimport,nodecl,ctypedef> = @record{
  Length: cushort,
  Flags: cushort,
  Text: [1]cuchar
}
global MESSAGE_RESOURCE_ENTRY: type = @_MESSAGE_RESOURCE_ENTRY
global PMESSAGE_RESOURCE_ENTRY: type = @*_MESSAGE_RESOURCE_ENTRY
global _MESSAGE_RESOURCE_BLOCK: type <cimport,nodecl,ctypedef> = @record{
  LowId: culong,
  HighId: culong,
  OffsetToEntries: culong
}
global MESSAGE_RESOURCE_BLOCK: type = @_MESSAGE_RESOURCE_BLOCK
global PMESSAGE_RESOURCE_BLOCK: type = @*_MESSAGE_RESOURCE_BLOCK
global _MESSAGE_RESOURCE_DATA: type <cimport,nodecl,ctypedef> = @record{
  NumberOfBlocks: culong,
  Blocks: [1]MESSAGE_RESOURCE_BLOCK
}
global MESSAGE_RESOURCE_DATA: type = @_MESSAGE_RESOURCE_DATA
global PMESSAGE_RESOURCE_DATA: type = @*_MESSAGE_RESOURCE_DATA
global _OSVERSIONINFOA: type <cimport,nodecl,ctypedef> = @record{
  dwOSVersionInfoSize: culong,
  dwMajorVersion: culong,
  dwMinorVersion: culong,
  dwBuildNumber: culong,
  dwPlatformId: culong,
  szCSDVersion: [128]cchar
}
global OSVERSIONINFOA: type = @_OSVERSIONINFOA
global POSVERSIONINFOA: type = @*_OSVERSIONINFOA
global LPOSVERSIONINFOA: type = @*_OSVERSIONINFOA
global _OSVERSIONINFOW: type <cimport,nodecl,ctypedef> = @record{
  dwOSVersionInfoSize: culong,
  dwMajorVersion: culong,
  dwMinorVersion: culong,
  dwBuildNumber: culong,
  dwPlatformId: culong,
  szCSDVersion: [128]cwchar_t
}
global OSVERSIONINFOW: type = @_OSVERSIONINFOW
global POSVERSIONINFOW: type = @*_OSVERSIONINFOW
global LPOSVERSIONINFOW: type = @*_OSVERSIONINFOW
global RTL_OSVERSIONINFOW: type = @_OSVERSIONINFOW
global PRTL_OSVERSIONINFOW: type = @*_OSVERSIONINFOW
global OSVERSIONINFO: type = @_OSVERSIONINFOA
global POSVERSIONINFO: type = @*_OSVERSIONINFOA
global LPOSVERSIONINFO: type = @*_OSVERSIONINFOA
global _OSVERSIONINFOEXA: type <cimport,nodecl,ctypedef> = @record{
  dwOSVersionInfoSize: culong,
  dwMajorVersion: culong,
  dwMinorVersion: culong,
  dwBuildNumber: culong,
  dwPlatformId: culong,
  szCSDVersion: [128]cchar,
  wServicePackMajor: cushort,
  wServicePackMinor: cushort,
  wSuiteMask: cushort,
  wProductType: cuchar,
  wReserved: cuchar
}
global OSVERSIONINFOEXA: type = @_OSVERSIONINFOEXA
global POSVERSIONINFOEXA: type = @*_OSVERSIONINFOEXA
global LPOSVERSIONINFOEXA: type = @*_OSVERSIONINFOEXA
global _OSVERSIONINFOEXW: type <cimport,nodecl,ctypedef> = @record{
  dwOSVersionInfoSize: culong,
  dwMajorVersion: culong,
  dwMinorVersion: culong,
  dwBuildNumber: culong,
  dwPlatformId: culong,
  szCSDVersion: [128]cwchar_t,
  wServicePackMajor: cushort,
  wServicePackMinor: cushort,
  wSuiteMask: cushort,
  wProductType: cuchar,
  wReserved: cuchar
}
global OSVERSIONINFOEXW: type = @_OSVERSIONINFOEXW
global POSVERSIONINFOEXW: type = @*_OSVERSIONINFOEXW
global LPOSVERSIONINFOEXW: type = @*_OSVERSIONINFOEXW
global RTL_OSVERSIONINFOEXW: type = @_OSVERSIONINFOEXW
global PRTL_OSVERSIONINFOEXW: type = @*_OSVERSIONINFOEXW
global OSVERSIONINFOEX: type = @_OSVERSIONINFOEXA
global POSVERSIONINFOEX: type = @*_OSVERSIONINFOEXA
global LPOSVERSIONINFOEX: type = @*_OSVERSIONINFOEXA
global function VerSetConditionMask(ConditionMask: culonglong, TypeMask: culong, Condition: cuchar): culonglong <cimport,nodecl> end
global function RtlGetProductInfo(OSMajorVersion: culong, OSMinorVersion: culong, SpMajorVersion: culong, SpMinorVersion: culong, ReturnedProductType: PDWORD): BOOLEAN <cimport,nodecl> end
global _RTL_UMS_THREAD_INFO_CLASS: type <cimport,nodecl,using,ctypedef> = @enum(cint){
  UmsThreadInvalidInfoClass = 0,
  UmsThreadUserContext = 1,
  UmsThreadPriority = 2,
  UmsThreadAffinity = 3,
  UmsThreadTeb = 4,
  UmsThreadIsSuspended = 5,
  UmsThreadIsTerminated = 6,
  UmsThreadMaxInfoClass = 7
}
global RTL_UMS_THREAD_INFO_CLASS: type = @_RTL_UMS_THREAD_INFO_CLASS
global PRTL_UMS_THREAD_INFO_CLASS: type = @*_RTL_UMS_THREAD_INFO_CLASS
global _RTL_UMS_SCHEDULER_REASON: type <cimport,nodecl,using,ctypedef> = @enum(cint){
  UmsSchedulerStartup = 0,
  UmsSchedulerThreadBlocked = 1,
  UmsSchedulerThreadYield = 2
}
global RTL_UMS_SCHEDULER_REASON: type = @_RTL_UMS_SCHEDULER_REASON
global PRTL_UMS_SCHEDULER_REASON: type = @*_RTL_UMS_SCHEDULER_REASON
global RTL_UMS_SCHEDULER_ENTRY_POINT: type <cimport,nodecl> = @function(RTL_UMS_SCHEDULER_REASON, culonglong, PVOID): void
global PRTL_UMS_SCHEDULER_ENTRY_POINT: type <cimport,nodecl> = @function(RTL_UMS_SCHEDULER_REASON, culonglong, PVOID): void
global _RTL_CRITICAL_SECTION: type <cimport,nodecl,forwarddecl,ctypedef> = @record{}
global _RTL_CRITICAL_SECTION_DEBUG: type <cimport,nodecl,ctypedef> = @record{
  Type: cushort,
  CreatorBackTraceIndex: cushort,
  CriticalSection: *_RTL_CRITICAL_SECTION,
  ProcessLocksList: LIST_ENTRY,
  EntryCount: culong,
  ContentionCount: culong,
  Flags: culong,
  CreatorBackTraceIndexHigh: cushort,
  SpareWORD: cushort
}
global RTL_CRITICAL_SECTION_DEBUG: type = @_RTL_CRITICAL_SECTION_DEBUG
global PRTL_CRITICAL_SECTION_DEBUG: type = @*_RTL_CRITICAL_SECTION_DEBUG
global RTL_RESOURCE_DEBUG: type = @_RTL_CRITICAL_SECTION_DEBUG
global PRTL_RESOURCE_DEBUG: type = @*_RTL_CRITICAL_SECTION_DEBUG
_RTL_CRITICAL_SECTION = @record{
  DebugInfo: PRTL_CRITICAL_SECTION_DEBUG,
  LockCount: clong,
  RecursionCount: clong,
  OwningThread: HANDLE,
  LockSemaphore: HANDLE,
  SpinCount: culonglong
}
global RTL_CRITICAL_SECTION: type = @_RTL_CRITICAL_SECTION
global PRTL_CRITICAL_SECTION: type = @*_RTL_CRITICAL_SECTION
global _RTL_SRWLOCK: type <cimport,nodecl,ctypedef> = @record{
  Ptr: PVOID
}
global RTL_SRWLOCK: type = @_RTL_SRWLOCK
global PRTL_SRWLOCK: type = @*_RTL_SRWLOCK
global _RTL_CONDITION_VARIABLE: type <cimport,nodecl,ctypedef> = @record{
  Ptr: PVOID
}
global RTL_CONDITION_VARIABLE: type = @_RTL_CONDITION_VARIABLE
global PRTL_CONDITION_VARIABLE: type = @*_RTL_CONDITION_VARIABLE
global PAPCFUNC: type <cimport,nodecl> = @function(culonglong): void
global PVECTORED_EXCEPTION_HANDLER: type <cimport,nodecl> = @function(*_EXCEPTION_POINTERS): clong
global _HEAP_INFORMATION_CLASS: type <cimport,nodecl,using,ctypedef> = @enum(cint){
  HeapCompatibilityInformation = 0,
  HeapEnableTerminationOnCorruption = 1
}
global HEAP_INFORMATION_CLASS: type = @_HEAP_INFORMATION_CLASS
global WORKERCALLBACKFUNC: type <cimport,nodecl> = @function(PVOID): void
global APC_CALLBACK_FUNCTION: type <cimport,nodecl> = @function(culong, PVOID, PVOID): void
global WAITORTIMERCALLBACKFUNC: type <cimport,nodecl> = @function(PVOID, BOOLEAN): void
global WAITORTIMERCALLBACK: type <cimport,nodecl> = @function(PVOID, BOOLEAN): void
global PFLS_CALLBACK_FUNCTION: type <cimport,nodecl> = @function(PVOID): void
global PSECURE_MEMORY_CACHE_CALLBACK: type <cimport,nodecl> = @function(PVOID, culonglong): BOOLEAN
global _ACTIVATION_CONTEXT_INFO_CLASS: type <cimport,nodecl,using,ctypedef> = @enum(cint){
  ActivationContextBasicInformation = 1,
  ActivationContextDetailedInformation = 2,
  AssemblyDetailedInformationInActivationContext = 3,
  FileInformationInAssemblyOfAssemblyInActivationContext = 4,
  RunlevelInformationInActivationContext = 5,
  CompatibilityInformationInActivationContext = 6,
  ActivationContextManifestResourceName = 7,
  MaxActivationContextInfoClass = 8,
  AssemblyDetailedInformationInActivationContxt = 3,
  FileInformationInAssemblyOfAssemblyInActivationContxt = 4
}
global ACTIVATION_CONTEXT_INFO_CLASS: type = @_ACTIVATION_CONTEXT_INFO_CLASS
global ACTCTX_REQUESTED_RUN_LEVEL: type <cimport,nodecl,using> = @enum(cint){
  ACTCTX_RUN_LEVEL_UNSPECIFIED = 0,
  ACTCTX_RUN_LEVEL_AS_INVOKER = 1,
  ACTCTX_RUN_LEVEL_HIGHEST_AVAILABLE = 2,
  ACTCTX_RUN_LEVEL_REQUIRE_ADMIN = 3,
  ACTCTX_RUN_LEVEL_NUMBERS = 4
}
global ACTCTX_COMPATIBILITY_ELEMENT_TYPE: type <cimport,nodecl,using> = @enum(cint){
  ACTCTX_COMPATIBILITY_ELEMENT_TYPE_UNKNOWN = 0,
  ACTCTX_COMPATIBILITY_ELEMENT_TYPE_OS = 1,
  ACTCTX_COMPATIBILITY_ELEMENT_TYPE_MITIGATION = 2
}
global _ACTIVATION_CONTEXT_QUERY_INDEX: type <cimport,nodecl,ctypedef> = @record{
  ulAssemblyIndex: culong,
  ulFileIndexInAssembly: culong
}
global ACTIVATION_CONTEXT_QUERY_INDEX: type = @_ACTIVATION_CONTEXT_QUERY_INDEX
global PACTIVATION_CONTEXT_QUERY_INDEX: type = @*_ACTIVATION_CONTEXT_QUERY_INDEX
global _ASSEMBLY_FILE_DETAILED_INFORMATION: type <cimport,nodecl,ctypedef> = @record{
  ulFlags: culong,
  ulFilenameLength: culong,
  ulPathLength: culong,
  lpFileName: PCWSTR,
  lpFilePath: PCWSTR
}
global ASSEMBLY_FILE_DETAILED_INFORMATION: type = @_ASSEMBLY_FILE_DETAILED_INFORMATION
global PASSEMBLY_FILE_DETAILED_INFORMATION: type = @*_ASSEMBLY_FILE_DETAILED_INFORMATION
global _ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION: type <cimport,nodecl,ctypedef> = @record{
  ulFlags: culong,
  ulEncodedAssemblyIdentityLength: culong,
  ulManifestPathType: culong,
  ulManifestPathLength: culong,
  liManifestLastWriteTime: LARGE_INTEGER,
  ulPolicyPathType: culong,
  ulPolicyPathLength: culong,
  liPolicyLastWriteTime: LARGE_INTEGER,
  ulMetadataSatelliteRosterIndex: culong,
  ulManifestVersionMajor: culong,
  ulManifestVersionMinor: culong,
  ulPolicyVersionMajor: culong,
  ulPolicyVersionMinor: culong,
  ulAssemblyDirectoryNameLength: culong,
  lpAssemblyEncodedAssemblyIdentity: PCWSTR,
  lpAssemblyManifestPath: PCWSTR,
  lpAssemblyPolicyPath: PCWSTR,
  lpAssemblyDirectoryName: PCWSTR,
  ulFileCount: culong
}
global ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION: type = @_ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION
global PACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION: type = @*_ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION
global _ACTIVATION_CONTEXT_RUN_LEVEL_INFORMATION: type <cimport,nodecl,ctypedef> = @record{
  ulFlags: culong,
  RunLevel: ACTCTX_REQUESTED_RUN_LEVEL,
  UiAccess: culong
}
global ACTIVATION_CONTEXT_RUN_LEVEL_INFORMATION: type = @_ACTIVATION_CONTEXT_RUN_LEVEL_INFORMATION
global PACTIVATION_CONTEXT_RUN_LEVEL_INFORMATION: type = @*_ACTIVATION_CONTEXT_RUN_LEVEL_INFORMATION
global _COMPATIBILITY_CONTEXT_ELEMENT: type <cimport,nodecl,ctypedef> = @record{
  Id: GUID,
  Type: ACTCTX_COMPATIBILITY_ELEMENT_TYPE
}
global COMPATIBILITY_CONTEXT_ELEMENT: type = @_COMPATIBILITY_CONTEXT_ELEMENT
global PCOMPATIBILITY_CONTEXT_ELEMENT: type = @*_COMPATIBILITY_CONTEXT_ELEMENT
global _ACTIVATION_CONTEXT_COMPATIBILITY_INFORMATION: type <cimport,nodecl,ctypedef> = @record{
  ElementCount: culong,
  Elements: [0]COMPATIBILITY_CONTEXT_ELEMENT
}
global ACTIVATION_CONTEXT_COMPATIBILITY_INFORMATION: type = @_ACTIVATION_CONTEXT_COMPATIBILITY_INFORMATION
global PACTIVATION_CONTEXT_COMPATIBILITY_INFORMATION: type = @*_ACTIVATION_CONTEXT_COMPATIBILITY_INFORMATION
global _SUPPORTED_OS_INFO: type <cimport,nodecl,ctypedef> = @record{
  OsCount: cushort,
  MitigationExist: cushort,
  OsList: [4]cushort
}
global SUPPORTED_OS_INFO: type = @_SUPPORTED_OS_INFO
global PSUPPORTED_OS_INFO: type = @*_SUPPORTED_OS_INFO
global _ACTIVATION_CONTEXT_DETAILED_INFORMATION: type <cimport,nodecl,ctypedef> = @record{
  dwFlags: culong,
  ulFormatVersion: culong,
  ulAssemblyCount: culong,
  ulRootManifestPathType: culong,
  ulRootManifestPathChars: culong,
  ulRootConfigurationPathType: culong,
  ulRootConfigurationPathChars: culong,
  ulAppDirPathType: culong,
  ulAppDirPathChars: culong,
  lpRootManifestPath: PCWSTR,
  lpRootConfigurationPath: PCWSTR,
  lpAppDirPath: PCWSTR
}
global ACTIVATION_CONTEXT_DETAILED_INFORMATION: type = @_ACTIVATION_CONTEXT_DETAILED_INFORMATION
global PACTIVATION_CONTEXT_DETAILED_INFORMATION: type = @*_ACTIVATION_CONTEXT_DETAILED_INFORMATION
global PCACTIVATION_CONTEXT_QUERY_INDEX: type = @*_ACTIVATION_CONTEXT_QUERY_INDEX
global PCASSEMBLY_FILE_DETAILED_INFORMATION: type = @*ASSEMBLY_FILE_DETAILED_INFORMATION
global PCACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION: type = @*_ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION
global PCACTIVATION_CONTEXT_RUN_LEVEL_INFORMATION: type = @*_ACTIVATION_CONTEXT_RUN_LEVEL_INFORMATION
global PCCOMPATIBILITY_CONTEXT_ELEMENT: type = @*_COMPATIBILITY_CONTEXT_ELEMENT
global PCACTIVATION_CONTEXT_COMPATIBILITY_INFORMATION: type = @*_ACTIVATION_CONTEXT_COMPATIBILITY_INFORMATION
global PCACTIVATION_CONTEXT_DETAILED_INFORMATION: type = @*_ACTIVATION_CONTEXT_DETAILED_INFORMATION
global RTL_VERIFIER_DLL_LOAD_CALLBACK: type <cimport,nodecl> = @function(PWSTR, PVOID, culonglong, PVOID): void
global RTL_VERIFIER_DLL_UNLOAD_CALLBACK: type <cimport,nodecl> = @function(PWSTR, PVOID, culonglong, PVOID): void
global RTL_VERIFIER_NTDLLHEAPFREE_CALLBACK: type <cimport,nodecl> = @function(PVOID, culonglong): void
global _RTL_VERIFIER_THUNK_DESCRIPTOR: type <cimport,nodecl,ctypedef> = @record{
  ThunkName: PCHAR,
  ThunkOldAddress: PVOID,
  ThunkNewAddress: PVOID
}
global RTL_VERIFIER_THUNK_DESCRIPTOR: type = @_RTL_VERIFIER_THUNK_DESCRIPTOR
global PRTL_VERIFIER_THUNK_DESCRIPTOR: type = @*_RTL_VERIFIER_THUNK_DESCRIPTOR
global _RTL_VERIFIER_DLL_DESCRIPTOR: type <cimport,nodecl,ctypedef> = @record{
  DllName: PWCHAR,
  DllFlags: culong,
  DllAddress: PVOID,
  DllThunks: PRTL_VERIFIER_THUNK_DESCRIPTOR
}
global RTL_VERIFIER_DLL_DESCRIPTOR: type = @_RTL_VERIFIER_DLL_DESCRIPTOR
global PRTL_VERIFIER_DLL_DESCRIPTOR: type = @*_RTL_VERIFIER_DLL_DESCRIPTOR
global _RTL_VERIFIER_PROVIDER_DESCRIPTOR: type <cimport,nodecl,ctypedef> = @record{
  Length: culong,
  ProviderDlls: PRTL_VERIFIER_DLL_DESCRIPTOR,
  ProviderDllLoadCallback: RTL_VERIFIER_DLL_LOAD_CALLBACK,
  ProviderDllUnloadCallback: RTL_VERIFIER_DLL_UNLOAD_CALLBACK,
  VerifierImage: PWSTR,
  VerifierFlags: culong,
  VerifierDebug: culong,
  RtlpGetStackTraceAddress: PVOID,
  RtlpDebugPageHeapCreate: PVOID,
  RtlpDebugPageHeapDestroy: PVOID,
  ProviderNtdllHeapFreeCallback: RTL_VERIFIER_NTDLLHEAPFREE_CALLBACK
}
global RTL_VERIFIER_PROVIDER_DESCRIPTOR: type = @_RTL_VERIFIER_PROVIDER_DESCRIPTOR
global PRTL_VERIFIER_PROVIDER_DESCRIPTOR: type = @*_RTL_VERIFIER_PROVIDER_DESCRIPTOR
global function RtlApplicationVerifierStop(Code: culonglong, Message: PSTR, Param1: culonglong, Description1: PSTR, Param2: culonglong, Description2: PSTR, Param3: culonglong, Description3: PSTR, Param4: culonglong, Description4: PSTR): void <cimport,nodecl> end
global function RtlSetHeapInformation(HeapHandle: PVOID, HeapInformationClass: HEAP_INFORMATION_CLASS, HeapInformation: PVOID, HeapInformationLength: culonglong): culong <cimport,nodecl> end
global function RtlQueryHeapInformation(HeapHandle: PVOID, HeapInformationClass: HEAP_INFORMATION_CLASS, HeapInformation: PVOID, HeapInformationLength: culonglong, ReturnLength: PSIZE_T): culong <cimport,nodecl> end
global function RtlMultipleAllocateHeap(HeapHandle: PVOID, Flags: culong, Size: culonglong, Count: culong, Array: *PVOID): culong <cimport,nodecl> end
global function RtlMultipleFreeHeap(HeapHandle: PVOID, Flags: culong, Count: culong, Array: *PVOID): culong <cimport,nodecl> end
global _HARDWARE_COUNTER_DATA: type <cimport,nodecl,ctypedef> = @record{
  Type: HARDWARE_COUNTER_TYPE,
  Reserved: culong,
  Value: culonglong
}
global HARDWARE_COUNTER_DATA: type = @_HARDWARE_COUNTER_DATA
global PHARDWARE_COUNTER_DATA: type = @*_HARDWARE_COUNTER_DATA
global _PERFORMANCE_DATA: type <cimport,nodecl,ctypedef> = @record{
  Size: cushort,
  Version: cuchar,
  HwCountersCount: cuchar,
  ContextSwitchCount: culong,
  WaitReasonBitMap: culonglong,
  CycleTime: culonglong,
  RetryCount: culong,
  Reserved: culong,
  HwCounters: [16]HARDWARE_COUNTER_DATA
}
global PERFORMANCE_DATA: type = @_PERFORMANCE_DATA
global PPERFORMANCE_DATA: type = @*_PERFORMANCE_DATA
global _EVENTLOGRECORD: type <cimport,nodecl,ctypedef> = @record{
  Length: culong,
  Reserved: culong,
  RecordNumber: culong,
  TimeGenerated: culong,
  TimeWritten: culong,
  EventID: culong,
  EventType: cushort,
  NumStrings: cushort,
  EventCategory: cushort,
  ReservedFlags: cushort,
  ClosingRecordNumber: culong,
  StringOffset: culong,
  UserSidLength: culong,
  UserSidOffset: culong,
  DataLength: culong,
  DataOffset: culong
}
global EVENTLOGRECORD: type = @_EVENTLOGRECORD
global PEVENTLOGRECORD: type = @*_EVENTLOGRECORD
global _EVENTSFORLOGFILE: type <cimport,nodecl,ctypedef> = @record{
  ulSize: culong,
  szLogicalLogFile: [256]cwchar_t,
  ulNumRecords: culong,
  pEventLogRecords: [0]EVENTLOGRECORD
}
global EVENTSFORLOGFILE: type = @_EVENTSFORLOGFILE
global PEVENTSFORLOGFILE: type = @*_EVENTSFORLOGFILE
global _PACKEDEVENTINFO: type <cimport,nodecl,ctypedef> = @record{
  ulSize: culong,
  ulNumEventsForLogFile: culong,
  ulOffsets: [0]culong
}
global PACKEDEVENTINFO: type = @_PACKEDEVENTINFO
global PPACKEDEVENTINFO: type = @*_PACKEDEVENTINFO
global _CM_SERVICE_NODE_TYPE: type <cimport,nodecl,using,ctypedef> = @enum(cint){
  DriverType = 1,
  FileSystemType = 2,
  Win32ServiceOwnProcess = 16,
  Win32ServiceShareProcess = 32,
  AdapterType = 4,
  RecognizerType = 8
}
global SERVICE_NODE_TYPE: type = @_CM_SERVICE_NODE_TYPE
global _CM_SERVICE_LOAD_TYPE: type <cimport,nodecl,using,ctypedef> = @enum(cint){
  BootLoad = 0,
  SystemLoad = 1,
  AutoLoad = 2,
  DemandLoad = 3,
  DisableLoad = 4
}
global SERVICE_LOAD_TYPE: type = @_CM_SERVICE_LOAD_TYPE
global _CM_ERROR_CONTROL_TYPE: type <cimport,nodecl,using,ctypedef> = @enum(cint){
  IgnoreError = 0,
  NormalError = 1,
  SevereError = 2,
  CriticalError = 3
}
global SERVICE_ERROR_TYPE: type = @_CM_ERROR_CONTROL_TYPE
global _TAPE_ERASE: type <cimport,nodecl,ctypedef> = @record{
  Type: culong,
  Immediate: BOOLEAN
}
global TAPE_ERASE: type = @_TAPE_ERASE
global PTAPE_ERASE: type = @*_TAPE_ERASE
global _TAPE_PREPARE: type <cimport,nodecl,ctypedef> = @record{
  Operation: culong,
  Immediate: BOOLEAN
}
global TAPE_PREPARE: type = @_TAPE_PREPARE
global PTAPE_PREPARE: type = @*_TAPE_PREPARE
global _TAPE_WRITE_MARKS: type <cimport,nodecl,ctypedef> = @record{
  Type: culong,
  Count: culong,
  Immediate: BOOLEAN
}
global TAPE_WRITE_MARKS: type = @_TAPE_WRITE_MARKS
global PTAPE_WRITE_MARKS: type = @*_TAPE_WRITE_MARKS
global _TAPE_GET_POSITION: type <cimport,nodecl,ctypedef> = @record{
  Type: culong,
  Partition: culong,
  Offset: LARGE_INTEGER
}
global TAPE_GET_POSITION: type = @_TAPE_GET_POSITION
global PTAPE_GET_POSITION: type = @*_TAPE_GET_POSITION
global _TAPE_SET_POSITION: type <cimport,nodecl,ctypedef> = @record{
  Method: culong,
  Partition: culong,
  Offset: LARGE_INTEGER,
  Immediate: BOOLEAN
}
global TAPE_SET_POSITION: type = @_TAPE_SET_POSITION
global PTAPE_SET_POSITION: type = @*_TAPE_SET_POSITION
global _TAPE_GET_DRIVE_PARAMETERS: type <cimport,nodecl,ctypedef> = @record{
  ECC: BOOLEAN,
  Compression: BOOLEAN,
  DataPadding: BOOLEAN,
  ReportSetmarks: BOOLEAN,
  DefaultBlockSize: culong,
  MaximumBlockSize: culong,
  MinimumBlockSize: culong,
  MaximumPartitionCount: culong,
  FeaturesLow: culong,
  FeaturesHigh: culong,
  EOTWarningZoneSize: culong
}
global TAPE_GET_DRIVE_PARAMETERS: type = @_TAPE_GET_DRIVE_PARAMETERS
global PTAPE_GET_DRIVE_PARAMETERS: type = @*_TAPE_GET_DRIVE_PARAMETERS
global _TAPE_SET_DRIVE_PARAMETERS: type <cimport,nodecl,ctypedef> = @record{
  ECC: BOOLEAN,
  Compression: BOOLEAN,
  DataPadding: BOOLEAN,
  ReportSetmarks: BOOLEAN,
  EOTWarningZoneSize: culong
}
global TAPE_SET_DRIVE_PARAMETERS: type = @_TAPE_SET_DRIVE_PARAMETERS
global PTAPE_SET_DRIVE_PARAMETERS: type = @*_TAPE_SET_DRIVE_PARAMETERS
global _TAPE_GET_MEDIA_PARAMETERS: type <cimport,nodecl,ctypedef> = @record{
  Capacity: LARGE_INTEGER,
  Remaining: LARGE_INTEGER,
  BlockSize: culong,
  PartitionCount: culong,
  WriteProtected: BOOLEAN
}
global TAPE_GET_MEDIA_PARAMETERS: type = @_TAPE_GET_MEDIA_PARAMETERS
global PTAPE_GET_MEDIA_PARAMETERS: type = @*_TAPE_GET_MEDIA_PARAMETERS
global _TAPE_SET_MEDIA_PARAMETERS: type <cimport,nodecl,ctypedef> = @record{
  BlockSize: culong
}
global TAPE_SET_MEDIA_PARAMETERS: type = @_TAPE_SET_MEDIA_PARAMETERS
global PTAPE_SET_MEDIA_PARAMETERS: type = @*_TAPE_SET_MEDIA_PARAMETERS
global _TAPE_CREATE_PARTITION: type <cimport,nodecl,ctypedef> = @record{
  Method: culong,
  Count: culong,
  Size: culong
}
global TAPE_CREATE_PARTITION: type = @_TAPE_CREATE_PARTITION
global PTAPE_CREATE_PARTITION: type = @*_TAPE_CREATE_PARTITION
global _TAPE_WMI_OPERATIONS: type <cimport,nodecl,ctypedef> = @record{
  Method: culong,
  DataBufferSize: culong,
  DataBuffer: PVOID
}
global TAPE_WMI_OPERATIONS: type = @_TAPE_WMI_OPERATIONS
global PTAPE_WMI_OPERATIONS: type = @*_TAPE_WMI_OPERATIONS
global _TAPE_DRIVE_PROBLEM_TYPE: type <cimport,nodecl,using,ctypedef> = @enum(cint){
  TapeDriveProblemNone = 0,
  TapeDriveReadWriteWarning = 1,
  TapeDriveReadWriteError = 2,
  TapeDriveReadWarning = 3,
  TapeDriveWriteWarning = 4,
  TapeDriveReadError = 5,
  TapeDriveWriteError = 6,
  TapeDriveHardwareError = 7,
  TapeDriveUnsupportedMedia = 8,
  TapeDriveScsiConnectionError = 9,
  TapeDriveTimetoClean = 10,
  TapeDriveCleanDriveNow = 11,
  TapeDriveMediaLifeExpired = 12,
  TapeDriveSnappedTape = 13
}
global TAPE_DRIVE_PROBLEM_TYPE: type = @_TAPE_DRIVE_PROBLEM_TYPE
global PTP_VERSION: type = @*culong
global _TP_CALLBACK_INSTANCE: type <cimport,nodecl,forwarddecl,ctypedef> = @record{}
global TP_CALLBACK_INSTANCE: type = @_TP_CALLBACK_INSTANCE
global PTP_CALLBACK_INSTANCE: type = @*_TP_CALLBACK_INSTANCE
global PTP_SIMPLE_CALLBACK: type <cimport,nodecl> = @function(PTP_CALLBACK_INSTANCE, PVOID): void
global _TP_POOL: type <cimport,nodecl,forwarddecl,ctypedef> = @record{}
global TP_POOL: type = @_TP_POOL
global PTP_POOL: type = @*_TP_POOL
global _TP_CALLBACK_PRIORITY: type <cimport,nodecl,using,ctypedef> = @enum(cint){
  TP_CALLBACK_PRIORITY_HIGH = 0,
  TP_CALLBACK_PRIORITY_NORMAL = 1,
  TP_CALLBACK_PRIORITY_LOW = 2,
  TP_CALLBACK_PRIORITY_INVALID = 3,
  TP_CALLBACK_PRIORITY_COUNT = 3
}
global TP_CALLBACK_PRIORITY: type = @_TP_CALLBACK_PRIORITY
global _TP_POOL_STACK_INFORMATION: type <cimport,nodecl,ctypedef> = @record{
  StackReserve: culonglong,
  StackCommit: culonglong
}
global TP_POOL_STACK_INFORMATION: type = @_TP_POOL_STACK_INFORMATION
global PTP_POOL_STACK_INFORMATION: type = @*_TP_POOL_STACK_INFORMATION
global _TP_CLEANUP_GROUP: type <cimport,nodecl,forwarddecl,ctypedef> = @record{}
global TP_CLEANUP_GROUP: type = @_TP_CLEANUP_GROUP
global PTP_CLEANUP_GROUP: type = @*_TP_CLEANUP_GROUP
global PTP_CLEANUP_GROUP_CANCEL_CALLBACK: type <cimport,nodecl> = @function(PVOID, PVOID): void
global _ACTIVATION_CONTEXT: type <cimport,nodecl,forwarddecl,ctypedef> = @record{}
global _TP_CALLBACK_ENVIRON_V1: type <cimport,nodecl,ctypedef> = @record{
  Version: culong,
  Pool: PTP_POOL,
  CleanupGroup: PTP_CLEANUP_GROUP,
  CleanupGroupCancelCallback: PTP_CLEANUP_GROUP_CANCEL_CALLBACK,
  RaceDll: PVOID,
  ActivationContext: *_ACTIVATION_CONTEXT,
  FinalizationCallback: PTP_SIMPLE_CALLBACK,
  u: union{
    Flags: culong,
    s: record{
      LongFunction: culong,
      Persistent: culong,
      Private: culong
    }
  }
}
global TP_CALLBACK_ENVIRON_V1: type = @_TP_CALLBACK_ENVIRON_V1
global TP_CALLBACK_ENVIRON: type = @_TP_CALLBACK_ENVIRON_V1
global PTP_CALLBACK_ENVIRON: type = @*TP_CALLBACK_ENVIRON_V1
global _TP_WORK: type <cimport,nodecl,forwarddecl,ctypedef> = @record{}
global TP_WORK: type = @_TP_WORK
global PTP_WORK: type = @*_TP_WORK
global PTP_WORK_CALLBACK: type <cimport,nodecl> = @function(PTP_CALLBACK_INSTANCE, PVOID, PTP_WORK): void
global _TP_TIMER: type <cimport,nodecl,forwarddecl,ctypedef> = @record{}
global TP_TIMER: type = @_TP_TIMER
global PTP_TIMER: type = @*_TP_TIMER
global PTP_TIMER_CALLBACK: type <cimport,nodecl> = @function(PTP_CALLBACK_INSTANCE, PVOID, PTP_TIMER): void
global _TP_WAIT: type <cimport,nodecl,forwarddecl,ctypedef> = @record{}
global TP_WAIT: type = @_TP_WAIT
global PTP_WAIT: type = @*_TP_WAIT
global PTP_WAIT_CALLBACK: type <cimport,nodecl> = @function(PTP_CALLBACK_INSTANCE, PVOID, PTP_WAIT, culong): void
global _TP_IO: type <cimport,nodecl,forwarddecl,ctypedef> = @record{}
global TP_IO: type = @_TP_IO
global PTP_IO: type = @*_TP_IO
global function TpInitializeCallbackEnviron(cbe: PTP_CALLBACK_ENVIRON): void <cimport,nodecl> end
global function TpSetCallbackThreadpool(cbe: PTP_CALLBACK_ENVIRON, pool: PTP_POOL): void <cimport,nodecl> end
global function TpSetCallbackCleanupGroup(cbe: PTP_CALLBACK_ENVIRON, cleanup_group: PTP_CLEANUP_GROUP, cleanup_group_cb: PTP_CLEANUP_GROUP_CANCEL_CALLBACK): void <cimport,nodecl> end
global function TpSetCallbackActivationContext(cbe: PTP_CALLBACK_ENVIRON, actx: *_ACTIVATION_CONTEXT): void <cimport,nodecl> end
global function TpSetCallbackNoActivationContext(cbe: PTP_CALLBACK_ENVIRON): void <cimport,nodecl> end
global function TpSetCallbackLongFunction(cbe: PTP_CALLBACK_ENVIRON): void <cimport,nodecl> end
global function TpSetCallbackRaceWithDll(cbe: PTP_CALLBACK_ENVIRON, h: PVOID): void <cimport,nodecl> end
global function TpSetCallbackFinalizationCallback(cbe: PTP_CALLBACK_ENVIRON, fini_cb: PTP_SIMPLE_CALLBACK): void <cimport,nodecl> end
global function TpSetCallbackPersistent(cbe: PTP_CALLBACK_ENVIRON): void <cimport,nodecl> end
global function TpDestroyCallbackEnviron(cbe: PTP_CALLBACK_ENVIRON): void <cimport,nodecl> end
global _TEB: type <cimport,nodecl,forwarddecl,ctypedef> = @record{}
global function NtCurrentTeb(): *_TEB <cimport,nodecl> end
global function GetCurrentFiber(): PVOID <cimport,nodecl> end
global function GetFiberData(): PVOID <cimport,nodecl> end
global CRM_PROTOCOL_ID: type = @_GUID
global PCRM_PROTOCOL_ID: type = @*GUID
global _TRANSACTION_NOTIFICATION: type <cimport,nodecl,ctypedef> = @record{
  TransactionKey: PVOID,
  TransactionNotification: culong,
  TmVirtualClock: LARGE_INTEGER,
  ArgumentLength: culong
}
global TRANSACTION_NOTIFICATION: type = @_TRANSACTION_NOTIFICATION
global PTRANSACTION_NOTIFICATION: type = @*_TRANSACTION_NOTIFICATION
global _TRANSACTION_NOTIFICATION_RECOVERY_ARGUMENT: type <cimport,nodecl,ctypedef> = @record{
  EnlistmentId: GUID,
  UOW: GUID
}
global TRANSACTION_NOTIFICATION_RECOVERY_ARGUMENT: type = @_TRANSACTION_NOTIFICATION_RECOVERY_ARGUMENT
global PTRANSACTION_NOTIFICATION_RECOVERY_ARGUMENT: type = @*_TRANSACTION_NOTIFICATION_RECOVERY_ARGUMENT
global _TRANSACTION_NOTIFICATION_TM_ONLINE_ARGUMENT: type <cimport,nodecl,ctypedef> = @record{
  TmIdentity: GUID,
  Flags: culong
}
global TRANSACTION_NOTIFICATION_TM_ONLINE_ARGUMENT: type = @_TRANSACTION_NOTIFICATION_TM_ONLINE_ARGUMENT
global PTRANSACTION_NOTIFICATION_TM_ONLINE_ARGUMENT: type = @*_TRANSACTION_NOTIFICATION_TM_ONLINE_ARGUMENT
global PSAVEPOINT_ID: type = @*culong
global _TRANSACTION_NOTIFICATION_SAVEPOINT_ARGUMENT: type <cimport,nodecl,ctypedef> = @record{
  SavepointId: culong
}
global TRANSACTION_NOTIFICATION_SAVEPOINT_ARGUMENT: type = @_TRANSACTION_NOTIFICATION_SAVEPOINT_ARGUMENT
global PTRANSACTION_NOTIFICATION_SAVEPOINT_ARGUMENT: type = @*_TRANSACTION_NOTIFICATION_SAVEPOINT_ARGUMENT
global _TRANSACTION_NOTIFICATION_PROPAGATE_ARGUMENT: type <cimport,nodecl,ctypedef> = @record{
  PropagationCookie: culong,
  UOW: GUID,
  TmIdentity: GUID,
  BufferLength: culong
}
global TRANSACTION_NOTIFICATION_PROPAGATE_ARGUMENT: type = @_TRANSACTION_NOTIFICATION_PROPAGATE_ARGUMENT
global PTRANSACTION_NOTIFICATION_PROPAGATE_ARGUMENT: type = @*_TRANSACTION_NOTIFICATION_PROPAGATE_ARGUMENT
global _TRANSACTION_NOTIFICATION_MARSHAL_ARGUMENT: type <cimport,nodecl,ctypedef> = @record{
  MarshalCookie: culong,
  UOW: GUID
}
global TRANSACTION_NOTIFICATION_MARSHAL_ARGUMENT: type = @_TRANSACTION_NOTIFICATION_MARSHAL_ARGUMENT
global PTRANSACTION_NOTIFICATION_MARSHAL_ARGUMENT: type = @*_TRANSACTION_NOTIFICATION_MARSHAL_ARGUMENT
global TRANSACTION_NOTIFICATION_PROMOTE_ARGUMENT: type = @_TRANSACTION_NOTIFICATION_PROPAGATE_ARGUMENT
global PTRANSACTION_NOTIFICATION_PROMOTE_ARGUMENT: type = @*TRANSACTION_NOTIFICATION_PROPAGATE_ARGUMENT
global _KCRM_MARSHAL_HEADER: type <cimport,nodecl,ctypedef> = @record{
  VersionMajor: culong,
  VersionMinor: culong,
  NumProtocols: culong,
  Unused: culong
}
global KCRM_MARSHAL_HEADER: type = @_KCRM_MARSHAL_HEADER
global PKCRM_MARSHAL_HEADER: type = @*_KCRM_MARSHAL_HEADER
global PRKCRM_MARSHAL_HEADER: type = @*_KCRM_MARSHAL_HEADER
global _KCRM_TRANSACTION_BLOB: type <cimport,nodecl,ctypedef> = @record{
  UOW: GUID,
  TmIdentity: GUID,
  IsolationLevel: culong,
  IsolationFlags: culong,
  Timeout: culong,
  Description: [64]cwchar_t
}
global KCRM_TRANSACTION_BLOB: type = @_KCRM_TRANSACTION_BLOB
global PKCRM_TRANSACTION_BLOB: type = @*_KCRM_TRANSACTION_BLOB
global PRKCRM_TRANSACTION_BLOB: type = @*_KCRM_TRANSACTION_BLOB
global _KCRM_PROTOCOL_BLOB: type <cimport,nodecl,ctypedef> = @record{
  ProtocolId: CRM_PROTOCOL_ID,
  StaticInfoLength: culong,
  TransactionIdInfoLength: culong,
  Unused1: culong,
  Unused2: culong
}
global KCRM_PROTOCOL_BLOB: type = @_KCRM_PROTOCOL_BLOB
global PKCRM_PROTOCOL_BLOB: type = @*_KCRM_PROTOCOL_BLOB
global PRKCRM_PROTOCOL_BLOB: type = @*_KCRM_PROTOCOL_BLOB
global _TRANSACTION_OUTCOME: type <cimport,nodecl,using,ctypedef> = @enum(cint){
  TransactionOutcomeUndetermined = 1,
  TransactionOutcomeCommitted = 2,
  TransactionOutcomeAborted = 3
}
global TRANSACTION_OUTCOME: type = @_TRANSACTION_OUTCOME
global _TRANSACTION_STATE: type <cimport,nodecl,using,ctypedef> = @enum(cint){
  TransactionStateNormal = 1,
  TransactionStateIndoubt = 2,
  TransactionStateCommittedNotify = 3
}
global TRANSACTION_STATE: type = @_TRANSACTION_STATE
global _TRANSACTION_BASIC_INFORMATION: type <cimport,nodecl,ctypedef> = @record{
  TransactionId: GUID,
  State: culong,
  Outcome: culong
}
global TRANSACTION_BASIC_INFORMATION: type = @_TRANSACTION_BASIC_INFORMATION
global PTRANSACTION_BASIC_INFORMATION: type = @*_TRANSACTION_BASIC_INFORMATION
global _TRANSACTIONMANAGER_BASIC_INFORMATION: type <cimport,nodecl,ctypedef> = @record{
  TmIdentity: GUID,
  VirtualClock: LARGE_INTEGER
}
global TRANSACTIONMANAGER_BASIC_INFORMATION: type = @_TRANSACTIONMANAGER_BASIC_INFORMATION
global PTRANSACTIONMANAGER_BASIC_INFORMATION: type = @*_TRANSACTIONMANAGER_BASIC_INFORMATION
global _TRANSACTIONMANAGER_LOG_INFORMATION: type <cimport,nodecl,ctypedef> = @record{
  LogIdentity: GUID
}
global TRANSACTIONMANAGER_LOG_INFORMATION: type = @_TRANSACTIONMANAGER_LOG_INFORMATION
global PTRANSACTIONMANAGER_LOG_INFORMATION: type = @*_TRANSACTIONMANAGER_LOG_INFORMATION
global _TRANSACTIONMANAGER_LOGPATH_INFORMATION: type <cimport,nodecl,ctypedef> = @record{
  LogPathLength: culong,
  LogPath: [1]cwchar_t
}
global TRANSACTIONMANAGER_LOGPATH_INFORMATION: type = @_TRANSACTIONMANAGER_LOGPATH_INFORMATION
global PTRANSACTIONMANAGER_LOGPATH_INFORMATION: type = @*_TRANSACTIONMANAGER_LOGPATH_INFORMATION
global _TRANSACTIONMANAGER_RECOVERY_INFORMATION: type <cimport,nodecl,ctypedef> = @record{
  LastRecoveredLsn: culonglong
}
global TRANSACTIONMANAGER_RECOVERY_INFORMATION: type = @_TRANSACTIONMANAGER_RECOVERY_INFORMATION
global PTRANSACTIONMANAGER_RECOVERY_INFORMATION: type = @*_TRANSACTIONMANAGER_RECOVERY_INFORMATION
global _TRANSACTIONMANAGER_OLDEST_INFORMATION: type <cimport,nodecl,ctypedef> = @record{
  OldestTransactionGuid: GUID
}
global TRANSACTIONMANAGER_OLDEST_INFORMATION: type = @_TRANSACTIONMANAGER_OLDEST_INFORMATION
global PTRANSACTIONMANAGER_OLDEST_INFORMATION: type = @*_TRANSACTIONMANAGER_OLDEST_INFORMATION
global _TRANSACTION_PROPERTIES_INFORMATION: type <cimport,nodecl,ctypedef> = @record{
  IsolationLevel: culong,
  IsolationFlags: culong,
  Timeout: LARGE_INTEGER,
  Outcome: culong,
  DescriptionLength: culong,
  Description: [1]cwchar_t
}
global TRANSACTION_PROPERTIES_INFORMATION: type = @_TRANSACTION_PROPERTIES_INFORMATION
global PTRANSACTION_PROPERTIES_INFORMATION: type = @*_TRANSACTION_PROPERTIES_INFORMATION
global _TRANSACTION_BIND_INFORMATION: type <cimport,nodecl,ctypedef> = @record{
  TmHandle: HANDLE
}
global TRANSACTION_BIND_INFORMATION: type = @_TRANSACTION_BIND_INFORMATION
global PTRANSACTION_BIND_INFORMATION: type = @*_TRANSACTION_BIND_INFORMATION
global _TRANSACTION_ENLISTMENT_PAIR: type <cimport,nodecl,ctypedef> = @record{
  EnlistmentId: GUID,
  ResourceManagerId: GUID
}
global TRANSACTION_ENLISTMENT_PAIR: type = @_TRANSACTION_ENLISTMENT_PAIR
global PTRANSACTION_ENLISTMENT_PAIR: type = @*_TRANSACTION_ENLISTMENT_PAIR
global _TRANSACTION_ENLISTMENTS_INFORMATION: type <cimport,nodecl,ctypedef> = @record{
  NumberOfEnlistments: culong,
  EnlistmentPair: [1]TRANSACTION_ENLISTMENT_PAIR
}
global TRANSACTION_ENLISTMENTS_INFORMATION: type = @_TRANSACTION_ENLISTMENTS_INFORMATION
global PTRANSACTION_ENLISTMENTS_INFORMATION: type = @*_TRANSACTION_ENLISTMENTS_INFORMATION
global _TRANSACTION_SUPERIOR_ENLISTMENT_INFORMATION: type <cimport,nodecl,ctypedef> = @record{
  SuperiorEnlistmentPair: TRANSACTION_ENLISTMENT_PAIR
}
global TRANSACTION_SUPERIOR_ENLISTMENT_INFORMATION: type = @_TRANSACTION_SUPERIOR_ENLISTMENT_INFORMATION
global PTRANSACTION_SUPERIOR_ENLISTMENT_INFORMATION: type = @*_TRANSACTION_SUPERIOR_ENLISTMENT_INFORMATION
global _RESOURCEMANAGER_BASIC_INFORMATION: type <cimport,nodecl,ctypedef> = @record{
  ResourceManagerId: GUID,
  DescriptionLength: culong,
  Description: [1]cwchar_t
}
global RESOURCEMANAGER_BASIC_INFORMATION: type = @_RESOURCEMANAGER_BASIC_INFORMATION
global PRESOURCEMANAGER_BASIC_INFORMATION: type = @*_RESOURCEMANAGER_BASIC_INFORMATION
global _RESOURCEMANAGER_COMPLETION_INFORMATION: type <cimport,nodecl,ctypedef> = @record{
  IoCompletionPortHandle: HANDLE,
  CompletionKey: culonglong
}
global RESOURCEMANAGER_COMPLETION_INFORMATION: type = @_RESOURCEMANAGER_COMPLETION_INFORMATION
global PRESOURCEMANAGER_COMPLETION_INFORMATION: type = @*_RESOURCEMANAGER_COMPLETION_INFORMATION
global _TRANSACTION_INFORMATION_CLASS: type <cimport,nodecl,using,ctypedef> = @enum(cint){
  TransactionBasicInformation = 0,
  TransactionPropertiesInformation = 1,
  TransactionEnlistmentInformation = 2,
  TransactionSuperiorEnlistmentInformation = 3,
  TransactionBindInformation = 4,
  TransactionDTCPrivateInformation = 5
}
global TRANSACTION_INFORMATION_CLASS: type = @_TRANSACTION_INFORMATION_CLASS
global _TRANSACTIONMANAGER_INFORMATION_CLASS: type <cimport,nodecl,using,ctypedef> = @enum(cint){
  TransactionManagerBasicInformation = 0,
  TransactionManagerLogInformation = 1,
  TransactionManagerLogPathInformation = 2,
  TransactionManagerOnlineProbeInformation = 3,
  TransactionManagerRecoveryInformation = 4,
  TransactionManagerOldestTransactionInformation = 5
}
global TRANSACTIONMANAGER_INFORMATION_CLASS: type = @_TRANSACTIONMANAGER_INFORMATION_CLASS
global _RESOURCEMANAGER_INFORMATION_CLASS: type <cimport,nodecl,using,ctypedef> = @enum(cint){
  ResourceManagerBasicInformation = 0,
  ResourceManagerCompletionInformation = 1
}
global RESOURCEMANAGER_INFORMATION_CLASS: type = @_RESOURCEMANAGER_INFORMATION_CLASS
global _ENLISTMENT_BASIC_INFORMATION: type <cimport,nodecl,ctypedef> = @record{
  EnlistmentId: GUID,
  TransactionId: GUID,
  ResourceManagerId: GUID
}
global ENLISTMENT_BASIC_INFORMATION: type = @_ENLISTMENT_BASIC_INFORMATION
global PENLISTMENT_BASIC_INFORMATION: type = @*_ENLISTMENT_BASIC_INFORMATION
global _ENLISTMENT_CRM_INFORMATION: type <cimport,nodecl,ctypedef> = @record{
  CrmTransactionManagerId: GUID,
  CrmResourceManagerId: GUID,
  CrmEnlistmentId: GUID
}
global ENLISTMENT_CRM_INFORMATION: type = @_ENLISTMENT_CRM_INFORMATION
global PENLISTMENT_CRM_INFORMATION: type = @*_ENLISTMENT_CRM_INFORMATION
global _ENLISTMENT_INFORMATION_CLASS: type <cimport,nodecl,using,ctypedef> = @enum(cint){
  EnlistmentBasicInformation = 0,
  EnlistmentRecoveryInformation = 1,
  EnlistmentCrmInformation = 2
}
global ENLISTMENT_INFORMATION_CLASS: type = @_ENLISTMENT_INFORMATION_CLASS
global _TRANSACTION_LIST_ENTRY: type <cimport,nodecl,ctypedef> = @record{
  UOW: GUID
}
global TRANSACTION_LIST_ENTRY: type = @_TRANSACTION_LIST_ENTRY
global PTRANSACTION_LIST_ENTRY: type = @*_TRANSACTION_LIST_ENTRY
global _TRANSACTION_LIST_INFORMATION: type <cimport,nodecl,ctypedef> = @record{
  NumberOfTransactions: culong,
  TransactionInformation: [1]TRANSACTION_LIST_ENTRY
}
global TRANSACTION_LIST_INFORMATION: type = @_TRANSACTION_LIST_INFORMATION
global PTRANSACTION_LIST_INFORMATION: type = @*_TRANSACTION_LIST_INFORMATION
global _KTMOBJECT_TYPE: type <cimport,nodecl,using,ctypedef> = @enum(cint){
  KTMOBJECT_TRANSACTION = 0,
  KTMOBJECT_TRANSACTION_MANAGER = 1,
  KTMOBJECT_RESOURCE_MANAGER = 2,
  KTMOBJECT_ENLISTMENT = 3,
  KTMOBJECT_INVALID = 4
}
global KTMOBJECT_TYPE: type = @_KTMOBJECT_TYPE
global PKTMOBJECT_TYPE: type = @*_KTMOBJECT_TYPE
global _KTMOBJECT_CURSOR: type <cimport,nodecl,ctypedef> = @record{
  LastQuery: GUID,
  ObjectIdCount: culong,
  ObjectIds: [1]GUID
}
global KTMOBJECT_CURSOR: type = @_KTMOBJECT_CURSOR
global PKTMOBJECT_CURSOR: type = @*_KTMOBJECT_CURSOR
global _WOW64_FLOATING_SAVE_AREA: type <cimport,nodecl,ctypedef> = @record{
  ControlWord: culong,
  StatusWord: culong,
  TagWord: culong,
  ErrorOffset: culong,
  ErrorSelector: culong,
  DataOffset: culong,
  DataSelector: culong,
  RegisterArea: [80]cuchar,
  Cr0NpxState: culong
}
global WOW64_FLOATING_SAVE_AREA: type = @_WOW64_FLOATING_SAVE_AREA
global PWOW64_FLOATING_SAVE_AREA: type = @*_WOW64_FLOATING_SAVE_AREA
global _WOW64_CONTEXT: type <cimport,nodecl,ctypedef> = @record{
  ContextFlags: culong,
  Dr0: culong,
  Dr1: culong,
  Dr2: culong,
  Dr3: culong,
  Dr6: culong,
  Dr7: culong,
  FloatSave: WOW64_FLOATING_SAVE_AREA,
  SegGs: culong,
  SegFs: culong,
  SegEs: culong,
  SegDs: culong,
  Edi: culong,
  Esi: culong,
  Ebx: culong,
  Edx: culong,
  Ecx: culong,
  Eax: culong,
  Ebp: culong,
  Eip: culong,
  SegCs: culong,
  EFlags: culong,
  Esp: culong,
  SegSs: culong,
  ExtendedRegisters: [512]cuchar
}
global WOW64_CONTEXT: type = @_WOW64_CONTEXT
global PWOW64_CONTEXT: type = @*_WOW64_CONTEXT
global _WOW64_LDT_ENTRY: type <cimport,nodecl,ctypedef> = @record{
  LimitLow: cushort,
  BaseLow: cushort,
  HighWord: union{
    Bytes: record{
      BaseMid: cuchar,
      Flags1: cuchar,
      Flags2: cuchar,
      BaseHi: cuchar
    },
    Bits: record{
      BaseMid: cuchar,
      Type: culong,
      Dpl: culong,
      Pres: culong,
      LimitHi: culong,
      Sys: culong,
      Reserved_0: culong,
      Default_Big: culong,
      Granularity: culong,
      BaseHi: cuchar
    }
  }
}
global WOW64_LDT_ENTRY: type = @_WOW64_LDT_ENTRY
global PWOW64_LDT_ENTRY: type = @*_WOW64_LDT_ENTRY
global _WOW64_DESCRIPTOR_TABLE_ENTRY: type <cimport,nodecl,ctypedef> = @record{
  Selector: culong,
  Descriptor: WOW64_LDT_ENTRY
}
global WOW64_DESCRIPTOR_TABLE_ENTRY: type = @_WOW64_DESCRIPTOR_TABLE_ENTRY
global PWOW64_DESCRIPTOR_TABLE_ENTRY: type = @*_WOW64_DESCRIPTOR_TABLE_ENTRY
global SPHANDLE: type = @*HANDLE
global LPHANDLE: type = @*HANDLE
global HGLOBAL: type = @pointer
global HLOCAL: type = @pointer
global GLOBALHANDLE: type = @pointer
global LOCALHANDLE: type = @pointer
global FARPROC: type <cimport,nodecl> = @function(): clonglong
global NEARPROC: type <cimport,nodecl> = @function(): clonglong
global PROC: type <cimport,nodecl> = @function(): clonglong
global HINSTANCE__: type <cimport,nodecl,ctypedef> = @record{
  unused: cint
}
global HINSTANCE: type = @*HINSTANCE__
global HKEY__: type <cimport,nodecl,ctypedef> = @record{
  unused: cint
}
global HKEY: type = @*HKEY__
global PHKEY: type = @*HKEY
global HKL__: type <cimport,nodecl,ctypedef> = @record{
  unused: cint
}
global HKL: type = @*HKL__
global HLSURF__: type <cimport,nodecl,ctypedef> = @record{
  unused: cint
}
global HLSURF: type = @*HLSURF__
global HMETAFILE__: type <cimport,nodecl,ctypedef> = @record{
  unused: cint
}
global HMETAFILE: type = @*HMETAFILE__
global HMODULE: type = @*HINSTANCE__
global HRGN__: type <cimport,nodecl,ctypedef> = @record{
  unused: cint
}
global HRGN: type = @*HRGN__
global HRSRC__: type <cimport,nodecl,ctypedef> = @record{
  unused: cint
}
global HRSRC: type = @*HRSRC__
global HSPRITE__: type <cimport,nodecl,ctypedef> = @record{
  unused: cint
}
global HSPRITE: type = @*HSPRITE__
global HSTR__: type <cimport,nodecl,ctypedef> = @record{
  unused: cint
}
global HSTR: type = @*HSTR__
global HTASK__: type <cimport,nodecl,ctypedef> = @record{
  unused: cint
}
global HTASK: type = @*HTASK__
global HWINSTA__: type <cimport,nodecl,ctypedef> = @record{
  unused: cint
}
global HWINSTA: type = @*HWINSTA__
global _FILETIME: type <cimport,nodecl,ctypedef> = @record{
  dwLowDateTime: culong,
  dwHighDateTime: culong
}
global FILETIME: type = @_FILETIME
global PFILETIME: type = @*_FILETIME
global LPFILETIME: type = @*_FILETIME
global HWND__: type <cimport,nodecl,ctypedef> = @record{
  unused: cint
}
global HWND: type = @*HWND__
global HHOOK__: type <cimport,nodecl,ctypedef> = @record{
  unused: cint
}
global HHOOK: type = @*HHOOK__
global HGDIOBJ: type = @pointer
global HACCEL__: type <cimport,nodecl,ctypedef> = @record{
  unused: cint
}
global HACCEL: type = @*HACCEL__
global HBITMAP__: type <cimport,nodecl,ctypedef> = @record{
  unused: cint
}
global HBITMAP: type = @*HBITMAP__
global HBRUSH__: type <cimport,nodecl,ctypedef> = @record{
  unused: cint
}
global HBRUSH: type = @*HBRUSH__
global HCOLORSPACE__: type <cimport,nodecl,ctypedef> = @record{
  unused: cint
}
global HCOLORSPACE: type = @*HCOLORSPACE__
global HDC__: type <cimport,nodecl,ctypedef> = @record{
  unused: cint
}
global HDC: type = @*HDC__
global HGLRC__: type <cimport,nodecl,ctypedef> = @record{
  unused: cint
}
global HGLRC: type = @*HGLRC__
global HDESK__: type <cimport,nodecl,ctypedef> = @record{
  unused: cint
}
global HDESK: type = @*HDESK__
global HENHMETAFILE__: type <cimport,nodecl,ctypedef> = @record{
  unused: cint
}
global HENHMETAFILE: type = @*HENHMETAFILE__
global HFONT__: type <cimport,nodecl,ctypedef> = @record{
  unused: cint
}
global HFONT: type = @*HFONT__
global HICON__: type <cimport,nodecl,ctypedef> = @record{
  unused: cint
}
global HICON: type = @*HICON__
global HMENU__: type <cimport,nodecl,ctypedef> = @record{
  unused: cint
}
global HMENU: type = @*HMENU__
global HPALETTE__: type <cimport,nodecl,ctypedef> = @record{
  unused: cint
}
global HPALETTE: type = @*HPALETTE__
global HPEN__: type <cimport,nodecl,ctypedef> = @record{
  unused: cint
}
global HPEN: type = @*HPEN__
global HMONITOR__: type <cimport,nodecl,ctypedef> = @record{
  unused: cint
}
global HMONITOR: type = @*HMONITOR__
global HWINEVENTHOOK__: type <cimport,nodecl,ctypedef> = @record{
  unused: cint
}
global HWINEVENTHOOK: type = @*HWINEVENTHOOK__
global HCURSOR: type = @*HICON__
global HUMPD__: type <cimport,nodecl,ctypedef> = @record{
  unused: cint
}
global HUMPD: type = @*HUMPD__
global LPCOLORREF: type = @*culong
global tagRECT: type <cimport,nodecl,ctypedef> = @record{
  left: clong,
  top: clong,
  right: clong,
  bottom: clong
}
global RECT: type = @tagRECT
global PRECT: type = @*tagRECT
global NPRECT: type = @*tagRECT
global LPRECT: type = @*tagRECT
global LPCRECT: type = @*RECT
global _RECTL: type <cimport,nodecl,ctypedef> = @record{
  left: clong,
  top: clong,
  right: clong,
  bottom: clong
}
global RECTL: type = @_RECTL
global PRECTL: type = @*_RECTL
global LPRECTL: type = @*_RECTL
global LPCRECTL: type = @*RECTL
global tagPOINT: type <cimport,nodecl,ctypedef> = @record{
  x: clong,
  y: clong
}
global POINT: type = @tagPOINT
global PPOINT: type = @*tagPOINT
global NPPOINT: type = @*tagPOINT
global LPPOINT: type = @*tagPOINT
global _POINTL: type <cimport,nodecl,ctypedef> = @record{
  x: clong,
  y: clong
}
global POINTL: type = @_POINTL
global PPOINTL: type = @*_POINTL
global tagSIZE: type <cimport,nodecl,ctypedef> = @record{
  cx: clong,
  cy: clong
}
global SIZE: type = @tagSIZE
global PSIZE: type = @*tagSIZE
global LPSIZE: type = @*tagSIZE
global SIZEL: type = @tagSIZE
global PSIZEL: type = @*SIZE
global LPSIZEL: type = @*SIZE
global tagPOINTS: type <cimport,nodecl,ctypedef> = @record{
  x: cshort,
  y: cshort
}
global POINTS: type = @tagPOINTS
global PPOINTS: type = @*tagPOINTS
global LPPOINTS: type = @*tagPOINTS
global APP_LOCAL_DEVICE_ID: type <cimport,nodecl> = @record{
  value: [32]cuchar
}
global DPI_AWARENESS_CONTEXT__: type <cimport,nodecl,ctypedef> = @record{
  unused: cint
}
global DPI_AWARENESS_CONTEXT: type = @*DPI_AWARENESS_CONTEXT__
global DPI_AWARENESS: type <cimport,nodecl,using> = @enum(cint){
  DPI_AWARENESS_INVALID = -1,
  DPI_AWARENESS_UNAWARE = 0,
  DPI_AWARENESS_SYSTEM_AWARE = 1,
  DPI_AWARENESS_PER_MONITOR_AWARE = 2
}
global DPI_HOSTING_BEHAVIOR: type <cimport,nodecl,using> = @enum(cint){
  DPI_HOSTING_BEHAVIOR_INVALID = -1,
  DPI_HOSTING_BEHAVIOR_DEFAULT = 0,
  DPI_HOSTING_BEHAVIOR_MIXED = 1
}
global _SECURITY_ATTRIBUTES: type <cimport,nodecl,ctypedef> = @record{
  nLength: culong,
  lpSecurityDescriptor: LPVOID,
  bInheritHandle: cint
}
global SECURITY_ATTRIBUTES: type = @_SECURITY_ATTRIBUTES
global PSECURITY_ATTRIBUTES: type = @*_SECURITY_ATTRIBUTES
global LPSECURITY_ATTRIBUTES: type = @*_SECURITY_ATTRIBUTES
global _OVERLAPPED: type <cimport,nodecl,ctypedef> = @record{
  Internal: culonglong,
  InternalHigh: culonglong,
  __unnamed1: union{
    __unnamed1: record{
      Offset: culong,
      OffsetHigh: culong
    },
    Pointer: PVOID
  },
  hEvent: HANDLE
}
global OVERLAPPED: type = @_OVERLAPPED
global LPOVERLAPPED: type = @*_OVERLAPPED
global _OVERLAPPED_ENTRY: type <cimport,nodecl,ctypedef> = @record{
  lpCompletionKey: culonglong,
  lpOverlapped: LPOVERLAPPED,
  Internal: culonglong,
  dwNumberOfBytesTransferred: culong
}
global OVERLAPPED_ENTRY: type = @_OVERLAPPED_ENTRY
global LPOVERLAPPED_ENTRY: type = @*_OVERLAPPED_ENTRY
global _SYSTEMTIME: type <cimport,nodecl,ctypedef> = @record{
  wYear: cushort,
  wMonth: cushort,
  wDayOfWeek: cushort,
  wDay: cushort,
  wHour: cushort,
  wMinute: cushort,
  wSecond: cushort,
  wMilliseconds: cushort
}
global SYSTEMTIME: type = @_SYSTEMTIME
global PSYSTEMTIME: type = @*_SYSTEMTIME
global LPSYSTEMTIME: type = @*_SYSTEMTIME
global _WIN32_FIND_DATAA: type <cimport,nodecl,ctypedef> = @record{
  dwFileAttributes: culong,
  ftCreationTime: FILETIME,
  ftLastAccessTime: FILETIME,
  ftLastWriteTime: FILETIME,
  nFileSizeHigh: culong,
  nFileSizeLow: culong,
  dwReserved0: culong,
  dwReserved1: culong,
  cFileName: [260]cchar,
  cAlternateFileName: [14]cchar
}
global WIN32_FIND_DATAA: type = @_WIN32_FIND_DATAA
global PWIN32_FIND_DATAA: type = @*_WIN32_FIND_DATAA
global LPWIN32_FIND_DATAA: type = @*_WIN32_FIND_DATAA
global _WIN32_FIND_DATAW: type <cimport,nodecl,ctypedef> = @record{
  dwFileAttributes: culong,
  ftCreationTime: FILETIME,
  ftLastAccessTime: FILETIME,
  ftLastWriteTime: FILETIME,
  nFileSizeHigh: culong,
  nFileSizeLow: culong,
  dwReserved0: culong,
  dwReserved1: culong,
  cFileName: [260]cwchar_t,
  cAlternateFileName: [14]cwchar_t
}
global WIN32_FIND_DATAW: type = @_WIN32_FIND_DATAW
global PWIN32_FIND_DATAW: type = @*_WIN32_FIND_DATAW
global LPWIN32_FIND_DATAW: type = @*_WIN32_FIND_DATAW
global WIN32_FIND_DATA: type = @_WIN32_FIND_DATAA
global PWIN32_FIND_DATA: type = @*_WIN32_FIND_DATAA
global LPWIN32_FIND_DATA: type = @*_WIN32_FIND_DATAA
global _FINDEX_INFO_LEVELS: type <cimport,nodecl,using,ctypedef> = @enum(cint){
  FindExInfoStandard = 0,
  FindExInfoBasic = 1,
  FindExInfoMaxInfoLevel = 2
}
global FINDEX_INFO_LEVELS: type = @_FINDEX_INFO_LEVELS
global _FINDEX_SEARCH_OPS: type <cimport,nodecl,using,ctypedef> = @enum(cint){
  FindExSearchNameMatch = 0,
  FindExSearchLimitToDirectories = 1,
  FindExSearchLimitToDevices = 2,
  FindExSearchMaxSearchOp = 3
}
global FINDEX_SEARCH_OPS: type = @_FINDEX_SEARCH_OPS
global _GET_FILEEX_INFO_LEVELS: type <cimport,nodecl,using,ctypedef> = @enum(cint){
  GetFileExInfoStandard = 0,
  GetFileExMaxInfoLevel = 1
}
global GET_FILEEX_INFO_LEVELS: type = @_GET_FILEEX_INFO_LEVELS
global _FILE_INFO_BY_HANDLE_CLASS: type <cimport,nodecl,using,ctypedef> = @enum(cint){
  FileBasicInfo = 0,
  FileStandardInfo = 1,
  FileNameInfo = 2,
  FileRenameInfo = 3,
  FileDispositionInfo = 4,
  FileAllocationInfo = 5,
  FileEndOfFileInfo = 6,
  FileStreamInfo = 7,
  FileCompressionInfo = 8,
  FileAttributeTagInfo = 9,
  FileIdBothDirectoryInfo = 10,
  FileIdBothDirectoryRestartInfo = 11,
  FileIoPriorityHintInfo = 12,
  FileRemoteProtocolInfo = 13,
  FileFullDirectoryInfo = 14,
  FileFullDirectoryRestartInfo = 15,
  FileCaseSensitiveInfo = 16,
  FileNormalizedNameInfo = 17,
  MaximumFileInfoByHandleClass = 18
}
global FILE_INFO_BY_HANDLE_CLASS: type = @_FILE_INFO_BY_HANDLE_CLASS
global PFILE_INFO_BY_HANDLE_CLASS: type = @*_FILE_INFO_BY_HANDLE_CLASS
global CRITICAL_SECTION: type = @_RTL_CRITICAL_SECTION
global PCRITICAL_SECTION: type = @*_RTL_CRITICAL_SECTION
global LPCRITICAL_SECTION: type = @*_RTL_CRITICAL_SECTION
global CRITICAL_SECTION_DEBUG: type = @_RTL_CRITICAL_SECTION_DEBUG
global PCRITICAL_SECTION_DEBUG: type = @*_RTL_CRITICAL_SECTION_DEBUG
global LPCRITICAL_SECTION_DEBUG: type = @*_RTL_CRITICAL_SECTION_DEBUG
global LPOVERLAPPED_COMPLETION_ROUTINE: type <cimport,nodecl> = @function(culong, culong, LPOVERLAPPED): void
global _PROCESS_HEAP_ENTRY: type <cimport,nodecl,ctypedef> = @record{
  lpData: PVOID,
  cbData: culong,
  cbOverhead: cuchar,
  iRegionIndex: cuchar,
  wFlags: cushort,
  __unnamed1: union{
    Block: record{
      hMem: HANDLE,
      dwReserved: [3]culong
    },
    Region: record{
      dwCommittedSize: culong,
      dwUnCommittedSize: culong,
      lpFirstBlock: LPVOID,
      lpLastBlock: LPVOID
    }
  }
}
global PROCESS_HEAP_ENTRY: type = @_PROCESS_HEAP_ENTRY
global LPPROCESS_HEAP_ENTRY: type = @*_PROCESS_HEAP_ENTRY
global PPROCESS_HEAP_ENTRY: type = @*_PROCESS_HEAP_ENTRY
global _REASON_CONTEXT: type <cimport,nodecl,ctypedef> = @record{
  Version: culong,
  Flags: culong,
  Reason: union{
    Detailed: record{
      LocalizedReasonModule: HMODULE,
      LocalizedReasonId: culong,
      ReasonStringCount: culong,
      ReasonStrings: *LPWSTR
    },
    SimpleReasonString: LPWSTR
  }
}
global REASON_CONTEXT: type = @_REASON_CONTEXT
global PREASON_CONTEXT: type = @*_REASON_CONTEXT
global PTHREAD_START_ROUTINE: type <cimport,nodecl> = @function(LPVOID): culong
global LPTHREAD_START_ROUTINE: type <cimport,nodecl> = @function(LPVOID): culong
global PENCLAVE_ROUTINE: type <cimport,nodecl> = @function(LPVOID): LPVOID
global LPENCLAVE_ROUTINE: type <cimport,nodecl> = @function(LPVOID): LPVOID
global _EXCEPTION_DEBUG_INFO: type <cimport,nodecl,ctypedef> = @record{
  ExceptionRecord: EXCEPTION_RECORD,
  dwFirstChance: culong
}
global EXCEPTION_DEBUG_INFO: type = @_EXCEPTION_DEBUG_INFO
global LPEXCEPTION_DEBUG_INFO: type = @*_EXCEPTION_DEBUG_INFO
global _CREATE_THREAD_DEBUG_INFO: type <cimport,nodecl,ctypedef> = @record{
  hThread: HANDLE,
  lpThreadLocalBase: LPVOID,
  lpStartAddress: LPTHREAD_START_ROUTINE
}
global CREATE_THREAD_DEBUG_INFO: type = @_CREATE_THREAD_DEBUG_INFO
global LPCREATE_THREAD_DEBUG_INFO: type = @*_CREATE_THREAD_DEBUG_INFO
global _CREATE_PROCESS_DEBUG_INFO: type <cimport,nodecl,ctypedef> = @record{
  hFile: HANDLE,
  hProcess: HANDLE,
  hThread: HANDLE,
  lpBaseOfImage: LPVOID,
  dwDebugInfoFileOffset: culong,
  nDebugInfoSize: culong,
  lpThreadLocalBase: LPVOID,
  lpStartAddress: LPTHREAD_START_ROUTINE,
  lpImageName: LPVOID,
  fUnicode: cushort
}
global CREATE_PROCESS_DEBUG_INFO: type = @_CREATE_PROCESS_DEBUG_INFO
global LPCREATE_PROCESS_DEBUG_INFO: type = @*_CREATE_PROCESS_DEBUG_INFO
global _EXIT_THREAD_DEBUG_INFO: type <cimport,nodecl,ctypedef> = @record{
  dwExitCode: culong
}
global EXIT_THREAD_DEBUG_INFO: type = @_EXIT_THREAD_DEBUG_INFO
global LPEXIT_THREAD_DEBUG_INFO: type = @*_EXIT_THREAD_DEBUG_INFO
global _EXIT_PROCESS_DEBUG_INFO: type <cimport,nodecl,ctypedef> = @record{
  dwExitCode: culong
}
global EXIT_PROCESS_DEBUG_INFO: type = @_EXIT_PROCESS_DEBUG_INFO
global LPEXIT_PROCESS_DEBUG_INFO: type = @*_EXIT_PROCESS_DEBUG_INFO
global _LOAD_DLL_DEBUG_INFO: type <cimport,nodecl,ctypedef> = @record{
  hFile: HANDLE,
  lpBaseOfDll: LPVOID,
  dwDebugInfoFileOffset: culong,
  nDebugInfoSize: culong,
  lpImageName: LPVOID,
  fUnicode: cushort
}
global LOAD_DLL_DEBUG_INFO: type = @_LOAD_DLL_DEBUG_INFO
global LPLOAD_DLL_DEBUG_INFO: type = @*_LOAD_DLL_DEBUG_INFO
global _UNLOAD_DLL_DEBUG_INFO: type <cimport,nodecl,ctypedef> = @record{
  lpBaseOfDll: LPVOID
}
global UNLOAD_DLL_DEBUG_INFO: type = @_UNLOAD_DLL_DEBUG_INFO
global LPUNLOAD_DLL_DEBUG_INFO: type = @*_UNLOAD_DLL_DEBUG_INFO
global _OUTPUT_DEBUG_STRING_INFO: type <cimport,nodecl,ctypedef> = @record{
  lpDebugStringData: LPSTR,
  fUnicode: cushort,
  nDebugStringLength: cushort
}
global OUTPUT_DEBUG_STRING_INFO: type = @_OUTPUT_DEBUG_STRING_INFO
global LPOUTPUT_DEBUG_STRING_INFO: type = @*_OUTPUT_DEBUG_STRING_INFO
global _RIP_INFO: type <cimport,nodecl,ctypedef> = @record{
  dwError: culong,
  dwType: culong
}
global RIP_INFO: type = @_RIP_INFO
global LPRIP_INFO: type = @*_RIP_INFO
global _DEBUG_EVENT: type <cimport,nodecl,ctypedef> = @record{
  dwDebugEventCode: culong,
  dwProcessId: culong,
  dwThreadId: culong,
  u: union{
    Exception: EXCEPTION_DEBUG_INFO,
    CreateThread: CREATE_THREAD_DEBUG_INFO,
    CreateProcessInfo: CREATE_PROCESS_DEBUG_INFO,
    ExitThread: EXIT_THREAD_DEBUG_INFO,
    ExitProcess: EXIT_PROCESS_DEBUG_INFO,
    LoadDll: LOAD_DLL_DEBUG_INFO,
    UnloadDll: UNLOAD_DLL_DEBUG_INFO,
    DebugString: OUTPUT_DEBUG_STRING_INFO,
    RipInfo: RIP_INFO
  }
}
global DEBUG_EVENT: type = @_DEBUG_EVENT
global LPDEBUG_EVENT: type = @*_DEBUG_EVENT
global LPCONTEXT: type = @*_CONTEXT
global _CONTRACT_DESCRIPTION: type <cimport,nodecl,forwarddecl,ctypedef> = @record{}
global CONTRACT_DESCRIPTION: type = @_CONTRACT_DESCRIPTION
global _BEM_REFERENCE: type <cimport,nodecl,forwarddecl,ctypedef> = @record{}
global BEM_REFERENCE: type = @_BEM_REFERENCE
global BEM_FREE_INTERFACE_CALLBACK: type <cimport,nodecl> = @function(pointer): void
global function BemCreateReference(iid: *GUID, interfaceInstance: pointer, freeCallback: BEM_FREE_INTERFACE_CALLBACK, reference: **BEM_REFERENCE): clong <cimport,nodecl> end
global function BemCreateContractFrom(dllPath: LPCWSTR, extensionId: *GUID, contractDescription: *CONTRACT_DESCRIPTION, hostContract: pointer, contract: *pointer): clong <cimport,nodecl> end
global function BemCopyReference(reference: *BEM_REFERENCE, copiedReference: **BEM_REFERENCE): clong <cimport,nodecl> end
global function BemFreeReference(reference: *BEM_REFERENCE): void <cimport,nodecl> end
global function BemFreeContract(contract: pointer): void <cimport,nodecl> end
global function DebugBreak(): void <cimport,nodecl> end
global function IsDebuggerPresent(): cint <cimport,nodecl> end
global function OutputDebugStringA(lpOutputString: LPCSTR): void <cimport,nodecl> end
global function OutputDebugStringW(lpOutputString: LPCWSTR): void <cimport,nodecl> end
global function ContinueDebugEvent(dwProcessId: culong, dwThreadId: culong, dwContinueStatus: culong): cint <cimport,nodecl> end
global function WaitForDebugEvent(lpDebugEvent: LPDEBUG_EVENT, dwMilliseconds: culong): cint <cimport,nodecl> end
global function DebugActiveProcess(dwProcessId: culong): cint <cimport,nodecl> end
global function DebugActiveProcessStop(dwProcessId: culong): cint <cimport,nodecl> end
global function CheckRemoteDebuggerPresent(hProcess: HANDLE, pbDebuggerPresent: PBOOL): cint <cimport,nodecl> end
global PTOP_LEVEL_EXCEPTION_FILTER: type <cimport,nodecl> = @function(*_EXCEPTION_POINTERS): clong
global LPTOP_LEVEL_EXCEPTION_FILTER: type <cimport,nodecl> = @function(*_EXCEPTION_POINTERS): clong
global function SetUnhandledExceptionFilter(lpTopLevelExceptionFilter: LPTOP_LEVEL_EXCEPTION_FILTER): LPTOP_LEVEL_EXCEPTION_FILTER <cimport,nodecl> end
global function UnhandledExceptionFilter(ExceptionInfo: *_EXCEPTION_POINTERS): clong <cimport,nodecl> end
global function AddVectoredExceptionHandler(First: culong, Handler: PVECTORED_EXCEPTION_HANDLER): PVOID <cimport,nodecl> end
global function RemoveVectoredExceptionHandler(Handle: PVOID): culong <cimport,nodecl> end
global function AddVectoredContinueHandler(First: culong, Handler: PVECTORED_EXCEPTION_HANDLER): PVOID <cimport,nodecl> end
global function RemoveVectoredContinueHandler(Handle: PVOID): culong <cimport,nodecl> end
global function GetErrorMode(): cuint <cimport,nodecl> end
global function RaiseException(dwExceptionCode: culong, dwExceptionFlags: culong, nNumberOfArguments: culong, lpArguments: *culonglong): void <cimport,nodecl> end
global function SetErrorMode(uMode: cuint): cuint <cimport,nodecl> end
global function GetLastError(): culong <cimport,nodecl> end
global function SetLastError(dwErrCode: culong): void <cimport,nodecl> end
global function FlsAlloc(lpCallback: PFLS_CALLBACK_FUNCTION): culong <cimport,nodecl> end
global function FlsGetValue(dwFlsIndex: culong): PVOID <cimport,nodecl> end
global function FlsSetValue(dwFlsIndex: culong, lpFlsData: PVOID): cint <cimport,nodecl> end
global function FlsFree(dwFlsIndex: culong): cint <cimport,nodecl> end
global function IsThreadAFiber(): cint <cimport,nodecl> end
global function GetFileAttributesW(lpFileName: LPCWSTR): culong <cimport,nodecl> end
global function SetFilePointer(hFile: HANDLE, lDistanceToMove: clong, lpDistanceToMoveHigh: PLONG, dwMoveMethod: culong): culong <cimport,nodecl> end
global _BY_HANDLE_FILE_INFORMATION: type <cimport,nodecl,ctypedef> = @record{
  dwFileAttributes: culong,
  ftCreationTime: FILETIME,
  ftLastAccessTime: FILETIME,
  ftLastWriteTime: FILETIME,
  dwVolumeSerialNumber: culong,
  nFileSizeHigh: culong,
  nFileSizeLow: culong,
  nNumberOfLinks: culong,
  nFileIndexHigh: culong,
  nFileIndexLow: culong
}
global BY_HANDLE_FILE_INFORMATION: type = @_BY_HANDLE_FILE_INFORMATION
global PBY_HANDLE_FILE_INFORMATION: type = @*_BY_HANDLE_FILE_INFORMATION
global LPBY_HANDLE_FILE_INFORMATION: type = @*_BY_HANDLE_FILE_INFORMATION
global function GetFileInformationByHandle(hFile: HANDLE, lpFileInformation: LPBY_HANDLE_FILE_INFORMATION): cint <cimport,nodecl> end
global function CreateFileA(lpFileName: LPCSTR, dwDesiredAccess: culong, dwShareMode: culong, lpSecurityAttributes: LPSECURITY_ATTRIBUTES, dwCreationDisposition: culong, dwFlagsAndAttributes: culong, hTemplateFile: HANDLE): HANDLE <cimport,nodecl> end
global function DefineDosDeviceW(dwFlags: culong, lpDeviceName: LPCWSTR, lpTargetPath: LPCWSTR): cint <cimport,nodecl> end
global function FindCloseChangeNotification(hChangeHandle: HANDLE): cint <cimport,nodecl> end
global function FindFirstChangeNotificationA(lpPathName: LPCSTR, bWatchSubtree: cint, dwNotifyFilter: culong): HANDLE <cimport,nodecl> end
global function FindFirstChangeNotificationW(lpPathName: LPCWSTR, bWatchSubtree: cint, dwNotifyFilter: culong): HANDLE <cimport,nodecl> end
global function FindFirstVolumeW(lpszVolumeName: LPWSTR, cchBufferLength: culong): HANDLE <cimport,nodecl> end
global function FindNextChangeNotification(hChangeHandle: HANDLE): cint <cimport,nodecl> end
global function FindNextVolumeW(hFindVolume: HANDLE, lpszVolumeName: LPWSTR, cchBufferLength: culong): cint <cimport,nodecl> end
global function FindVolumeClose(hFindVolume: HANDLE): cint <cimport,nodecl> end
global function CreateFileW(lpFileName: LPCWSTR, dwDesiredAccess: culong, dwShareMode: culong, lpSecurityAttributes: LPSECURITY_ATTRIBUTES, dwCreationDisposition: culong, dwFlagsAndAttributes: culong, hTemplateFile: HANDLE): HANDLE <cimport,nodecl> end
global function GetFileSize(hFile: HANDLE, lpFileSizeHigh: LPDWORD): culong <cimport,nodecl> end
global function CompareFileTime(lpFileTime1: *FILETIME, lpFileTime2: *FILETIME): clong <cimport,nodecl> end
global function DeleteVolumeMountPointW(lpszVolumeMountPoint: LPCWSTR): cint <cimport,nodecl> end
global function FileTimeToLocalFileTime(lpFileTime: *FILETIME, lpLocalFileTime: LPFILETIME): cint <cimport,nodecl> end
global function FindFirstFileA(lpFileName: LPCSTR, lpFindFileData: LPWIN32_FIND_DATAA): HANDLE <cimport,nodecl> end
global function FindFirstFileW(lpFileName: LPCWSTR, lpFindFileData: LPWIN32_FIND_DATAW): HANDLE <cimport,nodecl> end
global function GetDiskFreeSpaceA(lpRootPathName: LPCSTR, lpSectorsPerCluster: LPDWORD, lpBytesPerSector: LPDWORD, lpNumberOfFreeClusters: LPDWORD, lpTotalNumberOfClusters: LPDWORD): cint <cimport,nodecl> end
global function GetDiskFreeSpaceW(lpRootPathName: LPCWSTR, lpSectorsPerCluster: LPDWORD, lpBytesPerSector: LPDWORD, lpNumberOfFreeClusters: LPDWORD, lpTotalNumberOfClusters: LPDWORD): cint <cimport,nodecl> end
global function GetDriveTypeA(lpRootPathName: LPCSTR): cuint <cimport,nodecl> end
global function GetDriveTypeW(lpRootPathName: LPCWSTR): cuint <cimport,nodecl> end
global function GetFileAttributesA(lpFileName: LPCSTR): culong <cimport,nodecl> end
global function GetFileSizeEx(hFile: HANDLE, lpFileSize: PLARGE_INTEGER): cint <cimport,nodecl> end
global function GetFileTime(hFile: HANDLE, lpCreationTime: LPFILETIME, lpLastAccessTime: LPFILETIME, lpLastWriteTime: LPFILETIME): cint <cimport,nodecl> end
global function GetFileType(hFile: HANDLE): culong <cimport,nodecl> end
global function GetFullPathNameA(lpFileName: LPCSTR, nBufferLength: culong, lpBuffer: LPSTR, lpFilePart: *LPSTR): culong <cimport,nodecl> end
global function GetFullPathNameW(lpFileName: LPCWSTR, nBufferLength: culong, lpBuffer: LPWSTR, lpFilePart: *LPWSTR): culong <cimport,nodecl> end
global function GetLogicalDrives(): culong <cimport,nodecl> end
global function GetLogicalDriveStringsW(nBufferLength: culong, lpBuffer: LPWSTR): culong <cimport,nodecl> end
global function GetShortPathNameW(lpszLongPath: LPCWSTR, lpszShortPath: LPWSTR, cchBuffer: culong): culong <cimport,nodecl> end
global function GetVolumePathNameW(lpszFileName: LPCWSTR, lpszVolumePathName: LPWSTR, cchBufferLength: culong): cint <cimport,nodecl> end
global function QueryDosDeviceW(lpDeviceName: LPCWSTR, lpTargetPath: LPWSTR, ucchMax: culong): culong <cimport,nodecl> end
global function ReadFileScatter(hFile: HANDLE, aSegmentArray: *FILE_SEGMENT_ELEMENT, nNumberOfBytesToRead: culong, lpReserved: LPDWORD, lpOverlapped: LPOVERLAPPED): cint <cimport,nodecl> end
global function SetFileValidData(hFile: HANDLE, ValidDataLength: clonglong): cint <cimport,nodecl> end
global function WriteFileGather(hFile: HANDLE, aSegmentArray: *FILE_SEGMENT_ELEMENT, nNumberOfBytesToWrite: culong, lpReserved: LPDWORD, lpOverlapped: LPOVERLAPPED): cint <cimport,nodecl> end
global function GetVolumeNameForVolumeMountPointW(lpszVolumeMountPoint: LPCWSTR, lpszVolumeName: LPWSTR, cchBufferLength: culong): cint <cimport,nodecl> end
global function GetVolumePathNamesForVolumeNameW(lpszVolumeName: LPCWSTR, lpszVolumePathNames: LPWCH, cchBufferLength: culong, lpcchReturnLength: PDWORD): cint <cimport,nodecl> end
global function GetVolumeInformationByHandleW(hFile: HANDLE, lpVolumeNameBuffer: LPWSTR, nVolumeNameSize: culong, lpVolumeSerialNumber: LPDWORD, lpMaximumComponentLength: LPDWORD, lpFileSystemFlags: LPDWORD, lpFileSystemNameBuffer: LPWSTR, nFileSystemNameSize: culong): cint <cimport,nodecl> end
global function GetLongPathNameA(lpszShortPath: LPCSTR, lpszLongPath: LPSTR, cchBuffer: culong): culong <cimport,nodecl> end
global function GetLongPathNameW(lpszShortPath: LPCWSTR, lpszLongPath: LPWSTR, cchBuffer: culong): culong <cimport,nodecl> end
global function GetTempFileNameA(lpPathName: LPCSTR, lpPrefixString: LPCSTR, uUnique: cuint, lpTempFileName: LPSTR): cuint <cimport,nodecl> end
global function GetTempFileNameW(lpPathName: LPCWSTR, lpPrefixString: LPCWSTR, uUnique: cuint, lpTempFileName: LPWSTR): cuint <cimport,nodecl> end
global function GetVolumeInformationW(lpRootPathName: LPCWSTR, lpVolumeNameBuffer: LPWSTR, nVolumeNameSize: culong, lpVolumeSerialNumber: LPDWORD, lpMaximumComponentLength: LPDWORD, lpFileSystemFlags: LPDWORD, lpFileSystemNameBuffer: LPWSTR, nFileSystemNameSize: culong): cint <cimport,nodecl> end
global function LocalFileTimeToFileTime(lpLocalFileTime: *FILETIME, lpFileTime: LPFILETIME): cint <cimport,nodecl> end
global function LockFile(hFile: HANDLE, dwFileOffsetLow: culong, dwFileOffsetHigh: culong, nNumberOfBytesToLockLow: culong, nNumberOfBytesToLockHigh: culong): cint <cimport,nodecl> end
global function ReadFileEx(hFile: HANDLE, lpBuffer: LPVOID, nNumberOfBytesToRead: culong, lpOverlapped: LPOVERLAPPED, lpCompletionRoutine: LPOVERLAPPED_COMPLETION_ROUTINE): cint <cimport,nodecl> end
global function SetFileTime(hFile: HANDLE, lpCreationTime: *FILETIME, lpLastAccessTime: *FILETIME, lpLastWriteTime: *FILETIME): cint <cimport,nodecl> end
global function UnlockFile(hFile: HANDLE, dwFileOffsetLow: culong, dwFileOffsetHigh: culong, nNumberOfBytesToUnlockLow: culong, nNumberOfBytesToUnlockHigh: culong): cint <cimport,nodecl> end
global function WriteFileEx(hFile: HANDLE, lpBuffer: LPCVOID, nNumberOfBytesToWrite: culong, lpOverlapped: LPOVERLAPPED, lpCompletionRoutine: LPOVERLAPPED_COMPLETION_ROUTINE): cint <cimport,nodecl> end
global function GetFinalPathNameByHandleA(hFile: HANDLE, lpszFilePath: LPSTR, cchFilePath: culong, dwFlags: culong): culong <cimport,nodecl> end
global function GetFinalPathNameByHandleW(hFile: HANDLE, lpszFilePath: LPWSTR, cchFilePath: culong, dwFlags: culong): culong <cimport,nodecl> end
global _WIN32_FILE_ATTRIBUTE_DATA: type <cimport,nodecl,ctypedef> = @record{
  dwFileAttributes: culong,
  ftCreationTime: FILETIME,
  ftLastAccessTime: FILETIME,
  ftLastWriteTime: FILETIME,
  nFileSizeHigh: culong,
  nFileSizeLow: culong
}
global WIN32_FILE_ATTRIBUTE_DATA: type = @_WIN32_FILE_ATTRIBUTE_DATA
global LPWIN32_FILE_ATTRIBUTE_DATA: type = @*_WIN32_FILE_ATTRIBUTE_DATA
global function CreateDirectoryA(lpPathName: LPCSTR, lpSecurityAttributes: LPSECURITY_ATTRIBUTES): cint <cimport,nodecl> end
global function CreateDirectoryW(lpPathName: LPCWSTR, lpSecurityAttributes: LPSECURITY_ATTRIBUTES): cint <cimport,nodecl> end
global function DeleteFileA(lpFileName: LPCSTR): cint <cimport,nodecl> end
global function DeleteFileW(lpFileName: LPCWSTR): cint <cimport,nodecl> end
global function FindClose(hFindFile: HANDLE): cint <cimport,nodecl> end
global function FindFirstFileExA(lpFileName: LPCSTR, fInfoLevelId: FINDEX_INFO_LEVELS, lpFindFileData: LPVOID, fSearchOp: FINDEX_SEARCH_OPS, lpSearchFilter: LPVOID, dwAdditionalFlags: culong): HANDLE <cimport,nodecl> end
global function FindFirstFileExW(lpFileName: LPCWSTR, fInfoLevelId: FINDEX_INFO_LEVELS, lpFindFileData: LPVOID, fSearchOp: FINDEX_SEARCH_OPS, lpSearchFilter: LPVOID, dwAdditionalFlags: culong): HANDLE <cimport,nodecl> end
global function FindNextFileA(hFindFile: HANDLE, lpFindFileData: LPWIN32_FIND_DATAA): cint <cimport,nodecl> end
global function FindNextFileW(hFindFile: HANDLE, lpFindFileData: LPWIN32_FIND_DATAW): cint <cimport,nodecl> end
global function FlushFileBuffers(hFile: HANDLE): cint <cimport,nodecl> end
global function GetDiskFreeSpaceExA(lpDirectoryName: LPCSTR, lpFreeBytesAvailableToCaller: PULARGE_INTEGER, lpTotalNumberOfBytes: PULARGE_INTEGER, lpTotalNumberOfFreeBytes: PULARGE_INTEGER): cint <cimport,nodecl> end
global function GetDiskFreeSpaceExW(lpDirectoryName: LPCWSTR, lpFreeBytesAvailableToCaller: PULARGE_INTEGER, lpTotalNumberOfBytes: PULARGE_INTEGER, lpTotalNumberOfFreeBytes: PULARGE_INTEGER): cint <cimport,nodecl> end
global function GetFileAttributesExA(lpFileName: LPCSTR, fInfoLevelId: GET_FILEEX_INFO_LEVELS, lpFileInformation: LPVOID): cint <cimport,nodecl> end
global function GetFileAttributesExW(lpFileName: LPCWSTR, fInfoLevelId: GET_FILEEX_INFO_LEVELS, lpFileInformation: LPVOID): cint <cimport,nodecl> end
global function LockFileEx(hFile: HANDLE, dwFlags: culong, dwReserved: culong, nNumberOfBytesToLockLow: culong, nNumberOfBytesToLockHigh: culong, lpOverlapped: LPOVERLAPPED): cint <cimport,nodecl> end
global function ReadFile(hFile: HANDLE, lpBuffer: LPVOID, nNumberOfBytesToRead: culong, lpNumberOfBytesRead: LPDWORD, lpOverlapped: LPOVERLAPPED): cint <cimport,nodecl> end
global function RemoveDirectoryA(lpPathName: LPCSTR): cint <cimport,nodecl> end
global function RemoveDirectoryW(lpPathName: LPCWSTR): cint <cimport,nodecl> end
global function SetEndOfFile(hFile: HANDLE): cint <cimport,nodecl> end
global function SetFileAttributesA(lpFileName: LPCSTR, dwFileAttributes: culong): cint <cimport,nodecl> end
global function SetFileAttributesW(lpFileName: LPCWSTR, dwFileAttributes: culong): cint <cimport,nodecl> end
global function SetFilePointerEx(hFile: HANDLE, liDistanceToMove: LARGE_INTEGER, lpNewFilePointer: PLARGE_INTEGER, dwMoveMethod: culong): cint <cimport,nodecl> end
global function UnlockFileEx(hFile: HANDLE, dwReserved: culong, nNumberOfBytesToUnlockLow: culong, nNumberOfBytesToUnlockHigh: culong, lpOverlapped: LPOVERLAPPED): cint <cimport,nodecl> end
global function WriteFile(hFile: HANDLE, lpBuffer: LPCVOID, nNumberOfBytesToWrite: culong, lpNumberOfBytesWritten: LPDWORD, lpOverlapped: LPOVERLAPPED): cint <cimport,nodecl> end
global function GetTempPathA(nBufferLength: culong, lpBuffer: LPSTR): culong <cimport,nodecl> end
global function GetTempPathW(nBufferLength: culong, lpBuffer: LPWSTR): culong <cimport,nodecl> end
global function SetFileInformationByHandle(hFile: HANDLE, FileInformationClass: FILE_INFO_BY_HANDLE_CLASS, lpFileInformation: LPVOID, dwBufferSize: culong): cint <cimport,nodecl> end
global function CloseHandle(hObject: HANDLE): cint <cimport,nodecl> end
global function DuplicateHandle(hSourceProcessHandle: HANDLE, hSourceHandle: HANDLE, hTargetProcessHandle: HANDLE, lpTargetHandle: LPHANDLE, dwDesiredAccess: culong, bInheritHandle: cint, dwOptions: culong): cint <cimport,nodecl> end
global function GetHandleInformation(hObject: HANDLE, lpdwFlags: LPDWORD): cint <cimport,nodecl> end
global function SetHandleInformation(hObject: HANDLE, dwMask: culong, dwFlags: culong): cint <cimport,nodecl> end
global _HEAP_SUMMARY: type <cimport,nodecl,ctypedef> = @record{
  cb: culong,
  cbAllocated: culonglong,
  cbCommitted: culonglong,
  cbReserved: culonglong,
  cbMaxReserve: culonglong
}
global HEAP_SUMMARY: type = @_HEAP_SUMMARY
global PHEAP_SUMMARY: type = @*_HEAP_SUMMARY
global LPHEAP_SUMMARY: type = @*_HEAP_SUMMARY
global function HeapValidate(hHeap: HANDLE, dwFlags: culong, lpMem: LPCVOID): cint <cimport,nodecl> end
global function HeapSummary(hHeap: HANDLE, dwFlags: culong, lpSummary: LPHEAP_SUMMARY): cint <cimport,nodecl> end
global function GetProcessHeaps(NumberOfHeaps: culong, ProcessHeaps: PHANDLE): culong <cimport,nodecl> end
global function HeapLock(hHeap: HANDLE): cint <cimport,nodecl> end
global function HeapUnlock(hHeap: HANDLE): cint <cimport,nodecl> end
global function HeapWalk(hHeap: HANDLE, lpEntry: LPPROCESS_HEAP_ENTRY): cint <cimport,nodecl> end
global function HeapQueryInformation(HeapHandle: HANDLE, HeapInformationClass: HEAP_INFORMATION_CLASS, HeapInformation: PVOID, HeapInformationLength: culonglong, ReturnLength: PSIZE_T): cint <cimport,nodecl> end
global function HeapCreate(flOptions: culong, dwInitialSize: culonglong, dwMaximumSize: culonglong): HANDLE <cimport,nodecl> end
global function HeapCompact(hHeap: HANDLE, dwFlags: culong): culonglong <cimport,nodecl> end
global function HeapDestroy(hHeap: HANDLE): cint <cimport,nodecl> end
global function HeapAlloc(hHeap: HANDLE, dwFlags: culong, dwBytes: culonglong): LPVOID <cimport,nodecl> end
global function HeapReAlloc(hHeap: HANDLE, dwFlags: culong, lpMem: LPVOID, dwBytes: culonglong): LPVOID <cimport,nodecl> end
global function HeapFree(hHeap: HANDLE, dwFlags: culong, lpMem: LPVOID): cint <cimport,nodecl> end
global function HeapSize(hHeap: HANDLE, dwFlags: culong, lpMem: LPCVOID): culonglong <cimport,nodecl> end
global function GetProcessHeap(): HANDLE <cimport,nodecl> end
global function HeapSetInformation(HeapHandle: HANDLE, HeapInformationClass: HEAP_INFORMATION_CLASS, HeapInformation: PVOID, HeapInformationLength: culonglong): cint <cimport,nodecl> end
global function GetOverlappedResult(hFile: HANDLE, lpOverlapped: LPOVERLAPPED, lpNumberOfBytesTransferred: LPDWORD, bWait: cint): cint <cimport,nodecl> end
global function CreateIoCompletionPort(FileHandle: HANDLE, ExistingCompletionPort: HANDLE, CompletionKey: culonglong, NumberOfConcurrentThreads: culong): HANDLE <cimport,nodecl> end
global function GetQueuedCompletionStatus(CompletionPort: HANDLE, lpNumberOfBytesTransferred: LPDWORD, lpCompletionKey: PULONG_PTR, lpOverlapped: *LPOVERLAPPED, dwMilliseconds: culong): cint <cimport,nodecl> end
global function PostQueuedCompletionStatus(CompletionPort: HANDLE, dwNumberOfBytesTransferred: culong, dwCompletionKey: culonglong, lpOverlapped: LPOVERLAPPED): cint <cimport,nodecl> end
global function DeviceIoControl(hDevice: HANDLE, dwIoControlCode: culong, lpInBuffer: LPVOID, nInBufferSize: culong, lpOutBuffer: LPVOID, nOutBufferSize: culong, lpBytesReturned: LPDWORD, lpOverlapped: LPOVERLAPPED): cint <cimport,nodecl> end
global function CancelIo(hFile: HANDLE): cint <cimport,nodecl> end
global function GetOverlappedResultEx(hFile: HANDLE, lpOverlapped: LPOVERLAPPED, lpNumberOfBytesTransferred: LPDWORD, dwMilliseconds: culong, bAlertable: cint): cint <cimport,nodecl> end
global function GetQueuedCompletionStatusEx(CompletionPort: HANDLE, lpCompletionPortEntries: LPOVERLAPPED_ENTRY, ulCount: culong, ulNumEntriesRemoved: PULONG, dwMilliseconds: culong, fAlertable: cint): cint <cimport,nodecl> end
global function CancelIoEx(hFile: HANDLE, lpOverlapped: LPOVERLAPPED): cint <cimport,nodecl> end
global function CancelSynchronousIo(hThread: HANDLE): cint <cimport,nodecl> end
global function InitializeSListHead(ListHead: PSLIST_HEADER): void <cimport,nodecl> end
global function InterlockedPopEntrySList(ListHead: PSLIST_HEADER): PSLIST_ENTRY <cimport,nodecl> end
global function InterlockedPushEntrySList(ListHead: PSLIST_HEADER, ListEntry: PSLIST_ENTRY): PSLIST_ENTRY <cimport,nodecl> end
global function InterlockedFlushSList(ListHead: PSLIST_HEADER): PSLIST_ENTRY <cimport,nodecl> end
global function QueryDepthSList(ListHead: PSLIST_HEADER): cushort <cimport,nodecl> end
global function IsProcessInJob(ProcessHandle: HANDLE, JobHandle: HANDLE, Result: PBOOL): cint <cimport,nodecl> end
global tagENUMUILANG: type <cimport,nodecl,ctypedef> = @record{
  NumOfEnumUILang: culong,
  SizeOfEnumUIBuffer: culong,
  pEnumUIBuffer: *cushort
}
global ENUMUILANG: type = @tagENUMUILANG
global PENUMUILANG: type = @*tagENUMUILANG
global ENUMRESLANGPROCA: type <cimport,nodecl> = @function(HMODULE, LPCSTR, LPCSTR, cushort, clonglong): cint
global ENUMRESLANGPROCW: type <cimport,nodecl> = @function(HMODULE, LPCWSTR, LPCWSTR, cushort, clonglong): cint
global ENUMRESNAMEPROCA: type <cimport,nodecl> = @function(HMODULE, LPCSTR, LPSTR, clonglong): cint
global ENUMRESNAMEPROCW: type <cimport,nodecl> = @function(HMODULE, LPCWSTR, LPWSTR, clonglong): cint
global ENUMRESTYPEPROCA: type <cimport,nodecl> = @function(HMODULE, LPSTR, clonglong): cint
global ENUMRESTYPEPROCW: type <cimport,nodecl> = @function(HMODULE, LPWSTR, clonglong): cint
global PGET_MODULE_HANDLE_EXA: type <cimport,nodecl> = @function(culong, LPCSTR, *HMODULE): cint
global PGET_MODULE_HANDLE_EXW: type <cimport,nodecl> = @function(culong, LPCWSTR, *HMODULE): cint
global DLL_DIRECTORY_COOKIE: type = @pointer
global PDLL_DIRECTORY_COOKIE: type = @*PVOID
global function EnumResourceNamesW(hModule: HMODULE, lpType: LPCWSTR, lpEnumFunc: ENUMRESNAMEPROCW, lParam: clonglong): cint <cimport,nodecl> end
global function FindResourceW(hModule: HMODULE, lpName: LPCWSTR, lpType: LPCWSTR): HRSRC <cimport,nodecl> end
global function FindResourceExW(hModule: HMODULE, lpType: LPCWSTR, lpName: LPCWSTR, wLanguage: cushort): HRSRC <cimport,nodecl> end
global function FreeResource(hResData: HGLOBAL): cint <cimport,nodecl> end
global function LoadLibraryExA(lpLibFileName: LPCSTR, hFile: HANDLE, dwFlags: culong): HMODULE <cimport,nodecl> end
global function LoadLibraryExW(lpLibFileName: LPCWSTR, hFile: HANDLE, dwFlags: culong): HMODULE <cimport,nodecl> end
global function LoadResource(hModule: HMODULE, hResInfo: HRSRC): HGLOBAL <cimport,nodecl> end
global function LoadStringA(hInstance: HINSTANCE, uID: cuint, lpBuffer: LPSTR, cchBufferMax: cint): cint <cimport,nodecl> end
global function LoadStringW(hInstance: HINSTANCE, uID: cuint, lpBuffer: LPWSTR, cchBufferMax: cint): cint <cimport,nodecl> end
global function LockResource(hResData: HGLOBAL): LPVOID <cimport,nodecl> end
global function SizeofResource(hModule: HMODULE, hResInfo: HRSRC): culong <cimport,nodecl> end
global function AddDllDirectory(NewDirectory: PCWSTR): DLL_DIRECTORY_COOKIE <cimport,nodecl> end
global function RemoveDllDirectory(Cookie: DLL_DIRECTORY_COOKIE): cint <cimport,nodecl> end
global function SetDefaultDllDirectories(DirectoryFlags: culong): cint <cimport,nodecl> end
global function GetModuleHandleExA(dwFlags: culong, lpModuleName: LPCSTR, phModule: *HMODULE): cint <cimport,nodecl> end
global function GetModuleHandleExW(dwFlags: culong, lpModuleName: LPCWSTR, phModule: *HMODULE): cint <cimport,nodecl> end
global function EnumResourceLanguagesA(hModule: HMODULE, lpType: LPCSTR, lpName: LPCSTR, lpEnumFunc: ENUMRESLANGPROCA, lParam: clonglong): cint <cimport,nodecl> end
global function EnumResourceLanguagesW(hModule: HMODULE, lpType: LPCWSTR, lpName: LPCWSTR, lpEnumFunc: ENUMRESLANGPROCW, lParam: clonglong): cint <cimport,nodecl> end
global function EnumResourceLanguagesExA(hModule: HMODULE, lpType: LPCSTR, lpName: LPCSTR, lpEnumFunc: ENUMRESLANGPROCA, lParam: clonglong, dwFlags: culong, LangId: cushort): cint <cimport,nodecl> end
global function EnumResourceLanguagesExW(hModule: HMODULE, lpType: LPCWSTR, lpName: LPCWSTR, lpEnumFunc: ENUMRESLANGPROCW, lParam: clonglong, dwFlags: culong, LangId: cushort): cint <cimport,nodecl> end
global function EnumResourceNamesExA(hModule: HMODULE, lpType: LPCSTR, lpEnumFunc: ENUMRESNAMEPROCA, lParam: clonglong, dwFlags: culong, LangId: cushort): cint <cimport,nodecl> end
global function EnumResourceNamesExW(hModule: HMODULE, lpType: LPCWSTR, lpEnumFunc: ENUMRESNAMEPROCW, lParam: clonglong, dwFlags: culong, LangId: cushort): cint <cimport,nodecl> end
global function EnumResourceTypesExA(hModule: HMODULE, lpEnumFunc: ENUMRESTYPEPROCA, lParam: clonglong, dwFlags: culong, LangId: cushort): cint <cimport,nodecl> end
global function EnumResourceTypesExW(hModule: HMODULE, lpEnumFunc: ENUMRESTYPEPROCW, lParam: clonglong, dwFlags: culong, LangId: cushort): cint <cimport,nodecl> end
global function QueryOptionalDelayLoadedAPI(CallerModule: HMODULE, lpDllName: LPCSTR, lpProcName: LPCSTR, Reserved: culong): cint <cimport,nodecl> end
global function GetModuleHandleA(lpModuleName: LPCSTR): HMODULE <cimport,nodecl> end
global function GetModuleHandleW(lpModuleName: LPCWSTR): HMODULE <cimport,nodecl> end
global function LoadLibraryA(lpLibFileName: LPCSTR): HMODULE <cimport,nodecl> end
global function LoadLibraryW(lpLibFileName: LPCWSTR): HMODULE <cimport,nodecl> end
global function FreeLibraryAndExitThread(hLibModule: HMODULE, dwExitCode: culong): void <cimport,nodecl> end
global function DisableThreadLibraryCalls(hLibModule: HMODULE): cint <cimport,nodecl> end
global function FreeLibrary(hLibModule: HMODULE): cint <cimport,nodecl> end
global function GetProcAddress(hModule: HMODULE, lpProcName: LPCSTR): FARPROC <cimport,nodecl> end
global function GetModuleFileNameA(hModule: HMODULE, lpFilename: LPSTR, nSize: culong): culong <cimport,nodecl> end
global function GetModuleFileNameW(hModule: HMODULE, lpFilename: LPWSTR, nSize: culong): culong <cimport,nodecl> end
global _REDIRECTION_FUNCTION_DESCRIPTOR: type <cimport,nodecl,ctypedef> = @record{
  DllName: PCSTR,
  FunctionName: PCSTR,
  RedirectionTarget: PVOID
}
global REDIRECTION_FUNCTION_DESCRIPTOR: type = @_REDIRECTION_FUNCTION_DESCRIPTOR
global PREDIRECTION_FUNCTION_DESCRIPTOR: type = @*_REDIRECTION_FUNCTION_DESCRIPTOR
global PCREDIRECTION_FUNCTION_DESCRIPTOR: type = @*REDIRECTION_FUNCTION_DESCRIPTOR
global _REDIRECTION_DESCRIPTOR: type <cimport,nodecl,ctypedef> = @record{
  Version: culong,
  FunctionCount: culong,
  Redirections: PCREDIRECTION_FUNCTION_DESCRIPTOR
}
global REDIRECTION_DESCRIPTOR: type = @_REDIRECTION_DESCRIPTOR
global PREDIRECTION_DESCRIPTOR: type = @*_REDIRECTION_DESCRIPTOR
global PCREDIRECTION_DESCRIPTOR: type = @*REDIRECTION_DESCRIPTOR
global _MEMORY_RESOURCE_NOTIFICATION_TYPE: type <cimport,nodecl,using,ctypedef> = @enum(cint){
  LowMemoryResourceNotification = 0,
  HighMemoryResourceNotification = 1
}
global MEMORY_RESOURCE_NOTIFICATION_TYPE: type = @_MEMORY_RESOURCE_NOTIFICATION_TYPE
global function VirtualFree(lpAddress: LPVOID, dwSize: culonglong, dwFreeType: culong): cint <cimport,nodecl> end
global function VirtualQuery(lpAddress: LPCVOID, lpBuffer: PMEMORY_BASIC_INFORMATION, dwLength: culonglong): culonglong <cimport,nodecl> end
global function FlushViewOfFile(lpBaseAddress: LPCVOID, dwNumberOfBytesToFlush: culonglong): cint <cimport,nodecl> end
global function UnmapViewOfFile(lpBaseAddress: LPCVOID): cint <cimport,nodecl> end
global function UnmapViewOfFile2(Process: HANDLE, BaseAddress: PVOID, UnmapFlags: culong): cint <cimport,nodecl> end
global function CreateFileMappingFromApp(hFile: HANDLE, SecurityAttributes: PSECURITY_ATTRIBUTES, PageProtection: culong, MaximumSize: culonglong, Name: PCWSTR): HANDLE <cimport,nodecl> end
global function MapViewOfFileFromApp(hFileMappingObject: HANDLE, DesiredAccess: culong, FileOffset: culonglong, NumberOfBytesToMap: culonglong): PVOID <cimport,nodecl> end
global function VirtualUnlockEx(Process: HANDLE, Address: LPVOID, Size: culonglong): cint <cimport,nodecl> end
global function VirtualProtect(lpAddress: LPVOID, dwSize: culonglong, flNewProtect: culong, lpflOldProtect: PDWORD): cint <cimport,nodecl> end
global function VirtualAlloc(lpAddress: LPVOID, dwSize: culonglong, flAllocationType: culong, flProtect: culong): LPVOID <cimport,nodecl> end
global function VirtualAllocEx(hProcess: HANDLE, lpAddress: LPVOID, dwSize: culonglong, flAllocationType: culong, flProtect: culong): LPVOID <cimport,nodecl> end
global function VirtualProtectEx(hProcess: HANDLE, lpAddress: LPVOID, dwSize: culonglong, flNewProtect: culong, lpflOldProtect: PDWORD): cint <cimport,nodecl> end
global function VirtualQueryEx(hProcess: HANDLE, lpAddress: LPCVOID, lpBuffer: PMEMORY_BASIC_INFORMATION, dwLength: culonglong): culonglong <cimport,nodecl> end
global function ReadProcessMemory(hProcess: HANDLE, lpBaseAddress: LPCVOID, lpBuffer: LPVOID, nSize: culonglong, lpNumberOfBytesRead: *culonglong): cint <cimport,nodecl> end
global function WriteProcessMemory(hProcess: HANDLE, lpBaseAddress: LPVOID, lpBuffer: LPCVOID, nSize: culonglong, lpNumberOfBytesWritten: *culonglong): cint <cimport,nodecl> end
global function CreateFileMappingW(hFile: HANDLE, lpFileMappingAttributes: LPSECURITY_ATTRIBUTES, flProtect: culong, dwMaximumSizeHigh: culong, dwMaximumSizeLow: culong, lpName: LPCWSTR): HANDLE <cimport,nodecl> end
global function OpenFileMappingW(dwDesiredAccess: culong, bInheritHandle: cint, lpName: LPCWSTR): HANDLE <cimport,nodecl> end
global function MapViewOfFile(hFileMappingObject: HANDLE, dwDesiredAccess: culong, dwFileOffsetHigh: culong, dwFileOffsetLow: culong, dwNumberOfBytesToMap: culonglong): LPVOID <cimport,nodecl> end
global function MapViewOfFileEx(hFileMappingObject: HANDLE, dwDesiredAccess: culong, dwFileOffsetHigh: culong, dwFileOffsetLow: culong, dwNumberOfBytesToMap: culonglong, lpBaseAddress: LPVOID): LPVOID <cimport,nodecl> end
global function VirtualLock(lpAddress: LPVOID, dwSize: culonglong): cint <cimport,nodecl> end
global function VirtualUnlock(lpAddress: LPVOID, dwSize: culonglong): cint <cimport,nodecl> end
global function CreateMemoryResourceNotification(NotificationType: MEMORY_RESOURCE_NOTIFICATION_TYPE): HANDLE <cimport,nodecl> end
global function QueryMemoryResourceNotification(ResourceNotificationHandle: HANDLE, ResourceState: PBOOL): cint <cimport,nodecl> end
global function GetSystemFileCacheSize(lpMinimumFileCacheSize: PSIZE_T, lpMaximumFileCacheSize: PSIZE_T, lpFlags: PDWORD): cint <cimport,nodecl> end
global function SetSystemFileCacheSize(MinimumFileCacheSize: culonglong, MaximumFileCacheSize: culonglong, Flags: culong): cint <cimport,nodecl> end
global function AllocateUserPhysicalPages(hProcess: HANDLE, NumberOfPages: PULONG_PTR, PageArray: PULONG_PTR): cint <cimport,nodecl> end
global function FreeUserPhysicalPages(hProcess: HANDLE, NumberOfPages: PULONG_PTR, PageArray: PULONG_PTR): cint <cimport,nodecl> end
global function MapUserPhysicalPages(VirtualAddress: PVOID, NumberOfPages: culonglong, PageArray: PULONG_PTR): cint <cimport,nodecl> end
global function AllocateUserPhysicalPagesNuma(hProcess: HANDLE, NumberOfPages: PULONG_PTR, PageArray: PULONG_PTR, nndPreferred: culong): cint <cimport,nodecl> end
global function CreateFileMappingNumaW(hFile: HANDLE, lpFileMappingAttributes: LPSECURITY_ATTRIBUTES, flProtect: culong, dwMaximumSizeHigh: culong, dwMaximumSizeLow: culong, lpName: LPCWSTR, nndPreferred: culong): HANDLE <cimport,nodecl> end
global function VirtualAllocExNuma(hProcess: HANDLE, lpAddress: LPVOID, dwSize: culonglong, flAllocationType: culong, flProtect: culong, nndPreferred: culong): LPVOID <cimport,nodecl> end
global function GetLargePageMinimum(): culonglong <cimport,nodecl> end
global function GetProcessWorkingSetSizeEx(hProcess: HANDLE, lpMinimumWorkingSetSize: PSIZE_T, lpMaximumWorkingSetSize: PSIZE_T, Flags: PDWORD): cint <cimport,nodecl> end
global function SetProcessWorkingSetSizeEx(hProcess: HANDLE, dwMinimumWorkingSetSize: culonglong, dwMaximumWorkingSetSize: culonglong, Flags: culong): cint <cimport,nodecl> end
global function GetWriteWatch(dwFlags: culong, lpBaseAddress: PVOID, dwRegionSize: culonglong, lpAddresses: *PVOID, lpdwCount: *culonglong, lpdwGranularity: LPDWORD): cuint <cimport,nodecl> end
global function ResetWriteWatch(lpBaseAddress: LPVOID, dwRegionSize: culonglong): cuint <cimport,nodecl> end
global function VirtualFreeEx(hProcess: HANDLE, lpAddress: LPVOID, dwSize: culonglong, dwFreeType: culong): cint <cimport,nodecl> end
global function ImpersonateNamedPipeClient(hNamedPipe: HANDLE): cint <cimport,nodecl> end
global function CreatePipe(hReadPipe: PHANDLE, hWritePipe: PHANDLE, lpPipeAttributes: LPSECURITY_ATTRIBUTES, nSize: culong): cint <cimport,nodecl> end
global function ConnectNamedPipe(hNamedPipe: HANDLE, lpOverlapped: LPOVERLAPPED): cint <cimport,nodecl> end
global function DisconnectNamedPipe(hNamedPipe: HANDLE): cint <cimport,nodecl> end
global function SetNamedPipeHandleState(hNamedPipe: HANDLE, lpMode: LPDWORD, lpMaxCollectionCount: LPDWORD, lpCollectDataTimeout: LPDWORD): cint <cimport,nodecl> end
global function PeekNamedPipe(hNamedPipe: HANDLE, lpBuffer: LPVOID, nBufferSize: culong, lpBytesRead: LPDWORD, lpTotalBytesAvail: LPDWORD, lpBytesLeftThisMessage: LPDWORD): cint <cimport,nodecl> end
global function TransactNamedPipe(hNamedPipe: HANDLE, lpInBuffer: LPVOID, nInBufferSize: culong, lpOutBuffer: LPVOID, nOutBufferSize: culong, lpBytesRead: LPDWORD, lpOverlapped: LPOVERLAPPED): cint <cimport,nodecl> end
global function CreateNamedPipeW(lpName: LPCWSTR, dwOpenMode: culong, dwPipeMode: culong, nMaxInstances: culong, nOutBufferSize: culong, nInBufferSize: culong, nDefaultTimeOut: culong, lpSecurityAttributes: LPSECURITY_ATTRIBUTES): HANDLE <cimport,nodecl> end
global function WaitNamedPipeW(lpNamedPipeName: LPCWSTR, nTimeOut: culong): cint <cimport,nodecl> end
global function GetNamedPipeClientComputerNameW(Pipe: HANDLE, ClientComputerName: LPWSTR, ClientComputerNameLength: culong): cint <cimport,nodecl> end
global function CreatePrivateNamespaceW(lpPrivateNamespaceAttributes: LPSECURITY_ATTRIBUTES, lpBoundaryDescriptor: LPVOID, lpAliasPrefix: LPCWSTR): HANDLE <cimport,nodecl> end
global function OpenPrivateNamespaceW(lpBoundaryDescriptor: LPVOID, lpAliasPrefix: LPCWSTR): HANDLE <cimport,nodecl> end
global function ClosePrivateNamespace(Handle: HANDLE, Flags: culong): BOOLEAN <cimport,nodecl> end
global function CreateBoundaryDescriptorW(Name: LPCWSTR, Flags: culong): HANDLE <cimport,nodecl> end
global function AddSIDToBoundaryDescriptor(BoundaryDescriptor: *HANDLE, RequiredSid: PSID): cint <cimport,nodecl> end
global function DeleteBoundaryDescriptor(BoundaryDescriptor: HANDLE): void <cimport,nodecl> end
global function GetCommandLineA(): LPSTR <cimport,nodecl> end
global function GetCommandLineW(): LPWSTR <cimport,nodecl> end
global function SetCurrentDirectoryA(lpPathName: LPCSTR): cint <cimport,nodecl> end
global function SetCurrentDirectoryW(lpPathName: LPCWSTR): cint <cimport,nodecl> end
global function GetCurrentDirectoryA(nBufferLength: culong, lpBuffer: LPSTR): culong <cimport,nodecl> end
global function GetCurrentDirectoryW(nBufferLength: culong, lpBuffer: LPWSTR): culong <cimport,nodecl> end
global function SetEnvironmentStringsW(NewEnvironment: LPWCH): cint <cimport,nodecl> end
global function SearchPathW(lpPath: LPCWSTR, lpFileName: LPCWSTR, lpExtension: LPCWSTR, nBufferLength: culong, lpBuffer: LPWSTR, lpFilePart: *LPWSTR): culong <cimport,nodecl> end
global function SearchPathA(lpPath: LPCSTR, lpFileName: LPCSTR, lpExtension: LPCSTR, nBufferLength: culong, lpBuffer: LPSTR, lpFilePart: *LPSTR): culong <cimport,nodecl> end
global function NeedCurrentDirectoryForExePathA(ExeName: LPCSTR): cint <cimport,nodecl> end
global function NeedCurrentDirectoryForExePathW(ExeName: LPCWSTR): cint <cimport,nodecl> end
global function GetEnvironmentStrings(): LPCH <cimport,nodecl> end
global function GetEnvironmentStringsW(): LPWCH <cimport,nodecl> end
global function GetStdHandle(nStdHandle: culong): HANDLE <cimport,nodecl> end
global function ExpandEnvironmentStringsA(lpSrc: LPCSTR, lpDst: LPSTR, nSize: culong): culong <cimport,nodecl> end
global function ExpandEnvironmentStringsW(lpSrc: LPCWSTR, lpDst: LPWSTR, nSize: culong): culong <cimport,nodecl> end
global function FreeEnvironmentStringsA(penv: LPCH): cint <cimport,nodecl> end
global function FreeEnvironmentStringsW(penv: LPWCH): cint <cimport,nodecl> end
global function GetEnvironmentVariableA(lpName: LPCSTR, lpBuffer: LPSTR, nSize: culong): culong <cimport,nodecl> end
global function GetEnvironmentVariableW(lpName: LPCWSTR, lpBuffer: LPWSTR, nSize: culong): culong <cimport,nodecl> end
global function SetEnvironmentVariableA(lpName: LPCSTR, lpValue: LPCSTR): cint <cimport,nodecl> end
global function SetEnvironmentVariableW(lpName: LPCWSTR, lpValue: LPCWSTR): cint <cimport,nodecl> end
global function SetStdHandle(nStdHandle: culong, hHandle: HANDLE): cint <cimport,nodecl> end
global function SetStdHandleEx(nStdHandle: culong, hHandle: HANDLE, phPrevValue: PHANDLE): cint <cimport,nodecl> end
global function OpenProcess(dwDesiredAccess: culong, bInheritHandle: cint, dwProcessId: culong): HANDLE <cimport,nodecl> end
global function QueueUserAPC(pfnAPC: PAPCFUNC, hThread: HANDLE, dwData: culonglong): culong <cimport,nodecl> end
global function GetProcessTimes(hProcess: HANDLE, lpCreationTime: LPFILETIME, lpExitTime: LPFILETIME, lpKernelTime: LPFILETIME, lpUserTime: LPFILETIME): cint <cimport,nodecl> end
global function ExitProcess(uExitCode: cuint): void <cimport,nodecl> end
global function GetExitCodeProcess(hProcess: HANDLE, lpExitCode: LPDWORD): cint <cimport,nodecl> end
global function SwitchToThread(): cint <cimport,nodecl> end
global function OpenThread(dwDesiredAccess: culong, bInheritHandle: cint, dwThreadId: culong): HANDLE <cimport,nodecl> end
global function SetThreadPriorityBoost(hThread: HANDLE, bDisablePriorityBoost: cint): cint <cimport,nodecl> end
global function GetThreadPriorityBoost(hThread: HANDLE, pDisablePriorityBoost: PBOOL): cint <cimport,nodecl> end
global function SetThreadToken(Thread: PHANDLE, Token: HANDLE): cint <cimport,nodecl> end
global function OpenProcessToken(ProcessHandle: HANDLE, DesiredAccess: culong, TokenHandle: PHANDLE): cint <cimport,nodecl> end
global function OpenThreadToken(ThreadHandle: HANDLE, DesiredAccess: culong, OpenAsSelf: cint, TokenHandle: PHANDLE): cint <cimport,nodecl> end
global function SetPriorityClass(hProcess: HANDLE, dwPriorityClass: culong): cint <cimport,nodecl> end
global function GetPriorityClass(hProcess: HANDLE): culong <cimport,nodecl> end
global function GetProcessId(Process: HANDLE): culong <cimport,nodecl> end
global function GetThreadId(Thread: HANDLE): culong <cimport,nodecl> end
global function GetThreadContext(hThread: HANDLE, lpContext: LPCONTEXT): cint <cimport,nodecl> end
global function FlushInstructionCache(hProcess: HANDLE, lpBaseAddress: LPCVOID, dwSize: culonglong): cint <cimport,nodecl> end
global function GetThreadTimes(hThread: HANDLE, lpCreationTime: LPFILETIME, lpExitTime: LPFILETIME, lpKernelTime: LPFILETIME, lpUserTime: LPFILETIME): cint <cimport,nodecl> end
global function GetCurrentProcessorNumber(): culong <cimport,nodecl> end
global function TerminateProcess(hProcess: HANDLE, uExitCode: cuint): cint <cimport,nodecl> end
global _STARTUPINFOA: type <cimport,nodecl,ctypedef> = @record{
  cb: culong,
  lpReserved: LPSTR,
  lpDesktop: LPSTR,
  lpTitle: LPSTR,
  dwX: culong,
  dwY: culong,
  dwXSize: culong,
  dwYSize: culong,
  dwXCountChars: culong,
  dwYCountChars: culong,
  dwFillAttribute: culong,
  dwFlags: culong,
  wShowWindow: cushort,
  cbReserved2: cushort,
  lpReserved2: LPBYTE,
  hStdInput: HANDLE,
  hStdOutput: HANDLE,
  hStdError: HANDLE
}
global STARTUPINFOA: type = @_STARTUPINFOA
global LPSTARTUPINFOA: type = @*_STARTUPINFOA
global _STARTUPINFOW: type <cimport,nodecl,ctypedef> = @record{
  cb: culong,
  lpReserved: LPWSTR,
  lpDesktop: LPWSTR,
  lpTitle: LPWSTR,
  dwX: culong,
  dwY: culong,
  dwXSize: culong,
  dwYSize: culong,
  dwXCountChars: culong,
  dwYCountChars: culong,
  dwFillAttribute: culong,
  dwFlags: culong,
  wShowWindow: cushort,
  cbReserved2: cushort,
  lpReserved2: LPBYTE,
  hStdInput: HANDLE,
  hStdOutput: HANDLE,
  hStdError: HANDLE
}
global STARTUPINFOW: type = @_STARTUPINFOW
global LPSTARTUPINFOW: type = @*_STARTUPINFOW
global STARTUPINFO: type = @_STARTUPINFOA
global LPSTARTUPINFO: type = @*_STARTUPINFOA
global _PROCESS_INFORMATION: type <cimport,nodecl,ctypedef> = @record{
  hProcess: HANDLE,
  hThread: HANDLE,
  dwProcessId: culong,
  dwThreadId: culong
}
global PROCESS_INFORMATION: type = @_PROCESS_INFORMATION
global PPROCESS_INFORMATION: type = @*_PROCESS_INFORMATION
global LPPROCESS_INFORMATION: type = @*_PROCESS_INFORMATION
global _PROC_THREAD_ATTRIBUTE_LIST: type <cimport,nodecl,forwarddecl,ctypedef> = @record{}
global PPROC_THREAD_ATTRIBUTE_LIST: type = @*_PROC_THREAD_ATTRIBUTE_LIST
global LPPROC_THREAD_ATTRIBUTE_LIST: type = @*_PROC_THREAD_ATTRIBUTE_LIST
global function CreateRemoteThread(hProcess: HANDLE, lpThreadAttributes: LPSECURITY_ATTRIBUTES, dwStackSize: culonglong, lpStartAddress: LPTHREAD_START_ROUTINE, lpParameter: LPVOID, dwCreationFlags: culong, lpThreadId: LPDWORD): HANDLE <cimport,nodecl> end
global function TerminateThread(hThread: HANDLE, dwExitCode: culong): cint <cimport,nodecl> end
global function SetProcessShutdownParameters(dwLevel: culong, dwFlags: culong): cint <cimport,nodecl> end
global function GetProcessVersion(ProcessId: culong): culong <cimport,nodecl> end
global function GetStartupInfoW(lpStartupInfo: LPSTARTUPINFOW): void <cimport,nodecl> end
global function SetThreadStackGuarantee(StackSizeInBytes: PULONG): cint <cimport,nodecl> end
global function ProcessIdToSessionId(dwProcessId: culong, pSessionId: *culong): cint <cimport,nodecl> end
global function CreateRemoteThreadEx(hProcess: HANDLE, lpThreadAttributes: LPSECURITY_ATTRIBUTES, dwStackSize: culonglong, lpStartAddress: LPTHREAD_START_ROUTINE, lpParameter: LPVOID, dwCreationFlags: culong, lpAttributeList: LPPROC_THREAD_ATTRIBUTE_LIST, lpThreadId: LPDWORD): HANDLE <cimport,nodecl> end
global function SetThreadContext(hThread: HANDLE, lpContext: *CONTEXT): cint <cimport,nodecl> end
global function GetProcessHandleCount(hProcess: HANDLE, pdwHandleCount: PDWORD): cint <cimport,nodecl> end
global function CreateProcessAsUserW(hToken: HANDLE, lpApplicationName: LPCWSTR, lpCommandLine: LPWSTR, lpProcessAttributes: LPSECURITY_ATTRIBUTES, lpThreadAttributes: LPSECURITY_ATTRIBUTES, bInheritHandles: cint, dwCreationFlags: culong, lpEnvironment: LPVOID, lpCurrentDirectory: LPCWSTR, lpStartupInfo: LPSTARTUPINFOW, lpProcessInformation: LPPROCESS_INFORMATION): cint <cimport,nodecl> end
global function GetProcessIdOfThread(Thread: HANDLE): culong <cimport,nodecl> end
global function InitializeProcThreadAttributeList(lpAttributeList: LPPROC_THREAD_ATTRIBUTE_LIST, dwAttributeCount: culong, dwFlags: culong, lpSize: PSIZE_T): cint <cimport,nodecl> end
global function DeleteProcThreadAttributeList(lpAttributeList: LPPROC_THREAD_ATTRIBUTE_LIST): void <cimport,nodecl> end
global function SetProcessAffinityUpdateMode(hProcess: HANDLE, dwFlags: culong): cint <cimport,nodecl> end
global function QueryProcessAffinityUpdateMode(hProcess: HANDLE, lpdwFlags: LPDWORD): cint <cimport,nodecl> end
global function UpdateProcThreadAttribute(lpAttributeList: LPPROC_THREAD_ATTRIBUTE_LIST, dwFlags: culong, Attribute: culonglong, lpValue: PVOID, cbSize: culonglong, lpPreviousValue: PVOID, lpReturnSize: PSIZE_T): cint <cimport,nodecl> end
global function CreateProcessA(lpApplicationName: LPCSTR, lpCommandLine: LPSTR, lpProcessAttributes: LPSECURITY_ATTRIBUTES, lpThreadAttributes: LPSECURITY_ATTRIBUTES, bInheritHandles: cint, dwCreationFlags: culong, lpEnvironment: LPVOID, lpCurrentDirectory: LPCSTR, lpStartupInfo: LPSTARTUPINFOA, lpProcessInformation: LPPROCESS_INFORMATION): cint <cimport,nodecl> end
global function CreateProcessW(lpApplicationName: LPCWSTR, lpCommandLine: LPWSTR, lpProcessAttributes: LPSECURITY_ATTRIBUTES, lpThreadAttributes: LPSECURITY_ATTRIBUTES, bInheritHandles: cint, dwCreationFlags: culong, lpEnvironment: LPVOID, lpCurrentDirectory: LPCWSTR, lpStartupInfo: LPSTARTUPINFOW, lpProcessInformation: LPPROCESS_INFORMATION): cint <cimport,nodecl> end
global function GetCurrentProcess(): HANDLE <cimport,nodecl> end
global function GetCurrentProcessId(): culong <cimport,nodecl> end
global function GetCurrentThread(): HANDLE <cimport,nodecl> end
global function GetCurrentThreadId(): culong <cimport,nodecl> end
global function IsProcessorFeaturePresent(ProcessorFeature: culong): cint <cimport,nodecl> end
global function FlushProcessWriteBuffers(): void <cimport,nodecl> end
global function CreateThread(lpThreadAttributes: LPSECURITY_ATTRIBUTES, dwStackSize: culonglong, lpStartAddress: LPTHREAD_START_ROUTINE, lpParameter: LPVOID, dwCreationFlags: culong, lpThreadId: LPDWORD): HANDLE <cimport,nodecl> end
global function SetThreadPriority(hThread: HANDLE, nPriority: cint): cint <cimport,nodecl> end
global function GetThreadPriority(hThread: HANDLE): cint <cimport,nodecl> end
global function ExitThread(dwExitCode: culong): void <cimport,nodecl> end
global function GetExitCodeThread(hThread: HANDLE, lpExitCode: LPDWORD): cint <cimport,nodecl> end
global function SuspendThread(hThread: HANDLE): culong <cimport,nodecl> end
global function ResumeThread(hThread: HANDLE): culong <cimport,nodecl> end
global function TlsAlloc(): culong <cimport,nodecl> end
global function TlsGetValue(dwTlsIndex: culong): LPVOID <cimport,nodecl> end
global function TlsSetValue(dwTlsIndex: culong, lpTlsValue: LPVOID): cint <cimport,nodecl> end
global function TlsFree(dwTlsIndex: culong): cint <cimport,nodecl> end
global function QueryPerformanceCounter(lpPerformanceCount: *LARGE_INTEGER): cint <cimport,nodecl> end
global function QueryPerformanceFrequency(lpFrequency: *LARGE_INTEGER): cint <cimport,nodecl> end
global function QueryThreadCycleTime(ThreadHandle: HANDLE, CycleTime: PULONG64): cint <cimport,nodecl> end
global function QueryProcessCycleTime(ProcessHandle: HANDLE, CycleTime: PULONG64): cint <cimport,nodecl> end
global function QueryIdleProcessorCycleTime(BufferLength: PULONG, ProcessorIdleCycleTime: PULONG64): cint <cimport,nodecl> end
global function QueryInterruptTimePrecise(lpInterruptTimePrecise: PULONGLONG): void <cimport,nodecl> end
global function QueryUnbiasedInterruptTimePrecise(lpUnbiasedInterruptTimePrecise: PULONGLONG): void <cimport,nodecl> end
global function QueryInterruptTime(lpInterruptTime: PULONGLONG): void <cimport,nodecl> end
global function QueryAuxiliaryCounterFrequency(lpAuxiliaryCounterFrequency: PULONGLONG): clong <cimport,nodecl> end
global function ConvertAuxiliaryCounterToPerformanceCounter(ullAuxiliaryCounterValue: culonglong, lpPerformanceCounterValue: PULONGLONG, lpConversionError: PULONGLONG): clong <cimport,nodecl> end
global function ConvertPerformanceCounterToAuxiliaryCounter(ullPerformanceCounterValue: culonglong, lpAuxiliaryCounterValue: PULONGLONG, lpConversionError: PULONGLONG): clong <cimport,nodecl> end
global function AccessCheck(pSecurityDescriptor: PSECURITY_DESCRIPTOR, ClientToken: HANDLE, DesiredAccess: culong, GenericMapping: PGENERIC_MAPPING, PrivilegeSet: PPRIVILEGE_SET, PrivilegeSetLength: LPDWORD, GrantedAccess: LPDWORD, AccessStatus: LPBOOL): cint <cimport,nodecl> end
global function AccessCheckAndAuditAlarmW(SubsystemName: LPCWSTR, HandleId: LPVOID, ObjectTypeName: LPWSTR, ObjectName: LPWSTR, SecurityDescriptor: PSECURITY_DESCRIPTOR, DesiredAccess: culong, GenericMapping: PGENERIC_MAPPING, ObjectCreation: cint, GrantedAccess: LPDWORD, AccessStatus: LPBOOL, pfGenerateOnClose: LPBOOL): cint <cimport,nodecl> end
global function AccessCheckByType(pSecurityDescriptor: PSECURITY_DESCRIPTOR, PrincipalSelfSid: PSID, ClientToken: HANDLE, DesiredAccess: culong, ObjectTypeList: POBJECT_TYPE_LIST, ObjectTypeListLength: culong, GenericMapping: PGENERIC_MAPPING, PrivilegeSet: PPRIVILEGE_SET, PrivilegeSetLength: LPDWORD, GrantedAccess: LPDWORD, AccessStatus: LPBOOL): cint <cimport,nodecl> end
global function AccessCheckByTypeResultList(pSecurityDescriptor: PSECURITY_DESCRIPTOR, PrincipalSelfSid: PSID, ClientToken: HANDLE, DesiredAccess: culong, ObjectTypeList: POBJECT_TYPE_LIST, ObjectTypeListLength: culong, GenericMapping: PGENERIC_MAPPING, PrivilegeSet: PPRIVILEGE_SET, PrivilegeSetLength: LPDWORD, GrantedAccessList: LPDWORD, AccessStatusList: LPDWORD): cint <cimport,nodecl> end
global function AccessCheckByTypeAndAuditAlarmW(SubsystemName: LPCWSTR, HandleId: LPVOID, ObjectTypeName: LPCWSTR, ObjectName: LPCWSTR, SecurityDescriptor: PSECURITY_DESCRIPTOR, PrincipalSelfSid: PSID, DesiredAccess: culong, AuditType: AUDIT_EVENT_TYPE, Flags: culong, ObjectTypeList: POBJECT_TYPE_LIST, ObjectTypeListLength: culong, GenericMapping: PGENERIC_MAPPING, ObjectCreation: cint, GrantedAccess: LPDWORD, AccessStatus: LPBOOL, pfGenerateOnClose: LPBOOL): cint <cimport,nodecl> end
global function AccessCheckByTypeResultListAndAuditAlarmW(SubsystemName: LPCWSTR, HandleId: LPVOID, ObjectTypeName: LPCWSTR, ObjectName: LPCWSTR, SecurityDescriptor: PSECURITY_DESCRIPTOR, PrincipalSelfSid: PSID, DesiredAccess: culong, AuditType: AUDIT_EVENT_TYPE, Flags: culong, ObjectTypeList: POBJECT_TYPE_LIST, ObjectTypeListLength: culong, GenericMapping: PGENERIC_MAPPING, ObjectCreation: cint, GrantedAccessList: LPDWORD, AccessStatusList: LPDWORD, pfGenerateOnClose: LPBOOL): cint <cimport,nodecl> end
global function AccessCheckByTypeResultListAndAuditAlarmByHandleW(SubsystemName: LPCWSTR, HandleId: LPVOID, ClientToken: HANDLE, ObjectTypeName: LPCWSTR, ObjectName: LPCWSTR, SecurityDescriptor: PSECURITY_DESCRIPTOR, PrincipalSelfSid: PSID, DesiredAccess: culong, AuditType: AUDIT_EVENT_TYPE, Flags: culong, ObjectTypeList: POBJECT_TYPE_LIST, ObjectTypeListLength: culong, GenericMapping: PGENERIC_MAPPING, ObjectCreation: cint, GrantedAccessList: LPDWORD, AccessStatusList: LPDWORD, pfGenerateOnClose: LPBOOL): cint <cimport,nodecl> end
global function AddAccessAllowedObjectAce(pAcl: PACL, dwAceRevision: culong, AceFlags: culong, AccessMask: culong, ObjectTypeGuid: *GUID, InheritedObjectTypeGuid: *GUID, pSid: PSID): cint <cimport,nodecl> end
global function AddAccessDeniedAce(pAcl: PACL, dwAceRevision: culong, AccessMask: culong, pSid: PSID): cint <cimport,nodecl> end
global function AddAccessDeniedAceEx(pAcl: PACL, dwAceRevision: culong, AceFlags: culong, AccessMask: culong, pSid: PSID): cint <cimport,nodecl> end
global function AddAccessDeniedObjectAce(pAcl: PACL, dwAceRevision: culong, AceFlags: culong, AccessMask: culong, ObjectTypeGuid: *GUID, InheritedObjectTypeGuid: *GUID, pSid: PSID): cint <cimport,nodecl> end
global function AddAuditAccessAce(pAcl: PACL, dwAceRevision: culong, dwAccessMask: culong, pSid: PSID, bAuditSuccess: cint, bAuditFailure: cint): cint <cimport,nodecl> end
global function AddAuditAccessAceEx(pAcl: PACL, dwAceRevision: culong, AceFlags: culong, dwAccessMask: culong, pSid: PSID, bAuditSuccess: cint, bAuditFailure: cint): cint <cimport,nodecl> end
global function AddAuditAccessObjectAce(pAcl: PACL, dwAceRevision: culong, AceFlags: culong, AccessMask: culong, ObjectTypeGuid: *GUID, InheritedObjectTypeGuid: *GUID, pSid: PSID, bAuditSuccess: cint, bAuditFailure: cint): cint <cimport,nodecl> end
global function AreAllAccessesGranted(GrantedAccess: culong, DesiredAccess: culong): cint <cimport,nodecl> end
global function AreAnyAccessesGranted(GrantedAccess: culong, DesiredAccess: culong): cint <cimport,nodecl> end
global function ConvertToAutoInheritPrivateObjectSecurity(ParentDescriptor: PSECURITY_DESCRIPTOR, CurrentSecurityDescriptor: PSECURITY_DESCRIPTOR, NewSecurityDescriptor: *PSECURITY_DESCRIPTOR, ObjectType: *GUID, IsDirectoryObject: BOOLEAN, GenericMapping: PGENERIC_MAPPING): cint <cimport,nodecl> end
global function CreatePrivateObjectSecurity(ParentDescriptor: PSECURITY_DESCRIPTOR, CreatorDescriptor: PSECURITY_DESCRIPTOR, NewDescriptor: *PSECURITY_DESCRIPTOR, IsDirectoryObject: cint, Token: HANDLE, GenericMapping: PGENERIC_MAPPING): cint <cimport,nodecl> end
global function CreatePrivateObjectSecurityEx(ParentDescriptor: PSECURITY_DESCRIPTOR, CreatorDescriptor: PSECURITY_DESCRIPTOR, NewDescriptor: *PSECURITY_DESCRIPTOR, ObjectType: *GUID, IsContainerObject: cint, AutoInheritFlags: culong, Token: HANDLE, GenericMapping: PGENERIC_MAPPING): cint <cimport,nodecl> end
global function CreatePrivateObjectSecurityWithMultipleInheritance(ParentDescriptor: PSECURITY_DESCRIPTOR, CreatorDescriptor: PSECURITY_DESCRIPTOR, NewDescriptor: *PSECURITY_DESCRIPTOR, ObjectTypes: **GUID, GuidCount: culong, IsContainerObject: cint, AutoInheritFlags: culong, Token: HANDLE, GenericMapping: PGENERIC_MAPPING): cint <cimport,nodecl> end
global function CreateRestrictedToken(ExistingTokenHandle: HANDLE, Flags: culong, DisableSidCount: culong, SidsToDisable: PSID_AND_ATTRIBUTES, DeletePrivilegeCount: culong, PrivilegesToDelete: PLUID_AND_ATTRIBUTES, RestrictedSidCount: culong, SidsToRestrict: PSID_AND_ATTRIBUTES, NewTokenHandle: PHANDLE): cint <cimport,nodecl> end
global function DestroyPrivateObjectSecurity(ObjectDescriptor: *PSECURITY_DESCRIPTOR): cint <cimport,nodecl> end
global function EqualPrefixSid(pSid1: PSID, pSid2: PSID): cint <cimport,nodecl> end
global function EqualSid(pSid1: PSID, pSid2: PSID): cint <cimport,nodecl> end
global function FindFirstFreeAce(pAcl: PACL, pAce: *LPVOID): cint <cimport,nodecl> end
global function GetFileSecurityW(lpFileName: LPCWSTR, RequestedInformation: culong, pSecurityDescriptor: PSECURITY_DESCRIPTOR, nLength: culong, lpnLengthNeeded: LPDWORD): cint <cimport,nodecl> end
global function GetPrivateObjectSecurity(ObjectDescriptor: PSECURITY_DESCRIPTOR, SecurityInformation: culong, ResultantDescriptor: PSECURITY_DESCRIPTOR, DescriptorLength: culong, ReturnLength: PDWORD): cint <cimport,nodecl> end
global function ImpersonateAnonymousToken(ThreadHandle: HANDLE): cint <cimport,nodecl> end
global function ImpersonateLoggedOnUser(hToken: HANDLE): cint <cimport,nodecl> end
global function ImpersonateSelf(ImpersonationLevel: SECURITY_IMPERSONATION_LEVEL): cint <cimport,nodecl> end
global function IsTokenRestricted(TokenHandle: HANDLE): cint <cimport,nodecl> end
global function MapGenericMask(AccessMask: PDWORD, GenericMapping: PGENERIC_MAPPING): void <cimport,nodecl> end
global function ObjectCloseAuditAlarmW(SubsystemName: LPCWSTR, HandleId: LPVOID, GenerateOnClose: cint): cint <cimport,nodecl> end
global function ObjectDeleteAuditAlarmW(SubsystemName: LPCWSTR, HandleId: LPVOID, GenerateOnClose: cint): cint <cimport,nodecl> end
global function ObjectOpenAuditAlarmW(SubsystemName: LPCWSTR, HandleId: LPVOID, ObjectTypeName: LPWSTR, ObjectName: LPWSTR, pSecurityDescriptor: PSECURITY_DESCRIPTOR, ClientToken: HANDLE, DesiredAccess: culong, GrantedAccess: culong, Privileges: PPRIVILEGE_SET, ObjectCreation: cint, AccessGranted: cint, GenerateOnClose: LPBOOL): cint <cimport,nodecl> end
global function ObjectPrivilegeAuditAlarmW(SubsystemName: LPCWSTR, HandleId: LPVOID, ClientToken: HANDLE, DesiredAccess: culong, Privileges: PPRIVILEGE_SET, AccessGranted: cint): cint <cimport,nodecl> end
global function PrivilegeCheck(ClientToken: HANDLE, RequiredPrivileges: PPRIVILEGE_SET, pfResult: LPBOOL): cint <cimport,nodecl> end
global function PrivilegedServiceAuditAlarmW(SubsystemName: LPCWSTR, ServiceName: LPCWSTR, ClientToken: HANDLE, Privileges: PPRIVILEGE_SET, AccessGranted: cint): cint <cimport,nodecl> end
global function QuerySecurityAccessMask(SecurityInformation: culong, DesiredAccess: LPDWORD): void <cimport,nodecl> end
global function RevertToSelf(): cint <cimport,nodecl> end
global function SetAclInformation(pAcl: PACL, pAclInformation: LPVOID, nAclInformationLength: culong, dwAclInformationClass: ACL_INFORMATION_CLASS): cint <cimport,nodecl> end
global function SetFileSecurityW(lpFileName: LPCWSTR, SecurityInformation: culong, pSecurityDescriptor: PSECURITY_DESCRIPTOR): cint <cimport,nodecl> end
global function SetPrivateObjectSecurity(SecurityInformation: culong, ModificationDescriptor: PSECURITY_DESCRIPTOR, ObjectsSecurityDescriptor: *PSECURITY_DESCRIPTOR, GenericMapping: PGENERIC_MAPPING, Token: HANDLE): cint <cimport,nodecl> end
global function SetPrivateObjectSecurityEx(SecurityInformation: culong, ModificationDescriptor: PSECURITY_DESCRIPTOR, ObjectsSecurityDescriptor: *PSECURITY_DESCRIPTOR, AutoInheritFlags: culong, GenericMapping: PGENERIC_MAPPING, Token: HANDLE): cint <cimport,nodecl> end
global function SetSecurityAccessMask(SecurityInformation: culong, DesiredAccess: LPDWORD): void <cimport,nodecl> end
global function CheckTokenMembership(TokenHandle: HANDLE, SidToCheck: PSID, IsMember: PBOOL): cint <cimport,nodecl> end
global function AddAce(pAcl: PACL, dwAceRevision: culong, dwStartingAceIndex: culong, pAceList: LPVOID, nAceListLength: culong): cint <cimport,nodecl> end
global function AddAccessAllowedAce(pAcl: PACL, dwAceRevision: culong, AccessMask: culong, pSid: PSID): cint <cimport,nodecl> end
global function AddAccessAllowedAceEx(pAcl: PACL, dwAceRevision: culong, AceFlags: culong, AccessMask: culong, pSid: PSID): cint <cimport,nodecl> end
global function AdjustTokenGroups(TokenHandle: HANDLE, ResetToDefault: cint, NewState: PTOKEN_GROUPS, BufferLength: culong, PreviousState: PTOKEN_GROUPS, ReturnLength: PDWORD): cint <cimport,nodecl> end
global function AdjustTokenPrivileges(TokenHandle: HANDLE, DisableAllPrivileges: cint, NewState: PTOKEN_PRIVILEGES, BufferLength: culong, PreviousState: PTOKEN_PRIVILEGES, ReturnLength: PDWORD): cint <cimport,nodecl> end
global function AllocateAndInitializeSid(pIdentifierAuthority: PSID_IDENTIFIER_AUTHORITY, nSubAuthorityCount: cuchar, nSubAuthority0: culong, nSubAuthority1: culong, nSubAuthority2: culong, nSubAuthority3: culong, nSubAuthority4: culong, nSubAuthority5: culong, nSubAuthority6: culong, nSubAuthority7: culong, pSid: *PSID): cint <cimport,nodecl> end
global function AllocateLocallyUniqueId(Luid: PLUID): cint <cimport,nodecl> end
global function CopySid(nDestinationSidLength: culong, pDestinationSid: PSID, pSourceSid: PSID): cint <cimport,nodecl> end
global function CreateWellKnownSid(WellKnownSidType: WELL_KNOWN_SID_TYPE, DomainSid: PSID, pSid: PSID, cbSid: *culong): cint <cimport,nodecl> end
global function DeleteAce(pAcl: PACL, dwAceIndex: culong): cint <cimport,nodecl> end
global function DuplicateToken(ExistingTokenHandle: HANDLE, ImpersonationLevel: SECURITY_IMPERSONATION_LEVEL, DuplicateTokenHandle: PHANDLE): cint <cimport,nodecl> end
global function DuplicateTokenEx(hExistingToken: HANDLE, dwDesiredAccess: culong, lpTokenAttributes: LPSECURITY_ATTRIBUTES, ImpersonationLevel: SECURITY_IMPERSONATION_LEVEL, TokenType: TOKEN_TYPE, phNewToken: PHANDLE): cint <cimport,nodecl> end
global function EqualDomainSid(pSid1: PSID, pSid2: PSID, pfEqual: *cint): cint <cimport,nodecl> end
global function FreeSid(pSid: PSID): PVOID <cimport,nodecl> end
global function GetAce(pAcl: PACL, dwAceIndex: culong, pAce: *LPVOID): cint <cimport,nodecl> end
global function GetAclInformation(pAcl: PACL, pAclInformation: LPVOID, nAclInformationLength: culong, dwAclInformationClass: ACL_INFORMATION_CLASS): cint <cimport,nodecl> end
global function GetKernelObjectSecurity(Handle: HANDLE, RequestedInformation: culong, pSecurityDescriptor: PSECURITY_DESCRIPTOR, nLength: culong, lpnLengthNeeded: LPDWORD): cint <cimport,nodecl> end
global function GetLengthSid(pSid: PSID): culong <cimport,nodecl> end
global function GetSecurityDescriptorControl(pSecurityDescriptor: PSECURITY_DESCRIPTOR, pControl: PSECURITY_DESCRIPTOR_CONTROL, lpdwRevision: LPDWORD): cint <cimport,nodecl> end
global function GetSecurityDescriptorDacl(pSecurityDescriptor: PSECURITY_DESCRIPTOR, lpbDaclPresent: LPBOOL, pDacl: *PACL, lpbDaclDefaulted: LPBOOL): cint <cimport,nodecl> end
global function GetSecurityDescriptorGroup(pSecurityDescriptor: PSECURITY_DESCRIPTOR, pGroup: *PSID, lpbGroupDefaulted: LPBOOL): cint <cimport,nodecl> end
global function GetSecurityDescriptorLength(pSecurityDescriptor: PSECURITY_DESCRIPTOR): culong <cimport,nodecl> end
global function GetSecurityDescriptorOwner(pSecurityDescriptor: PSECURITY_DESCRIPTOR, pOwner: *PSID, lpbOwnerDefaulted: LPBOOL): cint <cimport,nodecl> end
global function GetSecurityDescriptorRMControl(SecurityDescriptor: PSECURITY_DESCRIPTOR, RMControl: PUCHAR): culong <cimport,nodecl> end
global function GetSecurityDescriptorSacl(pSecurityDescriptor: PSECURITY_DESCRIPTOR, lpbSaclPresent: LPBOOL, pSacl: *PACL, lpbSaclDefaulted: LPBOOL): cint <cimport,nodecl> end
global function GetSidIdentifierAuthority(pSid: PSID): PSID_IDENTIFIER_AUTHORITY <cimport,nodecl> end
global function GetSidLengthRequired(nSubAuthorityCount: cuchar): culong <cimport,nodecl> end
global function GetSidSubAuthority(pSid: PSID, nSubAuthority: culong): PDWORD <cimport,nodecl> end
global function GetSidSubAuthorityCount(pSid: PSID): PUCHAR <cimport,nodecl> end
global function GetTokenInformation(TokenHandle: HANDLE, TokenInformationClass: TOKEN_INFORMATION_CLASS, TokenInformation: LPVOID, TokenInformationLength: culong, ReturnLength: PDWORD): cint <cimport,nodecl> end
global function GetWindowsAccountDomainSid(pSid: PSID, pDomainSid: PSID, cbDomainSid: *culong): cint <cimport,nodecl> end
global function InitializeAcl(pAcl: PACL, nAclLength: culong, dwAclRevision: culong): cint <cimport,nodecl> end
global function InitializeSecurityDescriptor(pSecurityDescriptor: PSECURITY_DESCRIPTOR, dwRevision: culong): cint <cimport,nodecl> end
global function InitializeSid(Sid: PSID, pIdentifierAuthority: PSID_IDENTIFIER_AUTHORITY, nSubAuthorityCount: cuchar): cint <cimport,nodecl> end
global function IsValidAcl(pAcl: PACL): cint <cimport,nodecl> end
global function IsValidSecurityDescriptor(pSecurityDescriptor: PSECURITY_DESCRIPTOR): cint <cimport,nodecl> end
global function IsValidSid(pSid: PSID): cint <cimport,nodecl> end
global function IsWellKnownSid(pSid: PSID, WellKnownSidType: WELL_KNOWN_SID_TYPE): cint <cimport,nodecl> end
global function MakeAbsoluteSD(pSelfRelativeSecurityDescriptor: PSECURITY_DESCRIPTOR, pAbsoluteSecurityDescriptor: PSECURITY_DESCRIPTOR, lpdwAbsoluteSecurityDescriptorSize: LPDWORD, pDacl: PACL, lpdwDaclSize: LPDWORD, pSacl: PACL, lpdwSaclSize: LPDWORD, pOwner: PSID, lpdwOwnerSize: LPDWORD, pPrimaryGroup: PSID, lpdwPrimaryGroupSize: LPDWORD): cint <cimport,nodecl> end
global function MakeSelfRelativeSD(pAbsoluteSecurityDescriptor: PSECURITY_DESCRIPTOR, pSelfRelativeSecurityDescriptor: PSECURITY_DESCRIPTOR, lpdwBufferLength: LPDWORD): cint <cimport,nodecl> end
global function SetKernelObjectSecurity(Handle: HANDLE, SecurityInformation: culong, SecurityDescriptor: PSECURITY_DESCRIPTOR): cint <cimport,nodecl> end
global function SetSecurityDescriptorControl(pSecurityDescriptor: PSECURITY_DESCRIPTOR, ControlBitsOfInterest: cushort, ControlBitsToSet: cushort): cint <cimport,nodecl> end
global function SetSecurityDescriptorDacl(pSecurityDescriptor: PSECURITY_DESCRIPTOR, bDaclPresent: cint, pDacl: PACL, bDaclDefaulted: cint): cint <cimport,nodecl> end
global function SetSecurityDescriptorGroup(pSecurityDescriptor: PSECURITY_DESCRIPTOR, pGroup: PSID, bGroupDefaulted: cint): cint <cimport,nodecl> end
global function SetSecurityDescriptorOwner(pSecurityDescriptor: PSECURITY_DESCRIPTOR, pOwner: PSID, bOwnerDefaulted: cint): cint <cimport,nodecl> end
global function SetSecurityDescriptorRMControl(SecurityDescriptor: PSECURITY_DESCRIPTOR, RMControl: PUCHAR): culong <cimport,nodecl> end
global function SetSecurityDescriptorSacl(pSecurityDescriptor: PSECURITY_DESCRIPTOR, bSaclPresent: cint, pSacl: PACL, bSaclDefaulted: cint): cint <cimport,nodecl> end
global function SetTokenInformation(TokenHandle: HANDLE, TokenInformationClass: TOKEN_INFORMATION_CLASS, TokenInformation: LPVOID, TokenInformationLength: culong): cint <cimport,nodecl> end
global function AddMandatoryAce(pAcl: PACL, dwAceRevision: culong, AceFlags: culong, MandatoryPolicy: culong, pLabelSid: PSID): cint <cimport,nodecl> end
global SRWLOCK: type = @_RTL_SRWLOCK
global PSRWLOCK: type = @*RTL_SRWLOCK
global INIT_ONCE: type = @_RTL_RUN_ONCE
global PINIT_ONCE: type = @*_RTL_RUN_ONCE
global LPINIT_ONCE: type = @*_RTL_RUN_ONCE
global PINIT_ONCE_FN: type <cimport,nodecl> = @function(PINIT_ONCE, PVOID, *PVOID): cint
global CONDITION_VARIABLE: type = @_RTL_CONDITION_VARIABLE
global PCONDITION_VARIABLE: type = @*RTL_CONDITION_VARIABLE
global function EnterCriticalSection(lpCriticalSection: LPCRITICAL_SECTION): void <cimport,nodecl> end
global function LeaveCriticalSection(lpCriticalSection: LPCRITICAL_SECTION): void <cimport,nodecl> end
global function TryEnterCriticalSection(lpCriticalSection: LPCRITICAL_SECTION): cint <cimport,nodecl> end
global function DeleteCriticalSection(lpCriticalSection: LPCRITICAL_SECTION): void <cimport,nodecl> end
global function SetEvent(hEvent: HANDLE): cint <cimport,nodecl> end
global function ResetEvent(hEvent: HANDLE): cint <cimport,nodecl> end
global function ReleaseSemaphore(hSemaphore: HANDLE, lReleaseCount: clong, lpPreviousCount: LPLONG): cint <cimport,nodecl> end
global function ReleaseMutex(hMutex: HANDLE): cint <cimport,nodecl> end
global function WaitForSingleObjectEx(hHandle: HANDLE, dwMilliseconds: culong, bAlertable: cint): culong <cimport,nodecl> end
global function WaitForMultipleObjectsEx(nCount: culong, lpHandles: *HANDLE, bWaitAll: cint, dwMilliseconds: culong, bAlertable: cint): culong <cimport,nodecl> end
global function OpenMutexW(dwDesiredAccess: culong, bInheritHandle: cint, lpName: LPCWSTR): HANDLE <cimport,nodecl> end
global function OpenEventA(dwDesiredAccess: culong, bInheritHandle: cint, lpName: LPCSTR): HANDLE <cimport,nodecl> end
global function OpenEventW(dwDesiredAccess: culong, bInheritHandle: cint, lpName: LPCWSTR): HANDLE <cimport,nodecl> end
global function OpenSemaphoreW(dwDesiredAccess: culong, bInheritHandle: cint, lpName: LPCWSTR): HANDLE <cimport,nodecl> end
global function WaitOnAddress(Address: pointer, CompareAddress: PVOID, AddressSize: culonglong, dwMilliseconds: culong): cint <cimport,nodecl> end
global function WakeByAddressSingle(Address: PVOID): void <cimport,nodecl> end
global function WakeByAddressAll(Address: PVOID): void <cimport,nodecl> end
global function InitializeSRWLock(SRWLock: PSRWLOCK): void <cimport,nodecl> end
global function ReleaseSRWLockExclusive(SRWLock: PSRWLOCK): void <cimport,nodecl> end
global function ReleaseSRWLockShared(SRWLock: PSRWLOCK): void <cimport,nodecl> end
global function AcquireSRWLockExclusive(SRWLock: PSRWLOCK): void <cimport,nodecl> end
global function AcquireSRWLockShared(SRWLock: PSRWLOCK): void <cimport,nodecl> end
global function TryAcquireSRWLockExclusive(SRWLock: PSRWLOCK): BOOLEAN <cimport,nodecl> end
global function TryAcquireSRWLockShared(SRWLock: PSRWLOCK): BOOLEAN <cimport,nodecl> end
global function InitializeCriticalSectionEx(lpCriticalSection: LPCRITICAL_SECTION, dwSpinCount: culong, Flags: culong): cint <cimport,nodecl> end
global function InitOnceInitialize(InitOnce: PINIT_ONCE): void <cimport,nodecl> end
global function InitOnceExecuteOnce(InitOnce: PINIT_ONCE, InitFn: PINIT_ONCE_FN, Parameter: PVOID, Context: *LPVOID): cint <cimport,nodecl> end
global function InitOnceBeginInitialize(lpInitOnce: LPINIT_ONCE, dwFlags: culong, fPending: PBOOL, lpContext: *LPVOID): cint <cimport,nodecl> end
global function InitOnceComplete(lpInitOnce: LPINIT_ONCE, dwFlags: culong, lpContext: LPVOID): cint <cimport,nodecl> end
global function InitializeConditionVariable(ConditionVariable: PCONDITION_VARIABLE): void <cimport,nodecl> end
global function WakeConditionVariable(ConditionVariable: PCONDITION_VARIABLE): void <cimport,nodecl> end
global function WakeAllConditionVariable(ConditionVariable: PCONDITION_VARIABLE): void <cimport,nodecl> end
global function SleepConditionVariableCS(ConditionVariable: PCONDITION_VARIABLE, CriticalSection: PCRITICAL_SECTION, dwMilliseconds: culong): cint <cimport,nodecl> end
global function SleepConditionVariableSRW(ConditionVariable: PCONDITION_VARIABLE, SRWLock: PSRWLOCK, dwMilliseconds: culong, Flags: culong): cint <cimport,nodecl> end
global function CreateMutexExA(lpMutexAttributes: LPSECURITY_ATTRIBUTES, lpName: LPCSTR, dwFlags: culong, dwDesiredAccess: culong): HANDLE <cimport,nodecl> end
global function CreateMutexExW(lpMutexAttributes: LPSECURITY_ATTRIBUTES, lpName: LPCWSTR, dwFlags: culong, dwDesiredAccess: culong): HANDLE <cimport,nodecl> end
global function CreateEventExA(lpEventAttributes: LPSECURITY_ATTRIBUTES, lpName: LPCSTR, dwFlags: culong, dwDesiredAccess: culong): HANDLE <cimport,nodecl> end
global function CreateEventExW(lpEventAttributes: LPSECURITY_ATTRIBUTES, lpName: LPCWSTR, dwFlags: culong, dwDesiredAccess: culong): HANDLE <cimport,nodecl> end
global function CreateSemaphoreExW(lpSemaphoreAttributes: LPSECURITY_ATTRIBUTES, lInitialCount: clong, lMaximumCount: clong, lpName: LPCWSTR, dwFlags: culong, dwDesiredAccess: culong): HANDLE <cimport,nodecl> end
global PTIMERAPCROUTINE: type <cimport,nodecl> = @function(LPVOID, culong, culong): void
global SYNCHRONIZATION_BARRIER: type = @_RTL_BARRIER
global PSYNCHRONIZATION_BARRIER: type = @*_RTL_BARRIER
global LPSYNCHRONIZATION_BARRIER: type = @*_RTL_BARRIER
global function InitializeCriticalSection(lpCriticalSection: LPCRITICAL_SECTION): void <cimport,nodecl> end
global function InitializeCriticalSectionAndSpinCount(lpCriticalSection: LPCRITICAL_SECTION, dwSpinCount: culong): cint <cimport,nodecl> end
global function SetCriticalSectionSpinCount(lpCriticalSection: LPCRITICAL_SECTION, dwSpinCount: culong): culong <cimport,nodecl> end
global function WaitForSingleObject(hHandle: HANDLE, dwMilliseconds: culong): culong <cimport,nodecl> end
global function SleepEx(dwMilliseconds: culong, bAlertable: cint): culong <cimport,nodecl> end
global function CreateMutexA(lpMutexAttributes: LPSECURITY_ATTRIBUTES, bInitialOwner: cint, lpName: LPCSTR): HANDLE <cimport,nodecl> end
global function CreateMutexW(lpMutexAttributes: LPSECURITY_ATTRIBUTES, bInitialOwner: cint, lpName: LPCWSTR): HANDLE <cimport,nodecl> end
global function CreateEventA(lpEventAttributes: LPSECURITY_ATTRIBUTES, bManualReset: cint, bInitialState: cint, lpName: LPCSTR): HANDLE <cimport,nodecl> end
global function CreateEventW(lpEventAttributes: LPSECURITY_ATTRIBUTES, bManualReset: cint, bInitialState: cint, lpName: LPCWSTR): HANDLE <cimport,nodecl> end
global function SetWaitableTimer(hTimer: HANDLE, lpDueTime: *LARGE_INTEGER, lPeriod: clong, pfnCompletionRoutine: PTIMERAPCROUTINE, lpArgToCompletionRoutine: LPVOID, fResume: cint): cint <cimport,nodecl> end
global function CancelWaitableTimer(hTimer: HANDLE): cint <cimport,nodecl> end
global function OpenWaitableTimerW(dwDesiredAccess: culong, bInheritHandle: cint, lpTimerName: LPCWSTR): HANDLE <cimport,nodecl> end
global function EnterSynchronizationBarrier(lpBarrier: LPSYNCHRONIZATION_BARRIER, dwFlags: culong): cint <cimport,nodecl> end
global function InitializeSynchronizationBarrier(lpBarrier: LPSYNCHRONIZATION_BARRIER, lTotalThreads: clong, lSpinCount: clong): cint <cimport,nodecl> end
global function DeleteSynchronizationBarrier(lpBarrier: LPSYNCHRONIZATION_BARRIER): cint <cimport,nodecl> end
global function Sleep(dwMilliseconds: culong): void <cimport,nodecl> end
global function SignalObjectAndWait(hObjectToSignal: HANDLE, hObjectToWaitOn: HANDLE, dwMilliseconds: culong, bAlertable: cint): culong <cimport,nodecl> end
global function CreateWaitableTimerExW(lpTimerAttributes: LPSECURITY_ATTRIBUTES, lpTimerName: LPCWSTR, dwFlags: culong, dwDesiredAccess: culong): HANDLE <cimport,nodecl> end
global _SYSTEM_INFO: type <cimport,nodecl,ctypedef> = @record{
  __unnamed1: union{
    dwOemId: culong,
    __unnamed1: record{
      wProcessorArchitecture: cushort,
      wReserved: cushort
    }
  },
  dwPageSize: culong,
  lpMinimumApplicationAddress: LPVOID,
  lpMaximumApplicationAddress: LPVOID,
  dwActiveProcessorMask: culonglong,
  dwNumberOfProcessors: culong,
  dwProcessorType: culong,
  dwAllocationGranularity: culong,
  wProcessorLevel: cushort,
  wProcessorRevision: cushort
}
global SYSTEM_INFO: type = @_SYSTEM_INFO
global LPSYSTEM_INFO: type = @*_SYSTEM_INFO
global function GetSystemTime(lpSystemTime: LPSYSTEMTIME): void <cimport,nodecl> end
global function GetSystemTimeAsFileTime(lpSystemTimeAsFileTime: LPFILETIME): void <cimport,nodecl> end
global function GetLocalTime(lpSystemTime: LPSYSTEMTIME): void <cimport,nodecl> end
global function GetNativeSystemInfo(lpSystemInfo: LPSYSTEM_INFO): void <cimport,nodecl> end
global function GetTickCount64(): culonglong <cimport,nodecl> end
global _MEMORYSTATUSEX: type <cimport,nodecl,ctypedef> = @record{
  dwLength: culong,
  dwMemoryLoad: culong,
  ullTotalPhys: culonglong,
  ullAvailPhys: culonglong,
  ullTotalPageFile: culonglong,
  ullAvailPageFile: culonglong,
  ullTotalVirtual: culonglong,
  ullAvailVirtual: culonglong,
  ullAvailExtendedVirtual: culonglong
}
global MEMORYSTATUSEX: type = @_MEMORYSTATUSEX
global LPMEMORYSTATUSEX: type = @*_MEMORYSTATUSEX
global function GetSystemInfo(lpSystemInfo: LPSYSTEM_INFO): void <cimport,nodecl> end
global function GlobalMemoryStatusEx(lpBuffer: LPMEMORYSTATUSEX): cint <cimport,nodecl> end
global function GetTickCount(): culong <cimport,nodecl> end
global function GetSystemTimePreciseAsFileTime(lpSystemTimeAsFileTime: LPFILETIME): void <cimport,nodecl> end
global function GetVersionExA(lpVersionInformation: LPOSVERSIONINFOA): cint <cimport,nodecl> end
global function GetVersionExW(lpVersionInformation: LPOSVERSIONINFOW): cint <cimport,nodecl> end
global _COMPUTER_NAME_FORMAT: type <cimport,nodecl,using,ctypedef> = @enum(cint){
  ComputerNameNetBIOS = 0,
  ComputerNameDnsHostname = 1,
  ComputerNameDnsDomain = 2,
  ComputerNameDnsFullyQualified = 3,
  ComputerNamePhysicalNetBIOS = 4,
  ComputerNamePhysicalDnsHostname = 5,
  ComputerNamePhysicalDnsDomain = 6,
  ComputerNamePhysicalDnsFullyQualified = 7,
  ComputerNameMax = 8
}
global COMPUTER_NAME_FORMAT: type = @_COMPUTER_NAME_FORMAT
global function GetVersion(): culong <cimport,nodecl> end
global function SetLocalTime(lpSystemTime: *SYSTEMTIME): cint <cimport,nodecl> end
global function GetSystemTimeAdjustment(lpTimeAdjustment: PDWORD, lpTimeIncrement: PDWORD, lpTimeAdjustmentDisabled: PBOOL): cint <cimport,nodecl> end
global function GetWindowsDirectoryA(lpBuffer: LPSTR, uSize: cuint): cuint <cimport,nodecl> end
global function GetWindowsDirectoryW(lpBuffer: LPWSTR, uSize: cuint): cuint <cimport,nodecl> end
global function GetSystemWindowsDirectoryA(lpBuffer: LPSTR, uSize: cuint): cuint <cimport,nodecl> end
global function GetSystemWindowsDirectoryW(lpBuffer: LPWSTR, uSize: cuint): cuint <cimport,nodecl> end
global function GetComputerNameExA(NameType: COMPUTER_NAME_FORMAT, lpBuffer: LPSTR, nSize: LPDWORD): cint <cimport,nodecl> end
global function GetComputerNameExW(NameType: COMPUTER_NAME_FORMAT, lpBuffer: LPWSTR, nSize: LPDWORD): cint <cimport,nodecl> end
global function SetComputerNameExW(NameType: COMPUTER_NAME_FORMAT, lpBuffer: LPCWSTR): cint <cimport,nodecl> end
global function SetSystemTime(lpSystemTime: *SYSTEMTIME): cint <cimport,nodecl> end
global function GetSystemDirectoryA(lpBuffer: LPSTR, uSize: cuint): cuint <cimport,nodecl> end
global function GetSystemDirectoryW(lpBuffer: LPWSTR, uSize: cuint): cuint <cimport,nodecl> end
global function GetLogicalProcessorInformation(Buffer: PSYSTEM_LOGICAL_PROCESSOR_INFORMATION, ReturnedLength: PDWORD): cint <cimport,nodecl> end
global function EnumSystemFirmwareTables(FirmwareTableProviderSignature: culong, pFirmwareTableEnumBuffer: PVOID, BufferSize: culong): cuint <cimport,nodecl> end
global function GetSystemFirmwareTable(FirmwareTableProviderSignature: culong, FirmwareTableID: culong, pFirmwareTableBuffer: PVOID, BufferSize: culong): cuint <cimport,nodecl> end
global function GetProductInfo(dwOSMajorVersion: culong, dwOSMinorVersion: culong, dwSpMajorVersion: culong, dwSpMinorVersion: culong, pdwReturnedProductType: PDWORD): cint <cimport,nodecl> end
global function GetNumaHighestNodeNumber(HighestNodeNumber: PULONG): cint <cimport,nodecl> end
global PTP_WIN32_IO_CALLBACK: type <cimport,nodecl> = @function(PTP_CALLBACK_INSTANCE, PVOID, PVOID, culong, culonglong, PTP_IO): void
global function CreateThreadpool(reserved: PVOID): PTP_POOL <cimport,nodecl> end
global function SetThreadpoolThreadMaximum(ptpp: PTP_POOL, cthrdMost: culong): void <cimport,nodecl> end
global function SetThreadpoolThreadMinimum(ptpp: PTP_POOL, cthrdMic: culong): cint <cimport,nodecl> end
global function SetThreadpoolStackInformation(ptpp: PTP_POOL, ptpsi: PTP_POOL_STACK_INFORMATION): cint <cimport,nodecl> end
global function QueryThreadpoolStackInformation(ptpp: PTP_POOL, ptpsi: PTP_POOL_STACK_INFORMATION): cint <cimport,nodecl> end
global function CloseThreadpool(ptpp: PTP_POOL): void <cimport,nodecl> end
global function CreateThreadpoolCleanupGroup(): PTP_CLEANUP_GROUP <cimport,nodecl> end
global function CloseThreadpoolCleanupGroupMembers(ptpcg: PTP_CLEANUP_GROUP, fCancelPendingCallbacks: cint, pvCleanupContext: PVOID): void <cimport,nodecl> end
global function CloseThreadpoolCleanupGroup(ptpcg: PTP_CLEANUP_GROUP): void <cimport,nodecl> end
global function SetEventWhenCallbackReturns(pci: PTP_CALLBACK_INSTANCE, evt: HANDLE): void <cimport,nodecl> end
global function ReleaseSemaphoreWhenCallbackReturns(pci: PTP_CALLBACK_INSTANCE, sem: HANDLE, crel: culong): void <cimport,nodecl> end
global function ReleaseMutexWhenCallbackReturns(pci: PTP_CALLBACK_INSTANCE, mut: HANDLE): void <cimport,nodecl> end
global function LeaveCriticalSectionWhenCallbackReturns(pci: PTP_CALLBACK_INSTANCE, pcs: PCRITICAL_SECTION): void <cimport,nodecl> end
global function FreeLibraryWhenCallbackReturns(pci: PTP_CALLBACK_INSTANCE, mod: HMODULE): void <cimport,nodecl> end
global function CallbackMayRunLong(pci: PTP_CALLBACK_INSTANCE): cint <cimport,nodecl> end
global function DisassociateCurrentThreadFromCallback(pci: PTP_CALLBACK_INSTANCE): void <cimport,nodecl> end
global function TrySubmitThreadpoolCallback(pfns: PTP_SIMPLE_CALLBACK, pv: PVOID, pcbe: PTP_CALLBACK_ENVIRON): cint <cimport,nodecl> end
global function CreateThreadpoolWork(pfnwk: PTP_WORK_CALLBACK, pv: PVOID, pcbe: PTP_CALLBACK_ENVIRON): PTP_WORK <cimport,nodecl> end
global function SubmitThreadpoolWork(pwk: PTP_WORK): void <cimport,nodecl> end
global function WaitForThreadpoolWorkCallbacks(pwk: PTP_WORK, fCancelPendingCallbacks: cint): void <cimport,nodecl> end
global function CloseThreadpoolWork(pwk: PTP_WORK): void <cimport,nodecl> end
global function CreateThreadpoolTimer(pfnti: PTP_TIMER_CALLBACK, pv: PVOID, pcbe: PTP_CALLBACK_ENVIRON): PTP_TIMER <cimport,nodecl> end
global function SetThreadpoolTimer(pti: PTP_TIMER, pftDueTime: PFILETIME, msPeriod: culong, msWindowLength: culong): void <cimport,nodecl> end
global function IsThreadpoolTimerSet(pti: PTP_TIMER): cint <cimport,nodecl> end
global function WaitForThreadpoolTimerCallbacks(pti: PTP_TIMER, fCancelPendingCallbacks: cint): void <cimport,nodecl> end
global function CloseThreadpoolTimer(pti: PTP_TIMER): void <cimport,nodecl> end
global function CreateThreadpoolWait(pfnwa: PTP_WAIT_CALLBACK, pv: PVOID, pcbe: PTP_CALLBACK_ENVIRON): PTP_WAIT <cimport,nodecl> end
global function SetThreadpoolWait(pwa: PTP_WAIT, h: HANDLE, pftTimeout: PFILETIME): void <cimport,nodecl> end
global function WaitForThreadpoolWaitCallbacks(pwa: PTP_WAIT, fCancelPendingCallbacks: cint): void <cimport,nodecl> end
global function CloseThreadpoolWait(pwa: PTP_WAIT): void <cimport,nodecl> end
global function CreateThreadpoolIo(fl: HANDLE, pfnio: PTP_WIN32_IO_CALLBACK, pv: PVOID, pcbe: PTP_CALLBACK_ENVIRON): PTP_IO <cimport,nodecl> end
global function StartThreadpoolIo(pio: PTP_IO): void <cimport,nodecl> end
global function CancelThreadpoolIo(pio: PTP_IO): void <cimport,nodecl> end
global function WaitForThreadpoolIoCallbacks(pio: PTP_IO, fCancelPendingCallbacks: cint): void <cimport,nodecl> end
global function CloseThreadpoolIo(pio: PTP_IO): void <cimport,nodecl> end
global function SetThreadpoolTimerEx(pti: PTP_TIMER, pftDueTime: PFILETIME, msPeriod: culong, msWindowLength: culong): cint <cimport,nodecl> end
global function SetThreadpoolWaitEx(pwa: PTP_WAIT, h: HANDLE, pftTimeout: PFILETIME, Reserved: PVOID): cint <cimport,nodecl> end
global function CreateTimerQueueTimer(phNewTimer: PHANDLE, TimerQueue: HANDLE, Callback: WAITORTIMERCALLBACK, Parameter: PVOID, DueTime: culong, Period: culong, Flags: culong): cint <cimport,nodecl> end
global function DeleteTimerQueueTimer(TimerQueue: HANDLE, Timer: HANDLE, CompletionEvent: HANDLE): cint <cimport,nodecl> end
global function QueueUserWorkItem(Function: LPTHREAD_START_ROUTINE, Context: PVOID, Flags: culong): cint <cimport,nodecl> end
global function UnregisterWaitEx(WaitHandle: HANDLE, CompletionEvent: HANDLE): cint <cimport,nodecl> end
global function CreateTimerQueue(): HANDLE <cimport,nodecl> end
global function ChangeTimerQueueTimer(TimerQueue: HANDLE, Timer: HANDLE, DueTime: culong, Period: culong): cint <cimport,nodecl> end
global function DeleteTimerQueueEx(TimerQueue: HANDLE, CompletionEvent: HANDLE): cint <cimport,nodecl> end
global function EncodePointer(Ptr: PVOID): PVOID <cimport,nodecl> end
global function DecodePointer(Ptr: PVOID): PVOID <cimport,nodecl> end
global function EncodeSystemPointer(Ptr: PVOID): PVOID <cimport,nodecl> end
global function DecodeSystemPointer(Ptr: PVOID): PVOID <cimport,nodecl> end
global function Beep(dwFreq: culong, dwDuration: culong): cint <cimport,nodecl> end
global function Wow64DisableWow64FsRedirection(OldValue: *PVOID): cint <cimport,nodecl> end
global function Wow64RevertWow64FsRedirection(OlValue: PVOID): cint <cimport,nodecl> end
global function GetSystemWow64DirectoryA(lpBuffer: LPSTR, uSize: cuint): cuint <cimport,nodecl> end
global function GetSystemWow64DirectoryW(lpBuffer: LPWSTR, uSize: cuint): cuint <cimport,nodecl> end
global function Wow64GetThreadContext(hThread: HANDLE, lpContext: PWOW64_CONTEXT): cint <cimport,nodecl> end
global function Wow64SetThreadContext(hThread: HANDLE, lpContext: *WOW64_CONTEXT): cint <cimport,nodecl> end
global function Wow64SuspendThread(hThread: HANDLE): culong <cimport,nodecl> end
global function IsWow64Process(hProcess: HANDLE, Wow64Process: PBOOL): cint <cimport,nodecl> end
global PFIBER_START_ROUTINE: type <cimport,nodecl> = @function(LPVOID): void
global LPFIBER_START_ROUTINE: type <cimport,nodecl> = @function(LPVOID): void
global PFIBER_CALLOUT_ROUTINE: type <cimport,nodecl> = @function(LPVOID): LPVOID
global LPLDT_ENTRY: type = @pointer
global _COMMPROP: type <cimport,nodecl,ctypedef> = @record{
  wPacketLength: cushort,
  wPacketVersion: cushort,
  dwServiceMask: culong,
  dwReserved1: culong,
  dwMaxTxQueue: culong,
  dwMaxRxQueue: culong,
  dwMaxBaud: culong,
  dwProvSubType: culong,
  dwProvCapabilities: culong,
  dwSettableParams: culong,
  dwSettableBaud: culong,
  wSettableData: cushort,
  wSettableStopParity: cushort,
  dwCurrentTxQueue: culong,
  dwCurrentRxQueue: culong,
  dwProvSpec1: culong,
  dwProvSpec2: culong,
  wcProvChar: [1]cwchar_t
}
global COMMPROP: type = @_COMMPROP
global LPCOMMPROP: type = @*_COMMPROP
global _COMSTAT: type <cimport,nodecl,cincomplete,ctypedef> = @record{
  fCtsHold: culong,
  fDsrHold: culong,
  fRlsdHold: culong,
  fXoffHold: culong,
  fXoffSent: culong,
  fEof: culong,
  fTxim: culong,
  fReserved: culong,
  cbInQue: culong,
  cbOutQue: culong
}
global COMSTAT: type = @_COMSTAT
global LPCOMSTAT: type = @*_COMSTAT
global _DCB: type <cimport,nodecl,cincomplete,ctypedef> = @record{
  DCBlength: culong,
  BaudRate: culong,
  fBinary: culong,
  fParity: culong,
  fOutxCtsFlow: culong,
  fOutxDsrFlow: culong,
  fDtrControl: culong,
  fDsrSensitivity: culong,
  fTXContinueOnXoff: culong,
  fOutX: culong,
  fInX: culong,
  fErrorChar: culong,
  fNull: culong,
  fRtsControl: culong,
  fAbortOnError: culong,
  fDummy2: culong,
  wReserved: cushort,
  XonLim: cushort,
  XoffLim: cushort,
  ByteSize: cuchar,
  Parity: cuchar,
  StopBits: cuchar,
  XonChar: cchar,
  XoffChar: cchar,
  ErrorChar: cchar,
  EofChar: cchar,
  EvtChar: cchar,
  wReserved1: cushort
}
global DCB: type = @_DCB
global LPDCB: type = @*_DCB
global _COMMTIMEOUTS: type <cimport,nodecl,ctypedef> = @record{
  ReadIntervalTimeout: culong,
  ReadTotalTimeoutMultiplier: culong,
  ReadTotalTimeoutConstant: culong,
  WriteTotalTimeoutMultiplier: culong,
  WriteTotalTimeoutConstant: culong
}
global COMMTIMEOUTS: type = @_COMMTIMEOUTS
global LPCOMMTIMEOUTS: type = @*_COMMTIMEOUTS
global _COMMCONFIG: type <cimport,nodecl,ctypedef> = @record{
  dwSize: culong,
  wVersion: cushort,
  wReserved: cushort,
  dcb: DCB,
  dwProviderSubType: culong,
  dwProviderOffset: culong,
  dwProviderSize: culong,
  wcProviderData: [1]cwchar_t
}
global COMMCONFIG: type = @_COMMCONFIG
global LPCOMMCONFIG: type = @*_COMMCONFIG
global _MEMORYSTATUS: type <cimport,nodecl,ctypedef> = @record{
  dwLength: culong,
  dwMemoryLoad: culong,
  dwTotalPhys: culonglong,
  dwAvailPhys: culonglong,
  dwTotalPageFile: culonglong,
  dwAvailPageFile: culonglong,
  dwTotalVirtual: culonglong,
  dwAvailVirtual: culonglong
}
global MEMORYSTATUS: type = @_MEMORYSTATUS
global LPMEMORYSTATUS: type = @*_MEMORYSTATUS
global _JIT_DEBUG_INFO: type <cimport,nodecl,ctypedef> = @record{
  dwSize: culong,
  dwProcessorArchitecture: culong,
  dwThreadID: culong,
  dwReserved0: culong,
  lpExceptionAddress: culonglong,
  lpExceptionRecord: culonglong,
  lpContextRecord: culonglong
}
global JIT_DEBUG_INFO: type = @_JIT_DEBUG_INFO
global LPJIT_DEBUG_INFO: type = @*_JIT_DEBUG_INFO
global JIT_DEBUG_INFO32: type = @_JIT_DEBUG_INFO
global LPJIT_DEBUG_INFO32: type = @*JIT_DEBUG_INFO
global JIT_DEBUG_INFO64: type = @_JIT_DEBUG_INFO
global LPJIT_DEBUG_INFO64: type = @*JIT_DEBUG_INFO
global LPEXCEPTION_RECORD: type = @*EXCEPTION_RECORD
global LPEXCEPTION_POINTERS: type = @*_EXCEPTION_POINTERS
global _OFSTRUCT: type <cimport,nodecl,ctypedef> = @record{
  cBytes: cuchar,
  fFixedDisk: cuchar,
  nErrCode: cushort,
  Reserved1: cushort,
  Reserved2: cushort,
  szPathName: [128]cchar
}
global OFSTRUCT: type = @_OFSTRUCT
global LPOFSTRUCT: type = @*_OFSTRUCT
global POFSTRUCT: type = @*_OFSTRUCT
global function _InterlockedAnd8(Destination: cstring, Value: cchar): cchar <cimport,nodecl> end
global function _InterlockedOr8(Destination: cstring, Value: cchar): cchar <cimport,nodecl> end
global function _InterlockedXor8(Destination: cstring, Value: cchar): cchar <cimport,nodecl> end
global function _InterlockedAnd16(Destination: *cshort, Value: cshort): cshort <cimport,nodecl> end
global function _InterlockedOr16(Destination: *cshort, Value: cshort): cshort <cimport,nodecl> end
global function _InterlockedXor16(Destination: *cshort, Value: cshort): cshort <cimport,nodecl> end
global function LocalAlloc(uFlags: cuint, uBytes: culonglong): HLOCAL <cimport,nodecl> end
global function LocalFree(hMem: HLOCAL): HLOCAL <cimport,nodecl> end
global function WinMain(hInstance: HINSTANCE, hPrevInstance: HINSTANCE, lpCmdLine: LPSTR, nShowCmd: cint): cint <cimport,nodecl> end
global function wWinMain(hInstance: HINSTANCE, hPrevInstance: HINSTANCE, lpCmdLine: LPWSTR, nShowCmd: cint): cint <cimport,nodecl> end
global function GlobalFlags(hMem: HGLOBAL): cuint <cimport,nodecl> end
global function GlobalHandle(pMem: LPCVOID): HGLOBAL <cimport,nodecl> end
global function GlobalCompact(dwMinFree: culong): culonglong <cimport,nodecl> end
global function GlobalFix(hMem: HGLOBAL): void <cimport,nodecl> end
global function GlobalUnfix(hMem: HGLOBAL): void <cimport,nodecl> end
global function GlobalWire(hMem: HGLOBAL): LPVOID <cimport,nodecl> end
global function GlobalUnWire(hMem: HGLOBAL): cint <cimport,nodecl> end
global function GlobalMemoryStatus(lpBuffer: LPMEMORYSTATUS): void <cimport,nodecl> end
global function LocalLock(hMem: HLOCAL): LPVOID <cimport,nodecl> end
global function LocalHandle(pMem: LPCVOID): HLOCAL <cimport,nodecl> end
global function LocalUnlock(hMem: HLOCAL): cint <cimport,nodecl> end
global function LocalSize(hMem: HLOCAL): culonglong <cimport,nodecl> end
global function LocalFlags(hMem: HLOCAL): cuint <cimport,nodecl> end
global function LocalShrink(hMem: HLOCAL, cbNewSize: cuint): culonglong <cimport,nodecl> end
global function LocalCompact(uMinFree: cuint): culonglong <cimport,nodecl> end
global function GetBinaryTypeA(lpApplicationName: LPCSTR, lpBinaryType: LPDWORD): cint <cimport,nodecl> end
global function GetBinaryTypeW(lpApplicationName: LPCWSTR, lpBinaryType: LPDWORD): cint <cimport,nodecl> end
global function GetShortPathNameA(lpszLongPath: LPCSTR, lpszShortPath: LPSTR, cchBuffer: culong): culong <cimport,nodecl> end
global function GetLongPathNameTransactedA(lpszShortPath: LPCSTR, lpszLongPath: LPSTR, cchBuffer: culong, hTransaction: HANDLE): culong <cimport,nodecl> end
global function GetLongPathNameTransactedW(lpszShortPath: LPCWSTR, lpszLongPath: LPWSTR, cchBuffer: culong, hTransaction: HANDLE): culong <cimport,nodecl> end
global function GetProcessIoCounters(hProcess: HANDLE, lpIoCounters: PIO_COUNTERS): cint <cimport,nodecl> end
global function GetProcessWorkingSetSize(hProcess: HANDLE, lpMinimumWorkingSetSize: PSIZE_T, lpMaximumWorkingSetSize: PSIZE_T): cint <cimport,nodecl> end
global function SetProcessWorkingSetSize(hProcess: HANDLE, dwMinimumWorkingSetSize: culonglong, dwMaximumWorkingSetSize: culonglong): cint <cimport,nodecl> end
global function FatalExit(ExitCode: cint): void <cimport,nodecl> end
global function SetEnvironmentStringsA(NewEnvironment: LPCH): cint <cimport,nodecl> end
global function GlobalAlloc(uFlags: cuint, dwBytes: culonglong): HGLOBAL <cimport,nodecl> end
global function GlobalReAlloc(hMem: HGLOBAL, dwBytes: culonglong, uFlags: cuint): HGLOBAL <cimport,nodecl> end
global function GlobalSize(hMem: HGLOBAL): culonglong <cimport,nodecl> end
global function GlobalLock(hMem: HGLOBAL): LPVOID <cimport,nodecl> end
global function GlobalUnlock(hMem: HGLOBAL): cint <cimport,nodecl> end
global function GlobalFree(hMem: HGLOBAL): HGLOBAL <cimport,nodecl> end
global function LocalReAlloc(hMem: HLOCAL, uBytes: culonglong, uFlags: cuint): HLOCAL <cimport,nodecl> end
global function GetProcessAffinityMask(hProcess: HANDLE, lpProcessAffinityMask: PDWORD_PTR, lpSystemAffinityMask: PDWORD_PTR): cint <cimport,nodecl> end
global function SetProcessAffinityMask(hProcess: HANDLE, dwProcessAffinityMask: culonglong): cint <cimport,nodecl> end
global function SetThreadAffinityMask(hThread: HANDLE, dwThreadAffinityMask: culonglong): culonglong <cimport,nodecl> end
global function RaiseFailFastException(pExceptionRecord: PEXCEPTION_RECORD, pContextRecord: PCONTEXT, dwFlags: culong): void <cimport,nodecl> end
global function SetThreadIdealProcessor(hThread: HANDLE, dwIdealProcessor: culong): culong <cimport,nodecl> end
global function CreateFiberEx(dwStackCommitSize: culonglong, dwStackReserveSize: culonglong, dwFlags: culong, lpStartAddress: LPFIBER_START_ROUTINE, lpParameter: LPVOID): LPVOID <cimport,nodecl> end
global function DeleteFiber(lpFiber: LPVOID): void <cimport,nodecl> end
global function SwitchToFiber(lpFiber: LPVOID): void <cimport,nodecl> end
global function ConvertFiberToThread(): cint <cimport,nodecl> end
global function ConvertThreadToFiberEx(lpParameter: LPVOID, dwFlags: culong): LPVOID <cimport,nodecl> end
global _THREAD_INFORMATION_CLASS: type <cimport,nodecl,using,ctypedef> = @enum(cint){
  ThreadMemoryPriority = 0,
  ThreadAbsoluteCpuPriority = 1,
  ThreadDynamicCodePolicy = 2,
  ThreadPowerThrottling = 3,
  ThreadInformationClassMax = 4
}
global THREAD_INFORMATION_CLASS: type = @_THREAD_INFORMATION_CLASS
global function CreateFiber(dwStackSize: culonglong, lpStartAddress: LPFIBER_START_ROUTINE, lpParameter: LPVOID): LPVOID <cimport,nodecl> end
global function ConvertThreadToFiber(lpParameter: LPVOID): LPVOID <cimport,nodecl> end
global function SetProcessDEPPolicy(dwFlags: culong): cint <cimport,nodecl> end
global function GetProcessDEPPolicy(hProcess: HANDLE, lpFlags: LPDWORD, lpPermanent: PBOOL): cint <cimport,nodecl> end
global function RequestWakeupLatency(latency: LATENCY_TIME): cint <cimport,nodecl> end
global function IsSystemResumeAutomatic(): cint <cimport,nodecl> end
global function GetThreadIOPendingFlag(hThread: HANDLE, lpIOIsPending: PBOOL): cint <cimport,nodecl> end
global function GetThreadSelectorEntry(hThread: HANDLE, dwSelector: culong, lpSelectorEntry: LPLDT_ENTRY): cint <cimport,nodecl> end
global function SetThreadExecutionState(esFlags: culong): culong <cimport,nodecl> end
global function SetFileCompletionNotificationModes(FileHandle: HANDLE, Flags: cuchar): cint <cimport,nodecl> end
global function SetFileIoOverlappedRange(FileHandle: HANDLE, OverlappedRangeStart: PUCHAR, Length: culong): cint <cimport,nodecl> end
global function DebugSetProcessKillOnExit(KillOnExit: cint): cint <cimport,nodecl> end
global function DebugBreakProcess(Process: HANDLE): cint <cimport,nodecl> end
global function WaitForMultipleObjects(nCount: culong, lpHandles: *HANDLE, bWaitAll: cint, dwMilliseconds: culong): culong <cimport,nodecl> end
global _DEP_SYSTEM_POLICY_TYPE: type <cimport,nodecl,using,ctypedef> = @enum(cint){
  DEPPolicyAlwaysOff = 0,
  DEPPolicyAlwaysOn = 1,
  DEPPolicyOptIn = 2,
  DEPPolicyOptOut = 3,
  DEPTotalPolicyCount = 4
}
global DEP_SYSTEM_POLICY_TYPE: type = @_DEP_SYSTEM_POLICY_TYPE
global function PulseEvent(hEvent: HANDLE): cint <cimport,nodecl> end
global function GlobalDeleteAtom(nAtom: cushort): cushort <cimport,nodecl> end
global function InitAtomTable(nSize: culong): cint <cimport,nodecl> end
global function DeleteAtom(nAtom: cushort): cushort <cimport,nodecl> end
global function SetHandleCount(uNumber: cuint): cuint <cimport,nodecl> end
global function RequestDeviceWakeup(hDevice: HANDLE): cint <cimport,nodecl> end
global function CancelDeviceWakeupRequest(hDevice: HANDLE): cint <cimport,nodecl> end
global function GetDevicePowerState(hDevice: HANDLE, pfOn: *cint): cint <cimport,nodecl> end
global function SetMessageWaitingIndicator(hMsgIndicator: HANDLE, ulMsgCount: culong): cint <cimport,nodecl> end
global function SetFileShortNameA(hFile: HANDLE, lpShortName: LPCSTR): cint <cimport,nodecl> end
global function SetFileShortNameW(hFile: HANDLE, lpShortName: LPCWSTR): cint <cimport,nodecl> end
global function LoadModule(lpModuleName: LPCSTR, lpParameterBlock: LPVOID): culong <cimport,nodecl> end
global function WinExec(lpCmdLine: LPCSTR, uCmdShow: cuint): cuint <cimport,nodecl> end
global function SetTapePosition(hDevice: HANDLE, dwPositionMethod: culong, dwPartition: culong, dwOffsetLow: culong, dwOffsetHigh: culong, bImmediate: cint): culong <cimport,nodecl> end
global function GetTapePosition(hDevice: HANDLE, dwPositionType: culong, lpdwPartition: LPDWORD, lpdwOffsetLow: LPDWORD, lpdwOffsetHigh: LPDWORD): culong <cimport,nodecl> end
global function PrepareTape(hDevice: HANDLE, dwOperation: culong, bImmediate: cint): culong <cimport,nodecl> end
global function EraseTape(hDevice: HANDLE, dwEraseType: culong, bImmediate: cint): culong <cimport,nodecl> end
global function CreateTapePartition(hDevice: HANDLE, dwPartitionMethod: culong, dwCount: culong, dwSize: culong): culong <cimport,nodecl> end
global function WriteTapemark(hDevice: HANDLE, dwTapemarkType: culong, dwTapemarkCount: culong, bImmediate: cint): culong <cimport,nodecl> end
global function GetTapeStatus(hDevice: HANDLE): culong <cimport,nodecl> end
global function GetTapeParameters(hDevice: HANDLE, dwOperation: culong, lpdwSize: LPDWORD, lpTapeInformation: LPVOID): culong <cimport,nodecl> end
global function SetTapeParameters(hDevice: HANDLE, dwOperation: culong, lpTapeInformation: LPVOID): culong <cimport,nodecl> end
global function GetSystemDEPPolicy(): DEP_SYSTEM_POLICY_TYPE <cimport,nodecl> end
global function GetSystemRegistryQuota(pdwQuotaAllowed: PDWORD, pdwQuotaUsed: PDWORD): cint <cimport,nodecl> end
global function FileTimeToDosDateTime(lpFileTime: *FILETIME, lpFatDate: LPWORD, lpFatTime: LPWORD): cint <cimport,nodecl> end
global function DosDateTimeToFileTime(wFatDate: cushort, wFatTime: cushort, lpFileTime: LPFILETIME): cint <cimport,nodecl> end
global function SetSystemTimeAdjustment(dwTimeAdjustment: culong, bTimeAdjustmentDisabled: cint): cint <cimport,nodecl> end
global function GetThreadErrorMode(): culong <cimport,nodecl> end
global function SetThreadErrorMode(dwNewMode: culong, lpOldMode: LPDWORD): cint <cimport,nodecl> end
global function ClearCommBreak(hFile: HANDLE): cint <cimport,nodecl> end
global function ClearCommError(hFile: HANDLE, lpErrors: LPDWORD, lpStat: LPCOMSTAT): cint <cimport,nodecl> end
global function SetupComm(hFile: HANDLE, dwInQueue: culong, dwOutQueue: culong): cint <cimport,nodecl> end
global function EscapeCommFunction(hFile: HANDLE, dwFunc: culong): cint <cimport,nodecl> end
global function GetCommConfig(hCommDev: HANDLE, lpCC: LPCOMMCONFIG, lpdwSize: LPDWORD): cint <cimport,nodecl> end
global function GetCommMask(hFile: HANDLE, lpEvtMask: LPDWORD): cint <cimport,nodecl> end
global function GetCommProperties(hFile: HANDLE, lpCommProp: LPCOMMPROP): cint <cimport,nodecl> end
global function GetCommModemStatus(hFile: HANDLE, lpModemStat: LPDWORD): cint <cimport,nodecl> end
global function GetCommState(hFile: HANDLE, lpDCB: LPDCB): cint <cimport,nodecl> end
global function GetCommTimeouts(hFile: HANDLE, lpCommTimeouts: LPCOMMTIMEOUTS): cint <cimport,nodecl> end
global function PurgeComm(hFile: HANDLE, dwFlags: culong): cint <cimport,nodecl> end
global function SetCommBreak(hFile: HANDLE): cint <cimport,nodecl> end
global function SetCommConfig(hCommDev: HANDLE, lpCC: LPCOMMCONFIG, dwSize: culong): cint <cimport,nodecl> end
global function SetCommMask(hFile: HANDLE, dwEvtMask: culong): cint <cimport,nodecl> end
global function SetCommState(hFile: HANDLE, lpDCB: LPDCB): cint <cimport,nodecl> end
global function SetCommTimeouts(hFile: HANDLE, lpCommTimeouts: LPCOMMTIMEOUTS): cint <cimport,nodecl> end
global function TransmitCommChar(hFile: HANDLE, cChar: cchar): cint <cimport,nodecl> end
global function WaitCommEvent(hFile: HANDLE, lpEvtMask: LPDWORD, lpOverlapped: LPOVERLAPPED): cint <cimport,nodecl> end
global function GetProcessPriorityBoost(hProcess: HANDLE, pDisablePriorityBoost: PBOOL): cint <cimport,nodecl> end
global function SetProcessPriorityBoost(hProcess: HANDLE, bDisablePriorityBoost: cint): cint <cimport,nodecl> end
global function MulDiv(nNumber: cint, nNumerator: cint, nDenominator: cint): cint <cimport,nodecl> end
global function FormatMessageA(dwFlags: culong, lpSource: LPCVOID, dwMessageId: culong, dwLanguageId: culong, lpBuffer: LPSTR, nSize: culong, Arguments: *cvalist): culong <cimport,nodecl> end
global function FormatMessageW(dwFlags: culong, lpSource: LPCVOID, dwMessageId: culong, dwLanguageId: culong, lpBuffer: LPWSTR, nSize: culong, Arguments: *cvalist): culong <cimport,nodecl> end
global PFE_EXPORT_FUNC: type <cimport,nodecl> = @function(PBYTE, PVOID, culong): culong
global PFE_IMPORT_FUNC: type <cimport,nodecl> = @function(PBYTE, PVOID, PULONG): culong
global function GetNamedPipeInfo(hNamedPipe: HANDLE, lpFlags: LPDWORD, lpOutBufferSize: LPDWORD, lpInBufferSize: LPDWORD, lpMaxInstances: LPDWORD): cint <cimport,nodecl> end
global function CreateMailslotA(lpName: LPCSTR, nMaxMessageSize: culong, lReadTimeout: culong, lpSecurityAttributes: LPSECURITY_ATTRIBUTES): HANDLE <cimport,nodecl> end
global function CreateMailslotW(lpName: LPCWSTR, nMaxMessageSize: culong, lReadTimeout: culong, lpSecurityAttributes: LPSECURITY_ATTRIBUTES): HANDLE <cimport,nodecl> end
global function GetMailslotInfo(hMailslot: HANDLE, lpMaxMessageSize: LPDWORD, lpNextSize: LPDWORD, lpMessageCount: LPDWORD, lpReadTimeout: LPDWORD): cint <cimport,nodecl> end
global function SetMailslotInfo(hMailslot: HANDLE, lReadTimeout: culong): cint <cimport,nodecl> end
global function EncryptFileA(lpFileName: LPCSTR): cint <cimport,nodecl> end
global function EncryptFileW(lpFileName: LPCWSTR): cint <cimport,nodecl> end
global function DecryptFileA(lpFileName: LPCSTR, dwReserved: culong): cint <cimport,nodecl> end
global function DecryptFileW(lpFileName: LPCWSTR, dwReserved: culong): cint <cimport,nodecl> end
global function FileEncryptionStatusA(lpFileName: LPCSTR, lpStatus: LPDWORD): cint <cimport,nodecl> end
global function FileEncryptionStatusW(lpFileName: LPCWSTR, lpStatus: LPDWORD): cint <cimport,nodecl> end
global function OpenEncryptedFileRawA(lpFileName: LPCSTR, ulFlags: culong, pvContext: *PVOID): culong <cimport,nodecl> end
global function OpenEncryptedFileRawW(lpFileName: LPCWSTR, ulFlags: culong, pvContext: *PVOID): culong <cimport,nodecl> end
global function ReadEncryptedFileRaw(pfExportCallback: PFE_EXPORT_FUNC, pvCallbackContext: PVOID, pvContext: PVOID): culong <cimport,nodecl> end
global function WriteEncryptedFileRaw(pfImportCallback: PFE_IMPORT_FUNC, pvCallbackContext: PVOID, pvContext: PVOID): culong <cimport,nodecl> end
global function CloseEncryptedFileRaw(pvContext: PVOID): void <cimport,nodecl> end
global function lstrcmpA(lpString1: LPCSTR, lpString2: LPCSTR): cint <cimport,nodecl> end
global function lstrcmpW(lpString1: LPCWSTR, lpString2: LPCWSTR): cint <cimport,nodecl> end
global function lstrcmpiA(lpString1: LPCSTR, lpString2: LPCSTR): cint <cimport,nodecl> end
global function lstrcmpiW(lpString1: LPCWSTR, lpString2: LPCWSTR): cint <cimport,nodecl> end
global function lstrcpynA(lpString1: LPSTR, lpString2: LPCSTR, iMaxLength: cint): LPSTR <cimport,nodecl> end
global function lstrcpynW(lpString1: LPWSTR, lpString2: LPCWSTR, iMaxLength: cint): LPWSTR <cimport,nodecl> end
global function lstrcpyA(lpString1: LPSTR, lpString2: LPCSTR): LPSTR <cimport,nodecl> end
global function lstrcpyW(lpString1: LPWSTR, lpString2: LPCWSTR): LPWSTR <cimport,nodecl> end
global function lstrcatA(lpString1: LPSTR, lpString2: LPCSTR): LPSTR <cimport,nodecl> end
global function lstrcatW(lpString1: LPWSTR, lpString2: LPCWSTR): LPWSTR <cimport,nodecl> end
global function lstrlenA(lpString: LPCSTR): cint <cimport,nodecl> end
global function lstrlenW(lpString: LPCWSTR): cint <cimport,nodecl> end
global function OpenFile(lpFileName: LPCSTR, lpReOpenBuff: LPOFSTRUCT, uStyle: cuint): cint <cimport,nodecl> end
global function IsTextUnicode(lpv: pointer, iSize: cint, lpiResult: LPINT): cint <cimport,nodecl> end
global function BackupRead(hFile: HANDLE, lpBuffer: LPBYTE, nNumberOfBytesToRead: culong, lpNumberOfBytesRead: LPDWORD, bAbort: cint, bProcessSecurity: cint, lpContext: *LPVOID): cint <cimport,nodecl> end
global function BackupSeek(hFile: HANDLE, dwLowBytesToSeek: culong, dwHighBytesToSeek: culong, lpdwLowByteSeeked: LPDWORD, lpdwHighByteSeeked: LPDWORD, lpContext: *LPVOID): cint <cimport,nodecl> end
global function BackupWrite(hFile: HANDLE, lpBuffer: LPBYTE, nNumberOfBytesToWrite: culong, lpNumberOfBytesWritten: LPDWORD, bAbort: cint, bProcessSecurity: cint, lpContext: *LPVOID): cint <cimport,nodecl> end
global _WIN32_STREAM_ID: type <cimport,nodecl,ctypedef> = @record{
  dwStreamId: culong,
  dwStreamAttributes: culong,
  Size: LARGE_INTEGER,
  dwStreamNameSize: culong,
  cStreamName: [1]cwchar_t
}
global WIN32_STREAM_ID: type = @_WIN32_STREAM_ID
global LPWIN32_STREAM_ID: type = @*_WIN32_STREAM_ID
global _STARTUPINFOEXA: type <cimport,nodecl,ctypedef> = @record{
  StartupInfo: STARTUPINFOA,
  lpAttributeList: LPPROC_THREAD_ATTRIBUTE_LIST
}
global STARTUPINFOEXA: type = @_STARTUPINFOEXA
global LPSTARTUPINFOEXA: type = @*_STARTUPINFOEXA
global _STARTUPINFOEXW: type <cimport,nodecl,ctypedef> = @record{
  StartupInfo: STARTUPINFOW,
  lpAttributeList: LPPROC_THREAD_ATTRIBUTE_LIST
}
global STARTUPINFOEXW: type = @_STARTUPINFOEXW
global LPSTARTUPINFOEXW: type = @*_STARTUPINFOEXW
global STARTUPINFOEX: type = @_STARTUPINFOEXA
global LPSTARTUPINFOEX: type = @*_STARTUPINFOEXA
global function GetSystemTimes(lpIdleTime: LPFILETIME, lpKernelTime: LPFILETIME, lpUserTime: LPFILETIME): cint <cimport,nodecl> end
global function CreateSemaphoreW(lpSemaphoreAttributes: LPSECURITY_ATTRIBUTES, lInitialCount: clong, lMaximumCount: clong, lpName: LPCWSTR): HANDLE <cimport,nodecl> end
global function CreateWaitableTimerW(lpTimerAttributes: LPSECURITY_ATTRIBUTES, bManualReset: cint, lpTimerName: LPCWSTR): HANDLE <cimport,nodecl> end
global function OpenMutexA(dwDesiredAccess: culong, bInheritHandle: cint, lpName: LPCSTR): HANDLE <cimport,nodecl> end
global function OpenSemaphoreA(dwDesiredAccess: culong, bInheritHandle: cint, lpName: LPCSTR): HANDLE <cimport,nodecl> end
global function CreateWaitableTimerA(lpTimerAttributes: LPSECURITY_ATTRIBUTES, bManualReset: cint, lpTimerName: LPCSTR): HANDLE <cimport,nodecl> end
global function OpenWaitableTimerA(dwDesiredAccess: culong, bInheritHandle: cint, lpTimerName: LPCSTR): HANDLE <cimport,nodecl> end
global function CreateFileMappingA(hFile: HANDLE, lpFileMappingAttributes: LPSECURITY_ATTRIBUTES, flProtect: culong, dwMaximumSizeHigh: culong, dwMaximumSizeLow: culong, lpName: LPCSTR): HANDLE <cimport,nodecl> end
global function CreateWaitableTimerExA(lpTimerAttributes: LPSECURITY_ATTRIBUTES, lpTimerName: LPCSTR, dwFlags: culong, dwDesiredAccess: culong): HANDLE <cimport,nodecl> end
global function CreateFileMappingNumaA(hFile: HANDLE, lpFileMappingAttributes: LPSECURITY_ATTRIBUTES, flProtect: culong, dwMaximumSizeHigh: culong, dwMaximumSizeLow: culong, lpName: LPCSTR, nndPreferred: culong): HANDLE <cimport,nodecl> end
global function OpenFileMappingA(dwDesiredAccess: culong, bInheritHandle: cint, lpName: LPCSTR): HANDLE <cimport,nodecl> end
global function GetLogicalDriveStringsA(nBufferLength: culong, lpBuffer: LPSTR): culong <cimport,nodecl> end
global function CreateSemaphoreA(lpSemaphoreAttributes: LPSECURITY_ATTRIBUTES, lInitialCount: clong, lMaximumCount: clong, lpName: LPCSTR): HANDLE <cimport,nodecl> end
global function CreateSemaphoreExA(lpSemaphoreAttributes: LPSECURITY_ATTRIBUTES, lInitialCount: clong, lMaximumCount: clong, lpName: LPCSTR, dwFlags: culong, dwDesiredAccess: culong): HANDLE <cimport,nodecl> end
global _PROCESS_INFORMATION_CLASS: type <cimport,nodecl,using,ctypedef> = @enum(cint){
  ProcessMemoryPriority = 0,
  ProcessMemoryExhaustionInfo = 1,
  ProcessAppMemoryInfo = 2,
  ProcessInPrivateInfo = 3,
  ProcessPowerThrottling = 4,
  ProcessReservedValue1 = 5,
  ProcessTelemetryCoverageInfo = 6,
  ProcessProtectionLevelInfo = 7,
  ProcessLeapSecondInfo = 8,
  ProcessInformationClassMax = 9
}
global PROCESS_INFORMATION_CLASS: type = @_PROCESS_INFORMATION_CLASS
global function QueryFullProcessImageNameA(hProcess: HANDLE, dwFlags: culong, lpExeName: LPSTR, lpdwSize: PDWORD): cint <cimport,nodecl> end
global function QueryFullProcessImageNameW(hProcess: HANDLE, dwFlags: culong, lpExeName: LPWSTR, lpdwSize: PDWORD): cint <cimport,nodecl> end
global _PROC_THREAD_ATTRIBUTE_NUM: type <cimport,nodecl,using,ctypedef> = @enum(cint){
  ProcThreadAttributeParentProcess = 0,
  ProcThreadAttributeHandleList = 2,
  ProcThreadAttributeProtectionLevel = 11
}
global PROC_THREAD_ATTRIBUTE_NUM: type = @_PROC_THREAD_ATTRIBUTE_NUM
global function GetProcessShutdownParameters(lpdwLevel: LPDWORD, lpdwFlags: LPDWORD): cint <cimport,nodecl> end
global function FatalAppExitA(uAction: cuint, lpMessageText: LPCSTR): void <cimport,nodecl> end
global function FatalAppExitW(uAction: cuint, lpMessageText: LPCWSTR): void <cimport,nodecl> end
global function GetStartupInfoA(lpStartupInfo: LPSTARTUPINFOA): void <cimport,nodecl> end
global function FindResourceA(hModule: HMODULE, lpName: LPCSTR, lpType: LPCSTR): HRSRC <cimport,nodecl> end
global function FindResourceExA(hModule: HMODULE, lpType: LPCSTR, lpName: LPCSTR, wLanguage: cushort): HRSRC <cimport,nodecl> end
global function EnumResourceTypesA(hModule: HMODULE, lpEnumFunc: ENUMRESTYPEPROCA, lParam: clonglong): cint <cimport,nodecl> end
global function EnumResourceTypesW(hModule: HMODULE, lpEnumFunc: ENUMRESTYPEPROCW, lParam: clonglong): cint <cimport,nodecl> end
global function EnumResourceNamesA(hModule: HMODULE, lpType: LPCSTR, lpEnumFunc: ENUMRESNAMEPROCA, lParam: clonglong): cint <cimport,nodecl> end
global function BeginUpdateResourceA(pFileName: LPCSTR, bDeleteExistingResources: cint): HANDLE <cimport,nodecl> end
global function BeginUpdateResourceW(pFileName: LPCWSTR, bDeleteExistingResources: cint): HANDLE <cimport,nodecl> end
global function UpdateResourceA(hUpdate: HANDLE, lpType: LPCSTR, lpName: LPCSTR, wLanguage: cushort, lpData: LPVOID, cb: culong): cint <cimport,nodecl> end
global function UpdateResourceW(hUpdate: HANDLE, lpType: LPCWSTR, lpName: LPCWSTR, wLanguage: cushort, lpData: LPVOID, cb: culong): cint <cimport,nodecl> end
global function EndUpdateResourceA(hUpdate: HANDLE, fDiscard: cint): cint <cimport,nodecl> end
global function EndUpdateResourceW(hUpdate: HANDLE, fDiscard: cint): cint <cimport,nodecl> end
global function GlobalAddAtomA(lpString: LPCSTR): cushort <cimport,nodecl> end
global function GlobalAddAtomW(lpString: LPCWSTR): cushort <cimport,nodecl> end
global function GlobalAddAtomExA(lpString: LPCSTR, Flags: culong): cushort <cimport,nodecl> end
global function GlobalAddAtomExW(lpString: LPCWSTR, Flags: culong): cushort <cimport,nodecl> end
global function GlobalFindAtomA(lpString: LPCSTR): cushort <cimport,nodecl> end
global function GlobalFindAtomW(lpString: LPCWSTR): cushort <cimport,nodecl> end
global function GlobalGetAtomNameA(nAtom: cushort, lpBuffer: LPSTR, nSize: cint): cuint <cimport,nodecl> end
global function GlobalGetAtomNameW(nAtom: cushort, lpBuffer: LPWSTR, nSize: cint): cuint <cimport,nodecl> end
global function AddAtomA(lpString: LPCSTR): cushort <cimport,nodecl> end
global function AddAtomW(lpString: LPCWSTR): cushort <cimport,nodecl> end
global function FindAtomA(lpString: LPCSTR): cushort <cimport,nodecl> end
global function FindAtomW(lpString: LPCWSTR): cushort <cimport,nodecl> end
global function GetAtomNameA(nAtom: cushort, lpBuffer: LPSTR, nSize: cint): cuint <cimport,nodecl> end
global function GetAtomNameW(nAtom: cushort, lpBuffer: LPWSTR, nSize: cint): cuint <cimport,nodecl> end
global function GetProfileIntA(lpAppName: LPCSTR, lpKeyName: LPCSTR, nDefault: cint): cuint <cimport,nodecl> end
global function GetProfileIntW(lpAppName: LPCWSTR, lpKeyName: LPCWSTR, nDefault: cint): cuint <cimport,nodecl> end
global function GetProfileStringA(lpAppName: LPCSTR, lpKeyName: LPCSTR, lpDefault: LPCSTR, lpReturnedString: LPSTR, nSize: culong): culong <cimport,nodecl> end
global function GetProfileStringW(lpAppName: LPCWSTR, lpKeyName: LPCWSTR, lpDefault: LPCWSTR, lpReturnedString: LPWSTR, nSize: culong): culong <cimport,nodecl> end
global function WriteProfileStringA(lpAppName: LPCSTR, lpKeyName: LPCSTR, lpString: LPCSTR): cint <cimport,nodecl> end
global function WriteProfileStringW(lpAppName: LPCWSTR, lpKeyName: LPCWSTR, lpString: LPCWSTR): cint <cimport,nodecl> end
global function GetProfileSectionA(lpAppName: LPCSTR, lpReturnedString: LPSTR, nSize: culong): culong <cimport,nodecl> end
global function GetProfileSectionW(lpAppName: LPCWSTR, lpReturnedString: LPWSTR, nSize: culong): culong <cimport,nodecl> end
global function WriteProfileSectionA(lpAppName: LPCSTR, lpString: LPCSTR): cint <cimport,nodecl> end
global function WriteProfileSectionW(lpAppName: LPCWSTR, lpString: LPCWSTR): cint <cimport,nodecl> end
global function GetPrivateProfileIntA(lpAppName: LPCSTR, lpKeyName: LPCSTR, nDefault: cint, lpFileName: LPCSTR): cuint <cimport,nodecl> end
global function GetPrivateProfileIntW(lpAppName: LPCWSTR, lpKeyName: LPCWSTR, nDefault: cint, lpFileName: LPCWSTR): cuint <cimport,nodecl> end
global function GetPrivateProfileStringA(lpAppName: LPCSTR, lpKeyName: LPCSTR, lpDefault: LPCSTR, lpReturnedString: LPSTR, nSize: culong, lpFileName: LPCSTR): culong <cimport,nodecl> end
global function GetPrivateProfileStringW(lpAppName: LPCWSTR, lpKeyName: LPCWSTR, lpDefault: LPCWSTR, lpReturnedString: LPWSTR, nSize: culong, lpFileName: LPCWSTR): culong <cimport,nodecl> end
global function WritePrivateProfileStringA(lpAppName: LPCSTR, lpKeyName: LPCSTR, lpString: LPCSTR, lpFileName: LPCSTR): cint <cimport,nodecl> end
global function WritePrivateProfileStringW(lpAppName: LPCWSTR, lpKeyName: LPCWSTR, lpString: LPCWSTR, lpFileName: LPCWSTR): cint <cimport,nodecl> end
global function GetPrivateProfileSectionA(lpAppName: LPCSTR, lpReturnedString: LPSTR, nSize: culong, lpFileName: LPCSTR): culong <cimport,nodecl> end
global function GetPrivateProfileSectionW(lpAppName: LPCWSTR, lpReturnedString: LPWSTR, nSize: culong, lpFileName: LPCWSTR): culong <cimport,nodecl> end
global function WritePrivateProfileSectionA(lpAppName: LPCSTR, lpString: LPCSTR, lpFileName: LPCSTR): cint <cimport,nodecl> end
global function WritePrivateProfileSectionW(lpAppName: LPCWSTR, lpString: LPCWSTR, lpFileName: LPCWSTR): cint <cimport,nodecl> end
global function GetPrivateProfileSectionNamesA(lpszReturnBuffer: LPSTR, nSize: culong, lpFileName: LPCSTR): culong <cimport,nodecl> end
global function GetPrivateProfileSectionNamesW(lpszReturnBuffer: LPWSTR, nSize: culong, lpFileName: LPCWSTR): culong <cimport,nodecl> end
global function GetPrivateProfileStructA(lpszSection: LPCSTR, lpszKey: LPCSTR, lpStruct: LPVOID, uSizeStruct: cuint, szFile: LPCSTR): cint <cimport,nodecl> end
global function GetPrivateProfileStructW(lpszSection: LPCWSTR, lpszKey: LPCWSTR, lpStruct: LPVOID, uSizeStruct: cuint, szFile: LPCWSTR): cint <cimport,nodecl> end
global function WritePrivateProfileStructA(lpszSection: LPCSTR, lpszKey: LPCSTR, lpStruct: LPVOID, uSizeStruct: cuint, szFile: LPCSTR): cint <cimport,nodecl> end
global function WritePrivateProfileStructW(lpszSection: LPCWSTR, lpszKey: LPCWSTR, lpStruct: LPVOID, uSizeStruct: cuint, szFile: LPCWSTR): cint <cimport,nodecl> end
global function Wow64EnableWow64FsRedirection(Wow64FsEnableRedirection: BOOLEAN): BOOLEAN <cimport,nodecl> end
global PGET_SYSTEM_WOW64_DIRECTORY_A: type <cimport,nodecl> = @function(LPSTR, cuint): cuint
global PGET_SYSTEM_WOW64_DIRECTORY_W: type <cimport,nodecl> = @function(LPWSTR, cuint): cuint
global function SetDllDirectoryA(lpPathName: LPCSTR): cint <cimport,nodecl> end
global function SetDllDirectoryW(lpPathName: LPCWSTR): cint <cimport,nodecl> end
global function GetDllDirectoryA(nBufferLength: culong, lpBuffer: LPSTR): culong <cimport,nodecl> end
global function GetDllDirectoryW(nBufferLength: culong, lpBuffer: LPWSTR): culong <cimport,nodecl> end
global function SetSearchPathMode(Flags: culong): cint <cimport,nodecl> end
global function GetFirmwareEnvironmentVariableA(lpName: LPCSTR, lpGuid: LPCSTR, pBuffer: PVOID, nSize: culong): culong <cimport,nodecl> end
global function GetFirmwareEnvironmentVariableW(lpName: LPCWSTR, lpGuid: LPCWSTR, pBuffer: PVOID, nSize: culong): culong <cimport,nodecl> end
global function SetFirmwareEnvironmentVariableA(lpName: LPCSTR, lpGuid: LPCSTR, pValue: PVOID, nSize: culong): cint <cimport,nodecl> end
global function SetFirmwareEnvironmentVariableW(lpName: LPCWSTR, lpGuid: LPCWSTR, pValue: PVOID, nSize: culong): cint <cimport,nodecl> end
global function CreateDirectoryExA(lpTemplateDirectory: LPCSTR, lpNewDirectory: LPCSTR, lpSecurityAttributes: LPSECURITY_ATTRIBUTES): cint <cimport,nodecl> end
global function CreateDirectoryExW(lpTemplateDirectory: LPCWSTR, lpNewDirectory: LPCWSTR, lpSecurityAttributes: LPSECURITY_ATTRIBUTES): cint <cimport,nodecl> end
global function CreateDirectoryTransactedA(lpTemplateDirectory: LPCSTR, lpNewDirectory: LPCSTR, lpSecurityAttributes: LPSECURITY_ATTRIBUTES, hTransaction: HANDLE): cint <cimport,nodecl> end
global function CreateDirectoryTransactedW(lpTemplateDirectory: LPCWSTR, lpNewDirectory: LPCWSTR, lpSecurityAttributes: LPSECURITY_ATTRIBUTES, hTransaction: HANDLE): cint <cimport,nodecl> end
global function RemoveDirectoryTransactedA(lpPathName: LPCSTR, hTransaction: HANDLE): cint <cimport,nodecl> end
global function RemoveDirectoryTransactedW(lpPathName: LPCWSTR, hTransaction: HANDLE): cint <cimport,nodecl> end
global function GetFullPathNameTransactedA(lpFileName: LPCSTR, nBufferLength: culong, lpBuffer: LPSTR, lpFilePart: *LPSTR, hTransaction: HANDLE): culong <cimport,nodecl> end
global function GetFullPathNameTransactedW(lpFileName: LPCWSTR, nBufferLength: culong, lpBuffer: LPWSTR, lpFilePart: *LPWSTR, hTransaction: HANDLE): culong <cimport,nodecl> end
global function DefineDosDeviceA(dwFlags: culong, lpDeviceName: LPCSTR, lpTargetPath: LPCSTR): cint <cimport,nodecl> end
global function QueryDosDeviceA(lpDeviceName: LPCSTR, lpTargetPath: LPSTR, ucchMax: culong): culong <cimport,nodecl> end
global function CreateFileTransactedA(lpFileName: LPCSTR, dwDesiredAccess: culong, dwShareMode: culong, lpSecurityAttributes: LPSECURITY_ATTRIBUTES, dwCreationDisposition: culong, dwFlagsAndAttributes: culong, hTemplateFile: HANDLE, hTransaction: HANDLE, pusMiniVersion: PUSHORT, lpExtendedParameter: PVOID): HANDLE <cimport,nodecl> end
global function CreateFileTransactedW(lpFileName: LPCWSTR, dwDesiredAccess: culong, dwShareMode: culong, lpSecurityAttributes: LPSECURITY_ATTRIBUTES, dwCreationDisposition: culong, dwFlagsAndAttributes: culong, hTemplateFile: HANDLE, hTransaction: HANDLE, pusMiniVersion: PUSHORT, lpExtendedParameter: PVOID): HANDLE <cimport,nodecl> end
global function ReOpenFile(hOriginalFile: HANDLE, dwDesiredAccess: culong, dwShareMode: culong, dwFlagsAndAttributes: culong): HANDLE <cimport,nodecl> end
global function SetFileAttributesTransactedA(lpFileName: LPCSTR, dwFileAttributes: culong, hTransaction: HANDLE): cint <cimport,nodecl> end
global function SetFileAttributesTransactedW(lpFileName: LPCWSTR, dwFileAttributes: culong, hTransaction: HANDLE): cint <cimport,nodecl> end
global function GetFileAttributesTransactedA(lpFileName: LPCSTR, fInfoLevelId: GET_FILEEX_INFO_LEVELS, lpFileInformation: LPVOID, hTransaction: HANDLE): cint <cimport,nodecl> end
global function GetFileAttributesTransactedW(lpFileName: LPCWSTR, fInfoLevelId: GET_FILEEX_INFO_LEVELS, lpFileInformation: LPVOID, hTransaction: HANDLE): cint <cimport,nodecl> end
global function GetCompressedFileSizeA(lpFileName: LPCSTR, lpFileSizeHigh: LPDWORD): culong <cimport,nodecl> end
global function GetCompressedFileSizeW(lpFileName: LPCWSTR, lpFileSizeHigh: LPDWORD): culong <cimport,nodecl> end
global function GetCompressedFileSizeTransactedA(lpFileName: LPCSTR, lpFileSizeHigh: LPDWORD, hTransaction: HANDLE): culong <cimport,nodecl> end
global function GetCompressedFileSizeTransactedW(lpFileName: LPCWSTR, lpFileSizeHigh: LPDWORD, hTransaction: HANDLE): culong <cimport,nodecl> end
global function DeleteFileTransactedA(lpFileName: LPCSTR, hTransaction: HANDLE): cint <cimport,nodecl> end
global function DeleteFileTransactedW(lpFileName: LPCWSTR, hTransaction: HANDLE): cint <cimport,nodecl> end
global LPPROGRESS_ROUTINE: type <cimport,nodecl> = @function(LARGE_INTEGER, LARGE_INTEGER, LARGE_INTEGER, LARGE_INTEGER, culong, culong, HANDLE, HANDLE, LPVOID): culong
global function CopyFileExA(lpExistingFileName: LPCSTR, lpNewFileName: LPCSTR, lpProgressRoutine: LPPROGRESS_ROUTINE, lpData: LPVOID, pbCancel: LPBOOL, dwCopyFlags: culong): cint <cimport,nodecl> end
global function CopyFileExW(lpExistingFileName: LPCWSTR, lpNewFileName: LPCWSTR, lpProgressRoutine: LPPROGRESS_ROUTINE, lpData: LPVOID, pbCancel: LPBOOL, dwCopyFlags: culong): cint <cimport,nodecl> end
global function CheckNameLegalDOS8Dot3A(lpName: LPCSTR, lpOemName: LPSTR, OemNameSize: culong, pbNameContainsSpaces: PBOOL, pbNameLegal: PBOOL): cint <cimport,nodecl> end
global function CheckNameLegalDOS8Dot3W(lpName: LPCWSTR, lpOemName: LPSTR, OemNameSize: culong, pbNameContainsSpaces: PBOOL, pbNameLegal: PBOOL): cint <cimport,nodecl> end
global function FindFirstFileTransactedA(lpFileName: LPCSTR, fInfoLevelId: FINDEX_INFO_LEVELS, lpFindFileData: LPVOID, fSearchOp: FINDEX_SEARCH_OPS, lpSearchFilter: LPVOID, dwAdditionalFlags: culong, hTransaction: HANDLE): HANDLE <cimport,nodecl> end
global function FindFirstFileTransactedW(lpFileName: LPCWSTR, fInfoLevelId: FINDEX_INFO_LEVELS, lpFindFileData: LPVOID, fSearchOp: FINDEX_SEARCH_OPS, lpSearchFilter: LPVOID, dwAdditionalFlags: culong, hTransaction: HANDLE): HANDLE <cimport,nodecl> end
global function CopyFileTransactedA(lpExistingFileName: LPCSTR, lpNewFileName: LPCSTR, lpProgressRoutine: LPPROGRESS_ROUTINE, lpData: LPVOID, pbCancel: LPBOOL, dwCopyFlags: culong, hTransaction: HANDLE): cint <cimport,nodecl> end
global function CopyFileTransactedW(lpExistingFileName: LPCWSTR, lpNewFileName: LPCWSTR, lpProgressRoutine: LPPROGRESS_ROUTINE, lpData: LPVOID, pbCancel: LPBOOL, dwCopyFlags: culong, hTransaction: HANDLE): cint <cimport,nodecl> end
global function CopyFileA(lpExistingFileName: LPCSTR, lpNewFileName: LPCSTR, bFailIfExists: cint): cint <cimport,nodecl> end
global function CopyFileW(lpExistingFileName: LPCWSTR, lpNewFileName: LPCWSTR, bFailIfExists: cint): cint <cimport,nodecl> end
global function MoveFileA(lpExistingFileName: LPCSTR, lpNewFileName: LPCSTR): cint <cimport,nodecl> end
global function MoveFileW(lpExistingFileName: LPCWSTR, lpNewFileName: LPCWSTR): cint <cimport,nodecl> end
global function MoveFileExA(lpExistingFileName: LPCSTR, lpNewFileName: LPCSTR, dwFlags: culong): cint <cimport,nodecl> end
global function MoveFileExW(lpExistingFileName: LPCWSTR, lpNewFileName: LPCWSTR, dwFlags: culong): cint <cimport,nodecl> end
global function MoveFileWithProgressA(lpExistingFileName: LPCSTR, lpNewFileName: LPCSTR, lpProgressRoutine: LPPROGRESS_ROUTINE, lpData: LPVOID, dwFlags: culong): cint <cimport,nodecl> end
global function MoveFileWithProgressW(lpExistingFileName: LPCWSTR, lpNewFileName: LPCWSTR, lpProgressRoutine: LPPROGRESS_ROUTINE, lpData: LPVOID, dwFlags: culong): cint <cimport,nodecl> end
global function MoveFileTransactedA(lpExistingFileName: LPCSTR, lpNewFileName: LPCSTR, lpProgressRoutine: LPPROGRESS_ROUTINE, lpData: LPVOID, dwFlags: culong, hTransaction: HANDLE): cint <cimport,nodecl> end
global function MoveFileTransactedW(lpExistingFileName: LPCWSTR, lpNewFileName: LPCWSTR, lpProgressRoutine: LPPROGRESS_ROUTINE, lpData: LPVOID, dwFlags: culong, hTransaction: HANDLE): cint <cimport,nodecl> end
global function GetNamedPipeClientComputerNameA(Pipe: HANDLE, ClientComputerName: LPSTR, ClientComputerNameLength: culong): cint <cimport,nodecl> end
global function WaitNamedPipeA(lpNamedPipeName: LPCSTR, nTimeOut: culong): cint <cimport,nodecl> end
global function CallNamedPipeA(lpNamedPipeName: LPCSTR, lpInBuffer: LPVOID, nInBufferSize: culong, lpOutBuffer: LPVOID, nOutBufferSize: culong, lpBytesRead: LPDWORD, nTimeOut: culong): cint <cimport,nodecl> end
global function CallNamedPipeW(lpNamedPipeName: LPCWSTR, lpInBuffer: LPVOID, nInBufferSize: culong, lpOutBuffer: LPVOID, nOutBufferSize: culong, lpBytesRead: LPDWORD, nTimeOut: culong): cint <cimport,nodecl> end
global function CreateNamedPipeA(lpName: LPCSTR, dwOpenMode: culong, dwPipeMode: culong, nMaxInstances: culong, nOutBufferSize: culong, nInBufferSize: culong, nDefaultTimeOut: culong, lpSecurityAttributes: LPSECURITY_ATTRIBUTES): HANDLE <cimport,nodecl> end
global function GetNamedPipeHandleStateA(hNamedPipe: HANDLE, lpState: LPDWORD, lpCurInstances: LPDWORD, lpMaxCollectionCount: LPDWORD, lpCollectDataTimeout: LPDWORD, lpUserName: LPSTR, nMaxUserNameSize: culong): cint <cimport,nodecl> end
global function GetNamedPipeHandleStateW(hNamedPipe: HANDLE, lpState: LPDWORD, lpCurInstances: LPDWORD, lpMaxCollectionCount: LPDWORD, lpCollectDataTimeout: LPDWORD, lpUserName: LPWSTR, nMaxUserNameSize: culong): cint <cimport,nodecl> end
global function ReplaceFileA(lpReplacedFileName: LPCSTR, lpReplacementFileName: LPCSTR, lpBackupFileName: LPCSTR, dwReplaceFlags: culong, lpExclude: LPVOID, lpReserved: LPVOID): cint <cimport,nodecl> end
global function ReplaceFileW(lpReplacedFileName: LPCWSTR, lpReplacementFileName: LPCWSTR, lpBackupFileName: LPCWSTR, dwReplaceFlags: culong, lpExclude: LPVOID, lpReserved: LPVOID): cint <cimport,nodecl> end
global function CreateHardLinkA(lpFileName: LPCSTR, lpExistingFileName: LPCSTR, lpSecurityAttributes: LPSECURITY_ATTRIBUTES): cint <cimport,nodecl> end
global function CreateHardLinkW(lpFileName: LPCWSTR, lpExistingFileName: LPCWSTR, lpSecurityAttributes: LPSECURITY_ATTRIBUTES): cint <cimport,nodecl> end
global function CreateHardLinkTransactedA(lpFileName: LPCSTR, lpExistingFileName: LPCSTR, lpSecurityAttributes: LPSECURITY_ATTRIBUTES, hTransaction: HANDLE): cint <cimport,nodecl> end
global function CreateHardLinkTransactedW(lpFileName: LPCWSTR, lpExistingFileName: LPCWSTR, lpSecurityAttributes: LPSECURITY_ATTRIBUTES, hTransaction: HANDLE): cint <cimport,nodecl> end
global _STREAM_INFO_LEVELS: type <cimport,nodecl,using,ctypedef> = @enum(cint){
  FindStreamInfoStandard = 0,
  FindStreamInfoMaxInfoLevel = 1
}
global STREAM_INFO_LEVELS: type = @_STREAM_INFO_LEVELS
global _WIN32_FIND_STREAM_DATA: type <cimport,nodecl,ctypedef> = @record{
  StreamSize: LARGE_INTEGER,
  cStreamName: [296]cwchar_t
}
global WIN32_FIND_STREAM_DATA: type = @_WIN32_FIND_STREAM_DATA
global PWIN32_FIND_STREAM_DATA: type = @*_WIN32_FIND_STREAM_DATA
global function FindFirstStreamW(lpFileName: LPCWSTR, InfoLevel: STREAM_INFO_LEVELS, lpFindStreamData: LPVOID, dwFlags: culong): HANDLE <cimport,nodecl> end
global function FindNextStreamW(hFindStream: HANDLE, lpFindStreamData: LPVOID): cint <cimport,nodecl> end
global function FindFirstStreamTransactedW(lpFileName: LPCWSTR, InfoLevel: STREAM_INFO_LEVELS, lpFindStreamData: LPVOID, dwFlags: culong, hTransaction: HANDLE): HANDLE <cimport,nodecl> end
global function FindFirstFileNameW(lpFileName: LPCWSTR, dwFlags: culong, StringLength: LPDWORD, LinkName: PWSTR): HANDLE <cimport,nodecl> end
global function FindNextFileNameW(hFindStream: HANDLE, StringLength: LPDWORD, LinkName: PWSTR): cint <cimport,nodecl> end
global function FindFirstFileNameTransactedW(lpFileName: LPCWSTR, dwFlags: culong, StringLength: LPDWORD, LinkName: PWSTR, hTransaction: HANDLE): HANDLE <cimport,nodecl> end
global function GetNamedPipeClientProcessId(Pipe: HANDLE, ClientProcessId: PULONG): cint <cimport,nodecl> end
global function GetNamedPipeClientSessionId(Pipe: HANDLE, ClientSessionId: PULONG): cint <cimport,nodecl> end
global function GetNamedPipeServerProcessId(Pipe: HANDLE, ServerProcessId: PULONG): cint <cimport,nodecl> end
global function GetNamedPipeServerSessionId(Pipe: HANDLE, ServerSessionId: PULONG): cint <cimport,nodecl> end
global function SetFileBandwidthReservation(hFile: HANDLE, nPeriodMilliseconds: culong, nBytesPerPeriod: culong, bDiscardable: cint, lpTransferSize: LPDWORD, lpNumOutstandingRequests: LPDWORD): cint <cimport,nodecl> end
global function GetFileBandwidthReservation(hFile: HANDLE, lpPeriodMilliseconds: LPDWORD, lpBytesPerPeriod: LPDWORD, pDiscardable: LPBOOL, lpTransferSize: LPDWORD, lpNumOutstandingRequests: LPDWORD): cint <cimport,nodecl> end
global function SetFileApisToOEM(): void <cimport,nodecl> end
global function SetFileApisToANSI(): void <cimport,nodecl> end
global function AreFileApisANSI(): cint <cimport,nodecl> end
global function ClearEventLogA(hEventLog: HANDLE, lpBackupFileName: LPCSTR): cint <cimport,nodecl> end
global function ClearEventLogW(hEventLog: HANDLE, lpBackupFileName: LPCWSTR): cint <cimport,nodecl> end
global function BackupEventLogA(hEventLog: HANDLE, lpBackupFileName: LPCSTR): cint <cimport,nodecl> end
global function BackupEventLogW(hEventLog: HANDLE, lpBackupFileName: LPCWSTR): cint <cimport,nodecl> end
global function CloseEventLog(hEventLog: HANDLE): cint <cimport,nodecl> end
global function DeregisterEventSource(hEventLog: HANDLE): cint <cimport,nodecl> end
global function NotifyChangeEventLog(hEventLog: HANDLE, hEvent: HANDLE): cint <cimport,nodecl> end
global function GetNumberOfEventLogRecords(hEventLog: HANDLE, NumberOfRecords: PDWORD): cint <cimport,nodecl> end
global function GetOldestEventLogRecord(hEventLog: HANDLE, OldestRecord: PDWORD): cint <cimport,nodecl> end
global function OpenEventLogA(lpUNCServerName: LPCSTR, lpSourceName: LPCSTR): HANDLE <cimport,nodecl> end
global function OpenEventLogW(lpUNCServerName: LPCWSTR, lpSourceName: LPCWSTR): HANDLE <cimport,nodecl> end
global function RegisterEventSourceA(lpUNCServerName: LPCSTR, lpSourceName: LPCSTR): HANDLE <cimport,nodecl> end
global function RegisterEventSourceW(lpUNCServerName: LPCWSTR, lpSourceName: LPCWSTR): HANDLE <cimport,nodecl> end
global function OpenBackupEventLogA(lpUNCServerName: LPCSTR, lpFileName: LPCSTR): HANDLE <cimport,nodecl> end
global function OpenBackupEventLogW(lpUNCServerName: LPCWSTR, lpFileName: LPCWSTR): HANDLE <cimport,nodecl> end
global function ReadEventLogA(hEventLog: HANDLE, dwReadFlags: culong, dwRecordOffset: culong, lpBuffer: LPVOID, nNumberOfBytesToRead: culong, pnBytesRead: *culong, pnMinNumberOfBytesNeeded: *culong): cint <cimport,nodecl> end
global function ReadEventLogW(hEventLog: HANDLE, dwReadFlags: culong, dwRecordOffset: culong, lpBuffer: LPVOID, nNumberOfBytesToRead: culong, pnBytesRead: *culong, pnMinNumberOfBytesNeeded: *culong): cint <cimport,nodecl> end
global function ReportEventA(hEventLog: HANDLE, wType: cushort, wCategory: cushort, dwEventID: culong, lpUserSid: PSID, wNumStrings: cushort, dwDataSize: culong, lpStrings: *LPCSTR, lpRawData: LPVOID): cint <cimport,nodecl> end
global function ReportEventW(hEventLog: HANDLE, wType: cushort, wCategory: cushort, dwEventID: culong, lpUserSid: PSID, wNumStrings: cushort, dwDataSize: culong, lpStrings: *LPCWSTR, lpRawData: LPVOID): cint <cimport,nodecl> end
global _EVENTLOG_FULL_INFORMATION: type <cimport,nodecl,ctypedef> = @record{
  dwFull: culong
}
global EVENTLOG_FULL_INFORMATION: type = @_EVENTLOG_FULL_INFORMATION
global LPEVENTLOG_FULL_INFORMATION: type = @*_EVENTLOG_FULL_INFORMATION
global function GetEventLogInformation(hEventLog: HANDLE, dwInfoLevel: culong, lpBuffer: LPVOID, cbBufSize: culong, pcbBytesNeeded: LPDWORD): cint <cimport,nodecl> end
global function GetVolumeInformationA(lpRootPathName: LPCSTR, lpVolumeNameBuffer: LPSTR, nVolumeNameSize: culong, lpVolumeSerialNumber: LPDWORD, lpMaximumComponentLength: LPDWORD, lpFileSystemFlags: LPDWORD, lpFileSystemNameBuffer: LPSTR, nFileSystemNameSize: culong): cint <cimport,nodecl> end
global function ReadDirectoryChangesW(hDirectory: HANDLE, lpBuffer: LPVOID, nBufferLength: culong, bWatchSubtree: cint, dwNotifyFilter: culong, lpBytesReturned: LPDWORD, lpOverlapped: LPOVERLAPPED, lpCompletionRoutine: LPOVERLAPPED_COMPLETION_ROUTINE): cint <cimport,nodecl> end
global function AccessCheckAndAuditAlarmA(SubsystemName: LPCSTR, HandleId: LPVOID, ObjectTypeName: LPSTR, ObjectName: LPSTR, SecurityDescriptor: PSECURITY_DESCRIPTOR, DesiredAccess: culong, GenericMapping: PGENERIC_MAPPING, ObjectCreation: cint, GrantedAccess: LPDWORD, AccessStatus: LPBOOL, pfGenerateOnClose: LPBOOL): cint <cimport,nodecl> end
global function AccessCheckByTypeAndAuditAlarmA(SubsystemName: LPCSTR, HandleId: LPVOID, ObjectTypeName: LPCSTR, ObjectName: LPCSTR, SecurityDescriptor: PSECURITY_DESCRIPTOR, PrincipalSelfSid: PSID, DesiredAccess: culong, AuditType: AUDIT_EVENT_TYPE, Flags: culong, ObjectTypeList: POBJECT_TYPE_LIST, ObjectTypeListLength: culong, GenericMapping: PGENERIC_MAPPING, ObjectCreation: cint, GrantedAccess: LPDWORD, AccessStatus: LPBOOL, pfGenerateOnClose: LPBOOL): cint <cimport,nodecl> end
global function AccessCheckByTypeResultListAndAuditAlarmA(SubsystemName: LPCSTR, HandleId: LPVOID, ObjectTypeName: LPCSTR, ObjectName: LPCSTR, SecurityDescriptor: PSECURITY_DESCRIPTOR, PrincipalSelfSid: PSID, DesiredAccess: culong, AuditType: AUDIT_EVENT_TYPE, Flags: culong, ObjectTypeList: POBJECT_TYPE_LIST, ObjectTypeListLength: culong, GenericMapping: PGENERIC_MAPPING, ObjectCreation: cint, GrantedAccess: LPDWORD, AccessStatusList: LPDWORD, pfGenerateOnClose: LPBOOL): cint <cimport,nodecl> end
global function AccessCheckByTypeResultListAndAuditAlarmByHandleA(SubsystemName: LPCSTR, HandleId: LPVOID, ClientToken: HANDLE, ObjectTypeName: LPCSTR, ObjectName: LPCSTR, SecurityDescriptor: PSECURITY_DESCRIPTOR, PrincipalSelfSid: PSID, DesiredAccess: culong, AuditType: AUDIT_EVENT_TYPE, Flags: culong, ObjectTypeList: POBJECT_TYPE_LIST, ObjectTypeListLength: culong, GenericMapping: PGENERIC_MAPPING, ObjectCreation: cint, GrantedAccess: LPDWORD, AccessStatusList: LPDWORD, pfGenerateOnClose: LPBOOL): cint <cimport,nodecl> end
global function ObjectOpenAuditAlarmA(SubsystemName: LPCSTR, HandleId: LPVOID, ObjectTypeName: LPSTR, ObjectName: LPSTR, pSecurityDescriptor: PSECURITY_DESCRIPTOR, ClientToken: HANDLE, DesiredAccess: culong, GrantedAccess: culong, Privileges: PPRIVILEGE_SET, ObjectCreation: cint, AccessGranted: cint, GenerateOnClose: LPBOOL): cint <cimport,nodecl> end
global function ObjectPrivilegeAuditAlarmA(SubsystemName: LPCSTR, HandleId: LPVOID, ClientToken: HANDLE, DesiredAccess: culong, Privileges: PPRIVILEGE_SET, AccessGranted: cint): cint <cimport,nodecl> end
global function ObjectCloseAuditAlarmA(SubsystemName: LPCSTR, HandleId: LPVOID, GenerateOnClose: cint): cint <cimport,nodecl> end
global function ObjectDeleteAuditAlarmA(SubsystemName: LPCSTR, HandleId: LPVOID, GenerateOnClose: cint): cint <cimport,nodecl> end
global function PrivilegedServiceAuditAlarmA(SubsystemName: LPCSTR, ServiceName: LPCSTR, ClientToken: HANDLE, Privileges: PPRIVILEGE_SET, AccessGranted: cint): cint <cimport,nodecl> end
global function SetFileSecurityA(lpFileName: LPCSTR, SecurityInformation: culong, pSecurityDescriptor: PSECURITY_DESCRIPTOR): cint <cimport,nodecl> end
global function GetFileSecurityA(lpFileName: LPCSTR, RequestedInformation: culong, pSecurityDescriptor: PSECURITY_DESCRIPTOR, nLength: culong, lpnLengthNeeded: LPDWORD): cint <cimport,nodecl> end
global function IsBadReadPtr(lp: pointer, ucb: culonglong): cint <cimport,nodecl> end
global function IsBadWritePtr(lp: LPVOID, ucb: culonglong): cint <cimport,nodecl> end
global function IsBadHugeReadPtr(lp: pointer, ucb: culonglong): cint <cimport,nodecl> end
global function IsBadHugeWritePtr(lp: LPVOID, ucb: culonglong): cint <cimport,nodecl> end
global function IsBadCodePtr(lpfn: FARPROC): cint <cimport,nodecl> end
global function IsBadStringPtrA(lpsz: LPCSTR, ucchMax: culonglong): cint <cimport,nodecl> end
global function IsBadStringPtrW(lpsz: LPCWSTR, ucchMax: culonglong): cint <cimport,nodecl> end
global function MapViewOfFileExNuma(hFileMappingObject: HANDLE, dwDesiredAccess: culong, dwFileOffsetHigh: culong, dwFileOffsetLow: culong, dwNumberOfBytesToMap: culonglong, lpBaseAddress: LPVOID, nndPreferred: culong): LPVOID <cimport,nodecl> end
global function BuildCommDCBA(lpDef: LPCSTR, lpDCB: LPDCB): cint <cimport,nodecl> end
global function BuildCommDCBW(lpDef: LPCWSTR, lpDCB: LPDCB): cint <cimport,nodecl> end
global function BuildCommDCBAndTimeoutsA(lpDef: LPCSTR, lpDCB: LPDCB, lpCommTimeouts: LPCOMMTIMEOUTS): cint <cimport,nodecl> end
global function BuildCommDCBAndTimeoutsW(lpDef: LPCWSTR, lpDCB: LPDCB, lpCommTimeouts: LPCOMMTIMEOUTS): cint <cimport,nodecl> end
global function CommConfigDialogA(lpszName: LPCSTR, hWnd: HWND, lpCC: LPCOMMCONFIG): cint <cimport,nodecl> end
global function CommConfigDialogW(lpszName: LPCWSTR, hWnd: HWND, lpCC: LPCOMMCONFIG): cint <cimport,nodecl> end
global function GetDefaultCommConfigA(lpszName: LPCSTR, lpCC: LPCOMMCONFIG, lpdwSize: LPDWORD): cint <cimport,nodecl> end
global function GetDefaultCommConfigW(lpszName: LPCWSTR, lpCC: LPCOMMCONFIG, lpdwSize: LPDWORD): cint <cimport,nodecl> end
global function SetDefaultCommConfigA(lpszName: LPCSTR, lpCC: LPCOMMCONFIG, dwSize: culong): cint <cimport,nodecl> end
global function SetDefaultCommConfigW(lpszName: LPCWSTR, lpCC: LPCOMMCONFIG, dwSize: culong): cint <cimport,nodecl> end
global function SetComputerNameA(lpComputerName: LPCSTR): cint <cimport,nodecl> end
global function SetComputerNameW(lpComputerName: LPCWSTR): cint <cimport,nodecl> end
global function SetComputerNameExA(NameType: COMPUTER_NAME_FORMAT, lpBuffer: LPCTSTR): cint <cimport,nodecl> end
global function DnsHostnameToComputerNameA(Hostname: LPCSTR, ComputerName: LPSTR, nSize: LPDWORD): cint <cimport,nodecl> end
global function DnsHostnameToComputerNameW(Hostname: LPCWSTR, ComputerName: LPWSTR, nSize: LPDWORD): cint <cimport,nodecl> end
global function LogonUserA(lpszUsername: LPCSTR, lpszDomain: LPCSTR, lpszPassword: LPCSTR, dwLogonType: culong, dwLogonProvider: culong, phToken: PHANDLE): cint <cimport,nodecl> end
global function LogonUserW(lpszUsername: LPCWSTR, lpszDomain: LPCWSTR, lpszPassword: LPCWSTR, dwLogonType: culong, dwLogonProvider: culong, phToken: PHANDLE): cint <cimport,nodecl> end
global function LogonUserExA(lpszUsername: LPCSTR, lpszDomain: LPCSTR, lpszPassword: LPCSTR, dwLogonType: culong, dwLogonProvider: culong, phToken: PHANDLE, ppLogonSid: *PSID, ppProfileBuffer: *PVOID, pdwProfileLength: LPDWORD, pQuotaLimits: PQUOTA_LIMITS): cint <cimport,nodecl> end
global function LogonUserExW(lpszUsername: LPCWSTR, lpszDomain: LPCWSTR, lpszPassword: LPCWSTR, dwLogonType: culong, dwLogonProvider: culong, phToken: PHANDLE, ppLogonSid: *PSID, ppProfileBuffer: *PVOID, pdwProfileLength: LPDWORD, pQuotaLimits: PQUOTA_LIMITS): cint <cimport,nodecl> end
global function CreateProcessAsUserA(hToken: HANDLE, lpApplicationName: LPCSTR, lpCommandLine: LPSTR, lpProcessAttributes: LPSECURITY_ATTRIBUTES, lpThreadAttributes: LPSECURITY_ATTRIBUTES, bInheritHandles: cint, dwCreationFlags: culong, lpEnvironment: LPVOID, lpCurrentDirectory: LPCSTR, lpStartupInfo: LPSTARTUPINFOA, lpProcessInformation: LPPROCESS_INFORMATION): cint <cimport,nodecl> end
global function CreateProcessWithLogonW(lpUsername: LPCWSTR, lpDomain: LPCWSTR, lpPassword: LPCWSTR, dwLogonFlags: culong, lpApplicationName: LPCWSTR, lpCommandLine: LPWSTR, dwCreationFlags: culong, lpEnvironment: LPVOID, lpCurrentDirectory: LPCWSTR, lpStartupInfo: LPSTARTUPINFOW, lpProcessInformation: LPPROCESS_INFORMATION): cint <cimport,nodecl> end
global function CreateProcessWithTokenW(hToken: HANDLE, dwLogonFlags: culong, lpApplicationName: LPCWSTR, lpCommandLine: LPWSTR, dwCreationFlags: culong, lpEnvironment: LPVOID, lpCurrentDirectory: LPCWSTR, lpStartupInfo: LPSTARTUPINFOW, lpProcessInformation: LPPROCESS_INFORMATION): cint <cimport,nodecl> end
global function IsTokenUntrusted(TokenHandle: HANDLE): cint <cimport,nodecl> end
global function RegisterWaitForSingleObject(phNewWaitObject: PHANDLE, hObject: HANDLE, Callback: WAITORTIMERCALLBACK, Context: PVOID, dwMilliseconds: culong, dwFlags: culong): cint <cimport,nodecl> end
global function UnregisterWait(WaitHandle: HANDLE): cint <cimport,nodecl> end
global function BindIoCompletionCallback(FileHandle: HANDLE, Function: LPOVERLAPPED_COMPLETION_ROUTINE, Flags: culong): cint <cimport,nodecl> end
global function SetTimerQueueTimer(TimerQueue: HANDLE, Callback: WAITORTIMERCALLBACK, Parameter: PVOID, DueTime: culong, Period: culong, PreferIo: cint): HANDLE <cimport,nodecl> end
global function CancelTimerQueueTimer(TimerQueue: HANDLE, Timer: HANDLE): cint <cimport,nodecl> end
global function DeleteTimerQueue(TimerQueue: HANDLE): cint <cimport,nodecl> end
global function AddIntegrityLabelToBoundaryDescriptor(BoundaryDescriptor: *HANDLE, IntegrityLabel: PSID): cint <cimport,nodecl> end
global tagHW_PROFILE_INFOA: type <cimport,nodecl,ctypedef> = @record{
  dwDockInfo: culong,
  szHwProfileGuid: [39]cchar,
  szHwProfileName: [80]cchar
}
global HW_PROFILE_INFOA: type = @tagHW_PROFILE_INFOA
global LPHW_PROFILE_INFOA: type = @*tagHW_PROFILE_INFOA
global tagHW_PROFILE_INFOW: type <cimport,nodecl,ctypedef> = @record{
  dwDockInfo: culong,
  szHwProfileGuid: [39]cwchar_t,
  szHwProfileName: [80]cwchar_t
}
global HW_PROFILE_INFOW: type = @tagHW_PROFILE_INFOW
global LPHW_PROFILE_INFOW: type = @*tagHW_PROFILE_INFOW
global HW_PROFILE_INFO: type = @tagHW_PROFILE_INFOA
global LPHW_PROFILE_INFO: type = @*tagHW_PROFILE_INFOA
global function GetCurrentHwProfileA(lpHwProfileInfo: LPHW_PROFILE_INFOA): cint <cimport,nodecl> end
global function GetCurrentHwProfileW(lpHwProfileInfo: LPHW_PROFILE_INFOW): cint <cimport,nodecl> end
global function VerifyVersionInfoA(lpVersionInformation: LPOSVERSIONINFOEXA, dwTypeMask: culong, dwlConditionMask: culonglong): cint <cimport,nodecl> end
global function VerifyVersionInfoW(lpVersionInformation: LPOSVERSIONINFOEXW, dwTypeMask: culong, dwlConditionMask: culonglong): cint <cimport,nodecl> end
global function GetUserNameA(lpBuffer: LPSTR, pcbBuffer: LPDWORD): cint <cimport,nodecl> end
global function GetUserNameW(lpBuffer: LPWSTR, pcbBuffer: LPDWORD): cint <cimport,nodecl> end
global function LookupAccountNameA(lpSystemName: LPCSTR, lpAccountName: LPCSTR, Sid: PSID, cbSid: LPDWORD, ReferencedDomainName: LPSTR, cchReferencedDomainName: LPDWORD, peUse: PSID_NAME_USE): cint <cimport,nodecl> end
global function LookupAccountNameW(lpSystemName: LPCWSTR, lpAccountName: LPCWSTR, Sid: PSID, cbSid: LPDWORD, ReferencedDomainName: LPWSTR, cchReferencedDomainName: LPDWORD, peUse: PSID_NAME_USE): cint <cimport,nodecl> end
global function LookupAccountSidA(lpSystemName: LPCSTR, Sid: PSID, Name: LPSTR, cchName: LPDWORD, ReferencedDomainName: LPSTR, cchReferencedDomainName: LPDWORD, peUse: PSID_NAME_USE): cint <cimport,nodecl> end
global function LookupAccountSidW(lpSystemName: LPCWSTR, Sid: PSID, Name: LPWSTR, cchName: LPDWORD, ReferencedDomainName: LPWSTR, cchReferencedDomainName: LPDWORD, peUse: PSID_NAME_USE): cint <cimport,nodecl> end
global function LookupPrivilegeDisplayNameA(lpSystemName: LPCSTR, lpName: LPCSTR, lpDisplayName: LPSTR, cchDisplayName: LPDWORD, lpLanguageId: LPDWORD): cint <cimport,nodecl> end
global function LookupPrivilegeDisplayNameW(lpSystemName: LPCWSTR, lpName: LPCWSTR, lpDisplayName: LPWSTR, cchDisplayName: LPDWORD, lpLanguageId: LPDWORD): cint <cimport,nodecl> end
global function LookupPrivilegeNameA(lpSystemName: LPCSTR, lpLuid: PLUID, lpName: LPSTR, cchName: LPDWORD): cint <cimport,nodecl> end
global function LookupPrivilegeNameW(lpSystemName: LPCWSTR, lpLuid: PLUID, lpName: LPWSTR, cchName: LPDWORD): cint <cimport,nodecl> end
global function LookupPrivilegeValueA(lpSystemName: LPCSTR, lpName: LPCSTR, lpLuid: PLUID): cint <cimport,nodecl> end
global function LookupPrivilegeValueW(lpSystemName: LPCWSTR, lpName: LPCWSTR, lpLuid: PLUID): cint <cimport,nodecl> end
global function SetVolumeLabelA(lpRootPathName: LPCSTR, lpVolumeName: LPCSTR): cint <cimport,nodecl> end
global function CreatePrivateNamespaceA(lpPrivateNamespaceAttributes: LPSECURITY_ATTRIBUTES, lpBoundaryDescriptor: LPVOID, lpAliasPrefix: LPCSTR): HANDLE <cimport,nodecl> end
global function OpenPrivateNamespaceA(lpBoundaryDescriptor: LPVOID, lpAliasPrefix: LPCSTR): HANDLE <cimport,nodecl> end
global function CreateBoundaryDescriptorA(Name: LPCSTR, Flags: culong): HANDLE <cimport,nodecl> end
global function SetVolumeLabelW(lpRootPathName: LPCWSTR, lpVolumeName: LPCWSTR): cint <cimport,nodecl> end
global function GetComputerNameA(lpBuffer: LPSTR, nSize: LPDWORD): cint <cimport,nodecl> end
global function GetComputerNameW(lpBuffer: LPWSTR, nSize: LPDWORD): cint <cimport,nodecl> end
global _TIME_ZONE_INFORMATION: type <cimport,nodecl,ctypedef> = @record{
  Bias: clong,
  StandardName: [32]cwchar_t,
  StandardDate: SYSTEMTIME,
  StandardBias: clong,
  DaylightName: [32]cwchar_t,
  DaylightDate: SYSTEMTIME,
  DaylightBias: clong
}
global TIME_ZONE_INFORMATION: type = @_TIME_ZONE_INFORMATION
global PTIME_ZONE_INFORMATION: type = @*_TIME_ZONE_INFORMATION
global LPTIME_ZONE_INFORMATION: type = @*_TIME_ZONE_INFORMATION
global _TIME_DYNAMIC_ZONE_INFORMATION: type <cimport,nodecl,ctypedef> = @record{
  Bias: clong,
  StandardName: [32]cwchar_t,
  StandardDate: SYSTEMTIME,
  StandardBias: clong,
  DaylightName: [32]cwchar_t,
  DaylightDate: SYSTEMTIME,
  DaylightBias: clong,
  TimeZoneKeyName: [128]cwchar_t,
  DynamicDaylightTimeDisabled: BOOLEAN
}
global DYNAMIC_TIME_ZONE_INFORMATION: type = @_TIME_DYNAMIC_ZONE_INFORMATION
global PDYNAMIC_TIME_ZONE_INFORMATION: type = @*_TIME_DYNAMIC_ZONE_INFORMATION
global function SystemTimeToTzSpecificLocalTime(lpTimeZoneInformation: *TIME_ZONE_INFORMATION, lpUniversalTime: *SYSTEMTIME, lpLocalTime: LPSYSTEMTIME): cint <cimport,nodecl> end
global function TzSpecificLocalTimeToSystemTime(lpTimeZoneInformation: *TIME_ZONE_INFORMATION, lpLocalTime: *SYSTEMTIME, lpUniversalTime: LPSYSTEMTIME): cint <cimport,nodecl> end
global function FileTimeToSystemTime(lpFileTime: *FILETIME, lpSystemTime: LPSYSTEMTIME): cint <cimport,nodecl> end
global function SystemTimeToFileTime(lpSystemTime: *SYSTEMTIME, lpFileTime: LPFILETIME): cint <cimport,nodecl> end
global function GetTimeZoneInformation(lpTimeZoneInformation: LPTIME_ZONE_INFORMATION): culong <cimport,nodecl> end
global function GetDynamicTimeZoneInformation(pTimeZoneInformation: PDYNAMIC_TIME_ZONE_INFORMATION): culong <cimport,nodecl> end
global function SetTimeZoneInformation(lpTimeZoneInformation: *TIME_ZONE_INFORMATION): cint <cimport,nodecl> end
global function SetDynamicTimeZoneInformation(lpTimeZoneInformation: *DYNAMIC_TIME_ZONE_INFORMATION): cint <cimport,nodecl> end
global _SYSTEM_POWER_STATUS: type <cimport,nodecl,ctypedef> = @record{
  ACLineStatus: cuchar,
  BatteryFlag: cuchar,
  BatteryLifePercent: cuchar,
  Reserved1: cuchar,
  BatteryLifeTime: culong,
  BatteryFullLifeTime: culong
}
global SYSTEM_POWER_STATUS: type = @_SYSTEM_POWER_STATUS
global LPSYSTEM_POWER_STATUS: type = @*_SYSTEM_POWER_STATUS
global function GetSystemPowerStatus(lpSystemPowerStatus: LPSYSTEM_POWER_STATUS): cint <cimport,nodecl> end
global function SetSystemPowerState(fSuspend: cint, fForce: cint): cint <cimport,nodecl> end
global function MapUserPhysicalPagesScatter(VirtualAddresses: *PVOID, NumberOfPages: culonglong, PageArray: PULONG_PTR): cint <cimport,nodecl> end
global function CreateJobObjectA(lpJobAttributes: LPSECURITY_ATTRIBUTES, lpName: LPCSTR): HANDLE <cimport,nodecl> end
global function CreateJobObjectW(lpJobAttributes: LPSECURITY_ATTRIBUTES, lpName: LPCWSTR): HANDLE <cimport,nodecl> end
global function OpenJobObjectA(dwDesiredAccess: culong, bInheritHandle: cint, lpName: LPCSTR): HANDLE <cimport,nodecl> end
global function OpenJobObjectW(dwDesiredAccess: culong, bInheritHandle: cint, lpName: LPCWSTR): HANDLE <cimport,nodecl> end
global function AssignProcessToJobObject(hJob: HANDLE, hProcess: HANDLE): cint <cimport,nodecl> end
global function TerminateJobObject(hJob: HANDLE, uExitCode: cuint): cint <cimport,nodecl> end
global function QueryInformationJobObject(hJob: HANDLE, JobObjectInformationClass: JOBOBJECTINFOCLASS, lpJobObjectInformation: LPVOID, cbJobObjectInformationLength: culong, lpReturnLength: LPDWORD): cint <cimport,nodecl> end
global function SetInformationJobObject(hJob: HANDLE, JobObjectInformationClass: JOBOBJECTINFOCLASS, lpJobObjectInformation: LPVOID, cbJobObjectInformationLength: culong): cint <cimport,nodecl> end
global function CreateJobSet(NumJob: culong, UserJobSet: PJOB_SET_ARRAY, Flags: culong): cint <cimport,nodecl> end
global function FindFirstVolumeA(lpszVolumeName: LPSTR, cchBufferLength: culong): HANDLE <cimport,nodecl> end
global function FindNextVolumeA(hFindVolume: HANDLE, lpszVolumeName: LPSTR, cchBufferLength: culong): cint <cimport,nodecl> end
global function FindFirstVolumeMountPointA(lpszRootPathName: LPCSTR, lpszVolumeMountPoint: LPSTR, cchBufferLength: culong): HANDLE <cimport,nodecl> end
global function FindFirstVolumeMountPointW(lpszRootPathName: LPCWSTR, lpszVolumeMountPoint: LPWSTR, cchBufferLength: culong): HANDLE <cimport,nodecl> end
global function FindNextVolumeMountPointA(hFindVolumeMountPoint: HANDLE, lpszVolumeMountPoint: LPSTR, cchBufferLength: culong): cint <cimport,nodecl> end
global function FindNextVolumeMountPointW(hFindVolumeMountPoint: HANDLE, lpszVolumeMountPoint: LPWSTR, cchBufferLength: culong): cint <cimport,nodecl> end
global function FindVolumeMountPointClose(hFindVolumeMountPoint: HANDLE): cint <cimport,nodecl> end
global function SetVolumeMountPointA(lpszVolumeMountPoint: LPCSTR, lpszVolumeName: LPCSTR): cint <cimport,nodecl> end
global function SetVolumeMountPointW(lpszVolumeMountPoint: LPCWSTR, lpszVolumeName: LPCWSTR): cint <cimport,nodecl> end
global function GetVolumeNameForVolumeMountPointA(lpszVolumeMountPoint: LPCSTR, lpszVolumeName: LPSTR, cchBufferLength: culong): cint <cimport,nodecl> end
global function GetVolumePathNameA(lpszFileName: LPCSTR, lpszVolumePathName: LPSTR, cchBufferLength: culong): cint <cimport,nodecl> end
global function GetVolumePathNamesForVolumeNameA(lpszVolumeName: LPCSTR, lpszVolumePathNames: LPCH, cchBufferLength: culong, lpcchReturnLength: PDWORD): cint <cimport,nodecl> end
global tagACTCTXA: type <cimport,nodecl,ctypedef> = @record{
  cbSize: culong,
  dwFlags: culong,
  lpSource: LPCSTR,
  wProcessorArchitecture: cushort,
  wLangId: cushort,
  lpAssemblyDirectory: LPCSTR,
  lpResourceName: LPCSTR,
  lpApplicationName: LPCSTR,
  hModule: HMODULE
}
global ACTCTXA: type = @tagACTCTXA
global PACTCTXA: type = @*tagACTCTXA
global tagACTCTXW: type <cimport,nodecl,ctypedef> = @record{
  cbSize: culong,
  dwFlags: culong,
  lpSource: LPCWSTR,
  wProcessorArchitecture: cushort,
  wLangId: cushort,
  lpAssemblyDirectory: LPCWSTR,
  lpResourceName: LPCWSTR,
  lpApplicationName: LPCWSTR,
  hModule: HMODULE
}
global ACTCTXW: type = @tagACTCTXW
global PACTCTXW: type = @*tagACTCTXW
global ACTCTX: type = @tagACTCTXA
global PACTCTX: type = @*tagACTCTXA
global PCACTCTXA: type = @*ACTCTXA
global PCACTCTXW: type = @*ACTCTXW
global PCACTCTX: type = @*ACTCTXA
global function CreateActCtxA(pActCtx: PCACTCTXA): HANDLE <cimport,nodecl> end
global function CreateActCtxW(pActCtx: PCACTCTXW): HANDLE <cimport,nodecl> end
global function AddRefActCtx(hActCtx: HANDLE): void <cimport,nodecl> end
global function ReleaseActCtx(hActCtx: HANDLE): void <cimport,nodecl> end
global function ZombifyActCtx(hActCtx: HANDLE): cint <cimport,nodecl> end
global function ActivateActCtx(hActCtx: HANDLE, lpCookie: *culonglong): cint <cimport,nodecl> end
global function DeactivateActCtx(dwFlags: culong, ulCookie: culonglong): cint <cimport,nodecl> end
global function GetCurrentActCtx(lphActCtx: *HANDLE): cint <cimport,nodecl> end
global tagACTCTX_SECTION_KEYED_DATA_2600: type <cimport,nodecl,ctypedef> = @record{
  cbSize: culong,
  ulDataFormatVersion: culong,
  lpData: PVOID,
  ulLength: culong,
  lpSectionGlobalData: PVOID,
  ulSectionGlobalDataLength: culong,
  lpSectionBase: PVOID,
  ulSectionTotalLength: culong,
  hActCtx: HANDLE,
  ulAssemblyRosterIndex: culong
}
global ACTCTX_SECTION_KEYED_DATA_2600: type = @tagACTCTX_SECTION_KEYED_DATA_2600
global PACTCTX_SECTION_KEYED_DATA_2600: type = @*tagACTCTX_SECTION_KEYED_DATA_2600
global PCACTCTX_SECTION_KEYED_DATA_2600: type = @*ACTCTX_SECTION_KEYED_DATA_2600
global tagACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA: type <cimport,nodecl,ctypedef> = @record{
  lpInformation: PVOID,
  lpSectionBase: PVOID,
  ulSectionLength: culong,
  lpSectionGlobalDataBase: PVOID,
  ulSectionGlobalDataLength: culong
}
global ACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA: type = @tagACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA
global PACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA: type = @*tagACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA
global PCACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA: type = @*ACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA
global tagACTCTX_SECTION_KEYED_DATA: type <cimport,nodecl,ctypedef> = @record{
  cbSize: culong,
  ulDataFormatVersion: culong,
  lpData: PVOID,
  ulLength: culong,
  lpSectionGlobalData: PVOID,
  ulSectionGlobalDataLength: culong,
  lpSectionBase: PVOID,
  ulSectionTotalLength: culong,
  hActCtx: HANDLE,
  ulAssemblyRosterIndex: culong,
  ulFlags: culong,
  AssemblyMetadata: ACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA
}
global ACTCTX_SECTION_KEYED_DATA: type = @tagACTCTX_SECTION_KEYED_DATA
global PACTCTX_SECTION_KEYED_DATA: type = @*tagACTCTX_SECTION_KEYED_DATA
global PCACTCTX_SECTION_KEYED_DATA: type = @*ACTCTX_SECTION_KEYED_DATA
global function FindActCtxSectionStringA(dwFlags: culong, lpExtensionGuid: *GUID, ulSectionId: culong, lpStringToFind: LPCSTR, ReturnedData: PACTCTX_SECTION_KEYED_DATA): cint <cimport,nodecl> end
global function FindActCtxSectionStringW(dwFlags: culong, lpExtensionGuid: *GUID, ulSectionId: culong, lpStringToFind: LPCWSTR, ReturnedData: PACTCTX_SECTION_KEYED_DATA): cint <cimport,nodecl> end
global function FindActCtxSectionGuid(dwFlags: culong, lpExtensionGuid: *GUID, ulSectionId: culong, lpGuidToFind: *GUID, ReturnedData: PACTCTX_SECTION_KEYED_DATA): cint <cimport,nodecl> end
global _ACTIVATION_CONTEXT_BASIC_INFORMATION: type <cimport,nodecl,ctypedef> = @record{
  hActCtx: HANDLE,
  dwFlags: culong
}
global ACTIVATION_CONTEXT_BASIC_INFORMATION: type = @_ACTIVATION_CONTEXT_BASIC_INFORMATION
global PACTIVATION_CONTEXT_BASIC_INFORMATION: type = @*_ACTIVATION_CONTEXT_BASIC_INFORMATION
global PCACTIVATION_CONTEXT_BASIC_INFORMATION: type = @*_ACTIVATION_CONTEXT_BASIC_INFORMATION
global function QueryActCtxW(dwFlags: culong, hActCtx: HANDLE, pvSubInstance: PVOID, ulInfoClass: culong, pvBuffer: PVOID, cbBuffer: culonglong, pcbWrittenOrRequired: *culonglong): cint <cimport,nodecl> end
global PQUERYACTCTXW_FUNC: type <cimport,nodecl> = @function(culong, HANDLE, PVOID, culong, PVOID, culonglong, *culonglong): cint
global function WTSGetActiveConsoleSessionId(): culong <cimport,nodecl> end
global function GetNumaProcessorNode(Processor: cuchar, NodeNumber: PUCHAR): cint <cimport,nodecl> end
global function GetNumaNodeProcessorMask(Node: cuchar, ProcessorMask: PULONGLONG): cint <cimport,nodecl> end
global function GetNumaAvailableMemoryNode(Node: cuchar, AvailableBytes: PULONGLONG): cint <cimport,nodecl> end
global function GetNumaProximityNode(ProximityId: culong, NodeNumber: PUCHAR): cint <cimport,nodecl> end
global APPLICATION_RECOVERY_CALLBACK: type <cimport,nodecl> = @function(PVOID): culong
global function RegisterApplicationRecoveryCallback(pRecoveyCallback: APPLICATION_RECOVERY_CALLBACK, pvParameter: PVOID, dwPingInterval: culong, dwFlags: culong): clong <cimport,nodecl> end
global function UnregisterApplicationRecoveryCallback(): clong <cimport,nodecl> end
global function RegisterApplicationRestart(pwzCommandline: PCWSTR, dwFlags: culong): clong <cimport,nodecl> end
global function UnregisterApplicationRestart(): clong <cimport,nodecl> end
global function GetApplicationRecoveryCallback(hProcess: HANDLE, pRecoveryCallback: *APPLICATION_RECOVERY_CALLBACK, ppvParameter: *PVOID, pdwPingInterval: PDWORD, pdwFlags: PDWORD): clong <cimport,nodecl> end
global function GetApplicationRestartSettings(hProcess: HANDLE, pwzCommandline: PWSTR, pcchSize: PDWORD, pdwFlags: PDWORD): clong <cimport,nodecl> end
global function ApplicationRecoveryInProgress(pbCancelled: PBOOL): clong <cimport,nodecl> end
global function ApplicationRecoveryFinished(bSuccess: cint): void <cimport,nodecl> end
global function DeleteVolumeMountPointA(lpszVolumeMountPoint: LPCSTR): cint <cimport,nodecl> end
global _FILE_BASIC_INFO: type <cimport,nodecl,ctypedef> = @record{
  CreationTime: LARGE_INTEGER,
  LastAccessTime: LARGE_INTEGER,
  LastWriteTime: LARGE_INTEGER,
  ChangeTime: LARGE_INTEGER,
  FileAttributes: culong
}
global FILE_BASIC_INFO: type = @_FILE_BASIC_INFO
global PFILE_BASIC_INFO: type = @*_FILE_BASIC_INFO
global _FILE_STANDARD_INFO: type <cimport,nodecl,ctypedef> = @record{
  AllocationSize: LARGE_INTEGER,
  EndOfFile: LARGE_INTEGER,
  NumberOfLinks: culong,
  DeletePending: BOOLEAN,
  Directory: BOOLEAN
}
global FILE_STANDARD_INFO: type = @_FILE_STANDARD_INFO
global PFILE_STANDARD_INFO: type = @*_FILE_STANDARD_INFO
global _FILE_NAME_INFO: type <cimport,nodecl,ctypedef> = @record{
  FileNameLength: culong,
  FileName: [1]cwchar_t
}
global FILE_NAME_INFO: type = @_FILE_NAME_INFO
global PFILE_NAME_INFO: type = @*_FILE_NAME_INFO
global _FILE_CASE_SENSITIVE_INFO: type <cimport,nodecl,ctypedef> = @record{
  Flags: culong
}
global FILE_CASE_SENSITIVE_INFO: type = @_FILE_CASE_SENSITIVE_INFO
global PFILE_CASE_SENSITIVE_INFO: type = @*_FILE_CASE_SENSITIVE_INFO
global _FILE_RENAME_INFO: type <cimport,nodecl,ctypedef> = @record{
  __unnamed1: union{
    ReplaceIfExists: BOOLEAN,
    Flags: culong
  },
  RootDirectory: HANDLE,
  FileNameLength: culong,
  FileName: [1]cwchar_t
}
global FILE_RENAME_INFO: type = @_FILE_RENAME_INFO
global PFILE_RENAME_INFO: type = @*_FILE_RENAME_INFO
global _FILE_ALLOCATION_INFO: type <cimport,nodecl,ctypedef> = @record{
  AllocationSize: LARGE_INTEGER
}
global FILE_ALLOCATION_INFO: type = @_FILE_ALLOCATION_INFO
global PFILE_ALLOCATION_INFO: type = @*_FILE_ALLOCATION_INFO
global _FILE_END_OF_FILE_INFO: type <cimport,nodecl,ctypedef> = @record{
  EndOfFile: LARGE_INTEGER
}
global FILE_END_OF_FILE_INFO: type = @_FILE_END_OF_FILE_INFO
global PFILE_END_OF_FILE_INFO: type = @*_FILE_END_OF_FILE_INFO
global _FILE_STREAM_INFO: type <cimport,nodecl,ctypedef> = @record{
  NextEntryOffset: culong,
  StreamNameLength: culong,
  StreamSize: LARGE_INTEGER,
  StreamAllocationSize: LARGE_INTEGER,
  StreamName: [1]cwchar_t
}
global FILE_STREAM_INFO: type = @_FILE_STREAM_INFO
global PFILE_STREAM_INFO: type = @*_FILE_STREAM_INFO
global _FILE_COMPRESSION_INFO: type <cimport,nodecl,ctypedef> = @record{
  CompressedFileSize: LARGE_INTEGER,
  CompressionFormat: cushort,
  CompressionUnitShift: cuchar,
  ChunkShift: cuchar,
  ClusterShift: cuchar,
  Reserved: [3]cuchar
}
global FILE_COMPRESSION_INFO: type = @_FILE_COMPRESSION_INFO
global PFILE_COMPRESSION_INFO: type = @*_FILE_COMPRESSION_INFO
global _FILE_ATTRIBUTE_TAG_INFO: type <cimport,nodecl,ctypedef> = @record{
  FileAttributes: culong,
  ReparseTag: culong
}
global FILE_ATTRIBUTE_TAG_INFO: type = @_FILE_ATTRIBUTE_TAG_INFO
global PFILE_ATTRIBUTE_TAG_INFO: type = @*_FILE_ATTRIBUTE_TAG_INFO
global _FILE_DISPOSITION_INFO: type <cimport,nodecl,ctypedef> = @record{
  DeleteFileA: BOOLEAN
}
global FILE_DISPOSITION_INFO: type = @_FILE_DISPOSITION_INFO
global PFILE_DISPOSITION_INFO: type = @*_FILE_DISPOSITION_INFO
global _FILE_DISPOSITION_INFO_EX: type <cimport,nodecl,ctypedef> = @record{
  Flags: culong
}
global FILE_DISPOSITION_INFO_EX: type = @_FILE_DISPOSITION_INFO_EX
global PFILE_DISPOSITION_INFO_EX: type = @*_FILE_DISPOSITION_INFO_EX
global _FILE_ID_BOTH_DIR_INFO: type <cimport,nodecl,ctypedef> = @record{
  NextEntryOffset: culong,
  FileIndex: culong,
  CreationTime: LARGE_INTEGER,
  LastAccessTime: LARGE_INTEGER,
  LastWriteTime: LARGE_INTEGER,
  ChangeTime: LARGE_INTEGER,
  EndOfFile: LARGE_INTEGER,
  AllocationSize: LARGE_INTEGER,
  FileAttributes: culong,
  FileNameLength: culong,
  EaSize: culong,
  ShortNameLength: cchar,
  ShortName: [12]cwchar_t,
  FileId: LARGE_INTEGER,
  FileName: [1]cwchar_t
}
global FILE_ID_BOTH_DIR_INFO: type = @_FILE_ID_BOTH_DIR_INFO
global PFILE_ID_BOTH_DIR_INFO: type = @*_FILE_ID_BOTH_DIR_INFO
global _FILE_FULL_DIR_INFO: type <cimport,nodecl,ctypedef> = @record{
  NextEntryOffset: culong,
  FileIndex: culong,
  CreationTime: LARGE_INTEGER,
  LastAccessTime: LARGE_INTEGER,
  LastWriteTime: LARGE_INTEGER,
  ChangeTime: LARGE_INTEGER,
  EndOfFile: LARGE_INTEGER,
  AllocationSize: LARGE_INTEGER,
  FileAttributes: culong,
  FileNameLength: culong,
  EaSize: culong,
  FileName: [1]cwchar_t
}
global FILE_FULL_DIR_INFO: type = @_FILE_FULL_DIR_INFO
global PFILE_FULL_DIR_INFO: type = @*_FILE_FULL_DIR_INFO
global _PRIORITY_HINT: type <cimport,nodecl,using,ctypedef> = @enum(cint){
  IoPriorityHintVeryLow = 0,
  IoPriorityHintLow = 1,
  IoPriorityHintNormal = 2,
  MaximumIoPriorityHintType = 3
}
global PRIORITY_HINT: type = @_PRIORITY_HINT
global _FILE_IO_PRIORITY_HINT_INFO: type <cimport,nodecl,ctypedef> = @record{
  PriorityHint: PRIORITY_HINT
}
global FILE_IO_PRIORITY_HINT_INFO: type = @_FILE_IO_PRIORITY_HINT_INFO
global PFILE_IO_PRIORITY_HINT_INFO: type = @*_FILE_IO_PRIORITY_HINT_INFO
global _FILE_REMOTE_PROTOCOL_INFO: type <cimport,nodecl,ctypedef> = @record{
  StructureVersion: cushort,
  StructureSize: cushort,
  Protocol: culong,
  ProtocolMajorVersion: cushort,
  ProtocolMinorVersion: cushort,
  ProtocolRevision: cushort,
  Reserved: cushort,
  Flags: culong,
  GenericReserved: record{
    Reserved: [8]culong
  },
  ProtocolSpecificReserved: record{
    Reserved: [16]culong
  }
}
global FILE_REMOTE_PROTOCOL_INFO: type = @_FILE_REMOTE_PROTOCOL_INFO
global PFILE_REMOTE_PROTOCOL_INFO: type = @*_FILE_REMOTE_PROTOCOL_INFO
global function GetFileInformationByHandleEx(hFile: HANDLE, FileInformationClass: FILE_INFO_BY_HANDLE_CLASS, lpFileInformation: LPVOID, dwBufferSize: culong): cint <cimport,nodecl> end
global _FILE_ID_TYPE: type <cimport,nodecl,using,ctypedef> = @enum(cint){
  FileIdType = 0,
  ObjectIdType = 1,
  ExtendedFileIdType = 2,
  MaximumFileIdType = 3
}
global FILE_ID_TYPE: type = @_FILE_ID_TYPE
global PFILE_ID_TYPE: type = @*_FILE_ID_TYPE
global FILE_ID_DESCRIPTOR: type <cimport,nodecl> = @record{
  dwSize: culong,
  Type: FILE_ID_TYPE,
  __unnamed1: union{
    FileId: LARGE_INTEGER,
    ObjectId: GUID
  }
}
global LPFILE_ID_DESCRIPTOR: type = @*FILE_ID_DESCRIPTOR
global function OpenFileById(hVolumeHint: HANDLE, lpFileId: LPFILE_ID_DESCRIPTOR, dwDesiredAccess: culong, dwShareMode: culong, lpSecurityAttributes: LPSECURITY_ATTRIBUTES, dwFlagsAndAttributes: culong): HANDLE <cimport,nodecl> end
global function CreateSymbolicLinkA(lpSymlinkFileName: LPCSTR, lpTargetFileName: LPCSTR, dwFlags: culong): BOOLEAN <cimport,nodecl> end
global function CreateSymbolicLinkW(lpSymlinkFileName: LPCWSTR, lpTargetFileName: LPCWSTR, dwFlags: culong): BOOLEAN <cimport,nodecl> end
global function CreateSymbolicLinkTransactedA(lpSymlinkFileName: LPCSTR, lpTargetFileName: LPCSTR, dwFlags: culong, hTransaction: HANDLE): BOOLEAN <cimport,nodecl> end
global function CreateSymbolicLinkTransactedW(lpSymlinkFileName: LPCWSTR, lpTargetFileName: LPCWSTR, dwFlags: culong, hTransaction: HANDLE): BOOLEAN <cimport,nodecl> end
global function QueryActCtxSettingsW(dwFlags: culong, hActCtx: HANDLE, settingsNameSpace: PCWSTR, settingName: PCWSTR, pvBuffer: PWSTR, dwBuffer: culonglong, pdwWrittenOrRequired: *culonglong): cint <cimport,nodecl> end
global function ReplacePartitionUnit(TargetPartition: PWSTR, SparePartition: PWSTR, Flags: culong): cint <cimport,nodecl> end
global function AddSecureMemoryCacheCallback(pfnCallBack: PSECURE_MEMORY_CACHE_CALLBACK): cint <cimport,nodecl> end
global function RemoveSecureMemoryCacheCallback(pfnCallBack: PSECURE_MEMORY_CACHE_CALLBACK): cint <cimport,nodecl> end
global function CopyContext(Destination: PCONTEXT, ContextFlags: culong, Source: PCONTEXT): cint <cimport,nodecl> end
global function InitializeContext(Buffer: PVOID, ContextFlags: culong, Context: *PCONTEXT, ContextLength: PDWORD): cint <cimport,nodecl> end
global function GetEnabledXStateFeatures(): culonglong <cimport,nodecl> end
global function GetXStateFeaturesMask(Context: PCONTEXT, FeatureMask: PDWORD64): cint <cimport,nodecl> end
global function LocateXStateFeature(Context: PCONTEXT, FeatureId: culong, Length: PDWORD): PVOID <cimport,nodecl> end
global function SetXStateFeaturesMask(Context: PCONTEXT, FeatureMask: culonglong): cint <cimport,nodecl> end
global function InitializeThreadpoolEnvironment(cbe: PTP_CALLBACK_ENVIRON): void <cimport,nodecl> end
global function SetThreadpoolCallbackPool(cbe: PTP_CALLBACK_ENVIRON, pool: PTP_POOL): void <cimport,nodecl> end
global function SetThreadpoolCallbackCleanupGroup(cbe: PTP_CALLBACK_ENVIRON, cleanup_group: PTP_CLEANUP_GROUP, cleanup_group_cb: PTP_CLEANUP_GROUP_CANCEL_CALLBACK): void <cimport,nodecl> end
global function SetThreadpoolCallbackRunsLong(cbe: PTP_CALLBACK_ENVIRON): void <cimport,nodecl> end
global function SetThreadpoolCallbackLibrary(cbe: PTP_CALLBACK_ENVIRON, h: PVOID): void <cimport,nodecl> end
global function DestroyThreadpoolEnvironment(cbe: PTP_CALLBACK_ENVIRON): void <cimport,nodecl> end
global _DRAWPATRECT: type <cimport,nodecl,ctypedef> = @record{
  ptPosition: POINT,
  ptSize: POINT,
  wStyle: cushort,
  wPattern: cushort
}
global DRAWPATRECT: type = @_DRAWPATRECT
global PDRAWPATRECT: type = @*_DRAWPATRECT
global _PSINJECTDATA: type <cimport,nodecl,ctypedef> = @record{
  DataBytes: culong,
  InjectionPoint: cushort,
  PageNumber: cushort
}
global PSINJECTDATA: type = @_PSINJECTDATA
global PPSINJECTDATA: type = @*_PSINJECTDATA
global _PSFEATURE_OUTPUT: type <cimport,nodecl,ctypedef> = @record{
  bPageIndependent: cint,
  bSetPageDevice: cint
}
global PSFEATURE_OUTPUT: type = @_PSFEATURE_OUTPUT
global PPSFEATURE_OUTPUT: type = @*_PSFEATURE_OUTPUT
global _PSFEATURE_CUSTPAPER: type <cimport,nodecl,ctypedef> = @record{
  lOrientation: clong,
  lWidth: clong,
  lHeight: clong,
  lWidthOffset: clong,
  lHeightOffset: clong
}
global PSFEATURE_CUSTPAPER: type = @_PSFEATURE_CUSTPAPER
global PPSFEATURE_CUSTPAPER: type = @*_PSFEATURE_CUSTPAPER
global tagXFORM: type <cimport,nodecl,ctypedef> = @record{
  eM11: float32,
  eM12: float32,
  eM21: float32,
  eM22: float32,
  eDx: float32,
  eDy: float32
}
global XFORM: type = @tagXFORM
global PXFORM: type = @*tagXFORM
global LPXFORM: type = @*tagXFORM
global tagBITMAP: type <cimport,nodecl,ctypedef> = @record{
  bmType: clong,
  bmWidth: clong,
  bmHeight: clong,
  bmWidthBytes: clong,
  bmPlanes: cushort,
  bmBitsPixel: cushort,
  bmBits: LPVOID
}
global BITMAP: type = @tagBITMAP
global PBITMAP: type = @*tagBITMAP
global NPBITMAP: type = @*tagBITMAP
global LPBITMAP: type = @*tagBITMAP
global tagRGBTRIPLE: type <cimport,nodecl,ctypedef> = @record{
  rgbtBlue: cuchar,
  rgbtGreen: cuchar,
  rgbtRed: cuchar
}
global RGBTRIPLE: type = @tagRGBTRIPLE
global PRGBTRIPLE: type = @*tagRGBTRIPLE
global NPRGBTRIPLE: type = @*tagRGBTRIPLE
global LPRGBTRIPLE: type = @*tagRGBTRIPLE
global tagRGBQUAD: type <cimport,nodecl,ctypedef> = @record{
  rgbBlue: cuchar,
  rgbGreen: cuchar,
  rgbRed: cuchar,
  rgbReserved: cuchar
}
global RGBQUAD: type = @tagRGBQUAD
global LPRGBQUAD: type = @*RGBQUAD
global LPFXPT16DOT16: type = @*clong
global LPFXPT2DOT30: type = @*clong
global tagCIEXYZ: type <cimport,nodecl,ctypedef> = @record{
  ciexyzX: clong,
  ciexyzY: clong,
  ciexyzZ: clong
}
global CIEXYZ: type = @tagCIEXYZ
global LPCIEXYZ: type = @*CIEXYZ
global tagICEXYZTRIPLE: type <cimport,nodecl,ctypedef> = @record{
  ciexyzRed: CIEXYZ,
  ciexyzGreen: CIEXYZ,
  ciexyzBlue: CIEXYZ
}
global CIEXYZTRIPLE: type = @tagICEXYZTRIPLE
global LPCIEXYZTRIPLE: type = @*CIEXYZTRIPLE
global tagLOGCOLORSPACEA: type <cimport,nodecl,ctypedef> = @record{
  lcsSignature: culong,
  lcsVersion: culong,
  lcsSize: culong,
  lcsCSType: clong,
  lcsIntent: clong,
  lcsEndpoints: CIEXYZTRIPLE,
  lcsGammaRed: culong,
  lcsGammaGreen: culong,
  lcsGammaBlue: culong,
  lcsFilename: [260]cchar
}
global LOGCOLORSPACEA: type = @tagLOGCOLORSPACEA
global LPLOGCOLORSPACEA: type = @*tagLOGCOLORSPACEA
global tagLOGCOLORSPACEW: type <cimport,nodecl,ctypedef> = @record{
  lcsSignature: culong,
  lcsVersion: culong,
  lcsSize: culong,
  lcsCSType: clong,
  lcsIntent: clong,
  lcsEndpoints: CIEXYZTRIPLE,
  lcsGammaRed: culong,
  lcsGammaGreen: culong,
  lcsGammaBlue: culong,
  lcsFilename: [260]cwchar_t
}
global LOGCOLORSPACEW: type = @tagLOGCOLORSPACEW
global LPLOGCOLORSPACEW: type = @*tagLOGCOLORSPACEW
global LOGCOLORSPACE: type = @tagLOGCOLORSPACEA
global LPLOGCOLORSPACE: type = @*tagLOGCOLORSPACEA
global tagBITMAPCOREHEADER: type <cimport,nodecl,ctypedef> = @record{
  bcSize: culong,
  bcWidth: cushort,
  bcHeight: cushort,
  bcPlanes: cushort,
  bcBitCount: cushort
}
global BITMAPCOREHEADER: type = @tagBITMAPCOREHEADER
global LPBITMAPCOREHEADER: type = @*tagBITMAPCOREHEADER
global PBITMAPCOREHEADER: type = @*tagBITMAPCOREHEADER
global tagBITMAPINFOHEADER: type <cimport,nodecl,ctypedef> = @record{
  biSize: culong,
  biWidth: clong,
  biHeight: clong,
  biPlanes: cushort,
  biBitCount: cushort,
  biCompression: culong,
  biSizeImage: culong,
  biXPelsPerMeter: clong,
  biYPelsPerMeter: clong,
  biClrUsed: culong,
  biClrImportant: culong
}
global BITMAPINFOHEADER: type = @tagBITMAPINFOHEADER
global LPBITMAPINFOHEADER: type = @*tagBITMAPINFOHEADER
global PBITMAPINFOHEADER: type = @*tagBITMAPINFOHEADER
global BITMAPV4HEADER: type <cimport,nodecl> = @record{
  bV4Size: culong,
  bV4Width: clong,
  bV4Height: clong,
  bV4Planes: cushort,
  bV4BitCount: cushort,
  bV4V4Compression: culong,
  bV4SizeImage: culong,
  bV4XPelsPerMeter: clong,
  bV4YPelsPerMeter: clong,
  bV4ClrUsed: culong,
  bV4ClrImportant: culong,
  bV4RedMask: culong,
  bV4GreenMask: culong,
  bV4BlueMask: culong,
  bV4AlphaMask: culong,
  bV4CSType: culong,
  bV4Endpoints: CIEXYZTRIPLE,
  bV4GammaRed: culong,
  bV4GammaGreen: culong,
  bV4GammaBlue: culong
}
global LPBITMAPV4HEADER: type = @*record{
  bV4Size: culong,
  bV4Width: clong,
  bV4Height: clong,
  bV4Planes: cushort,
  bV4BitCount: cushort,
  bV4V4Compression: culong,
  bV4SizeImage: culong,
  bV4XPelsPerMeter: clong,
  bV4YPelsPerMeter: clong,
  bV4ClrUsed: culong,
  bV4ClrImportant: culong,
  bV4RedMask: culong,
  bV4GreenMask: culong,
  bV4BlueMask: culong,
  bV4AlphaMask: culong,
  bV4CSType: culong,
  bV4Endpoints: CIEXYZTRIPLE,
  bV4GammaRed: culong,
  bV4GammaGreen: culong,
  bV4GammaBlue: culong
}
global PBITMAPV4HEADER: type = @*record{
  bV4Size: culong,
  bV4Width: clong,
  bV4Height: clong,
  bV4Planes: cushort,
  bV4BitCount: cushort,
  bV4V4Compression: culong,
  bV4SizeImage: culong,
  bV4XPelsPerMeter: clong,
  bV4YPelsPerMeter: clong,
  bV4ClrUsed: culong,
  bV4ClrImportant: culong,
  bV4RedMask: culong,
  bV4GreenMask: culong,
  bV4BlueMask: culong,
  bV4AlphaMask: culong,
  bV4CSType: culong,
  bV4Endpoints: CIEXYZTRIPLE,
  bV4GammaRed: culong,
  bV4GammaGreen: culong,
  bV4GammaBlue: culong
}
global BITMAPV5HEADER: type <cimport,nodecl> = @record{
  bV5Size: culong,
  bV5Width: clong,
  bV5Height: clong,
  bV5Planes: cushort,
  bV5BitCount: cushort,
  bV5Compression: culong,
  bV5SizeImage: culong,
  bV5XPelsPerMeter: clong,
  bV5YPelsPerMeter: clong,
  bV5ClrUsed: culong,
  bV5ClrImportant: culong,
  bV5RedMask: culong,
  bV5GreenMask: culong,
  bV5BlueMask: culong,
  bV5AlphaMask: culong,
  bV5CSType: culong,
  bV5Endpoints: CIEXYZTRIPLE,
  bV5GammaRed: culong,
  bV5GammaGreen: culong,
  bV5GammaBlue: culong,
  bV5Intent: culong,
  bV5ProfileData: culong,
  bV5ProfileSize: culong,
  bV5Reserved: culong
}
global LPBITMAPV5HEADER: type = @*record{
  bV5Size: culong,
  bV5Width: clong,
  bV5Height: clong,
  bV5Planes: cushort,
  bV5BitCount: cushort,
  bV5Compression: culong,
  bV5SizeImage: culong,
  bV5XPelsPerMeter: clong,
  bV5YPelsPerMeter: clong,
  bV5ClrUsed: culong,
  bV5ClrImportant: culong,
  bV5RedMask: culong,
  bV5GreenMask: culong,
  bV5BlueMask: culong,
  bV5AlphaMask: culong,
  bV5CSType: culong,
  bV5Endpoints: CIEXYZTRIPLE,
  bV5GammaRed: culong,
  bV5GammaGreen: culong,
  bV5GammaBlue: culong,
  bV5Intent: culong,
  bV5ProfileData: culong,
  bV5ProfileSize: culong,
  bV5Reserved: culong
}
global PBITMAPV5HEADER: type = @*record{
  bV5Size: culong,
  bV5Width: clong,
  bV5Height: clong,
  bV5Planes: cushort,
  bV5BitCount: cushort,
  bV5Compression: culong,
  bV5SizeImage: culong,
  bV5XPelsPerMeter: clong,
  bV5YPelsPerMeter: clong,
  bV5ClrUsed: culong,
  bV5ClrImportant: culong,
  bV5RedMask: culong,
  bV5GreenMask: culong,
  bV5BlueMask: culong,
  bV5AlphaMask: culong,
  bV5CSType: culong,
  bV5Endpoints: CIEXYZTRIPLE,
  bV5GammaRed: culong,
  bV5GammaGreen: culong,
  bV5GammaBlue: culong,
  bV5Intent: culong,
  bV5ProfileData: culong,
  bV5ProfileSize: culong,
  bV5Reserved: culong
}
global tagBITMAPINFO: type <cimport,nodecl,ctypedef> = @record{
  bmiHeader: BITMAPINFOHEADER,
  bmiColors: [1]RGBQUAD
}
global BITMAPINFO: type = @tagBITMAPINFO
global LPBITMAPINFO: type = @*tagBITMAPINFO
global PBITMAPINFO: type = @*tagBITMAPINFO
global tagBITMAPCOREINFO: type <cimport,nodecl,ctypedef> = @record{
  bmciHeader: BITMAPCOREHEADER,
  bmciColors: [1]RGBTRIPLE
}
global BITMAPCOREINFO: type = @tagBITMAPCOREINFO
global LPBITMAPCOREINFO: type = @*tagBITMAPCOREINFO
global PBITMAPCOREINFO: type = @*tagBITMAPCOREINFO
global tagBITMAPFILEHEADER: type <cimport,nodecl,ctypedef> = @record{
  bfType: cushort,
  bfSize: culong,
  bfReserved1: cushort,
  bfReserved2: cushort,
  bfOffBits: culong
}
global BITMAPFILEHEADER: type = @tagBITMAPFILEHEADER
global LPBITMAPFILEHEADER: type = @*tagBITMAPFILEHEADER
global PBITMAPFILEHEADER: type = @*tagBITMAPFILEHEADER
global tagFONTSIGNATURE: type <cimport,nodecl,ctypedef> = @record{
  fsUsb: [4]culong,
  fsCsb: [2]culong
}
global FONTSIGNATURE: type = @tagFONTSIGNATURE
global PFONTSIGNATURE: type = @*tagFONTSIGNATURE
global LPFONTSIGNATURE: type = @*tagFONTSIGNATURE
global tagCHARSETINFO: type <cimport,nodecl,ctypedef> = @record{
  ciCharset: cuint,
  ciACP: cuint,
  fs: FONTSIGNATURE
}
global CHARSETINFO: type = @tagCHARSETINFO
global PCHARSETINFO: type = @*tagCHARSETINFO
global NPCHARSETINFO: type = @*tagCHARSETINFO
global LPCHARSETINFO: type = @*tagCHARSETINFO
global tagLOCALESIGNATURE: type <cimport,nodecl,ctypedef> = @record{
  lsUsb: [4]culong,
  lsCsbDefault: [2]culong,
  lsCsbSupported: [2]culong
}
global LOCALESIGNATURE: type = @tagLOCALESIGNATURE
global PLOCALESIGNATURE: type = @*tagLOCALESIGNATURE
global LPLOCALESIGNATURE: type = @*tagLOCALESIGNATURE
global tagHANDLETABLE: type <cimport,nodecl,ctypedef> = @record{
  objectHandle: [1]HGDIOBJ
}
global HANDLETABLE: type = @tagHANDLETABLE
global PHANDLETABLE: type = @*tagHANDLETABLE
global LPHANDLETABLE: type = @*tagHANDLETABLE
global tagMETARECORD: type <cimport,nodecl,ctypedef> = @record{
  rdSize: culong,
  rdFunction: cushort,
  rdParm: [1]cushort
}
global METARECORD: type = @tagMETARECORD
global PMETARECORD: type = @*tagMETARECORD
global LPMETARECORD: type = @*tagMETARECORD
global tagMETAFILEPICT: type <cimport,nodecl,ctypedef> = @record{
  mm: clong,
  xExt: clong,
  yExt: clong,
  hMF: HMETAFILE
}
global METAFILEPICT: type = @tagMETAFILEPICT
global LPMETAFILEPICT: type = @*tagMETAFILEPICT
global tagMETAHEADER: type <cimport,nodecl,ctypedef> = @record{
  mtType: cushort,
  mtHeaderSize: cushort,
  mtVersion: cushort,
  mtSize: culong,
  mtNoObjects: cushort,
  mtMaxRecord: culong,
  mtNoParameters: cushort
}
global METAHEADER: type = @tagMETAHEADER
global PMETAHEADER: type = @*tagMETAHEADER
global LPMETAHEADER: type = @*tagMETAHEADER
global tagENHMETARECORD: type <cimport,nodecl,ctypedef> = @record{
  iType: culong,
  nSize: culong,
  dParm: [1]culong
}
global ENHMETARECORD: type = @tagENHMETARECORD
global PENHMETARECORD: type = @*tagENHMETARECORD
global LPENHMETARECORD: type = @*tagENHMETARECORD
global tagENHMETAHEADER: type <cimport,nodecl,ctypedef> = @record{
  iType: culong,
  nSize: culong,
  rclBounds: RECTL,
  rclFrame: RECTL,
  dSignature: culong,
  nVersion: culong,
  nBytes: culong,
  nRecords: culong,
  nHandles: cushort,
  sReserved: cushort,
  nDescription: culong,
  offDescription: culong,
  nPalEntries: culong,
  szlDevice: SIZEL,
  szlMillimeters: SIZEL,
  cbPixelFormat: culong,
  offPixelFormat: culong,
  bOpenGL: culong,
  szlMicrometers: SIZEL
}
global ENHMETAHEADER: type = @tagENHMETAHEADER
global PENHMETAHEADER: type = @*tagENHMETAHEADER
global LPENHMETAHEADER: type = @*tagENHMETAHEADER
global tagTEXTMETRICA: type <cimport,nodecl,ctypedef> = @record{
  tmHeight: clong,
  tmAscent: clong,
  tmDescent: clong,
  tmInternalLeading: clong,
  tmExternalLeading: clong,
  tmAveCharWidth: clong,
  tmMaxCharWidth: clong,
  tmWeight: clong,
  tmOverhang: clong,
  tmDigitizedAspectX: clong,
  tmDigitizedAspectY: clong,
  tmFirstChar: cuchar,
  tmLastChar: cuchar,
  tmDefaultChar: cuchar,
  tmBreakChar: cuchar,
  tmItalic: cuchar,
  tmUnderlined: cuchar,
  tmStruckOut: cuchar,
  tmPitchAndFamily: cuchar,
  tmCharSet: cuchar
}
global TEXTMETRICA: type = @tagTEXTMETRICA
global PTEXTMETRICA: type = @*tagTEXTMETRICA
global NPTEXTMETRICA: type = @*tagTEXTMETRICA
global LPTEXTMETRICA: type = @*tagTEXTMETRICA
global tagTEXTMETRICW: type <cimport,nodecl,ctypedef> = @record{
  tmHeight: clong,
  tmAscent: clong,
  tmDescent: clong,
  tmInternalLeading: clong,
  tmExternalLeading: clong,
  tmAveCharWidth: clong,
  tmMaxCharWidth: clong,
  tmWeight: clong,
  tmOverhang: clong,
  tmDigitizedAspectX: clong,
  tmDigitizedAspectY: clong,
  tmFirstChar: cwchar_t,
  tmLastChar: cwchar_t,
  tmDefaultChar: cwchar_t,
  tmBreakChar: cwchar_t,
  tmItalic: cuchar,
  tmUnderlined: cuchar,
  tmStruckOut: cuchar,
  tmPitchAndFamily: cuchar,
  tmCharSet: cuchar
}
global TEXTMETRICW: type = @tagTEXTMETRICW
global PTEXTMETRICW: type = @*tagTEXTMETRICW
global NPTEXTMETRICW: type = @*tagTEXTMETRICW
global LPTEXTMETRICW: type = @*tagTEXTMETRICW
global TEXTMETRIC: type = @tagTEXTMETRICA
global PTEXTMETRIC: type = @*tagTEXTMETRICA
global NPTEXTMETRIC: type = @*tagTEXTMETRICA
global LPTEXTMETRIC: type = @*tagTEXTMETRICA
global tagNEWTEXTMETRICA: type <cimport,nodecl,ctypedef> = @record{
  tmHeight: clong,
  tmAscent: clong,
  tmDescent: clong,
  tmInternalLeading: clong,
  tmExternalLeading: clong,
  tmAveCharWidth: clong,
  tmMaxCharWidth: clong,
  tmWeight: clong,
  tmOverhang: clong,
  tmDigitizedAspectX: clong,
  tmDigitizedAspectY: clong,
  tmFirstChar: cuchar,
  tmLastChar: cuchar,
  tmDefaultChar: cuchar,
  tmBreakChar: cuchar,
  tmItalic: cuchar,
  tmUnderlined: cuchar,
  tmStruckOut: cuchar,
  tmPitchAndFamily: cuchar,
  tmCharSet: cuchar,
  ntmFlags: culong,
  ntmSizeEM: cuint,
  ntmCellHeight: cuint,
  ntmAvgWidth: cuint
}
global NEWTEXTMETRICA: type = @tagNEWTEXTMETRICA
global PNEWTEXTMETRICA: type = @*tagNEWTEXTMETRICA
global NPNEWTEXTMETRICA: type = @*tagNEWTEXTMETRICA
global LPNEWTEXTMETRICA: type = @*tagNEWTEXTMETRICA
global tagNEWTEXTMETRICW: type <cimport,nodecl,ctypedef> = @record{
  tmHeight: clong,
  tmAscent: clong,
  tmDescent: clong,
  tmInternalLeading: clong,
  tmExternalLeading: clong,
  tmAveCharWidth: clong,
  tmMaxCharWidth: clong,
  tmWeight: clong,
  tmOverhang: clong,
  tmDigitizedAspectX: clong,
  tmDigitizedAspectY: clong,
  tmFirstChar: cwchar_t,
  tmLastChar: cwchar_t,
  tmDefaultChar: cwchar_t,
  tmBreakChar: cwchar_t,
  tmItalic: cuchar,
  tmUnderlined: cuchar,
  tmStruckOut: cuchar,
  tmPitchAndFamily: cuchar,
  tmCharSet: cuchar,
  ntmFlags: culong,
  ntmSizeEM: cuint,
  ntmCellHeight: cuint,
  ntmAvgWidth: cuint
}
global NEWTEXTMETRICW: type = @tagNEWTEXTMETRICW
global PNEWTEXTMETRICW: type = @*tagNEWTEXTMETRICW
global NPNEWTEXTMETRICW: type = @*tagNEWTEXTMETRICW
global LPNEWTEXTMETRICW: type = @*tagNEWTEXTMETRICW
global NEWTEXTMETRIC: type = @tagNEWTEXTMETRICA
global PNEWTEXTMETRIC: type = @*tagNEWTEXTMETRICA
global NPNEWTEXTMETRIC: type = @*tagNEWTEXTMETRICA
global LPNEWTEXTMETRIC: type = @*tagNEWTEXTMETRICA
global tagNEWTEXTMETRICEXA: type <cimport,nodecl,ctypedef> = @record{
  ntmTm: NEWTEXTMETRICA,
  ntmFontSig: FONTSIGNATURE
}
global NEWTEXTMETRICEXA: type = @tagNEWTEXTMETRICEXA
global tagNEWTEXTMETRICEXW: type <cimport,nodecl,ctypedef> = @record{
  ntmTm: NEWTEXTMETRICW,
  ntmFontSig: FONTSIGNATURE
}
global NEWTEXTMETRICEXW: type = @tagNEWTEXTMETRICEXW
global NEWTEXTMETRICEX: type = @tagNEWTEXTMETRICEXA
global tagPELARRAY: type <cimport,nodecl,ctypedef> = @record{
  paXCount: clong,
  paYCount: clong,
  paXExt: clong,
  paYExt: clong,
  paRGBs: cuchar
}
global PELARRAY: type = @tagPELARRAY
global PPELARRAY: type = @*tagPELARRAY
global NPPELARRAY: type = @*tagPELARRAY
global LPPELARRAY: type = @*tagPELARRAY
global tagLOGBRUSH: type <cimport,nodecl,ctypedef> = @record{
  lbStyle: cuint,
  lbColor: culong,
  lbHatch: culonglong
}
global LOGBRUSH: type = @tagLOGBRUSH
global PLOGBRUSH: type = @*tagLOGBRUSH
global NPLOGBRUSH: type = @*tagLOGBRUSH
global LPLOGBRUSH: type = @*tagLOGBRUSH
global tagLOGBRUSH32: type <cimport,nodecl,ctypedef> = @record{
  lbStyle: cuint,
  lbColor: culong,
  lbHatch: culong
}
global LOGBRUSH32: type = @tagLOGBRUSH32
global PLOGBRUSH32: type = @*tagLOGBRUSH32
global NPLOGBRUSH32: type = @*tagLOGBRUSH32
global LPLOGBRUSH32: type = @*tagLOGBRUSH32
global PATTERN: type = @tagLOGBRUSH
global PPATTERN: type = @*PATTERN
global NPPATTERN: type = @*PATTERN
global LPPATTERN: type = @*PATTERN
global tagLOGPEN: type <cimport,nodecl,ctypedef> = @record{
  lopnStyle: cuint,
  lopnWidth: POINT,
  lopnColor: culong
}
global LOGPEN: type = @tagLOGPEN
global PLOGPEN: type = @*tagLOGPEN
global NPLOGPEN: type = @*tagLOGPEN
global LPLOGPEN: type = @*tagLOGPEN
global tagEXTLOGPEN: type <cimport,nodecl,ctypedef> = @record{
  elpPenStyle: culong,
  elpWidth: culong,
  elpBrushStyle: cuint,
  elpColor: culong,
  elpHatch: culonglong,
  elpNumEntries: culong,
  elpStyleEntry: [1]culong
}
global EXTLOGPEN: type = @tagEXTLOGPEN
global PEXTLOGPEN: type = @*tagEXTLOGPEN
global NPEXTLOGPEN: type = @*tagEXTLOGPEN
global LPEXTLOGPEN: type = @*tagEXTLOGPEN
global tagEXTLOGPEN32: type <cimport,nodecl,ctypedef> = @record{
  elpPenStyle: culong,
  elpWidth: culong,
  elpBrushStyle: cuint,
  elpColor: culong,
  elpHatch: culong,
  elpNumEntries: culong,
  elpStyleEntry: [1]culong
}
global EXTLOGPEN32: type = @tagEXTLOGPEN32
global PEXTLOGPEN32: type = @*tagEXTLOGPEN32
global NPEXTLOGPEN32: type = @*tagEXTLOGPEN32
global LPEXTLOGPEN32: type = @*tagEXTLOGPEN32
global tagPALETTEENTRY: type <cimport,nodecl,ctypedef> = @record{
  peRed: cuchar,
  peGreen: cuchar,
  peBlue: cuchar,
  peFlags: cuchar
}
global PALETTEENTRY: type = @tagPALETTEENTRY
global PPALETTEENTRY: type = @*tagPALETTEENTRY
global LPPALETTEENTRY: type = @*tagPALETTEENTRY
global tagLOGPALETTE: type <cimport,nodecl,ctypedef> = @record{
  palVersion: cushort,
  palNumEntries: cushort,
  palPalEntry: [1]PALETTEENTRY
}
global LOGPALETTE: type = @tagLOGPALETTE
global PLOGPALETTE: type = @*tagLOGPALETTE
global NPLOGPALETTE: type = @*tagLOGPALETTE
global LPLOGPALETTE: type = @*tagLOGPALETTE
global tagLOGFONTA: type <cimport,nodecl,ctypedef> = @record{
  lfHeight: clong,
  lfWidth: clong,
  lfEscapement: clong,
  lfOrientation: clong,
  lfWeight: clong,
  lfItalic: cuchar,
  lfUnderline: cuchar,
  lfStrikeOut: cuchar,
  lfCharSet: cuchar,
  lfOutPrecision: cuchar,
  lfClipPrecision: cuchar,
  lfQuality: cuchar,
  lfPitchAndFamily: cuchar,
  lfFaceName: [32]cchar
}
global LOGFONTA: type = @tagLOGFONTA
global PLOGFONTA: type = @*tagLOGFONTA
global NPLOGFONTA: type = @*tagLOGFONTA
global LPLOGFONTA: type = @*tagLOGFONTA
global tagLOGFONTW: type <cimport,nodecl,ctypedef> = @record{
  lfHeight: clong,
  lfWidth: clong,
  lfEscapement: clong,
  lfOrientation: clong,
  lfWeight: clong,
  lfItalic: cuchar,
  lfUnderline: cuchar,
  lfStrikeOut: cuchar,
  lfCharSet: cuchar,
  lfOutPrecision: cuchar,
  lfClipPrecision: cuchar,
  lfQuality: cuchar,
  lfPitchAndFamily: cuchar,
  lfFaceName: [32]cwchar_t
}
global LOGFONTW: type = @tagLOGFONTW
global PLOGFONTW: type = @*tagLOGFONTW
global NPLOGFONTW: type = @*tagLOGFONTW
global LPLOGFONTW: type = @*tagLOGFONTW
global LOGFONT: type = @tagLOGFONTA
global PLOGFONT: type = @*tagLOGFONTA
global NPLOGFONT: type = @*tagLOGFONTA
global LPLOGFONT: type = @*tagLOGFONTA
global tagENUMLOGFONTA: type <cimport,nodecl,ctypedef> = @record{
  elfLogFont: LOGFONTA,
  elfFullName: [64]cuchar,
  elfStyle: [32]cuchar
}
global ENUMLOGFONTA: type = @tagENUMLOGFONTA
global LPENUMLOGFONTA: type = @*tagENUMLOGFONTA
global tagENUMLOGFONTW: type <cimport,nodecl,ctypedef> = @record{
  elfLogFont: LOGFONTW,
  elfFullName: [64]cwchar_t,
  elfStyle: [32]cwchar_t
}
global ENUMLOGFONTW: type = @tagENUMLOGFONTW
global LPENUMLOGFONTW: type = @*tagENUMLOGFONTW
global ENUMLOGFONT: type = @tagENUMLOGFONTA
global LPENUMLOGFONT: type = @*tagENUMLOGFONTA
global tagENUMLOGFONTEXA: type <cimport,nodecl,ctypedef> = @record{
  elfLogFont: LOGFONTA,
  elfFullName: [64]cuchar,
  elfStyle: [32]cuchar,
  elfScript: [32]cuchar
}
global ENUMLOGFONTEXA: type = @tagENUMLOGFONTEXA
global LPENUMLOGFONTEXA: type = @*tagENUMLOGFONTEXA
global tagENUMLOGFONTEXW: type <cimport,nodecl,ctypedef> = @record{
  elfLogFont: LOGFONTW,
  elfFullName: [64]cwchar_t,
  elfStyle: [32]cwchar_t,
  elfScript: [32]cwchar_t
}
global ENUMLOGFONTEXW: type = @tagENUMLOGFONTEXW
global LPENUMLOGFONTEXW: type = @*tagENUMLOGFONTEXW
global ENUMLOGFONTEX: type = @tagENUMLOGFONTEXA
global LPENUMLOGFONTEX: type = @*tagENUMLOGFONTEXA
global tagPANOSE: type <cimport,nodecl,ctypedef> = @record{
  bFamilyType: cuchar,
  bSerifStyle: cuchar,
  bWeight: cuchar,
  bProportion: cuchar,
  bContrast: cuchar,
  bStrokeVariation: cuchar,
  bArmStyle: cuchar,
  bLetterform: cuchar,
  bMidline: cuchar,
  bXHeight: cuchar
}
global PANOSE: type = @tagPANOSE
global LPPANOSE: type = @*tagPANOSE
global tagEXTLOGFONTA: type <cimport,nodecl,ctypedef> = @record{
  elfLogFont: LOGFONTA,
  elfFullName: [64]cuchar,
  elfStyle: [32]cuchar,
  elfVersion: culong,
  elfStyleSize: culong,
  elfMatch: culong,
  elfReserved: culong,
  elfVendorId: [4]cuchar,
  elfCulture: culong,
  elfPanose: PANOSE
}
global EXTLOGFONTA: type = @tagEXTLOGFONTA
global PEXTLOGFONTA: type = @*tagEXTLOGFONTA
global NPEXTLOGFONTA: type = @*tagEXTLOGFONTA
global LPEXTLOGFONTA: type = @*tagEXTLOGFONTA
global tagEXTLOGFONTW: type <cimport,nodecl,ctypedef> = @record{
  elfLogFont: LOGFONTW,
  elfFullName: [64]cwchar_t,
  elfStyle: [32]cwchar_t,
  elfVersion: culong,
  elfStyleSize: culong,
  elfMatch: culong,
  elfReserved: culong,
  elfVendorId: [4]cuchar,
  elfCulture: culong,
  elfPanose: PANOSE
}
global EXTLOGFONTW: type = @tagEXTLOGFONTW
global PEXTLOGFONTW: type = @*tagEXTLOGFONTW
global NPEXTLOGFONTW: type = @*tagEXTLOGFONTW
global LPEXTLOGFONTW: type = @*tagEXTLOGFONTW
global EXTLOGFONT: type = @tagEXTLOGFONTA
global PEXTLOGFONT: type = @*tagEXTLOGFONTA
global NPEXTLOGFONT: type = @*tagEXTLOGFONTA
global LPEXTLOGFONT: type = @*tagEXTLOGFONTA
global _devicemodeA: type <cimport,nodecl,ctypedef> = @record{
  dmDeviceName: [32]cuchar,
  dmSpecVersion: cushort,
  dmDriverVersion: cushort,
  dmSize: cushort,
  dmDriverExtra: cushort,
  dmFields: culong,
  __unnamed1: union{
    __unnamed1: record{
      dmOrientation: cshort,
      dmPaperSize: cshort,
      dmPaperLength: cshort,
      dmPaperWidth: cshort,
      dmScale: cshort,
      dmCopies: cshort,
      dmDefaultSource: cshort,
      dmPrintQuality: cshort
    },
    __unnamed2: record{
      dmPosition: POINTL,
      dmDisplayOrientation: culong,
      dmDisplayFixedOutput: culong
    }
  },
  dmColor: cshort,
  dmDuplex: cshort,
  dmYResolution: cshort,
  dmTTOption: cshort,
  dmCollate: cshort,
  dmFormName: [32]cuchar,
  dmLogPixels: cushort,
  dmBitsPerPel: culong,
  dmPelsWidth: culong,
  dmPelsHeight: culong,
  __unnamed2: union{
    dmDisplayFlags: culong,
    dmNup: culong
  },
  dmDisplayFrequency: culong,
  dmICMMethod: culong,
  dmICMIntent: culong,
  dmMediaType: culong,
  dmDitherType: culong,
  dmReserved1: culong,
  dmReserved2: culong,
  dmPanningWidth: culong,
  dmPanningHeight: culong
}
global DEVMODEA: type = @_devicemodeA
global PDEVMODEA: type = @*_devicemodeA
global NPDEVMODEA: type = @*_devicemodeA
global LPDEVMODEA: type = @*_devicemodeA
global _devicemodeW: type <cimport,nodecl,ctypedef> = @record{
  dmDeviceName: [32]cwchar_t,
  dmSpecVersion: cushort,
  dmDriverVersion: cushort,
  dmSize: cushort,
  dmDriverExtra: cushort,
  dmFields: culong,
  __unnamed1: union{
    __unnamed1: record{
      dmOrientation: cshort,
      dmPaperSize: cshort,
      dmPaperLength: cshort,
      dmPaperWidth: cshort,
      dmScale: cshort,
      dmCopies: cshort,
      dmDefaultSource: cshort,
      dmPrintQuality: cshort
    },
    __unnamed2: record{
      dmPosition: POINTL,
      dmDisplayOrientation: culong,
      dmDisplayFixedOutput: culong
    }
  },
  dmColor: cshort,
  dmDuplex: cshort,
  dmYResolution: cshort,
  dmTTOption: cshort,
  dmCollate: cshort,
  dmFormName: [32]cwchar_t,
  dmLogPixels: cushort,
  dmBitsPerPel: culong,
  dmPelsWidth: culong,
  dmPelsHeight: culong,
  __unnamed2: union{
    dmDisplayFlags: culong,
    dmNup: culong
  },
  dmDisplayFrequency: culong,
  dmICMMethod: culong,
  dmICMIntent: culong,
  dmMediaType: culong,
  dmDitherType: culong,
  dmReserved1: culong,
  dmReserved2: culong,
  dmPanningWidth: culong,
  dmPanningHeight: culong
}
global DEVMODEW: type = @_devicemodeW
global PDEVMODEW: type = @*_devicemodeW
global NPDEVMODEW: type = @*_devicemodeW
global LPDEVMODEW: type = @*_devicemodeW
global DEVMODE: type = @_devicemodeA
global PDEVMODE: type = @*_devicemodeA
global NPDEVMODE: type = @*_devicemodeA
global LPDEVMODE: type = @*_devicemodeA
global _DISPLAY_DEVICEA: type <cimport,nodecl,ctypedef> = @record{
  cb: culong,
  DeviceName: [32]cchar,
  DeviceString: [128]cchar,
  StateFlags: culong,
  DeviceID: [128]cchar,
  DeviceKey: [128]cchar
}
global DISPLAY_DEVICEA: type = @_DISPLAY_DEVICEA
global PDISPLAY_DEVICEA: type = @*_DISPLAY_DEVICEA
global LPDISPLAY_DEVICEA: type = @*_DISPLAY_DEVICEA
global _DISPLAY_DEVICEW: type <cimport,nodecl,ctypedef> = @record{
  cb: culong,
  DeviceName: [32]cwchar_t,
  DeviceString: [128]cwchar_t,
  StateFlags: culong,
  DeviceID: [128]cwchar_t,
  DeviceKey: [128]cwchar_t
}
global DISPLAY_DEVICEW: type = @_DISPLAY_DEVICEW
global PDISPLAY_DEVICEW: type = @*_DISPLAY_DEVICEW
global LPDISPLAY_DEVICEW: type = @*_DISPLAY_DEVICEW
global DISPLAY_DEVICE: type = @_DISPLAY_DEVICEA
global PDISPLAY_DEVICE: type = @*_DISPLAY_DEVICEA
global LPDISPLAY_DEVICE: type = @*_DISPLAY_DEVICEA
global _RGNDATAHEADER: type <cimport,nodecl,ctypedef> = @record{
  dwSize: culong,
  iType: culong,
  nCount: culong,
  nRgnSize: culong,
  rcBound: RECT
}
global RGNDATAHEADER: type = @_RGNDATAHEADER
global PRGNDATAHEADER: type = @*_RGNDATAHEADER
global _RGNDATA: type <cimport,nodecl,ctypedef> = @record{
  rdh: RGNDATAHEADER,
  Buffer: [1]cchar
}
global RGNDATA: type = @_RGNDATA
global PRGNDATA: type = @*_RGNDATA
global NPRGNDATA: type = @*_RGNDATA
global LPRGNDATA: type = @*_RGNDATA
global _ABC: type <cimport,nodecl,ctypedef> = @record{
  abcA: cint,
  abcB: cuint,
  abcC: cint
}
global ABC: type = @_ABC
global PABC: type = @*_ABC
global NPABC: type = @*_ABC
global LPABC: type = @*_ABC
global _ABCFLOAT: type <cimport,nodecl,ctypedef> = @record{
  abcfA: float32,
  abcfB: float32,
  abcfC: float32
}
global ABCFLOAT: type = @_ABCFLOAT
global PABCFLOAT: type = @*_ABCFLOAT
global NPABCFLOAT: type = @*_ABCFLOAT
global LPABCFLOAT: type = @*_ABCFLOAT
global _OUTLINETEXTMETRICA: type <cimport,nodecl,ctypedef> = @record{
  otmSize: cuint,
  otmTextMetrics: TEXTMETRICA,
  otmFiller: cuchar,
  otmPanoseNumber: PANOSE,
  otmfsSelection: cuint,
  otmfsType: cuint,
  otmsCharSlopeRise: cint,
  otmsCharSlopeRun: cint,
  otmItalicAngle: cint,
  otmEMSquare: cuint,
  otmAscent: cint,
  otmDescent: cint,
  otmLineGap: cuint,
  otmsCapEmHeight: cuint,
  otmsXHeight: cuint,
  otmrcFontBox: RECT,
  otmMacAscent: cint,
  otmMacDescent: cint,
  otmMacLineGap: cuint,
  otmusMinimumPPEM: cuint,
  otmptSubscriptSize: POINT,
  otmptSubscriptOffset: POINT,
  otmptSuperscriptSize: POINT,
  otmptSuperscriptOffset: POINT,
  otmsStrikeoutSize: cuint,
  otmsStrikeoutPosition: cint,
  otmsUnderscoreSize: cint,
  otmsUnderscorePosition: cint,
  otmpFamilyName: PSTR,
  otmpFaceName: PSTR,
  otmpStyleName: PSTR,
  otmpFullName: PSTR
}
global OUTLINETEXTMETRICA: type = @_OUTLINETEXTMETRICA
global POUTLINETEXTMETRICA: type = @*_OUTLINETEXTMETRICA
global NPOUTLINETEXTMETRICA: type = @*_OUTLINETEXTMETRICA
global LPOUTLINETEXTMETRICA: type = @*_OUTLINETEXTMETRICA
global _OUTLINETEXTMETRICW: type <cimport,nodecl,ctypedef> = @record{
  otmSize: cuint,
  otmTextMetrics: TEXTMETRICW,
  otmFiller: cuchar,
  otmPanoseNumber: PANOSE,
  otmfsSelection: cuint,
  otmfsType: cuint,
  otmsCharSlopeRise: cint,
  otmsCharSlopeRun: cint,
  otmItalicAngle: cint,
  otmEMSquare: cuint,
  otmAscent: cint,
  otmDescent: cint,
  otmLineGap: cuint,
  otmsCapEmHeight: cuint,
  otmsXHeight: cuint,
  otmrcFontBox: RECT,
  otmMacAscent: cint,
  otmMacDescent: cint,
  otmMacLineGap: cuint,
  otmusMinimumPPEM: cuint,
  otmptSubscriptSize: POINT,
  otmptSubscriptOffset: POINT,
  otmptSuperscriptSize: POINT,
  otmptSuperscriptOffset: POINT,
  otmsStrikeoutSize: cuint,
  otmsStrikeoutPosition: cint,
  otmsUnderscoreSize: cint,
  otmsUnderscorePosition: cint,
  otmpFamilyName: PSTR,
  otmpFaceName: PSTR,
  otmpStyleName: PSTR,
  otmpFullName: PSTR
}
global OUTLINETEXTMETRICW: type = @_OUTLINETEXTMETRICW
global POUTLINETEXTMETRICW: type = @*_OUTLINETEXTMETRICW
global NPOUTLINETEXTMETRICW: type = @*_OUTLINETEXTMETRICW
global LPOUTLINETEXTMETRICW: type = @*_OUTLINETEXTMETRICW
global OUTLINETEXTMETRIC: type = @_OUTLINETEXTMETRICA
global POUTLINETEXTMETRIC: type = @*_OUTLINETEXTMETRICA
global NPOUTLINETEXTMETRIC: type = @*_OUTLINETEXTMETRICA
global LPOUTLINETEXTMETRIC: type = @*_OUTLINETEXTMETRICA
global tagPOLYTEXTA: type <cimport,nodecl,ctypedef> = @record{
  x: cint,
  y: cint,
  n: cuint,
  lpstr: LPCSTR,
  uiFlags: cuint,
  rcl: RECT,
  pdx: *cint
}
global POLYTEXTA: type = @tagPOLYTEXTA
global PPOLYTEXTA: type = @*tagPOLYTEXTA
global NPPOLYTEXTA: type = @*tagPOLYTEXTA
global LPPOLYTEXTA: type = @*tagPOLYTEXTA
global tagPOLYTEXTW: type <cimport,nodecl,ctypedef> = @record{
  x: cint,
  y: cint,
  n: cuint,
  lpstr: LPCWSTR,
  uiFlags: cuint,
  rcl: RECT,
  pdx: *cint
}
global POLYTEXTW: type = @tagPOLYTEXTW
global PPOLYTEXTW: type = @*tagPOLYTEXTW
global NPPOLYTEXTW: type = @*tagPOLYTEXTW
global LPPOLYTEXTW: type = @*tagPOLYTEXTW
global POLYTEXT: type = @tagPOLYTEXTA
global PPOLYTEXT: type = @*tagPOLYTEXTA
global NPPOLYTEXT: type = @*tagPOLYTEXTA
global LPPOLYTEXT: type = @*tagPOLYTEXTA
global _FIXED: type <cimport,nodecl,ctypedef> = @record{
  fract: cushort,
  value: cshort
}
global FIXED: type = @_FIXED
global _MAT2: type <cimport,nodecl,ctypedef> = @record{
  eM11: FIXED,
  eM12: FIXED,
  eM21: FIXED,
  eM22: FIXED
}
global MAT2: type = @_MAT2
global LPMAT2: type = @*_MAT2
global _GLYPHMETRICS: type <cimport,nodecl,ctypedef> = @record{
  gmBlackBoxX: cuint,
  gmBlackBoxY: cuint,
  gmptGlyphOrigin: POINT,
  gmCellIncX: cshort,
  gmCellIncY: cshort
}
global GLYPHMETRICS: type = @_GLYPHMETRICS
global LPGLYPHMETRICS: type = @*_GLYPHMETRICS
global tagPOINTFX: type <cimport,nodecl,ctypedef> = @record{
  x: FIXED,
  y: FIXED
}
global POINTFX: type = @tagPOINTFX
global LPPOINTFX: type = @*tagPOINTFX
global tagTTPOLYCURVE: type <cimport,nodecl,ctypedef> = @record{
  wType: cushort,
  cpfx: cushort,
  apfx: [1]POINTFX
}
global TTPOLYCURVE: type = @tagTTPOLYCURVE
global LPTTPOLYCURVE: type = @*tagTTPOLYCURVE
global tagTTPOLYGONHEADER: type <cimport,nodecl,ctypedef> = @record{
  cb: culong,
  dwType: culong,
  pfxStart: POINTFX
}
global TTPOLYGONHEADER: type = @tagTTPOLYGONHEADER
global LPTTPOLYGONHEADER: type = @*tagTTPOLYGONHEADER
global tagGCP_RESULTSA: type <cimport,nodecl,ctypedef> = @record{
  lStructSize: culong,
  lpOutString: LPSTR,
  lpOrder: *cuint,
  lpDx: *cint,
  lpCaretPos: *cint,
  lpClass: LPSTR,
  lpGlyphs: LPWSTR,
  nGlyphs: cuint,
  nMaxFit: cint
}
global GCP_RESULTSA: type = @tagGCP_RESULTSA
global LPGCP_RESULTSA: type = @*tagGCP_RESULTSA
global tagGCP_RESULTSW: type <cimport,nodecl,ctypedef> = @record{
  lStructSize: culong,
  lpOutString: LPWSTR,
  lpOrder: *cuint,
  lpDx: *cint,
  lpCaretPos: *cint,
  lpClass: LPSTR,
  lpGlyphs: LPWSTR,
  nGlyphs: cuint,
  nMaxFit: cint
}
global GCP_RESULTSW: type = @tagGCP_RESULTSW
global LPGCP_RESULTSW: type = @*tagGCP_RESULTSW
global GCP_RESULTS: type = @tagGCP_RESULTSA
global LPGCP_RESULTS: type = @*tagGCP_RESULTSA
global _RASTERIZER_STATUS: type <cimport,nodecl,ctypedef> = @record{
  nSize: cshort,
  wFlags: cshort,
  nLanguageID: cshort
}
global RASTERIZER_STATUS: type = @_RASTERIZER_STATUS
global LPRASTERIZER_STATUS: type = @*_RASTERIZER_STATUS
global tagPIXELFORMATDESCRIPTOR: type <cimport,nodecl,ctypedef> = @record{
  nSize: cushort,
  nVersion: cushort,
  dwFlags: culong,
  iPixelType: cuchar,
  cColorBits: cuchar,
  cRedBits: cuchar,
  cRedShift: cuchar,
  cGreenBits: cuchar,
  cGreenShift: cuchar,
  cBlueBits: cuchar,
  cBlueShift: cuchar,
  cAlphaBits: cuchar,
  cAlphaShift: cuchar,
  cAccumBits: cuchar,
  cAccumRedBits: cuchar,
  cAccumGreenBits: cuchar,
  cAccumBlueBits: cuchar,
  cAccumAlphaBits: cuchar,
  cDepthBits: cuchar,
  cStencilBits: cuchar,
  cAuxBuffers: cuchar,
  iLayerType: cuchar,
  bReserved: cuchar,
  dwLayerMask: culong,
  dwVisibleMask: culong,
  dwDamageMask: culong
}
global PIXELFORMATDESCRIPTOR: type = @tagPIXELFORMATDESCRIPTOR
global PPIXELFORMATDESCRIPTOR: type = @*tagPIXELFORMATDESCRIPTOR
global LPPIXELFORMATDESCRIPTOR: type = @*tagPIXELFORMATDESCRIPTOR
global OLDFONTENUMPROCA: type <cimport,nodecl> = @function(*LOGFONTA, *TEXTMETRICA, culong, clonglong): cint
global OLDFONTENUMPROCW: type <cimport,nodecl> = @function(*LOGFONTW, *TEXTMETRICW, culong, clonglong): cint
global FONTENUMPROCA: type <cimport,nodecl> = @function(*LOGFONTA, *TEXTMETRICA, culong, clonglong): cint
global FONTENUMPROCW: type <cimport,nodecl> = @function(*LOGFONTW, *TEXTMETRICW, culong, clonglong): cint
global FONTENUMPROC: type <cimport,nodecl> = @function(*LOGFONTA, *TEXTMETRICA, culong, clonglong): cint
global GOBJENUMPROC: type <cimport,nodecl> = @function(LPVOID, clonglong): cint
global LINEDDAPROC: type <cimport,nodecl> = @function(cint, cint, clonglong): void
global function AddFontResourceA(a1: LPCSTR): cint <cimport,nodecl> end
global function AddFontResourceW(a1: LPCWSTR): cint <cimport,nodecl> end
global function AnimatePalette(hPal: HPALETTE, iStartIndex: cuint, cEntries: cuint, ppe: *PALETTEENTRY): cint <cimport,nodecl> end
global function Arc(hdc: HDC, x1: cint, y1: cint, x2: cint, y2: cint, x3: cint, y3: cint, x4: cint, y4: cint): cint <cimport,nodecl> end
global function BitBlt(hdc: HDC, x: cint, y: cint, cx: cint, cy: cint, hdcSrc: HDC, x1: cint, y1: cint, rop: culong): cint <cimport,nodecl> end
global function CancelDC(hdc: HDC): cint <cimport,nodecl> end
global function Chord(hdc: HDC, x1: cint, y1: cint, x2: cint, y2: cint, x3: cint, y3: cint, x4: cint, y4: cint): cint <cimport,nodecl> end
global function ChoosePixelFormat(hdc: HDC, ppfd: *PIXELFORMATDESCRIPTOR): cint <cimport,nodecl> end
global function CloseMetaFile(hdc: HDC): HMETAFILE <cimport,nodecl> end
global function CombineRgn(hrgnDst: HRGN, hrgnSrc1: HRGN, hrgnSrc2: HRGN, iMode: cint): cint <cimport,nodecl> end
global function CopyMetaFileA(a1: HMETAFILE, a2: LPCSTR): HMETAFILE <cimport,nodecl> end
global function CopyMetaFileW(a1: HMETAFILE, a2: LPCWSTR): HMETAFILE <cimport,nodecl> end
global function CreateBitmap(nWidth: cint, nHeight: cint, nPlanes: cuint, nBitCount: cuint, lpBits: pointer): HBITMAP <cimport,nodecl> end
global function CreateBitmapIndirect(pbm: *BITMAP): HBITMAP <cimport,nodecl> end
global function CreateBrushIndirect(plbrush: *LOGBRUSH): HBRUSH <cimport,nodecl> end
global function CreateCompatibleBitmap(hdc: HDC, cx: cint, cy: cint): HBITMAP <cimport,nodecl> end
global function CreateDiscardableBitmap(hdc: HDC, cx: cint, cy: cint): HBITMAP <cimport,nodecl> end
global function CreateCompatibleDC(hdc: HDC): HDC <cimport,nodecl> end
global function CreateDCA(pwszDriver: LPCSTR, pwszDevice: LPCSTR, pszPort: LPCSTR, pdm: *DEVMODEA): HDC <cimport,nodecl> end
global function CreateDCW(pwszDriver: LPCWSTR, pwszDevice: LPCWSTR, pszPort: LPCWSTR, pdm: *DEVMODEW): HDC <cimport,nodecl> end
global function CreateDIBitmap(hdc: HDC, pbmih: *BITMAPINFOHEADER, flInit: culong, pjBits: pointer, pbmi: *BITMAPINFO, iUsage: cuint): HBITMAP <cimport,nodecl> end
global function CreateDIBPatternBrush(h: HGLOBAL, iUsage: cuint): HBRUSH <cimport,nodecl> end
global function CreateDIBPatternBrushPt(lpPackedDIB: pointer, iUsage: cuint): HBRUSH <cimport,nodecl> end
global function CreateEllipticRgn(x1: cint, y1: cint, x2: cint, y2: cint): HRGN <cimport,nodecl> end
global function CreateEllipticRgnIndirect(lprect: *RECT): HRGN <cimport,nodecl> end
global function CreateFontIndirectA(lplf: *LOGFONTA): HFONT <cimport,nodecl> end
global function CreateFontIndirectW(lplf: *LOGFONTW): HFONT <cimport,nodecl> end
global function CreateFontA(cHeight: cint, cWidth: cint, cEscapement: cint, cOrientation: cint, cWeight: cint, bItalic: culong, bUnderline: culong, bStrikeOut: culong, iCharSet: culong, iOutPrecision: culong, iClipPrecision: culong, iQuality: culong, iPitchAndFamily: culong, pszFaceName: LPCSTR): HFONT <cimport,nodecl> end
global function CreateFontW(cHeight: cint, cWidth: cint, cEscapement: cint, cOrientation: cint, cWeight: cint, bItalic: culong, bUnderline: culong, bStrikeOut: culong, iCharSet: culong, iOutPrecision: culong, iClipPrecision: culong, iQuality: culong, iPitchAndFamily: culong, pszFaceName: LPCWSTR): HFONT <cimport,nodecl> end
global function CreateHatchBrush(iHatch: cint, color: culong): HBRUSH <cimport,nodecl> end
global function CreateICA(pszDriver: LPCSTR, pszDevice: LPCSTR, pszPort: LPCSTR, pdm: *DEVMODEA): HDC <cimport,nodecl> end
global function CreateICW(pszDriver: LPCWSTR, pszDevice: LPCWSTR, pszPort: LPCWSTR, pdm: *DEVMODEW): HDC <cimport,nodecl> end
global function CreateMetaFileA(pszFile: LPCSTR): HDC <cimport,nodecl> end
global function CreateMetaFileW(pszFile: LPCWSTR): HDC <cimport,nodecl> end
global function CreatePalette(plpal: *LOGPALETTE): HPALETTE <cimport,nodecl> end
global function CreatePen(iStyle: cint, cWidth: cint, color: culong): HPEN <cimport,nodecl> end
global function CreatePenIndirect(plpen: *LOGPEN): HPEN <cimport,nodecl> end
global function CreatePolyPolygonRgn(pptl: *POINT, pc: *cint, cPoly: cint, iMode: cint): HRGN <cimport,nodecl> end
global function CreatePatternBrush(hbm: HBITMAP): HBRUSH <cimport,nodecl> end
global function CreateRectRgn(x1: cint, y1: cint, x2: cint, y2: cint): HRGN <cimport,nodecl> end
global function CreateRectRgnIndirect(lprect: *RECT): HRGN <cimport,nodecl> end
global function CreateRoundRectRgn(x1: cint, y1: cint, x2: cint, y2: cint, w: cint, h: cint): HRGN <cimport,nodecl> end
global function CreateScalableFontResourceA(fdwHidden: culong, lpszFont: LPCSTR, lpszFile: LPCSTR, lpszPath: LPCSTR): cint <cimport,nodecl> end
global function CreateScalableFontResourceW(fdwHidden: culong, lpszFont: LPCWSTR, lpszFile: LPCWSTR, lpszPath: LPCWSTR): cint <cimport,nodecl> end
global function CreateSolidBrush(color: culong): HBRUSH <cimport,nodecl> end
global function DeleteDC(hdc: HDC): cint <cimport,nodecl> end
global function DeleteMetaFile(hmf: HMETAFILE): cint <cimport,nodecl> end
global function DeleteObject(ho: HGDIOBJ): cint <cimport,nodecl> end
global function DescribePixelFormat(hdc: HDC, iPixelFormat: cint, nBytes: cuint, ppfd: LPPIXELFORMATDESCRIPTOR): cint <cimport,nodecl> end
global LPFNDEVMODE: type <cimport,nodecl> = @function(HWND, HMODULE, LPDEVMODE, LPSTR, LPSTR, LPDEVMODE, LPSTR, cuint): cuint
global LPFNDEVCAPS: type <cimport,nodecl> = @function(LPSTR, LPSTR, cuint, LPSTR, LPDEVMODE): culong
global function DeviceCapabilitiesA(pDevice: LPCSTR, pPort: LPCSTR, fwCapability: cushort, pOutput: LPSTR, pDevMode: *DEVMODEA): cint <cimport,nodecl> end
global function DeviceCapabilitiesW(pDevice: LPCWSTR, pPort: LPCWSTR, fwCapability: cushort, pOutput: LPWSTR, pDevMode: *DEVMODEW): cint <cimport,nodecl> end
global function DrawEscape(hdc: HDC, iEscape: cint, cjIn: cint, lpIn: LPCSTR): cint <cimport,nodecl> end
global function Ellipse(hdc: HDC, left: cint, top: cint, right: cint, bottom: cint): cint <cimport,nodecl> end
global function EnumFontFamiliesExA(hdc: HDC, lpLogfont: LPLOGFONTA, lpProc: FONTENUMPROCA, lParam: clonglong, dwFlags: culong): cint <cimport,nodecl> end
global function EnumFontFamiliesExW(hdc: HDC, lpLogfont: LPLOGFONTW, lpProc: FONTENUMPROCW, lParam: clonglong, dwFlags: culong): cint <cimport,nodecl> end
global function EnumFontFamiliesA(hdc: HDC, lpLogfont: LPCSTR, lpProc: FONTENUMPROCA, lParam: clonglong): cint <cimport,nodecl> end
global function EnumFontFamiliesW(hdc: HDC, lpLogfont: LPCWSTR, lpProc: FONTENUMPROCW, lParam: clonglong): cint <cimport,nodecl> end
global function EnumFontsA(hdc: HDC, lpLogfont: LPCSTR, lpProc: FONTENUMPROCA, lParam: clonglong): cint <cimport,nodecl> end
global function EnumFontsW(hdc: HDC, lpLogfont: LPCWSTR, lpProc: FONTENUMPROCW, lParam: clonglong): cint <cimport,nodecl> end
global function EnumObjects(hdc: HDC, nType: cint, lpFunc: GOBJENUMPROC, lParam: clonglong): cint <cimport,nodecl> end
global function EqualRgn(hrgn1: HRGN, hrgn2: HRGN): cint <cimport,nodecl> end
global function Escape(hdc: HDC, iEscape: cint, cjIn: cint, pvIn: LPCSTR, pvOut: LPVOID): cint <cimport,nodecl> end
global function ExtEscape(hdc: HDC, iEscape: cint, cjInput: cint, lpInData: LPCSTR, cjOutput: cint, lpOutData: LPSTR): cint <cimport,nodecl> end
global function ExcludeClipRect(hdc: HDC, left: cint, top: cint, right: cint, bottom: cint): cint <cimport,nodecl> end
global function ExtCreateRegion(lpx: *XFORM, nCount: culong, lpData: *RGNDATA): HRGN <cimport,nodecl> end
global function ExtFloodFill(hdc: HDC, x: cint, y: cint, color: culong, type: cuint): cint <cimport,nodecl> end
global function FillRgn(hdc: HDC, hrgn: HRGN, hbr: HBRUSH): cint <cimport,nodecl> end
global function FloodFill(hdc: HDC, x: cint, y: cint, color: culong): cint <cimport,nodecl> end
global function FrameRgn(hdc: HDC, hrgn: HRGN, hbr: HBRUSH, w: cint, h: cint): cint <cimport,nodecl> end
global function GetROP2(hdc: HDC): cint <cimport,nodecl> end
global function GetAspectRatioFilterEx(hdc: HDC, lpsize: LPSIZE): cint <cimport,nodecl> end
global function GetBkColor(hdc: HDC): culong <cimport,nodecl> end
global function GetDCBrushColor(hdc: HDC): culong <cimport,nodecl> end
global function GetDCPenColor(hdc: HDC): culong <cimport,nodecl> end
global function GetBkMode(hdc: HDC): cint <cimport,nodecl> end
global function GetBitmapBits(hbit: HBITMAP, cb: clong, lpvBits: LPVOID): clong <cimport,nodecl> end
global function GetBitmapDimensionEx(hbit: HBITMAP, lpsize: LPSIZE): cint <cimport,nodecl> end
global function GetBoundsRect(hdc: HDC, lprect: LPRECT, flags: cuint): cuint <cimport,nodecl> end
global function GetBrushOrgEx(hdc: HDC, lppt: LPPOINT): cint <cimport,nodecl> end
global function GetCharWidthA(hdc: HDC, iFirst: cuint, iLast: cuint, lpBuffer: LPINT): cint <cimport,nodecl> end
global function GetCharWidthW(hdc: HDC, iFirst: cuint, iLast: cuint, lpBuffer: LPINT): cint <cimport,nodecl> end
global function GetCharWidth32A(hdc: HDC, iFirst: cuint, iLast: cuint, lpBuffer: LPINT): cint <cimport,nodecl> end
global function GetCharWidth32W(hdc: HDC, iFirst: cuint, iLast: cuint, lpBuffer: LPINT): cint <cimport,nodecl> end
global function GetCharWidthFloatA(hdc: HDC, iFirst: cuint, iLast: cuint, lpBuffer: PFLOAT): cint <cimport,nodecl> end
global function GetCharWidthFloatW(hdc: HDC, iFirst: cuint, iLast: cuint, lpBuffer: PFLOAT): cint <cimport,nodecl> end
global function GetCharABCWidthsA(hdc: HDC, wFirst: cuint, wLast: cuint, lpABC: LPABC): cint <cimport,nodecl> end
global function GetCharABCWidthsW(hdc: HDC, wFirst: cuint, wLast: cuint, lpABC: LPABC): cint <cimport,nodecl> end
global function GetCharABCWidthsFloatA(hdc: HDC, iFirst: cuint, iLast: cuint, lpABC: LPABCFLOAT): cint <cimport,nodecl> end
global function GetCharABCWidthsFloatW(hdc: HDC, iFirst: cuint, iLast: cuint, lpABC: LPABCFLOAT): cint <cimport,nodecl> end
global function GetClipBox(hdc: HDC, lprect: LPRECT): cint <cimport,nodecl> end
global function GetClipRgn(hdc: HDC, hrgn: HRGN): cint <cimport,nodecl> end
global function GetMetaRgn(hdc: HDC, hrgn: HRGN): cint <cimport,nodecl> end
global function GetCurrentObject(hdc: HDC, type: cuint): HGDIOBJ <cimport,nodecl> end
global function GetCurrentPositionEx(hdc: HDC, lppt: LPPOINT): cint <cimport,nodecl> end
global function GetDeviceCaps(hdc: HDC, index: cint): cint <cimport,nodecl> end
global function GetDIBits(hdc: HDC, hbm: HBITMAP, start: cuint, cLines: cuint, lpvBits: LPVOID, lpbmi: LPBITMAPINFO, usage: cuint): cint <cimport,nodecl> end
global function GetFontData(hdc: HDC, dwTable: culong, dwOffset: culong, pvBuffer: PVOID, cjBuffer: culong): culong <cimport,nodecl> end
global function GetGlyphOutlineA(hdc: HDC, uChar: cuint, fuFormat: cuint, lpgm: LPGLYPHMETRICS, cjBuffer: culong, pvBuffer: LPVOID, lpmat2: *MAT2): culong <cimport,nodecl> end
global function GetGlyphOutlineW(hdc: HDC, uChar: cuint, fuFormat: cuint, lpgm: LPGLYPHMETRICS, cjBuffer: culong, pvBuffer: LPVOID, lpmat2: *MAT2): culong <cimport,nodecl> end
global function GetGraphicsMode(hdc: HDC): cint <cimport,nodecl> end
global function GetMapMode(hdc: HDC): cint <cimport,nodecl> end
global function GetMetaFileBitsEx(hMF: HMETAFILE, cbBuffer: cuint, lpData: LPVOID): cuint <cimport,nodecl> end
global function GetMetaFileA(lpName: LPCSTR): HMETAFILE <cimport,nodecl> end
global function GetMetaFileW(lpName: LPCWSTR): HMETAFILE <cimport,nodecl> end
global function GetNearestColor(hdc: HDC, color: culong): culong <cimport,nodecl> end
global function GetNearestPaletteIndex(h: HPALETTE, color: culong): cuint <cimport,nodecl> end
global function GetObjectType(h: HGDIOBJ): culong <cimport,nodecl> end
global function GetOutlineTextMetricsA(hdc: HDC, cjCopy: cuint, potm: LPOUTLINETEXTMETRICA): cuint <cimport,nodecl> end
global function GetOutlineTextMetricsW(hdc: HDC, cjCopy: cuint, potm: LPOUTLINETEXTMETRICW): cuint <cimport,nodecl> end
global function GetPaletteEntries(hpal: HPALETTE, iStart: cuint, cEntries: cuint, pPalEntries: LPPALETTEENTRY): cuint <cimport,nodecl> end
global function GetPixel(hdc: HDC, x: cint, y: cint): culong <cimport,nodecl> end
global function GetPixelFormat(hdc: HDC): cint <cimport,nodecl> end
global function GetPolyFillMode(hdc: HDC): cint <cimport,nodecl> end
global function GetRasterizerCaps(lpraststat: LPRASTERIZER_STATUS, cjBytes: cuint): cint <cimport,nodecl> end
global function GetRandomRgn(hdc: HDC, hrgn: HRGN, i: cint): cint <cimport,nodecl> end
global function GetRegionData(hrgn: HRGN, nCount: culong, lpRgnData: LPRGNDATA): culong <cimport,nodecl> end
global function GetRgnBox(hrgn: HRGN, lprc: LPRECT): cint <cimport,nodecl> end
global function GetStockObject(i: cint): HGDIOBJ <cimport,nodecl> end
global function GetStretchBltMode(hdc: HDC): cint <cimport,nodecl> end
global function GetSystemPaletteEntries(hdc: HDC, iStart: cuint, cEntries: cuint, pPalEntries: LPPALETTEENTRY): cuint <cimport,nodecl> end
global function GetSystemPaletteUse(hdc: HDC): cuint <cimport,nodecl> end
global function GetTextCharacterExtra(hdc: HDC): cint <cimport,nodecl> end
global function GetTextAlign(hdc: HDC): cuint <cimport,nodecl> end
global function GetTextColor(hdc: HDC): culong <cimport,nodecl> end
global function GetTextExtentPointA(hdc: HDC, lpString: LPCSTR, c: cint, lpsz: LPSIZE): cint <cimport,nodecl> end
global function GetTextExtentPointW(hdc: HDC, lpString: LPCWSTR, c: cint, lpsz: LPSIZE): cint <cimport,nodecl> end
global function GetTextExtentPoint32A(hdc: HDC, lpString: LPCSTR, c: cint, psizl: LPSIZE): cint <cimport,nodecl> end
global function GetTextExtentPoint32W(hdc: HDC, lpString: LPCWSTR, c: cint, psizl: LPSIZE): cint <cimport,nodecl> end
global function GetTextExtentExPointA(hdc: HDC, lpszString: LPCSTR, cchString: cint, nMaxExtent: cint, lpnFit: LPINT, lpnDx: LPINT, lpSize: LPSIZE): cint <cimport,nodecl> end
global function GetTextExtentExPointW(hdc: HDC, lpszString: LPCWSTR, cchString: cint, nMaxExtent: cint, lpnFit: LPINT, lpnDx: LPINT, lpSize: LPSIZE): cint <cimport,nodecl> end
global function GetTextCharset(hdc: HDC): cint <cimport,nodecl> end
global function GetTextCharsetInfo(hdc: HDC, lpSig: LPFONTSIGNATURE, dwFlags: culong): cint <cimport,nodecl> end
global function TranslateCharsetInfo(lpSrc: *culong, lpCs: LPCHARSETINFO, dwFlags: culong): cint <cimport,nodecl> end
global function GetFontLanguageInfo(hdc: HDC): culong <cimport,nodecl> end
global function GetCharacterPlacementA(hdc: HDC, lpString: LPCSTR, nCount: cint, nMexExtent: cint, lpResults: LPGCP_RESULTSA, dwFlags: culong): culong <cimport,nodecl> end
global function GetCharacterPlacementW(hdc: HDC, lpString: LPCWSTR, nCount: cint, nMexExtent: cint, lpResults: LPGCP_RESULTSW, dwFlags: culong): culong <cimport,nodecl> end
global tagWCRANGE: type <cimport,nodecl,ctypedef> = @record{
  wcLow: cwchar_t,
  cGlyphs: cushort
}
global WCRANGE: type = @tagWCRANGE
global PWCRANGE: type = @*tagWCRANGE
global LPWCRANGE: type = @*tagWCRANGE
global tagGLYPHSET: type <cimport,nodecl,ctypedef> = @record{
  cbThis: culong,
  flAccel: culong,
  cGlyphsSupported: culong,
  cRanges: culong,
  ranges: [1]WCRANGE
}
global GLYPHSET: type = @tagGLYPHSET
global PGLYPHSET: type = @*tagGLYPHSET
global LPGLYPHSET: type = @*tagGLYPHSET
global function GetFontUnicodeRanges(hdc: HDC, lpgs: LPGLYPHSET): culong <cimport,nodecl> end
global function GetGlyphIndicesA(hdc: HDC, lpstr: LPCSTR, c: cint, pgi: LPWORD, fl: culong): culong <cimport,nodecl> end
global function GetGlyphIndicesW(hdc: HDC, lpstr: LPCWSTR, c: cint, pgi: LPWORD, fl: culong): culong <cimport,nodecl> end
global function GetTextExtentPointI(hdc: HDC, pgiIn: LPWORD, cgi: cint, psize: LPSIZE): cint <cimport,nodecl> end
global function GetTextExtentExPointI(hdc: HDC, lpwszString: LPWORD, cwchString: cint, nMaxExtent: cint, lpnFit: LPINT, lpnDx: LPINT, lpSize: LPSIZE): cint <cimport,nodecl> end
global function GetCharWidthI(hdc: HDC, giFirst: cuint, cgi: cuint, pgi: LPWORD, piWidths: LPINT): cint <cimport,nodecl> end
global function GetCharABCWidthsI(hdc: HDC, giFirst: cuint, cgi: cuint, pgi: LPWORD, pabc: LPABC): cint <cimport,nodecl> end
global tagDESIGNVECTOR: type <cimport,nodecl,ctypedef> = @record{
  dvReserved: culong,
  dvNumAxes: culong,
  dvValues: [16]clong
}
global DESIGNVECTOR: type = @tagDESIGNVECTOR
global PDESIGNVECTOR: type = @*tagDESIGNVECTOR
global LPDESIGNVECTOR: type = @*tagDESIGNVECTOR
global function AddFontResourceExA(name: LPCSTR, fl: culong, res: PVOID): cint <cimport,nodecl> end
global function AddFontResourceExW(name: LPCWSTR, fl: culong, res: PVOID): cint <cimport,nodecl> end
global function RemoveFontResourceExA(name: LPCSTR, fl: culong, pdv: PVOID): cint <cimport,nodecl> end
global function RemoveFontResourceExW(name: LPCWSTR, fl: culong, pdv: PVOID): cint <cimport,nodecl> end
global function AddFontMemResourceEx(pFileView: PVOID, cjSize: culong, pvResrved: PVOID, pNumFonts: *culong): HANDLE <cimport,nodecl> end
global function RemoveFontMemResourceEx(h: HANDLE): cint <cimport,nodecl> end
global tagAXISINFOA: type <cimport,nodecl,ctypedef> = @record{
  axMinValue: clong,
  axMaxValue: clong,
  axAxisName: [16]cuchar
}
global AXISINFOA: type = @tagAXISINFOA
global PAXISINFOA: type = @*tagAXISINFOA
global LPAXISINFOA: type = @*tagAXISINFOA
global tagAXISINFOW: type <cimport,nodecl,ctypedef> = @record{
  axMinValue: clong,
  axMaxValue: clong,
  axAxisName: [16]cwchar_t
}
global AXISINFOW: type = @tagAXISINFOW
global PAXISINFOW: type = @*tagAXISINFOW
global LPAXISINFOW: type = @*tagAXISINFOW
global AXISINFO: type = @tagAXISINFOA
global PAXISINFO: type = @*tagAXISINFOA
global LPAXISINFO: type = @*tagAXISINFOA
global tagAXESLISTA: type <cimport,nodecl,ctypedef> = @record{
  axlReserved: culong,
  axlNumAxes: culong,
  axlAxisInfo: [16]AXISINFOA
}
global AXESLISTA: type = @tagAXESLISTA
global PAXESLISTA: type = @*tagAXESLISTA
global LPAXESLISTA: type = @*tagAXESLISTA
global tagAXESLISTW: type <cimport,nodecl,ctypedef> = @record{
  axlReserved: culong,
  axlNumAxes: culong,
  axlAxisInfo: [16]AXISINFOW
}
global AXESLISTW: type = @tagAXESLISTW
global PAXESLISTW: type = @*tagAXESLISTW
global LPAXESLISTW: type = @*tagAXESLISTW
global AXESLIST: type = @tagAXESLISTA
global PAXESLIST: type = @*tagAXESLISTA
global LPAXESLIST: type = @*tagAXESLISTA
global tagENUMLOGFONTEXDVA: type <cimport,nodecl,ctypedef> = @record{
  elfEnumLogfontEx: ENUMLOGFONTEXA,
  elfDesignVector: DESIGNVECTOR
}
global ENUMLOGFONTEXDVA: type = @tagENUMLOGFONTEXDVA
global PENUMLOGFONTEXDVA: type = @*tagENUMLOGFONTEXDVA
global LPENUMLOGFONTEXDVA: type = @*tagENUMLOGFONTEXDVA
global tagENUMLOGFONTEXDVW: type <cimport,nodecl,ctypedef> = @record{
  elfEnumLogfontEx: ENUMLOGFONTEXW,
  elfDesignVector: DESIGNVECTOR
}
global ENUMLOGFONTEXDVW: type = @tagENUMLOGFONTEXDVW
global PENUMLOGFONTEXDVW: type = @*tagENUMLOGFONTEXDVW
global LPENUMLOGFONTEXDVW: type = @*tagENUMLOGFONTEXDVW
global ENUMLOGFONTEXDV: type = @tagENUMLOGFONTEXDVA
global PENUMLOGFONTEXDV: type = @*tagENUMLOGFONTEXDVA
global LPENUMLOGFONTEXDV: type = @*tagENUMLOGFONTEXDVA
global function CreateFontIndirectExA(a1: *ENUMLOGFONTEXDVA): HFONT <cimport,nodecl> end
global function CreateFontIndirectExW(a1: *ENUMLOGFONTEXDVW): HFONT <cimport,nodecl> end
global tagENUMTEXTMETRICA: type <cimport,nodecl,ctypedef> = @record{
  etmNewTextMetricEx: NEWTEXTMETRICEXA,
  etmAxesList: AXESLISTA
}
global ENUMTEXTMETRICA: type = @tagENUMTEXTMETRICA
global PENUMTEXTMETRICA: type = @*tagENUMTEXTMETRICA
global LPENUMTEXTMETRICA: type = @*tagENUMTEXTMETRICA
global tagENUMTEXTMETRICW: type <cimport,nodecl,ctypedef> = @record{
  etmNewTextMetricEx: NEWTEXTMETRICEXW,
  etmAxesList: AXESLISTW
}
global ENUMTEXTMETRICW: type = @tagENUMTEXTMETRICW
global PENUMTEXTMETRICW: type = @*tagENUMTEXTMETRICW
global LPENUMTEXTMETRICW: type = @*tagENUMTEXTMETRICW
global ENUMTEXTMETRIC: type = @tagENUMTEXTMETRICA
global PENUMTEXTMETRIC: type = @*tagENUMTEXTMETRICA
global LPENUMTEXTMETRIC: type = @*tagENUMTEXTMETRICA
global function GetViewportExtEx(hdc: HDC, lpsize: LPSIZE): cint <cimport,nodecl> end
global function GetViewportOrgEx(hdc: HDC, lppoint: LPPOINT): cint <cimport,nodecl> end
global function GetWindowExtEx(hdc: HDC, lpsize: LPSIZE): cint <cimport,nodecl> end
global function GetWindowOrgEx(hdc: HDC, lppoint: LPPOINT): cint <cimport,nodecl> end
global function IntersectClipRect(hdc: HDC, left: cint, top: cint, right: cint, bottom: cint): cint <cimport,nodecl> end
global function InvertRgn(hdc: HDC, hrgn: HRGN): cint <cimport,nodecl> end
global function LineDDA(xStart: cint, yStart: cint, xEnd: cint, yEnd: cint, lpProc: LINEDDAPROC, data: clonglong): cint <cimport,nodecl> end
global function LineTo(hdc: HDC, x: cint, y: cint): cint <cimport,nodecl> end
global function MaskBlt(hdcDest: HDC, xDest: cint, yDest: cint, width: cint, height: cint, hdcSrc: HDC, xSrc: cint, ySrc: cint, hbmMask: HBITMAP, xMask: cint, yMask: cint, rop: culong): cint <cimport,nodecl> end
global function PlgBlt(hdcDest: HDC, lpPoint: *POINT, hdcSrc: HDC, xSrc: cint, ySrc: cint, width: cint, height: cint, hbmMask: HBITMAP, xMask: cint, yMask: cint): cint <cimport,nodecl> end
global function OffsetClipRgn(hdc: HDC, x: cint, y: cint): cint <cimport,nodecl> end
global function OffsetRgn(hrgn: HRGN, x: cint, y: cint): cint <cimport,nodecl> end
global function PatBlt(hdc: HDC, x: cint, y: cint, w: cint, h: cint, rop: culong): cint <cimport,nodecl> end
global function Pie(hdc: HDC, left: cint, top: cint, right: cint, bottom: cint, xr1: cint, yr1: cint, xr2: cint, yr2: cint): cint <cimport,nodecl> end
global function PlayMetaFile(hdc: HDC, hmf: HMETAFILE): cint <cimport,nodecl> end
global function PaintRgn(hdc: HDC, hrgn: HRGN): cint <cimport,nodecl> end
global function PolyPolygon(hdc: HDC, apt: *POINT, asz: *cint, csz: cint): cint <cimport,nodecl> end
global function PtInRegion(hrgn: HRGN, x: cint, y: cint): cint <cimport,nodecl> end
global function PtVisible(hdc: HDC, x: cint, y: cint): cint <cimport,nodecl> end
global function RectInRegion(hrgn: HRGN, lprect: *RECT): cint <cimport,nodecl> end
global function RectVisible(hdc: HDC, lprect: *RECT): cint <cimport,nodecl> end
global function Rectangle(hdc: HDC, left: cint, top: cint, right: cint, bottom: cint): cint <cimport,nodecl> end
global function RestoreDC(hdc: HDC, nSavedDC: cint): cint <cimport,nodecl> end
global function ResetDCA(hdc: HDC, lpdm: *DEVMODEA): HDC <cimport,nodecl> end
global function ResetDCW(hdc: HDC, lpdm: *DEVMODEW): HDC <cimport,nodecl> end
global function RealizePalette(hdc: HDC): cuint <cimport,nodecl> end
global function RemoveFontResourceA(lpFileName: LPCSTR): cint <cimport,nodecl> end
global function RemoveFontResourceW(lpFileName: LPCWSTR): cint <cimport,nodecl> end
global function RoundRect(hdc: HDC, left: cint, top: cint, right: cint, bottom: cint, width: cint, height: cint): cint <cimport,nodecl> end
global function ResizePalette(hpal: HPALETTE, n: cuint): cint <cimport,nodecl> end
global function SaveDC(hdc: HDC): cint <cimport,nodecl> end
global function SelectClipRgn(hdc: HDC, hrgn: HRGN): cint <cimport,nodecl> end
global function ExtSelectClipRgn(hdc: HDC, hrgn: HRGN, mode: cint): cint <cimport,nodecl> end
global function SetMetaRgn(hdc: HDC): cint <cimport,nodecl> end
global function SelectObject(hdc: HDC, h: HGDIOBJ): HGDIOBJ <cimport,nodecl> end
global function SelectPalette(hdc: HDC, hPal: HPALETTE, bForceBkgd: cint): HPALETTE <cimport,nodecl> end
global function SetBkColor(hdc: HDC, color: culong): culong <cimport,nodecl> end
global function SetDCBrushColor(hdc: HDC, color: culong): culong <cimport,nodecl> end
global function SetDCPenColor(hdc: HDC, color: culong): culong <cimport,nodecl> end
global function SetBkMode(hdc: HDC, mode: cint): cint <cimport,nodecl> end
global function SetBitmapBits(hbm: HBITMAP, cb: culong, pvBits: pointer): clong <cimport,nodecl> end
global function SetBoundsRect(hdc: HDC, lprect: *RECT, flags: cuint): cuint <cimport,nodecl> end
global function SetDIBits(hdc: HDC, hbm: HBITMAP, start: cuint, cLines: cuint, lpBits: pointer, lpbmi: *BITMAPINFO, ColorUse: cuint): cint <cimport,nodecl> end
global function SetDIBitsToDevice(hdc: HDC, xDest: cint, yDest: cint, w: culong, h: culong, xSrc: cint, ySrc: cint, StartScan: cuint, cLines: cuint, lpvBits: pointer, lpbmi: *BITMAPINFO, ColorUse: cuint): cint <cimport,nodecl> end
global function SetMapperFlags(hdc: HDC, flags: culong): culong <cimport,nodecl> end
global function SetGraphicsMode(hdc: HDC, iMode: cint): cint <cimport,nodecl> end
global function SetMapMode(hdc: HDC, iMode: cint): cint <cimport,nodecl> end
global function SetLayout(hdc: HDC, l: culong): culong <cimport,nodecl> end
global function GetLayout(hdc: HDC): culong <cimport,nodecl> end
global function SetMetaFileBitsEx(cbBuffer: cuint, lpData: *cuchar): HMETAFILE <cimport,nodecl> end
global function SetPaletteEntries(hpal: HPALETTE, iStart: cuint, cEntries: cuint, pPalEntries: *PALETTEENTRY): cuint <cimport,nodecl> end
global function SetPixel(hdc: HDC, x: cint, y: cint, color: culong): culong <cimport,nodecl> end
global function SetPixelV(hdc: HDC, x: cint, y: cint, color: culong): cint <cimport,nodecl> end
global function SetPixelFormat(hdc: HDC, format: cint, ppfd: *PIXELFORMATDESCRIPTOR): cint <cimport,nodecl> end
global function SetPolyFillMode(hdc: HDC, mode: cint): cint <cimport,nodecl> end
global function StretchBlt(hdcDest: HDC, xDest: cint, yDest: cint, wDest: cint, hDest: cint, hdcSrc: HDC, xSrc: cint, ySrc: cint, wSrc: cint, hSrc: cint, rop: culong): cint <cimport,nodecl> end
global function SetRectRgn(hrgn: HRGN, left: cint, top: cint, right: cint, bottom: cint): cint <cimport,nodecl> end
global function StretchDIBits(hdc: HDC, xDest: cint, yDest: cint, DestWidth: cint, DestHeight: cint, xSrc: cint, ySrc: cint, SrcWidth: cint, SrcHeight: cint, lpBits: pointer, lpbmi: *BITMAPINFO, iUsage: cuint, rop: culong): cint <cimport,nodecl> end
global function SetROP2(hdc: HDC, rop2: cint): cint <cimport,nodecl> end
global function SetStretchBltMode(hdc: HDC, mode: cint): cint <cimport,nodecl> end
global function SetSystemPaletteUse(hdc: HDC, use: cuint): cuint <cimport,nodecl> end
global function SetTextCharacterExtra(hdc: HDC, extra: cint): cint <cimport,nodecl> end
global function SetTextColor(hdc: HDC, color: culong): culong <cimport,nodecl> end
global function SetTextAlign(hdc: HDC, align: cuint): cuint <cimport,nodecl> end
global function SetTextJustification(hdc: HDC, extra: cint, count: cint): cint <cimport,nodecl> end
global function UpdateColors(hdc: HDC): cint <cimport,nodecl> end
global _TRIVERTEX: type <cimport,nodecl,ctypedef> = @record{
  x: clong,
  y: clong,
  Red: cushort,
  Green: cushort,
  Blue: cushort,
  Alpha: cushort
}
global TRIVERTEX: type = @_TRIVERTEX
global PTRIVERTEX: type = @*_TRIVERTEX
global LPTRIVERTEX: type = @*_TRIVERTEX
global _GRADIENT_TRIANGLE: type <cimport,nodecl,ctypedef> = @record{
  Vertex1: culong,
  Vertex2: culong,
  Vertex3: culong
}
global GRADIENT_TRIANGLE: type = @_GRADIENT_TRIANGLE
global PGRADIENT_TRIANGLE: type = @*_GRADIENT_TRIANGLE
global LPGRADIENT_TRIANGLE: type = @*_GRADIENT_TRIANGLE
global _GRADIENT_RECT: type <cimport,nodecl,ctypedef> = @record{
  UpperLeft: culong,
  LowerRight: culong
}
global GRADIENT_RECT: type = @_GRADIENT_RECT
global PGRADIENT_RECT: type = @*_GRADIENT_RECT
global LPGRADIENT_RECT: type = @*_GRADIENT_RECT
global _BLENDFUNCTION: type <cimport,nodecl,ctypedef> = @record{
  BlendOp: cuchar,
  BlendFlags: cuchar,
  SourceConstantAlpha: cuchar,
  AlphaFormat: cuchar
}
global BLENDFUNCTION: type = @_BLENDFUNCTION
global PBLENDFUNCTION: type = @*_BLENDFUNCTION
global function AlphaBlend(hdcDest: HDC, xoriginDest: cint, yoriginDest: cint, wDest: cint, hDest: cint, hdcSrc: HDC, xoriginSrc: cint, yoriginSrc: cint, wSrc: cint, hSrc: cint, ftn: BLENDFUNCTION): cint <cimport,nodecl> end
global function GdiAlphaBlend(hdcDest: HDC, xoriginDest: cint, yoriginDest: cint, wDest: cint, hDest: cint, hdcSrc: HDC, xoriginSrc: cint, yoriginSrc: cint, wSrc: cint, hSrc: cint, ftn: BLENDFUNCTION): cint <cimport,nodecl> end
global function TransparentBlt(hdcDest: HDC, xoriginDest: cint, yoriginDest: cint, wDest: cint, hDest: cint, hdcSrc: HDC, xoriginSrc: cint, yoriginSrc: cint, wSrc: cint, hSrc: cint, crTransparent: cuint): cint <cimport,nodecl> end
global function GdiTransparentBlt(hdcDest: HDC, xoriginDest: cint, yoriginDest: cint, wDest: cint, hDest: cint, hdcSrc: HDC, xoriginSrc: cint, yoriginSrc: cint, wSrc: cint, hSrc: cint, crTransparent: cuint): cint <cimport,nodecl> end
global function GradientFill(hdc: HDC, pVertex: PTRIVERTEX, nVertex: culong, pMesh: PVOID, nMesh: culong, ulMode: culong): cint <cimport,nodecl> end
global function GdiGradientFill(hdc: HDC, pVertex: PTRIVERTEX, nVertex: culong, pMesh: PVOID, nMesh: culong, ulMode: culong): cint <cimport,nodecl> end
global function PlayMetaFileRecord(hdc: HDC, lpHandleTable: LPHANDLETABLE, lpMR: LPMETARECORD, noObjs: cuint): cint <cimport,nodecl> end
global MFENUMPROC: type <cimport,nodecl> = @function(HDC, *HANDLETABLE, *METARECORD, cint, clonglong): cint
global function EnumMetaFile(hdc: HDC, hmf: HMETAFILE, lpProc: MFENUMPROC, lParam: clonglong): cint <cimport,nodecl> end
global ENHMFENUMPROC: type <cimport,nodecl> = @function(HDC, *HANDLETABLE, *ENHMETARECORD, cint, clonglong): cint
global function CloseEnhMetaFile(hdc: HDC): HENHMETAFILE <cimport,nodecl> end
global function CopyEnhMetaFileA(hEnh: HENHMETAFILE, lpFileName: LPCSTR): HENHMETAFILE <cimport,nodecl> end
global function CopyEnhMetaFileW(hEnh: HENHMETAFILE, lpFileName: LPCWSTR): HENHMETAFILE <cimport,nodecl> end
global function CreateEnhMetaFileA(hdc: HDC, lpFilename: LPCSTR, lprc: *RECT, lpDesc: LPCSTR): HDC <cimport,nodecl> end
global function CreateEnhMetaFileW(hdc: HDC, lpFilename: LPCWSTR, lprc: *RECT, lpDesc: LPCWSTR): HDC <cimport,nodecl> end
global function DeleteEnhMetaFile(hmf: HENHMETAFILE): cint <cimport,nodecl> end
global function EnumEnhMetaFile(hdc: HDC, hmf: HENHMETAFILE, lpProc: ENHMFENUMPROC, lpParam: LPVOID, lpRect: *RECT): cint <cimport,nodecl> end
global function GetEnhMetaFileA(lpName: LPCSTR): HENHMETAFILE <cimport,nodecl> end
global function GetEnhMetaFileW(lpName: LPCWSTR): HENHMETAFILE <cimport,nodecl> end
global function GetEnhMetaFileBits(hEMF: HENHMETAFILE, nSize: cuint, lpData: LPBYTE): cuint <cimport,nodecl> end
global function GetEnhMetaFileDescriptionA(hemf: HENHMETAFILE, cchBuffer: cuint, lpDescription: LPSTR): cuint <cimport,nodecl> end
global function GetEnhMetaFileDescriptionW(hemf: HENHMETAFILE, cchBuffer: cuint, lpDescription: LPWSTR): cuint <cimport,nodecl> end
global function GetEnhMetaFileHeader(hemf: HENHMETAFILE, nSize: cuint, lpEnhMetaHeader: LPENHMETAHEADER): cuint <cimport,nodecl> end
global function GetEnhMetaFilePaletteEntries(hemf: HENHMETAFILE, nNumEntries: cuint, lpPaletteEntries: LPPALETTEENTRY): cuint <cimport,nodecl> end
global function GetEnhMetaFilePixelFormat(hemf: HENHMETAFILE, cbBuffer: cuint, ppfd: *PIXELFORMATDESCRIPTOR): cuint <cimport,nodecl> end
global function GetWinMetaFileBits(hemf: HENHMETAFILE, cbData16: cuint, pData16: LPBYTE, iMapMode: cint, hdcRef: HDC): cuint <cimport,nodecl> end
global function PlayEnhMetaFile(hdc: HDC, hmf: HENHMETAFILE, lprect: *RECT): cint <cimport,nodecl> end
global function PlayEnhMetaFileRecord(hdc: HDC, pht: LPHANDLETABLE, pmr: *ENHMETARECORD, cht: cuint): cint <cimport,nodecl> end
global function SetEnhMetaFileBits(nSize: cuint, pb: *cuchar): HENHMETAFILE <cimport,nodecl> end
global function SetWinMetaFileBits(nSize: cuint, lpMeta16Data: *cuchar, hdcRef: HDC, lpMFP: *METAFILEPICT): HENHMETAFILE <cimport,nodecl> end
global function GdiComment(hdc: HDC, nSize: cuint, lpData: *cuchar): cint <cimport,nodecl> end
global function GetTextMetricsA(hdc: HDC, lptm: LPTEXTMETRICA): cint <cimport,nodecl> end
global function GetTextMetricsW(hdc: HDC, lptm: LPTEXTMETRICW): cint <cimport,nodecl> end
global tagDIBSECTION: type <cimport,nodecl,ctypedef> = @record{
  dsBm: BITMAP,
  dsBmih: BITMAPINFOHEADER,
  dsBitfields: [3]culong,
  dshSection: HANDLE,
  dsOffset: culong
}
global DIBSECTION: type = @tagDIBSECTION
global LPDIBSECTION: type = @*tagDIBSECTION
global PDIBSECTION: type = @*tagDIBSECTION
global function AngleArc(hdc: HDC, x: cint, y: cint, r: culong, StartAngle: float32, SweepAngle: float32): cint <cimport,nodecl> end
global function PolyPolyline(hdc: HDC, apt: *POINT, asz: *culong, csz: culong): cint <cimport,nodecl> end
global function GetWorldTransform(hdc: HDC, lpxf: LPXFORM): cint <cimport,nodecl> end
global function SetWorldTransform(hdc: HDC, lpxf: *XFORM): cint <cimport,nodecl> end
global function ModifyWorldTransform(hdc: HDC, lpxf: *XFORM, mode: culong): cint <cimport,nodecl> end
global function CombineTransform(lpxfOut: LPXFORM, lpxf1: *XFORM, lpxf2: *XFORM): cint <cimport,nodecl> end
global function CreateDIBSection(hdc: HDC, lpbmi: *BITMAPINFO, usage: cuint, ppvBits: *pointer, hSection: HANDLE, offset: culong): HBITMAP <cimport,nodecl> end
global function GetDIBColorTable(hdc: HDC, iStart: cuint, cEntries: cuint, prgbq: *RGBQUAD): cuint <cimport,nodecl> end
global function SetDIBColorTable(hdc: HDC, iStart: cuint, cEntries: cuint, prgbq: *RGBQUAD): cuint <cimport,nodecl> end
global tagCOLORADJUSTMENT: type <cimport,nodecl,ctypedef> = @record{
  caSize: cushort,
  caFlags: cushort,
  caIlluminantIndex: cushort,
  caRedGamma: cushort,
  caGreenGamma: cushort,
  caBlueGamma: cushort,
  caReferenceBlack: cushort,
  caReferenceWhite: cushort,
  caContrast: cshort,
  caBrightness: cshort,
  caColorfulness: cshort,
  caRedGreenTint: cshort
}
global COLORADJUSTMENT: type = @tagCOLORADJUSTMENT
global PCOLORADJUSTMENT: type = @*tagCOLORADJUSTMENT
global LPCOLORADJUSTMENT: type = @*tagCOLORADJUSTMENT
global function SetColorAdjustment(hdc: HDC, lpca: *COLORADJUSTMENT): cint <cimport,nodecl> end
global function GetColorAdjustment(hdc: HDC, lpca: LPCOLORADJUSTMENT): cint <cimport,nodecl> end
global function CreateHalftonePalette(hdc: HDC): HPALETTE <cimport,nodecl> end
global ABORTPROC: type <cimport,nodecl> = @function(HDC, cint): cint
global _DOCINFOA: type <cimport,nodecl,ctypedef> = @record{
  cbSize: cint,
  lpszDocName: LPCSTR,
  lpszOutput: LPCSTR,
  lpszDatatype: LPCSTR,
  fwType: culong
}
global DOCINFOA: type = @_DOCINFOA
global LPDOCINFOA: type = @*_DOCINFOA
global _DOCINFOW: type <cimport,nodecl,ctypedef> = @record{
  cbSize: cint,
  lpszDocName: LPCWSTR,
  lpszOutput: LPCWSTR,
  lpszDatatype: LPCWSTR,
  fwType: culong
}
global DOCINFOW: type = @_DOCINFOW
global LPDOCINFOW: type = @*_DOCINFOW
global DOCINFO: type = @_DOCINFOA
global LPDOCINFO: type = @*_DOCINFOA
global function StartDocA(hdc: HDC, lpdi: *DOCINFOA): cint <cimport,nodecl> end
global function StartDocW(hdc: HDC, lpdi: *DOCINFOW): cint <cimport,nodecl> end
global function EndDoc(hdc: HDC): cint <cimport,nodecl> end
global function StartPage(hdc: HDC): cint <cimport,nodecl> end
global function EndPage(hdc: HDC): cint <cimport,nodecl> end
global function AbortDoc(hdc: HDC): cint <cimport,nodecl> end
global function SetAbortProc(hdc: HDC, lpProc: ABORTPROC): cint <cimport,nodecl> end
global function AbortPath(hdc: HDC): cint <cimport,nodecl> end
global function ArcTo(hdc: HDC, left: cint, top: cint, right: cint, bottom: cint, xr1: cint, yr1: cint, xr2: cint, yr2: cint): cint <cimport,nodecl> end
global function BeginPath(hdc: HDC): cint <cimport,nodecl> end
global function CloseFigure(hdc: HDC): cint <cimport,nodecl> end
global function EndPath(hdc: HDC): cint <cimport,nodecl> end
global function FillPath(hdc: HDC): cint <cimport,nodecl> end
global function FlattenPath(hdc: HDC): cint <cimport,nodecl> end
global function GetPath(hdc: HDC, apt: LPPOINT, aj: LPBYTE, cpt: cint): cint <cimport,nodecl> end
global function PathToRegion(hdc: HDC): HRGN <cimport,nodecl> end
global function PolyDraw(hdc: HDC, apt: *POINT, aj: *cuchar, cpt: cint): cint <cimport,nodecl> end
global function SelectClipPath(hdc: HDC, mode: cint): cint <cimport,nodecl> end
global function SetArcDirection(hdc: HDC, dir: cint): cint <cimport,nodecl> end
global function SetMiterLimit(hdc: HDC, limit: float32, old: PFLOAT): cint <cimport,nodecl> end
global function StrokeAndFillPath(hdc: HDC): cint <cimport,nodecl> end
global function StrokePath(hdc: HDC): cint <cimport,nodecl> end
global function WidenPath(hdc: HDC): cint <cimport,nodecl> end
global function ExtCreatePen(iPenStyle: culong, cWidth: culong, plbrush: *LOGBRUSH, cStyle: culong, pstyle: *culong): HPEN <cimport,nodecl> end
global function GetMiterLimit(hdc: HDC, plimit: PFLOAT): cint <cimport,nodecl> end
global function GetArcDirection(hdc: HDC): cint <cimport,nodecl> end
global function GetObjectA(h: HANDLE, c: cint, pv: LPVOID): cint <cimport,nodecl> end
global function GetObjectW(h: HANDLE, c: cint, pv: LPVOID): cint <cimport,nodecl> end
global function MoveToEx(hdc: HDC, x: cint, y: cint, lppt: LPPOINT): cint <cimport,nodecl> end
global function TextOutA(hdc: HDC, x: cint, y: cint, lpString: LPCSTR, c: cint): cint <cimport,nodecl> end
global function TextOutW(hdc: HDC, x: cint, y: cint, lpString: LPCWSTR, c: cint): cint <cimport,nodecl> end
global function ExtTextOutA(hdc: HDC, x: cint, y: cint, options: cuint, lprect: *RECT, lpString: LPCSTR, c: cuint, lpDx: *cint): cint <cimport,nodecl> end
global function ExtTextOutW(hdc: HDC, x: cint, y: cint, options: cuint, lprect: *RECT, lpString: LPCWSTR, c: cuint, lpDx: *cint): cint <cimport,nodecl> end
global function PolyTextOutA(hdc: HDC, ppt: *POLYTEXTA, nstrings: cint): cint <cimport,nodecl> end
global function PolyTextOutW(hdc: HDC, ppt: *POLYTEXTW, nstrings: cint): cint <cimport,nodecl> end
global function CreatePolygonRgn(pptl: *POINT, cPoint: cint, iMode: cint): HRGN <cimport,nodecl> end
global function DPtoLP(hdc: HDC, lppt: LPPOINT, c: cint): cint <cimport,nodecl> end
global function LPtoDP(hdc: HDC, lppt: LPPOINT, c: cint): cint <cimport,nodecl> end
global function Polygon(hdc: HDC, apt: *POINT, cpt: cint): cint <cimport,nodecl> end
global function Polyline(hdc: HDC, apt: *POINT, cpt: cint): cint <cimport,nodecl> end
global function PolyBezier(hdc: HDC, apt: *POINT, cpt: culong): cint <cimport,nodecl> end
global function PolyBezierTo(hdc: HDC, apt: *POINT, cpt: culong): cint <cimport,nodecl> end
global function PolylineTo(hdc: HDC, apt: *POINT, cpt: culong): cint <cimport,nodecl> end
global function SetViewportExtEx(hdc: HDC, x: cint, y: cint, lpsz: LPSIZE): cint <cimport,nodecl> end
global function SetViewportOrgEx(hdc: HDC, x: cint, y: cint, lppt: LPPOINT): cint <cimport,nodecl> end
global function SetWindowExtEx(hdc: HDC, x: cint, y: cint, lpsz: LPSIZE): cint <cimport,nodecl> end
global function SetWindowOrgEx(hdc: HDC, x: cint, y: cint, lppt: LPPOINT): cint <cimport,nodecl> end
global function OffsetViewportOrgEx(hdc: HDC, x: cint, y: cint, lppt: LPPOINT): cint <cimport,nodecl> end
global function OffsetWindowOrgEx(hdc: HDC, x: cint, y: cint, lppt: LPPOINT): cint <cimport,nodecl> end
global function ScaleViewportExtEx(hdc: HDC, xn: cint, dx: cint, yn: cint, yd: cint, lpsz: LPSIZE): cint <cimport,nodecl> end
global function ScaleWindowExtEx(hdc: HDC, xn: cint, xd: cint, yn: cint, yd: cint, lpsz: LPSIZE): cint <cimport,nodecl> end
global function SetBitmapDimensionEx(hbm: HBITMAP, w: cint, h: cint, lpsz: LPSIZE): cint <cimport,nodecl> end
global function SetBrushOrgEx(hdc: HDC, x: cint, y: cint, lppt: LPPOINT): cint <cimport,nodecl> end
global function GetTextFaceA(hdc: HDC, c: cint, lpName: LPSTR): cint <cimport,nodecl> end
global function GetTextFaceW(hdc: HDC, c: cint, lpName: LPWSTR): cint <cimport,nodecl> end
global tagKERNINGPAIR: type <cimport,nodecl,ctypedef> = @record{
  wFirst: cushort,
  wSecond: cushort,
  iKernAmount: cint
}
global KERNINGPAIR: type = @tagKERNINGPAIR
global LPKERNINGPAIR: type = @*tagKERNINGPAIR
global function GetKerningPairsA(hdc: HDC, nPairs: culong, lpKernPair: LPKERNINGPAIR): culong <cimport,nodecl> end
global function GetKerningPairsW(hdc: HDC, nPairs: culong, lpKernPair: LPKERNINGPAIR): culong <cimport,nodecl> end
global function GetDCOrgEx(hdc: HDC, lppt: LPPOINT): cint <cimport,nodecl> end
global function FixBrushOrgEx(hdc: HDC, x: cint, y: cint, ptl: LPPOINT): cint <cimport,nodecl> end
global function UnrealizeObject(h: HGDIOBJ): cint <cimport,nodecl> end
global function GdiFlush(): cint <cimport,nodecl> end
global function GdiSetBatchLimit(dw: culong): culong <cimport,nodecl> end
global function GdiGetBatchLimit(): culong <cimport,nodecl> end
global ICMENUMPROCA: type <cimport,nodecl> = @function(LPSTR, clonglong): cint
global ICMENUMPROCW: type <cimport,nodecl> = @function(LPWSTR, clonglong): cint
global function SetICMMode(hdc: HDC, mode: cint): cint <cimport,nodecl> end
global function CheckColorsInGamut(hdc: HDC, lpRGBTriple: LPVOID, dlpBuffer: LPVOID, nCount: culong): cint <cimport,nodecl> end
global function GetColorSpace(hdc: HDC): HCOLORSPACE <cimport,nodecl> end
global function GetLogColorSpaceA(hColorSpace: HCOLORSPACE, lpBuffer: LPLOGCOLORSPACEA, nSize: culong): cint <cimport,nodecl> end
global function GetLogColorSpaceW(hColorSpace: HCOLORSPACE, lpBuffer: LPLOGCOLORSPACEW, nSize: culong): cint <cimport,nodecl> end
global function CreateColorSpaceA(lplcs: LPLOGCOLORSPACEA): HCOLORSPACE <cimport,nodecl> end
global function CreateColorSpaceW(lplcs: LPLOGCOLORSPACEW): HCOLORSPACE <cimport,nodecl> end
global function SetColorSpace(hdc: HDC, hcs: HCOLORSPACE): HCOLORSPACE <cimport,nodecl> end
global function DeleteColorSpace(hcs: HCOLORSPACE): cint <cimport,nodecl> end
global function GetICMProfileA(hdc: HDC, pBufSize: LPDWORD, pszFilename: LPSTR): cint <cimport,nodecl> end
global function GetICMProfileW(hdc: HDC, pBufSize: LPDWORD, pszFilename: LPWSTR): cint <cimport,nodecl> end
global function SetICMProfileA(hdc: HDC, lpFileName: LPSTR): cint <cimport,nodecl> end
global function SetICMProfileW(hdc: HDC, lpFileName: LPWSTR): cint <cimport,nodecl> end
global function GetDeviceGammaRamp(hdc: HDC, lpRamp: LPVOID): cint <cimport,nodecl> end
global function SetDeviceGammaRamp(hdc: HDC, lpRamp: LPVOID): cint <cimport,nodecl> end
global function ColorMatchToTarget(hdc: HDC, hdcTarget: HDC, action: culong): cint <cimport,nodecl> end
global function EnumICMProfilesA(hdc: HDC, lpProc: ICMENUMPROCA, lParam: clonglong): cint <cimport,nodecl> end
global function EnumICMProfilesW(hdc: HDC, lpProc: ICMENUMPROCW, lParam: clonglong): cint <cimport,nodecl> end
global function UpdateICMRegKeyA(reserved: culong, lpszCMID: LPSTR, lpszFileName: LPSTR, command: cuint): cint <cimport,nodecl> end
global function UpdateICMRegKeyW(reserved: culong, lpszCMID: LPWSTR, lpszFileName: LPWSTR, command: cuint): cint <cimport,nodecl> end
global function ColorCorrectPalette(hdc: HDC, hPal: HPALETTE, deFirst: culong, num: culong): cint <cimport,nodecl> end
global tagEMR: type <cimport,nodecl,ctypedef> = @record{
  iType: culong,
  nSize: culong
}
global EMR: type = @tagEMR
global PEMR: type = @*tagEMR
global tagEMRTEXT: type <cimport,nodecl,ctypedef> = @record{
  ptlReference: POINTL,
  nChars: culong,
  offString: culong,
  fOptions: culong,
  rcl: RECTL,
  offDx: culong
}
global EMRTEXT: type = @tagEMRTEXT
global PEMRTEXT: type = @*tagEMRTEXT
global tagABORTPATH: type <cimport,nodecl,ctypedef> = @record{
  emr: EMR
}
global EMRABORTPATH: type = @tagABORTPATH
global PEMRABORTPATH: type = @*tagABORTPATH
global EMRBEGINPATH: type = @tagABORTPATH
global PEMRBEGINPATH: type = @*tagABORTPATH
global EMRENDPATH: type = @tagABORTPATH
global PEMRENDPATH: type = @*tagABORTPATH
global EMRCLOSEFIGURE: type = @tagABORTPATH
global PEMRCLOSEFIGURE: type = @*tagABORTPATH
global EMRFLATTENPATH: type = @tagABORTPATH
global PEMRFLATTENPATH: type = @*tagABORTPATH
global EMRWIDENPATH: type = @tagABORTPATH
global PEMRWIDENPATH: type = @*tagABORTPATH
global EMRSETMETARGN: type = @tagABORTPATH
global PEMRSETMETARGN: type = @*tagABORTPATH
global EMRSAVEDC: type = @tagABORTPATH
global PEMRSAVEDC: type = @*tagABORTPATH
global EMRREALIZEPALETTE: type = @tagABORTPATH
global PEMRREALIZEPALETTE: type = @*tagABORTPATH
global tagEMRSELECTCLIPPATH: type <cimport,nodecl,ctypedef> = @record{
  emr: EMR,
  iMode: culong
}
global EMRSELECTCLIPPATH: type = @tagEMRSELECTCLIPPATH
global PEMRSELECTCLIPPATH: type = @*tagEMRSELECTCLIPPATH
global EMRSETBKMODE: type = @tagEMRSELECTCLIPPATH
global PEMRSETBKMODE: type = @*tagEMRSELECTCLIPPATH
global EMRSETMAPMODE: type = @tagEMRSELECTCLIPPATH
global PEMRSETMAPMODE: type = @*tagEMRSELECTCLIPPATH
global EMRSETLAYOUT: type = @tagEMRSELECTCLIPPATH
global PEMRSETLAYOUT: type = @*tagEMRSELECTCLIPPATH
global EMRSETPOLYFILLMODE: type = @tagEMRSELECTCLIPPATH
global PEMRSETPOLYFILLMODE: type = @*tagEMRSELECTCLIPPATH
global EMRSETROP2: type = @tagEMRSELECTCLIPPATH
global PEMRSETROP2: type = @*tagEMRSELECTCLIPPATH
global EMRSETSTRETCHBLTMODE: type = @tagEMRSELECTCLIPPATH
global PEMRSETSTRETCHBLTMODE: type = @*tagEMRSELECTCLIPPATH
global EMRSETICMMODE: type = @tagEMRSELECTCLIPPATH
global PEMRSETICMMODE: type = @*tagEMRSELECTCLIPPATH
global EMRSETTEXTALIGN: type = @tagEMRSELECTCLIPPATH
global PEMRSETTEXTALIGN: type = @*tagEMRSELECTCLIPPATH
global tagEMRSETMITERLIMIT: type <cimport,nodecl,ctypedef> = @record{
  emr: EMR,
  eMiterLimit: float32
}
global EMRSETMITERLIMIT: type = @tagEMRSETMITERLIMIT
global PEMRSETMITERLIMIT: type = @*tagEMRSETMITERLIMIT
global tagEMRRESTOREDC: type <cimport,nodecl,ctypedef> = @record{
  emr: EMR,
  iRelative: clong
}
global EMRRESTOREDC: type = @tagEMRRESTOREDC
global PEMRRESTOREDC: type = @*tagEMRRESTOREDC
global tagEMRSETARCDIRECTION: type <cimport,nodecl,ctypedef> = @record{
  emr: EMR,
  iArcDirection: culong
}
global EMRSETARCDIRECTION: type = @tagEMRSETARCDIRECTION
global PEMRSETARCDIRECTION: type = @*tagEMRSETARCDIRECTION
global tagEMRSETMAPPERFLAGS: type <cimport,nodecl,ctypedef> = @record{
  emr: EMR,
  dwFlags: culong
}
global EMRSETMAPPERFLAGS: type = @tagEMRSETMAPPERFLAGS
global PEMRSETMAPPERFLAGS: type = @*tagEMRSETMAPPERFLAGS
global tagEMRSETTEXTCOLOR: type <cimport,nodecl,ctypedef> = @record{
  emr: EMR,
  crColor: culong
}
global EMRSETBKCOLOR: type = @tagEMRSETTEXTCOLOR
global PEMRSETBKCOLOR: type = @*tagEMRSETTEXTCOLOR
global EMRSETTEXTCOLOR: type = @tagEMRSETTEXTCOLOR
global PEMRSETTEXTCOLOR: type = @*tagEMRSETTEXTCOLOR
global tagEMRSELECTOBJECT: type <cimport,nodecl,ctypedef> = @record{
  emr: EMR,
  ihObject: culong
}
global EMRSELECTOBJECT: type = @tagEMRSELECTOBJECT
global PEMRSELECTOBJECT: type = @*tagEMRSELECTOBJECT
global EMRDELETEOBJECT: type = @tagEMRSELECTOBJECT
global PEMRDELETEOBJECT: type = @*tagEMRSELECTOBJECT
global tagEMRSELECTPALETTE: type <cimport,nodecl,ctypedef> = @record{
  emr: EMR,
  ihPal: culong
}
global EMRSELECTPALETTE: type = @tagEMRSELECTPALETTE
global PEMRSELECTPALETTE: type = @*tagEMRSELECTPALETTE
global tagEMRRESIZEPALETTE: type <cimport,nodecl,ctypedef> = @record{
  emr: EMR,
  ihPal: culong,
  cEntries: culong
}
global EMRRESIZEPALETTE: type = @tagEMRRESIZEPALETTE
global PEMRRESIZEPALETTE: type = @*tagEMRRESIZEPALETTE
global tagEMRSETPALETTEENTRIES: type <cimport,nodecl,ctypedef> = @record{
  emr: EMR,
  ihPal: culong,
  iStart: culong,
  cEntries: culong,
  aPalEntries: [1]PALETTEENTRY
}
global EMRSETPALETTEENTRIES: type = @tagEMRSETPALETTEENTRIES
global PEMRSETPALETTEENTRIES: type = @*tagEMRSETPALETTEENTRIES
global tagEMRSETCOLORADJUSTMENT: type <cimport,nodecl,ctypedef> = @record{
  emr: EMR,
  ColorAdjustment: COLORADJUSTMENT
}
global EMRSETCOLORADJUSTMENT: type = @tagEMRSETCOLORADJUSTMENT
global PEMRSETCOLORADJUSTMENT: type = @*tagEMRSETCOLORADJUSTMENT
global tagEMRGDICOMMENT: type <cimport,nodecl,ctypedef> = @record{
  emr: EMR,
  cbData: culong,
  Data: [1]cuchar
}
global EMRGDICOMMENT: type = @tagEMRGDICOMMENT
global PEMRGDICOMMENT: type = @*tagEMRGDICOMMENT
global tagEMREOF: type <cimport,nodecl,ctypedef> = @record{
  emr: EMR,
  nPalEntries: culong,
  offPalEntries: culong,
  nSizeLast: culong
}
global EMREOF: type = @tagEMREOF
global PEMREOF: type = @*tagEMREOF
global tagEMRLINETO: type <cimport,nodecl,ctypedef> = @record{
  emr: EMR,
  ptl: POINTL
}
global EMRLINETO: type = @tagEMRLINETO
global PEMRLINETO: type = @*tagEMRLINETO
global EMRMOVETOEX: type = @tagEMRLINETO
global PEMRMOVETOEX: type = @*tagEMRLINETO
global tagEMROFFSETCLIPRGN: type <cimport,nodecl,ctypedef> = @record{
  emr: EMR,
  ptlOffset: POINTL
}
global EMROFFSETCLIPRGN: type = @tagEMROFFSETCLIPRGN
global PEMROFFSETCLIPRGN: type = @*tagEMROFFSETCLIPRGN
global tagEMRFILLPATH: type <cimport,nodecl,ctypedef> = @record{
  emr: EMR,
  rclBounds: RECTL
}
global EMRFILLPATH: type = @tagEMRFILLPATH
global PEMRFILLPATH: type = @*tagEMRFILLPATH
global EMRSTROKEANDFILLPATH: type = @tagEMRFILLPATH
global PEMRSTROKEANDFILLPATH: type = @*tagEMRFILLPATH
global EMRSTROKEPATH: type = @tagEMRFILLPATH
global PEMRSTROKEPATH: type = @*tagEMRFILLPATH
global tagEMREXCLUDECLIPRECT: type <cimport,nodecl,ctypedef> = @record{
  emr: EMR,
  rclClip: RECTL
}
global EMREXCLUDECLIPRECT: type = @tagEMREXCLUDECLIPRECT
global PEMREXCLUDECLIPRECT: type = @*tagEMREXCLUDECLIPRECT
global EMRINTERSECTCLIPRECT: type = @tagEMREXCLUDECLIPRECT
global PEMRINTERSECTCLIPRECT: type = @*tagEMREXCLUDECLIPRECT
global tagEMRSETVIEWPORTORGEX: type <cimport,nodecl,ctypedef> = @record{
  emr: EMR,
  ptlOrigin: POINTL
}
global EMRSETVIEWPORTORGEX: type = @tagEMRSETVIEWPORTORGEX
global PEMRSETVIEWPORTORGEX: type = @*tagEMRSETVIEWPORTORGEX
global EMRSETWINDOWORGEX: type = @tagEMRSETVIEWPORTORGEX
global PEMRSETWINDOWORGEX: type = @*tagEMRSETVIEWPORTORGEX
global EMRSETBRUSHORGEX: type = @tagEMRSETVIEWPORTORGEX
global PEMRSETBRUSHORGEX: type = @*tagEMRSETVIEWPORTORGEX
global tagEMRSETVIEWPORTEXTEX: type <cimport,nodecl,ctypedef> = @record{
  emr: EMR,
  szlExtent: SIZEL
}
global EMRSETVIEWPORTEXTEX: type = @tagEMRSETVIEWPORTEXTEX
global PEMRSETVIEWPORTEXTEX: type = @*tagEMRSETVIEWPORTEXTEX
global EMRSETWINDOWEXTEX: type = @tagEMRSETVIEWPORTEXTEX
global PEMRSETWINDOWEXTEX: type = @*tagEMRSETVIEWPORTEXTEX
global tagEMRSCALEVIEWPORTEXTEX: type <cimport,nodecl,ctypedef> = @record{
  emr: EMR,
  xNum: clong,
  xDenom: clong,
  yNum: clong,
  yDenom: clong
}
global EMRSCALEVIEWPORTEXTEX: type = @tagEMRSCALEVIEWPORTEXTEX
global PEMRSCALEVIEWPORTEXTEX: type = @*tagEMRSCALEVIEWPORTEXTEX
global EMRSCALEWINDOWEXTEX: type = @tagEMRSCALEVIEWPORTEXTEX
global PEMRSCALEWINDOWEXTEX: type = @*tagEMRSCALEVIEWPORTEXTEX
global tagEMRSETWORLDTRANSFORM: type <cimport,nodecl,ctypedef> = @record{
  emr: EMR,
  xform: XFORM
}
global EMRSETWORLDTRANSFORM: type = @tagEMRSETWORLDTRANSFORM
global PEMRSETWORLDTRANSFORM: type = @*tagEMRSETWORLDTRANSFORM
global tagEMRMODIFYWORLDTRANSFORM: type <cimport,nodecl,ctypedef> = @record{
  emr: EMR,
  xform: XFORM,
  iMode: culong
}
global EMRMODIFYWORLDTRANSFORM: type = @tagEMRMODIFYWORLDTRANSFORM
global PEMRMODIFYWORLDTRANSFORM: type = @*tagEMRMODIFYWORLDTRANSFORM
global tagEMRSETPIXELV: type <cimport,nodecl,ctypedef> = @record{
  emr: EMR,
  ptlPixel: POINTL,
  crColor: culong
}
global EMRSETPIXELV: type = @tagEMRSETPIXELV
global PEMRSETPIXELV: type = @*tagEMRSETPIXELV
global tagEMREXTFLOODFILL: type <cimport,nodecl,ctypedef> = @record{
  emr: EMR,
  ptlStart: POINTL,
  crColor: culong,
  iMode: culong
}
global EMREXTFLOODFILL: type = @tagEMREXTFLOODFILL
global PEMREXTFLOODFILL: type = @*tagEMREXTFLOODFILL
global tagEMRELLIPSE: type <cimport,nodecl,ctypedef> = @record{
  emr: EMR,
  rclBox: RECTL
}
global EMRELLIPSE: type = @tagEMRELLIPSE
global PEMRELLIPSE: type = @*tagEMRELLIPSE
global EMRRECTANGLE: type = @tagEMRELLIPSE
global PEMRRECTANGLE: type = @*tagEMRELLIPSE
global tagEMRROUNDRECT: type <cimport,nodecl,ctypedef> = @record{
  emr: EMR,
  rclBox: RECTL,
  szlCorner: SIZEL
}
global EMRROUNDRECT: type = @tagEMRROUNDRECT
global PEMRROUNDRECT: type = @*tagEMRROUNDRECT
global tagEMRARC: type <cimport,nodecl,ctypedef> = @record{
  emr: EMR,
  rclBox: RECTL,
  ptlStart: POINTL,
  ptlEnd: POINTL
}
global EMRARC: type = @tagEMRARC
global PEMRARC: type = @*tagEMRARC
global EMRARCTO: type = @tagEMRARC
global PEMRARCTO: type = @*tagEMRARC
global EMRCHORD: type = @tagEMRARC
global PEMRCHORD: type = @*tagEMRARC
global EMRPIE: type = @tagEMRARC
global PEMRPIE: type = @*tagEMRARC
global tagEMRANGLEARC: type <cimport,nodecl,ctypedef> = @record{
  emr: EMR,
  ptlCenter: POINTL,
  nRadius: culong,
  eStartAngle: float32,
  eSweepAngle: float32
}
global EMRANGLEARC: type = @tagEMRANGLEARC
global PEMRANGLEARC: type = @*tagEMRANGLEARC
global tagEMRPOLYLINE: type <cimport,nodecl,ctypedef> = @record{
  emr: EMR,
  rclBounds: RECTL,
  cptl: culong,
  aptl: [1]POINTL
}
global EMRPOLYLINE: type = @tagEMRPOLYLINE
global PEMRPOLYLINE: type = @*tagEMRPOLYLINE
global EMRPOLYBEZIER: type = @tagEMRPOLYLINE
global PEMRPOLYBEZIER: type = @*tagEMRPOLYLINE
global EMRPOLYGON: type = @tagEMRPOLYLINE
global PEMRPOLYGON: type = @*tagEMRPOLYLINE
global EMRPOLYBEZIERTO: type = @tagEMRPOLYLINE
global PEMRPOLYBEZIERTO: type = @*tagEMRPOLYLINE
global EMRPOLYLINETO: type = @tagEMRPOLYLINE
global PEMRPOLYLINETO: type = @*tagEMRPOLYLINE
global tagEMRPOLYLINE16: type <cimport,nodecl,ctypedef> = @record{
  emr: EMR,
  rclBounds: RECTL,
  cpts: culong,
  apts: [1]POINTS
}
global EMRPOLYLINE16: type = @tagEMRPOLYLINE16
global PEMRPOLYLINE16: type = @*tagEMRPOLYLINE16
global EMRPOLYBEZIER16: type = @tagEMRPOLYLINE16
global PEMRPOLYBEZIER16: type = @*tagEMRPOLYLINE16
global EMRPOLYGON16: type = @tagEMRPOLYLINE16
global PEMRPOLYGON16: type = @*tagEMRPOLYLINE16
global EMRPOLYBEZIERTO16: type = @tagEMRPOLYLINE16
global PEMRPOLYBEZIERTO16: type = @*tagEMRPOLYLINE16
global EMRPOLYLINETO16: type = @tagEMRPOLYLINE16
global PEMRPOLYLINETO16: type = @*tagEMRPOLYLINE16
global tagEMRPOLYDRAW: type <cimport,nodecl,ctypedef> = @record{
  emr: EMR,
  rclBounds: RECTL,
  cptl: culong,
  aptl: [1]POINTL,
  abTypes: [1]cuchar
}
global EMRPOLYDRAW: type = @tagEMRPOLYDRAW
global PEMRPOLYDRAW: type = @*tagEMRPOLYDRAW
global tagEMRPOLYDRAW16: type <cimport,nodecl,ctypedef> = @record{
  emr: EMR,
  rclBounds: RECTL,
  cpts: culong,
  apts: [1]POINTS,
  abTypes: [1]cuchar
}
global EMRPOLYDRAW16: type = @tagEMRPOLYDRAW16
global PEMRPOLYDRAW16: type = @*tagEMRPOLYDRAW16
global tagEMRPOLYPOLYLINE: type <cimport,nodecl,ctypedef> = @record{
  emr: EMR,
  rclBounds: RECTL,
  nPolys: culong,
  cptl: culong,
  aPolyCounts: [1]culong,
  aptl: [1]POINTL
}
global EMRPOLYPOLYLINE: type = @tagEMRPOLYPOLYLINE
global PEMRPOLYPOLYLINE: type = @*tagEMRPOLYPOLYLINE
global EMRPOLYPOLYGON: type = @tagEMRPOLYPOLYLINE
global PEMRPOLYPOLYGON: type = @*tagEMRPOLYPOLYLINE
global tagEMRPOLYPOLYLINE16: type <cimport,nodecl,ctypedef> = @record{
  emr: EMR,
  rclBounds: RECTL,
  nPolys: culong,
  cpts: culong,
  aPolyCounts: [1]culong,
  apts: [1]POINTS
}
global EMRPOLYPOLYLINE16: type = @tagEMRPOLYPOLYLINE16
global PEMRPOLYPOLYLINE16: type = @*tagEMRPOLYPOLYLINE16
global EMRPOLYPOLYGON16: type = @tagEMRPOLYPOLYLINE16
global PEMRPOLYPOLYGON16: type = @*tagEMRPOLYPOLYLINE16
global tagEMRINVERTRGN: type <cimport,nodecl,ctypedef> = @record{
  emr: EMR,
  rclBounds: RECTL,
  cbRgnData: culong,
  RgnData: [1]cuchar
}
global EMRINVERTRGN: type = @tagEMRINVERTRGN
global PEMRINVERTRGN: type = @*tagEMRINVERTRGN
global EMRPAINTRGN: type = @tagEMRINVERTRGN
global PEMRPAINTRGN: type = @*tagEMRINVERTRGN
global tagEMRFILLRGN: type <cimport,nodecl,ctypedef> = @record{
  emr: EMR,
  rclBounds: RECTL,
  cbRgnData: culong,
  ihBrush: culong,
  RgnData: [1]cuchar
}
global EMRFILLRGN: type = @tagEMRFILLRGN
global PEMRFILLRGN: type = @*tagEMRFILLRGN
global tagEMRFRAMERGN: type <cimport,nodecl,ctypedef> = @record{
  emr: EMR,
  rclBounds: RECTL,
  cbRgnData: culong,
  ihBrush: culong,
  szlStroke: SIZEL,
  RgnData: [1]cuchar
}
global EMRFRAMERGN: type = @tagEMRFRAMERGN
global PEMRFRAMERGN: type = @*tagEMRFRAMERGN
global tagEMREXTSELECTCLIPRGN: type <cimport,nodecl,ctypedef> = @record{
  emr: EMR,
  cbRgnData: culong,
  iMode: culong,
  RgnData: [1]cuchar
}
global EMREXTSELECTCLIPRGN: type = @tagEMREXTSELECTCLIPRGN
global PEMREXTSELECTCLIPRGN: type = @*tagEMREXTSELECTCLIPRGN
global tagEMREXTTEXTOUTA: type <cimport,nodecl,ctypedef> = @record{
  emr: EMR,
  rclBounds: RECTL,
  iGraphicsMode: culong,
  exScale: float32,
  eyScale: float32,
  emrtext: EMRTEXT
}
global EMREXTTEXTOUTA: type = @tagEMREXTTEXTOUTA
global PEMREXTTEXTOUTA: type = @*tagEMREXTTEXTOUTA
global EMREXTTEXTOUTW: type = @tagEMREXTTEXTOUTA
global PEMREXTTEXTOUTW: type = @*tagEMREXTTEXTOUTA
global tagEMRPOLYTEXTOUTA: type <cimport,nodecl,ctypedef> = @record{
  emr: EMR,
  rclBounds: RECTL,
  iGraphicsMode: culong,
  exScale: float32,
  eyScale: float32,
  cStrings: clong,
  aemrtext: [1]EMRTEXT
}
global EMRPOLYTEXTOUTA: type = @tagEMRPOLYTEXTOUTA
global PEMRPOLYTEXTOUTA: type = @*tagEMRPOLYTEXTOUTA
global EMRPOLYTEXTOUTW: type = @tagEMRPOLYTEXTOUTA
global PEMRPOLYTEXTOUTW: type = @*tagEMRPOLYTEXTOUTA
global tagEMRBITBLT: type <cimport,nodecl,ctypedef> = @record{
  emr: EMR,
  rclBounds: RECTL,
  xDest: clong,
  yDest: clong,
  cxDest: clong,
  cyDest: clong,
  dwRop: culong,
  xSrc: clong,
  ySrc: clong,
  xformSrc: XFORM,
  crBkColorSrc: culong,
  iUsageSrc: culong,
  offBmiSrc: culong,
  cbBmiSrc: culong,
  offBitsSrc: culong,
  cbBitsSrc: culong
}
global EMRBITBLT: type = @tagEMRBITBLT
global PEMRBITBLT: type = @*tagEMRBITBLT
global tagEMRSTRETCHBLT: type <cimport,nodecl,ctypedef> = @record{
  emr: EMR,
  rclBounds: RECTL,
  xDest: clong,
  yDest: clong,
  cxDest: clong,
  cyDest: clong,
  dwRop: culong,
  xSrc: clong,
  ySrc: clong,
  xformSrc: XFORM,
  crBkColorSrc: culong,
  iUsageSrc: culong,
  offBmiSrc: culong,
  cbBmiSrc: culong,
  offBitsSrc: culong,
  cbBitsSrc: culong,
  cxSrc: clong,
  cySrc: clong
}
global EMRSTRETCHBLT: type = @tagEMRSTRETCHBLT
global PEMRSTRETCHBLT: type = @*tagEMRSTRETCHBLT
global tagEMRMASKBLT: type <cimport,nodecl,ctypedef> = @record{
  emr: EMR,
  rclBounds: RECTL,
  xDest: clong,
  yDest: clong,
  cxDest: clong,
  cyDest: clong,
  dwRop: culong,
  xSrc: clong,
  ySrc: clong,
  xformSrc: XFORM,
  crBkColorSrc: culong,
  iUsageSrc: culong,
  offBmiSrc: culong,
  cbBmiSrc: culong,
  offBitsSrc: culong,
  cbBitsSrc: culong,
  xMask: clong,
  yMask: clong,
  iUsageMask: culong,
  offBmiMask: culong,
  cbBmiMask: culong,
  offBitsMask: culong,
  cbBitsMask: culong
}
global EMRMASKBLT: type = @tagEMRMASKBLT
global PEMRMASKBLT: type = @*tagEMRMASKBLT
global tagEMRPLGBLT: type <cimport,nodecl,ctypedef> = @record{
  emr: EMR,
  rclBounds: RECTL,
  aptlDest: [3]POINTL,
  xSrc: clong,
  ySrc: clong,
  cxSrc: clong,
  cySrc: clong,
  xformSrc: XFORM,
  crBkColorSrc: culong,
  iUsageSrc: culong,
  offBmiSrc: culong,
  cbBmiSrc: culong,
  offBitsSrc: culong,
  cbBitsSrc: culong,
  xMask: clong,
  yMask: clong,
  iUsageMask: culong,
  offBmiMask: culong,
  cbBmiMask: culong,
  offBitsMask: culong,
  cbBitsMask: culong
}
global EMRPLGBLT: type = @tagEMRPLGBLT
global PEMRPLGBLT: type = @*tagEMRPLGBLT
global tagEMRSETDIBITSTODEVICE: type <cimport,nodecl,ctypedef> = @record{
  emr: EMR,
  rclBounds: RECTL,
  xDest: clong,
  yDest: clong,
  xSrc: clong,
  ySrc: clong,
  cxSrc: clong,
  cySrc: clong,
  offBmiSrc: culong,
  cbBmiSrc: culong,
  offBitsSrc: culong,
  cbBitsSrc: culong,
  iUsageSrc: culong,
  iStartScan: culong,
  cScans: culong
}
global EMRSETDIBITSTODEVICE: type = @tagEMRSETDIBITSTODEVICE
global PEMRSETDIBITSTODEVICE: type = @*tagEMRSETDIBITSTODEVICE
global tagEMRSTRETCHDIBITS: type <cimport,nodecl,ctypedef> = @record{
  emr: EMR,
  rclBounds: RECTL,
  xDest: clong,
  yDest: clong,
  xSrc: clong,
  ySrc: clong,
  cxSrc: clong,
  cySrc: clong,
  offBmiSrc: culong,
  cbBmiSrc: culong,
  offBitsSrc: culong,
  cbBitsSrc: culong,
  iUsageSrc: culong,
  dwRop: culong,
  cxDest: clong,
  cyDest: clong
}
global EMRSTRETCHDIBITS: type = @tagEMRSTRETCHDIBITS
global PEMRSTRETCHDIBITS: type = @*tagEMRSTRETCHDIBITS
global tagEMREXTCREATEFONTINDIRECTW: type <cimport,nodecl,ctypedef> = @record{
  emr: EMR,
  ihFont: culong,
  elfw: EXTLOGFONTW
}
global EMREXTCREATEFONTINDIRECTW: type = @tagEMREXTCREATEFONTINDIRECTW
global PEMREXTCREATEFONTINDIRECTW: type = @*tagEMREXTCREATEFONTINDIRECTW
global tagEMRCREATEPALETTE: type <cimport,nodecl,ctypedef> = @record{
  emr: EMR,
  ihPal: culong,
  lgpl: LOGPALETTE
}
global EMRCREATEPALETTE: type = @tagEMRCREATEPALETTE
global PEMRCREATEPALETTE: type = @*tagEMRCREATEPALETTE
global tagEMRCREATEPEN: type <cimport,nodecl,ctypedef> = @record{
  emr: EMR,
  ihPen: culong,
  lopn: LOGPEN
}
global EMRCREATEPEN: type = @tagEMRCREATEPEN
global PEMRCREATEPEN: type = @*tagEMRCREATEPEN
global tagEMREXTCREATEPEN: type <cimport,nodecl,ctypedef> = @record{
  emr: EMR,
  ihPen: culong,
  offBmi: culong,
  cbBmi: culong,
  offBits: culong,
  cbBits: culong,
  elp: EXTLOGPEN
}
global EMREXTCREATEPEN: type = @tagEMREXTCREATEPEN
global PEMREXTCREATEPEN: type = @*tagEMREXTCREATEPEN
global tagEMRCREATEBRUSHINDIRECT: type <cimport,nodecl,ctypedef> = @record{
  emr: EMR,
  ihBrush: culong,
  lb: LOGBRUSH32
}
global EMRCREATEBRUSHINDIRECT: type = @tagEMRCREATEBRUSHINDIRECT
global PEMRCREATEBRUSHINDIRECT: type = @*tagEMRCREATEBRUSHINDIRECT
global tagEMRCREATEMONOBRUSH: type <cimport,nodecl,ctypedef> = @record{
  emr: EMR,
  ihBrush: culong,
  iUsage: culong,
  offBmi: culong,
  cbBmi: culong,
  offBits: culong,
  cbBits: culong
}
global EMRCREATEMONOBRUSH: type = @tagEMRCREATEMONOBRUSH
global PEMRCREATEMONOBRUSH: type = @*tagEMRCREATEMONOBRUSH
global tagEMRCREATEDIBPATTERNBRUSHPT: type <cimport,nodecl,ctypedef> = @record{
  emr: EMR,
  ihBrush: culong,
  iUsage: culong,
  offBmi: culong,
  cbBmi: culong,
  offBits: culong,
  cbBits: culong
}
global EMRCREATEDIBPATTERNBRUSHPT: type = @tagEMRCREATEDIBPATTERNBRUSHPT
global PEMRCREATEDIBPATTERNBRUSHPT: type = @*tagEMRCREATEDIBPATTERNBRUSHPT
global tagEMRFORMAT: type <cimport,nodecl,ctypedef> = @record{
  dSignature: culong,
  nVersion: culong,
  cbData: culong,
  offData: culong
}
global EMRFORMAT: type = @tagEMRFORMAT
global PEMRFORMAT: type = @*tagEMRFORMAT
global tagEMRGLSRECORD: type <cimport,nodecl,ctypedef> = @record{
  emr: EMR,
  cbData: culong,
  Data: [1]cuchar
}
global EMRGLSRECORD: type = @tagEMRGLSRECORD
global PEMRGLSRECORD: type = @*tagEMRGLSRECORD
global tagEMRGLSBOUNDEDRECORD: type <cimport,nodecl,ctypedef> = @record{
  emr: EMR,
  rclBounds: RECTL,
  cbData: culong,
  Data: [1]cuchar
}
global EMRGLSBOUNDEDRECORD: type = @tagEMRGLSBOUNDEDRECORD
global PEMRGLSBOUNDEDRECORD: type = @*tagEMRGLSBOUNDEDRECORD
global tagEMRPIXELFORMAT: type <cimport,nodecl,ctypedef> = @record{
  emr: EMR,
  pfd: PIXELFORMATDESCRIPTOR
}
global EMRPIXELFORMAT: type = @tagEMRPIXELFORMAT
global PEMRPIXELFORMAT: type = @*tagEMRPIXELFORMAT
global tagEMRCREATECOLORSPACE: type <cimport,nodecl,ctypedef> = @record{
  emr: EMR,
  ihCS: culong,
  lcs: LOGCOLORSPACEA
}
global EMRCREATECOLORSPACE: type = @tagEMRCREATECOLORSPACE
global PEMRCREATECOLORSPACE: type = @*tagEMRCREATECOLORSPACE
global tagEMRSETCOLORSPACE: type <cimport,nodecl,ctypedef> = @record{
  emr: EMR,
  ihCS: culong
}
global EMRSETCOLORSPACE: type = @tagEMRSETCOLORSPACE
global PEMRSETCOLORSPACE: type = @*tagEMRSETCOLORSPACE
global EMRSELECTCOLORSPACE: type = @tagEMRSETCOLORSPACE
global PEMRSELECTCOLORSPACE: type = @*tagEMRSETCOLORSPACE
global EMRDELETECOLORSPACE: type = @tagEMRSETCOLORSPACE
global PEMRDELETECOLORSPACE: type = @*tagEMRSETCOLORSPACE
global tagEMREXTESCAPE: type <cimport,nodecl,ctypedef> = @record{
  emr: EMR,
  iEscape: cint,
  cbEscData: cint,
  EscData: [1]cuchar
}
global EMREXTESCAPE: type = @tagEMREXTESCAPE
global PEMREXTESCAPE: type = @*tagEMREXTESCAPE
global EMRDRAWESCAPE: type = @tagEMREXTESCAPE
global PEMRDRAWESCAPE: type = @*tagEMREXTESCAPE
global tagEMRNAMEDESCAPE: type <cimport,nodecl,ctypedef> = @record{
  emr: EMR,
  iEscape: cint,
  cbDriver: cint,
  cbEscData: cint,
  EscData: [1]cuchar
}
global EMRNAMEDESCAPE: type = @tagEMRNAMEDESCAPE
global PEMRNAMEDESCAPE: type = @*tagEMRNAMEDESCAPE
global tagEMRSETICMPROFILE: type <cimport,nodecl,ctypedef> = @record{
  emr: EMR,
  dwFlags: culong,
  cbName: culong,
  cbData: culong,
  Data: [1]cuchar
}
global EMRSETICMPROFILE: type = @tagEMRSETICMPROFILE
global PEMRSETICMPROFILE: type = @*tagEMRSETICMPROFILE
global EMRSETICMPROFILEA: type = @tagEMRSETICMPROFILE
global PEMRSETICMPROFILEA: type = @*tagEMRSETICMPROFILE
global EMRSETICMPROFILEW: type = @tagEMRSETICMPROFILE
global PEMRSETICMPROFILEW: type = @*tagEMRSETICMPROFILE
global tagEMRCREATECOLORSPACEW: type <cimport,nodecl,ctypedef> = @record{
  emr: EMR,
  ihCS: culong,
  lcs: LOGCOLORSPACEW,
  dwFlags: culong,
  cbData: culong,
  Data: [1]cuchar
}
global EMRCREATECOLORSPACEW: type = @tagEMRCREATECOLORSPACEW
global PEMRCREATECOLORSPACEW: type = @*tagEMRCREATECOLORSPACEW
global tagCOLORMATCHTOTARGET: type <cimport,nodecl,ctypedef> = @record{
  emr: EMR,
  dwAction: culong,
  dwFlags: culong,
  cbName: culong,
  cbData: culong,
  Data: [1]cuchar
}
global EMRCOLORMATCHTOTARGET: type = @tagCOLORMATCHTOTARGET
global PEMRCOLORMATCHTOTARGET: type = @*tagCOLORMATCHTOTARGET
global tagCOLORCORRECTPALETTE: type <cimport,nodecl,ctypedef> = @record{
  emr: EMR,
  ihPalette: culong,
  nFirstEntry: culong,
  nPalEntries: culong,
  nReserved: culong
}
global EMRCOLORCORRECTPALETTE: type = @tagCOLORCORRECTPALETTE
global PEMRCOLORCORRECTPALETTE: type = @*tagCOLORCORRECTPALETTE
global tagEMRALPHABLEND: type <cimport,nodecl,ctypedef> = @record{
  emr: EMR,
  rclBounds: RECTL,
  xDest: clong,
  yDest: clong,
  cxDest: clong,
  cyDest: clong,
  dwRop: culong,
  xSrc: clong,
  ySrc: clong,
  xformSrc: XFORM,
  crBkColorSrc: culong,
  iUsageSrc: culong,
  offBmiSrc: culong,
  cbBmiSrc: culong,
  offBitsSrc: culong,
  cbBitsSrc: culong,
  cxSrc: clong,
  cySrc: clong
}
global EMRALPHABLEND: type = @tagEMRALPHABLEND
global PEMRALPHABLEND: type = @*tagEMRALPHABLEND
global tagEMRGRADIENTFILL: type <cimport,nodecl,ctypedef> = @record{
  emr: EMR,
  rclBounds: RECTL,
  nVer: culong,
  nTri: culong,
  ulMode: culong,
  Ver: [1]TRIVERTEX
}
global EMRGRADIENTFILL: type = @tagEMRGRADIENTFILL
global PEMRGRADIENTFILL: type = @*tagEMRGRADIENTFILL
global tagEMRTRANSPARENTBLT: type <cimport,nodecl,ctypedef> = @record{
  emr: EMR,
  rclBounds: RECTL,
  xDest: clong,
  yDest: clong,
  cxDest: clong,
  cyDest: clong,
  dwRop: culong,
  xSrc: clong,
  ySrc: clong,
  xformSrc: XFORM,
  crBkColorSrc: culong,
  iUsageSrc: culong,
  offBmiSrc: culong,
  cbBmiSrc: culong,
  offBitsSrc: culong,
  cbBitsSrc: culong,
  cxSrc: clong,
  cySrc: clong
}
global EMRTRANSPARENTBLT: type = @tagEMRTRANSPARENTBLT
global PEMRTRANSPARENTBLT: type = @*tagEMRTRANSPARENTBLT
global function wglCopyContext(a1: HGLRC, a2: HGLRC, a3: cuint): cint <cimport,nodecl> end
global function wglCreateContext(a1: HDC): HGLRC <cimport,nodecl> end
global function wglCreateLayerContext(a1: HDC, a2: cint): HGLRC <cimport,nodecl> end
global function wglDeleteContext(a1: HGLRC): cint <cimport,nodecl> end
global function wglGetCurrentContext(): HGLRC <cimport,nodecl> end
global function wglGetCurrentDC(): HDC <cimport,nodecl> end
global function wglGetProcAddress(a1: LPCSTR): PROC <cimport,nodecl> end
global function wglMakeCurrent(a1: HDC, a2: HGLRC): cint <cimport,nodecl> end
global function wglShareLists(a1: HGLRC, a2: HGLRC): cint <cimport,nodecl> end
global function wglUseFontBitmapsA(a1: HDC, a2: culong, a3: culong, a4: culong): cint <cimport,nodecl> end
global function wglUseFontBitmapsW(a1: HDC, a2: culong, a3: culong, a4: culong): cint <cimport,nodecl> end
global function SwapBuffers(a1: HDC): cint <cimport,nodecl> end
global _POINTFLOAT: type <cimport,nodecl,ctypedef> = @record{
  x: float32,
  y: float32
}
global POINTFLOAT: type = @_POINTFLOAT
global PPOINTFLOAT: type = @*_POINTFLOAT
global _GLYPHMETRICSFLOAT: type <cimport,nodecl,ctypedef> = @record{
  gmfBlackBoxX: float32,
  gmfBlackBoxY: float32,
  gmfptGlyphOrigin: POINTFLOAT,
  gmfCellIncX: float32,
  gmfCellIncY: float32
}
global GLYPHMETRICSFLOAT: type = @_GLYPHMETRICSFLOAT
global PGLYPHMETRICSFLOAT: type = @*_GLYPHMETRICSFLOAT
global LPGLYPHMETRICSFLOAT: type = @*_GLYPHMETRICSFLOAT
global function wglUseFontOutlinesA(a1: HDC, a2: culong, a3: culong, a4: culong, a5: float32, a6: float32, a7: cint, a8: LPGLYPHMETRICSFLOAT): cint <cimport,nodecl> end
global function wglUseFontOutlinesW(a1: HDC, a2: culong, a3: culong, a4: culong, a5: float32, a6: float32, a7: cint, a8: LPGLYPHMETRICSFLOAT): cint <cimport,nodecl> end
global tagLAYERPLANEDESCRIPTOR: type <cimport,nodecl,ctypedef> = @record{
  nSize: cushort,
  nVersion: cushort,
  dwFlags: culong,
  iPixelType: cuchar,
  cColorBits: cuchar,
  cRedBits: cuchar,
  cRedShift: cuchar,
  cGreenBits: cuchar,
  cGreenShift: cuchar,
  cBlueBits: cuchar,
  cBlueShift: cuchar,
  cAlphaBits: cuchar,
  cAlphaShift: cuchar,
  cAccumBits: cuchar,
  cAccumRedBits: cuchar,
  cAccumGreenBits: cuchar,
  cAccumBlueBits: cuchar,
  cAccumAlphaBits: cuchar,
  cDepthBits: cuchar,
  cStencilBits: cuchar,
  cAuxBuffers: cuchar,
  iLayerPlane: cuchar,
  bReserved: cuchar,
  crTransparent: culong
}
global LAYERPLANEDESCRIPTOR: type = @tagLAYERPLANEDESCRIPTOR
global PLAYERPLANEDESCRIPTOR: type = @*tagLAYERPLANEDESCRIPTOR
global LPLAYERPLANEDESCRIPTOR: type = @*tagLAYERPLANEDESCRIPTOR
global function wglDescribeLayerPlane(a1: HDC, a2: cint, a3: cint, a4: cuint, a5: LPLAYERPLANEDESCRIPTOR): cint <cimport,nodecl> end
global function wglSetLayerPaletteEntries(a1: HDC, a2: cint, a3: cint, a4: cint, a5: *culong): cint <cimport,nodecl> end
global function wglGetLayerPaletteEntries(a1: HDC, a2: cint, a3: cint, a4: cint, a5: *culong): cint <cimport,nodecl> end
global function wglRealizeLayerPalette(a1: HDC, a2: cint, a3: cint): cint <cimport,nodecl> end
global function wglSwapLayerBuffers(a1: HDC, a2: cuint): cint <cimport,nodecl> end
global _WGLSWAP: type <cimport,nodecl,ctypedef> = @record{
  hdc: HDC,
  uiFlags: cuint
}
global WGLSWAP: type = @_WGLSWAP
global PWGLSWAP: type = @*_WGLSWAP
global LPWGLSWAP: type = @*_WGLSWAP
global function wglSwapMultipleBuffers(a1: cuint, a2: *WGLSWAP): culong <cimport,nodecl> end
global HDWP: type = @pointer
global LPMENUTEMPLATEA: type = @pointer
global LPMENUTEMPLATEW: type = @pointer
global LPMENUTEMPLATE: type = @pointer
global WNDPROC: type <cimport,nodecl> = @function(HWND, cuint, culonglong, clonglong): clonglong
global DLGPROC: type <cimport,nodecl> = @function(HWND, cuint, culonglong, clonglong): clonglong
global TIMERPROC: type <cimport,nodecl> = @function(HWND, cuint, culonglong, culong): void
global GRAYSTRINGPROC: type <cimport,nodecl> = @function(HDC, clonglong, cint): cint
global WNDENUMPROC: type <cimport,nodecl> = @function(HWND, clonglong): cint
global HOOKPROC: type <cimport,nodecl> = @function(cint, culonglong, clonglong): clonglong
global SENDASYNCPROC: type <cimport,nodecl> = @function(HWND, cuint, culonglong, clonglong): void
global PROPENUMPROCA: type <cimport,nodecl> = @function(HWND, LPCSTR, HANDLE): cint
global PROPENUMPROCW: type <cimport,nodecl> = @function(HWND, LPCWSTR, HANDLE): cint
global PROPENUMPROCEXA: type <cimport,nodecl> = @function(HWND, LPSTR, HANDLE, culonglong): cint
global PROPENUMPROCEXW: type <cimport,nodecl> = @function(HWND, LPWSTR, HANDLE, culonglong): cint
global EDITWORDBREAKPROCA: type <cimport,nodecl> = @function(LPSTR, cint, cint, cint): cint
global EDITWORDBREAKPROCW: type <cimport,nodecl> = @function(LPWSTR, cint, cint, cint): cint
global DRAWSTATEPROC: type <cimport,nodecl> = @function(HDC, clonglong, culonglong, cint, cint): cint
global PROPENUMPROC: type <cimport,nodecl> = @function(HWND, LPCSTR, HANDLE): cint
global PROPENUMPROCEX: type <cimport,nodecl> = @function(HWND, LPSTR, HANDLE, culonglong): cint
global EDITWORDBREAKPROC: type <cimport,nodecl> = @function(LPSTR, cint, cint, cint): cint
global NAMEENUMPROCA: type <cimport,nodecl> = @function(LPSTR, clonglong): cint
global NAMEENUMPROCW: type <cimport,nodecl> = @function(LPWSTR, clonglong): cint
global WINSTAENUMPROCA: type <cimport,nodecl> = @function(LPSTR, clonglong): cint
global WINSTAENUMPROCW: type <cimport,nodecl> = @function(LPWSTR, clonglong): cint
global DESKTOPENUMPROCA: type <cimport,nodecl> = @function(LPSTR, clonglong): cint
global DESKTOPENUMPROCW: type <cimport,nodecl> = @function(LPWSTR, clonglong): cint
global WINSTAENUMPROC: type <cimport,nodecl> = @function(LPSTR, clonglong): cint
global DESKTOPENUMPROC: type <cimport,nodecl> = @function(LPSTR, clonglong): cint
global function wvsprintfA(a1: LPSTR, a2: LPCSTR, arglist: cvalist): cint <cimport,nodecl> end
global function wvsprintfW(a1: LPWSTR, a2: LPCWSTR, arglist: cvalist): cint <cimport,nodecl> end
global function wsprintfA(a1: LPSTR, a2: LPCSTR, ...: cvarargs): cint <cimport,nodecl> end
global function wsprintfW(a1: LPWSTR, a2: LPCWSTR, ...: cvarargs): cint <cimport,nodecl> end
global tagCREATESTRUCTA: type <cimport,nodecl,forwarddecl,ctypedef> = @record{}
global tagCBT_CREATEWNDA: type <cimport,nodecl,ctypedef> = @record{
  lpcs: *tagCREATESTRUCTA,
  hwndInsertAfter: HWND
}
global CBT_CREATEWNDA: type = @tagCBT_CREATEWNDA
global LPCBT_CREATEWNDA: type = @*tagCBT_CREATEWNDA
global tagCREATESTRUCTW: type <cimport,nodecl,forwarddecl,ctypedef> = @record{}
global tagCBT_CREATEWNDW: type <cimport,nodecl,ctypedef> = @record{
  lpcs: *tagCREATESTRUCTW,
  hwndInsertAfter: HWND
}
global CBT_CREATEWNDW: type = @tagCBT_CREATEWNDW
global LPCBT_CREATEWNDW: type = @*tagCBT_CREATEWNDW
global CBT_CREATEWND: type = @tagCBT_CREATEWNDA
global LPCBT_CREATEWND: type = @*tagCBT_CREATEWNDA
global tagCBTACTIVATESTRUCT: type <cimport,nodecl,ctypedef> = @record{
  fMouse: cint,
  hWndActive: HWND
}
global CBTACTIVATESTRUCT: type = @tagCBTACTIVATESTRUCT
global LPCBTACTIVATESTRUCT: type = @*tagCBTACTIVATESTRUCT
global tagWTSSESSION_NOTIFICATION: type <cimport,nodecl,ctypedef> = @record{
  cbSize: culong,
  dwSessionId: culong
}
global WTSSESSION_NOTIFICATION: type = @tagWTSSESSION_NOTIFICATION
global PWTSSESSION_NOTIFICATION: type = @*tagWTSSESSION_NOTIFICATION
global SHELLHOOKINFO: type <cimport,nodecl> = @record{
  hwnd: HWND,
  rc: RECT
}
global LPSHELLHOOKINFO: type = @*record{
  hwnd: HWND,
  rc: RECT
}
global tagEVENTMSG: type <cimport,nodecl,ctypedef> = @record{
  message: cuint,
  paramL: cuint,
  paramH: cuint,
  time: culong,
  hwnd: HWND
}
global EVENTMSG: type = @tagEVENTMSG
global PEVENTMSGMSG: type = @*tagEVENTMSG
global NPEVENTMSGMSG: type = @*tagEVENTMSG
global LPEVENTMSGMSG: type = @*tagEVENTMSG
global PEVENTMSG: type = @*tagEVENTMSG
global NPEVENTMSG: type = @*tagEVENTMSG
global LPEVENTMSG: type = @*tagEVENTMSG
global tagCWPSTRUCT: type <cimport,nodecl,ctypedef> = @record{
  lParam: clonglong,
  wParam: culonglong,
  message: cuint,
  hwnd: HWND
}
global CWPSTRUCT: type = @tagCWPSTRUCT
global PCWPSTRUCT: type = @*tagCWPSTRUCT
global NPCWPSTRUCT: type = @*tagCWPSTRUCT
global LPCWPSTRUCT: type = @*tagCWPSTRUCT
global tagCWPRETSTRUCT: type <cimport,nodecl,ctypedef> = @record{
  lResult: clonglong,
  lParam: clonglong,
  wParam: culonglong,
  message: cuint,
  hwnd: HWND
}
global CWPRETSTRUCT: type = @tagCWPRETSTRUCT
global PCWPRETSTRUCT: type = @*tagCWPRETSTRUCT
global NPCWPRETSTRUCT: type = @*tagCWPRETSTRUCT
global LPCWPRETSTRUCT: type = @*tagCWPRETSTRUCT
global tagKBDLLHOOKSTRUCT: type <cimport,nodecl,ctypedef> = @record{
  vkCode: culong,
  scanCode: culong,
  flags: culong,
  time: culong,
  dwExtraInfo: culonglong
}
global KBDLLHOOKSTRUCT: type = @tagKBDLLHOOKSTRUCT
global LPKBDLLHOOKSTRUCT: type = @*tagKBDLLHOOKSTRUCT
global PKBDLLHOOKSTRUCT: type = @*tagKBDLLHOOKSTRUCT
global tagMSLLHOOKSTRUCT: type <cimport,nodecl,ctypedef> = @record{
  pt: POINT,
  mouseData: culong,
  flags: culong,
  time: culong,
  dwExtraInfo: culonglong
}
global MSLLHOOKSTRUCT: type = @tagMSLLHOOKSTRUCT
global LPMSLLHOOKSTRUCT: type = @*tagMSLLHOOKSTRUCT
global PMSLLHOOKSTRUCT: type = @*tagMSLLHOOKSTRUCT
global tagDEBUGHOOKINFO: type <cimport,nodecl,ctypedef> = @record{
  idThread: culong,
  idThreadInstaller: culong,
  lParam: clonglong,
  wParam: culonglong,
  code: cint
}
global DEBUGHOOKINFO: type = @tagDEBUGHOOKINFO
global PDEBUGHOOKINFO: type = @*tagDEBUGHOOKINFO
global NPDEBUGHOOKINFO: type = @*tagDEBUGHOOKINFO
global LPDEBUGHOOKINFO: type = @*tagDEBUGHOOKINFO
global tagMOUSEHOOKSTRUCT: type <cimport,nodecl,ctypedef> = @record{
  pt: POINT,
  hwnd: HWND,
  wHitTestCode: cuint,
  dwExtraInfo: culonglong
}
global MOUSEHOOKSTRUCT: type = @tagMOUSEHOOKSTRUCT
global LPMOUSEHOOKSTRUCT: type = @*tagMOUSEHOOKSTRUCT
global PMOUSEHOOKSTRUCT: type = @*tagMOUSEHOOKSTRUCT
global tagMOUSEHOOKSTRUCTEX: type <cimport,nodecl,ctypedef> = @record{
  __unnamed: MOUSEHOOKSTRUCT,
  mouseData: culong
}
global MOUSEHOOKSTRUCTEX: type = @tagMOUSEHOOKSTRUCTEX
global LPMOUSEHOOKSTRUCTEX: type = @*tagMOUSEHOOKSTRUCTEX
global PMOUSEHOOKSTRUCTEX: type = @*tagMOUSEHOOKSTRUCTEX
global tagHARDWAREHOOKSTRUCT: type <cimport,nodecl,ctypedef> = @record{
  hwnd: HWND,
  message: cuint,
  wParam: culonglong,
  lParam: clonglong
}
global HARDWAREHOOKSTRUCT: type = @tagHARDWAREHOOKSTRUCT
global LPHARDWAREHOOKSTRUCT: type = @*tagHARDWAREHOOKSTRUCT
global PHARDWAREHOOKSTRUCT: type = @*tagHARDWAREHOOKSTRUCT
global function LoadKeyboardLayoutA(pwszKLID: LPCSTR, Flags: cuint): HKL <cimport,nodecl> end
global function LoadKeyboardLayoutW(pwszKLID: LPCWSTR, Flags: cuint): HKL <cimport,nodecl> end
global function ActivateKeyboardLayout(hkl: HKL, Flags: cuint): HKL <cimport,nodecl> end
global function ToUnicodeEx(wVirtKey: cuint, wScanCode: cuint, lpKeyState: *cuchar, pwszBuff: LPWSTR, cchBuff: cint, wFlags: cuint, dwhkl: HKL): cint <cimport,nodecl> end
global function UnloadKeyboardLayout(hkl: HKL): cint <cimport,nodecl> end
global function GetKeyboardLayoutNameA(pwszKLID: LPSTR): cint <cimport,nodecl> end
global function GetKeyboardLayoutNameW(pwszKLID: LPWSTR): cint <cimport,nodecl> end
global function GetKeyboardLayoutList(nBuff: cint, lpList: *HKL): cint <cimport,nodecl> end
global function GetKeyboardLayout(idThread: culong): HKL <cimport,nodecl> end
global tagMOUSEMOVEPOINT: type <cimport,nodecl,ctypedef> = @record{
  x: cint,
  y: cint,
  time: culong,
  dwExtraInfo: culonglong
}
global MOUSEMOVEPOINT: type = @tagMOUSEMOVEPOINT
global PMOUSEMOVEPOINT: type = @*tagMOUSEMOVEPOINT
global LPMOUSEMOVEPOINT: type = @*tagMOUSEMOVEPOINT
global function GetMouseMovePointsEx(cbSize: cuint, lppt: LPMOUSEMOVEPOINT, lpptBuf: LPMOUSEMOVEPOINT, nBufPoints: cint, resolution: culong): cint <cimport,nodecl> end
global function CreateDesktopA(lpszDesktop: LPCSTR, lpszDevice: LPCSTR, pDevmode: LPDEVMODEA, dwFlags: culong, dwDesiredAccess: culong, lpsa: LPSECURITY_ATTRIBUTES): HDESK <cimport,nodecl> end
global function CreateDesktopW(lpszDesktop: LPCWSTR, lpszDevice: LPCWSTR, pDevmode: LPDEVMODEW, dwFlags: culong, dwDesiredAccess: culong, lpsa: LPSECURITY_ATTRIBUTES): HDESK <cimport,nodecl> end
global function CreateDesktopExA(lpszDesktop: LPCSTR, lpszDevice: LPCSTR, pDevmode: *DEVMODEA, dwFlags: culong, dwDesiredAccess: culong, lpsa: LPSECURITY_ATTRIBUTES, ulHeapSize: culong, pvoid: PVOID): HDESK <cimport,nodecl> end
global function CreateDesktopExW(lpszDesktop: LPCWSTR, lpszDevice: LPCWSTR, pDevmode: *DEVMODEW, dwFlags: culong, dwDesiredAccess: culong, lpsa: LPSECURITY_ATTRIBUTES, ulHeapSize: culong, pvoid: PVOID): HDESK <cimport,nodecl> end
global function OpenDesktopA(lpszDesktop: LPCSTR, dwFlags: culong, fInherit: cint, dwDesiredAccess: culong): HDESK <cimport,nodecl> end
global function OpenDesktopW(lpszDesktop: LPCWSTR, dwFlags: culong, fInherit: cint, dwDesiredAccess: culong): HDESK <cimport,nodecl> end
global function OpenInputDesktop(dwFlags: culong, fInherit: cint, dwDesiredAccess: culong): HDESK <cimport,nodecl> end
global function EnumDesktopsA(hwinsta: HWINSTA, lpEnumFunc: DESKTOPENUMPROCA, lParam: clonglong): cint <cimport,nodecl> end
global function EnumDesktopsW(hwinsta: HWINSTA, lpEnumFunc: DESKTOPENUMPROCW, lParam: clonglong): cint <cimport,nodecl> end
global function EnumDesktopWindows(hDesktop: HDESK, lpfn: WNDENUMPROC, lParam: clonglong): cint <cimport,nodecl> end
global function SwitchDesktop(hDesktop: HDESK): cint <cimport,nodecl> end
global function SetThreadDesktop(hDesktop: HDESK): cint <cimport,nodecl> end
global function CloseDesktop(hDesktop: HDESK): cint <cimport,nodecl> end
global function GetThreadDesktop(dwThreadId: culong): HDESK <cimport,nodecl> end
global function CreateWindowStationA(lpwinsta: LPCSTR, dwFlags: culong, dwDesiredAccess: culong, lpsa: LPSECURITY_ATTRIBUTES): HWINSTA <cimport,nodecl> end
global function CreateWindowStationW(lpwinsta: LPCWSTR, dwFlags: culong, dwDesiredAccess: culong, lpsa: LPSECURITY_ATTRIBUTES): HWINSTA <cimport,nodecl> end
global function OpenWindowStationA(lpszWinSta: LPCSTR, fInherit: cint, dwDesiredAccess: culong): HWINSTA <cimport,nodecl> end
global function OpenWindowStationW(lpszWinSta: LPCWSTR, fInherit: cint, dwDesiredAccess: culong): HWINSTA <cimport,nodecl> end
global function EnumWindowStationsA(lpEnumFunc: WINSTAENUMPROCA, lParam: clonglong): cint <cimport,nodecl> end
global function EnumWindowStationsW(lpEnumFunc: WINSTAENUMPROCW, lParam: clonglong): cint <cimport,nodecl> end
global function CloseWindowStation(hWinSta: HWINSTA): cint <cimport,nodecl> end
global function SetProcessWindowStation(hWinSta: HWINSTA): cint <cimport,nodecl> end
global function GetProcessWindowStation(): HWINSTA <cimport,nodecl> end
global function SetUserObjectSecurity(hObj: HANDLE, pSIRequested: PSECURITY_INFORMATION, pSID: PSECURITY_DESCRIPTOR): cint <cimport,nodecl> end
global function GetUserObjectSecurity(hObj: HANDLE, pSIRequested: PSECURITY_INFORMATION, pSID: PSECURITY_DESCRIPTOR, nLength: culong, lpnLengthNeeded: LPDWORD): cint <cimport,nodecl> end
global tagUSEROBJECTFLAGS: type <cimport,nodecl,ctypedef> = @record{
  fInherit: cint,
  fReserved: cint,
  dwFlags: culong
}
global USEROBJECTFLAGS: type = @tagUSEROBJECTFLAGS
global PUSEROBJECTFLAGS: type = @*tagUSEROBJECTFLAGS
global function GetUserObjectInformationA(hObj: HANDLE, nIndex: cint, pvInfo: PVOID, nLength: culong, lpnLengthNeeded: LPDWORD): cint <cimport,nodecl> end
global function GetUserObjectInformationW(hObj: HANDLE, nIndex: cint, pvInfo: PVOID, nLength: culong, lpnLengthNeeded: LPDWORD): cint <cimport,nodecl> end
global function SetUserObjectInformationA(hObj: HANDLE, nIndex: cint, pvInfo: PVOID, nLength: culong): cint <cimport,nodecl> end
global function SetUserObjectInformationW(hObj: HANDLE, nIndex: cint, pvInfo: PVOID, nLength: culong): cint <cimport,nodecl> end
global tagWNDCLASSEXA: type <cimport,nodecl,ctypedef> = @record{
  cbSize: cuint,
  style: cuint,
  lpfnWndProc: WNDPROC,
  cbClsExtra: cint,
  cbWndExtra: cint,
  hInstance: HINSTANCE,
  hIcon: HICON,
  hCursor: HCURSOR,
  hbrBackground: HBRUSH,
  lpszMenuName: LPCSTR,
  lpszClassName: LPCSTR,
  hIconSm: HICON
}
global WNDCLASSEXA: type = @tagWNDCLASSEXA
global PWNDCLASSEXA: type = @*tagWNDCLASSEXA
global NPWNDCLASSEXA: type = @*tagWNDCLASSEXA
global LPWNDCLASSEXA: type = @*tagWNDCLASSEXA
global tagWNDCLASSEXW: type <cimport,nodecl,ctypedef> = @record{
  cbSize: cuint,
  style: cuint,
  lpfnWndProc: WNDPROC,
  cbClsExtra: cint,
  cbWndExtra: cint,
  hInstance: HINSTANCE,
  hIcon: HICON,
  hCursor: HCURSOR,
  hbrBackground: HBRUSH,
  lpszMenuName: LPCWSTR,
  lpszClassName: LPCWSTR,
  hIconSm: HICON
}
global WNDCLASSEXW: type = @tagWNDCLASSEXW
global PWNDCLASSEXW: type = @*tagWNDCLASSEXW
global NPWNDCLASSEXW: type = @*tagWNDCLASSEXW
global LPWNDCLASSEXW: type = @*tagWNDCLASSEXW
global WNDCLASSEX: type = @tagWNDCLASSEXA
global PWNDCLASSEX: type = @*tagWNDCLASSEXA
global NPWNDCLASSEX: type = @*tagWNDCLASSEXA
global LPWNDCLASSEX: type = @*tagWNDCLASSEXA
global tagWNDCLASSA: type <cimport,nodecl,ctypedef> = @record{
  style: cuint,
  lpfnWndProc: WNDPROC,
  cbClsExtra: cint,
  cbWndExtra: cint,
  hInstance: HINSTANCE,
  hIcon: HICON,
  hCursor: HCURSOR,
  hbrBackground: HBRUSH,
  lpszMenuName: LPCSTR,
  lpszClassName: LPCSTR
}
global WNDCLASSA: type = @tagWNDCLASSA
global PWNDCLASSA: type = @*tagWNDCLASSA
global NPWNDCLASSA: type = @*tagWNDCLASSA
global LPWNDCLASSA: type = @*tagWNDCLASSA
global tagWNDCLASSW: type <cimport,nodecl,ctypedef> = @record{
  style: cuint,
  lpfnWndProc: WNDPROC,
  cbClsExtra: cint,
  cbWndExtra: cint,
  hInstance: HINSTANCE,
  hIcon: HICON,
  hCursor: HCURSOR,
  hbrBackground: HBRUSH,
  lpszMenuName: LPCWSTR,
  lpszClassName: LPCWSTR
}
global WNDCLASSW: type = @tagWNDCLASSW
global PWNDCLASSW: type = @*tagWNDCLASSW
global NPWNDCLASSW: type = @*tagWNDCLASSW
global LPWNDCLASSW: type = @*tagWNDCLASSW
global WNDCLASS: type = @tagWNDCLASSA
global PWNDCLASS: type = @*tagWNDCLASSA
global NPWNDCLASS: type = @*tagWNDCLASSA
global LPWNDCLASS: type = @*tagWNDCLASSA
global function IsHungAppWindow(hwnd: HWND): cint <cimport,nodecl> end
global function DisableProcessWindowsGhosting(): void <cimport,nodecl> end
global tagMSG: type <cimport,nodecl,ctypedef> = @record{
  hwnd: HWND,
  message: cuint,
  wParam: culonglong,
  lParam: clonglong,
  time: culong,
  pt: POINT
}
global MSG: type = @tagMSG
global PMSG: type = @*tagMSG
global NPMSG: type = @*tagMSG
global LPMSG: type = @*tagMSG
global tagMINMAXINFO: type <cimport,nodecl,ctypedef> = @record{
  ptReserved: POINT,
  ptMaxSize: POINT,
  ptMaxPosition: POINT,
  ptMinTrackSize: POINT,
  ptMaxTrackSize: POINT
}
global MINMAXINFO: type = @tagMINMAXINFO
global PMINMAXINFO: type = @*tagMINMAXINFO
global LPMINMAXINFO: type = @*tagMINMAXINFO
global tagCOPYDATASTRUCT: type <cimport,nodecl,ctypedef> = @record{
  dwData: culonglong,
  cbData: culong,
  lpData: PVOID
}
global COPYDATASTRUCT: type = @tagCOPYDATASTRUCT
global PCOPYDATASTRUCT: type = @*tagCOPYDATASTRUCT
global tagMDINEXTMENU: type <cimport,nodecl,ctypedef> = @record{
  hmenuIn: HMENU,
  hmenuNext: HMENU,
  hwndNext: HWND
}
global MDINEXTMENU: type = @tagMDINEXTMENU
global PMDINEXTMENU: type = @*tagMDINEXTMENU
global LPMDINEXTMENU: type = @*tagMDINEXTMENU
global POWERBROADCAST_SETTING: type <cimport,nodecl> = @record{
  PowerSetting: GUID,
  DataLength: culong,
  Data: [1]cuchar
}
global PPOWERBROADCAST_SETTING: type = @*record{
  PowerSetting: GUID,
  DataLength: culong,
  Data: [1]cuchar
}
global function RegisterWindowMessageA(lpString: LPCSTR): cuint <cimport,nodecl> end
global function RegisterWindowMessageW(lpString: LPCWSTR): cuint <cimport,nodecl> end
global tagWINDOWPOS: type <cimport,nodecl,ctypedef> = @record{
  hwnd: HWND,
  hwndInsertAfter: HWND,
  x: cint,
  y: cint,
  cx: cint,
  cy: cint,
  flags: cuint
}
global WINDOWPOS: type = @tagWINDOWPOS
global LPWINDOWPOS: type = @*tagWINDOWPOS
global PWINDOWPOS: type = @*tagWINDOWPOS
global tagNCCALCSIZE_PARAMS: type <cimport,nodecl,ctypedef> = @record{
  rgrc: [3]RECT,
  lppos: PWINDOWPOS
}
global NCCALCSIZE_PARAMS: type = @tagNCCALCSIZE_PARAMS
global LPNCCALCSIZE_PARAMS: type = @*tagNCCALCSIZE_PARAMS
global tagTRACKMOUSEEVENT: type <cimport,nodecl,ctypedef> = @record{
  cbSize: culong,
  dwFlags: culong,
  hwndTrack: HWND,
  dwHoverTime: culong
}
global TRACKMOUSEEVENT: type = @tagTRACKMOUSEEVENT
global LPTRACKMOUSEEVENT: type = @*tagTRACKMOUSEEVENT
global function TrackMouseEvent(lpEventTrack: LPTRACKMOUSEEVENT): cint <cimport,nodecl> end
global function DrawEdge(hdc: HDC, qrc: LPRECT, edge: cuint, grfFlags: cuint): cint <cimport,nodecl> end
global function DrawFrameControl(a1: HDC, a2: LPRECT, a3: cuint, a4: cuint): cint <cimport,nodecl> end
global function DrawCaption(hwnd: HWND, hdc: HDC, lprect: *RECT, flags: cuint): cint <cimport,nodecl> end
global function DrawAnimatedRects(hwnd: HWND, idAni: cint, lprcFrom: *RECT, lprcTo: *RECT): cint <cimport,nodecl> end
global tagACCEL: type <cimport,nodecl,ctypedef> = @record{
  fVirt: cuchar,
  key: cushort,
  cmd: cushort
}
global ACCEL: type = @tagACCEL
global LPACCEL: type = @*tagACCEL
global tagPAINTSTRUCT: type <cimport,nodecl,ctypedef> = @record{
  hdc: HDC,
  fErase: cint,
  rcPaint: RECT,
  fRestore: cint,
  fIncUpdate: cint,
  rgbReserved: [32]cuchar
}
global PAINTSTRUCT: type = @tagPAINTSTRUCT
global PPAINTSTRUCT: type = @*tagPAINTSTRUCT
global NPPAINTSTRUCT: type = @*tagPAINTSTRUCT
global LPPAINTSTRUCT: type = @*tagPAINTSTRUCT
tagCREATESTRUCTA = @record{
  lpCreateParams: LPVOID,
  hInstance: HINSTANCE,
  hMenu: HMENU,
  hwndParent: HWND,
  cy: cint,
  cx: cint,
  y: cint,
  x: cint,
  style: clong,
  lpszName: LPCSTR,
  lpszClass: LPCSTR,
  dwExStyle: culong
}
global CREATESTRUCTA: type = @tagCREATESTRUCTA
global LPCREATESTRUCTA: type = @*tagCREATESTRUCTA
tagCREATESTRUCTW = @record{
  lpCreateParams: LPVOID,
  hInstance: HINSTANCE,
  hMenu: HMENU,
  hwndParent: HWND,
  cy: cint,
  cx: cint,
  y: cint,
  x: cint,
  style: clong,
  lpszName: LPCWSTR,
  lpszClass: LPCWSTR,
  dwExStyle: culong
}
global CREATESTRUCTW: type = @tagCREATESTRUCTW
global LPCREATESTRUCTW: type = @*tagCREATESTRUCTW
global CREATESTRUCT: type = @tagCREATESTRUCTA
global LPCREATESTRUCT: type = @*tagCREATESTRUCTA
global tagWINDOWPLACEMENT: type <cimport,nodecl,ctypedef> = @record{
  length: cuint,
  flags: cuint,
  showCmd: cuint,
  ptMinPosition: POINT,
  ptMaxPosition: POINT,
  rcNormalPosition: RECT
}
global WINDOWPLACEMENT: type = @tagWINDOWPLACEMENT
global PWINDOWPLACEMENT: type = @*WINDOWPLACEMENT
global LPWINDOWPLACEMENT: type = @*WINDOWPLACEMENT
global tagNMHDR: type <cimport,nodecl,ctypedef> = @record{
  hwndFrom: HWND,
  idFrom: culonglong,
  code: cuint
}
global NMHDR: type = @tagNMHDR
global LPNMHDR: type = @*NMHDR
global tagSTYLESTRUCT: type <cimport,nodecl,ctypedef> = @record{
  styleOld: culong,
  styleNew: culong
}
global STYLESTRUCT: type = @tagSTYLESTRUCT
global LPSTYLESTRUCT: type = @*tagSTYLESTRUCT
global tagMEASUREITEMSTRUCT: type <cimport,nodecl,ctypedef> = @record{
  CtlType: cuint,
  CtlID: cuint,
  itemID: cuint,
  itemWidth: cuint,
  itemHeight: cuint,
  itemData: culonglong
}
global MEASUREITEMSTRUCT: type = @tagMEASUREITEMSTRUCT
global PMEASUREITEMSTRUCT: type = @*tagMEASUREITEMSTRUCT
global LPMEASUREITEMSTRUCT: type = @*tagMEASUREITEMSTRUCT
global tagDRAWITEMSTRUCT: type <cimport,nodecl,ctypedef> = @record{
  CtlType: cuint,
  CtlID: cuint,
  itemID: cuint,
  itemAction: cuint,
  itemState: cuint,
  hwndItem: HWND,
  hDC: HDC,
  rcItem: RECT,
  itemData: culonglong
}
global DRAWITEMSTRUCT: type = @tagDRAWITEMSTRUCT
global PDRAWITEMSTRUCT: type = @*tagDRAWITEMSTRUCT
global LPDRAWITEMSTRUCT: type = @*tagDRAWITEMSTRUCT
global tagDELETEITEMSTRUCT: type <cimport,nodecl,ctypedef> = @record{
  CtlType: cuint,
  CtlID: cuint,
  itemID: cuint,
  hwndItem: HWND,
  itemData: culonglong
}
global DELETEITEMSTRUCT: type = @tagDELETEITEMSTRUCT
global PDELETEITEMSTRUCT: type = @*tagDELETEITEMSTRUCT
global LPDELETEITEMSTRUCT: type = @*tagDELETEITEMSTRUCT
global tagCOMPAREITEMSTRUCT: type <cimport,nodecl,ctypedef> = @record{
  CtlType: cuint,
  CtlID: cuint,
  hwndItem: HWND,
  itemID1: cuint,
  itemData1: culonglong,
  itemID2: cuint,
  itemData2: culonglong,
  dwLocaleId: culong
}
global COMPAREITEMSTRUCT: type = @tagCOMPAREITEMSTRUCT
global PCOMPAREITEMSTRUCT: type = @*tagCOMPAREITEMSTRUCT
global LPCOMPAREITEMSTRUCT: type = @*tagCOMPAREITEMSTRUCT
global function GetMessageA(lpMsg: LPMSG, hWnd: HWND, wMsgFilterMin: cuint, wMsgFilterMax: cuint): cint <cimport,nodecl> end
global function GetMessageW(lpMsg: LPMSG, hWnd: HWND, wMsgFilterMin: cuint, wMsgFilterMax: cuint): cint <cimport,nodecl> end
global function TranslateMessage(lpMsg: *MSG): cint <cimport,nodecl> end
global function DispatchMessageA(lpMsg: *MSG): clonglong <cimport,nodecl> end
global function DispatchMessageW(lpMsg: *MSG): clonglong <cimport,nodecl> end
global function SetMessageQueue(cMessagesMax: cint): cint <cimport,nodecl> end
global function PeekMessageA(lpMsg: LPMSG, hWnd: HWND, wMsgFilterMin: cuint, wMsgFilterMax: cuint, wRemoveMsg: cuint): cint <cimport,nodecl> end
global function PeekMessageW(lpMsg: LPMSG, hWnd: HWND, wMsgFilterMin: cuint, wMsgFilterMax: cuint, wRemoveMsg: cuint): cint <cimport,nodecl> end
global function RegisterHotKey(hWnd: HWND, id: cint, fsModifiers: cuint, vk: cuint): cint <cimport,nodecl> end
global function UnregisterHotKey(hWnd: HWND, id: cint): cint <cimport,nodecl> end
global function ExitWindowsEx(uFlags: cuint, dwReason: culong): cint <cimport,nodecl> end
global function SwapMouseButton(fSwap: cint): cint <cimport,nodecl> end
global function GetMessagePos(): culong <cimport,nodecl> end
global function GetMessageTime(): clong <cimport,nodecl> end
global function GetMessageExtraInfo(): clonglong <cimport,nodecl> end
global function IsWow64Message(): cint <cimport,nodecl> end
global function SetMessageExtraInfo(lParam: clonglong): clonglong <cimport,nodecl> end
global function SendMessageA(hWnd: HWND, Msg: cuint, wParam: culonglong, lParam: clonglong): clonglong <cimport,nodecl> end
global function SendMessageW(hWnd: HWND, Msg: cuint, wParam: culonglong, lParam: clonglong): clonglong <cimport,nodecl> end
global function SendMessageTimeoutA(hWnd: HWND, Msg: cuint, wParam: culonglong, lParam: clonglong, fuFlags: cuint, uTimeout: cuint, lpdwResult: PDWORD_PTR): clonglong <cimport,nodecl> end
global function SendMessageTimeoutW(hWnd: HWND, Msg: cuint, wParam: culonglong, lParam: clonglong, fuFlags: cuint, uTimeout: cuint, lpdwResult: PDWORD_PTR): clonglong <cimport,nodecl> end
global function SendNotifyMessageA(hWnd: HWND, Msg: cuint, wParam: culonglong, lParam: clonglong): cint <cimport,nodecl> end
global function SendNotifyMessageW(hWnd: HWND, Msg: cuint, wParam: culonglong, lParam: clonglong): cint <cimport,nodecl> end
global function SendMessageCallbackA(hWnd: HWND, Msg: cuint, wParam: culonglong, lParam: clonglong, lpResultCallBack: SENDASYNCPROC, dwData: culonglong): cint <cimport,nodecl> end
global function SendMessageCallbackW(hWnd: HWND, Msg: cuint, wParam: culonglong, lParam: clonglong, lpResultCallBack: SENDASYNCPROC, dwData: culonglong): cint <cimport,nodecl> end
global BSMINFO: type <cimport,nodecl> = @record{
  cbSize: cuint,
  hdesk: HDESK,
  hwnd: HWND,
  luid: LUID
}
global PBSMINFO: type = @*record{
  cbSize: cuint,
  hdesk: HDESK,
  hwnd: HWND,
  luid: LUID
}
global function BroadcastSystemMessageExA(flags: culong, lpInfo: LPDWORD, Msg: cuint, wParam: culonglong, lParam: clonglong, pbsmInfo: PBSMINFO): clong <cimport,nodecl> end
global function BroadcastSystemMessageExW(flags: culong, lpInfo: LPDWORD, Msg: cuint, wParam: culonglong, lParam: clonglong, pbsmInfo: PBSMINFO): clong <cimport,nodecl> end
global function BroadcastSystemMessageA(flags: culong, lpInfo: LPDWORD, Msg: cuint, wParam: culonglong, lParam: clonglong): clong <cimport,nodecl> end
global function BroadcastSystemMessageW(flags: culong, lpInfo: LPDWORD, Msg: cuint, wParam: culonglong, lParam: clonglong): clong <cimport,nodecl> end
global HDEVNOTIFY: type = @pointer
global PHDEVNOTIFY: type = @*HDEVNOTIFY
global HPOWERNOTIFY: type = @pointer
global PHPOWERNOTIFY: type = @*HPOWERNOTIFY
global function RegisterPowerSettingNotification(hRecipient: HANDLE, PowerSettingGuid: LPCGUID, Flags: culong): HPOWERNOTIFY <cimport,nodecl> end
global function UnregisterPowerSettingNotification(Handle: HPOWERNOTIFY): cint <cimport,nodecl> end
global function RegisterSuspendResumeNotification(hRecipient: HANDLE, Flags: culong): HPOWERNOTIFY <cimport,nodecl> end
global function UnregisterSuspendResumeNotification(Handle: HPOWERNOTIFY): cint <cimport,nodecl> end
global function PostMessageA(hWnd: HWND, Msg: cuint, wParam: culonglong, lParam: clonglong): cint <cimport,nodecl> end
global function PostMessageW(hWnd: HWND, Msg: cuint, wParam: culonglong, lParam: clonglong): cint <cimport,nodecl> end
global function PostThreadMessageA(idThread: culong, Msg: cuint, wParam: culonglong, lParam: clonglong): cint <cimport,nodecl> end
global function PostThreadMessageW(idThread: culong, Msg: cuint, wParam: culonglong, lParam: clonglong): cint <cimport,nodecl> end
global function AttachThreadInput(idAttach: culong, idAttachTo: culong, fAttach: cint): cint <cimport,nodecl> end
global function ReplyMessage(lResult: clonglong): cint <cimport,nodecl> end
global function WaitMessage(): cint <cimport,nodecl> end
global function WaitForInputIdle(hProcess: HANDLE, dwMilliseconds: culong): culong <cimport,nodecl> end
global function DefWindowProcA(hWnd: HWND, Msg: cuint, wParam: culonglong, lParam: clonglong): clonglong <cimport,nodecl> end
global function DefWindowProcW(hWnd: HWND, Msg: cuint, wParam: culonglong, lParam: clonglong): clonglong <cimport,nodecl> end
global function PostQuitMessage(nExitCode: cint): void <cimport,nodecl> end
global function InSendMessage(): cint <cimport,nodecl> end
global function InSendMessageEx(lpReserved: LPVOID): culong <cimport,nodecl> end
global function GetDoubleClickTime(): cuint <cimport,nodecl> end
global function SetDoubleClickTime(a1: cuint): cint <cimport,nodecl> end
global function RegisterClassA(lpWndClass: *WNDCLASSA): cushort <cimport,nodecl> end
global function RegisterClassW(lpWndClass: *WNDCLASSW): cushort <cimport,nodecl> end
global function UnregisterClassA(lpClassName: LPCSTR, hInstance: HINSTANCE): cint <cimport,nodecl> end
global function UnregisterClassW(lpClassName: LPCWSTR, hInstance: HINSTANCE): cint <cimport,nodecl> end
global function GetClassInfoA(hInstance: HINSTANCE, lpClassName: LPCSTR, lpWndClass: LPWNDCLASSA): cint <cimport,nodecl> end
global function GetClassInfoW(hInstance: HINSTANCE, lpClassName: LPCWSTR, lpWndClass: LPWNDCLASSW): cint <cimport,nodecl> end
global function RegisterClassExA(a1: *WNDCLASSEXA): cushort <cimport,nodecl> end
global function RegisterClassExW(a1: *WNDCLASSEXW): cushort <cimport,nodecl> end
global function GetClassInfoExA(hInstance: HINSTANCE, lpszClass: LPCSTR, lpwcx: LPWNDCLASSEXA): cint <cimport,nodecl> end
global function GetClassInfoExW(hInstance: HINSTANCE, lpszClass: LPCWSTR, lpwcx: LPWNDCLASSEXW): cint <cimport,nodecl> end
global function CallWindowProcA(lpPrevWndFunc: WNDPROC, hWnd: HWND, Msg: cuint, wParam: culonglong, lParam: clonglong): clonglong <cimport,nodecl> end
global function CallWindowProcW(lpPrevWndFunc: WNDPROC, hWnd: HWND, Msg: cuint, wParam: culonglong, lParam: clonglong): clonglong <cimport,nodecl> end
global function RegisterDeviceNotificationA(hRecipient: HANDLE, NotificationFilter: LPVOID, Flags: culong): HDEVNOTIFY <cimport,nodecl> end
global function RegisterDeviceNotificationW(hRecipient: HANDLE, NotificationFilter: LPVOID, Flags: culong): HDEVNOTIFY <cimport,nodecl> end
global function UnregisterDeviceNotification(Handle: HDEVNOTIFY): cint <cimport,nodecl> end
global PREGISTERCLASSNAMEW: type <cimport,nodecl> = @function(LPCWSTR): BOOLEAN
global function CreateWindowExA(dwExStyle: culong, lpClassName: LPCSTR, lpWindowName: LPCSTR, dwStyle: culong, X: cint, Y: cint, nWidth: cint, nHeight: cint, hWndParent: HWND, hMenu: HMENU, hInstance: HINSTANCE, lpParam: LPVOID): HWND <cimport,nodecl> end
global function CreateWindowExW(dwExStyle: culong, lpClassName: LPCWSTR, lpWindowName: LPCWSTR, dwStyle: culong, X: cint, Y: cint, nWidth: cint, nHeight: cint, hWndParent: HWND, hMenu: HMENU, hInstance: HINSTANCE, lpParam: LPVOID): HWND <cimport,nodecl> end
global function IsWindow(hWnd: HWND): cint <cimport,nodecl> end
global function IsMenu(hMenu: HMENU): cint <cimport,nodecl> end
global function IsChild(hWndParent: HWND, hWnd: HWND): cint <cimport,nodecl> end
global function DestroyWindow(hWnd: HWND): cint <cimport,nodecl> end
global function ShowWindow(hWnd: HWND, nCmdShow: cint): cint <cimport,nodecl> end
global function AnimateWindow(hWnd: HWND, dwTime: culong, dwFlags: culong): cint <cimport,nodecl> end
global function UpdateLayeredWindow(hWnd: HWND, hdcDst: HDC, pptDst: *POINT, psize: *SIZE, hdcSrc: HDC, pptSrc: *POINT, crKey: culong, pblend: *BLENDFUNCTION, dwFlags: culong): cint <cimport,nodecl> end
global tagUPDATELAYEREDWINDOWINFO: type <cimport,nodecl,ctypedef> = @record{
  cbSize: culong,
  hdcDst: HDC,
  pptDst: *POINT,
  psize: *SIZE,
  hdcSrc: HDC,
  pptSrc: *POINT,
  crKey: culong,
  pblend: *BLENDFUNCTION,
  dwFlags: culong,
  prcDirty: *RECT
}
global UPDATELAYEREDWINDOWINFO: type = @tagUPDATELAYEREDWINDOWINFO
global PUPDATELAYEREDWINDOWINFO: type = @*tagUPDATELAYEREDWINDOWINFO
global function UpdateLayeredWindowIndirect(hWnd: HWND, pULWInfo: *UPDATELAYEREDWINDOWINFO): cint <cimport,nodecl> end
global function GetLayeredWindowAttributes(hwnd: HWND, pcrKey: *culong, pbAlpha: *cuchar, pdwFlags: *culong): cint <cimport,nodecl> end
global function PrintWindow(hwnd: HWND, hdcBlt: HDC, nFlags: cuint): cint <cimport,nodecl> end
global function SetLayeredWindowAttributes(hwnd: HWND, crKey: culong, bAlpha: cuchar, dwFlags: culong): cint <cimport,nodecl> end
global FLASHWINFO: type <cimport,nodecl> = @record{
  cbSize: cuint,
  hwnd: HWND,
  dwFlags: culong,
  uCount: cuint,
  dwTimeout: culong
}
global PFLASHWINFO: type = @*record{
  cbSize: cuint,
  hwnd: HWND,
  dwFlags: culong,
  uCount: cuint,
  dwTimeout: culong
}
global function ShowWindowAsync(hWnd: HWND, nCmdShow: cint): cint <cimport,nodecl> end
global function FlashWindow(hWnd: HWND, bInvert: cint): cint <cimport,nodecl> end
global function FlashWindowEx(pfwi: PFLASHWINFO): cint <cimport,nodecl> end
global function ShowOwnedPopups(hWnd: HWND, fShow: cint): cint <cimport,nodecl> end
global function OpenIcon(hWnd: HWND): cint <cimport,nodecl> end
global function CloseWindow(hWnd: HWND): cint <cimport,nodecl> end
global function MoveWindow(hWnd: HWND, X: cint, Y: cint, nWidth: cint, nHeight: cint, bRepaint: cint): cint <cimport,nodecl> end
global function SetWindowPos(hWnd: HWND, hWndInsertAfter: HWND, X: cint, Y: cint, cx: cint, cy: cint, uFlags: cuint): cint <cimport,nodecl> end
global function GetWindowPlacement(hWnd: HWND, lpwndpl: *WINDOWPLACEMENT): cint <cimport,nodecl> end
global function SetWindowPlacement(hWnd: HWND, lpwndpl: *WINDOWPLACEMENT): cint <cimport,nodecl> end
global function BeginDeferWindowPos(nNumWindows: cint): HDWP <cimport,nodecl> end
global function DeferWindowPos(hWinPosInfo: HDWP, hWnd: HWND, hWndInsertAfter: HWND, x: cint, y: cint, cx: cint, cy: cint, uFlags: cuint): HDWP <cimport,nodecl> end
global function EndDeferWindowPos(hWinPosInfo: HDWP): cint <cimport,nodecl> end
global function IsWindowVisible(hWnd: HWND): cint <cimport,nodecl> end
global function IsIconic(hWnd: HWND): cint <cimport,nodecl> end
global function AnyPopup(): cint <cimport,nodecl> end
global function BringWindowToTop(hWnd: HWND): cint <cimport,nodecl> end
global function IsZoomed(hWnd: HWND): cint <cimport,nodecl> end
global DLGTEMPLATE: type <cimport,nodecl> = @record{
  style: culong,
  dwExtendedStyle: culong,
  cdit: cushort,
  x: cshort,
  y: cshort,
  cx: cshort,
  cy: cshort
}
global LPDLGTEMPLATEA: type = @*DLGTEMPLATE
global LPDLGTEMPLATEW: type = @*DLGTEMPLATE
global LPDLGTEMPLATE: type = @*DLGTEMPLATE
global LPCDLGTEMPLATEA: type = @*DLGTEMPLATE
global LPCDLGTEMPLATEW: type = @*DLGTEMPLATE
global LPCDLGTEMPLATE: type = @*DLGTEMPLATE
global DLGITEMTEMPLATE: type <cimport,nodecl> = @record{
  style: culong,
  dwExtendedStyle: culong,
  x: cshort,
  y: cshort,
  cx: cshort,
  cy: cshort,
  id: cushort
}
global PDLGITEMTEMPLATEA: type = @*DLGITEMTEMPLATE
global PDLGITEMTEMPLATEW: type = @*DLGITEMTEMPLATE
global PDLGITEMTEMPLATE: type = @*DLGITEMTEMPLATE
global LPDLGITEMTEMPLATEA: type = @*DLGITEMTEMPLATE
global LPDLGITEMTEMPLATEW: type = @*DLGITEMTEMPLATE
global LPDLGITEMTEMPLATE: type = @*DLGITEMTEMPLATE
global function CreateDialogParamA(hInstance: HINSTANCE, lpTemplateName: LPCSTR, hWndParent: HWND, lpDialogFunc: DLGPROC, dwInitParam: clonglong): HWND <cimport,nodecl> end
global function CreateDialogParamW(hInstance: HINSTANCE, lpTemplateName: LPCWSTR, hWndParent: HWND, lpDialogFunc: DLGPROC, dwInitParam: clonglong): HWND <cimport,nodecl> end
global function CreateDialogIndirectParamA(hInstance: HINSTANCE, lpTemplate: LPCDLGTEMPLATEA, hWndParent: HWND, lpDialogFunc: DLGPROC, dwInitParam: clonglong): HWND <cimport,nodecl> end
global function CreateDialogIndirectParamW(hInstance: HINSTANCE, lpTemplate: LPCDLGTEMPLATEW, hWndParent: HWND, lpDialogFunc: DLGPROC, dwInitParam: clonglong): HWND <cimport,nodecl> end
global function DialogBoxParamA(hInstance: HINSTANCE, lpTemplateName: LPCSTR, hWndParent: HWND, lpDialogFunc: DLGPROC, dwInitParam: clonglong): clonglong <cimport,nodecl> end
global function DialogBoxParamW(hInstance: HINSTANCE, lpTemplateName: LPCWSTR, hWndParent: HWND, lpDialogFunc: DLGPROC, dwInitParam: clonglong): clonglong <cimport,nodecl> end
global function DialogBoxIndirectParamA(hInstance: HINSTANCE, hDialogTemplate: LPCDLGTEMPLATEA, hWndParent: HWND, lpDialogFunc: DLGPROC, dwInitParam: clonglong): clonglong <cimport,nodecl> end
global function DialogBoxIndirectParamW(hInstance: HINSTANCE, hDialogTemplate: LPCDLGTEMPLATEW, hWndParent: HWND, lpDialogFunc: DLGPROC, dwInitParam: clonglong): clonglong <cimport,nodecl> end
global function EndDialog(hDlg: HWND, nResult: clonglong): cint <cimport,nodecl> end
global function GetDlgItem(hDlg: HWND, nIDDlgItem: cint): HWND <cimport,nodecl> end
global function SetDlgItemInt(hDlg: HWND, nIDDlgItem: cint, uValue: cuint, bSigned: cint): cint <cimport,nodecl> end
global function GetDlgItemInt(hDlg: HWND, nIDDlgItem: cint, lpTranslated: *cint, bSigned: cint): cuint <cimport,nodecl> end
global function SetDlgItemTextA(hDlg: HWND, nIDDlgItem: cint, lpString: LPCSTR): cint <cimport,nodecl> end
global function SetDlgItemTextW(hDlg: HWND, nIDDlgItem: cint, lpString: LPCWSTR): cint <cimport,nodecl> end
global function GetDlgItemTextA(hDlg: HWND, nIDDlgItem: cint, lpString: LPSTR, cchMax: cint): cuint <cimport,nodecl> end
global function GetDlgItemTextW(hDlg: HWND, nIDDlgItem: cint, lpString: LPWSTR, cchMax: cint): cuint <cimport,nodecl> end
global function CheckDlgButton(hDlg: HWND, nIDButton: cint, uCheck: cuint): cint <cimport,nodecl> end
global function CheckRadioButton(hDlg: HWND, nIDFirstButton: cint, nIDLastButton: cint, nIDCheckButton: cint): cint <cimport,nodecl> end
global function IsDlgButtonChecked(hDlg: HWND, nIDButton: cint): cuint <cimport,nodecl> end
global function SendDlgItemMessageA(hDlg: HWND, nIDDlgItem: cint, Msg: cuint, wParam: culonglong, lParam: clonglong): clonglong <cimport,nodecl> end
global function SendDlgItemMessageW(hDlg: HWND, nIDDlgItem: cint, Msg: cuint, wParam: culonglong, lParam: clonglong): clonglong <cimport,nodecl> end
global function GetNextDlgGroupItem(hDlg: HWND, hCtl: HWND, bPrevious: cint): HWND <cimport,nodecl> end
global function GetNextDlgTabItem(hDlg: HWND, hCtl: HWND, bPrevious: cint): HWND <cimport,nodecl> end
global function GetDlgCtrlID(hWnd: HWND): cint <cimport,nodecl> end
global function GetDialogBaseUnits(): clong <cimport,nodecl> end
global function DefDlgProcA(hDlg: HWND, Msg: cuint, wParam: culonglong, lParam: clonglong): clonglong <cimport,nodecl> end
global function DefDlgProcW(hDlg: HWND, Msg: cuint, wParam: culonglong, lParam: clonglong): clonglong <cimport,nodecl> end
global DIALOG_CONTROL_DPI_CHANGE_BEHAVIORS: type <cimport,nodecl,using> = @enum(cint){
  DCDC_DEFAULT = 0,
  DCDC_DISABLE_FONT_UPDATE = 1,
  DCDC_DISABLE_RELAYOUT = 2
}
global function SetDialogControlDpiChangeBehavior(hWnd: HWND, mask: DIALOG_CONTROL_DPI_CHANGE_BEHAVIORS, values: DIALOG_CONTROL_DPI_CHANGE_BEHAVIORS): cint <cimport,nodecl> end
global function GetDialogControlDpiChangeBehavior(hWnd: HWND): DIALOG_CONTROL_DPI_CHANGE_BEHAVIORS <cimport,nodecl> end
global DIALOG_DPI_CHANGE_BEHAVIORS: type <cimport,nodecl,using> = @enum(cint){
  DDC_DEFAULT = 0,
  DDC_DISABLE_ALL = 1,
  DDC_DISABLE_RESIZE = 2,
  DDC_DISABLE_CONTROL_RELAYOUT = 4
}
global function SetDialogDpiChangeBehavior(hDlg: HWND, mask: DIALOG_DPI_CHANGE_BEHAVIORS, values: DIALOG_DPI_CHANGE_BEHAVIORS): cint <cimport,nodecl> end
global function GetDialogDpiChangeBehavior(hDlg: HWND): DIALOG_DPI_CHANGE_BEHAVIORS <cimport,nodecl> end
global function CallMsgFilterA(lpMsg: LPMSG, nCode: cint): cint <cimport,nodecl> end
global function CallMsgFilterW(lpMsg: LPMSG, nCode: cint): cint <cimport,nodecl> end
global function OpenClipboard(hWndNewOwner: HWND): cint <cimport,nodecl> end
global function CloseClipboard(): cint <cimport,nodecl> end
global function GetClipboardSequenceNumber(): culong <cimport,nodecl> end
global function GetClipboardOwner(): HWND <cimport,nodecl> end
global function SetClipboardViewer(hWndNewViewer: HWND): HWND <cimport,nodecl> end
global function GetClipboardViewer(): HWND <cimport,nodecl> end
global function ChangeClipboardChain(hWndRemove: HWND, hWndNewNext: HWND): cint <cimport,nodecl> end
global function SetClipboardData(uFormat: cuint, hMem: HANDLE): HANDLE <cimport,nodecl> end
global function GetClipboardData(uFormat: cuint): HANDLE <cimport,nodecl> end
global function RegisterClipboardFormatA(lpszFormat: LPCSTR): cuint <cimport,nodecl> end
global function RegisterClipboardFormatW(lpszFormat: LPCWSTR): cuint <cimport,nodecl> end
global function CountClipboardFormats(): cint <cimport,nodecl> end
global function EnumClipboardFormats(format: cuint): cuint <cimport,nodecl> end
global function GetClipboardFormatNameA(format: cuint, lpszFormatName: LPSTR, cchMaxCount: cint): cint <cimport,nodecl> end
global function GetClipboardFormatNameW(format: cuint, lpszFormatName: LPWSTR, cchMaxCount: cint): cint <cimport,nodecl> end
global function EmptyClipboard(): cint <cimport,nodecl> end
global function IsClipboardFormatAvailable(format: cuint): cint <cimport,nodecl> end
global function GetPriorityClipboardFormat(paFormatPriorityList: *cuint, cFormats: cint): cint <cimport,nodecl> end
global function GetOpenClipboardWindow(): HWND <cimport,nodecl> end
global function AddClipboardFormatListener(hwnd: HWND): cint <cimport,nodecl> end
global function RemoveClipboardFormatListener(hwnd: HWND): cint <cimport,nodecl> end
global function GetUpdatedClipboardFormats(lpuiFormats: PUINT, cFormats: cuint, pcFormatsOut: PUINT): cint <cimport,nodecl> end
global function CharToOemA(lpszSrc: LPCSTR, lpszDst: LPSTR): cint <cimport,nodecl> end
global function CharToOemW(lpszSrc: LPCWSTR, lpszDst: LPSTR): cint <cimport,nodecl> end
global function OemToCharA(lpszSrc: LPCSTR, lpszDst: LPSTR): cint <cimport,nodecl> end
global function OemToCharW(lpszSrc: LPCSTR, lpszDst: LPWSTR): cint <cimport,nodecl> end
global function CharToOemBuffA(lpszSrc: LPCSTR, lpszDst: LPSTR, cchDstLength: culong): cint <cimport,nodecl> end
global function CharToOemBuffW(lpszSrc: LPCWSTR, lpszDst: LPSTR, cchDstLength: culong): cint <cimport,nodecl> end
global function OemToCharBuffA(lpszSrc: LPCSTR, lpszDst: LPSTR, cchDstLength: culong): cint <cimport,nodecl> end
global function OemToCharBuffW(lpszSrc: LPCSTR, lpszDst: LPWSTR, cchDstLength: culong): cint <cimport,nodecl> end
global function CharUpperA(lpsz: LPSTR): LPSTR <cimport,nodecl> end
global function CharUpperW(lpsz: LPWSTR): LPWSTR <cimport,nodecl> end
global function CharUpperBuffA(lpsz: LPSTR, cchLength: culong): culong <cimport,nodecl> end
global function CharUpperBuffW(lpsz: LPWSTR, cchLength: culong): culong <cimport,nodecl> end
global function CharLowerA(lpsz: LPSTR): LPSTR <cimport,nodecl> end
global function CharLowerW(lpsz: LPWSTR): LPWSTR <cimport,nodecl> end
global function CharLowerBuffA(lpsz: LPSTR, cchLength: culong): culong <cimport,nodecl> end
global function CharLowerBuffW(lpsz: LPWSTR, cchLength: culong): culong <cimport,nodecl> end
global function CharNextA(lpsz: LPCSTR): LPSTR <cimport,nodecl> end
global function CharNextW(lpsz: LPCWSTR): LPWSTR <cimport,nodecl> end
global function CharPrevA(lpszStart: LPCSTR, lpszCurrent: LPCSTR): LPSTR <cimport,nodecl> end
global function CharPrevW(lpszStart: LPCWSTR, lpszCurrent: LPCWSTR): LPWSTR <cimport,nodecl> end
global function CharNextExA(CodePage: cushort, lpCurrentChar: LPCSTR, dwFlags: culong): LPSTR <cimport,nodecl> end
global function CharPrevExA(CodePage: cushort, lpStart: LPCSTR, lpCurrentChar: LPCSTR, dwFlags: culong): LPSTR <cimport,nodecl> end
global function IsCharAlphaA(ch: cchar): cint <cimport,nodecl> end
global function IsCharAlphaW(ch: cwchar_t): cint <cimport,nodecl> end
global function IsCharAlphaNumericA(ch: cchar): cint <cimport,nodecl> end
global function IsCharAlphaNumericW(ch: cwchar_t): cint <cimport,nodecl> end
global function IsCharUpperA(ch: cchar): cint <cimport,nodecl> end
global function IsCharUpperW(ch: cwchar_t): cint <cimport,nodecl> end
global function IsCharLowerA(ch: cchar): cint <cimport,nodecl> end
global function IsCharLowerW(ch: cwchar_t): cint <cimport,nodecl> end
global function SetFocus(hWnd: HWND): HWND <cimport,nodecl> end
global function GetActiveWindow(): HWND <cimport,nodecl> end
global function GetFocus(): HWND <cimport,nodecl> end
global function GetKBCodePage(): cuint <cimport,nodecl> end
global function GetKeyState(nVirtKey: cint): cshort <cimport,nodecl> end
global function GetAsyncKeyState(vKey: cint): cshort <cimport,nodecl> end
global function GetKeyboardState(lpKeyState: PBYTE): cint <cimport,nodecl> end
global function SetKeyboardState(lpKeyState: LPBYTE): cint <cimport,nodecl> end
global function GetKeyNameTextA(lParam: clong, lpString: LPSTR, cchSize: cint): cint <cimport,nodecl> end
global function GetKeyNameTextW(lParam: clong, lpString: LPWSTR, cchSize: cint): cint <cimport,nodecl> end
global function GetKeyboardType(nTypeFlag: cint): cint <cimport,nodecl> end
global function ToAscii(uVirtKey: cuint, uScanCode: cuint, lpKeyState: *cuchar, lpChar: LPWORD, uFlags: cuint): cint <cimport,nodecl> end
global function ToAsciiEx(uVirtKey: cuint, uScanCode: cuint, lpKeyState: *cuchar, lpChar: LPWORD, uFlags: cuint, dwhkl: HKL): cint <cimport,nodecl> end
global function ToUnicode(wVirtKey: cuint, wScanCode: cuint, lpKeyState: *cuchar, pwszBuff: LPWSTR, cchBuff: cint, wFlags: cuint): cint <cimport,nodecl> end
global function OemKeyScan(wOemChar: cushort): culong <cimport,nodecl> end
global function VkKeyScanA(ch: cchar): cshort <cimport,nodecl> end
global function VkKeyScanW(ch: cwchar_t): cshort <cimport,nodecl> end
global function VkKeyScanExA(ch: cchar, dwhkl: HKL): cshort <cimport,nodecl> end
global function VkKeyScanExW(ch: cwchar_t, dwhkl: HKL): cshort <cimport,nodecl> end
global tagMOUSEINPUT: type <cimport,nodecl,ctypedef> = @record{
  dx: clong,
  dy: clong,
  mouseData: culong,
  dwFlags: culong,
  time: culong,
  dwExtraInfo: culonglong
}
global MOUSEINPUT: type = @tagMOUSEINPUT
global PMOUSEINPUT: type = @*tagMOUSEINPUT
global LPMOUSEINPUT: type = @*tagMOUSEINPUT
global tagKEYBDINPUT: type <cimport,nodecl,ctypedef> = @record{
  wVk: cushort,
  wScan: cushort,
  dwFlags: culong,
  time: culong,
  dwExtraInfo: culonglong
}
global KEYBDINPUT: type = @tagKEYBDINPUT
global PKEYBDINPUT: type = @*tagKEYBDINPUT
global LPKEYBDINPUT: type = @*tagKEYBDINPUT
global tagHARDWAREINPUT: type <cimport,nodecl,ctypedef> = @record{
  uMsg: culong,
  wParamL: cushort,
  wParamH: cushort
}
global HARDWAREINPUT: type = @tagHARDWAREINPUT
global PHARDWAREINPUT: type = @*tagHARDWAREINPUT
global LPHARDWAREINPUT: type = @*tagHARDWAREINPUT
global tagINPUT: type <cimport,nodecl,ctypedef> = @record{
  type: culong,
  __unnamed1: union{
    mi: MOUSEINPUT,
    ki: KEYBDINPUT,
    hi: HARDWAREINPUT
  }
}
global INPUT: type = @tagINPUT
global PINPUT: type = @*tagINPUT
global LPINPUT: type = @*tagINPUT
global function SendInput(cInputs: cuint, pInputs: LPINPUT, cbSize: cint): cuint <cimport,nodecl> end
global function EnableMouseInPointerForThread(): cint <cimport,nodecl> end
global tagLASTINPUTINFO: type <cimport,nodecl,ctypedef> = @record{
  cbSize: cuint,
  dwTime: culong
}
global LASTINPUTINFO: type = @tagLASTINPUTINFO
global PLASTINPUTINFO: type = @*tagLASTINPUTINFO
global function GetLastInputInfo(plii: PLASTINPUTINFO): cint <cimport,nodecl> end
global function MapVirtualKeyA(uCode: cuint, uMapType: cuint): cuint <cimport,nodecl> end
global function MapVirtualKeyW(uCode: cuint, uMapType: cuint): cuint <cimport,nodecl> end
global function MapVirtualKeyExA(uCode: cuint, uMapType: cuint, dwhkl: HKL): cuint <cimport,nodecl> end
global function MapVirtualKeyExW(uCode: cuint, uMapType: cuint, dwhkl: HKL): cuint <cimport,nodecl> end
global function GetInputState(): cint <cimport,nodecl> end
global function GetQueueStatus(flags: cuint): culong <cimport,nodecl> end
global function GetCapture(): HWND <cimport,nodecl> end
global function SetCapture(hWnd: HWND): HWND <cimport,nodecl> end
global function ReleaseCapture(): cint <cimport,nodecl> end
global function MsgWaitForMultipleObjects(nCount: culong, pHandles: *HANDLE, fWaitAll: cint, dwMilliseconds: culong, dwWakeMask: culong): culong <cimport,nodecl> end
global function MsgWaitForMultipleObjectsEx(nCount: culong, pHandles: *HANDLE, dwMilliseconds: culong, dwWakeMask: culong, dwFlags: culong): culong <cimport,nodecl> end
global function SetTimer(hWnd: HWND, nIDEvent: culonglong, uElapse: cuint, lpTimerFunc: TIMERPROC): culonglong <cimport,nodecl> end
global function KillTimer(hWnd: HWND, uIDEvent: culonglong): cint <cimport,nodecl> end
global function IsWindowUnicode(hWnd: HWND): cint <cimport,nodecl> end
global function EnableWindow(hWnd: HWND, bEnable: cint): cint <cimport,nodecl> end
global function IsWindowEnabled(hWnd: HWND): cint <cimport,nodecl> end
global function LoadAcceleratorsA(hInstance: HINSTANCE, lpTableName: LPCSTR): HACCEL <cimport,nodecl> end
global function LoadAcceleratorsW(hInstance: HINSTANCE, lpTableName: LPCWSTR): HACCEL <cimport,nodecl> end
global function CreateAcceleratorTableA(paccel: LPACCEL, cAccel: cint): HACCEL <cimport,nodecl> end
global function CreateAcceleratorTableW(paccel: LPACCEL, cAccel: cint): HACCEL <cimport,nodecl> end
global function DestroyAcceleratorTable(hAccel: HACCEL): cint <cimport,nodecl> end
global function CopyAcceleratorTableA(hAccelSrc: HACCEL, lpAccelDst: LPACCEL, cAccelEntries: cint): cint <cimport,nodecl> end
global function CopyAcceleratorTableW(hAccelSrc: HACCEL, lpAccelDst: LPACCEL, cAccelEntries: cint): cint <cimport,nodecl> end
global function TranslateAcceleratorA(hWnd: HWND, hAccTable: HACCEL, lpMsg: LPMSG): cint <cimport,nodecl> end
global function TranslateAcceleratorW(hWnd: HWND, hAccTable: HACCEL, lpMsg: LPMSG): cint <cimport,nodecl> end
global function GetSystemMetrics(nIndex: cint): cint <cimport,nodecl> end
global function LoadMenuA(hInstance: HINSTANCE, lpMenuName: LPCSTR): HMENU <cimport,nodecl> end
global function LoadMenuW(hInstance: HINSTANCE, lpMenuName: LPCWSTR): HMENU <cimport,nodecl> end
global function LoadMenuIndirectA(lpMenuTemplate: pointer): HMENU <cimport,nodecl> end
global function LoadMenuIndirectW(lpMenuTemplate: pointer): HMENU <cimport,nodecl> end
global function GetMenu(hWnd: HWND): HMENU <cimport,nodecl> end
global function SetMenu(hWnd: HWND, hMenu: HMENU): cint <cimport,nodecl> end
global function ChangeMenuA(hMenu: HMENU, cmd: cuint, lpszNewItem: LPCSTR, cmdInsert: cuint, flags: cuint): cint <cimport,nodecl> end
global function ChangeMenuW(hMenu: HMENU, cmd: cuint, lpszNewItem: LPCWSTR, cmdInsert: cuint, flags: cuint): cint <cimport,nodecl> end
global function HiliteMenuItem(hWnd: HWND, hMenu: HMENU, uIDHiliteItem: cuint, uHilite: cuint): cint <cimport,nodecl> end
global function GetMenuStringA(hMenu: HMENU, uIDItem: cuint, lpString: LPSTR, cchMax: cint, flags: cuint): cint <cimport,nodecl> end
global function GetMenuStringW(hMenu: HMENU, uIDItem: cuint, lpString: LPWSTR, cchMax: cint, flags: cuint): cint <cimport,nodecl> end
global function GetMenuState(hMenu: HMENU, uId: cuint, uFlags: cuint): cuint <cimport,nodecl> end
global function DrawMenuBar(hWnd: HWND): cint <cimport,nodecl> end
global function GetSystemMenu(hWnd: HWND, bRevert: cint): HMENU <cimport,nodecl> end
global function CreateMenu(): HMENU <cimport,nodecl> end
global function CreatePopupMenu(): HMENU <cimport,nodecl> end
global function DestroyMenu(hMenu: HMENU): cint <cimport,nodecl> end
global function CheckMenuItem(hMenu: HMENU, uIDCheckItem: cuint, uCheck: cuint): culong <cimport,nodecl> end
global function EnableMenuItem(hMenu: HMENU, uIDEnableItem: cuint, uEnable: cuint): cint <cimport,nodecl> end
global function GetSubMenu(hMenu: HMENU, nPos: cint): HMENU <cimport,nodecl> end
global function GetMenuItemID(hMenu: HMENU, nPos: cint): cuint <cimport,nodecl> end
global function GetMenuItemCount(hMenu: HMENU): cint <cimport,nodecl> end
global function InsertMenuA(hMenu: HMENU, uPosition: cuint, uFlags: cuint, uIDNewItem: culonglong, lpNewItem: LPCSTR): cint <cimport,nodecl> end
global function InsertMenuW(hMenu: HMENU, uPosition: cuint, uFlags: cuint, uIDNewItem: culonglong, lpNewItem: LPCWSTR): cint <cimport,nodecl> end
global function AppendMenuA(hMenu: HMENU, uFlags: cuint, uIDNewItem: culonglong, lpNewItem: LPCSTR): cint <cimport,nodecl> end
global function AppendMenuW(hMenu: HMENU, uFlags: cuint, uIDNewItem: culonglong, lpNewItem: LPCWSTR): cint <cimport,nodecl> end
global function ModifyMenuA(hMnu: HMENU, uPosition: cuint, uFlags: cuint, uIDNewItem: culonglong, lpNewItem: LPCSTR): cint <cimport,nodecl> end
global function ModifyMenuW(hMnu: HMENU, uPosition: cuint, uFlags: cuint, uIDNewItem: culonglong, lpNewItem: LPCWSTR): cint <cimport,nodecl> end
global function RemoveMenu(hMenu: HMENU, uPosition: cuint, uFlags: cuint): cint <cimport,nodecl> end
global function DeleteMenu(hMenu: HMENU, uPosition: cuint, uFlags: cuint): cint <cimport,nodecl> end
global function SetMenuItemBitmaps(hMenu: HMENU, uPosition: cuint, uFlags: cuint, hBitmapUnchecked: HBITMAP, hBitmapChecked: HBITMAP): cint <cimport,nodecl> end
global function GetMenuCheckMarkDimensions(): clong <cimport,nodecl> end
global function TrackPopupMenu(hMenu: HMENU, uFlags: cuint, x: cint, y: cint, nReserved: cint, hWnd: HWND, prcRect: *RECT): cint <cimport,nodecl> end
global tagTPMPARAMS: type <cimport,nodecl,ctypedef> = @record{
  cbSize: cuint,
  rcExclude: RECT
}
global TPMPARAMS: type = @tagTPMPARAMS
global tagMENUINFO: type <cimport,nodecl,ctypedef> = @record{
  cbSize: culong,
  fMask: culong,
  dwStyle: culong,
  cyMax: cuint,
  hbrBack: HBRUSH,
  dwContextHelpID: culong,
  dwMenuData: culonglong
}
global MENUINFO: type = @tagMENUINFO
global LPMENUINFO: type = @*tagMENUINFO
global LPTPMPARAMS: type = @*TPMPARAMS
global LPCMENUINFO: type = @*MENUINFO
global function TrackPopupMenuEx(a1: HMENU, a2: cuint, a3: cint, a4: cint, a5: HWND, a6: LPTPMPARAMS): cint <cimport,nodecl> end
global function GetMenuInfo(a1: HMENU, a2: LPMENUINFO): cint <cimport,nodecl> end
global function SetMenuInfo(a1: HMENU, a2: LPCMENUINFO): cint <cimport,nodecl> end
global function EndMenu(): cint <cimport,nodecl> end
global tagMENUGETOBJECTINFO: type <cimport,nodecl,ctypedef> = @record{
  dwFlags: culong,
  uPos: cuint,
  hmenu: HMENU,
  riid: PVOID,
  pvObj: PVOID
}
global MENUGETOBJECTINFO: type = @tagMENUGETOBJECTINFO
global PMENUGETOBJECTINFO: type = @*tagMENUGETOBJECTINFO
global tagMENUITEMINFOA: type <cimport,nodecl,ctypedef> = @record{
  cbSize: cuint,
  fMask: cuint,
  fType: cuint,
  fState: cuint,
  wID: cuint,
  hSubMenu: HMENU,
  hbmpChecked: HBITMAP,
  hbmpUnchecked: HBITMAP,
  dwItemData: culonglong,
  dwTypeData: LPSTR,
  cch: cuint,
  hbmpItem: HBITMAP
}
global MENUITEMINFOA: type = @tagMENUITEMINFOA
global LPMENUITEMINFOA: type = @*tagMENUITEMINFOA
global tagMENUITEMINFOW: type <cimport,nodecl,ctypedef> = @record{
  cbSize: cuint,
  fMask: cuint,
  fType: cuint,
  fState: cuint,
  wID: cuint,
  hSubMenu: HMENU,
  hbmpChecked: HBITMAP,
  hbmpUnchecked: HBITMAP,
  dwItemData: culonglong,
  dwTypeData: LPWSTR,
  cch: cuint,
  hbmpItem: HBITMAP
}
global MENUITEMINFOW: type = @tagMENUITEMINFOW
global LPMENUITEMINFOW: type = @*tagMENUITEMINFOW
global MENUITEMINFO: type = @tagMENUITEMINFOA
global LPMENUITEMINFO: type = @*tagMENUITEMINFOA
global LPCMENUITEMINFOA: type = @*MENUITEMINFOA
global LPCMENUITEMINFOW: type = @*MENUITEMINFOW
global LPCMENUITEMINFO: type = @*MENUITEMINFOA
global function InsertMenuItemA(hmenu: HMENU, item: cuint, fByPosition: cint, lpmi: LPCMENUITEMINFOA): cint <cimport,nodecl> end
global function InsertMenuItemW(hmenu: HMENU, item: cuint, fByPosition: cint, lpmi: LPCMENUITEMINFOW): cint <cimport,nodecl> end
global function GetMenuItemInfoA(hmenu: HMENU, item: cuint, fByPosition: cint, lpmii: LPMENUITEMINFOA): cint <cimport,nodecl> end
global function GetMenuItemInfoW(hmenu: HMENU, item: cuint, fByPosition: cint, lpmii: LPMENUITEMINFOW): cint <cimport,nodecl> end
global function SetMenuItemInfoA(hmenu: HMENU, item: cuint, fByPositon: cint, lpmii: LPCMENUITEMINFOA): cint <cimport,nodecl> end
global function SetMenuItemInfoW(hmenu: HMENU, item: cuint, fByPositon: cint, lpmii: LPCMENUITEMINFOW): cint <cimport,nodecl> end
global function GetMenuDefaultItem(hMenu: HMENU, fByPos: cuint, gmdiFlags: cuint): cuint <cimport,nodecl> end
global function SetMenuDefaultItem(hMenu: HMENU, uItem: cuint, fByPos: cuint): cint <cimport,nodecl> end
global function GetMenuItemRect(hWnd: HWND, hMenu: HMENU, uItem: cuint, lprcItem: LPRECT): cint <cimport,nodecl> end
global function MenuItemFromPoint(hWnd: HWND, hMenu: HMENU, ptScreen: POINT): cint <cimport,nodecl> end
global tagDROPSTRUCT: type <cimport,nodecl,ctypedef> = @record{
  hwndSource: HWND,
  hwndSink: HWND,
  wFmt: culong,
  dwData: culonglong,
  ptDrop: POINT,
  dwControlData: culong
}
global DROPSTRUCT: type = @tagDROPSTRUCT
global PDROPSTRUCT: type = @*tagDROPSTRUCT
global LPDROPSTRUCT: type = @*tagDROPSTRUCT
global function DragObject(hwndParent: HWND, hwndFrom: HWND, fmt: cuint, data: culonglong, hcur: HCURSOR): culong <cimport,nodecl> end
global function DragDetect(hwnd: HWND, pt: POINT): cint <cimport,nodecl> end
global function DrawIcon(hDC: HDC, X: cint, Y: cint, hIcon: HICON): cint <cimport,nodecl> end
global tagDRAWTEXTPARAMS: type <cimport,nodecl,ctypedef> = @record{
  cbSize: cuint,
  iTabLength: cint,
  iLeftMargin: cint,
  iRightMargin: cint,
  uiLengthDrawn: cuint
}
global DRAWTEXTPARAMS: type = @tagDRAWTEXTPARAMS
global LPDRAWTEXTPARAMS: type = @*tagDRAWTEXTPARAMS
global function DrawTextA(hdc: HDC, lpchText: LPCSTR, cchText: cint, lprc: LPRECT, format: cuint): cint <cimport,nodecl> end
global function DrawTextW(hdc: HDC, lpchText: LPCWSTR, cchText: cint, lprc: LPRECT, format: cuint): cint <cimport,nodecl> end
global function DrawTextExA(hdc: HDC, lpchText: LPSTR, cchText: cint, lprc: LPRECT, format: cuint, lpdtp: LPDRAWTEXTPARAMS): cint <cimport,nodecl> end
global function DrawTextExW(hdc: HDC, lpchText: LPWSTR, cchText: cint, lprc: LPRECT, format: cuint, lpdtp: LPDRAWTEXTPARAMS): cint <cimport,nodecl> end
global function GrayStringA(hDC: HDC, hBrush: HBRUSH, lpOutputFunc: GRAYSTRINGPROC, lpData: clonglong, nCount: cint, X: cint, Y: cint, nWidth: cint, nHeight: cint): cint <cimport,nodecl> end
global function GrayStringW(hDC: HDC, hBrush: HBRUSH, lpOutputFunc: GRAYSTRINGPROC, lpData: clonglong, nCount: cint, X: cint, Y: cint, nWidth: cint, nHeight: cint): cint <cimport,nodecl> end
global function DrawStateA(hdc: HDC, hbrFore: HBRUSH, qfnCallBack: DRAWSTATEPROC, lData: clonglong, wData: culonglong, x: cint, y: cint, cx: cint, cy: cint, uFlags: cuint): cint <cimport,nodecl> end
global function DrawStateW(hdc: HDC, hbrFore: HBRUSH, qfnCallBack: DRAWSTATEPROC, lData: clonglong, wData: culonglong, x: cint, y: cint, cx: cint, cy: cint, uFlags: cuint): cint <cimport,nodecl> end
global function TabbedTextOutA(hdc: HDC, x: cint, y: cint, lpString: LPCSTR, chCount: cint, nTabPositions: cint, lpnTabStopPositions: *cint, nTabOrigin: cint): clong <cimport,nodecl> end
global function TabbedTextOutW(hdc: HDC, x: cint, y: cint, lpString: LPCWSTR, chCount: cint, nTabPositions: cint, lpnTabStopPositions: *cint, nTabOrigin: cint): clong <cimport,nodecl> end
global function GetTabbedTextExtentA(hdc: HDC, lpString: LPCSTR, chCount: cint, nTabPositions: cint, lpnTabStopPositions: *cint): culong <cimport,nodecl> end
global function GetTabbedTextExtentW(hdc: HDC, lpString: LPCWSTR, chCount: cint, nTabPositions: cint, lpnTabStopPositions: *cint): culong <cimport,nodecl> end
global function UpdateWindow(hWnd: HWND): cint <cimport,nodecl> end
global function SetActiveWindow(hWnd: HWND): HWND <cimport,nodecl> end
global function GetForegroundWindow(): HWND <cimport,nodecl> end
global function PaintDesktop(hdc: HDC): cint <cimport,nodecl> end
global function SwitchToThisWindow(hwnd: HWND, fUnknown: cint): void <cimport,nodecl> end
global function SetForegroundWindow(hWnd: HWND): cint <cimport,nodecl> end
global function AllowSetForegroundWindow(dwProcessId: culong): cint <cimport,nodecl> end
global function LockSetForegroundWindow(uLockCode: cuint): cint <cimport,nodecl> end
global function WindowFromDC(hDC: HDC): HWND <cimport,nodecl> end
global function GetDC(hWnd: HWND): HDC <cimport,nodecl> end
global function GetDCEx(hWnd: HWND, hrgnClip: HRGN, flags: culong): HDC <cimport,nodecl> end
global function GetWindowDC(hWnd: HWND): HDC <cimport,nodecl> end
global function ReleaseDC(hWnd: HWND, hDC: HDC): cint <cimport,nodecl> end
global function BeginPaint(hWnd: HWND, lpPaint: LPPAINTSTRUCT): HDC <cimport,nodecl> end
global function EndPaint(hWnd: HWND, lpPaint: *PAINTSTRUCT): cint <cimport,nodecl> end
global function GetUpdateRect(hWnd: HWND, lpRect: LPRECT, bErase: cint): cint <cimport,nodecl> end
global function GetUpdateRgn(hWnd: HWND, hRgn: HRGN, bErase: cint): cint <cimport,nodecl> end
global function SetWindowRgn(hWnd: HWND, hRgn: HRGN, bRedraw: cint): cint <cimport,nodecl> end
global function GetWindowRgn(hWnd: HWND, hRgn: HRGN): cint <cimport,nodecl> end
global function GetWindowRgnBox(hWnd: HWND, lprc: LPRECT): cint <cimport,nodecl> end
global function ExcludeUpdateRgn(hDC: HDC, hWnd: HWND): cint <cimport,nodecl> end
global function InvalidateRect(hWnd: HWND, lpRect: *RECT, bErase: cint): cint <cimport,nodecl> end
global function ValidateRect(hWnd: HWND, lpRect: *RECT): cint <cimport,nodecl> end
global function InvalidateRgn(hWnd: HWND, hRgn: HRGN, bErase: cint): cint <cimport,nodecl> end
global function ValidateRgn(hWnd: HWND, hRgn: HRGN): cint <cimport,nodecl> end
global function RedrawWindow(hWnd: HWND, lprcUpdate: *RECT, hrgnUpdate: HRGN, flags: cuint): cint <cimport,nodecl> end
global function LockWindowUpdate(hWndLock: HWND): cint <cimport,nodecl> end
global function ScrollWindow(hWnd: HWND, XAmount: cint, YAmount: cint, lpRect: *RECT, lpClipRect: *RECT): cint <cimport,nodecl> end
global function ScrollDC(hDC: HDC, dx: cint, dy: cint, lprcScroll: *RECT, lprcClip: *RECT, hrgnUpdate: HRGN, lprcUpdate: LPRECT): cint <cimport,nodecl> end
global function ScrollWindowEx(hWnd: HWND, dx: cint, dy: cint, prcScroll: *RECT, prcClip: *RECT, hrgnUpdate: HRGN, prcUpdate: LPRECT, flags: cuint): cint <cimport,nodecl> end
global function SetScrollPos(hWnd: HWND, nBar: cint, nPos: cint, bRedraw: cint): cint <cimport,nodecl> end
global function GetScrollPos(hWnd: HWND, nBar: cint): cint <cimport,nodecl> end
global function SetScrollRange(hWnd: HWND, nBar: cint, nMinPos: cint, nMaxPos: cint, bRedraw: cint): cint <cimport,nodecl> end
global function GetScrollRange(hWnd: HWND, nBar: cint, lpMinPos: LPINT, lpMaxPos: LPINT): cint <cimport,nodecl> end
global function ShowScrollBar(hWnd: HWND, wBar: cint, bShow: cint): cint <cimport,nodecl> end
global function EnableScrollBar(hWnd: HWND, wSBflags: cuint, wArrows: cuint): cint <cimport,nodecl> end
global function SetPropA(hWnd: HWND, lpString: LPCSTR, hData: HANDLE): cint <cimport,nodecl> end
global function SetPropW(hWnd: HWND, lpString: LPCWSTR, hData: HANDLE): cint <cimport,nodecl> end
global function GetPropA(hWnd: HWND, lpString: LPCSTR): HANDLE <cimport,nodecl> end
global function GetPropW(hWnd: HWND, lpString: LPCWSTR): HANDLE <cimport,nodecl> end
global function RemovePropA(hWnd: HWND, lpString: LPCSTR): HANDLE <cimport,nodecl> end
global function RemovePropW(hWnd: HWND, lpString: LPCWSTR): HANDLE <cimport,nodecl> end
global function EnumPropsExA(hWnd: HWND, lpEnumFunc: PROPENUMPROCEXA, lParam: clonglong): cint <cimport,nodecl> end
global function EnumPropsExW(hWnd: HWND, lpEnumFunc: PROPENUMPROCEXW, lParam: clonglong): cint <cimport,nodecl> end
global function EnumPropsA(hWnd: HWND, lpEnumFunc: PROPENUMPROCA): cint <cimport,nodecl> end
global function EnumPropsW(hWnd: HWND, lpEnumFunc: PROPENUMPROCW): cint <cimport,nodecl> end
global function SetWindowTextA(hWnd: HWND, lpString: LPCSTR): cint <cimport,nodecl> end
global function SetWindowTextW(hWnd: HWND, lpString: LPCWSTR): cint <cimport,nodecl> end
global function GetWindowTextA(hWnd: HWND, lpString: LPSTR, nMaxCount: cint): cint <cimport,nodecl> end
global function GetWindowTextW(hWnd: HWND, lpString: LPWSTR, nMaxCount: cint): cint <cimport,nodecl> end
global function GetWindowTextLengthA(hWnd: HWND): cint <cimport,nodecl> end
global function GetWindowTextLengthW(hWnd: HWND): cint <cimport,nodecl> end
global function GetClientRect(hWnd: HWND, lpRect: LPRECT): cint <cimport,nodecl> end
global function GetWindowRect(hWnd: HWND, lpRect: LPRECT): cint <cimport,nodecl> end
global function AdjustWindowRect(lpRect: LPRECT, dwStyle: culong, bMenu: cint): cint <cimport,nodecl> end
global function AdjustWindowRectEx(lpRect: LPRECT, dwStyle: culong, bMenu: cint, dwExStyle: culong): cint <cimport,nodecl> end
global tagHELPINFO: type <cimport,nodecl,ctypedef> = @record{
  cbSize: cuint,
  iContextType: cint,
  iCtrlId: cint,
  hItemHandle: HANDLE,
  dwContextId: culonglong,
  MousePos: POINT
}
global HELPINFO: type = @tagHELPINFO
global LPHELPINFO: type = @*tagHELPINFO
global function SetWindowContextHelpId(a1: HWND, a2: culong): cint <cimport,nodecl> end
global function GetWindowContextHelpId(a1: HWND): culong <cimport,nodecl> end
global function SetMenuContextHelpId(a1: HMENU, a2: culong): cint <cimport,nodecl> end
global function GetMenuContextHelpId(a1: HMENU): culong <cimport,nodecl> end
global function MessageBoxA(hWnd: HWND, lpText: LPCSTR, lpCaption: LPCSTR, uType: cuint): cint <cimport,nodecl> end
global function MessageBoxW(hWnd: HWND, lpText: LPCWSTR, lpCaption: LPCWSTR, uType: cuint): cint <cimport,nodecl> end
global function MessageBoxExA(hWnd: HWND, lpText: LPCSTR, lpCaption: LPCSTR, uType: cuint, wLanguageId: cushort): cint <cimport,nodecl> end
global function MessageBoxExW(hWnd: HWND, lpText: LPCWSTR, lpCaption: LPCWSTR, uType: cuint, wLanguageId: cushort): cint <cimport,nodecl> end
global MSGBOXCALLBACK: type <cimport,nodecl> = @function(LPHELPINFO): void
global tagMSGBOXPARAMSA: type <cimport,nodecl,ctypedef> = @record{
  cbSize: cuint,
  hwndOwner: HWND,
  hInstance: HINSTANCE,
  lpszText: LPCSTR,
  lpszCaption: LPCSTR,
  dwStyle: culong,
  lpszIcon: LPCSTR,
  dwContextHelpId: culonglong,
  lpfnMsgBoxCallback: MSGBOXCALLBACK,
  dwLanguageId: culong
}
global MSGBOXPARAMSA: type = @tagMSGBOXPARAMSA
global PMSGBOXPARAMSA: type = @*tagMSGBOXPARAMSA
global LPMSGBOXPARAMSA: type = @*tagMSGBOXPARAMSA
global tagMSGBOXPARAMSW: type <cimport,nodecl,ctypedef> = @record{
  cbSize: cuint,
  hwndOwner: HWND,
  hInstance: HINSTANCE,
  lpszText: LPCWSTR,
  lpszCaption: LPCWSTR,
  dwStyle: culong,
  lpszIcon: LPCWSTR,
  dwContextHelpId: culonglong,
  lpfnMsgBoxCallback: MSGBOXCALLBACK,
  dwLanguageId: culong
}
global MSGBOXPARAMSW: type = @tagMSGBOXPARAMSW
global PMSGBOXPARAMSW: type = @*tagMSGBOXPARAMSW
global LPMSGBOXPARAMSW: type = @*tagMSGBOXPARAMSW
global MSGBOXPARAMS: type = @tagMSGBOXPARAMSA
global PMSGBOXPARAMS: type = @*tagMSGBOXPARAMSA
global LPMSGBOXPARAMS: type = @*tagMSGBOXPARAMSA
global function MessageBoxIndirectA(lpmbp: *MSGBOXPARAMSA): cint <cimport,nodecl> end
global function MessageBoxIndirectW(lpmbp: *MSGBOXPARAMSW): cint <cimport,nodecl> end
global function MessageBeep(uType: cuint): cint <cimport,nodecl> end
global function ShowCursor(bShow: cint): cint <cimport,nodecl> end
global function SetCursorPos(X: cint, Y: cint): cint <cimport,nodecl> end
global function SetCursor(hCursor: HCURSOR): HCURSOR <cimport,nodecl> end
global function GetCursorPos(lpPoint: LPPOINT): cint <cimport,nodecl> end
global function ClipCursor(lpRect: *RECT): cint <cimport,nodecl> end
global function GetClipCursor(lpRect: LPRECT): cint <cimport,nodecl> end
global function GetCursor(): HCURSOR <cimport,nodecl> end
global function CreateCaret(hWnd: HWND, hBitmap: HBITMAP, nWidth: cint, nHeight: cint): cint <cimport,nodecl> end
global function GetCaretBlinkTime(): cuint <cimport,nodecl> end
global function SetCaretBlinkTime(uMSeconds: cuint): cint <cimport,nodecl> end
global function DestroyCaret(): cint <cimport,nodecl> end
global function HideCaret(hWnd: HWND): cint <cimport,nodecl> end
global function ShowCaret(hWnd: HWND): cint <cimport,nodecl> end
global function SetCaretPos(X: cint, Y: cint): cint <cimport,nodecl> end
global function GetCaretPos(lpPoint: LPPOINT): cint <cimport,nodecl> end
global function ClientToScreen(hWnd: HWND, lpPoint: LPPOINT): cint <cimport,nodecl> end
global function ScreenToClient(hWnd: HWND, lpPoint: LPPOINT): cint <cimport,nodecl> end
global function MapWindowPoints(hWndFrom: HWND, hWndTo: HWND, lpPoints: LPPOINT, cPoints: cuint): cint <cimport,nodecl> end
global function WindowFromPoint(Point: POINT): HWND <cimport,nodecl> end
global function ChildWindowFromPoint(hWndParent: HWND, Point: POINT): HWND <cimport,nodecl> end
global function ChildWindowFromPointEx(hwnd: HWND, pt: POINT, flags: cuint): HWND <cimport,nodecl> end
global function SetPhysicalCursorPos(X: cint, Y: cint): cint <cimport,nodecl> end
global function GetPhysicalCursorPos(lpPoint: LPPOINT): cint <cimport,nodecl> end
global function LogicalToPhysicalPoint(hWnd: HWND, lpPoint: LPPOINT): cint <cimport,nodecl> end
global function PhysicalToLogicalPoint(hWnd: HWND, lpPoint: LPPOINT): cint <cimport,nodecl> end
global function WindowFromPhysicalPoint(Point: POINT): HWND <cimport,nodecl> end
global function GetSysColor(nIndex: cint): culong <cimport,nodecl> end
global function GetSysColorBrush(nIndex: cint): HBRUSH <cimport,nodecl> end
global function SetSysColors(cElements: cint, lpaElements: *cint, lpaRgbValues: *culong): cint <cimport,nodecl> end
global function DrawFocusRect(hDC: HDC, lprc: *RECT): cint <cimport,nodecl> end
global function FillRect(hDC: HDC, lprc: *RECT, hbr: HBRUSH): cint <cimport,nodecl> end
global function FrameRect(hDC: HDC, lprc: *RECT, hbr: HBRUSH): cint <cimport,nodecl> end
global function InvertRect(hDC: HDC, lprc: *RECT): cint <cimport,nodecl> end
global function SetRect(lprc: LPRECT, xLeft: cint, yTop: cint, xRight: cint, yBottom: cint): cint <cimport,nodecl> end
global function SetRectEmpty(lprc: LPRECT): cint <cimport,nodecl> end
global function CopyRect(lprcDst: LPRECT, lprcSrc: *RECT): cint <cimport,nodecl> end
global function InflateRect(lprc: LPRECT, dx: cint, dy: cint): cint <cimport,nodecl> end
global function IntersectRect(lprcDst: LPRECT, lprcSrc1: *RECT, lprcSrc2: *RECT): cint <cimport,nodecl> end
global function UnionRect(lprcDst: LPRECT, lprcSrc1: *RECT, lprcSrc2: *RECT): cint <cimport,nodecl> end
global function SubtractRect(lprcDst: LPRECT, lprcSrc1: *RECT, lprcSrc2: *RECT): cint <cimport,nodecl> end
global function OffsetRect(lprc: LPRECT, dx: cint, dy: cint): cint <cimport,nodecl> end
global function IsRectEmpty(lprc: *RECT): cint <cimport,nodecl> end
global function EqualRect(lprc1: *RECT, lprc2: *RECT): cint <cimport,nodecl> end
global function PtInRect(lprc: *RECT, pt: POINT): cint <cimport,nodecl> end
global function GetWindowWord(hWnd: HWND, nIndex: cint): cushort <cimport,nodecl> end
global function SetWindowWord(hWnd: HWND, nIndex: cint, wNewWord: cushort): cushort <cimport,nodecl> end
global function GetWindowLongA(hWnd: HWND, nIndex: cint): clong <cimport,nodecl> end
global function GetWindowLongW(hWnd: HWND, nIndex: cint): clong <cimport,nodecl> end
global function SetWindowLongA(hWnd: HWND, nIndex: cint, dwNewLong: clong): clong <cimport,nodecl> end
global function SetWindowLongW(hWnd: HWND, nIndex: cint, dwNewLong: clong): clong <cimport,nodecl> end
global function GetWindowLongPtrA(hWnd: HWND, nIndex: cint): clonglong <cimport,nodecl> end
global function GetWindowLongPtrW(hWnd: HWND, nIndex: cint): clonglong <cimport,nodecl> end
global function SetWindowLongPtrA(hWnd: HWND, nIndex: cint, dwNewLong: clonglong): clonglong <cimport,nodecl> end
global function SetWindowLongPtrW(hWnd: HWND, nIndex: cint, dwNewLong: clonglong): clonglong <cimport,nodecl> end
global function GetClassWord(hWnd: HWND, nIndex: cint): cushort <cimport,nodecl> end
global function SetClassWord(hWnd: HWND, nIndex: cint, wNewWord: cushort): cushort <cimport,nodecl> end
global function GetClassLongA(hWnd: HWND, nIndex: cint): culong <cimport,nodecl> end
global function GetClassLongW(hWnd: HWND, nIndex: cint): culong <cimport,nodecl> end
global function SetClassLongA(hWnd: HWND, nIndex: cint, dwNewLong: clong): culong <cimport,nodecl> end
global function SetClassLongW(hWnd: HWND, nIndex: cint, dwNewLong: clong): culong <cimport,nodecl> end
global function GetClassLongPtrA(hWnd: HWND, nIndex: cint): culonglong <cimport,nodecl> end
global function GetClassLongPtrW(hWnd: HWND, nIndex: cint): culonglong <cimport,nodecl> end
global function SetClassLongPtrA(hWnd: HWND, nIndex: cint, dwNewLong: clonglong): culonglong <cimport,nodecl> end
global function SetClassLongPtrW(hWnd: HWND, nIndex: cint, dwNewLong: clonglong): culonglong <cimport,nodecl> end
global function GetProcessDefaultLayout(pdwDefaultLayout: *culong): cint <cimport,nodecl> end
global function SetProcessDefaultLayout(dwDefaultLayout: culong): cint <cimport,nodecl> end
global function GetDesktopWindow(): HWND <cimport,nodecl> end
global function GetParent(hWnd: HWND): HWND <cimport,nodecl> end
global function SetParent(hWndChild: HWND, hWndNewParent: HWND): HWND <cimport,nodecl> end
global function EnumChildWindows(hWndParent: HWND, lpEnumFunc: WNDENUMPROC, lParam: clonglong): cint <cimport,nodecl> end
global function FindWindowA(lpClassName: LPCSTR, lpWindowName: LPCSTR): HWND <cimport,nodecl> end
global function FindWindowW(lpClassName: LPCWSTR, lpWindowName: LPCWSTR): HWND <cimport,nodecl> end
global function FindWindowExA(hWndParent: HWND, hWndChildAfter: HWND, lpszClass: LPCSTR, lpszWindow: LPCSTR): HWND <cimport,nodecl> end
global function FindWindowExW(hWndParent: HWND, hWndChildAfter: HWND, lpszClass: LPCWSTR, lpszWindow: LPCWSTR): HWND <cimport,nodecl> end
global function GetShellWindow(): HWND <cimport,nodecl> end
global function RegisterShellHookWindow(hwnd: HWND): cint <cimport,nodecl> end
global function DeregisterShellHookWindow(hwnd: HWND): cint <cimport,nodecl> end
global function EnumWindows(lpEnumFunc: WNDENUMPROC, lParam: clonglong): cint <cimport,nodecl> end
global function EnumThreadWindows(dwThreadId: culong, lpfn: WNDENUMPROC, lParam: clonglong): cint <cimport,nodecl> end
global function GetClassNameA(hWnd: HWND, lpClassName: LPSTR, nMaxCount: cint): cint <cimport,nodecl> end
global function GetClassNameW(hWnd: HWND, lpClassName: LPWSTR, nMaxCount: cint): cint <cimport,nodecl> end
global function GetTopWindow(hWnd: HWND): HWND <cimport,nodecl> end
global function GetWindowThreadProcessId(hWnd: HWND, lpdwProcessId: LPDWORD): culong <cimport,nodecl> end
global function IsGUIThread(bConvert: cint): cint <cimport,nodecl> end
global function GetLastActivePopup(hWnd: HWND): HWND <cimport,nodecl> end
global function GetWindow(hWnd: HWND, uCmd: cuint): HWND <cimport,nodecl> end
global function SetWindowsHookA(nFilterType: cint, pfnFilterProc: HOOKPROC): HHOOK <cimport,nodecl> end
global function SetWindowsHookW(nFilterType: cint, pfnFilterProc: HOOKPROC): HHOOK <cimport,nodecl> end
global function UnhookWindowsHook(nCode: cint, pfnFilterProc: HOOKPROC): cint <cimport,nodecl> end
global function SetWindowsHookExA(idHook: cint, lpfn: HOOKPROC, hmod: HINSTANCE, dwThreadId: culong): HHOOK <cimport,nodecl> end
global function SetWindowsHookExW(idHook: cint, lpfn: HOOKPROC, hmod: HINSTANCE, dwThreadId: culong): HHOOK <cimport,nodecl> end
global function UnhookWindowsHookEx(hhk: HHOOK): cint <cimport,nodecl> end
global function CallNextHookEx(hhk: HHOOK, nCode: cint, wParam: culonglong, lParam: clonglong): clonglong <cimport,nodecl> end
global function CheckMenuRadioItem(hmenu: HMENU, first: cuint, last: cuint, check: cuint, flags: cuint): cint <cimport,nodecl> end
global MENUITEMTEMPLATEHEADER: type <cimport,nodecl> = @record{
  versionNumber: cushort,
  offset: cushort
}
global PMENUITEMTEMPLATEHEADER: type = @*record{
  versionNumber: cushort,
  offset: cushort
}
global MENUITEMTEMPLATE: type <cimport,nodecl> = @record{
  mtOption: cushort,
  mtID: cushort,
  mtString: [1]cwchar_t
}
global PMENUITEMTEMPLATE: type = @*record{
  mtOption: cushort,
  mtID: cushort,
  mtString: [1]cwchar_t
}
global function LoadBitmapA(hInstance: HINSTANCE, lpBitmapName: LPCSTR): HBITMAP <cimport,nodecl> end
global function LoadBitmapW(hInstance: HINSTANCE, lpBitmapName: LPCWSTR): HBITMAP <cimport,nodecl> end
global function LoadCursorA(hInstance: HINSTANCE, lpCursorName: LPCSTR): HCURSOR <cimport,nodecl> end
global function LoadCursorW(hInstance: HINSTANCE, lpCursorName: LPCWSTR): HCURSOR <cimport,nodecl> end
global function LoadCursorFromFileA(lpFileName: LPCSTR): HCURSOR <cimport,nodecl> end
global function LoadCursorFromFileW(lpFileName: LPCWSTR): HCURSOR <cimport,nodecl> end
global function CreateCursor(hInst: HINSTANCE, xHotSpot: cint, yHotSpot: cint, nWidth: cint, nHeight: cint, pvANDPlane: pointer, pvXORPlane: pointer): HCURSOR <cimport,nodecl> end
global function DestroyCursor(hCursor: HCURSOR): cint <cimport,nodecl> end
global _ICONINFO: type <cimport,nodecl,ctypedef> = @record{
  fIcon: cint,
  xHotspot: culong,
  yHotspot: culong,
  hbmMask: HBITMAP,
  hbmColor: HBITMAP
}
global ICONINFO: type = @_ICONINFO
global PICONINFO: type = @*ICONINFO
global function SetSystemCursor(hcur: HCURSOR, id: culong): cint <cimport,nodecl> end
global function LoadIconA(hInstance: HINSTANCE, lpIconName: LPCSTR): HICON <cimport,nodecl> end
global function LoadIconW(hInstance: HINSTANCE, lpIconName: LPCWSTR): HICON <cimport,nodecl> end
global function PrivateExtractIconsA(szFileName: LPCSTR, nIconIndex: cint, cxIcon: cint, cyIcon: cint, phicon: *HICON, piconid: *cuint, nIcons: cuint, flags: cuint): cuint <cimport,nodecl> end
global function PrivateExtractIconsW(szFileName: LPCWSTR, nIconIndex: cint, cxIcon: cint, cyIcon: cint, phicon: *HICON, piconid: *cuint, nIcons: cuint, flags: cuint): cuint <cimport,nodecl> end
global function CreateIcon(hInstance: HINSTANCE, nWidth: cint, nHeight: cint, cPlanes: cuchar, cBitsPixel: cuchar, lpbANDbits: *cuchar, lpbXORbits: *cuchar): HICON <cimport,nodecl> end
global function DestroyIcon(hIcon: HICON): cint <cimport,nodecl> end
global function LookupIconIdFromDirectory(presbits: PBYTE, fIcon: cint): cint <cimport,nodecl> end
global function LookupIconIdFromDirectoryEx(presbits: PBYTE, fIcon: cint, cxDesired: cint, cyDesired: cint, Flags: cuint): cint <cimport,nodecl> end
global function CreateIconFromResource(presbits: PBYTE, dwResSize: culong, fIcon: cint, dwVer: culong): HICON <cimport,nodecl> end
global function CreateIconFromResourceEx(presbits: PBYTE, dwResSize: culong, fIcon: cint, dwVer: culong, cxDesired: cint, cyDesired: cint, Flags: cuint): HICON <cimport,nodecl> end
global tagCURSORSHAPE: type <cimport,nodecl,ctypedef> = @record{
  xHotSpot: cint,
  yHotSpot: cint,
  cx: cint,
  cy: cint,
  cbWidth: cint,
  Planes: cuchar,
  BitsPixel: cuchar
}
global CURSORSHAPE: type = @tagCURSORSHAPE
global LPCURSORSHAPE: type = @*tagCURSORSHAPE
global function LoadImageA(hInst: HINSTANCE, name: LPCSTR, type: cuint, cx: cint, cy: cint, fuLoad: cuint): HANDLE <cimport,nodecl> end
global function LoadImageW(hInst: HINSTANCE, name: LPCWSTR, type: cuint, cx: cint, cy: cint, fuLoad: cuint): HANDLE <cimport,nodecl> end
global function CopyImage(h: HANDLE, type: cuint, cx: cint, cy: cint, flags: cuint): HANDLE <cimport,nodecl> end
global function DrawIconEx(hdc: HDC, xLeft: cint, yTop: cint, hIcon: HICON, cxWidth: cint, cyWidth: cint, istepIfAniCur: cuint, hbrFlickerFreeDraw: HBRUSH, diFlags: cuint): cint <cimport,nodecl> end
global function CreateIconIndirect(piconinfo: PICONINFO): HICON <cimport,nodecl> end
global function CopyIcon(hIcon: HICON): HICON <cimport,nodecl> end
global function GetIconInfo(hIcon: HICON, piconinfo: PICONINFO): cint <cimport,nodecl> end
global _ICONINFOEXA: type <cimport,nodecl,ctypedef> = @record{
  cbSize: culong,
  fIcon: cint,
  xHotspot: culong,
  yHotspot: culong,
  hbmMask: HBITMAP,
  hbmColor: HBITMAP,
  wResID: cushort,
  szModName: [260]cchar,
  szResName: [260]cchar
}
global ICONINFOEXA: type = @_ICONINFOEXA
global PICONINFOEXA: type = @*_ICONINFOEXA
global _ICONINFOEXW: type <cimport,nodecl,ctypedef> = @record{
  cbSize: culong,
  fIcon: cint,
  xHotspot: culong,
  yHotspot: culong,
  hbmMask: HBITMAP,
  hbmColor: HBITMAP,
  wResID: cushort,
  szModName: [260]cwchar_t,
  szResName: [260]cwchar_t
}
global ICONINFOEXW: type = @_ICONINFOEXW
global PICONINFOEXW: type = @*_ICONINFOEXW
global ICONINFOEX: type = @_ICONINFOEXA
global PICONINFOEX: type = @*_ICONINFOEXA
global function GetIconInfoExA(hicon: HICON, piconinfo: PICONINFOEXA): cint <cimport,nodecl> end
global function GetIconInfoExW(hicon: HICON, piconinfo: PICONINFOEXW): cint <cimport,nodecl> end
global function IsDialogMessageA(hDlg: HWND, lpMsg: LPMSG): cint <cimport,nodecl> end
global function IsDialogMessageW(hDlg: HWND, lpMsg: LPMSG): cint <cimport,nodecl> end
global function MapDialogRect(hDlg: HWND, lpRect: LPRECT): cint <cimport,nodecl> end
global function DlgDirListA(hDlg: HWND, lpPathSpec: LPSTR, nIDListBox: cint, nIDStaticPath: cint, uFileType: cuint): cint <cimport,nodecl> end
global function DlgDirListW(hDlg: HWND, lpPathSpec: LPWSTR, nIDListBox: cint, nIDStaticPath: cint, uFileType: cuint): cint <cimport,nodecl> end
global function DlgDirSelectExA(hwndDlg: HWND, lpString: LPSTR, chCount: cint, idListBox: cint): cint <cimport,nodecl> end
global function DlgDirSelectExW(hwndDlg: HWND, lpString: LPWSTR, chCount: cint, idListBox: cint): cint <cimport,nodecl> end
global function DlgDirListComboBoxA(hDlg: HWND, lpPathSpec: LPSTR, nIDComboBox: cint, nIDStaticPath: cint, uFiletype: cuint): cint <cimport,nodecl> end
global function DlgDirListComboBoxW(hDlg: HWND, lpPathSpec: LPWSTR, nIDComboBox: cint, nIDStaticPath: cint, uFiletype: cuint): cint <cimport,nodecl> end
global function DlgDirSelectComboBoxExA(hwndDlg: HWND, lpString: LPSTR, cchOut: cint, idComboBox: cint): cint <cimport,nodecl> end
global function DlgDirSelectComboBoxExW(hwndDlg: HWND, lpString: LPWSTR, cchOut: cint, idComboBox: cint): cint <cimport,nodecl> end
global tagSCROLLINFO: type <cimport,nodecl,ctypedef> = @record{
  cbSize: cuint,
  fMask: cuint,
  nMin: cint,
  nMax: cint,
  nPage: cuint,
  nPos: cint,
  nTrackPos: cint
}
global SCROLLINFO: type = @tagSCROLLINFO
global LPSCROLLINFO: type = @*tagSCROLLINFO
global LPCSCROLLINFO: type = @*SCROLLINFO
global function SetScrollInfo(hwnd: HWND, nBar: cint, lpsi: LPCSCROLLINFO, redraw: cint): cint <cimport,nodecl> end
global function GetScrollInfo(hwnd: HWND, nBar: cint, lpsi: LPSCROLLINFO): cint <cimport,nodecl> end
global tagMDICREATESTRUCTA: type <cimport,nodecl,ctypedef> = @record{
  szClass: LPCSTR,
  szTitle: LPCSTR,
  hOwner: HANDLE,
  x: cint,
  y: cint,
  cx: cint,
  cy: cint,
  style: culong,
  lParam: clonglong
}
global MDICREATESTRUCTA: type = @tagMDICREATESTRUCTA
global LPMDICREATESTRUCTA: type = @*tagMDICREATESTRUCTA
global tagMDICREATESTRUCTW: type <cimport,nodecl,ctypedef> = @record{
  szClass: LPCWSTR,
  szTitle: LPCWSTR,
  hOwner: HANDLE,
  x: cint,
  y: cint,
  cx: cint,
  cy: cint,
  style: culong,
  lParam: clonglong
}
global MDICREATESTRUCTW: type = @tagMDICREATESTRUCTW
global LPMDICREATESTRUCTW: type = @*tagMDICREATESTRUCTW
global MDICREATESTRUCT: type = @tagMDICREATESTRUCTA
global LPMDICREATESTRUCT: type = @*tagMDICREATESTRUCTA
global tagCLIENTCREATESTRUCT: type <cimport,nodecl,ctypedef> = @record{
  hWindowMenu: HANDLE,
  idFirstChild: cuint
}
global CLIENTCREATESTRUCT: type = @tagCLIENTCREATESTRUCT
global LPCLIENTCREATESTRUCT: type = @*tagCLIENTCREATESTRUCT
global function DefFrameProcA(hWnd: HWND, hWndMDIClient: HWND, uMsg: cuint, wParam: culonglong, lParam: clonglong): clonglong <cimport,nodecl> end
global function DefFrameProcW(hWnd: HWND, hWndMDIClient: HWND, uMsg: cuint, wParam: culonglong, lParam: clonglong): clonglong <cimport,nodecl> end
global function DefMDIChildProcA(hWnd: HWND, uMsg: cuint, wParam: culonglong, lParam: clonglong): clonglong <cimport,nodecl> end
global function DefMDIChildProcW(hWnd: HWND, uMsg: cuint, wParam: culonglong, lParam: clonglong): clonglong <cimport,nodecl> end
global function TranslateMDISysAccel(hWndClient: HWND, lpMsg: LPMSG): cint <cimport,nodecl> end
global function ArrangeIconicWindows(hWnd: HWND): cuint <cimport,nodecl> end
global function CreateMDIWindowA(lpClassName: LPCSTR, lpWindowName: LPCSTR, dwStyle: culong, X: cint, Y: cint, nWidth: cint, nHeight: cint, hWndParent: HWND, hInstance: HINSTANCE, lParam: clonglong): HWND <cimport,nodecl> end
global function CreateMDIWindowW(lpClassName: LPCWSTR, lpWindowName: LPCWSTR, dwStyle: culong, X: cint, Y: cint, nWidth: cint, nHeight: cint, hWndParent: HWND, hInstance: HINSTANCE, lParam: clonglong): HWND <cimport,nodecl> end
global function TileWindows(hwndParent: HWND, wHow: cuint, lpRect: *RECT, cKids: cuint, lpKids: *HWND): cushort <cimport,nodecl> end
global function CascadeWindows(hwndParent: HWND, wHow: cuint, lpRect: *RECT, cKids: cuint, lpKids: *HWND): cushort <cimport,nodecl> end
global tagMULTIKEYHELPA: type <cimport,nodecl,ctypedef> = @record{
  mkSize: culong,
  mkKeylist: cchar,
  szKeyphrase: [1]cchar
}
global MULTIKEYHELPA: type = @tagMULTIKEYHELPA
global PMULTIKEYHELPA: type = @*tagMULTIKEYHELPA
global LPMULTIKEYHELPA: type = @*tagMULTIKEYHELPA
global tagMULTIKEYHELPW: type <cimport,nodecl,ctypedef> = @record{
  mkSize: culong,
  mkKeylist: cwchar_t,
  szKeyphrase: [1]cwchar_t
}
global MULTIKEYHELPW: type = @tagMULTIKEYHELPW
global PMULTIKEYHELPW: type = @*tagMULTIKEYHELPW
global LPMULTIKEYHELPW: type = @*tagMULTIKEYHELPW
global MULTIKEYHELP: type = @tagMULTIKEYHELPA
global PMULTIKEYHELP: type = @*tagMULTIKEYHELPA
global LPMULTIKEYHELP: type = @*tagMULTIKEYHELPA
global tagHELPWININFOA: type <cimport,nodecl,ctypedef> = @record{
  wStructSize: cint,
  x: cint,
  y: cint,
  dx: cint,
  dy: cint,
  wMax: cint,
  rgchMember: [2]cchar
}
global HELPWININFOA: type = @tagHELPWININFOA
global PHELPWININFOA: type = @*tagHELPWININFOA
global LPHELPWININFOA: type = @*tagHELPWININFOA
global tagHELPWININFOW: type <cimport,nodecl,ctypedef> = @record{
  wStructSize: cint,
  x: cint,
  y: cint,
  dx: cint,
  dy: cint,
  wMax: cint,
  rgchMember: [2]cwchar_t
}
global HELPWININFOW: type = @tagHELPWININFOW
global PHELPWININFOW: type = @*tagHELPWININFOW
global LPHELPWININFOW: type = @*tagHELPWININFOW
global HELPWININFO: type = @tagHELPWININFOA
global PHELPWININFO: type = @*tagHELPWININFOA
global LPHELPWININFO: type = @*tagHELPWININFOA
global function WinHelpA(hWndMain: HWND, lpszHelp: LPCSTR, uCommand: cuint, dwData: culonglong): cint <cimport,nodecl> end
global function WinHelpW(hWndMain: HWND, lpszHelp: LPCWSTR, uCommand: cuint, dwData: culonglong): cint <cimport,nodecl> end
global function GetGuiResources(hProcess: HANDLE, uiFlags: culong): culong <cimport,nodecl> end
global tagNONCLIENTMETRICSA: type <cimport,nodecl,ctypedef> = @record{
  cbSize: cuint,
  iBorderWidth: cint,
  iScrollWidth: cint,
  iScrollHeight: cint,
  iCaptionWidth: cint,
  iCaptionHeight: cint,
  lfCaptionFont: LOGFONTA,
  iSmCaptionWidth: cint,
  iSmCaptionHeight: cint,
  lfSmCaptionFont: LOGFONTA,
  iMenuWidth: cint,
  iMenuHeight: cint,
  lfMenuFont: LOGFONTA,
  lfStatusFont: LOGFONTA,
  lfMessageFont: LOGFONTA,
  iPaddedBorderWidth: cint
}
global NONCLIENTMETRICSA: type = @tagNONCLIENTMETRICSA
global PNONCLIENTMETRICSA: type = @*tagNONCLIENTMETRICSA
global LPNONCLIENTMETRICSA: type = @*tagNONCLIENTMETRICSA
global tagNONCLIENTMETRICSW: type <cimport,nodecl,ctypedef> = @record{
  cbSize: cuint,
  iBorderWidth: cint,
  iScrollWidth: cint,
  iScrollHeight: cint,
  iCaptionWidth: cint,
  iCaptionHeight: cint,
  lfCaptionFont: LOGFONTW,
  iSmCaptionWidth: cint,
  iSmCaptionHeight: cint,
  lfSmCaptionFont: LOGFONTW,
  iMenuWidth: cint,
  iMenuHeight: cint,
  lfMenuFont: LOGFONTW,
  lfStatusFont: LOGFONTW,
  lfMessageFont: LOGFONTW,
  iPaddedBorderWidth: cint
}
global NONCLIENTMETRICSW: type = @tagNONCLIENTMETRICSW
global PNONCLIENTMETRICSW: type = @*tagNONCLIENTMETRICSW
global LPNONCLIENTMETRICSW: type = @*tagNONCLIENTMETRICSW
global NONCLIENTMETRICS: type = @tagNONCLIENTMETRICSA
global PNONCLIENTMETRICS: type = @*tagNONCLIENTMETRICSA
global LPNONCLIENTMETRICS: type = @*tagNONCLIENTMETRICSA
global tagMINIMIZEDMETRICS: type <cimport,nodecl,ctypedef> = @record{
  cbSize: cuint,
  iWidth: cint,
  iHorzGap: cint,
  iVertGap: cint,
  iArrange: cint
}
global MINIMIZEDMETRICS: type = @tagMINIMIZEDMETRICS
global PMINIMIZEDMETRICS: type = @*tagMINIMIZEDMETRICS
global LPMINIMIZEDMETRICS: type = @*tagMINIMIZEDMETRICS
global tagICONMETRICSA: type <cimport,nodecl,ctypedef> = @record{
  cbSize: cuint,
  iHorzSpacing: cint,
  iVertSpacing: cint,
  iTitleWrap: cint,
  lfFont: LOGFONTA
}
global ICONMETRICSA: type = @tagICONMETRICSA
global PICONMETRICSA: type = @*tagICONMETRICSA
global LPICONMETRICSA: type = @*tagICONMETRICSA
global tagICONMETRICSW: type <cimport,nodecl,ctypedef> = @record{
  cbSize: cuint,
  iHorzSpacing: cint,
  iVertSpacing: cint,
  iTitleWrap: cint,
  lfFont: LOGFONTW
}
global ICONMETRICSW: type = @tagICONMETRICSW
global PICONMETRICSW: type = @*tagICONMETRICSW
global LPICONMETRICSW: type = @*tagICONMETRICSW
global ICONMETRICS: type = @tagICONMETRICSA
global PICONMETRICS: type = @*tagICONMETRICSA
global LPICONMETRICS: type = @*tagICONMETRICSA
global tagANIMATIONINFO: type <cimport,nodecl,ctypedef> = @record{
  cbSize: cuint,
  iMinAnimate: cint
}
global ANIMATIONINFO: type = @tagANIMATIONINFO
global LPANIMATIONINFO: type = @*tagANIMATIONINFO
global tagSERIALKEYSA: type <cimport,nodecl,ctypedef> = @record{
  cbSize: cuint,
  dwFlags: culong,
  lpszActivePort: LPSTR,
  lpszPort: LPSTR,
  iBaudRate: cuint,
  iPortState: cuint,
  iActive: cuint
}
global SERIALKEYSA: type = @tagSERIALKEYSA
global LPSERIALKEYSA: type = @*tagSERIALKEYSA
global tagSERIALKEYSW: type <cimport,nodecl,ctypedef> = @record{
  cbSize: cuint,
  dwFlags: culong,
  lpszActivePort: LPWSTR,
  lpszPort: LPWSTR,
  iBaudRate: cuint,
  iPortState: cuint,
  iActive: cuint
}
global SERIALKEYSW: type = @tagSERIALKEYSW
global LPSERIALKEYSW: type = @*tagSERIALKEYSW
global SERIALKEYS: type = @tagSERIALKEYSA
global LPSERIALKEYS: type = @*tagSERIALKEYSA
global tagHIGHCONTRASTA: type <cimport,nodecl,ctypedef> = @record{
  cbSize: cuint,
  dwFlags: culong,
  lpszDefaultScheme: LPSTR
}
global HIGHCONTRASTA: type = @tagHIGHCONTRASTA
global LPHIGHCONTRASTA: type = @*tagHIGHCONTRASTA
global tagHIGHCONTRASTW: type <cimport,nodecl,ctypedef> = @record{
  cbSize: cuint,
  dwFlags: culong,
  lpszDefaultScheme: LPWSTR
}
global HIGHCONTRASTW: type = @tagHIGHCONTRASTW
global LPHIGHCONTRASTW: type = @*tagHIGHCONTRASTW
global HIGHCONTRAST: type = @tagHIGHCONTRASTA
global LPHIGHCONTRAST: type = @*tagHIGHCONTRASTA
global _VIDEOPARAMETERS: type <cimport,nodecl,ctypedef> = @record{
  Guid: GUID,
  dwOffset: culong,
  dwCommand: culong,
  dwFlags: culong,
  dwMode: culong,
  dwTVStandard: culong,
  dwAvailableModes: culong,
  dwAvailableTVStandard: culong,
  dwFlickerFilter: culong,
  dwOverScanX: culong,
  dwOverScanY: culong,
  dwMaxUnscaledX: culong,
  dwMaxUnscaledY: culong,
  dwPositionX: culong,
  dwPositionY: culong,
  dwBrightness: culong,
  dwContrast: culong,
  dwCPType: culong,
  dwCPCommand: culong,
  dwCPStandard: culong,
  dwCPKey: culong,
  bCP_APSTriggerBits: culong,
  bOEMCopyProtection: [256]cuchar
}
global VIDEOPARAMETERS: type = @_VIDEOPARAMETERS
global PVIDEOPARAMETERS: type = @*_VIDEOPARAMETERS
global LPVIDEOPARAMETERS: type = @*_VIDEOPARAMETERS
global function ChangeDisplaySettingsA(lpDevMode: LPDEVMODEA, dwFlags: culong): clong <cimport,nodecl> end
global function ChangeDisplaySettingsW(lpDevMode: LPDEVMODEW, dwFlags: culong): clong <cimport,nodecl> end
global function ChangeDisplaySettingsExA(lpszDeviceName: LPCSTR, lpDevMode: LPDEVMODEA, hwnd: HWND, dwflags: culong, lParam: LPVOID): clong <cimport,nodecl> end
global function ChangeDisplaySettingsExW(lpszDeviceName: LPCWSTR, lpDevMode: LPDEVMODEW, hwnd: HWND, dwflags: culong, lParam: LPVOID): clong <cimport,nodecl> end
global function EnumDisplaySettingsA(lpszDeviceName: LPCSTR, iModeNum: culong, lpDevMode: LPDEVMODEA): cint <cimport,nodecl> end
global function EnumDisplaySettingsW(lpszDeviceName: LPCWSTR, iModeNum: culong, lpDevMode: LPDEVMODEW): cint <cimport,nodecl> end
global function EnumDisplaySettingsExA(lpszDeviceName: LPCSTR, iModeNum: culong, lpDevMode: LPDEVMODEA, dwFlags: culong): cint <cimport,nodecl> end
global function EnumDisplaySettingsExW(lpszDeviceName: LPCWSTR, iModeNum: culong, lpDevMode: LPDEVMODEW, dwFlags: culong): cint <cimport,nodecl> end
global function EnumDisplayDevicesA(lpDevice: LPCSTR, iDevNum: culong, lpDisplayDevice: PDISPLAY_DEVICEA, dwFlags: culong): cint <cimport,nodecl> end
global function EnumDisplayDevicesW(lpDevice: LPCWSTR, iDevNum: culong, lpDisplayDevice: PDISPLAY_DEVICEW, dwFlags: culong): cint <cimport,nodecl> end
global function SystemParametersInfoA(uiAction: cuint, uiParam: cuint, pvParam: PVOID, fWinIni: cuint): cint <cimport,nodecl> end
global function SystemParametersInfoW(uiAction: cuint, uiParam: cuint, pvParam: PVOID, fWinIni: cuint): cint <cimport,nodecl> end
global tagFILTERKEYS: type <cimport,nodecl,ctypedef> = @record{
  cbSize: cuint,
  dwFlags: culong,
  iWaitMSec: culong,
  iDelayMSec: culong,
  iRepeatMSec: culong,
  iBounceMSec: culong
}
global FILTERKEYS: type = @tagFILTERKEYS
global LPFILTERKEYS: type = @*tagFILTERKEYS
global tagSTICKYKEYS: type <cimport,nodecl,ctypedef> = @record{
  cbSize: cuint,
  dwFlags: culong
}
global STICKYKEYS: type = @tagSTICKYKEYS
global LPSTICKYKEYS: type = @*tagSTICKYKEYS
global tagMOUSEKEYS: type <cimport,nodecl,ctypedef> = @record{
  cbSize: cuint,
  dwFlags: culong,
  iMaxSpeed: culong,
  iTimeToMaxSpeed: culong,
  iCtrlSpeed: culong,
  dwReserved1: culong,
  dwReserved2: culong
}
global MOUSEKEYS: type = @tagMOUSEKEYS
global LPMOUSEKEYS: type = @*tagMOUSEKEYS
global tagACCESSTIMEOUT: type <cimport,nodecl,ctypedef> = @record{
  cbSize: cuint,
  dwFlags: culong,
  iTimeOutMSec: culong
}
global ACCESSTIMEOUT: type = @tagACCESSTIMEOUT
global LPACCESSTIMEOUT: type = @*tagACCESSTIMEOUT
global tagSOUNDSENTRYA: type <cimport,nodecl,ctypedef> = @record{
  cbSize: cuint,
  dwFlags: culong,
  iFSTextEffect: culong,
  iFSTextEffectMSec: culong,
  iFSTextEffectColorBits: culong,
  iFSGrafEffect: culong,
  iFSGrafEffectMSec: culong,
  iFSGrafEffectColor: culong,
  iWindowsEffect: culong,
  iWindowsEffectMSec: culong,
  lpszWindowsEffectDLL: LPSTR,
  iWindowsEffectOrdinal: culong
}
global SOUNDSENTRYA: type = @tagSOUNDSENTRYA
global LPSOUNDSENTRYA: type = @*tagSOUNDSENTRYA
global tagSOUNDSENTRYW: type <cimport,nodecl,ctypedef> = @record{
  cbSize: cuint,
  dwFlags: culong,
  iFSTextEffect: culong,
  iFSTextEffectMSec: culong,
  iFSTextEffectColorBits: culong,
  iFSGrafEffect: culong,
  iFSGrafEffectMSec: culong,
  iFSGrafEffectColor: culong,
  iWindowsEffect: culong,
  iWindowsEffectMSec: culong,
  lpszWindowsEffectDLL: LPWSTR,
  iWindowsEffectOrdinal: culong
}
global SOUNDSENTRYW: type = @tagSOUNDSENTRYW
global LPSOUNDSENTRYW: type = @*tagSOUNDSENTRYW
global SOUNDSENTRY: type = @tagSOUNDSENTRYA
global LPSOUNDSENTRY: type = @*tagSOUNDSENTRYA
global tagTOGGLEKEYS: type <cimport,nodecl,ctypedef> = @record{
  cbSize: cuint,
  dwFlags: culong
}
global TOGGLEKEYS: type = @tagTOGGLEKEYS
global LPTOGGLEKEYS: type = @*tagTOGGLEKEYS
global tagMONITORINFO: type <cimport,nodecl,ctypedef> = @record{
  cbSize: culong,
  rcMonitor: RECT,
  rcWork: RECT,
  dwFlags: culong
}
global MONITORINFO: type = @tagMONITORINFO
global LPMONITORINFO: type = @*tagMONITORINFO
global tagAUDIODESCRIPTION: type <cimport,nodecl,ctypedef> = @record{
  cbSize: cuint,
  Enabled: cint,
  Locale: culong
}
global AUDIODESCRIPTION: type = @tagAUDIODESCRIPTION
global LPAUDIODESCRIPTION: type = @*tagAUDIODESCRIPTION
global tagMONITORINFOEXA: type <cimport,nodecl,ctypedef> = @record{
  __unnamed1: record{
    cbSize: culong,
    rcMonitor: RECT,
    rcWork: RECT,
    dwFlags: culong
  },
  szDevice: [32]cchar
}
global MONITORINFOEXA: type = @tagMONITORINFOEXA
global LPMONITORINFOEXA: type = @*tagMONITORINFOEXA
global tagMONITORINFOEXW: type <cimport,nodecl,ctypedef> = @record{
  __unnamed1: record{
    cbSize: culong,
    rcMonitor: RECT,
    rcWork: RECT,
    dwFlags: culong
  },
  szDevice: [32]cwchar_t
}
global MONITORINFOEXW: type = @tagMONITORINFOEXW
global LPMONITORINFOEXW: type = @*tagMONITORINFOEXW
global MONITORINFOEX: type = @tagMONITORINFOEXA
global LPMONITORINFOEX: type = @*tagMONITORINFOEXA
global MONITORENUMPROC: type <cimport,nodecl> = @function(HMONITOR, HDC, LPRECT, clonglong): cint
global function SetDebugErrorLevel(dwLevel: culong): void <cimport,nodecl> end
global function SetLastErrorEx(dwErrCode: culong, dwType: culong): void <cimport,nodecl> end
global function InternalGetWindowText(hWnd: HWND, pString: LPWSTR, cchMaxCount: cint): cint <cimport,nodecl> end
global function CancelShutdown(): cint <cimport,nodecl> end
global function MonitorFromPoint(pt: POINT, dwFlags: culong): HMONITOR <cimport,nodecl> end
global function MonitorFromRect(lprc: LPCRECT, dwFlags: culong): HMONITOR <cimport,nodecl> end
global function MonitorFromWindow(hwnd: HWND, dwFlags: culong): HMONITOR <cimport,nodecl> end
global function EndTask(hWnd: HWND, fShutDown: cint, fForce: cint): cint <cimport,nodecl> end
global function SoundSentry(): cint <cimport,nodecl> end
global function GetMonitorInfoA(hMonitor: HMONITOR, lpmi: LPMONITORINFO): cint <cimport,nodecl> end
global function GetMonitorInfoW(hMonitor: HMONITOR, lpmi: LPMONITORINFO): cint <cimport,nodecl> end
global function EnumDisplayMonitors(hdc: HDC, lprcClip: LPCRECT, lpfnEnum: MONITORENUMPROC, dwData: clonglong): cint <cimport,nodecl> end
global WINEVENTPROC: type <cimport,nodecl> = @function(HWINEVENTHOOK, culong, HWND, clong, clong, culong, culong): void
global function NotifyWinEvent(event: culong, hwnd: HWND, idObject: clong, idChild: clong): void <cimport,nodecl> end
global function SetWinEventHook(eventMin: culong, eventMax: culong, hmodWinEventProc: HMODULE, pfnWinEventProc: WINEVENTPROC, idProcess: culong, idThread: culong, dwFlags: culong): HWINEVENTHOOK <cimport,nodecl> end
global function IsWinEventHookInstalled(event: culong): cint <cimport,nodecl> end
global function UnhookWinEvent(hWinEventHook: HWINEVENTHOOK): cint <cimport,nodecl> end
global tagGUITHREADINFO: type <cimport,nodecl,ctypedef> = @record{
  cbSize: culong,
  flags: culong,
  hwndActive: HWND,
  hwndFocus: HWND,
  hwndCapture: HWND,
  hwndMenuOwner: HWND,
  hwndMoveSize: HWND,
  hwndCaret: HWND,
  rcCaret: RECT
}
global GUITHREADINFO: type = @tagGUITHREADINFO
global PGUITHREADINFO: type = @*tagGUITHREADINFO
global LPGUITHREADINFO: type = @*tagGUITHREADINFO
global function GetGUIThreadInfo(idThread: culong, pgui: PGUITHREADINFO): cint <cimport,nodecl> end
global function BlockInput(fBlockIt: cint): cint <cimport,nodecl> end
global function GetWindowModuleFileNameA(hwnd: HWND, pszFileName: LPSTR, cchFileNameMax: cuint): cuint <cimport,nodecl> end
global function GetWindowModuleFileNameW(hwnd: HWND, pszFileName: LPWSTR, cchFileNameMax: cuint): cuint <cimport,nodecl> end
global function SetProcessDPIAware(): cint <cimport,nodecl> end
global function IsProcessDPIAware(): cint <cimport,nodecl> end
global tagCURSORINFO: type <cimport,nodecl,ctypedef> = @record{
  cbSize: culong,
  flags: culong,
  hCursor: HCURSOR,
  ptScreenPos: POINT
}
global CURSORINFO: type = @tagCURSORINFO
global PCURSORINFO: type = @*tagCURSORINFO
global LPCURSORINFO: type = @*tagCURSORINFO
global function GetCursorInfo(pci: PCURSORINFO): cint <cimport,nodecl> end
global tagWINDOWINFO: type <cimport,nodecl,ctypedef> = @record{
  cbSize: culong,
  rcWindow: RECT,
  rcClient: RECT,
  dwStyle: culong,
  dwExStyle: culong,
  dwWindowStatus: culong,
  cxWindowBorders: cuint,
  cyWindowBorders: cuint,
  atomWindowType: cushort,
  wCreatorVersion: cushort
}
global WINDOWINFO: type = @tagWINDOWINFO
global PWINDOWINFO: type = @*tagWINDOWINFO
global LPWINDOWINFO: type = @*tagWINDOWINFO
global function GetWindowInfo(hwnd: HWND, pwi: PWINDOWINFO): cint <cimport,nodecl> end
global tagTITLEBARINFO: type <cimport,nodecl,ctypedef> = @record{
  cbSize: culong,
  rcTitleBar: RECT,
  rgstate: [6]culong
}
global TITLEBARINFO: type = @tagTITLEBARINFO
global PTITLEBARINFO: type = @*tagTITLEBARINFO
global LPTITLEBARINFO: type = @*tagTITLEBARINFO
global function GetTitleBarInfo(hwnd: HWND, pti: PTITLEBARINFO): cint <cimport,nodecl> end
global tagTITLEBARINFOEX: type <cimport,nodecl,ctypedef> = @record{
  cbSize: culong,
  rcTitleBar: RECT,
  rgstate: [6]culong,
  rgrect: [6]RECT
}
global TITLEBARINFOEX: type = @tagTITLEBARINFOEX
global PTITLEBARINFOEX: type = @*tagTITLEBARINFOEX
global LPTITLEBARINFOEX: type = @*tagTITLEBARINFOEX
global tagMENUBARINFO: type <cimport,nodecl,cincomplete,ctypedef> = @record{
  cbSize: culong,
  rcBar: RECT,
  hMenu: HMENU,
  hwndMenu: HWND,
  fBarFocused: cint,
  fFocused: cint
}
global MENUBARINFO: type = @tagMENUBARINFO
global PMENUBARINFO: type = @*tagMENUBARINFO
global LPMENUBARINFO: type = @*tagMENUBARINFO
global function GetMenuBarInfo(hwnd: HWND, idObject: clong, idItem: clong, pmbi: PMENUBARINFO): cint <cimport,nodecl> end
global tagSCROLLBARINFO: type <cimport,nodecl,ctypedef> = @record{
  cbSize: culong,
  rcScrollBar: RECT,
  dxyLineButton: cint,
  xyThumbTop: cint,
  xyThumbBottom: cint,
  reserved: cint,
  rgstate: [6]culong
}
global SCROLLBARINFO: type = @tagSCROLLBARINFO
global PSCROLLBARINFO: type = @*tagSCROLLBARINFO
global LPSCROLLBARINFO: type = @*tagSCROLLBARINFO
global function GetScrollBarInfo(hwnd: HWND, idObject: clong, psbi: PSCROLLBARINFO): cint <cimport,nodecl> end
global tagCOMBOBOXINFO: type <cimport,nodecl,ctypedef> = @record{
  cbSize: culong,
  rcItem: RECT,
  rcButton: RECT,
  stateButton: culong,
  hwndCombo: HWND,
  hwndItem: HWND,
  hwndList: HWND
}
global COMBOBOXINFO: type = @tagCOMBOBOXINFO
global PCOMBOBOXINFO: type = @*tagCOMBOBOXINFO
global LPCOMBOBOXINFO: type = @*tagCOMBOBOXINFO
global function GetComboBoxInfo(hwndCombo: HWND, pcbi: PCOMBOBOXINFO): cint <cimport,nodecl> end
global function GetAncestor(hwnd: HWND, gaFlags: cuint): HWND <cimport,nodecl> end
global function RealChildWindowFromPoint(hwndParent: HWND, ptParentClientCoords: POINT): HWND <cimport,nodecl> end
global function RealGetWindowClassA(hwnd: HWND, ptszClassName: LPSTR, cchClassNameMax: cuint): cuint <cimport,nodecl> end
global function RealGetWindowClassW(hwnd: HWND, ptszClassName: LPWSTR, cchClassNameMax: cuint): cuint <cimport,nodecl> end
global tagALTTABINFO: type <cimport,nodecl,ctypedef> = @record{
  cbSize: culong,
  cItems: cint,
  cColumns: cint,
  cRows: cint,
  iColFocus: cint,
  iRowFocus: cint,
  cxItem: cint,
  cyItem: cint,
  ptStart: POINT
}
global ALTTABINFO: type = @tagALTTABINFO
global PALTTABINFO: type = @*tagALTTABINFO
global LPALTTABINFO: type = @*tagALTTABINFO
global function GetAltTabInfoA(hwnd: HWND, iItem: cint, pati: PALTTABINFO, pszItemText: LPSTR, cchItemText: cuint): cint <cimport,nodecl> end
global function GetAltTabInfoW(hwnd: HWND, iItem: cint, pati: PALTTABINFO, pszItemText: LPWSTR, cchItemText: cuint): cint <cimport,nodecl> end
global function GetListBoxInfo(hwnd: HWND): culong <cimport,nodecl> end
global function LockWorkStation(): cint <cimport,nodecl> end
global function UserHandleGrantAccess(hUserHandle: HANDLE, hJob: HANDLE, bGrant: cint): cint <cimport,nodecl> end
global HRAWINPUT__: type <cimport,nodecl,ctypedef> = @record{
  unused: cint
}
global HRAWINPUT: type = @*HRAWINPUT__
global tagRAWINPUTHEADER: type <cimport,nodecl,ctypedef> = @record{
  dwType: culong,
  dwSize: culong,
  hDevice: HANDLE,
  wParam: culonglong
}
global RAWINPUTHEADER: type = @tagRAWINPUTHEADER
global PRAWINPUTHEADER: type = @*tagRAWINPUTHEADER
global LPRAWINPUTHEADER: type = @*tagRAWINPUTHEADER
global tagRAWMOUSE: type <cimport,nodecl,ctypedef> = @record{
  usFlags: cushort,
  __unnamed1: union{
    ulButtons: culong,
    __unnamed1: record{
      usButtonFlags: cushort,
      usButtonData: cushort
    }
  },
  ulRawButtons: culong,
  lLastX: clong,
  lLastY: clong,
  ulExtraInformation: culong
}
global RAWMOUSE: type = @tagRAWMOUSE
global PRAWMOUSE: type = @*tagRAWMOUSE
global LPRAWMOUSE: type = @*tagRAWMOUSE
global tagRAWKEYBOARD: type <cimport,nodecl,ctypedef> = @record{
  MakeCode: cushort,
  Flags: cushort,
  Reserved: cushort,
  VKey: cushort,
  Message: cuint,
  ExtraInformation: culong
}
global RAWKEYBOARD: type = @tagRAWKEYBOARD
global PRAWKEYBOARD: type = @*tagRAWKEYBOARD
global LPRAWKEYBOARD: type = @*tagRAWKEYBOARD
global tagRAWHID: type <cimport,nodecl,ctypedef> = @record{
  dwSizeHid: culong,
  dwCount: culong,
  bRawData: [1]cuchar
}
global RAWHID: type = @tagRAWHID
global PRAWHID: type = @*tagRAWHID
global LPRAWHID: type = @*tagRAWHID
global tagRAWINPUT: type <cimport,nodecl,ctypedef> = @record{
  header: RAWINPUTHEADER,
  data: union{
    mouse: RAWMOUSE,
    keyboard: RAWKEYBOARD,
    hid: RAWHID
  }
}
global RAWINPUT: type = @tagRAWINPUT
global PRAWINPUT: type = @*tagRAWINPUT
global LPRAWINPUT: type = @*tagRAWINPUT
global function GetRawInputData(hRawInput: HRAWINPUT, uiCommand: cuint, pData: LPVOID, pcbSize: PUINT, cbSizeHeader: cuint): cuint <cimport,nodecl> end
global tagRID_DEVICE_INFO_MOUSE: type <cimport,nodecl,ctypedef> = @record{
  dwId: culong,
  dwNumberOfButtons: culong,
  dwSampleRate: culong,
  fHasHorizontalWheel: cint
}
global RID_DEVICE_INFO_MOUSE: type = @tagRID_DEVICE_INFO_MOUSE
global PRID_DEVICE_INFO_MOUSE: type = @*tagRID_DEVICE_INFO_MOUSE
global tagRID_DEVICE_INFO_KEYBOARD: type <cimport,nodecl,ctypedef> = @record{
  dwType: culong,
  dwSubType: culong,
  dwKeyboardMode: culong,
  dwNumberOfFunctionKeys: culong,
  dwNumberOfIndicators: culong,
  dwNumberOfKeysTotal: culong
}
global RID_DEVICE_INFO_KEYBOARD: type = @tagRID_DEVICE_INFO_KEYBOARD
global PRID_DEVICE_INFO_KEYBOARD: type = @*tagRID_DEVICE_INFO_KEYBOARD
global tagRID_DEVICE_INFO_HID: type <cimport,nodecl,ctypedef> = @record{
  dwVendorId: culong,
  dwProductId: culong,
  dwVersionNumber: culong,
  usUsagePage: cushort,
  usUsage: cushort
}
global RID_DEVICE_INFO_HID: type = @tagRID_DEVICE_INFO_HID
global PRID_DEVICE_INFO_HID: type = @*tagRID_DEVICE_INFO_HID
global tagRID_DEVICE_INFO: type <cimport,nodecl,ctypedef> = @record{
  cbSize: culong,
  dwType: culong,
  __unnamed1: union{
    mouse: RID_DEVICE_INFO_MOUSE,
    keyboard: RID_DEVICE_INFO_KEYBOARD,
    hid: RID_DEVICE_INFO_HID
  }
}
global RID_DEVICE_INFO: type = @tagRID_DEVICE_INFO
global PRID_DEVICE_INFO: type = @*tagRID_DEVICE_INFO
global LPRID_DEVICE_INFO: type = @*tagRID_DEVICE_INFO
global function GetRawInputDeviceInfoA(hDevice: HANDLE, uiCommand: cuint, pData: LPVOID, pcbSize: PUINT): cuint <cimport,nodecl> end
global function GetRawInputDeviceInfoW(hDevice: HANDLE, uiCommand: cuint, pData: LPVOID, pcbSize: PUINT): cuint <cimport,nodecl> end
global function GetRawInputBuffer(pData: PRAWINPUT, pcbSize: PUINT, cbSizeHeader: cuint): cuint <cimport,nodecl> end
global tagRAWINPUTDEVICE: type <cimport,nodecl,ctypedef> = @record{
  usUsagePage: cushort,
  usUsage: cushort,
  dwFlags: culong,
  hwndTarget: HWND
}
global RAWINPUTDEVICE: type = @tagRAWINPUTDEVICE
global PRAWINPUTDEVICE: type = @*tagRAWINPUTDEVICE
global LPRAWINPUTDEVICE: type = @*tagRAWINPUTDEVICE
global PCRAWINPUTDEVICE: type = @*RAWINPUTDEVICE
global tagRAWINPUTDEVICELIST: type <cimport,nodecl,ctypedef> = @record{
  hDevice: HANDLE,
  dwType: culong
}
global RAWINPUTDEVICELIST: type = @tagRAWINPUTDEVICELIST
global PRAWINPUTDEVICELIST: type = @*tagRAWINPUTDEVICELIST
global function RegisterRawInputDevices(pRawInputDevices: PCRAWINPUTDEVICE, uiNumDevices: cuint, cbSize: cuint): cint <cimport,nodecl> end
global function GetRegisteredRawInputDevices(pRawInputDevices: PRAWINPUTDEVICE, puiNumDevices: PUINT, cbSize: cuint): cuint <cimport,nodecl> end
global function GetRawInputDeviceList(pRawInputDeviceList: PRAWINPUTDEVICELIST, puiNumDevices: PUINT, cbSize: cuint): cuint <cimport,nodecl> end
global function DefRawInputProc(paRawInput: *PRAWINPUT, nInput: cint, cbSizeHeader: cuint): clonglong <cimport,nodecl> end
global function ChangeWindowMessageFilter(message: cuint, dwFlag: culong): cint <cimport,nodecl> end
global function ShutdownBlockReasonCreate(hWnd: HWND, pwszReason: LPCWSTR): cint <cimport,nodecl> end
global function ShutdownBlockReasonQuery(hWnd: HWND, pwszBuff: LPWSTR, pcchBuff: *culong): cint <cimport,nodecl> end
global function ShutdownBlockReasonDestroy(hWnd: HWND): cint <cimport,nodecl> end
global function GetTimeFormatEx(lpLocaleName: LPCWSTR, dwFlags: culong, lpTime: *SYSTEMTIME, lpFormat: LPCWSTR, lpTimeStr: LPWSTR, cchTime: cint): cint <cimport,nodecl> end
global function GetDateFormatEx(lpLocaleName: LPCWSTR, dwFlags: culong, lpDate: *SYSTEMTIME, lpFormat: LPCWSTR, lpDateStr: LPWSTR, cchDate: cint, lpCalendar: LPCWSTR): cint <cimport,nodecl> end
global function GetDateFormatA(Locale: culong, dwFlags: culong, lpDate: *SYSTEMTIME, lpFormat: LPCSTR, lpDateStr: LPSTR, cchDate: cint): cint <cimport,nodecl> end
global function GetDateFormatW(Locale: culong, dwFlags: culong, lpDate: *SYSTEMTIME, lpFormat: LPCWSTR, lpDateStr: LPWSTR, cchDate: cint): cint <cimport,nodecl> end
global function GetTimeFormatA(Locale: culong, dwFlags: culong, lpTime: *SYSTEMTIME, lpFormat: LPCSTR, lpTimeStr: LPSTR, cchTime: cint): cint <cimport,nodecl> end
global function GetTimeFormatW(Locale: culong, dwFlags: culong, lpTime: *SYSTEMTIME, lpFormat: LPCWSTR, lpTimeStr: LPWSTR, cchTime: cint): cint <cimport,nodecl> end
global CPINFO: type <cimport,nodecl> = @record{
  MaxCharSize: cuint,
  DefaultChar: [2]cuchar,
  LeadByte: [12]cuchar
}
global LPCPINFO: type = @*CPINFO
global _cpinfoexA: type <cimport,nodecl,ctypedef> = @record{
  MaxCharSize: cuint,
  DefaultChar: [2]cuchar,
  LeadByte: [12]cuchar,
  UnicodeDefaultChar: cwchar_t,
  CodePage: cuint,
  CodePageName: [260]cchar
}
global CPINFOEXA: type = @_cpinfoexA
global LPCPINFOEXA: type = @*_cpinfoexA
global _cpinfoexW: type <cimport,nodecl,ctypedef> = @record{
  MaxCharSize: cuint,
  DefaultChar: [2]cuchar,
  LeadByte: [12]cuchar,
  UnicodeDefaultChar: cwchar_t,
  CodePage: cuint,
  CodePageName: [260]cwchar_t
}
global CPINFOEXW: type = @_cpinfoexW
global LPCPINFOEXW: type = @*_cpinfoexW
global CPINFOEX: type = @_cpinfoexA
global LPCPINFOEX: type = @*_cpinfoexA
global _numberfmtA: type <cimport,nodecl,ctypedef> = @record{
  NumDigits: cuint,
  LeadingZero: cuint,
  Grouping: cuint,
  lpDecimalSep: LPSTR,
  lpThousandSep: LPSTR,
  NegativeOrder: cuint
}
global NUMBERFMTA: type = @_numberfmtA
global LPNUMBERFMTA: type = @*_numberfmtA
global _numberfmtW: type <cimport,nodecl,ctypedef> = @record{
  NumDigits: cuint,
  LeadingZero: cuint,
  Grouping: cuint,
  lpDecimalSep: LPWSTR,
  lpThousandSep: LPWSTR,
  NegativeOrder: cuint
}
global NUMBERFMTW: type = @_numberfmtW
global LPNUMBERFMTW: type = @*_numberfmtW
global NUMBERFMT: type = @_numberfmtA
global LPNUMBERFMT: type = @*_numberfmtA
global _currencyfmtA: type <cimport,nodecl,ctypedef> = @record{
  NumDigits: cuint,
  LeadingZero: cuint,
  Grouping: cuint,
  lpDecimalSep: LPSTR,
  lpThousandSep: LPSTR,
  NegativeOrder: cuint,
  PositiveOrder: cuint,
  lpCurrencySymbol: LPSTR
}
global CURRENCYFMTA: type = @_currencyfmtA
global LPCURRENCYFMTA: type = @*_currencyfmtA
global _currencyfmtW: type <cimport,nodecl,ctypedef> = @record{
  NumDigits: cuint,
  LeadingZero: cuint,
  Grouping: cuint,
  lpDecimalSep: LPWSTR,
  lpThousandSep: LPWSTR,
  NegativeOrder: cuint,
  PositiveOrder: cuint,
  lpCurrencySymbol: LPWSTR
}
global CURRENCYFMTW: type = @_currencyfmtW
global LPCURRENCYFMTW: type = @*_currencyfmtW
global CURRENCYFMT: type = @_currencyfmtA
global LPCURRENCYFMT: type = @*_currencyfmtA
global SYSNLS_FUNCTION: type <cimport,nodecl,using,ctypedef> = @enum(cint){
  COMPARE_STRING = 1
}
global NLSVERSIONINFO: type <cimport,nodecl> = @record{
  dwNLSVersionInfoSize: culong,
  dwNLSVersion: culong,
  dwDefinedVersion: culong
}
global LPNLSVERSIONINFO: type = @*NLSVERSIONINFO
global NLSVERSIONINFOEX: type <cimport,nodecl> = @record{
  dwNLSVersionInfoSize: culong,
  dwNLSVersion: culong,
  dwDefinedVersion: culong,
  dwEffectiveId: culong,
  guidCustomVersion: GUID
}
global LPNLSVERSIONINFOEX: type = @*NLSVERSIONINFOEX
global SYSGEOTYPE: type <cimport,nodecl,using,ctypedef> = @enum(cint){
  GEO_NATION = 1,
  GEO_LATITUDE = 2,
  GEO_LONGITUDE = 3,
  GEO_ISO2 = 4,
  GEO_ISO3 = 5,
  GEO_RFC1766 = 6,
  GEO_LCID = 7,
  GEO_FRIENDLYNAME = 8,
  GEO_OFFICIALNAME = 9,
  GEO_TIMEZONES = 10,
  GEO_OFFICIALLANGUAGES = 11,
  GEO_ISO_UN_NUMBER = 12,
  GEO_PARENT = 13,
  GEO_DIALINGCODE = 14,
  GEO_CURRENCYCODE = 15,
  GEO_CURRENCYSYMBOL = 16
}
global SYSGEOCLASS: type <cimport,nodecl,using,ctypedef> = @enum(cint){
  GEOCLASS_NATION = 16,
  GEOCLASS_REGION = 14,
  GEOCLASS_ALL = 0
}
global _NORM_FORM: type <cimport,nodecl,using,ctypedef> = @enum(cint){
  NormalizationOther = 0,
  NormalizationC = 1,
  NormalizationD = 2,
  NormalizationKC = 5,
  NormalizationKD = 6
}
global NORM_FORM: type = @_NORM_FORM
global LANGUAGEGROUP_ENUMPROCA: type <cimport,nodecl> = @function(culong, LPSTR, LPSTR, culong, clonglong): cint
global LANGGROUPLOCALE_ENUMPROCA: type <cimport,nodecl> = @function(culong, culong, LPSTR, clonglong): cint
global UILANGUAGE_ENUMPROCA: type <cimport,nodecl> = @function(LPSTR, clonglong): cint
global CODEPAGE_ENUMPROCA: type <cimport,nodecl> = @function(LPSTR): cint
global DATEFMT_ENUMPROCA: type <cimport,nodecl> = @function(LPSTR): cint
global DATEFMT_ENUMPROCEXA: type <cimport,nodecl> = @function(LPSTR, culong): cint
global TIMEFMT_ENUMPROCA: type <cimport,nodecl> = @function(LPSTR): cint
global CALINFO_ENUMPROCA: type <cimport,nodecl> = @function(LPSTR): cint
global CALINFO_ENUMPROCEXA: type <cimport,nodecl> = @function(LPSTR, culong): cint
global LOCALE_ENUMPROCA: type <cimport,nodecl> = @function(LPSTR): cint
global LOCALE_ENUMPROCW: type <cimport,nodecl> = @function(LPWSTR): cint
global LANGUAGEGROUP_ENUMPROCW: type <cimport,nodecl> = @function(culong, LPWSTR, LPWSTR, culong, clonglong): cint
global LANGGROUPLOCALE_ENUMPROCW: type <cimport,nodecl> = @function(culong, culong, LPWSTR, clonglong): cint
global UILANGUAGE_ENUMPROCW: type <cimport,nodecl> = @function(LPWSTR, clonglong): cint
global CODEPAGE_ENUMPROCW: type <cimport,nodecl> = @function(LPWSTR): cint
global DATEFMT_ENUMPROCW: type <cimport,nodecl> = @function(LPWSTR): cint
global DATEFMT_ENUMPROCEXW: type <cimport,nodecl> = @function(LPWSTR, culong): cint
global TIMEFMT_ENUMPROCW: type <cimport,nodecl> = @function(LPWSTR): cint
global CALINFO_ENUMPROCW: type <cimport,nodecl> = @function(LPWSTR): cint
global CALINFO_ENUMPROCEXW: type <cimport,nodecl> = @function(LPWSTR, culong): cint
global GEO_ENUMPROC: type <cimport,nodecl> = @function(clong): cint
global _FILEMUIINFO: type <cimport,nodecl,ctypedef> = @record{
  dwSize: culong,
  dwVersion: culong,
  dwFileType: culong,
  pChecksum: [16]cuchar,
  pServiceChecksum: [16]cuchar,
  dwLanguageNameOffset: culong,
  dwTypeIDMainSize: culong,
  dwTypeIDMainOffset: culong,
  dwTypeNameMainOffset: culong,
  dwTypeIDMUISize: culong,
  dwTypeIDMUIOffset: culong,
  dwTypeNameMUIOffset: culong,
  abBuffer: [8]cuchar
}
global FILEMUIINFO: type = @_FILEMUIINFO
global PFILEMUIINFO: type = @*_FILEMUIINFO
global function CompareStringW(Locale: culong, dwCmpFlags: culong, lpString1: PCNZWCH, cchCount1: cint, lpString2: PCNZWCH, cchCount2: cint): cint <cimport,nodecl> end
global function FoldStringW(dwMapFlags: culong, lpSrcStr: LPCWCH, cchSrc: cint, lpDestStr: LPWSTR, cchDest: cint): cint <cimport,nodecl> end
global function GetStringTypeExW(Locale: culong, dwInfoType: culong, lpSrcStr: LPCWCH, cchSrc: cint, lpCharType: LPWORD): cint <cimport,nodecl> end
global function CompareStringEx(lpLocaleName: LPCWSTR, dwCmpFlags: culong, lpString1: LPCWCH, cchCount1: cint, lpString2: LPCWCH, cchCount2: cint, lpVersionInformation: LPNLSVERSIONINFO, lpReserved: LPVOID, lParam: clonglong): cint <cimport,nodecl> end
global function CompareStringOrdinal(lpString1: LPCWCH, cchCount1: cint, lpString2: LPCWCH, cchCount2: cint, bIgnoreCase: cint): cint <cimport,nodecl> end
global function GetStringTypeW(dwInfoType: culong, lpSrcStr: LPCWCH, cchSrc: cint, lpCharType: LPWORD): cint <cimport,nodecl> end
global function MultiByteToWideChar(CodePage: cuint, dwFlags: culong, lpMultiByteStr: LPCCH, cbMultiByte: cint, lpWideCharStr: LPWSTR, cchWideChar: cint): cint <cimport,nodecl> end
global function WideCharToMultiByte(CodePage: cuint, dwFlags: culong, lpWideCharStr: LPCWCH, cchWideChar: cint, lpMultiByteStr: LPSTR, cbMultiByte: cint, lpDefaultChar: LPCCH, lpUsedDefaultChar: LPBOOL): cint <cimport,nodecl> end
global function IsValidCodePage(CodePage: cuint): cint <cimport,nodecl> end
global function GetACP(): cuint <cimport,nodecl> end
global function IsDBCSLeadByte(TestChar: cuchar): cint <cimport,nodecl> end
global function IsDBCSLeadByteEx(CodePage: cuint, TestChar: cuchar): cint <cimport,nodecl> end
global function IsNLSDefinedString(Function: culong, dwFlags: culong, lpVersionInformation: LPNLSVERSIONINFO, lpString: LPCWSTR, cchStr: cint): cint <cimport,nodecl> end
global function GetLocaleInfoW(Locale: culong, LCType: culong, lpLCData: LPWSTR, cchData: cint): cint <cimport,nodecl> end
global function GetLocaleInfoA(Locale: culong, LCType: culong, lpLCData: LPSTR, cchData: cint): cint <cimport,nodecl> end
global function GetOEMCP(): cuint <cimport,nodecl> end
global function CompareStringA(Locale: culong, dwCmpFlags: culong, lpString1: PCNZCH, cchCount1: cint, lpString2: PCNZCH, cchCount2: cint): cint <cimport,nodecl> end
global function LCMapStringW(Locale: culong, dwMapFlags: culong, lpSrcStr: LPCWSTR, cchSrc: cint, lpDestStr: LPWSTR, cchDest: cint): cint <cimport,nodecl> end
global function LCMapStringA(Locale: culong, dwMapFlags: culong, lpSrcStr: LPCSTR, cchSrc: cint, lpDestStr: LPSTR, cchDest: cint): cint <cimport,nodecl> end
global function GetNumberFormatA(Locale: culong, dwFlags: culong, lpValue: LPCSTR, lpFormat: *NUMBERFMTA, lpNumberStr: LPSTR, cchNumber: cint): cint <cimport,nodecl> end
global function GetNumberFormatW(Locale: culong, dwFlags: culong, lpValue: LPCWSTR, lpFormat: *NUMBERFMTW, lpNumberStr: LPWSTR, cchNumber: cint): cint <cimport,nodecl> end
global function GetCurrencyFormatA(Locale: culong, dwFlags: culong, lpValue: LPCSTR, lpFormat: *CURRENCYFMTA, lpCurrencyStr: LPSTR, cchCurrency: cint): cint <cimport,nodecl> end
global function GetCurrencyFormatW(Locale: culong, dwFlags: culong, lpValue: LPCWSTR, lpFormat: *CURRENCYFMTW, lpCurrencyStr: LPWSTR, cchCurrency: cint): cint <cimport,nodecl> end
global function EnumCalendarInfoA(lpCalInfoEnumProc: CALINFO_ENUMPROCA, Locale: culong, Calendar: culong, CalType: culong): cint <cimport,nodecl> end
global function EnumCalendarInfoW(lpCalInfoEnumProc: CALINFO_ENUMPROCW, Locale: culong, Calendar: culong, CalType: culong): cint <cimport,nodecl> end
global function EnumCalendarInfoExA(lpCalInfoEnumProcEx: CALINFO_ENUMPROCEXA, Locale: culong, Calendar: culong, CalType: culong): cint <cimport,nodecl> end
global function EnumCalendarInfoExW(lpCalInfoEnumProcEx: CALINFO_ENUMPROCEXW, Locale: culong, Calendar: culong, CalType: culong): cint <cimport,nodecl> end
global function EnumTimeFormatsA(lpTimeFmtEnumProc: TIMEFMT_ENUMPROCA, Locale: culong, dwFlags: culong): cint <cimport,nodecl> end
global function EnumTimeFormatsW(lpTimeFmtEnumProc: TIMEFMT_ENUMPROCW, Locale: culong, dwFlags: culong): cint <cimport,nodecl> end
global function EnumDateFormatsA(lpDateFmtEnumProc: DATEFMT_ENUMPROCA, Locale: culong, dwFlags: culong): cint <cimport,nodecl> end
global function EnumDateFormatsW(lpDateFmtEnumProc: DATEFMT_ENUMPROCW, Locale: culong, dwFlags: culong): cint <cimport,nodecl> end
global function EnumDateFormatsExA(lpDateFmtEnumProcEx: DATEFMT_ENUMPROCEXA, Locale: culong, dwFlags: culong): cint <cimport,nodecl> end
global function EnumDateFormatsExW(lpDateFmtEnumProcEx: DATEFMT_ENUMPROCEXW, Locale: culong, dwFlags: culong): cint <cimport,nodecl> end
global function IsValidLanguageGroup(LanguageGroup: culong, dwFlags: culong): cint <cimport,nodecl> end
global function GetNLSVersion(Function: culong, Locale: culong, lpVersionInformation: LPNLSVERSIONINFO): cint <cimport,nodecl> end
global function IsValidLocale(Locale: culong, dwFlags: culong): cint <cimport,nodecl> end
global function SetLocaleInfoA(Locale: culong, LCType: culong, lpLCData: LPCSTR): cint <cimport,nodecl> end
global function SetLocaleInfoW(Locale: culong, LCType: culong, lpLCData: LPCWSTR): cint <cimport,nodecl> end
global function GetCalendarInfoA(Locale: culong, Calendar: culong, CalType: culong, lpCalData: LPSTR, cchData: cint, lpValue: LPDWORD): cint <cimport,nodecl> end
global function GetCalendarInfoW(Locale: culong, Calendar: culong, CalType: culong, lpCalData: LPWSTR, cchData: cint, lpValue: LPDWORD): cint <cimport,nodecl> end
global function SetCalendarInfoA(Locale: culong, Calendar: culong, CalType: culong, lpCalData: LPCSTR): cint <cimport,nodecl> end
global function SetCalendarInfoW(Locale: culong, Calendar: culong, CalType: culong, lpCalData: LPCWSTR): cint <cimport,nodecl> end
global function GetDurationFormat(Locale: culong, dwFlags: culong, lpDuration: *SYSTEMTIME, ullDuration: culonglong, lpFormat: LPCWSTR, lpDurationStr: LPWSTR, cchDuration: cint): cint <cimport,nodecl> end
global function FindNLSString(Locale: culong, dwFindNLSStringFlags: culong, lpStringSource: LPCWSTR, cchSource: cint, lpStringValue: LPCWSTR, cchValue: cint, pcchFound: LPINT): cint <cimport,nodecl> end
global function GetGeoInfoA(Location: clong, GeoType: culong, lpGeoData: LPSTR, cchData: cint, LangId: cushort): cint <cimport,nodecl> end
global function GetGeoInfoW(Location: clong, GeoType: culong, lpGeoData: LPWSTR, cchData: cint, LangId: cushort): cint <cimport,nodecl> end
global function EnumSystemGeoID(GeoClass: culong, ParentGeoId: clong, lpGeoEnumProc: GEO_ENUMPROC): cint <cimport,nodecl> end
global function GetUserGeoID(GeoClass: culong): clong <cimport,nodecl> end
global function GetUserDefaultGeoName(geoName: LPWSTR, geoNameCount: cint): cint <cimport,nodecl> end
global function GetCPInfo(CodePage: cuint, lpCPInfo: LPCPINFO): cint <cimport,nodecl> end
global function GetCPInfoExA(CodePage: cuint, dwFlags: culong, lpCPInfoEx: LPCPINFOEXA): cint <cimport,nodecl> end
global function GetCPInfoExW(CodePage: cuint, dwFlags: culong, lpCPInfoEx: LPCPINFOEXW): cint <cimport,nodecl> end
global function LCIDToLocaleName(Locale: culong, lpName: LPWSTR, cchName: cint, dwFlags: culong): cint <cimport,nodecl> end
global function LocaleNameToLCID(lpName: LPCWSTR, dwFlags: culong): culong <cimport,nodecl> end
global function SetUserGeoID(GeoId: clong): cint <cimport,nodecl> end
global function ConvertDefaultLocale(Locale: culong): culong <cimport,nodecl> end
global function GetThreadLocale(): culong <cimport,nodecl> end
global function SetThreadLocale(Locale: culong): cint <cimport,nodecl> end
global function GetSystemDefaultUILanguage(): cushort <cimport,nodecl> end
global function GetSystemDefaultLangID(): cushort <cimport,nodecl> end
global function GetSystemDefaultLCID(): culong <cimport,nodecl> end
global function GetUserDefaultLCID(): culong <cimport,nodecl> end
global function SetThreadUILanguage(LangId: cushort): cushort <cimport,nodecl> end
global function GetStringTypeA(Locale: culong, dwInfoType: culong, lpSrcStr: LPCSTR, cchSrc: cint, lpCharType: LPWORD): cint <cimport,nodecl> end
global function FoldStringA(dwMapFlags: culong, lpSrcStr: LPCSTR, cchSrc: cint, lpDestStr: LPSTR, cchDest: cint): cint <cimport,nodecl> end
global function EnumSystemLocalesA(lpLocaleEnumProc: LOCALE_ENUMPROCA, dwFlags: culong): cint <cimport,nodecl> end
global function EnumSystemLocalesW(lpLocaleEnumProc: LOCALE_ENUMPROCW, dwFlags: culong): cint <cimport,nodecl> end
global function EnumSystemLanguageGroupsA(lpLanguageGroupEnumProc: LANGUAGEGROUP_ENUMPROCA, dwFlags: culong, lParam: clonglong): cint <cimport,nodecl> end
global function EnumSystemLanguageGroupsW(lpLanguageGroupEnumProc: LANGUAGEGROUP_ENUMPROCW, dwFlags: culong, lParam: clonglong): cint <cimport,nodecl> end
global function EnumLanguageGroupLocalesA(lpLangGroupLocaleEnumProc: LANGGROUPLOCALE_ENUMPROCA, LanguageGroup: culong, dwFlags: culong, lParam: clonglong): cint <cimport,nodecl> end
global function EnumLanguageGroupLocalesW(lpLangGroupLocaleEnumProc: LANGGROUPLOCALE_ENUMPROCW, LanguageGroup: culong, dwFlags: culong, lParam: clonglong): cint <cimport,nodecl> end
global function GetThreadUILanguage(): cushort <cimport,nodecl> end
global function GetProcessPreferredUILanguages(dwFlags: culong, pulNumLanguages: PULONG, pwszLanguagesBuffer: PZZWSTR, pcchLanguagesBuffer: PULONG): cint <cimport,nodecl> end
global function SetProcessPreferredUILanguages(dwFlags: culong, pwszLanguagesBuffer: PCZZWSTR, pulNumLanguages: PULONG): cint <cimport,nodecl> end
global function GetUserPreferredUILanguages(dwFlags: culong, pulNumLanguages: PULONG, pwszLanguagesBuffer: PZZWSTR, pcchLanguagesBuffer: PULONG): cint <cimport,nodecl> end
global function GetSystemPreferredUILanguages(dwFlags: culong, pulNumLanguages: PULONG, pwszLanguagesBuffer: PZZWSTR, pcchLanguagesBuffer: PULONG): cint <cimport,nodecl> end
global function GetThreadPreferredUILanguages(dwFlags: culong, pulNumLanguages: PULONG, pwszLanguagesBuffer: PZZWSTR, pcchLanguagesBuffer: PULONG): cint <cimport,nodecl> end
global function SetThreadPreferredUILanguages(dwFlags: culong, pwszLanguagesBuffer: PCZZWSTR, pulNumLanguages: PULONG): cint <cimport,nodecl> end
global function GetFileMUIInfo(dwFlags: culong, pcwszFilePath: PCWSTR, pFileMUIInfo: PFILEMUIINFO, pcbFileMUIInfo: *culong): cint <cimport,nodecl> end
global function GetFileMUIPath(dwFlags: culong, pcwszFilePath: PCWSTR, pwszLanguage: PWSTR, pcchLanguage: PULONG, pwszFileMUIPath: PWSTR, pcchFileMUIPath: PULONG, pululEnumerator: PULONGLONG): cint <cimport,nodecl> end
global function GetUILanguageInfo(dwFlags: culong, pwmszLanguage: PCZZWSTR, pwszFallbackLanguages: PZZWSTR, pcchFallbackLanguages: PDWORD, pAttributes: PDWORD): cint <cimport,nodecl> end
global function NotifyUILanguageChange(dwFlags: culong, pcwstrNewLanguage: PCWSTR, pcwstrPreviousLanguage: PCWSTR, dwReserved: culong, pdwStatusRtrn: PDWORD): cint <cimport,nodecl> end
global function GetStringTypeExA(Locale: culong, dwInfoType: culong, lpSrcStr: LPCSTR, cchSrc: cint, lpCharType: LPWORD): cint <cimport,nodecl> end
global function GetUserDefaultUILanguage(): cushort <cimport,nodecl> end
global function EnumUILanguagesA(lpUILanguageEnumProc: UILANGUAGE_ENUMPROCA, dwFlags: culong, lParam: clonglong): cint <cimport,nodecl> end
global function EnumUILanguagesW(lpUILanguageEnumProc: UILANGUAGE_ENUMPROCW, dwFlags: culong, lParam: clonglong): cint <cimport,nodecl> end
global function EnumSystemCodePagesA(lpCodePageEnumProc: CODEPAGE_ENUMPROCA, dwFlags: culong): cint <cimport,nodecl> end
global function EnumSystemCodePagesW(lpCodePageEnumProc: CODEPAGE_ENUMPROCW, dwFlags: culong): cint <cimport,nodecl> end
global function GetUserDefaultLangID(): cushort <cimport,nodecl> end
global CALINFO_ENUMPROCEXEX: type <cimport,nodecl> = @function(LPWSTR, culong, LPWSTR, clonglong): cint
global DATEFMT_ENUMPROCEXEX: type <cimport,nodecl> = @function(LPWSTR, culong, clonglong): cint
global TIMEFMT_ENUMPROCEX: type <cimport,nodecl> = @function(LPWSTR, clonglong): cint
global LOCALE_ENUMPROCEX: type <cimport,nodecl> = @function(LPWSTR, culong, clonglong): cint
global function NormalizeString(NormForm: NORM_FORM, lpSrcString: LPCWSTR, cwSrcLength: cint, lpDstString: LPWSTR, cwDstLength: cint): cint <cimport,nodecl> end
global function IsNormalizedString(NormForm: NORM_FORM, lpString: LPCWSTR, cwLength: cint): cint <cimport,nodecl> end
global function IdnToAscii(dwFlags: culong, lpUnicodeCharStr: LPCWSTR, cchUnicodeChar: cint, lpASCIICharStr: LPWSTR, cchASCIIChar: cint): cint <cimport,nodecl> end
global function IdnToNameprepUnicode(dwFlags: culong, lpUnicodeCharStr: LPCWSTR, cchUnicodeChar: cint, lpNameprepCharStr: LPWSTR, cchNameprepChar: cint): cint <cimport,nodecl> end
global function IdnToUnicode(dwFlags: culong, lpASCIICharStr: LPCWSTR, cchASCIIChar: cint, lpUnicodeCharStr: LPWSTR, cchUnicodeChar: cint): cint <cimport,nodecl> end
global function VerifyScripts(dwFlags: culong, lpLocaleScripts: LPCWSTR, cchLocaleScripts: cint, lpTestScripts: LPCWSTR, cchTestScripts: cint): cint <cimport,nodecl> end
global function GetStringScripts(dwFlags: culong, lpString: LPCWSTR, cchString: cint, lpScripts: LPWSTR, cchScripts: cint): cint <cimport,nodecl> end
global function GetLocaleInfoEx(lpLocaleName: LPCWSTR, LCType: culong, lpLCData: LPWSTR, cchData: cint): cint <cimport,nodecl> end
global function GetCalendarInfoEx(lpLocaleName: LPCWSTR, Calendar: culong, lpReserved: LPCWSTR, CalType: culong, lpCalData: LPWSTR, cchData: cint, lpValue: LPDWORD): cint <cimport,nodecl> end
global function GetDurationFormatEx(lpLocaleName: LPCWSTR, dwFlags: culong, lpDuration: *SYSTEMTIME, ullDuration: culonglong, lpFormat: LPCWSTR, lpDurationStr: LPWSTR, cchDuration: cint): cint <cimport,nodecl> end
global function GetNumberFormatEx(lpLocaleName: LPCWSTR, dwFlags: culong, lpValue: LPCWSTR, lpFormat: *NUMBERFMTW, lpNumberStr: LPWSTR, cchNumber: cint): cint <cimport,nodecl> end
global function GetCurrencyFormatEx(lpLocaleName: LPCWSTR, dwFlags: culong, lpValue: LPCWSTR, lpFormat: *CURRENCYFMTW, lpCurrencyStr: LPWSTR, cchCurrency: cint): cint <cimport,nodecl> end
global function GetUserDefaultLocaleName(lpLocaleName: LPWSTR, cchLocaleName: cint): cint <cimport,nodecl> end
global function GetSystemDefaultLocaleName(lpLocaleName: LPWSTR, cchLocaleName: cint): cint <cimport,nodecl> end
global function GetNLSVersionEx(Function: culong, lpLocaleName: LPCWSTR, lpVersionInformation: LPNLSVERSIONINFOEX): cint <cimport,nodecl> end
global function FindNLSStringEx(lpLocaleName: LPCWSTR, dwFindNLSStringFlags: culong, lpStringSource: LPCWSTR, cchSource: cint, lpStringValue: LPCWSTR, cchValue: cint, pcchFound: LPINT, lpVersionInformation: LPNLSVERSIONINFO, lpReserved: LPVOID, sortHandle: clonglong): cint <cimport,nodecl> end
global function LCMapStringEx(lpLocaleName: LPCWSTR, dwMapFlags: culong, lpSrcStr: LPCWSTR, cchSrc: cint, lpDestStr: LPWSTR, cchDest: cint, lpVersionInformation: LPNLSVERSIONINFO, lpReserved: LPVOID, sortHandle: clonglong): cint <cimport,nodecl> end
global function IsValidLocaleName(lpLocaleName: LPCWSTR): cint <cimport,nodecl> end
global function EnumCalendarInfoExEx(pCalInfoEnumProcExEx: CALINFO_ENUMPROCEXEX, lpLocaleName: LPCWSTR, Calendar: culong, lpReserved: LPCWSTR, CalType: culong, lParam: clonglong): cint <cimport,nodecl> end
global function EnumDateFormatsExEx(lpDateFmtEnumProcExEx: DATEFMT_ENUMPROCEXEX, lpLocaleName: LPCWSTR, dwFlags: culong, lParam: clonglong): cint <cimport,nodecl> end
global function EnumTimeFormatsEx(lpTimeFmtEnumProcEx: TIMEFMT_ENUMPROCEX, lpLocaleName: LPCWSTR, dwFlags: culong, lParam: clonglong): cint <cimport,nodecl> end
global function EnumSystemLocalesEx(lpLocaleEnumProcEx: LOCALE_ENUMPROCEX, dwFlags: culong, lParam: clonglong, lpReserved: LPVOID): cint <cimport,nodecl> end
global _COORD: type <cimport,nodecl,ctypedef> = @record{
  X: cshort,
  Y: cshort
}
global COORD: type = @_COORD
global PCOORD: type = @*_COORD
global _SMALL_RECT: type <cimport,nodecl,ctypedef> = @record{
  Left: cshort,
  Top: cshort,
  Right: cshort,
  Bottom: cshort
}
global SMALL_RECT: type = @_SMALL_RECT
global PSMALL_RECT: type = @*_SMALL_RECT
global _KEY_EVENT_RECORD: type <cimport,nodecl,ctypedef> = @record{
  bKeyDown: cint,
  wRepeatCount: cushort,
  wVirtualKeyCode: cushort,
  wVirtualScanCode: cushort,
  uChar: union{
    UnicodeChar: cwchar_t,
    AsciiChar: cchar
  },
  dwControlKeyState: culong
}
global KEY_EVENT_RECORD: type = @_KEY_EVENT_RECORD
global PKEY_EVENT_RECORD: type = @*_KEY_EVENT_RECORD
global _MOUSE_EVENT_RECORD: type <cimport,nodecl,ctypedef> = @record{
  dwMousePosition: COORD,
  dwButtonState: culong,
  dwControlKeyState: culong,
  dwEventFlags: culong
}
global MOUSE_EVENT_RECORD: type = @_MOUSE_EVENT_RECORD
global PMOUSE_EVENT_RECORD: type = @*_MOUSE_EVENT_RECORD
global _WINDOW_BUFFER_SIZE_RECORD: type <cimport,nodecl,ctypedef> = @record{
  dwSize: COORD
}
global WINDOW_BUFFER_SIZE_RECORD: type = @_WINDOW_BUFFER_SIZE_RECORD
global PWINDOW_BUFFER_SIZE_RECORD: type = @*_WINDOW_BUFFER_SIZE_RECORD
global _MENU_EVENT_RECORD: type <cimport,nodecl,ctypedef> = @record{
  dwCommandId: cuint
}
global MENU_EVENT_RECORD: type = @_MENU_EVENT_RECORD
global PMENU_EVENT_RECORD: type = @*_MENU_EVENT_RECORD
global _FOCUS_EVENT_RECORD: type <cimport,nodecl,ctypedef> = @record{
  bSetFocus: cint
}
global FOCUS_EVENT_RECORD: type = @_FOCUS_EVENT_RECORD
global PFOCUS_EVENT_RECORD: type = @*_FOCUS_EVENT_RECORD
global _INPUT_RECORD: type <cimport,nodecl,ctypedef> = @record{
  EventType: cushort,
  Event: union{
    KeyEvent: KEY_EVENT_RECORD,
    MouseEvent: MOUSE_EVENT_RECORD,
    WindowBufferSizeEvent: WINDOW_BUFFER_SIZE_RECORD,
    MenuEvent: MENU_EVENT_RECORD,
    FocusEvent: FOCUS_EVENT_RECORD
  }
}
global INPUT_RECORD: type = @_INPUT_RECORD
global PINPUT_RECORD: type = @*_INPUT_RECORD
global _CHAR_INFO: type <cimport,nodecl,ctypedef> = @record{
  Char: union{
    UnicodeChar: cwchar_t,
    AsciiChar: cchar
  },
  Attributes: cushort
}
global CHAR_INFO: type = @_CHAR_INFO
global PCHAR_INFO: type = @*_CHAR_INFO
global _CONSOLE_SCREEN_BUFFER_INFO: type <cimport,nodecl,ctypedef> = @record{
  dwSize: COORD,
  dwCursorPosition: COORD,
  wAttributes: cushort,
  srWindow: SMALL_RECT,
  dwMaximumWindowSize: COORD
}
global CONSOLE_SCREEN_BUFFER_INFO: type = @_CONSOLE_SCREEN_BUFFER_INFO
global PCONSOLE_SCREEN_BUFFER_INFO: type = @*_CONSOLE_SCREEN_BUFFER_INFO
global _CONSOLE_CURSOR_INFO: type <cimport,nodecl,ctypedef> = @record{
  dwSize: culong,
  bVisible: cint
}
global CONSOLE_CURSOR_INFO: type = @_CONSOLE_CURSOR_INFO
global PCONSOLE_CURSOR_INFO: type = @*_CONSOLE_CURSOR_INFO
global _CONSOLE_FONT_INFO: type <cimport,nodecl,ctypedef> = @record{
  nFont: culong,
  dwFontSize: COORD
}
global CONSOLE_FONT_INFO: type = @_CONSOLE_FONT_INFO
global PCONSOLE_FONT_INFO: type = @*_CONSOLE_FONT_INFO
global _CONSOLE_SELECTION_INFO: type <cimport,nodecl,ctypedef> = @record{
  dwFlags: culong,
  dwSelectionAnchor: COORD,
  srSelection: SMALL_RECT
}
global CONSOLE_SELECTION_INFO: type = @_CONSOLE_SELECTION_INFO
global PCONSOLE_SELECTION_INFO: type = @*_CONSOLE_SELECTION_INFO
global PHANDLER_ROUTINE: type <cimport,nodecl> = @function(culong): cint
global function PeekConsoleInputA(hConsoleInput: HANDLE, lpBuffer: PINPUT_RECORD, nLength: culong, lpNumberOfEventsRead: LPDWORD): cint <cimport,nodecl> end
global function PeekConsoleInputW(hConsoleInput: HANDLE, lpBuffer: PINPUT_RECORD, nLength: culong, lpNumberOfEventsRead: LPDWORD): cint <cimport,nodecl> end
global function ReadConsoleInputA(hConsoleInput: HANDLE, lpBuffer: PINPUT_RECORD, nLength: culong, lpNumberOfEventsRead: LPDWORD): cint <cimport,nodecl> end
global function ReadConsoleInputW(hConsoleInput: HANDLE, lpBuffer: PINPUT_RECORD, nLength: culong, lpNumberOfEventsRead: LPDWORD): cint <cimport,nodecl> end
global function WriteConsoleInputA(hConsoleInput: HANDLE, lpBuffer: *INPUT_RECORD, nLength: culong, lpNumberOfEventsWritten: LPDWORD): cint <cimport,nodecl> end
global function WriteConsoleInputW(hConsoleInput: HANDLE, lpBuffer: *INPUT_RECORD, nLength: culong, lpNumberOfEventsWritten: LPDWORD): cint <cimport,nodecl> end
global function ReadConsoleOutputA(hConsoleOutput: HANDLE, lpBuffer: PCHAR_INFO, dwBufferSize: COORD, dwBufferCoord: COORD, lpReadRegion: PSMALL_RECT): cint <cimport,nodecl> end
global function ReadConsoleOutputW(hConsoleOutput: HANDLE, lpBuffer: PCHAR_INFO, dwBufferSize: COORD, dwBufferCoord: COORD, lpReadRegion: PSMALL_RECT): cint <cimport,nodecl> end
global function WriteConsoleOutputA(hConsoleOutput: HANDLE, lpBuffer: *CHAR_INFO, dwBufferSize: COORD, dwBufferCoord: COORD, lpWriteRegion: PSMALL_RECT): cint <cimport,nodecl> end
global function WriteConsoleOutputW(hConsoleOutput: HANDLE, lpBuffer: *CHAR_INFO, dwBufferSize: COORD, dwBufferCoord: COORD, lpWriteRegion: PSMALL_RECT): cint <cimport,nodecl> end
global function ReadConsoleOutputCharacterA(hConsoleOutput: HANDLE, lpCharacter: LPSTR, nLength: culong, dwReadCoord: COORD, lpNumberOfCharsRead: LPDWORD): cint <cimport,nodecl> end
global function ReadConsoleOutputCharacterW(hConsoleOutput: HANDLE, lpCharacter: LPWSTR, nLength: culong, dwReadCoord: COORD, lpNumberOfCharsRead: LPDWORD): cint <cimport,nodecl> end
global function ReadConsoleOutputAttribute(hConsoleOutput: HANDLE, lpAttribute: LPWORD, nLength: culong, dwReadCoord: COORD, lpNumberOfAttrsRead: LPDWORD): cint <cimport,nodecl> end
global function WriteConsoleOutputCharacterA(hConsoleOutput: HANDLE, lpCharacter: LPCSTR, nLength: culong, dwWriteCoord: COORD, lpNumberOfCharsWritten: LPDWORD): cint <cimport,nodecl> end
global function WriteConsoleOutputCharacterW(hConsoleOutput: HANDLE, lpCharacter: LPCWSTR, nLength: culong, dwWriteCoord: COORD, lpNumberOfCharsWritten: LPDWORD): cint <cimport,nodecl> end
global function WriteConsoleOutputAttribute(hConsoleOutput: HANDLE, lpAttribute: *cushort, nLength: culong, dwWriteCoord: COORD, lpNumberOfAttrsWritten: LPDWORD): cint <cimport,nodecl> end
global function FillConsoleOutputCharacterA(hConsoleOutput: HANDLE, cCharacter: cchar, nLength: culong, dwWriteCoord: COORD, lpNumberOfCharsWritten: LPDWORD): cint <cimport,nodecl> end
global function FillConsoleOutputCharacterW(hConsoleOutput: HANDLE, cCharacter: cwchar_t, nLength: culong, dwWriteCoord: COORD, lpNumberOfCharsWritten: LPDWORD): cint <cimport,nodecl> end
global function FillConsoleOutputAttribute(hConsoleOutput: HANDLE, wAttribute: cushort, nLength: culong, dwWriteCoord: COORD, lpNumberOfAttrsWritten: LPDWORD): cint <cimport,nodecl> end
global function GetConsoleMode(hConsoleHandle: HANDLE, lpMode: LPDWORD): cint <cimport,nodecl> end
global function GetNumberOfConsoleInputEvents(hConsoleInput: HANDLE, lpNumberOfEvents: LPDWORD): cint <cimport,nodecl> end
global function GetConsoleScreenBufferInfo(hConsoleOutput: HANDLE, lpConsoleScreenBufferInfo: PCONSOLE_SCREEN_BUFFER_INFO): cint <cimport,nodecl> end
global function GetLargestConsoleWindowSize(hConsoleOutput: HANDLE): COORD <cimport,nodecl> end
global function GetConsoleCursorInfo(hConsoleOutput: HANDLE, lpConsoleCursorInfo: PCONSOLE_CURSOR_INFO): cint <cimport,nodecl> end
global function GetCurrentConsoleFont(hConsoleOutput: HANDLE, bMaximumWindow: cint, lpConsoleCurrentFont: PCONSOLE_FONT_INFO): cint <cimport,nodecl> end
global function GetConsoleFontSize(hConsoleOutput: HANDLE, nFont: culong): COORD <cimport,nodecl> end
global function GetConsoleSelectionInfo(lpConsoleSelectionInfo: PCONSOLE_SELECTION_INFO): cint <cimport,nodecl> end
global function GetNumberOfConsoleMouseButtons(lpNumberOfMouseButtons: LPDWORD): cint <cimport,nodecl> end
global function SetConsoleMode(hConsoleHandle: HANDLE, dwMode: culong): cint <cimport,nodecl> end
global function SetConsoleActiveScreenBuffer(hConsoleOutput: HANDLE): cint <cimport,nodecl> end
global function FlushConsoleInputBuffer(hConsoleInput: HANDLE): cint <cimport,nodecl> end
global function SetConsoleScreenBufferSize(hConsoleOutput: HANDLE, dwSize: COORD): cint <cimport,nodecl> end
global function SetConsoleCursorPosition(hConsoleOutput: HANDLE, dwCursorPosition: COORD): cint <cimport,nodecl> end
global function SetConsoleCursorInfo(hConsoleOutput: HANDLE, lpConsoleCursorInfo: *CONSOLE_CURSOR_INFO): cint <cimport,nodecl> end
global function ScrollConsoleScreenBufferA(hConsoleOutput: HANDLE, lpScrollRectangle: *SMALL_RECT, lpClipRectangle: *SMALL_RECT, dwDestinationOrigin: COORD, lpFill: *CHAR_INFO): cint <cimport,nodecl> end
global function ScrollConsoleScreenBufferW(hConsoleOutput: HANDLE, lpScrollRectangle: *SMALL_RECT, lpClipRectangle: *SMALL_RECT, dwDestinationOrigin: COORD, lpFill: *CHAR_INFO): cint <cimport,nodecl> end
global function SetConsoleWindowInfo(hConsoleOutput: HANDLE, bAbsolute: cint, lpConsoleWindow: *SMALL_RECT): cint <cimport,nodecl> end
global function SetConsoleTextAttribute(hConsoleOutput: HANDLE, wAttributes: cushort): cint <cimport,nodecl> end
global function SetConsoleCtrlHandler(HandlerRoutine: PHANDLER_ROUTINE, Add: cint): cint <cimport,nodecl> end
global function GenerateConsoleCtrlEvent(dwCtrlEvent: culong, dwProcessGroupId: culong): cint <cimport,nodecl> end
global function AllocConsole(): cint <cimport,nodecl> end
global function FreeConsole(): cint <cimport,nodecl> end
global function AttachConsole(dwProcessId: culong): cint <cimport,nodecl> end
global function GetConsoleTitleA(lpConsoleTitle: LPSTR, nSize: culong): culong <cimport,nodecl> end
global function GetConsoleTitleW(lpConsoleTitle: LPWSTR, nSize: culong): culong <cimport,nodecl> end
global function SetConsoleTitleA(lpConsoleTitle: LPCSTR): cint <cimport,nodecl> end
global function SetConsoleTitleW(lpConsoleTitle: LPCWSTR): cint <cimport,nodecl> end
global function ReadConsoleA(hConsoleInput: HANDLE, lpBuffer: LPVOID, nNumberOfCharsToRead: culong, lpNumberOfCharsRead: LPDWORD, lpReserved: LPVOID): cint <cimport,nodecl> end
global function ReadConsoleW(hConsoleInput: HANDLE, lpBuffer: LPVOID, nNumberOfCharsToRead: culong, lpNumberOfCharsRead: LPDWORD, lpReserved: LPVOID): cint <cimport,nodecl> end
global function WriteConsoleA(hConsoleOutput: HANDLE, lpBuffer: pointer, nNumberOfCharsToWrite: culong, lpNumberOfCharsWritten: LPDWORD, lpReserved: LPVOID): cint <cimport,nodecl> end
global function WriteConsoleW(hConsoleOutput: HANDLE, lpBuffer: pointer, nNumberOfCharsToWrite: culong, lpNumberOfCharsWritten: LPDWORD, lpReserved: LPVOID): cint <cimport,nodecl> end
global function CreateConsoleScreenBuffer(dwDesiredAccess: culong, dwShareMode: culong, lpSecurityAttributes: *SECURITY_ATTRIBUTES, dwFlags: culong, lpScreenBufferData: LPVOID): HANDLE <cimport,nodecl> end
global function GetConsoleCP(): cuint <cimport,nodecl> end
global function SetConsoleCP(wCodePageID: cuint): cint <cimport,nodecl> end
global function GetConsoleOutputCP(): cuint <cimport,nodecl> end
global function SetConsoleOutputCP(wCodePageID: cuint): cint <cimport,nodecl> end
global function GetConsoleDisplayMode(lpModeFlags: LPDWORD): cint <cimport,nodecl> end
global function SetConsoleDisplayMode(hConsoleOutput: HANDLE, dwFlags: culong, lpNewScreenBufferDimensions: PCOORD): cint <cimport,nodecl> end
global function GetConsoleWindow(): HWND <cimport,nodecl> end
global function GetConsoleProcessList(lpdwProcessList: LPDWORD, dwProcessCount: culong): culong <cimport,nodecl> end
global function AddConsoleAliasA(Source: LPSTR, Target: LPSTR, ExeName: LPSTR): cint <cimport,nodecl> end
global function AddConsoleAliasW(Source: LPWSTR, Target: LPWSTR, ExeName: LPWSTR): cint <cimport,nodecl> end
global function GetConsoleAliasA(Source: LPSTR, TargetBuffer: LPSTR, TargetBufferLength: culong, ExeName: LPSTR): culong <cimport,nodecl> end
global function GetConsoleAliasW(Source: LPWSTR, TargetBuffer: LPWSTR, TargetBufferLength: culong, ExeName: LPWSTR): culong <cimport,nodecl> end
global function GetConsoleAliasesLengthA(ExeName: LPSTR): culong <cimport,nodecl> end
global function GetConsoleAliasesLengthW(ExeName: LPWSTR): culong <cimport,nodecl> end
global function GetConsoleAliasExesLengthA(): culong <cimport,nodecl> end
global function GetConsoleAliasExesLengthW(): culong <cimport,nodecl> end
global function GetConsoleAliasesA(AliasBuffer: LPSTR, AliasBufferLength: culong, ExeName: LPSTR): culong <cimport,nodecl> end
global function GetConsoleAliasesW(AliasBuffer: LPWSTR, AliasBufferLength: culong, ExeName: LPWSTR): culong <cimport,nodecl> end
global function GetConsoleAliasExesA(ExeNameBuffer: LPSTR, ExeNameBufferLength: culong): culong <cimport,nodecl> end
global function GetConsoleAliasExesW(ExeNameBuffer: LPWSTR, ExeNameBufferLength: culong): culong <cimport,nodecl> end
global function ExpungeConsoleCommandHistoryA(ExeName: LPSTR): void <cimport,nodecl> end
global function ExpungeConsoleCommandHistoryW(ExeName: LPWSTR): void <cimport,nodecl> end
global function SetConsoleNumberOfCommandsA(Number: culong, ExeName: LPSTR): cint <cimport,nodecl> end
global function SetConsoleNumberOfCommandsW(Number: culong, ExeName: LPWSTR): cint <cimport,nodecl> end
global function GetConsoleCommandHistoryLengthA(ExeName: LPSTR): culong <cimport,nodecl> end
global function GetConsoleCommandHistoryLengthW(ExeName: LPWSTR): culong <cimport,nodecl> end
global function GetConsoleCommandHistoryA(Commands: LPSTR, CommandBufferLength: culong, ExeName: LPSTR): culong <cimport,nodecl> end
global function GetConsoleCommandHistoryW(Commands: LPWSTR, CommandBufferLength: culong, ExeName: LPWSTR): culong <cimport,nodecl> end
global _CONSOLE_FONT_INFOEX: type <cimport,nodecl,ctypedef> = @record{
  cbSize: culong,
  nFont: culong,
  dwFontSize: COORD,
  FontFamily: cuint,
  FontWeight: cuint,
  FaceName: [32]cwchar_t
}
global CONSOLE_FONT_INFOEX: type = @_CONSOLE_FONT_INFOEX
global PCONSOLE_FONT_INFOEX: type = @*_CONSOLE_FONT_INFOEX
global _CONSOLE_HISTORY_INFO: type <cimport,nodecl,ctypedef> = @record{
  cbSize: cuint,
  HistoryBufferSize: cuint,
  NumberOfHistoryBuffers: cuint,
  dwFlags: culong
}
global CONSOLE_HISTORY_INFO: type = @_CONSOLE_HISTORY_INFO
global PCONSOLE_HISTORY_INFO: type = @*_CONSOLE_HISTORY_INFO
global _CONSOLE_READCONSOLE_CONTROL: type <cimport,nodecl,ctypedef> = @record{
  nLength: culong,
  nInitialChars: culong,
  dwCtrlWakeupMask: culong,
  dwControlKeyState: culong
}
global CONSOLE_READCONSOLE_CONTROL: type = @_CONSOLE_READCONSOLE_CONTROL
global PCONSOLE_READCONSOLE_CONTROL: type = @*_CONSOLE_READCONSOLE_CONTROL
global _CONSOLE_SCREEN_BUFFER_INFOEX: type <cimport,nodecl,ctypedef> = @record{
  cbSize: culong,
  dwSize: COORD,
  dwCursorPosition: COORD,
  wAttributes: cushort,
  srWindow: SMALL_RECT,
  dwMaximumWindowSize: COORD,
  wPopupAttributes: cushort,
  bFullscreenSupported: cint,
  ColorTable: [16]culong
}
global CONSOLE_SCREEN_BUFFER_INFOEX: type = @_CONSOLE_SCREEN_BUFFER_INFOEX
global PCONSOLE_SCREEN_BUFFER_INFOEX: type = @*_CONSOLE_SCREEN_BUFFER_INFOEX
global function GetConsoleHistoryInfo(lpConsoleHistoryInfo: PCONSOLE_HISTORY_INFO): cint <cimport,nodecl> end
global function GetConsoleOriginalTitleA(lpConsoleTitle: LPSTR, nSize: culong): culong <cimport,nodecl> end
global function GetConsoleOriginalTitleW(lpConsoleTitle: LPWSTR, nSize: culong): culong <cimport,nodecl> end
global function GetConsoleScreenBufferInfoEx(hConsoleOutput: HANDLE, lpConsoleScreenBufferInfoEx: PCONSOLE_SCREEN_BUFFER_INFOEX): cint <cimport,nodecl> end
global function GetCurrentConsoleFontEx(hConsoleOutput: HANDLE, bMaximumWindow: cint, lpConsoleCurrentFontEx: PCONSOLE_FONT_INFOEX): cint <cimport,nodecl> end
global function SetConsoleHistoryInfo(lpConsoleHistoryInfo: PCONSOLE_HISTORY_INFO): cint <cimport,nodecl> end
global function SetConsoleScreenBufferInfoEx(hConsoleOutput: HANDLE, lpConsoleScreenBufferInfoEx: PCONSOLE_SCREEN_BUFFER_INFOEX): cint <cimport,nodecl> end
global function SetCurrentConsoleFontEx(hConsoleOutput: HANDLE, bMaximumWindow: cint, lpConsoleCurrentFontEx: PCONSOLE_FONT_INFOEX): cint <cimport,nodecl> end
global tagVS_FIXEDFILEINFO: type <cimport,nodecl,ctypedef> = @record{
  dwSignature: culong,
  dwStrucVersion: culong,
  dwFileVersionMS: culong,
  dwFileVersionLS: culong,
  dwProductVersionMS: culong,
  dwProductVersionLS: culong,
  dwFileFlagsMask: culong,
  dwFileFlags: culong,
  dwFileOS: culong,
  dwFileType: culong,
  dwFileSubtype: culong,
  dwFileDateMS: culong,
  dwFileDateLS: culong
}
global VS_FIXEDFILEINFO: type = @tagVS_FIXEDFILEINFO
global function VerFindFileA(uFlags: culong, szFileName: LPSTR, szWinDir: LPSTR, szAppDir: LPSTR, szCurDir: LPSTR, lpuCurDirLen: PUINT, szDestDir: LPSTR, lpuDestDirLen: PUINT): culong <cimport,nodecl> end
global function VerFindFileW(uFlags: culong, szFileName: LPWSTR, szWinDir: LPWSTR, szAppDir: LPWSTR, szCurDir: LPWSTR, lpuCurDirLen: PUINT, szDestDir: LPWSTR, lpuDestDirLen: PUINT): culong <cimport,nodecl> end
global function VerInstallFileA(uFlags: culong, szSrcFileName: LPSTR, szDestFileName: LPSTR, szSrcDir: LPSTR, szDestDir: LPSTR, szCurDir: LPSTR, szTmpFile: LPSTR, lpuTmpFileLen: PUINT): culong <cimport,nodecl> end
global function VerInstallFileW(uFlags: culong, szSrcFileName: LPWSTR, szDestFileName: LPWSTR, szSrcDir: LPWSTR, szDestDir: LPWSTR, szCurDir: LPWSTR, szTmpFile: LPWSTR, lpuTmpFileLen: PUINT): culong <cimport,nodecl> end
global function GetFileVersionInfoSizeA(lptstrFilename: LPCSTR, lpdwHandle: LPDWORD): culong <cimport,nodecl> end
global function GetFileVersionInfoSizeW(lptstrFilename: LPCWSTR, lpdwHandle: LPDWORD): culong <cimport,nodecl> end
global function GetFileVersionInfoSizeExA(dwFlags: culong, lpwstrFilename: LPCSTR, lpdwHandle: LPDWORD): culong <cimport,nodecl> end
global function GetFileVersionInfoSizeExW(dwFlags: culong, lpwstrFilename: LPCWSTR, lpdwHandle: LPDWORD): culong <cimport,nodecl> end
global function GetFileVersionInfoA(lptstrFilename: LPCSTR, dwHandle: culong, dwLen: culong, lpData: LPVOID): cint <cimport,nodecl> end
global function GetFileVersionInfoW(lptstrFilename: LPCWSTR, dwHandle: culong, dwLen: culong, lpData: LPVOID): cint <cimport,nodecl> end
global function GetFileVersionInfoExA(dwFlags: culong, lpwstrFilename: LPCSTR, dwHandle: culong, dwLen: culong, lpData: LPVOID): cint <cimport,nodecl> end
global function GetFileVersionInfoExW(dwFlags: culong, lpwstrFilename: LPCWSTR, dwHandle: culong, dwLen: culong, lpData: LPVOID): cint <cimport,nodecl> end
global function VerLanguageNameA(wLang: culong, szLang: LPSTR, nSize: culong): culong <cimport,nodecl> end
global function VerLanguageNameW(wLang: culong, szLang: LPWSTR, nSize: culong): culong <cimport,nodecl> end
global function VerQueryValueA(pBlock: LPCVOID, lpSubBlock: LPCSTR, lplpBuffer: *LPVOID, puLen: PUINT): cint <cimport,nodecl> end
global function VerQueryValueW(pBlock: LPCVOID, lpSubBlock: LPCWSTR, lplpBuffer: *LPVOID, puLen: PUINT): cint <cimport,nodecl> end
global val_context: type <cimport,nodecl,ctypedef> = @record{
  valuelen: cint,
  value_context: LPVOID,
  val_buff_ptr: LPVOID
}
global PVALCONTEXT: type = @*val_context
global pvalueA: type <cimport,nodecl,ctypedef> = @record{
  pv_valuename: LPSTR,
  pv_valuelen: cint,
  pv_value_context: LPVOID,
  pv_type: culong
}
global PVALUEA: type = @pvalueA
global PPVALUEA: type = @*pvalueA
global pvalueW: type <cimport,nodecl,ctypedef> = @record{
  pv_valuename: LPWSTR,
  pv_valuelen: cint,
  pv_value_context: LPVOID,
  pv_type: culong
}
global PVALUEW: type = @pvalueW
global PPVALUEW: type = @*pvalueW
global PVALUE: type = @pvalueA
global PPVALUE: type = @*pvalueA
global QUERYHANDLER: type <cimport,nodecl> = @function(LPVOID, PVALCONTEXT, culong, LPVOID, *culong, culong): culong
global PQUERYHANDLER: type <cimport,nodecl> = @function(LPVOID, PVALCONTEXT, culong, LPVOID, *culong, culong): culong
global REG_PROVIDER: type <cimport,nodecl> = @record{
  pi_R0_1val: PQUERYHANDLER,
  pi_R0_allvals: PQUERYHANDLER,
  pi_R3_1val: PQUERYHANDLER,
  pi_R3_allvals: PQUERYHANDLER,
  pi_flags: culong,
  pi_key_context: LPVOID
}
global PPROVIDER: type = @*REG_PROVIDER
global value_entA: type <cimport,nodecl,ctypedef> = @record{
  ve_valuename: LPSTR,
  ve_valuelen: culong,
  ve_valueptr: culonglong,
  ve_type: culong
}
global VALENTA: type = @value_entA
global PVALENTA: type = @*value_entA
global value_entW: type <cimport,nodecl,ctypedef> = @record{
  ve_valuename: LPWSTR,
  ve_valuelen: culong,
  ve_valueptr: culonglong,
  ve_type: culong
}
global VALENTW: type = @value_entW
global PVALENTW: type = @*value_entW
global VALENT: type = @value_entA
global PVALENT: type = @*value_entA
global function RegCloseKey(hKey: HKEY): clong <cimport,nodecl> end
global function RegOverridePredefKey(hKey: HKEY, hNewHKey: HKEY): clong <cimport,nodecl> end
global function RegOpenUserClassesRoot(hToken: HANDLE, dwOptions: culong, samDesired: culong, phkResult: PHKEY): clong <cimport,nodecl> end
global function RegOpenCurrentUser(samDesired: culong, phkResult: PHKEY): clong <cimport,nodecl> end
global function RegDisablePredefinedCache(): clong <cimport,nodecl> end
global function RegDisablePredefinedCacheEx(): clong <cimport,nodecl> end
global function RegConnectRegistryA(lpMachineName: LPCSTR, hKey: HKEY, phkResult: PHKEY): clong <cimport,nodecl> end
global function RegConnectRegistryW(lpMachineName: LPCWSTR, hKey: HKEY, phkResult: PHKEY): clong <cimport,nodecl> end
global function RegConnectRegistryExA(lpMachineName: LPCSTR, hKey: HKEY, Flags: culong, phkResult: PHKEY): clong <cimport,nodecl> end
global function RegConnectRegistryExW(lpMachineName: LPCWSTR, hKey: HKEY, Flags: culong, phkResult: PHKEY): clong <cimport,nodecl> end
global function RegCreateKeyA(hKey: HKEY, lpSubKey: LPCSTR, phkResult: PHKEY): clong <cimport,nodecl> end
global function RegCreateKeyW(hKey: HKEY, lpSubKey: LPCWSTR, phkResult: PHKEY): clong <cimport,nodecl> end
global function RegCreateKeyExA(hKey: HKEY, lpSubKey: LPCSTR, Reserved: culong, lpClass: LPSTR, dwOptions: culong, samDesired: culong, lpSecurityAttributes: LPSECURITY_ATTRIBUTES, phkResult: PHKEY, lpdwDisposition: LPDWORD): clong <cimport,nodecl> end
global function RegCreateKeyExW(hKey: HKEY, lpSubKey: LPCWSTR, Reserved: culong, lpClass: LPWSTR, dwOptions: culong, samDesired: culong, lpSecurityAttributes: LPSECURITY_ATTRIBUTES, phkResult: PHKEY, lpdwDisposition: LPDWORD): clong <cimport,nodecl> end
global function RegDeleteKeyA(hKey: HKEY, lpSubKey: LPCSTR): clong <cimport,nodecl> end
global function RegDeleteKeyW(hKey: HKEY, lpSubKey: LPCWSTR): clong <cimport,nodecl> end
global function RegDeleteKeyExA(hKey: HKEY, lpSubKey: LPCSTR, samDesired: culong, Reserved: culong): clong <cimport,nodecl> end
global function RegDeleteKeyExW(hKey: HKEY, lpSubKey: LPCWSTR, samDesired: culong, Reserved: culong): clong <cimport,nodecl> end
global function RegDisableReflectionKey(hBase: HKEY): clong <cimport,nodecl> end
global function RegEnableReflectionKey(hBase: HKEY): clong <cimport,nodecl> end
global function RegQueryReflectionKey(hBase: HKEY, bIsReflectionDisabled: *cint): clong <cimport,nodecl> end
global function RegDeleteValueA(hKey: HKEY, lpValueName: LPCSTR): clong <cimport,nodecl> end
global function RegDeleteValueW(hKey: HKEY, lpValueName: LPCWSTR): clong <cimport,nodecl> end
global function RegEnumKeyA(hKey: HKEY, dwIndex: culong, lpName: LPSTR, cchName: culong): clong <cimport,nodecl> end
global function RegEnumKeyW(hKey: HKEY, dwIndex: culong, lpName: LPWSTR, cchName: culong): clong <cimport,nodecl> end
global function RegEnumKeyExA(hKey: HKEY, dwIndex: culong, lpName: LPSTR, lpcchName: LPDWORD, lpReserved: LPDWORD, lpClass: LPSTR, lpcchClass: LPDWORD, lpftLastWriteTime: PFILETIME): clong <cimport,nodecl> end
global function RegEnumKeyExW(hKey: HKEY, dwIndex: culong, lpName: LPWSTR, lpcchName: LPDWORD, lpReserved: LPDWORD, lpClass: LPWSTR, lpcchClass: LPDWORD, lpftLastWriteTime: PFILETIME): clong <cimport,nodecl> end
global function RegEnumValueA(hKey: HKEY, dwIndex: culong, lpValueName: LPSTR, lpcchValueName: LPDWORD, lpReserved: LPDWORD, lpType: LPDWORD, lpData: LPBYTE, lpcbData: LPDWORD): clong <cimport,nodecl> end
global function RegEnumValueW(hKey: HKEY, dwIndex: culong, lpValueName: LPWSTR, lpcchValueName: LPDWORD, lpReserved: LPDWORD, lpType: LPDWORD, lpData: LPBYTE, lpcbData: LPDWORD): clong <cimport,nodecl> end
global function RegFlushKey(hKey: HKEY): clong <cimport,nodecl> end
global function RegGetKeySecurity(hKey: HKEY, SecurityInformation: culong, pSecurityDescriptor: PSECURITY_DESCRIPTOR, lpcbSecurityDescriptor: LPDWORD): clong <cimport,nodecl> end
global function RegLoadKeyA(hKey: HKEY, lpSubKey: LPCSTR, lpFile: LPCSTR): clong <cimport,nodecl> end
global function RegLoadKeyW(hKey: HKEY, lpSubKey: LPCWSTR, lpFile: LPCWSTR): clong <cimport,nodecl> end
global function RegNotifyChangeKeyValue(hKey: HKEY, bWatchSubtree: cint, dwNotifyFilter: culong, hEvent: HANDLE, fAsynchronous: cint): clong <cimport,nodecl> end
global function RegOpenKeyA(hKey: HKEY, lpSubKey: LPCSTR, phkResult: PHKEY): clong <cimport,nodecl> end
global function RegOpenKeyW(hKey: HKEY, lpSubKey: LPCWSTR, phkResult: PHKEY): clong <cimport,nodecl> end
global function RegOpenKeyExA(hKey: HKEY, lpSubKey: LPCSTR, ulOptions: culong, samDesired: culong, phkResult: PHKEY): clong <cimport,nodecl> end
global function RegOpenKeyExW(hKey: HKEY, lpSubKey: LPCWSTR, ulOptions: culong, samDesired: culong, phkResult: PHKEY): clong <cimport,nodecl> end
global function RegQueryInfoKeyA(hKey: HKEY, lpClass: LPSTR, lpcchClass: LPDWORD, lpReserved: LPDWORD, lpcSubKeys: LPDWORD, lpcbMaxSubKeyLen: LPDWORD, lpcbMaxClassLen: LPDWORD, lpcValues: LPDWORD, lpcbMaxValueNameLen: LPDWORD, lpcbMaxValueLen: LPDWORD, lpcbSecurityDescriptor: LPDWORD, lpftLastWriteTime: PFILETIME): clong <cimport,nodecl> end
global function RegQueryInfoKeyW(hKey: HKEY, lpClass: LPWSTR, lpcchClass: LPDWORD, lpReserved: LPDWORD, lpcSubKeys: LPDWORD, lpcbMaxSubKeyLen: LPDWORD, lpcbMaxClassLen: LPDWORD, lpcValues: LPDWORD, lpcbMaxValueNameLen: LPDWORD, lpcbMaxValueLen: LPDWORD, lpcbSecurityDescriptor: LPDWORD, lpftLastWriteTime: PFILETIME): clong <cimport,nodecl> end
global function RegQueryValueA(hKey: HKEY, lpSubKey: LPCSTR, lpData: LPSTR, lpcbData: PLONG): clong <cimport,nodecl> end
global function RegQueryValueW(hKey: HKEY, lpSubKey: LPCWSTR, lpData: LPWSTR, lpcbData: PLONG): clong <cimport,nodecl> end
global function RegQueryMultipleValuesA(hKey: HKEY, val_list: PVALENTA, num_vals: culong, lpValueBuf: LPSTR, ldwTotsize: LPDWORD): clong <cimport,nodecl> end
global function RegQueryMultipleValuesW(hKey: HKEY, val_list: PVALENTW, num_vals: culong, lpValueBuf: LPWSTR, ldwTotsize: LPDWORD): clong <cimport,nodecl> end
global function RegQueryValueExA(hKey: HKEY, lpValueName: LPCSTR, lpReserved: LPDWORD, lpType: LPDWORD, lpData: LPBYTE, lpcbData: LPDWORD): clong <cimport,nodecl> end
global function RegQueryValueExW(hKey: HKEY, lpValueName: LPCWSTR, lpReserved: LPDWORD, lpType: LPDWORD, lpData: LPBYTE, lpcbData: LPDWORD): clong <cimport,nodecl> end
global function RegReplaceKeyA(hKey: HKEY, lpSubKey: LPCSTR, lpNewFile: LPCSTR, lpOldFile: LPCSTR): clong <cimport,nodecl> end
global function RegReplaceKeyW(hKey: HKEY, lpSubKey: LPCWSTR, lpNewFile: LPCWSTR, lpOldFile: LPCWSTR): clong <cimport,nodecl> end
global function RegRestoreKeyA(hKey: HKEY, lpFile: LPCSTR, dwFlags: culong): clong <cimport,nodecl> end
global function RegRestoreKeyW(hKey: HKEY, lpFile: LPCWSTR, dwFlags: culong): clong <cimport,nodecl> end
global function RegSaveKeyA(hKey: HKEY, lpFile: LPCSTR, lpSecurityAttributes: LPSECURITY_ATTRIBUTES): clong <cimport,nodecl> end
global function RegSaveKeyW(hKey: HKEY, lpFile: LPCWSTR, lpSecurityAttributes: LPSECURITY_ATTRIBUTES): clong <cimport,nodecl> end
global function RegSetKeySecurity(hKey: HKEY, SecurityInformation: culong, pSecurityDescriptor: PSECURITY_DESCRIPTOR): clong <cimport,nodecl> end
global function RegSetValueA(hKey: HKEY, lpSubKey: LPCSTR, dwType: culong, lpData: LPCSTR, cbData: culong): clong <cimport,nodecl> end
global function RegSetValueW(hKey: HKEY, lpSubKey: LPCWSTR, dwType: culong, lpData: LPCWSTR, cbData: culong): clong <cimport,nodecl> end
global function RegSetValueExA(hKey: HKEY, lpValueName: LPCSTR, Reserved: culong, dwType: culong, lpData: *cuchar, cbData: culong): clong <cimport,nodecl> end
global function RegSetValueExW(hKey: HKEY, lpValueName: LPCWSTR, Reserved: culong, dwType: culong, lpData: *cuchar, cbData: culong): clong <cimport,nodecl> end
global function RegUnLoadKeyA(hKey: HKEY, lpSubKey: LPCSTR): clong <cimport,nodecl> end
global function RegUnLoadKeyW(hKey: HKEY, lpSubKey: LPCWSTR): clong <cimport,nodecl> end
global function RegGetValueA(hkey: HKEY, lpSubKey: LPCSTR, lpValue: LPCSTR, dwFlags: culong, pdwType: LPDWORD, pvData: PVOID, pcbData: LPDWORD): clong <cimport,nodecl> end
global function RegGetValueW(hkey: HKEY, lpSubKey: LPCWSTR, lpValue: LPCWSTR, dwFlags: culong, pdwType: LPDWORD, pvData: PVOID, pcbData: LPDWORD): clong <cimport,nodecl> end
global function InitiateSystemShutdownA(lpMachineName: LPSTR, lpMessage: LPSTR, dwTimeout: culong, bForceAppsClosed: cint, bRebootAfterShutdown: cint): cint <cimport,nodecl> end
global function InitiateSystemShutdownW(lpMachineName: LPWSTR, lpMessage: LPWSTR, dwTimeout: culong, bForceAppsClosed: cint, bRebootAfterShutdown: cint): cint <cimport,nodecl> end
global function AbortSystemShutdownA(lpMachineName: LPSTR): cint <cimport,nodecl> end
global function AbortSystemShutdownW(lpMachineName: LPWSTR): cint <cimport,nodecl> end
global function InitiateSystemShutdownExA(lpMachineName: LPSTR, lpMessage: LPSTR, dwTimeout: culong, bForceAppsClosed: cint, bRebootAfterShutdown: cint, dwReason: culong): cint <cimport,nodecl> end
global function InitiateSystemShutdownExW(lpMachineName: LPWSTR, lpMessage: LPWSTR, dwTimeout: culong, bForceAppsClosed: cint, bRebootAfterShutdown: cint, dwReason: culong): cint <cimport,nodecl> end
global function RegSaveKeyExA(hKey: HKEY, lpFile: LPCSTR, lpSecurityAttributes: LPSECURITY_ATTRIBUTES, Flags: culong): clong <cimport,nodecl> end
global function RegSaveKeyExW(hKey: HKEY, lpFile: LPCWSTR, lpSecurityAttributes: LPSECURITY_ATTRIBUTES, Flags: culong): clong <cimport,nodecl> end
global function Wow64Win32ApiEntry(dwFuncNumber: culong, dwFlag: culong, dwRes: culong): clong <cimport,nodecl> end
global function RegCopyTreeA(hKeySrc: HKEY, lpSubKey: LPCSTR, hKeyDest: HKEY): clong <cimport,nodecl> end
global function RegCopyTreeW(hKeySrc: HKEY, lpSubKey: LPCWSTR, hKeyDest: HKEY): clong <cimport,nodecl> end
global function RegCreateKeyTransactedA(hKey: HKEY, lpSubKey: LPCSTR, Reserved: culong, lpClass: LPSTR, dwOptions: culong, samDesired: culong, lpSecurityAttributes: LPSECURITY_ATTRIBUTES, phkResult: PHKEY, lpdwDisposition: LPDWORD, hTransaction: HANDLE, pExtendedParemeter: PVOID): clong <cimport,nodecl> end
global function RegCreateKeyTransactedW(hKey: HKEY, lpSubKey: LPCWSTR, Reserved: culong, lpClass: LPWSTR, dwOptions: culong, samDesired: culong, lpSecurityAttributes: LPSECURITY_ATTRIBUTES, phkResult: PHKEY, lpdwDisposition: LPDWORD, hTransaction: HANDLE, pExtendedParemeter: PVOID): clong <cimport,nodecl> end
global function RegDeleteKeyTransactedA(hKey: HKEY, lpSubKey: LPCSTR, samDesired: culong, Reserved: culong, hTransaction: HANDLE, pExtendedParameter: PVOID): clong <cimport,nodecl> end
global function RegDeleteKeyTransactedW(hKey: HKEY, lpSubKey: LPCWSTR, samDesired: culong, Reserved: culong, hTransaction: HANDLE, pExtendedParameter: PVOID): clong <cimport,nodecl> end
global function RegDeleteKeyValueA(hKey: HKEY, lpSubKey: LPCSTR, lpValueName: LPCSTR): clong <cimport,nodecl> end
global function RegDeleteKeyValueW(hKey: HKEY, lpSubKey: LPCWSTR, lpValueName: LPCWSTR): clong <cimport,nodecl> end
global function RegDeleteTreeA(hKey: HKEY, lpSubKey: LPCSTR): clong <cimport,nodecl> end
global function RegDeleteTreeW(hKey: HKEY, lpSubKey: LPCWSTR): clong <cimport,nodecl> end
global function RegLoadAppKeyA(lpFile: LPCSTR, phkResult: PHKEY, samDesired: culong, dwOptions: culong, Reserved: culong): clong <cimport,nodecl> end
global function RegLoadAppKeyW(lpFile: LPCWSTR, phkResult: PHKEY, samDesired: culong, dwOptions: culong, Reserved: culong): clong <cimport,nodecl> end
global function RegLoadMUIStringA(hKey: HKEY, pszValue: LPCSTR, pszOutBuf: LPSTR, cbOutBuf: culong, pcbData: LPDWORD, Flags: culong, pszDirectory: LPCSTR): clong <cimport,nodecl> end
global function RegLoadMUIStringW(hKey: HKEY, pszValue: LPCWSTR, pszOutBuf: LPWSTR, cbOutBuf: culong, pcbData: LPDWORD, Flags: culong, pszDirectory: LPCWSTR): clong <cimport,nodecl> end
global function RegOpenKeyTransactedA(hKey: HKEY, lpSubKey: LPCSTR, ulOptions: culong, samDesired: culong, phkResult: PHKEY, hTransaction: HANDLE, pExtendedParameter: PVOID): clong <cimport,nodecl> end
global function RegOpenKeyTransactedW(hKey: HKEY, lpSubKey: LPCWSTR, ulOptions: culong, samDesired: culong, phkResult: PHKEY, hTransaction: HANDLE, pExtendedParameter: PVOID): clong <cimport,nodecl> end
global function RegRenameKey(hKey: HKEY, lpSubKeyName: LPCWSTR, lpNewKeyName: LPCWSTR): clong <cimport,nodecl> end
global function RegSetKeyValueA(hKey: HKEY, lpSubKey: LPCSTR, lpValueName: LPCSTR, dwType: culong, lpData: LPCVOID, cbData: culong): clong <cimport,nodecl> end
global function RegSetKeyValueW(hKey: HKEY, lpSubKey: LPCWSTR, lpValueName: LPCWSTR, dwType: culong, lpData: LPCVOID, cbData: culong): clong <cimport,nodecl> end
global function InitiateShutdownA(lpMachineName: LPSTR, lpMessage: LPSTR, dwGracePeriod: culong, dwShutdownFlags: culong, dwReason: culong): culong <cimport,nodecl> end
global function InitiateShutdownW(lpMachineName: LPWSTR, lpMessage: LPWSTR, dwGracePeriod: culong, dwShutdownFlags: culong, dwReason: culong): culong <cimport,nodecl> end
global function CheckForHiberboot(pHiberboot: PBOOLEAN, bClearFlag: BOOLEAN): culong <cimport,nodecl> end
global _NETRESOURCEA: type <cimport,nodecl,ctypedef> = @record{
  dwScope: culong,
  dwType: culong,
  dwDisplayType: culong,
  dwUsage: culong,
  lpLocalName: LPSTR,
  lpRemoteName: LPSTR,
  lpComment: LPSTR,
  lpProvider: LPSTR
}
global NETRESOURCEA: type = @_NETRESOURCEA
global LPNETRESOURCEA: type = @*_NETRESOURCEA
global _NETRESOURCEW: type <cimport,nodecl,ctypedef> = @record{
  dwScope: culong,
  dwType: culong,
  dwDisplayType: culong,
  dwUsage: culong,
  lpLocalName: LPWSTR,
  lpRemoteName: LPWSTR,
  lpComment: LPWSTR,
  lpProvider: LPWSTR
}
global NETRESOURCEW: type = @_NETRESOURCEW
global LPNETRESOURCEW: type = @*_NETRESOURCEW
global NETRESOURCE: type = @_NETRESOURCEA
global LPNETRESOURCE: type = @*_NETRESOURCEA
global function WNetAddConnectionA(lpRemoteName: LPCSTR, lpPassword: LPCSTR, lpLocalName: LPCSTR): culong <cimport,nodecl> end
global function WNetAddConnectionW(lpRemoteName: LPCWSTR, lpPassword: LPCWSTR, lpLocalName: LPCWSTR): culong <cimport,nodecl> end
global function WNetAddConnection2A(lpNetResource: LPNETRESOURCEA, lpPassword: LPCSTR, lpUserName: LPCSTR, dwFlags: culong): culong <cimport,nodecl> end
global function WNetAddConnection2W(lpNetResource: LPNETRESOURCEW, lpPassword: LPCWSTR, lpUserName: LPCWSTR, dwFlags: culong): culong <cimport,nodecl> end
global function WNetAddConnection3A(hwndOwner: HWND, lpNetResource: LPNETRESOURCEA, lpPassword: LPCSTR, lpUserName: LPCSTR, dwFlags: culong): culong <cimport,nodecl> end
global function WNetAddConnection3W(hwndOwner: HWND, lpNetResource: LPNETRESOURCEW, lpPassword: LPCWSTR, lpUserName: LPCWSTR, dwFlags: culong): culong <cimport,nodecl> end
global function WNetCancelConnectionA(lpName: LPCSTR, fForce: cint): culong <cimport,nodecl> end
global function WNetCancelConnectionW(lpName: LPCWSTR, fForce: cint): culong <cimport,nodecl> end
global function WNetCancelConnection2A(lpName: LPCSTR, dwFlags: culong, fForce: cint): culong <cimport,nodecl> end
global function WNetCancelConnection2W(lpName: LPCWSTR, dwFlags: culong, fForce: cint): culong <cimport,nodecl> end
global function WNetGetConnectionA(lpLocalName: LPCSTR, lpRemoteName: LPSTR, lpnLength: LPDWORD): culong <cimport,nodecl> end
global function WNetGetConnectionW(lpLocalName: LPCWSTR, lpRemoteName: LPWSTR, lpnLength: LPDWORD): culong <cimport,nodecl> end
global function WNetRestoreConnectionA(hwndParent: HWND, lpDevice: LPCSTR): culong <cimport,nodecl> end
global function WNetUseConnectionA(hwndOwner: HWND, lpNetResource: LPNETRESOURCEA, lpPassword: LPCSTR, lpUserID: LPCSTR, dwFlags: culong, lpAccessName: LPSTR, lpBufferSize: LPDWORD, lpResult: LPDWORD): culong <cimport,nodecl> end
global function WNetUseConnectionW(hwndOwner: HWND, lpNetResource: LPNETRESOURCEW, lpPassword: LPCWSTR, lpUserID: LPCWSTR, dwFlags: culong, lpAccessName: LPWSTR, lpBufferSize: LPDWORD, lpResult: LPDWORD): culong <cimport,nodecl> end
global function WNetConnectionDialog(hwnd: HWND, dwType: culong): culong <cimport,nodecl> end
global function WNetDisconnectDialog(hwnd: HWND, dwType: culong): culong <cimport,nodecl> end
global function WNetRestoreSingleConnectionW(hwndParent: HWND, lpDevice: LPCWSTR, fUseUI: cint): culong <cimport,nodecl> end
global _CONNECTDLGSTRUCTA: type <cimport,nodecl,ctypedef> = @record{
  cbStructure: culong,
  hwndOwner: HWND,
  lpConnRes: LPNETRESOURCEA,
  dwFlags: culong,
  dwDevNum: culong
}
global CONNECTDLGSTRUCTA: type = @_CONNECTDLGSTRUCTA
global LPCONNECTDLGSTRUCTA: type = @*_CONNECTDLGSTRUCTA
global _CONNECTDLGSTRUCTW: type <cimport,nodecl,ctypedef> = @record{
  cbStructure: culong,
  hwndOwner: HWND,
  lpConnRes: LPNETRESOURCEW,
  dwFlags: culong,
  dwDevNum: culong
}
global CONNECTDLGSTRUCTW: type = @_CONNECTDLGSTRUCTW
global LPCONNECTDLGSTRUCTW: type = @*_CONNECTDLGSTRUCTW
global CONNECTDLGSTRUCT: type = @_CONNECTDLGSTRUCTA
global LPCONNECTDLGSTRUCT: type = @*_CONNECTDLGSTRUCTA
global function WNetConnectionDialog1A(lpConnDlgStruct: LPCONNECTDLGSTRUCTA): culong <cimport,nodecl> end
global function WNetConnectionDialog1W(lpConnDlgStruct: LPCONNECTDLGSTRUCTW): culong <cimport,nodecl> end
global _DISCDLGSTRUCTA: type <cimport,nodecl,ctypedef> = @record{
  cbStructure: culong,
  hwndOwner: HWND,
  lpLocalName: LPSTR,
  lpRemoteName: LPSTR,
  dwFlags: culong
}
global DISCDLGSTRUCTA: type = @_DISCDLGSTRUCTA
global LPDISCDLGSTRUCTA: type = @*_DISCDLGSTRUCTA
global _DISCDLGSTRUCTW: type <cimport,nodecl,ctypedef> = @record{
  cbStructure: culong,
  hwndOwner: HWND,
  lpLocalName: LPWSTR,
  lpRemoteName: LPWSTR,
  dwFlags: culong
}
global DISCDLGSTRUCTW: type = @_DISCDLGSTRUCTW
global LPDISCDLGSTRUCTW: type = @*_DISCDLGSTRUCTW
global DISCDLGSTRUCT: type = @_DISCDLGSTRUCTA
global LPDISCDLGSTRUCT: type = @*_DISCDLGSTRUCTA
global function WNetDisconnectDialog1A(lpConnDlgStruct: LPDISCDLGSTRUCTA): culong <cimport,nodecl> end
global function WNetDisconnectDialog1W(lpConnDlgStruct: LPDISCDLGSTRUCTW): culong <cimport,nodecl> end
global function WNetOpenEnumA(dwScope: culong, dwType: culong, dwUsage: culong, lpNetResource: LPNETRESOURCEA, lphEnum: LPHANDLE): culong <cimport,nodecl> end
global function WNetOpenEnumW(dwScope: culong, dwType: culong, dwUsage: culong, lpNetResource: LPNETRESOURCEW, lphEnum: LPHANDLE): culong <cimport,nodecl> end
global function WNetEnumResourceA(hEnum: HANDLE, lpcCount: LPDWORD, lpBuffer: LPVOID, lpBufferSize: LPDWORD): culong <cimport,nodecl> end
global function WNetEnumResourceW(hEnum: HANDLE, lpcCount: LPDWORD, lpBuffer: LPVOID, lpBufferSize: LPDWORD): culong <cimport,nodecl> end
global function WNetCloseEnum(hEnum: HANDLE): culong <cimport,nodecl> end
global function WNetGetResourceParentA(lpNetResource: LPNETRESOURCEA, lpBuffer: LPVOID, lpcbBuffer: LPDWORD): culong <cimport,nodecl> end
global function WNetGetResourceParentW(lpNetResource: LPNETRESOURCEW, lpBuffer: LPVOID, lpcbBuffer: LPDWORD): culong <cimport,nodecl> end
global function WNetGetResourceInformationA(lpNetResource: LPNETRESOURCEA, lpBuffer: LPVOID, lpcbBuffer: LPDWORD, lplpSystem: *LPSTR): culong <cimport,nodecl> end
global function WNetGetResourceInformationW(lpNetResource: LPNETRESOURCEW, lpBuffer: LPVOID, lpcbBuffer: LPDWORD, lplpSystem: *LPWSTR): culong <cimport,nodecl> end
global _UNIVERSAL_NAME_INFOA: type <cimport,nodecl,ctypedef> = @record{
  lpUniversalName: LPSTR
}
global UNIVERSAL_NAME_INFOA: type = @_UNIVERSAL_NAME_INFOA
global LPUNIVERSAL_NAME_INFOA: type = @*_UNIVERSAL_NAME_INFOA
global _UNIVERSAL_NAME_INFOW: type <cimport,nodecl,ctypedef> = @record{
  lpUniversalName: LPWSTR
}
global UNIVERSAL_NAME_INFOW: type = @_UNIVERSAL_NAME_INFOW
global LPUNIVERSAL_NAME_INFOW: type = @*_UNIVERSAL_NAME_INFOW
global UNIVERSAL_NAME_INFO: type = @_UNIVERSAL_NAME_INFOA
global LPUNIVERSAL_NAME_INFO: type = @*_UNIVERSAL_NAME_INFOA
global _REMOTE_NAME_INFOA: type <cimport,nodecl,ctypedef> = @record{
  lpUniversalName: LPSTR,
  lpConnectionName: LPSTR,
  lpRemainingPath: LPSTR
}
global REMOTE_NAME_INFOA: type = @_REMOTE_NAME_INFOA
global LPREMOTE_NAME_INFOA: type = @*_REMOTE_NAME_INFOA
global _REMOTE_NAME_INFOW: type <cimport,nodecl,ctypedef> = @record{
  lpUniversalName: LPWSTR,
  lpConnectionName: LPWSTR,
  lpRemainingPath: LPWSTR
}
global REMOTE_NAME_INFOW: type = @_REMOTE_NAME_INFOW
global LPREMOTE_NAME_INFOW: type = @*_REMOTE_NAME_INFOW
global REMOTE_NAME_INFO: type = @_REMOTE_NAME_INFOA
global LPREMOTE_NAME_INFO: type = @*_REMOTE_NAME_INFOA
global function WNetGetUniversalNameA(lpLocalPath: LPCSTR, dwInfoLevel: culong, lpBuffer: LPVOID, lpBufferSize: LPDWORD): culong <cimport,nodecl> end
global function WNetGetUniversalNameW(lpLocalPath: LPCWSTR, dwInfoLevel: culong, lpBuffer: LPVOID, lpBufferSize: LPDWORD): culong <cimport,nodecl> end
global function WNetGetUserA(lpName: LPCSTR, lpUserName: LPSTR, lpnLength: LPDWORD): culong <cimport,nodecl> end
global function WNetGetUserW(lpName: LPCWSTR, lpUserName: LPWSTR, lpnLength: LPDWORD): culong <cimport,nodecl> end
global function WNetGetProviderNameA(dwNetType: culong, lpProviderName: LPSTR, lpBufferSize: LPDWORD): culong <cimport,nodecl> end
global function WNetGetProviderNameW(dwNetType: culong, lpProviderName: LPWSTR, lpBufferSize: LPDWORD): culong <cimport,nodecl> end
global _NETINFOSTRUCT: type <cimport,nodecl,ctypedef> = @record{
  cbStructure: culong,
  dwProviderVersion: culong,
  dwStatus: culong,
  dwCharacteristics: culong,
  dwHandle: culonglong,
  wNetType: cushort,
  dwPrinters: culong,
  dwDrives: culong
}
global NETINFOSTRUCT: type = @_NETINFOSTRUCT
global LPNETINFOSTRUCT: type = @*_NETINFOSTRUCT
global function WNetGetNetworkInformationA(lpProvider: LPCSTR, lpNetInfoStruct: LPNETINFOSTRUCT): culong <cimport,nodecl> end
global function WNetGetNetworkInformationW(lpProvider: LPCWSTR, lpNetInfoStruct: LPNETINFOSTRUCT): culong <cimport,nodecl> end
global PFNGETPROFILEPATHA: type <cimport,nodecl> = @function(LPCSTR, LPSTR, cuint): cuint
global PFNGETPROFILEPATHW: type <cimport,nodecl> = @function(LPCWSTR, LPWSTR, cuint): cuint
global PFNRECONCILEPROFILEA: type <cimport,nodecl> = @function(LPCSTR, LPCSTR, culong): cuint
global PFNRECONCILEPROFILEW: type <cimport,nodecl> = @function(LPCWSTR, LPCWSTR, culong): cuint
global PFNPROCESSPOLICIESA: type <cimport,nodecl> = @function(HWND, LPCSTR, LPCSTR, LPCSTR, culong): cint
global PFNPROCESSPOLICIESW: type <cimport,nodecl> = @function(HWND, LPCWSTR, LPCWSTR, LPCWSTR, culong): cint
global function WNetGetLastErrorA(lpError: LPDWORD, lpErrorBuf: LPSTR, nErrorBufSize: culong, lpNameBuf: LPSTR, nNameBufSize: culong): culong <cimport,nodecl> end
global function WNetGetLastErrorW(lpError: LPDWORD, lpErrorBuf: LPWSTR, nErrorBufSize: culong, lpNameBuf: LPWSTR, nNameBufSize: culong): culong <cimport,nodecl> end
global _NETCONNECTINFOSTRUCT: type <cimport,nodecl,ctypedef> = @record{
  cbStructure: culong,
  dwFlags: culong,
  dwSpeed: culong,
  dwDelay: culong,
  dwOptDataSize: culong
}
global NETCONNECTINFOSTRUCT: type = @_NETCONNECTINFOSTRUCT
global LPNETCONNECTINFOSTRUCT: type = @*_NETCONNECTINFOSTRUCT
global function MultinetGetConnectionPerformanceA(lpNetResource: LPNETRESOURCEA, lpNetConnectInfoStruct: LPNETCONNECTINFOSTRUCT): culong <cimport,nodecl> end
global function MultinetGetConnectionPerformanceW(lpNetResource: LPNETRESOURCEW, lpNetConnectInfoStruct: LPNETCONNECTINFOSTRUCT): culong <cimport,nodecl> end
global function uaw_CharUpperW(String: LPUWSTR): LPUWSTR <cimport,nodecl> end
global function uaw_lstrcmpW(String1: PCUWSTR, String2: PCUWSTR): cint <cimport,nodecl> end
global function uaw_lstrcmpiW(String1: PCUWSTR, String2: PCUWSTR): cint <cimport,nodecl> end
global function uaw_lstrlenW(String: LPCUWSTR): cint <cimport,nodecl> end
global function ua_CharUpperW(String: LPUWSTR): LPUWSTR <cimport,nodecl> end
global function ua_lstrcmpW(String1: LPCUWSTR, String2: LPCUWSTR): cint <cimport,nodecl> end
global function ua_lstrcmpiW(String1: LPCUWSTR, String2: LPCUWSTR): cint <cimport,nodecl> end
global function ua_lstrlenW(String: LPCUWSTR): cint <cimport,nodecl> end
global PUWSTR_C: type = @*cwchar_t
global _SERVICE_DESCRIPTIONA: type <cimport,nodecl,ctypedef> = @record{
  lpDescription: LPSTR
}
global SERVICE_DESCRIPTIONA: type = @_SERVICE_DESCRIPTIONA
global LPSERVICE_DESCRIPTIONA: type = @*_SERVICE_DESCRIPTIONA
global _SERVICE_DESCRIPTIONW: type <cimport,nodecl,ctypedef> = @record{
  lpDescription: LPWSTR
}
global SERVICE_DESCRIPTIONW: type = @_SERVICE_DESCRIPTIONW
global LPSERVICE_DESCRIPTIONW: type = @*_SERVICE_DESCRIPTIONW
global SERVICE_DESCRIPTION: type = @_SERVICE_DESCRIPTIONA
global LPSERVICE_DESCRIPTION: type = @*_SERVICE_DESCRIPTIONA
global _SC_ACTION_TYPE: type <cimport,nodecl,using,ctypedef> = @enum(cint){
  SC_ACTION_NONE = 0,
  SC_ACTION_RESTART = 1,
  SC_ACTION_REBOOT = 2,
  SC_ACTION_RUN_COMMAND = 3
}
global SC_ACTION_TYPE: type = @_SC_ACTION_TYPE
global _SC_ACTION: type <cimport,nodecl,ctypedef> = @record{
  Type: SC_ACTION_TYPE,
  Delay: culong
}
global SC_ACTION: type = @_SC_ACTION
global LPSC_ACTION: type = @*_SC_ACTION
global _SERVICE_FAILURE_ACTIONSA: type <cimport,nodecl,ctypedef> = @record{
  dwResetPeriod: culong,
  lpRebootMsg: LPSTR,
  lpCommand: LPSTR,
  cActions: culong,
  lpsaActions: *SC_ACTION
}
global SERVICE_FAILURE_ACTIONSA: type = @_SERVICE_FAILURE_ACTIONSA
global LPSERVICE_FAILURE_ACTIONSA: type = @*_SERVICE_FAILURE_ACTIONSA
global _SERVICE_FAILURE_ACTIONSW: type <cimport,nodecl,ctypedef> = @record{
  dwResetPeriod: culong,
  lpRebootMsg: LPWSTR,
  lpCommand: LPWSTR,
  cActions: culong,
  lpsaActions: *SC_ACTION
}
global SERVICE_FAILURE_ACTIONSW: type = @_SERVICE_FAILURE_ACTIONSW
global LPSERVICE_FAILURE_ACTIONSW: type = @*_SERVICE_FAILURE_ACTIONSW
global SERVICE_FAILURE_ACTIONS: type = @_SERVICE_FAILURE_ACTIONSA
global LPSERVICE_FAILURE_ACTIONS: type = @*_SERVICE_FAILURE_ACTIONSA
global SC_HANDLE__: type <cimport,nodecl,ctypedef> = @record{
  unused: cint
}
global SC_HANDLE: type = @*SC_HANDLE__
global LPSC_HANDLE: type = @*SC_HANDLE
global SERVICE_STATUS_HANDLE__: type <cimport,nodecl,ctypedef> = @record{
  unused: cint
}
global SERVICE_STATUS_HANDLE: type = @*SERVICE_STATUS_HANDLE__
global _SC_STATUS_TYPE: type <cimport,nodecl,using,ctypedef> = @enum(cint){
  SC_STATUS_PROCESS_INFO = 0
}
global SC_STATUS_TYPE: type = @_SC_STATUS_TYPE
global _SC_ENUM_TYPE: type <cimport,nodecl,using,ctypedef> = @enum(cint){
  SC_ENUM_PROCESS_INFO = 0
}
global SC_ENUM_TYPE: type = @_SC_ENUM_TYPE
global _SERVICE_STATUS: type <cimport,nodecl,ctypedef> = @record{
  dwServiceType: culong,
  dwCurrentState: culong,
  dwControlsAccepted: culong,
  dwWin32ExitCode: culong,
  dwServiceSpecificExitCode: culong,
  dwCheckPoint: culong,
  dwWaitHint: culong
}
global SERVICE_STATUS: type = @_SERVICE_STATUS
global LPSERVICE_STATUS: type = @*_SERVICE_STATUS
global _SERVICE_STATUS_PROCESS: type <cimport,nodecl,ctypedef> = @record{
  dwServiceType: culong,
  dwCurrentState: culong,
  dwControlsAccepted: culong,
  dwWin32ExitCode: culong,
  dwServiceSpecificExitCode: culong,
  dwCheckPoint: culong,
  dwWaitHint: culong,
  dwProcessId: culong,
  dwServiceFlags: culong
}
global SERVICE_STATUS_PROCESS: type = @_SERVICE_STATUS_PROCESS
global LPSERVICE_STATUS_PROCESS: type = @*_SERVICE_STATUS_PROCESS
global _ENUM_SERVICE_STATUSA: type <cimport,nodecl,ctypedef> = @record{
  lpServiceName: LPSTR,
  lpDisplayName: LPSTR,
  ServiceStatus: SERVICE_STATUS
}
global ENUM_SERVICE_STATUSA: type = @_ENUM_SERVICE_STATUSA
global LPENUM_SERVICE_STATUSA: type = @*_ENUM_SERVICE_STATUSA
global _ENUM_SERVICE_STATUSW: type <cimport,nodecl,ctypedef> = @record{
  lpServiceName: LPWSTR,
  lpDisplayName: LPWSTR,
  ServiceStatus: SERVICE_STATUS
}
global ENUM_SERVICE_STATUSW: type = @_ENUM_SERVICE_STATUSW
global LPENUM_SERVICE_STATUSW: type = @*_ENUM_SERVICE_STATUSW
global ENUM_SERVICE_STATUS: type = @_ENUM_SERVICE_STATUSA
global LPENUM_SERVICE_STATUS: type = @*_ENUM_SERVICE_STATUSA
global _ENUM_SERVICE_STATUS_PROCESSA: type <cimport,nodecl,ctypedef> = @record{
  lpServiceName: LPSTR,
  lpDisplayName: LPSTR,
  ServiceStatusProcess: SERVICE_STATUS_PROCESS
}
global ENUM_SERVICE_STATUS_PROCESSA: type = @_ENUM_SERVICE_STATUS_PROCESSA
global LPENUM_SERVICE_STATUS_PROCESSA: type = @*_ENUM_SERVICE_STATUS_PROCESSA
global _ENUM_SERVICE_STATUS_PROCESSW: type <cimport,nodecl,ctypedef> = @record{
  lpServiceName: LPWSTR,
  lpDisplayName: LPWSTR,
  ServiceStatusProcess: SERVICE_STATUS_PROCESS
}
global ENUM_SERVICE_STATUS_PROCESSW: type = @_ENUM_SERVICE_STATUS_PROCESSW
global LPENUM_SERVICE_STATUS_PROCESSW: type = @*_ENUM_SERVICE_STATUS_PROCESSW
global ENUM_SERVICE_STATUS_PROCESS: type = @_ENUM_SERVICE_STATUS_PROCESSA
global LPENUM_SERVICE_STATUS_PROCESS: type = @*_ENUM_SERVICE_STATUS_PROCESSA
global SC_LOCK: type = @pointer
global _QUERY_SERVICE_LOCK_STATUSA: type <cimport,nodecl,ctypedef> = @record{
  fIsLocked: culong,
  lpLockOwner: LPSTR,
  dwLockDuration: culong
}
global QUERY_SERVICE_LOCK_STATUSA: type = @_QUERY_SERVICE_LOCK_STATUSA
global LPQUERY_SERVICE_LOCK_STATUSA: type = @*_QUERY_SERVICE_LOCK_STATUSA
global _QUERY_SERVICE_LOCK_STATUSW: type <cimport,nodecl,ctypedef> = @record{
  fIsLocked: culong,
  lpLockOwner: LPWSTR,
  dwLockDuration: culong
}
global QUERY_SERVICE_LOCK_STATUSW: type = @_QUERY_SERVICE_LOCK_STATUSW
global LPQUERY_SERVICE_LOCK_STATUSW: type = @*_QUERY_SERVICE_LOCK_STATUSW
global QUERY_SERVICE_LOCK_STATUS: type = @_QUERY_SERVICE_LOCK_STATUSA
global LPQUERY_SERVICE_LOCK_STATUS: type = @*_QUERY_SERVICE_LOCK_STATUSA
global _QUERY_SERVICE_CONFIGA: type <cimport,nodecl,ctypedef> = @record{
  dwServiceType: culong,
  dwStartType: culong,
  dwErrorControl: culong,
  lpBinaryPathName: LPSTR,
  lpLoadOrderGroup: LPSTR,
  dwTagId: culong,
  lpDependencies: LPSTR,
  lpServiceStartName: LPSTR,
  lpDisplayName: LPSTR
}
global QUERY_SERVICE_CONFIGA: type = @_QUERY_SERVICE_CONFIGA
global LPQUERY_SERVICE_CONFIGA: type = @*_QUERY_SERVICE_CONFIGA
global _QUERY_SERVICE_CONFIGW: type <cimport,nodecl,ctypedef> = @record{
  dwServiceType: culong,
  dwStartType: culong,
  dwErrorControl: culong,
  lpBinaryPathName: LPWSTR,
  lpLoadOrderGroup: LPWSTR,
  dwTagId: culong,
  lpDependencies: LPWSTR,
  lpServiceStartName: LPWSTR,
  lpDisplayName: LPWSTR
}
global QUERY_SERVICE_CONFIGW: type = @_QUERY_SERVICE_CONFIGW
global LPQUERY_SERVICE_CONFIGW: type = @*_QUERY_SERVICE_CONFIGW
global QUERY_SERVICE_CONFIG: type = @_QUERY_SERVICE_CONFIGA
global LPQUERY_SERVICE_CONFIG: type = @*_QUERY_SERVICE_CONFIGA
global LPSERVICE_MAIN_FUNCTIONW: type <cimport,nodecl> = @function(culong, *LPWSTR): void
global LPSERVICE_MAIN_FUNCTIONA: type <cimport,nodecl> = @function(culong, *LPSTR): void
global _SERVICE_TABLE_ENTRYA: type <cimport,nodecl,ctypedef> = @record{
  lpServiceName: LPSTR,
  lpServiceProc: LPSERVICE_MAIN_FUNCTIONA
}
global SERVICE_TABLE_ENTRYA: type = @_SERVICE_TABLE_ENTRYA
global LPSERVICE_TABLE_ENTRYA: type = @*_SERVICE_TABLE_ENTRYA
global _SERVICE_TABLE_ENTRYW: type <cimport,nodecl,ctypedef> = @record{
  lpServiceName: LPWSTR,
  lpServiceProc: LPSERVICE_MAIN_FUNCTIONW
}
global SERVICE_TABLE_ENTRYW: type = @_SERVICE_TABLE_ENTRYW
global LPSERVICE_TABLE_ENTRYW: type = @*_SERVICE_TABLE_ENTRYW
global SERVICE_TABLE_ENTRY: type = @_SERVICE_TABLE_ENTRYA
global LPSERVICE_TABLE_ENTRY: type = @*_SERVICE_TABLE_ENTRYA
global LPHANDLER_FUNCTION: type <cimport,nodecl> = @function(culong): void
global LPHANDLER_FUNCTION_EX: type <cimport,nodecl> = @function(culong, culong, LPVOID, LPVOID): culong
global function ChangeServiceConfigA(hService: SC_HANDLE, dwServiceType: culong, dwStartType: culong, dwErrorControl: culong, lpBinaryPathName: LPCSTR, lpLoadOrderGroup: LPCSTR, lpdwTagId: LPDWORD, lpDependencies: LPCSTR, lpServiceStartName: LPCSTR, lpPassword: LPCSTR, lpDisplayName: LPCSTR): cint <cimport,nodecl> end
global function ChangeServiceConfigW(hService: SC_HANDLE, dwServiceType: culong, dwStartType: culong, dwErrorControl: culong, lpBinaryPathName: LPCWSTR, lpLoadOrderGroup: LPCWSTR, lpdwTagId: LPDWORD, lpDependencies: LPCWSTR, lpServiceStartName: LPCWSTR, lpPassword: LPCWSTR, lpDisplayName: LPCWSTR): cint <cimport,nodecl> end
global function ChangeServiceConfig2A(hService: SC_HANDLE, dwInfoLevel: culong, lpInfo: LPVOID): cint <cimport,nodecl> end
global function ChangeServiceConfig2W(hService: SC_HANDLE, dwInfoLevel: culong, lpInfo: LPVOID): cint <cimport,nodecl> end
global function CloseServiceHandle(hSCObject: SC_HANDLE): cint <cimport,nodecl> end
global function ControlService(hService: SC_HANDLE, dwControl: culong, lpServiceStatus: LPSERVICE_STATUS): cint <cimport,nodecl> end
global function CreateServiceA(hSCManager: SC_HANDLE, lpServiceName: LPCSTR, lpDisplayName: LPCSTR, dwDesiredAccess: culong, dwServiceType: culong, dwStartType: culong, dwErrorControl: culong, lpBinaryPathName: LPCSTR, lpLoadOrderGroup: LPCSTR, lpdwTagId: LPDWORD, lpDependencies: LPCSTR, lpServiceStartName: LPCSTR, lpPassword: LPCSTR): SC_HANDLE <cimport,nodecl> end
global function CreateServiceW(hSCManager: SC_HANDLE, lpServiceName: LPCWSTR, lpDisplayName: LPCWSTR, dwDesiredAccess: culong, dwServiceType: culong, dwStartType: culong, dwErrorControl: culong, lpBinaryPathName: LPCWSTR, lpLoadOrderGroup: LPCWSTR, lpdwTagId: LPDWORD, lpDependencies: LPCWSTR, lpServiceStartName: LPCWSTR, lpPassword: LPCWSTR): SC_HANDLE <cimport,nodecl> end
global function DeleteService(hService: SC_HANDLE): cint <cimport,nodecl> end
global function EnumDependentServicesA(hService: SC_HANDLE, dwServiceState: culong, lpServices: LPENUM_SERVICE_STATUSA, cbBufSize: culong, pcbBytesNeeded: LPDWORD, lpServicesReturned: LPDWORD): cint <cimport,nodecl> end
global function EnumDependentServicesW(hService: SC_HANDLE, dwServiceState: culong, lpServices: LPENUM_SERVICE_STATUSW, cbBufSize: culong, pcbBytesNeeded: LPDWORD, lpServicesReturned: LPDWORD): cint <cimport,nodecl> end
global function EnumServicesStatusA(hSCManager: SC_HANDLE, dwServiceType: culong, dwServiceState: culong, lpServices: LPENUM_SERVICE_STATUSA, cbBufSize: culong, pcbBytesNeeded: LPDWORD, lpServicesReturned: LPDWORD, lpResumeHandle: LPDWORD): cint <cimport,nodecl> end
global function EnumServicesStatusW(hSCManager: SC_HANDLE, dwServiceType: culong, dwServiceState: culong, lpServices: LPENUM_SERVICE_STATUSW, cbBufSize: culong, pcbBytesNeeded: LPDWORD, lpServicesReturned: LPDWORD, lpResumeHandle: LPDWORD): cint <cimport,nodecl> end
global function EnumServicesStatusExA(hSCManager: SC_HANDLE, InfoLevel: SC_ENUM_TYPE, dwServiceType: culong, dwServiceState: culong, lpServices: LPBYTE, cbBufSize: culong, pcbBytesNeeded: LPDWORD, lpServicesReturned: LPDWORD, lpResumeHandle: LPDWORD, pszGroupName: LPCSTR): cint <cimport,nodecl> end
global function EnumServicesStatusExW(hSCManager: SC_HANDLE, InfoLevel: SC_ENUM_TYPE, dwServiceType: culong, dwServiceState: culong, lpServices: LPBYTE, cbBufSize: culong, pcbBytesNeeded: LPDWORD, lpServicesReturned: LPDWORD, lpResumeHandle: LPDWORD, pszGroupName: LPCWSTR): cint <cimport,nodecl> end
global function GetServiceKeyNameA(hSCManager: SC_HANDLE, lpDisplayName: LPCSTR, lpServiceName: LPSTR, lpcchBuffer: LPDWORD): cint <cimport,nodecl> end
global function GetServiceKeyNameW(hSCManager: SC_HANDLE, lpDisplayName: LPCWSTR, lpServiceName: LPWSTR, lpcchBuffer: LPDWORD): cint <cimport,nodecl> end
global function GetServiceDisplayNameA(hSCManager: SC_HANDLE, lpServiceName: LPCSTR, lpDisplayName: LPSTR, lpcchBuffer: LPDWORD): cint <cimport,nodecl> end
global function GetServiceDisplayNameW(hSCManager: SC_HANDLE, lpServiceName: LPCWSTR, lpDisplayName: LPWSTR, lpcchBuffer: LPDWORD): cint <cimport,nodecl> end
global function LockServiceDatabase(hSCManager: SC_HANDLE): SC_LOCK <cimport,nodecl> end
global function NotifyBootConfigStatus(BootAcceptable: cint): cint <cimport,nodecl> end
global function OpenSCManagerA(lpMachineName: LPCSTR, lpDatabaseName: LPCSTR, dwDesiredAccess: culong): SC_HANDLE <cimport,nodecl> end
global function OpenSCManagerW(lpMachineName: LPCWSTR, lpDatabaseName: LPCWSTR, dwDesiredAccess: culong): SC_HANDLE <cimport,nodecl> end
global function OpenServiceA(hSCManager: SC_HANDLE, lpServiceName: LPCSTR, dwDesiredAccess: culong): SC_HANDLE <cimport,nodecl> end
global function OpenServiceW(hSCManager: SC_HANDLE, lpServiceName: LPCWSTR, dwDesiredAccess: culong): SC_HANDLE <cimport,nodecl> end
global function QueryServiceConfigA(hService: SC_HANDLE, lpServiceConfig: LPQUERY_SERVICE_CONFIGA, cbBufSize: culong, pcbBytesNeeded: LPDWORD): cint <cimport,nodecl> end
global function QueryServiceConfigW(hService: SC_HANDLE, lpServiceConfig: LPQUERY_SERVICE_CONFIGW, cbBufSize: culong, pcbBytesNeeded: LPDWORD): cint <cimport,nodecl> end
global function QueryServiceConfig2A(hService: SC_HANDLE, dwInfoLevel: culong, lpBuffer: LPBYTE, cbBufSize: culong, pcbBytesNeeded: LPDWORD): cint <cimport,nodecl> end
global function QueryServiceConfig2W(hService: SC_HANDLE, dwInfoLevel: culong, lpBuffer: LPBYTE, cbBufSize: culong, pcbBytesNeeded: LPDWORD): cint <cimport,nodecl> end
global function QueryServiceLockStatusA(hSCManager: SC_HANDLE, lpLockStatus: LPQUERY_SERVICE_LOCK_STATUSA, cbBufSize: culong, pcbBytesNeeded: LPDWORD): cint <cimport,nodecl> end
global function QueryServiceLockStatusW(hSCManager: SC_HANDLE, lpLockStatus: LPQUERY_SERVICE_LOCK_STATUSW, cbBufSize: culong, pcbBytesNeeded: LPDWORD): cint <cimport,nodecl> end
global function QueryServiceObjectSecurity(hService: SC_HANDLE, dwSecurityInformation: culong, lpSecurityDescriptor: PSECURITY_DESCRIPTOR, cbBufSize: culong, pcbBytesNeeded: LPDWORD): cint <cimport,nodecl> end
global function QueryServiceStatus(hService: SC_HANDLE, lpServiceStatus: LPSERVICE_STATUS): cint <cimport,nodecl> end
global function QueryServiceStatusEx(hService: SC_HANDLE, InfoLevel: SC_STATUS_TYPE, lpBuffer: LPBYTE, cbBufSize: culong, pcbBytesNeeded: LPDWORD): cint <cimport,nodecl> end
global function RegisterServiceCtrlHandlerA(lpServiceName: LPCSTR, lpHandlerProc: LPHANDLER_FUNCTION): SERVICE_STATUS_HANDLE <cimport,nodecl> end
global function RegisterServiceCtrlHandlerW(lpServiceName: LPCWSTR, lpHandlerProc: LPHANDLER_FUNCTION): SERVICE_STATUS_HANDLE <cimport,nodecl> end
global function RegisterServiceCtrlHandlerExA(lpServiceName: LPCSTR, lpHandlerProc: LPHANDLER_FUNCTION_EX, lpContext: LPVOID): SERVICE_STATUS_HANDLE <cimport,nodecl> end
global function RegisterServiceCtrlHandlerExW(lpServiceName: LPCWSTR, lpHandlerProc: LPHANDLER_FUNCTION_EX, lpContext: LPVOID): SERVICE_STATUS_HANDLE <cimport,nodecl> end
global function SetServiceObjectSecurity(hService: SC_HANDLE, dwSecurityInformation: culong, lpSecurityDescriptor: PSECURITY_DESCRIPTOR): cint <cimport,nodecl> end
global function SetServiceStatus(hServiceStatus: SERVICE_STATUS_HANDLE, lpServiceStatus: LPSERVICE_STATUS): cint <cimport,nodecl> end
global function StartServiceCtrlDispatcherA(lpServiceStartTable: *SERVICE_TABLE_ENTRYA): cint <cimport,nodecl> end
global function StartServiceCtrlDispatcherW(lpServiceStartTable: *SERVICE_TABLE_ENTRYW): cint <cimport,nodecl> end
global function StartServiceA(hService: SC_HANDLE, dwNumServiceArgs: culong, lpServiceArgVectors: *LPCSTR): cint <cimport,nodecl> end
global function StartServiceW(hService: SC_HANDLE, dwNumServiceArgs: culong, lpServiceArgVectors: *LPCWSTR): cint <cimport,nodecl> end
global function UnlockServiceDatabase(ScLock: SC_LOCK): cint <cimport,nodecl> end
global PFN_SC_NOTIFY_CALLBACK: type <cimport,nodecl> = @function(PVOID): void
global _SERVICE_CONTROL_STATUS_REASON_PARAMSA: type <cimport,nodecl,ctypedef> = @record{
  dwReason: culong,
  pszComment: LPSTR,
  ServiceStatus: SERVICE_STATUS_PROCESS
}
global SERVICE_CONTROL_STATUS_REASON_PARAMSA: type = @_SERVICE_CONTROL_STATUS_REASON_PARAMSA
global PSERVICE_CONTROL_STATUS_REASON_PARAMSA: type = @*_SERVICE_CONTROL_STATUS_REASON_PARAMSA
global _SERVICE_CONTROL_STATUS_REASON_PARAMSW: type <cimport,nodecl,ctypedef> = @record{
  dwReason: culong,
  pszComment: LPWSTR,
  ServiceStatus: SERVICE_STATUS_PROCESS
}
global SERVICE_CONTROL_STATUS_REASON_PARAMSW: type = @_SERVICE_CONTROL_STATUS_REASON_PARAMSW
global PSERVICE_CONTROL_STATUS_REASON_PARAMSW: type = @*_SERVICE_CONTROL_STATUS_REASON_PARAMSW
global SERVICE_CONTROL_STATUS_REASON_PARAMS: type = @_SERVICE_CONTROL_STATUS_REASON_PARAMSA
global PSERVICE_CONTROL_STATUS_REASON_PARAMS: type = @*_SERVICE_CONTROL_STATUS_REASON_PARAMSA
global _SERVICE_NOTIFYA: type <cimport,nodecl,ctypedef> = @record{
  dwVersion: culong,
  pfnNotifyCallback: PFN_SC_NOTIFY_CALLBACK,
  pContext: PVOID,
  dwNotificationStatus: culong,
  ServiceStatus: SERVICE_STATUS_PROCESS,
  dwNotificationTriggered: culong,
  pszServiceNames: LPSTR
}
global SERVICE_NOTIFYA: type = @_SERVICE_NOTIFYA
global PSERVICE_NOTIFYA: type = @*_SERVICE_NOTIFYA
global _SERVICE_NOTIFYW: type <cimport,nodecl,ctypedef> = @record{
  dwVersion: culong,
  pfnNotifyCallback: PFN_SC_NOTIFY_CALLBACK,
  pContext: PVOID,
  dwNotificationStatus: culong,
  ServiceStatus: SERVICE_STATUS_PROCESS,
  dwNotificationTriggered: culong,
  pszServiceNames: LPWSTR
}
global SERVICE_NOTIFYW: type = @_SERVICE_NOTIFYW
global PSERVICE_NOTIFYW: type = @*_SERVICE_NOTIFYW
global SERVICE_NOTIFY: type = @_SERVICE_NOTIFYA
global PSERVICE_NOTIFY: type = @*_SERVICE_NOTIFYA
global _SERVICE_DELAYED_AUTO_START_INFO: type <cimport,nodecl,ctypedef> = @record{
  fDelayedAutostart: cint
}
global SERVICE_DELAYED_AUTO_START_INFO: type = @_SERVICE_DELAYED_AUTO_START_INFO
global LPSERVICE_DELAYED_AUTO_START_INFO: type = @*_SERVICE_DELAYED_AUTO_START_INFO
global _SERVICE_FAILURE_ACTIONS_FLAG: type <cimport,nodecl,ctypedef> = @record{
  fFailureActionsOnNonCrashFailures: cint
}
global SERVICE_FAILURE_ACTIONS_FLAG: type = @_SERVICE_FAILURE_ACTIONS_FLAG
global LPSERVICE_FAILURE_ACTIONS_FLAG: type = @*_SERVICE_FAILURE_ACTIONS_FLAG
global _SERVICE_PRESHUTDOWN_INFO: type <cimport,nodecl,ctypedef> = @record{
  dwPreshutdownTimeout: culong
}
global SERVICE_PRESHUTDOWN_INFO: type = @_SERVICE_PRESHUTDOWN_INFO
global LPSERVICE_PRESHUTDOWN_INFO: type = @*_SERVICE_PRESHUTDOWN_INFO
global _SERVICE_REQUIRED_PRIVILEGES_INFOA: type <cimport,nodecl,ctypedef> = @record{
  pmszRequiredPrivileges: LPSTR
}
global SERVICE_REQUIRED_PRIVILEGES_INFOA: type = @_SERVICE_REQUIRED_PRIVILEGES_INFOA
global LPSERVICE_REQUIRED_PRIVILEGES_INFOA: type = @*_SERVICE_REQUIRED_PRIVILEGES_INFOA
global _SERVICE_REQUIRED_PRIVILEGES_INFOW: type <cimport,nodecl,ctypedef> = @record{
  pmszRequiredPrivileges: LPWSTR
}
global SERVICE_REQUIRED_PRIVILEGES_INFOW: type = @_SERVICE_REQUIRED_PRIVILEGES_INFOW
global LPSERVICE_REQUIRED_PRIVILEGES_INFOW: type = @*_SERVICE_REQUIRED_PRIVILEGES_INFOW
global SERVICE_REQUIRED_PRIVILEGES_INFO: type = @_SERVICE_REQUIRED_PRIVILEGES_INFOA
global _SERVICE_SID_INFO: type <cimport,nodecl,ctypedef> = @record{
  dwServiceSidType: culong
}
global SERVICE_SID_INFO: type = @_SERVICE_SID_INFO
global LPSERVICE_SID_INFO: type = @*_SERVICE_SID_INFO
global function ControlServiceExA(hService: SC_HANDLE, dwControl: culong, dwInfoLevel: culong, pControlParams: PVOID): cint <cimport,nodecl> end
global function ControlServiceExW(hService: SC_HANDLE, dwControl: culong, dwInfoLevel: culong, pControlParams: PVOID): cint <cimport,nodecl> end
global function NotifyServiceStatusChangeA(hService: SC_HANDLE, dwNotifyMask: culong, pNotifyBuffer: PSERVICE_NOTIFYA): culong <cimport,nodecl> end
global function NotifyServiceStatusChangeW(hService: SC_HANDLE, dwNotifyMask: culong, pNotifyBuffer: PSERVICE_NOTIFYW): culong <cimport,nodecl> end
global _MODEMDEVCAPS: type <cimport,nodecl,ctypedef> = @record{
  dwActualSize: culong,
  dwRequiredSize: culong,
  dwDevSpecificOffset: culong,
  dwDevSpecificSize: culong,
  dwModemProviderVersion: culong,
  dwModemManufacturerOffset: culong,
  dwModemManufacturerSize: culong,
  dwModemModelOffset: culong,
  dwModemModelSize: culong,
  dwModemVersionOffset: culong,
  dwModemVersionSize: culong,
  dwDialOptions: culong,
  dwCallSetupFailTimer: culong,
  dwInactivityTimeout: culong,
  dwSpeakerVolume: culong,
  dwSpeakerMode: culong,
  dwModemOptions: culong,
  dwMaxDTERate: culong,
  dwMaxDCERate: culong,
  abVariablePortion: [1]cuchar
}
global MODEMDEVCAPS: type = @_MODEMDEVCAPS
global PMODEMDEVCAPS: type = @*_MODEMDEVCAPS
global LPMODEMDEVCAPS: type = @*_MODEMDEVCAPS
global _MODEMSETTINGS: type <cimport,nodecl,ctypedef> = @record{
  dwActualSize: culong,
  dwRequiredSize: culong,
  dwDevSpecificOffset: culong,
  dwDevSpecificSize: culong,
  dwCallSetupFailTimer: culong,
  dwInactivityTimeout: culong,
  dwSpeakerVolume: culong,
  dwSpeakerMode: culong,
  dwPreferredModemOptions: culong,
  dwNegotiatedModemOptions: culong,
  dwNegotiatedDCERate: culong,
  abVariablePortion: [1]cuchar
}
global MODEMSETTINGS: type = @_MODEMSETTINGS
global PMODEMSETTINGS: type = @*_MODEMSETTINGS
global LPMODEMSETTINGS: type = @*_MODEMSETTINGS
global HIMC__: type <cimport,nodecl,ctypedef> = @record{
  unused: cint
}
global HIMC: type = @*HIMC__
global HIMCC__: type <cimport,nodecl,ctypedef> = @record{
  unused: cint
}
global HIMCC: type = @*HIMCC__
global LPHKL: type = @*HKL
global LPUINT: type = @*cuint
global tagCOMPOSITIONFORM: type <cimport,nodecl,ctypedef> = @record{
  dwStyle: culong,
  ptCurrentPos: POINT,
  rcArea: RECT
}
global COMPOSITIONFORM: type = @tagCOMPOSITIONFORM
global PCOMPOSITIONFORM: type = @*tagCOMPOSITIONFORM
global NPCOMPOSITIONFORM: type = @*tagCOMPOSITIONFORM
global LPCOMPOSITIONFORM: type = @*tagCOMPOSITIONFORM
global tagCANDIDATEFORM: type <cimport,nodecl,ctypedef> = @record{
  dwIndex: culong,
  dwStyle: culong,
  ptCurrentPos: POINT,
  rcArea: RECT
}
global CANDIDATEFORM: type = @tagCANDIDATEFORM
global PCANDIDATEFORM: type = @*tagCANDIDATEFORM
global NPCANDIDATEFORM: type = @*tagCANDIDATEFORM
global LPCANDIDATEFORM: type = @*tagCANDIDATEFORM
global tagCANDIDATELIST: type <cimport,nodecl,ctypedef> = @record{
  dwSize: culong,
  dwStyle: culong,
  dwCount: culong,
  dwSelection: culong,
  dwPageStart: culong,
  dwPageSize: culong,
  dwOffset: [1]culong
}
global CANDIDATELIST: type = @tagCANDIDATELIST
global PCANDIDATELIST: type = @*tagCANDIDATELIST
global NPCANDIDATELIST: type = @*tagCANDIDATELIST
global LPCANDIDATELIST: type = @*tagCANDIDATELIST
global tagREGISTERWORDA: type <cimport,nodecl,ctypedef> = @record{
  lpReading: LPSTR,
  lpWord: LPSTR
}
global REGISTERWORDA: type = @tagREGISTERWORDA
global PREGISTERWORDA: type = @*tagREGISTERWORDA
global NPREGISTERWORDA: type = @*tagREGISTERWORDA
global LPREGISTERWORDA: type = @*tagREGISTERWORDA
global tagREGISTERWORDW: type <cimport,nodecl,ctypedef> = @record{
  lpReading: LPWSTR,
  lpWord: LPWSTR
}
global REGISTERWORDW: type = @tagREGISTERWORDW
global PREGISTERWORDW: type = @*tagREGISTERWORDW
global NPREGISTERWORDW: type = @*tagREGISTERWORDW
global LPREGISTERWORDW: type = @*tagREGISTERWORDW
global REGISTERWORD: type = @tagREGISTERWORDA
global PREGISTERWORD: type = @*tagREGISTERWORDA
global NPREGISTERWORD: type = @*tagREGISTERWORDA
global LPREGISTERWORD: type = @*tagREGISTERWORDA
global tagRECONVERTSTRING: type <cimport,nodecl,ctypedef> = @record{
  dwSize: culong,
  dwVersion: culong,
  dwStrLen: culong,
  dwStrOffset: culong,
  dwCompStrLen: culong,
  dwCompStrOffset: culong,
  dwTargetStrLen: culong,
  dwTargetStrOffset: culong
}
global RECONVERTSTRING: type = @tagRECONVERTSTRING
global PRECONVERTSTRING: type = @*tagRECONVERTSTRING
global NPRECONVERTSTRING: type = @*tagRECONVERTSTRING
global LPRECONVERTSTRING: type = @*tagRECONVERTSTRING
global tagSTYLEBUFA: type <cimport,nodecl,ctypedef> = @record{
  dwStyle: culong,
  szDescription: [32]cchar
}
global STYLEBUFA: type = @tagSTYLEBUFA
global PSTYLEBUFA: type = @*tagSTYLEBUFA
global NPSTYLEBUFA: type = @*tagSTYLEBUFA
global LPSTYLEBUFA: type = @*tagSTYLEBUFA
global tagSTYLEBUFW: type <cimport,nodecl,ctypedef> = @record{
  dwStyle: culong,
  szDescription: [32]cwchar_t
}
global STYLEBUFW: type = @tagSTYLEBUFW
global PSTYLEBUFW: type = @*tagSTYLEBUFW
global NPSTYLEBUFW: type = @*tagSTYLEBUFW
global LPSTYLEBUFW: type = @*tagSTYLEBUFW
global STYLEBUF: type = @tagSTYLEBUFA
global PSTYLEBUF: type = @*tagSTYLEBUFA
global NPSTYLEBUF: type = @*tagSTYLEBUFA
global LPSTYLEBUF: type = @*tagSTYLEBUFA
global tagIMEMENUITEMINFOA: type <cimport,nodecl,ctypedef> = @record{
  cbSize: cuint,
  fType: cuint,
  fState: cuint,
  wID: cuint,
  hbmpChecked: HBITMAP,
  hbmpUnchecked: HBITMAP,
  dwItemData: culong,
  szString: [80]cchar,
  hbmpItem: HBITMAP
}
global IMEMENUITEMINFOA: type = @tagIMEMENUITEMINFOA
global PIMEMENUITEMINFOA: type = @*tagIMEMENUITEMINFOA
global NPIMEMENUITEMINFOA: type = @*tagIMEMENUITEMINFOA
global LPIMEMENUITEMINFOA: type = @*tagIMEMENUITEMINFOA
global tagIMEMENUITEMINFOW: type <cimport,nodecl,ctypedef> = @record{
  cbSize: cuint,
  fType: cuint,
  fState: cuint,
  wID: cuint,
  hbmpChecked: HBITMAP,
  hbmpUnchecked: HBITMAP,
  dwItemData: culong,
  szString: [80]cwchar_t,
  hbmpItem: HBITMAP
}
global IMEMENUITEMINFOW: type = @tagIMEMENUITEMINFOW
global PIMEMENUITEMINFOW: type = @*tagIMEMENUITEMINFOW
global NPIMEMENUITEMINFOW: type = @*tagIMEMENUITEMINFOW
global LPIMEMENUITEMINFOW: type = @*tagIMEMENUITEMINFOW
global IMEMENUITEMINFO: type = @tagIMEMENUITEMINFOA
global PIMEMENUITEMINFO: type = @*tagIMEMENUITEMINFOA
global NPIMEMENUITEMINFO: type = @*tagIMEMENUITEMINFOA
global LPIMEMENUITEMINFO: type = @*tagIMEMENUITEMINFOA
global tagIMECHARPOSITION: type <cimport,nodecl,ctypedef> = @record{
  dwSize: culong,
  dwCharPos: culong,
  pt: POINT,
  cLineHeight: cuint,
  rcDocument: RECT
}
global IMECHARPOSITION: type = @tagIMECHARPOSITION
global PIMECHARPOSITION: type = @*tagIMECHARPOSITION
global NPIMECHARPOSITION: type = @*tagIMECHARPOSITION
global LPIMECHARPOSITION: type = @*tagIMECHARPOSITION
global IMCENUMPROC: type <cimport,nodecl> = @function(HIMC, clonglong): cint
global function ImmInstallIMEA(lpszIMEFileName: LPCSTR, lpszLayoutText: LPCSTR): HKL <cimport,nodecl> end
global function ImmInstallIMEW(lpszIMEFileName: LPCWSTR, lpszLayoutText: LPCWSTR): HKL <cimport,nodecl> end
global function ImmGetDefaultIMEWnd(a1: HWND): HWND <cimport,nodecl> end
global function ImmGetDescriptionA(a1: HKL, a2: LPSTR, uBufLen: cuint): cuint <cimport,nodecl> end
global function ImmGetDescriptionW(a1: HKL, a2: LPWSTR, uBufLen: cuint): cuint <cimport,nodecl> end
global function ImmGetIMEFileNameA(a1: HKL, a2: LPSTR, uBufLen: cuint): cuint <cimport,nodecl> end
global function ImmGetIMEFileNameW(a1: HKL, a2: LPWSTR, uBufLen: cuint): cuint <cimport,nodecl> end
global function ImmGetProperty(a1: HKL, a2: culong): culong <cimport,nodecl> end
global function ImmIsIME(a1: HKL): cint <cimport,nodecl> end
global function ImmSimulateHotKey(a1: HWND, a2: culong): cint <cimport,nodecl> end
global function ImmCreateContext(): HIMC <cimport,nodecl> end
global function ImmDestroyContext(a1: HIMC): cint <cimport,nodecl> end
global function ImmGetContext(a1: HWND): HIMC <cimport,nodecl> end
global function ImmReleaseContext(a1: HWND, a2: HIMC): cint <cimport,nodecl> end
global function ImmAssociateContext(a1: HWND, a2: HIMC): HIMC <cimport,nodecl> end
global function ImmAssociateContextEx(a1: HWND, a2: HIMC, a3: culong): cint <cimport,nodecl> end
global function ImmGetCompositionStringA(a1: HIMC, a2: culong, a3: LPVOID, a4: culong): clong <cimport,nodecl> end
global function ImmGetCompositionStringW(a1: HIMC, a2: culong, a3: LPVOID, a4: culong): clong <cimport,nodecl> end
global function ImmSetCompositionStringA(a1: HIMC, dwIndex: culong, lpComp: LPVOID, a4: culong, lpRead: LPVOID, a6: culong): cint <cimport,nodecl> end
global function ImmSetCompositionStringW(a1: HIMC, dwIndex: culong, lpComp: LPVOID, a4: culong, lpRead: LPVOID, a6: culong): cint <cimport,nodecl> end
global function ImmGetCandidateListCountA(a1: HIMC, lpdwListCount: LPDWORD): culong <cimport,nodecl> end
global function ImmGetCandidateListCountW(a1: HIMC, lpdwListCount: LPDWORD): culong <cimport,nodecl> end
global function ImmGetCandidateListA(a1: HIMC, deIndex: culong, a3: LPCANDIDATELIST, dwBufLen: culong): culong <cimport,nodecl> end
global function ImmGetCandidateListW(a1: HIMC, deIndex: culong, a3: LPCANDIDATELIST, dwBufLen: culong): culong <cimport,nodecl> end
global function ImmGetGuideLineA(a1: HIMC, dwIndex: culong, a3: LPSTR, dwBufLen: culong): culong <cimport,nodecl> end
global function ImmGetGuideLineW(a1: HIMC, dwIndex: culong, a3: LPWSTR, dwBufLen: culong): culong <cimport,nodecl> end
global function ImmGetConversionStatus(a1: HIMC, a2: LPDWORD, a3: LPDWORD): cint <cimport,nodecl> end
global function ImmSetConversionStatus(a1: HIMC, a2: culong, a3: culong): cint <cimport,nodecl> end
global function ImmGetOpenStatus(a1: HIMC): cint <cimport,nodecl> end
global function ImmSetOpenStatus(a1: HIMC, a2: cint): cint <cimport,nodecl> end
global function ImmGetCompositionFontA(a1: HIMC, a2: LPLOGFONTA): cint <cimport,nodecl> end
global function ImmGetCompositionFontW(a1: HIMC, a2: LPLOGFONTW): cint <cimport,nodecl> end
global function ImmSetCompositionFontA(a1: HIMC, a2: LPLOGFONTA): cint <cimport,nodecl> end
global function ImmSetCompositionFontW(a1: HIMC, a2: LPLOGFONTW): cint <cimport,nodecl> end
global REGISTERWORDENUMPROCA: type <cimport,nodecl> = @function(LPCSTR, culong, LPCSTR, LPVOID): cint
global REGISTERWORDENUMPROCW: type <cimport,nodecl> = @function(LPCWSTR, culong, LPCWSTR, LPVOID): cint
global function ImmConfigureIMEA(a1: HKL, a2: HWND, a3: culong, a4: LPVOID): cint <cimport,nodecl> end
global function ImmConfigureIMEW(a1: HKL, a2: HWND, a3: culong, a4: LPVOID): cint <cimport,nodecl> end
global function ImmEscapeA(a1: HKL, a2: HIMC, a3: cuint, a4: LPVOID): clonglong <cimport,nodecl> end
global function ImmEscapeW(a1: HKL, a2: HIMC, a3: cuint, a4: LPVOID): clonglong <cimport,nodecl> end
global function ImmGetConversionListA(a1: HKL, a2: HIMC, a3: LPCSTR, a4: LPCANDIDATELIST, dwBufLen: culong, uFlag: cuint): culong <cimport,nodecl> end
global function ImmGetConversionListW(a1: HKL, a2: HIMC, a3: LPCWSTR, a4: LPCANDIDATELIST, dwBufLen: culong, uFlag: cuint): culong <cimport,nodecl> end
global function ImmNotifyIME(a1: HIMC, dwAction: culong, dwIndex: culong, dwValue: culong): cint <cimport,nodecl> end
global function ImmGetStatusWindowPos(a1: HIMC, a2: LPPOINT): cint <cimport,nodecl> end
global function ImmSetStatusWindowPos(a1: HIMC, a2: LPPOINT): cint <cimport,nodecl> end
global function ImmGetCompositionWindow(a1: HIMC, a2: LPCOMPOSITIONFORM): cint <cimport,nodecl> end
global function ImmSetCompositionWindow(a1: HIMC, a2: LPCOMPOSITIONFORM): cint <cimport,nodecl> end
global function ImmGetCandidateWindow(a1: HIMC, a2: culong, a3: LPCANDIDATEFORM): cint <cimport,nodecl> end
global function ImmSetCandidateWindow(a1: HIMC, a2: LPCANDIDATEFORM): cint <cimport,nodecl> end
global function ImmIsUIMessageA(a1: HWND, a2: cuint, a3: culonglong, a4: clonglong): cint <cimport,nodecl> end
global function ImmIsUIMessageW(a1: HWND, a2: cuint, a3: culonglong, a4: clonglong): cint <cimport,nodecl> end
global function ImmGetVirtualKey(a1: HWND): cuint <cimport,nodecl> end
global function ImmRegisterWordA(a1: HKL, lpszReading: LPCSTR, a3: culong, lpszRegister: LPCSTR): cint <cimport,nodecl> end
global function ImmRegisterWordW(a1: HKL, lpszReading: LPCWSTR, a3: culong, lpszRegister: LPCWSTR): cint <cimport,nodecl> end
global function ImmUnregisterWordA(a1: HKL, lpszReading: LPCSTR, a3: culong, lpszUnregister: LPCSTR): cint <cimport,nodecl> end
global function ImmUnregisterWordW(a1: HKL, lpszReading: LPCWSTR, a3: culong, lpszUnregister: LPCWSTR): cint <cimport,nodecl> end
global function ImmGetRegisterWordStyleA(a1: HKL, nItem: cuint, a3: LPSTYLEBUFA): cuint <cimport,nodecl> end
global function ImmGetRegisterWordStyleW(a1: HKL, nItem: cuint, a3: LPSTYLEBUFW): cuint <cimport,nodecl> end
global function ImmEnumRegisterWordA(a1: HKL, a2: REGISTERWORDENUMPROCA, lpszReading: LPCSTR, a4: culong, lpszRegister: LPCSTR, a6: LPVOID): cuint <cimport,nodecl> end
global function ImmEnumRegisterWordW(a1: HKL, a2: REGISTERWORDENUMPROCW, lpszReading: LPCWSTR, a4: culong, lpszRegister: LPCWSTR, a6: LPVOID): cuint <cimport,nodecl> end
global function ImmDisableIME(a1: culong): cint <cimport,nodecl> end
global function ImmEnumInputContext(idThread: culong, lpfn: IMCENUMPROC, lParam: clonglong): cint <cimport,nodecl> end
global function ImmGetImeMenuItemsA(a1: HIMC, a2: culong, a3: culong, a4: LPIMEMENUITEMINFOA, a5: LPIMEMENUITEMINFOA, a6: culong): culong <cimport,nodecl> end
global function ImmGetImeMenuItemsW(a1: HIMC, a2: culong, a3: culong, a4: LPIMEMENUITEMINFOW, a5: LPIMEMENUITEMINFOW, a6: culong): culong <cimport,nodecl> end
global function ImmDisableTextFrameService(idThread: culong): cint <cimport,nodecl> end
