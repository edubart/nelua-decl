##[[
cinclude '<assert.h>'
cinclude '<ctype.h>'
cinclude '<errno.h>'
cinclude '<fenv.h>'
cinclude '<float.h>'
cinclude '<inttypes.h>'
cinclude '<limits.h>'
cinclude '<locale.h>'
cinclude '<math.h>'
cinclude '<setjmp.h>'
cinclude '<signal.h>'
cinclude '<stdalign.h>'
cinclude '<stdarg.h>'
cinclude '<stdbool.h>'
cinclude '<stddef.h>'
cinclude '<stdint.h>'
cinclude '<stdio.h>'
cinclude '<stdlib.h>'
cinclude '<stdnoreturn.h>'
cinclude '<string.h>'
cinclude '<time.h>'
cinclude '<uchar.h>'
cinclude '<wchar.h>'
cinclude '<wctype.h>'

-- cinclude '<complex.h>'
-- cinclude '<iso646.h>'
-- cinclude '<stdatomic.h>'
-- cinclude '<tgmath.h>'
-- cinclude '<threads.h>'
]]
global function __assert_fail(assertion: cstring, file: cstring, line: cuint, Function: cstring): void <cimport,nodecl> end
global function __assert_perror_fail(errnum: cint, file: cstring, line: cuint, Function: cstring): void <cimport,nodecl> end
global function __assert(assertion: cstring, file: cstring, line: cint): void <cimport,nodecl> end
global __fsid_t: type <cimport,nodecl> = @record{
  __val: [2]cint
}
global __timer_t: type = @pointer
global __caddr_t: type = @cstring
global _ISupper: cint <comptime> = 256
global _ISlower: cint <comptime> = 512
global _ISalpha: cint <comptime> = 1024
global _ISdigit: cint <comptime> = 2048
global _ISxdigit: cint <comptime> = 4096
global _ISspace: cint <comptime> = 8192
global _ISprint: cint <comptime> = 16384
global _ISgraph: cint <comptime> = 32768
global _ISblank: cint <comptime> = 1
global _IScntrl: cint <comptime> = 2
global _ISpunct: cint <comptime> = 4
global _ISalnum: cint <comptime> = 8
global function __ctype_b_loc(): **cushort <cimport,nodecl> end
global function __ctype_tolower_loc(): **int32 <cimport,nodecl> end
global function __ctype_toupper_loc(): **int32 <cimport,nodecl> end
global function isalnum(a1: cint): cint <cimport,nodecl> end
global function isalpha(a1: cint): cint <cimport,nodecl> end
global function iscntrl(a1: cint): cint <cimport,nodecl> end
global function isdigit(a1: cint): cint <cimport,nodecl> end
global function islower(a1: cint): cint <cimport,nodecl> end
global function isgraph(a1: cint): cint <cimport,nodecl> end
global function isprint(a1: cint): cint <cimport,nodecl> end
global function ispunct(a1: cint): cint <cimport,nodecl> end
global function isspace(a1: cint): cint <cimport,nodecl> end
global function isupper(a1: cint): cint <cimport,nodecl> end
global function isxdigit(a1: cint): cint <cimport,nodecl> end
global function tolower(c: cint): cint <cimport,nodecl> end
global function toupper(c: cint): cint <cimport,nodecl> end
global function isblank(a1: cint): cint <cimport,nodecl> end
global function __errno_location(): *cint <cimport,nodecl> end
global FE_INVALID: cint <comptime> = 1
global __FE_DENORM: cint <comptime> = 2
global FE_DIVBYZERO: cint <comptime> = 4
global FE_OVERFLOW: cint <comptime> = 8
global FE_UNDERFLOW: cint <comptime> = 16
global FE_INEXACT: cint <comptime> = 32
global FE_TONEAREST: cint <comptime> = 0
global FE_DOWNWARD: cint <comptime> = 1024
global FE_UPWARD: cint <comptime> = 2048
global FE_TOWARDZERO: cint <comptime> = 3072
global fenv_t: type <cimport,nodecl,cincomplete> = @record{
  __control_word: cushort,
  __glibc_reserved1: cushort,
  __status_word: cushort,
  __glibc_reserved2: cushort,
  __tags: cushort,
  __glibc_reserved3: cushort,
  __eip: cuint,
  __cs_selector: cushort,
  __opcode: cuint,
  __glibc_reserved4: cuint,
  __data_offset: cuint,
  __data_selector: cushort,
  __glibc_reserved5: cushort,
  __mxcsr: cuint
}
global femode_t: type <cimport,nodecl> = @record{
  __control_word: cushort,
  __glibc_reserved: cushort,
  __mxcsr: cuint
}
global function feclearexcept(excepts: cint): cint <cimport,nodecl> end
global function fegetexceptflag(flagp: *cushort, excepts: cint): cint <cimport,nodecl> end
global function feraiseexcept(excepts: cint): cint <cimport,nodecl> end
global function fesetexcept(excepts: cint): cint <cimport,nodecl> end
global function fesetexceptflag(flagp: *cushort, excepts: cint): cint <cimport,nodecl> end
global function fetestexcept(excepts: cint): cint <cimport,nodecl> end
global function fetestexceptflag(flagp: *cushort, excepts: cint): cint <cimport,nodecl> end
global function fegetround(): cint <cimport,nodecl> end
global function fesetround(rounding_direction: cint): cint <cimport,nodecl> end
global function fegetenv(envp: *fenv_t): cint <cimport,nodecl> end
global function feholdexcept(envp: *fenv_t): cint <cimport,nodecl> end
global function fesetenv(envp: *fenv_t): cint <cimport,nodecl> end
global function feupdateenv(envp: *fenv_t): cint <cimport,nodecl> end
global function fegetmode(modep: *femode_t): cint <cimport,nodecl> end
global function fesetmode(modep: *femode_t): cint <cimport,nodecl> end
global imaxdiv_t: type <cimport,nodecl> = @record{
  quot: clong,
  rem: clong
}
global function imaxabs(n: clong): clong <cimport,nodecl> end
global function imaxdiv(numer: clong, denom: clong): imaxdiv_t <cimport,nodecl> end
global function strtoimax(nptr: cstring, endptr: *cstring, base: cint): clong <cimport,nodecl> end
global function strtoumax(nptr: cstring, endptr: *cstring, base: cint): culong <cimport,nodecl> end
global function wcstoimax(nptr: *cint, endptr: **cint, base: cint): clong <cimport,nodecl> end
global function wcstoumax(nptr: *cint, endptr: **cint, base: cint): culong <cimport,nodecl> end
global lconv: type <cimport,nodecl,ctypedef> = @record{
  decimal_point: cstring,
  thousands_sep: cstring,
  grouping: cstring,
  int_curr_symbol: cstring,
  currency_symbol: cstring,
  mon_decimal_point: cstring,
  mon_thousands_sep: cstring,
  mon_grouping: cstring,
  positive_sign: cstring,
  negative_sign: cstring,
  int_frac_digits: cchar,
  frac_digits: cchar,
  p_cs_precedes: cchar,
  p_sep_by_space: cchar,
  n_cs_precedes: cchar,
  n_sep_by_space: cchar,
  p_sign_posn: cchar,
  n_sign_posn: cchar,
  int_p_cs_precedes: cchar,
  int_p_sep_by_space: cchar,
  int_n_cs_precedes: cchar,
  int_n_sep_by_space: cchar,
  int_p_sign_posn: cchar,
  int_n_sign_posn: cchar
}
global function setlocale(category: cint, locale: cstring): cstring <cimport,nodecl> end
global function localeconv(): *lconv <cimport,nodecl> end
global FP_INT_UPWARD: cint <comptime> = 0
global FP_INT_DOWNWARD: cint <comptime> = 1
global FP_INT_TOWARDZERO: cint <comptime> = 2
global FP_INT_TONEARESTFROMZERO: cint <comptime> = 3
global FP_INT_TONEAREST: cint <comptime> = 4
global function __fpclassify(value: float64): cint <cimport,nodecl> end
global function __signbit(value: float64): cint <cimport,nodecl> end
global function __isinf(value: float64): cint <cimport,nodecl> end
global function __finite(value: float64): cint <cimport,nodecl> end
global function __isnan(value: float64): cint <cimport,nodecl> end
global function __iseqsig(x: float64, y: float64): cint <cimport,nodecl> end
global function __issignaling(value: float64): cint <cimport,nodecl> end
global function acos(x: float64): float64 <cimport,nodecl> end
global function __acos(x: float64): float64 <cimport,nodecl> end
global function asin(x: float64): float64 <cimport,nodecl> end
global function __asin(x: float64): float64 <cimport,nodecl> end
global function atan(x: float64): float64 <cimport,nodecl> end
global function __atan(x: float64): float64 <cimport,nodecl> end
global function atan2(y: float64, x: float64): float64 <cimport,nodecl> end
global function __atan2(y: float64, x: float64): float64 <cimport,nodecl> end
global function cos(x: float64): float64 <cimport,nodecl> end
global function __cos(x: float64): float64 <cimport,nodecl> end
global function sin(x: float64): float64 <cimport,nodecl> end
global function __sin(x: float64): float64 <cimport,nodecl> end
global function tan(x: float64): float64 <cimport,nodecl> end
global function __tan(x: float64): float64 <cimport,nodecl> end
global function cosh(x: float64): float64 <cimport,nodecl> end
global function __cosh(x: float64): float64 <cimport,nodecl> end
global function sinh(x: float64): float64 <cimport,nodecl> end
global function __sinh(x: float64): float64 <cimport,nodecl> end
global function tanh(x: float64): float64 <cimport,nodecl> end
global function __tanh(x: float64): float64 <cimport,nodecl> end
global function acosh(x: float64): float64 <cimport,nodecl> end
global function __acosh(x: float64): float64 <cimport,nodecl> end
global function asinh(x: float64): float64 <cimport,nodecl> end
global function __asinh(x: float64): float64 <cimport,nodecl> end
global function atanh(x: float64): float64 <cimport,nodecl> end
global function __atanh(x: float64): float64 <cimport,nodecl> end
global function exp(x: float64): float64 <cimport,nodecl> end
global function __exp(x: float64): float64 <cimport,nodecl> end
global function frexp(x: float64, exponent: *cint): float64 <cimport,nodecl> end
global function __frexp(x: float64, exponent: *cint): float64 <cimport,nodecl> end
global function ldexp(x: float64, exponent: cint): float64 <cimport,nodecl> end
global function __ldexp(x: float64, exponent: cint): float64 <cimport,nodecl> end
global function log(x: float64): float64 <cimport,nodecl> end
global function __log(x: float64): float64 <cimport,nodecl> end
global function log10(x: float64): float64 <cimport,nodecl> end
global function __log10(x: float64): float64 <cimport,nodecl> end
global function modf(x: float64, iptr: *float64): float64 <cimport,nodecl> end
global function __modf(x: float64, iptr: *float64): float64 <cimport,nodecl> end
global function exp10(x: float64): float64 <cimport,nodecl> end
global function __exp10(x: float64): float64 <cimport,nodecl> end
global function expm1(x: float64): float64 <cimport,nodecl> end
global function __expm1(x: float64): float64 <cimport,nodecl> end
global function log1p(x: float64): float64 <cimport,nodecl> end
global function __log1p(x: float64): float64 <cimport,nodecl> end
global function logb(x: float64): float64 <cimport,nodecl> end
global function __logb(x: float64): float64 <cimport,nodecl> end
global function exp2(x: float64): float64 <cimport,nodecl> end
global function __exp2(x: float64): float64 <cimport,nodecl> end
global function log2(x: float64): float64 <cimport,nodecl> end
global function __log2(x: float64): float64 <cimport,nodecl> end
global function pow(x: float64, y: float64): float64 <cimport,nodecl> end
global function __pow(x: float64, y: float64): float64 <cimport,nodecl> end
global function sqrt(x: float64): float64 <cimport,nodecl> end
global function __sqrt(x: float64): float64 <cimport,nodecl> end
global function hypot(x: float64, y: float64): float64 <cimport,nodecl> end
global function __hypot(x: float64, y: float64): float64 <cimport,nodecl> end
global function cbrt(x: float64): float64 <cimport,nodecl> end
global function __cbrt(x: float64): float64 <cimport,nodecl> end
global function ceil(x: float64): float64 <cimport,nodecl> end
global function __ceil(x: float64): float64 <cimport,nodecl> end
global function fabs(x: float64): float64 <cimport,nodecl> end
global function __fabs(x: float64): float64 <cimport,nodecl> end
global function floor(x: float64): float64 <cimport,nodecl> end
global function __floor(x: float64): float64 <cimport,nodecl> end
global function fmod(x: float64, y: float64): float64 <cimport,nodecl> end
global function __fmod(x: float64, y: float64): float64 <cimport,nodecl> end
global function copysign(x: float64, y: float64): float64 <cimport,nodecl> end
global function __copysign(x: float64, y: float64): float64 <cimport,nodecl> end
global function nan(tagb: cstring): float64 <cimport,nodecl> end
global function __nan(tagb: cstring): float64 <cimport,nodecl> end
global function erf(a1: float64): float64 <cimport,nodecl> end
global function __erf(a1: float64): float64 <cimport,nodecl> end
global function erfc(a1: float64): float64 <cimport,nodecl> end
global function __erfc(a1: float64): float64 <cimport,nodecl> end
global function lgamma(a1: float64): float64 <cimport,nodecl> end
global function __lgamma(a1: float64): float64 <cimport,nodecl> end
global function tgamma(a1: float64): float64 <cimport,nodecl> end
global function __tgamma(a1: float64): float64 <cimport,nodecl> end
global function rint(x: float64): float64 <cimport,nodecl> end
global function __rint(x: float64): float64 <cimport,nodecl> end
global function nextafter(x: float64, y: float64): float64 <cimport,nodecl> end
global function __nextafter(x: float64, y: float64): float64 <cimport,nodecl> end
global function nexttoward(x: float64, y: clongdouble): float64 <cimport,nodecl> end
global function __nexttoward(x: float64, y: clongdouble): float64 <cimport,nodecl> end
global function nextdown(x: float64): float64 <cimport,nodecl> end
global function __nextdown(x: float64): float64 <cimport,nodecl> end
global function nextup(x: float64): float64 <cimport,nodecl> end
global function __nextup(x: float64): float64 <cimport,nodecl> end
global function remainder(x: float64, y: float64): float64 <cimport,nodecl> end
global function __remainder(x: float64, y: float64): float64 <cimport,nodecl> end
global function scalbn(x: float64, n: cint): float64 <cimport,nodecl> end
global function __scalbn(x: float64, n: cint): float64 <cimport,nodecl> end
global function ilogb(x: float64): cint <cimport,nodecl> end
global function __ilogb(x: float64): cint <cimport,nodecl> end
global function llogb(x: float64): clong <cimport,nodecl> end
global function __llogb(x: float64): clong <cimport,nodecl> end
global function scalbln(x: float64, n: clong): float64 <cimport,nodecl> end
global function __scalbln(x: float64, n: clong): float64 <cimport,nodecl> end
global function nearbyint(x: float64): float64 <cimport,nodecl> end
global function __nearbyint(x: float64): float64 <cimport,nodecl> end
global function round(x: float64): float64 <cimport,nodecl> end
global function __round(x: float64): float64 <cimport,nodecl> end
global function trunc(x: float64): float64 <cimport,nodecl> end
global function __trunc(x: float64): float64 <cimport,nodecl> end
global function remquo(x: float64, y: float64, quo: *cint): float64 <cimport,nodecl> end
global function __remquo(x: float64, y: float64, quo: *cint): float64 <cimport,nodecl> end
global function lrint(x: float64): clong <cimport,nodecl> end
global function __lrint(x: float64): clong <cimport,nodecl> end
global function llrint(x: float64): clonglong <cimport,nodecl> end
global function __llrint(x: float64): clonglong <cimport,nodecl> end
global function lround(x: float64): clong <cimport,nodecl> end
global function __lround(x: float64): clong <cimport,nodecl> end
global function llround(x: float64): clonglong <cimport,nodecl> end
global function __llround(x: float64): clonglong <cimport,nodecl> end
global function fdim(x: float64, y: float64): float64 <cimport,nodecl> end
global function __fdim(x: float64, y: float64): float64 <cimport,nodecl> end
global function fmax(x: float64, y: float64): float64 <cimport,nodecl> end
global function __fmax(x: float64, y: float64): float64 <cimport,nodecl> end
global function fmin(x: float64, y: float64): float64 <cimport,nodecl> end
global function __fmin(x: float64, y: float64): float64 <cimport,nodecl> end
global function fma(x: float64, y: float64, z: float64): float64 <cimport,nodecl> end
global function __fma(x: float64, y: float64, z: float64): float64 <cimport,nodecl> end
global function roundeven(x: float64): float64 <cimport,nodecl> end
global function __roundeven(x: float64): float64 <cimport,nodecl> end
global function fromfp(x: float64, round: cint, width: cuint): clong <cimport,nodecl> end
global function __fromfp(x: float64, round: cint, width: cuint): clong <cimport,nodecl> end
global function ufromfp(x: float64, round: cint, width: cuint): culong <cimport,nodecl> end
global function __ufromfp(x: float64, round: cint, width: cuint): culong <cimport,nodecl> end
global function fromfpx(x: float64, round: cint, width: cuint): clong <cimport,nodecl> end
global function __fromfpx(x: float64, round: cint, width: cuint): clong <cimport,nodecl> end
global function ufromfpx(x: float64, round: cint, width: cuint): culong <cimport,nodecl> end
global function __ufromfpx(x: float64, round: cint, width: cuint): culong <cimport,nodecl> end
global function canonicalize(cx: *float64, x: *float64): cint <cimport,nodecl> end
global function fmaximum(x: float64, y: float64): float64 <cimport,nodecl> end
global function __fmaximum(x: float64, y: float64): float64 <cimport,nodecl> end
global function fminimum(x: float64, y: float64): float64 <cimport,nodecl> end
global function __fminimum(x: float64, y: float64): float64 <cimport,nodecl> end
global function fmaximum_num(x: float64, y: float64): float64 <cimport,nodecl> end
global function __fmaximum_num(x: float64, y: float64): float64 <cimport,nodecl> end
global function fminimum_num(x: float64, y: float64): float64 <cimport,nodecl> end
global function __fminimum_num(x: float64, y: float64): float64 <cimport,nodecl> end
global function fmaximum_mag(x: float64, y: float64): float64 <cimport,nodecl> end
global function __fmaximum_mag(x: float64, y: float64): float64 <cimport,nodecl> end
global function fminimum_mag(x: float64, y: float64): float64 <cimport,nodecl> end
global function __fminimum_mag(x: float64, y: float64): float64 <cimport,nodecl> end
global function fmaximum_mag_num(x: float64, y: float64): float64 <cimport,nodecl> end
global function __fmaximum_mag_num(x: float64, y: float64): float64 <cimport,nodecl> end
global function fminimum_mag_num(x: float64, y: float64): float64 <cimport,nodecl> end
global function __fminimum_mag_num(x: float64, y: float64): float64 <cimport,nodecl> end
global function __fpclassifyf(value: float32): cint <cimport,nodecl> end
global function __signbitf(value: float32): cint <cimport,nodecl> end
global function __isinff(value: float32): cint <cimport,nodecl> end
global function __finitef(value: float32): cint <cimport,nodecl> end
global function __isnanf(value: float32): cint <cimport,nodecl> end
global function __iseqsigf(x: float32, y: float32): cint <cimport,nodecl> end
global function __issignalingf(value: float32): cint <cimport,nodecl> end
global function acosf(x: float32): float32 <cimport,nodecl> end
global function __acosf(x: float32): float32 <cimport,nodecl> end
global function asinf(x: float32): float32 <cimport,nodecl> end
global function __asinf(x: float32): float32 <cimport,nodecl> end
global function atanf(x: float32): float32 <cimport,nodecl> end
global function __atanf(x: float32): float32 <cimport,nodecl> end
global function atan2f(y: float32, x: float32): float32 <cimport,nodecl> end
global function __atan2f(y: float32, x: float32): float32 <cimport,nodecl> end
global function cosf(x: float32): float32 <cimport,nodecl> end
global function __cosf(x: float32): float32 <cimport,nodecl> end
global function sinf(x: float32): float32 <cimport,nodecl> end
global function __sinf(x: float32): float32 <cimport,nodecl> end
global function tanf(x: float32): float32 <cimport,nodecl> end
global function __tanf(x: float32): float32 <cimport,nodecl> end
global function coshf(x: float32): float32 <cimport,nodecl> end
global function __coshf(x: float32): float32 <cimport,nodecl> end
global function sinhf(x: float32): float32 <cimport,nodecl> end
global function __sinhf(x: float32): float32 <cimport,nodecl> end
global function tanhf(x: float32): float32 <cimport,nodecl> end
global function __tanhf(x: float32): float32 <cimport,nodecl> end
global function acoshf(x: float32): float32 <cimport,nodecl> end
global function __acoshf(x: float32): float32 <cimport,nodecl> end
global function asinhf(x: float32): float32 <cimport,nodecl> end
global function __asinhf(x: float32): float32 <cimport,nodecl> end
global function atanhf(x: float32): float32 <cimport,nodecl> end
global function __atanhf(x: float32): float32 <cimport,nodecl> end
global function expf(x: float32): float32 <cimport,nodecl> end
global function __expf(x: float32): float32 <cimport,nodecl> end
global function frexpf(x: float32, exponent: *cint): float32 <cimport,nodecl> end
global function __frexpf(x: float32, exponent: *cint): float32 <cimport,nodecl> end
global function ldexpf(x: float32, exponent: cint): float32 <cimport,nodecl> end
global function __ldexpf(x: float32, exponent: cint): float32 <cimport,nodecl> end
global function logf(x: float32): float32 <cimport,nodecl> end
global function __logf(x: float32): float32 <cimport,nodecl> end
global function log10f(x: float32): float32 <cimport,nodecl> end
global function __log10f(x: float32): float32 <cimport,nodecl> end
global function modff(x: float32, iptr: *float32): float32 <cimport,nodecl> end
global function __modff(x: float32, iptr: *float32): float32 <cimport,nodecl> end
global function exp10f(x: float32): float32 <cimport,nodecl> end
global function __exp10f(x: float32): float32 <cimport,nodecl> end
global function expm1f(x: float32): float32 <cimport,nodecl> end
global function __expm1f(x: float32): float32 <cimport,nodecl> end
global function log1pf(x: float32): float32 <cimport,nodecl> end
global function __log1pf(x: float32): float32 <cimport,nodecl> end
global function logbf(x: float32): float32 <cimport,nodecl> end
global function __logbf(x: float32): float32 <cimport,nodecl> end
global function exp2f(x: float32): float32 <cimport,nodecl> end
global function __exp2f(x: float32): float32 <cimport,nodecl> end
global function log2f(x: float32): float32 <cimport,nodecl> end
global function __log2f(x: float32): float32 <cimport,nodecl> end
global function powf(x: float32, y: float32): float32 <cimport,nodecl> end
global function __powf(x: float32, y: float32): float32 <cimport,nodecl> end
global function sqrtf(x: float32): float32 <cimport,nodecl> end
global function __sqrtf(x: float32): float32 <cimport,nodecl> end
global function hypotf(x: float32, y: float32): float32 <cimport,nodecl> end
global function __hypotf(x: float32, y: float32): float32 <cimport,nodecl> end
global function cbrtf(x: float32): float32 <cimport,nodecl> end
global function __cbrtf(x: float32): float32 <cimport,nodecl> end
global function ceilf(x: float32): float32 <cimport,nodecl> end
global function __ceilf(x: float32): float32 <cimport,nodecl> end
global function fabsf(x: float32): float32 <cimport,nodecl> end
global function __fabsf(x: float32): float32 <cimport,nodecl> end
global function floorf(x: float32): float32 <cimport,nodecl> end
global function __floorf(x: float32): float32 <cimport,nodecl> end
global function fmodf(x: float32, y: float32): float32 <cimport,nodecl> end
global function __fmodf(x: float32, y: float32): float32 <cimport,nodecl> end
global function copysignf(x: float32, y: float32): float32 <cimport,nodecl> end
global function __copysignf(x: float32, y: float32): float32 <cimport,nodecl> end
global function nanf(tagb: cstring): float32 <cimport,nodecl> end
global function __nanf(tagb: cstring): float32 <cimport,nodecl> end
global function erff(a1: float32): float32 <cimport,nodecl> end
global function __erff(a1: float32): float32 <cimport,nodecl> end
global function erfcf(a1: float32): float32 <cimport,nodecl> end
global function __erfcf(a1: float32): float32 <cimport,nodecl> end
global function lgammaf(a1: float32): float32 <cimport,nodecl> end
global function __lgammaf(a1: float32): float32 <cimport,nodecl> end
global function tgammaf(a1: float32): float32 <cimport,nodecl> end
global function __tgammaf(a1: float32): float32 <cimport,nodecl> end
global function rintf(x: float32): float32 <cimport,nodecl> end
global function __rintf(x: float32): float32 <cimport,nodecl> end
global function nextafterf(x: float32, y: float32): float32 <cimport,nodecl> end
global function __nextafterf(x: float32, y: float32): float32 <cimport,nodecl> end
global function nexttowardf(x: float32, y: clongdouble): float32 <cimport,nodecl> end
global function __nexttowardf(x: float32, y: clongdouble): float32 <cimport,nodecl> end
global function nextdownf(x: float32): float32 <cimport,nodecl> end
global function __nextdownf(x: float32): float32 <cimport,nodecl> end
global function nextupf(x: float32): float32 <cimport,nodecl> end
global function __nextupf(x: float32): float32 <cimport,nodecl> end
global function remainderf(x: float32, y: float32): float32 <cimport,nodecl> end
global function __remainderf(x: float32, y: float32): float32 <cimport,nodecl> end
global function scalbnf(x: float32, n: cint): float32 <cimport,nodecl> end
global function __scalbnf(x: float32, n: cint): float32 <cimport,nodecl> end
global function ilogbf(x: float32): cint <cimport,nodecl> end
global function __ilogbf(x: float32): cint <cimport,nodecl> end
global function llogbf(x: float32): clong <cimport,nodecl> end
global function __llogbf(x: float32): clong <cimport,nodecl> end
global function scalblnf(x: float32, n: clong): float32 <cimport,nodecl> end
global function __scalblnf(x: float32, n: clong): float32 <cimport,nodecl> end
global function nearbyintf(x: float32): float32 <cimport,nodecl> end
global function __nearbyintf(x: float32): float32 <cimport,nodecl> end
global function roundf(x: float32): float32 <cimport,nodecl> end
global function __roundf(x: float32): float32 <cimport,nodecl> end
global function truncf(x: float32): float32 <cimport,nodecl> end
global function __truncf(x: float32): float32 <cimport,nodecl> end
global function remquof(x: float32, y: float32, quo: *cint): float32 <cimport,nodecl> end
global function __remquof(x: float32, y: float32, quo: *cint): float32 <cimport,nodecl> end
global function lrintf(x: float32): clong <cimport,nodecl> end
global function __lrintf(x: float32): clong <cimport,nodecl> end
global function llrintf(x: float32): clonglong <cimport,nodecl> end
global function __llrintf(x: float32): clonglong <cimport,nodecl> end
global function lroundf(x: float32): clong <cimport,nodecl> end
global function __lroundf(x: float32): clong <cimport,nodecl> end
global function llroundf(x: float32): clonglong <cimport,nodecl> end
global function __llroundf(x: float32): clonglong <cimport,nodecl> end
global function fdimf(x: float32, y: float32): float32 <cimport,nodecl> end
global function __fdimf(x: float32, y: float32): float32 <cimport,nodecl> end
global function fmaxf(x: float32, y: float32): float32 <cimport,nodecl> end
global function __fmaxf(x: float32, y: float32): float32 <cimport,nodecl> end
global function fminf(x: float32, y: float32): float32 <cimport,nodecl> end
global function __fminf(x: float32, y: float32): float32 <cimport,nodecl> end
global function fmaf(x: float32, y: float32, z: float32): float32 <cimport,nodecl> end
global function __fmaf(x: float32, y: float32, z: float32): float32 <cimport,nodecl> end
global function roundevenf(x: float32): float32 <cimport,nodecl> end
global function __roundevenf(x: float32): float32 <cimport,nodecl> end
global function fromfpf(x: float32, round: cint, width: cuint): clong <cimport,nodecl> end
global function __fromfpf(x: float32, round: cint, width: cuint): clong <cimport,nodecl> end
global function ufromfpf(x: float32, round: cint, width: cuint): culong <cimport,nodecl> end
global function __ufromfpf(x: float32, round: cint, width: cuint): culong <cimport,nodecl> end
global function fromfpxf(x: float32, round: cint, width: cuint): clong <cimport,nodecl> end
global function __fromfpxf(x: float32, round: cint, width: cuint): clong <cimport,nodecl> end
global function ufromfpxf(x: float32, round: cint, width: cuint): culong <cimport,nodecl> end
global function __ufromfpxf(x: float32, round: cint, width: cuint): culong <cimport,nodecl> end
global function canonicalizef(cx: *float32, x: *float32): cint <cimport,nodecl> end
global function fmaximumf(x: float32, y: float32): float32 <cimport,nodecl> end
global function __fmaximumf(x: float32, y: float32): float32 <cimport,nodecl> end
global function fminimumf(x: float32, y: float32): float32 <cimport,nodecl> end
global function __fminimumf(x: float32, y: float32): float32 <cimport,nodecl> end
global function fmaximum_numf(x: float32, y: float32): float32 <cimport,nodecl> end
global function __fmaximum_numf(x: float32, y: float32): float32 <cimport,nodecl> end
global function fminimum_numf(x: float32, y: float32): float32 <cimport,nodecl> end
global function __fminimum_numf(x: float32, y: float32): float32 <cimport,nodecl> end
global function fmaximum_magf(x: float32, y: float32): float32 <cimport,nodecl> end
global function __fmaximum_magf(x: float32, y: float32): float32 <cimport,nodecl> end
global function fminimum_magf(x: float32, y: float32): float32 <cimport,nodecl> end
global function __fminimum_magf(x: float32, y: float32): float32 <cimport,nodecl> end
global function fmaximum_mag_numf(x: float32, y: float32): float32 <cimport,nodecl> end
global function __fmaximum_mag_numf(x: float32, y: float32): float32 <cimport,nodecl> end
global function fminimum_mag_numf(x: float32, y: float32): float32 <cimport,nodecl> end
global function __fminimum_mag_numf(x: float32, y: float32): float32 <cimport,nodecl> end
global function __fpclassifyl(value: clongdouble): cint <cimport,nodecl> end
global function __signbitl(value: clongdouble): cint <cimport,nodecl> end
global function __isinfl(value: clongdouble): cint <cimport,nodecl> end
global function __finitel(value: clongdouble): cint <cimport,nodecl> end
global function __isnanl(value: clongdouble): cint <cimport,nodecl> end
global function __iseqsigl(x: clongdouble, y: clongdouble): cint <cimport,nodecl> end
global function __issignalingl(value: clongdouble): cint <cimport,nodecl> end
global function acosl(x: clongdouble): clongdouble <cimport,nodecl> end
global function __acosl(x: clongdouble): clongdouble <cimport,nodecl> end
global function asinl(x: clongdouble): clongdouble <cimport,nodecl> end
global function __asinl(x: clongdouble): clongdouble <cimport,nodecl> end
global function atanl(x: clongdouble): clongdouble <cimport,nodecl> end
global function __atanl(x: clongdouble): clongdouble <cimport,nodecl> end
global function atan2l(y: clongdouble, x: clongdouble): clongdouble <cimport,nodecl> end
global function __atan2l(y: clongdouble, x: clongdouble): clongdouble <cimport,nodecl> end
global function cosl(x: clongdouble): clongdouble <cimport,nodecl> end
global function __cosl(x: clongdouble): clongdouble <cimport,nodecl> end
global function sinl(x: clongdouble): clongdouble <cimport,nodecl> end
global function __sinl(x: clongdouble): clongdouble <cimport,nodecl> end
global function tanl(x: clongdouble): clongdouble <cimport,nodecl> end
global function __tanl(x: clongdouble): clongdouble <cimport,nodecl> end
global function coshl(x: clongdouble): clongdouble <cimport,nodecl> end
global function __coshl(x: clongdouble): clongdouble <cimport,nodecl> end
global function sinhl(x: clongdouble): clongdouble <cimport,nodecl> end
global function __sinhl(x: clongdouble): clongdouble <cimport,nodecl> end
global function tanhl(x: clongdouble): clongdouble <cimport,nodecl> end
global function __tanhl(x: clongdouble): clongdouble <cimport,nodecl> end
global function acoshl(x: clongdouble): clongdouble <cimport,nodecl> end
global function __acoshl(x: clongdouble): clongdouble <cimport,nodecl> end
global function asinhl(x: clongdouble): clongdouble <cimport,nodecl> end
global function __asinhl(x: clongdouble): clongdouble <cimport,nodecl> end
global function atanhl(x: clongdouble): clongdouble <cimport,nodecl> end
global function __atanhl(x: clongdouble): clongdouble <cimport,nodecl> end
global function expl(x: clongdouble): clongdouble <cimport,nodecl> end
global function __expl(x: clongdouble): clongdouble <cimport,nodecl> end
global function frexpl(x: clongdouble, exponent: *cint): clongdouble <cimport,nodecl> end
global function __frexpl(x: clongdouble, exponent: *cint): clongdouble <cimport,nodecl> end
global function ldexpl(x: clongdouble, exponent: cint): clongdouble <cimport,nodecl> end
global function __ldexpl(x: clongdouble, exponent: cint): clongdouble <cimport,nodecl> end
global function logl(x: clongdouble): clongdouble <cimport,nodecl> end
global function __logl(x: clongdouble): clongdouble <cimport,nodecl> end
global function log10l(x: clongdouble): clongdouble <cimport,nodecl> end
global function __log10l(x: clongdouble): clongdouble <cimport,nodecl> end
global function modfl(x: clongdouble, iptr: *clongdouble): clongdouble <cimport,nodecl> end
global function __modfl(x: clongdouble, iptr: *clongdouble): clongdouble <cimport,nodecl> end
global function exp10l(x: clongdouble): clongdouble <cimport,nodecl> end
global function __exp10l(x: clongdouble): clongdouble <cimport,nodecl> end
global function expm1l(x: clongdouble): clongdouble <cimport,nodecl> end
global function __expm1l(x: clongdouble): clongdouble <cimport,nodecl> end
global function log1pl(x: clongdouble): clongdouble <cimport,nodecl> end
global function __log1pl(x: clongdouble): clongdouble <cimport,nodecl> end
global function logbl(x: clongdouble): clongdouble <cimport,nodecl> end
global function __logbl(x: clongdouble): clongdouble <cimport,nodecl> end
global function exp2l(x: clongdouble): clongdouble <cimport,nodecl> end
global function __exp2l(x: clongdouble): clongdouble <cimport,nodecl> end
global function log2l(x: clongdouble): clongdouble <cimport,nodecl> end
global function __log2l(x: clongdouble): clongdouble <cimport,nodecl> end
global function powl(x: clongdouble, y: clongdouble): clongdouble <cimport,nodecl> end
global function __powl(x: clongdouble, y: clongdouble): clongdouble <cimport,nodecl> end
global function sqrtl(x: clongdouble): clongdouble <cimport,nodecl> end
global function __sqrtl(x: clongdouble): clongdouble <cimport,nodecl> end
global function hypotl(x: clongdouble, y: clongdouble): clongdouble <cimport,nodecl> end
global function __hypotl(x: clongdouble, y: clongdouble): clongdouble <cimport,nodecl> end
global function cbrtl(x: clongdouble): clongdouble <cimport,nodecl> end
global function __cbrtl(x: clongdouble): clongdouble <cimport,nodecl> end
global function ceill(x: clongdouble): clongdouble <cimport,nodecl> end
global function __ceill(x: clongdouble): clongdouble <cimport,nodecl> end
global function fabsl(x: clongdouble): clongdouble <cimport,nodecl> end
global function __fabsl(x: clongdouble): clongdouble <cimport,nodecl> end
global function floorl(x: clongdouble): clongdouble <cimport,nodecl> end
global function __floorl(x: clongdouble): clongdouble <cimport,nodecl> end
global function fmodl(x: clongdouble, y: clongdouble): clongdouble <cimport,nodecl> end
global function __fmodl(x: clongdouble, y: clongdouble): clongdouble <cimport,nodecl> end
global function copysignl(x: clongdouble, y: clongdouble): clongdouble <cimport,nodecl> end
global function __copysignl(x: clongdouble, y: clongdouble): clongdouble <cimport,nodecl> end
global function nanl(tagb: cstring): clongdouble <cimport,nodecl> end
global function __nanl(tagb: cstring): clongdouble <cimport,nodecl> end
global function erfl(a1: clongdouble): clongdouble <cimport,nodecl> end
global function __erfl(a1: clongdouble): clongdouble <cimport,nodecl> end
global function erfcl(a1: clongdouble): clongdouble <cimport,nodecl> end
global function __erfcl(a1: clongdouble): clongdouble <cimport,nodecl> end
global function lgammal(a1: clongdouble): clongdouble <cimport,nodecl> end
global function __lgammal(a1: clongdouble): clongdouble <cimport,nodecl> end
global function tgammal(a1: clongdouble): clongdouble <cimport,nodecl> end
global function __tgammal(a1: clongdouble): clongdouble <cimport,nodecl> end
global function rintl(x: clongdouble): clongdouble <cimport,nodecl> end
global function __rintl(x: clongdouble): clongdouble <cimport,nodecl> end
global function nextafterl(x: clongdouble, y: clongdouble): clongdouble <cimport,nodecl> end
global function __nextafterl(x: clongdouble, y: clongdouble): clongdouble <cimport,nodecl> end
global function nexttowardl(x: clongdouble, y: clongdouble): clongdouble <cimport,nodecl> end
global function __nexttowardl(x: clongdouble, y: clongdouble): clongdouble <cimport,nodecl> end
global function nextdownl(x: clongdouble): clongdouble <cimport,nodecl> end
global function __nextdownl(x: clongdouble): clongdouble <cimport,nodecl> end
global function nextupl(x: clongdouble): clongdouble <cimport,nodecl> end
global function __nextupl(x: clongdouble): clongdouble <cimport,nodecl> end
global function remainderl(x: clongdouble, y: clongdouble): clongdouble <cimport,nodecl> end
global function __remainderl(x: clongdouble, y: clongdouble): clongdouble <cimport,nodecl> end
global function scalbnl(x: clongdouble, n: cint): clongdouble <cimport,nodecl> end
global function __scalbnl(x: clongdouble, n: cint): clongdouble <cimport,nodecl> end
global function ilogbl(x: clongdouble): cint <cimport,nodecl> end
global function __ilogbl(x: clongdouble): cint <cimport,nodecl> end
global function llogbl(x: clongdouble): clong <cimport,nodecl> end
global function __llogbl(x: clongdouble): clong <cimport,nodecl> end
global function scalblnl(x: clongdouble, n: clong): clongdouble <cimport,nodecl> end
global function __scalblnl(x: clongdouble, n: clong): clongdouble <cimport,nodecl> end
global function nearbyintl(x: clongdouble): clongdouble <cimport,nodecl> end
global function __nearbyintl(x: clongdouble): clongdouble <cimport,nodecl> end
global function roundl(x: clongdouble): clongdouble <cimport,nodecl> end
global function __roundl(x: clongdouble): clongdouble <cimport,nodecl> end
global function truncl(x: clongdouble): clongdouble <cimport,nodecl> end
global function __truncl(x: clongdouble): clongdouble <cimport,nodecl> end
global function remquol(x: clongdouble, y: clongdouble, quo: *cint): clongdouble <cimport,nodecl> end
global function __remquol(x: clongdouble, y: clongdouble, quo: *cint): clongdouble <cimport,nodecl> end
global function lrintl(x: clongdouble): clong <cimport,nodecl> end
global function __lrintl(x: clongdouble): clong <cimport,nodecl> end
global function llrintl(x: clongdouble): clonglong <cimport,nodecl> end
global function __llrintl(x: clongdouble): clonglong <cimport,nodecl> end
global function lroundl(x: clongdouble): clong <cimport,nodecl> end
global function __lroundl(x: clongdouble): clong <cimport,nodecl> end
global function llroundl(x: clongdouble): clonglong <cimport,nodecl> end
global function __llroundl(x: clongdouble): clonglong <cimport,nodecl> end
global function fdiml(x: clongdouble, y: clongdouble): clongdouble <cimport,nodecl> end
global function __fdiml(x: clongdouble, y: clongdouble): clongdouble <cimport,nodecl> end
global function fmaxl(x: clongdouble, y: clongdouble): clongdouble <cimport,nodecl> end
global function __fmaxl(x: clongdouble, y: clongdouble): clongdouble <cimport,nodecl> end
global function fminl(x: clongdouble, y: clongdouble): clongdouble <cimport,nodecl> end
global function __fminl(x: clongdouble, y: clongdouble): clongdouble <cimport,nodecl> end
global function fmal(x: clongdouble, y: clongdouble, z: clongdouble): clongdouble <cimport,nodecl> end
global function __fmal(x: clongdouble, y: clongdouble, z: clongdouble): clongdouble <cimport,nodecl> end
global function roundevenl(x: clongdouble): clongdouble <cimport,nodecl> end
global function __roundevenl(x: clongdouble): clongdouble <cimport,nodecl> end
global function fromfpl(x: clongdouble, round: cint, width: cuint): clong <cimport,nodecl> end
global function __fromfpl(x: clongdouble, round: cint, width: cuint): clong <cimport,nodecl> end
global function ufromfpl(x: clongdouble, round: cint, width: cuint): culong <cimport,nodecl> end
global function __ufromfpl(x: clongdouble, round: cint, width: cuint): culong <cimport,nodecl> end
global function fromfpxl(x: clongdouble, round: cint, width: cuint): clong <cimport,nodecl> end
global function __fromfpxl(x: clongdouble, round: cint, width: cuint): clong <cimport,nodecl> end
global function ufromfpxl(x: clongdouble, round: cint, width: cuint): culong <cimport,nodecl> end
global function __ufromfpxl(x: clongdouble, round: cint, width: cuint): culong <cimport,nodecl> end
global function canonicalizel(cx: *clongdouble, x: *clongdouble): cint <cimport,nodecl> end
global function fmaximuml(x: clongdouble, y: clongdouble): clongdouble <cimport,nodecl> end
global function __fmaximuml(x: clongdouble, y: clongdouble): clongdouble <cimport,nodecl> end
global function fminimuml(x: clongdouble, y: clongdouble): clongdouble <cimport,nodecl> end
global function __fminimuml(x: clongdouble, y: clongdouble): clongdouble <cimport,nodecl> end
global function fmaximum_numl(x: clongdouble, y: clongdouble): clongdouble <cimport,nodecl> end
global function __fmaximum_numl(x: clongdouble, y: clongdouble): clongdouble <cimport,nodecl> end
global function fminimum_numl(x: clongdouble, y: clongdouble): clongdouble <cimport,nodecl> end
global function __fminimum_numl(x: clongdouble, y: clongdouble): clongdouble <cimport,nodecl> end
global function fmaximum_magl(x: clongdouble, y: clongdouble): clongdouble <cimport,nodecl> end
global function __fmaximum_magl(x: clongdouble, y: clongdouble): clongdouble <cimport,nodecl> end
global function fminimum_magl(x: clongdouble, y: clongdouble): clongdouble <cimport,nodecl> end
global function __fminimum_magl(x: clongdouble, y: clongdouble): clongdouble <cimport,nodecl> end
global function fmaximum_mag_numl(x: clongdouble, y: clongdouble): clongdouble <cimport,nodecl> end
global function __fmaximum_mag_numl(x: clongdouble, y: clongdouble): clongdouble <cimport,nodecl> end
global function fminimum_mag_numl(x: clongdouble, y: clongdouble): clongdouble <cimport,nodecl> end
global function __fminimum_mag_numl(x: clongdouble, y: clongdouble): clongdouble <cimport,nodecl> end
global function __fpclassifyf128(value: float128): cint <cimport,nodecl> end
global function __signbitf128(value: float128): cint <cimport,nodecl> end
global function __isinff128(value: float128): cint <cimport,nodecl> end
global function __finitef128(value: float128): cint <cimport,nodecl> end
global function __isnanf128(value: float128): cint <cimport,nodecl> end
global function __iseqsigf128(x: float128, y: float128): cint <cimport,nodecl> end
global function __issignalingf128(value: float128): cint <cimport,nodecl> end
global function fadd(x: float64, y: float64): float32 <cimport,nodecl> end
global function fdiv(x: float64, y: float64): float32 <cimport,nodecl> end
global function ffma(x: float64, y: float64, z: float64): float32 <cimport,nodecl> end
global function fmul(x: float64, y: float64): float32 <cimport,nodecl> end
global function fsqrt(x: float64): float32 <cimport,nodecl> end
global function fsub(x: float64, y: float64): float32 <cimport,nodecl> end
global function faddl(x: clongdouble, y: clongdouble): float32 <cimport,nodecl> end
global function fdivl(x: clongdouble, y: clongdouble): float32 <cimport,nodecl> end
global function ffmal(x: clongdouble, y: clongdouble, z: clongdouble): float32 <cimport,nodecl> end
global function fmull(x: clongdouble, y: clongdouble): float32 <cimport,nodecl> end
global function fsqrtl(x: clongdouble): float32 <cimport,nodecl> end
global function fsubl(x: clongdouble, y: clongdouble): float32 <cimport,nodecl> end
global function daddl(x: clongdouble, y: clongdouble): float64 <cimport,nodecl> end
global function ddivl(x: clongdouble, y: clongdouble): float64 <cimport,nodecl> end
global function dfmal(x: clongdouble, y: clongdouble, z: clongdouble): float64 <cimport,nodecl> end
global function dmull(x: clongdouble, y: clongdouble): float64 <cimport,nodecl> end
global function dsqrtl(x: clongdouble): float64 <cimport,nodecl> end
global function dsubl(x: clongdouble, y: clongdouble): float64 <cimport,nodecl> end
global FP_NAN: cint <comptime> = 0
global FP_INFINITE: cint <comptime> = 1
global FP_ZERO: cint <comptime> = 2
global FP_SUBNORMAL: cint <comptime> = 3
global FP_NORMAL: cint <comptime> = 4
global function __iscanonicall(x: clongdouble): cint <cimport,nodecl> end
global __sigset_t: type <cimport,nodecl> = @record{
  __val: [16]culong
}
global __jmp_buf_tag: type <cimport,nodecl,ctypedef> = @record{
  __jmpbuf: [8]clong,
  __mask_was_saved: cint,
  __saved_mask: __sigset_t
}
global function setjmp(env: *__jmp_buf_tag): cint <cimport,nodecl> end
global function __sigsetjmp(env: *__jmp_buf_tag, savemask: cint): cint <cimport,nodecl> end
global function _setjmp(env: *__jmp_buf_tag): cint <cimport,nodecl> end
global function longjmp(env: *__jmp_buf_tag, val: cint): void <cimport,nodecl> end
global __sighandler_t: type <cimport,nodecl> = @function(cint): void
global function __sysv_signal(sig: cint, handler: __sighandler_t): __sighandler_t <cimport,nodecl> end
global function signal(sig: cint, handler: __sighandler_t): __sighandler_t <cimport,nodecl> end
global function raise(sig: cint): cint <cimport,nodecl> end
global function __libc_current_sigrtmin(): cint <cimport,nodecl> end
global function __libc_current_sigrtmax(): cint <cimport,nodecl> end
global max_align_t: type <cimport,nodecl,aligned(16)> = @record{
  __max_align_ll: clonglong,
  __max_align_ld: clongdouble
}
global __mbstate_t: type <cimport,nodecl> = @record{
  __count: cint,
  __value: union{
    __wch: cuint,
    __wchb: [4]cchar
  }
}
global _G_fpos_t: type <cimport,nodecl,ctypedef> = @record{
  __pos: clong,
  __state: __mbstate_t
}
global __fpos_t: type = @_G_fpos_t
global _G_fpos64_t: type <cimport,nodecl,ctypedef> = @record{
  __pos: clong,
  __state: __mbstate_t
}
global __fpos64_t: type = @_G_fpos64_t
global _IO_FILE: type <cimport,nodecl,forwarddecl,ctypedef> = @record{}
global __FILE: type = @_IO_FILE
global FILE: type = @_IO_FILE
global _IO_marker: type <cimport,nodecl,forwarddecl,ctypedef> = @record{}
global _IO_codecvt: type <cimport,nodecl,forwarddecl,ctypedef> = @record{}
global _IO_wide_data: type <cimport,nodecl,forwarddecl,ctypedef> = @record{}
_IO_FILE = @record{
  _flags: cint,
  _IO_read_ptr: cstring,
  _IO_read_end: cstring,
  _IO_read_base: cstring,
  _IO_write_base: cstring,
  _IO_write_ptr: cstring,
  _IO_write_end: cstring,
  _IO_buf_base: cstring,
  _IO_buf_end: cstring,
  _IO_save_base: cstring,
  _IO_backup_base: cstring,
  _IO_save_end: cstring,
  _markers: *_IO_marker,
  _chain: *_IO_FILE,
  _fileno: cint,
  _flags2: cint,
  _old_offset: clong,
  _cur_column: cushort,
  _vtable_offset: cschar,
  _shortbuf: [1]cchar,
  _lock: pointer,
  _offset: clong,
  _codecvt: *_IO_codecvt,
  _wide_data: *_IO_wide_data,
  _freeres_list: *_IO_FILE,
  _freeres_buf: pointer,
  __pad5: csize,
  _mode: cint,
  _unused2: [20]cchar
}
global fpos_t: type = @_G_fpos_t
global stdin: *FILE <cimport,nodecl>
global stdout: *FILE <cimport,nodecl>
global stderr: *FILE <cimport,nodecl>
global function remove(filename: cstring): cint <cimport,nodecl> end
global function rename(old: cstring, new: cstring): cint <cimport,nodecl> end
global function fclose(stream: *FILE): cint <cimport,nodecl> end
global function tmpfile(): *FILE <cimport,nodecl> end
global function tmpnam(a1: cstring): cstring <cimport,nodecl> end
global function fflush(stream: *FILE): cint <cimport,nodecl> end
global function fopen(filename: cstring, modes: cstring): *FILE <cimport,nodecl> end
global function freopen(filename: cstring, modes: cstring, stream: *FILE): *FILE <cimport,nodecl> end
global function setbuf(stream: *FILE, buf: cstring): void <cimport,nodecl> end
global function setvbuf(stream: *FILE, buf: cstring, modes: cint, n: csize): cint <cimport,nodecl> end
global function fprintf(stream: *FILE, format: cstring, ...: cvarargs): cint <cimport,nodecl> end
global function printf(format: cstring, ...: cvarargs): cint <cimport,nodecl> end
global function sprintf(s: cstring, format: cstring, ...: cvarargs): cint <cimport,nodecl> end
global function vfprintf(s: *FILE, format: cstring, arg: cvalist): cint <cimport,nodecl> end
global function vprintf(format: cstring, arg: cvalist): cint <cimport,nodecl> end
global function vsprintf(s: cstring, format: cstring, arg: cvalist): cint <cimport,nodecl> end
global function snprintf(s: cstring, maxlen: csize, format: cstring, ...: cvarargs): cint <cimport,nodecl> end
global function vsnprintf(s: cstring, maxlen: csize, format: cstring, arg: cvalist): cint <cimport,nodecl> end
global function fscanf(stream: *FILE, format: cstring, ...: cvarargs): cint <cimport,nodecl> end
global function scanf(format: cstring, ...: cvarargs): cint <cimport,nodecl> end
global function sscanf(s: cstring, format: cstring, ...: cvarargs): cint <cimport,nodecl> end
global function vfscanf(s: *FILE, format: cstring, arg: cvalist): cint <cimport,nodecl> end
global function vscanf(format: cstring, arg: cvalist): cint <cimport,nodecl> end
global function vsscanf(s: cstring, format: cstring, arg: cvalist): cint <cimport,nodecl> end
global function fgetc(stream: *FILE): cint <cimport,nodecl> end
global function getc(stream: *FILE): cint <cimport,nodecl> end
global function getchar(): cint <cimport,nodecl> end
global function fputc(c: cint, stream: *FILE): cint <cimport,nodecl> end
global function putc(c: cint, stream: *FILE): cint <cimport,nodecl> end
global function putchar(c: cint): cint <cimport,nodecl> end
global function fgets(s: cstring, n: cint, stream: *FILE): cstring <cimport,nodecl> end
global function fputs(s: cstring, stream: *FILE): cint <cimport,nodecl> end
global function puts(s: cstring): cint <cimport,nodecl> end
global function ungetc(c: cint, stream: *FILE): cint <cimport,nodecl> end
global function fread(ptr: pointer, size: csize, n: csize, stream: *FILE): csize <cimport,nodecl> end
global function fwrite(ptr: pointer, size: csize, n: csize, s: *FILE): csize <cimport,nodecl> end
global function fseek(stream: *FILE, off: clong, whence: cint): cint <cimport,nodecl> end
global function ftell(stream: *FILE): clong <cimport,nodecl> end
global function rewind(stream: *FILE): void <cimport,nodecl> end
global function fgetpos(stream: *FILE, pos: *fpos_t): cint <cimport,nodecl> end
global function fsetpos(stream: *FILE, pos: *fpos_t): cint <cimport,nodecl> end
global function clearerr(stream: *FILE): void <cimport,nodecl> end
global function feof(stream: *FILE): cint <cimport,nodecl> end
global function ferror(stream: *FILE): cint <cimport,nodecl> end
global function perror(s: cstring): void <cimport,nodecl> end
global function __uflow(a1: *FILE): cint <cimport,nodecl> end
global function __overflow(a1: *FILE, a2: cint): cint <cimport,nodecl> end
global div_t: type <cimport,nodecl> = @record{
  quot: cint,
  rem: cint
}
global ldiv_t: type <cimport,nodecl> = @record{
  quot: clong,
  rem: clong
}
global lldiv_t: type <cimport,nodecl> = @record{
  quot: clonglong,
  rem: clonglong
}
global function __ctype_get_mb_cur_max(): csize <cimport,nodecl> end
global function atof(nptr: cstring): float64 <cimport,nodecl> end
global function atoi(nptr: cstring): cint <cimport,nodecl> end
global function atol(nptr: cstring): clong <cimport,nodecl> end
global function atoll(nptr: cstring): clonglong <cimport,nodecl> end
global function strtod(nptr: cstring, endptr: *cstring): float64 <cimport,nodecl> end
global function strtof(nptr: cstring, endptr: *cstring): float32 <cimport,nodecl> end
global function strtold(nptr: cstring, endptr: *cstring): clongdouble <cimport,nodecl> end
global function strtol(nptr: cstring, endptr: *cstring, base: cint): clong <cimport,nodecl> end
global function strtoul(nptr: cstring, endptr: *cstring, base: cint): culong <cimport,nodecl> end
global function strtoll(nptr: cstring, endptr: *cstring, base: cint): clonglong <cimport,nodecl> end
global function strtoull(nptr: cstring, endptr: *cstring, base: cint): culonglong <cimport,nodecl> end
global function strfromd(dest: cstring, size: csize, format: cstring, f: float64): cint <cimport,nodecl> end
global function strfromf(dest: cstring, size: csize, format: cstring, f: float32): cint <cimport,nodecl> end
global function strfroml(dest: cstring, size: csize, format: cstring, f: clongdouble): cint <cimport,nodecl> end
global function rand(): cint <cimport,nodecl> end
global function srand(seed: cuint): void <cimport,nodecl> end
global function malloc(size: csize): pointer <cimport,nodecl> end
global function calloc(nmemb: csize, size: csize): pointer <cimport,nodecl> end
global function realloc(ptr: pointer, size: csize): pointer <cimport,nodecl> end
global function free(ptr: pointer): void <cimport,nodecl> end
global function aligned_alloc(alignment: csize, size: csize): pointer <cimport,nodecl> end
global function abort(): void <cimport,nodecl> end
global function atexit(func: function(): void): cint <cimport,nodecl> end
global function at_quick_exit(func: function(): void): cint <cimport,nodecl> end
global function exit(status: cint): void <cimport,nodecl> end
global function quick_exit(status: cint): void <cimport,nodecl> end
global function _Exit(status: cint): void <cimport,nodecl> end
global function getenv(name: cstring): cstring <cimport,nodecl> end
global function system(command: cstring): cint <cimport,nodecl> end
global __compar_fn_t: type <cimport,nodecl> = @function(pointer, pointer): cint
global function bsearch(key: pointer, base: pointer, nmemb: csize, size: csize, compar: __compar_fn_t): pointer <cimport,nodecl> end
global function qsort(base: pointer, nmemb: csize, size: csize, compar: __compar_fn_t): void <cimport,nodecl> end
global function abs(x: cint): cint <cimport,nodecl> end
global function labs(x: clong): clong <cimport,nodecl> end
global function llabs(x: clonglong): clonglong <cimport,nodecl> end
global function div(numer: cint, denom: cint): div_t <cimport,nodecl> end
global function ldiv(numer: clong, denom: clong): ldiv_t <cimport,nodecl> end
global function lldiv(numer: clonglong, denom: clonglong): lldiv_t <cimport,nodecl> end
global function mblen(s: cstring, n: csize): cint <cimport,nodecl> end
global function mbtowc(pwc: *cwchar_t, s: cstring, n: csize): cint <cimport,nodecl> end
global function wctomb(s: cstring, wchar: cwchar_t): cint <cimport,nodecl> end
global function mbstowcs(pwcs: *cwchar_t, s: cstring, n: csize): csize <cimport,nodecl> end
global function wcstombs(s: cstring, pwcs: *cwchar_t, n: csize): csize <cimport,nodecl> end
global function memcpy(dest: pointer, src: pointer, n: csize): pointer <cimport,nodecl> end
global function memmove(dest: pointer, src: pointer, n: csize): pointer <cimport,nodecl> end
global function memccpy(dest: pointer, src: pointer, c: cint, n: csize): pointer <cimport,nodecl> end
global function memset(s: pointer, c: cint, n: csize): pointer <cimport,nodecl> end
global function memcmp(s1: pointer, s2: pointer, n: csize): cint <cimport,nodecl> end
global function __memcmpeq(s1: pointer, s2: pointer, n: csize): cint <cimport,nodecl> end
global function memchr(s: pointer, c: cint, n: csize): pointer <cimport,nodecl> end
global function strcpy(dest: cstring, src: cstring): cstring <cimport,nodecl> end
global function strncpy(dest: cstring, src: cstring, n: csize): cstring <cimport,nodecl> end
global function strcat(dest: cstring, src: cstring): cstring <cimport,nodecl> end
global function strncat(dest: cstring, src: cstring, n: csize): cstring <cimport,nodecl> end
global function strcmp(s1: cstring, s2: cstring): cint <cimport,nodecl> end
global function strncmp(s1: cstring, s2: cstring, n: csize): cint <cimport,nodecl> end
global function strcoll(s1: cstring, s2: cstring): cint <cimport,nodecl> end
global function strxfrm(dest: cstring, src: cstring, n: csize): csize <cimport,nodecl> end
global function strdup(s: cstring): cstring <cimport,nodecl> end
global function strndup(string: cstring, n: csize): cstring <cimport,nodecl> end
global function strchr(s: cstring, c: cint): cstring <cimport,nodecl> end
global function strrchr(s: cstring, c: cint): cstring <cimport,nodecl> end
global function strcspn(s: cstring, reject: cstring): csize <cimport,nodecl> end
global function strspn(s: cstring, accept: cstring): csize <cimport,nodecl> end
global function strpbrk(s: cstring, accept: cstring): cstring <cimport,nodecl> end
global function strstr(haystack: cstring, needle: cstring): cstring <cimport,nodecl> end
global function strtok(s: cstring, delim: cstring): cstring <cimport,nodecl> end
global function __strtok_r(s: cstring, delim: cstring, save_ptr: *cstring): cstring <cimport,nodecl> end
global function strlen(s: cstring): csize <cimport,nodecl> end
global function strerror(errnum: cint): cstring <cimport,nodecl> end
global tm: type <cimport,nodecl,ctypedef> = @record{
  tm_sec: cint,
  tm_min: cint,
  tm_hour: cint,
  tm_mday: cint,
  tm_mon: cint,
  tm_year: cint,
  tm_wday: cint,
  tm_yday: cint,
  tm_isdst: cint,
  __tm_gmtoff: clong,
  __tm_zone: cstring
}
global timespec: type <cimport,nodecl,ctypedef> = @record{
  tv_sec: ctime_t,
  tv_nsec: clong
}
global function clock(): cclock_t <cimport,nodecl> end
global function time(timer: *ctime_t): ctime_t <cimport,nodecl> end
global function difftime(time1: ctime_t, time0: ctime_t): float64 <cimport,nodecl> end
global function mktime(tp: *tm): ctime_t <cimport,nodecl> end
global function strftime(s: cstring, maxsize: csize, format: cstring, tp: *tm): csize <cimport,nodecl> end
global function gmtime(timer: *ctime_t): *tm <cimport,nodecl> end
global function localtime(timer: *ctime_t): *tm <cimport,nodecl> end
global function gmtime_r(timer: *ctime_t, tp: *tm): *tm <cimport,nodecl> end
global function localtime_r(timer: *ctime_t, tp: *tm): *tm <cimport,nodecl> end
global function asctime(tp: *tm): cstring <cimport,nodecl> end
global function ctime(timer: *ctime_t): cstring <cimport,nodecl> end
global __tzname: [2]cstring <cimport,nodecl>
global __daylight: cint <cimport,nodecl>
global __timezone: clong <cimport,nodecl>
global function timegm(tp: *tm): ctime_t <cimport,nodecl> end
global function timespec_get(ts: *timespec, base: cint): cint <cimport,nodecl> end
global function timespec_getres(ts: *timespec, base: cint): cint <cimport,nodecl> end
global mbstate_t: type = @__mbstate_t
global function mbrtoc8(pc8: *cuchar, s: cstring, n: csize, p: *mbstate_t): csize <cimport,nodecl> end
global function c8rtomb(s: cstring, c8: cuchar, ps: *mbstate_t): csize <cimport,nodecl> end
global function mbrtoc16(pc16: *cushort, s: cstring, n: csize, p: *mbstate_t): csize <cimport,nodecl> end
global function c16rtomb(s: cstring, c16: cushort, ps: *mbstate_t): csize <cimport,nodecl> end
global function mbrtoc32(pc32: *cuint, s: cstring, n: csize, p: *mbstate_t): csize <cimport,nodecl> end
global function c32rtomb(s: cstring, c32: cuint, ps: *mbstate_t): csize <cimport,nodecl> end
global function wcscpy(dest: *cwchar_t, src: *cwchar_t): *cwchar_t <cimport,nodecl> end
global function wcsncpy(dest: *cwchar_t, src: *cwchar_t, n: csize): *cwchar_t <cimport,nodecl> end
global function wcscat(dest: *cwchar_t, src: *cwchar_t): *cwchar_t <cimport,nodecl> end
global function wcsncat(dest: *cwchar_t, src: *cwchar_t, n: csize): *cwchar_t <cimport,nodecl> end
global function wcscmp(s1: *cwchar_t, s2: *cwchar_t): cint <cimport,nodecl> end
global function wcsncmp(s1: *cwchar_t, s2: *cwchar_t, n: csize): cint <cimport,nodecl> end
global function wcscoll(s1: *cwchar_t, s2: *cwchar_t): cint <cimport,nodecl> end
global function wcsxfrm(s1: *cwchar_t, s2: *cwchar_t, n: csize): csize <cimport,nodecl> end
global function wcschr(wcs: *cwchar_t, wc: cwchar_t): *cwchar_t <cimport,nodecl> end
global function wcsrchr(wcs: *cwchar_t, wc: cwchar_t): *cwchar_t <cimport,nodecl> end
global function wcscspn(wcs: *cwchar_t, reject: *cwchar_t): csize <cimport,nodecl> end
global function wcsspn(wcs: *cwchar_t, accept: *cwchar_t): csize <cimport,nodecl> end
global function wcspbrk(wcs: *cwchar_t, accept: *cwchar_t): *cwchar_t <cimport,nodecl> end
global function wcsstr(haystack: *cwchar_t, needle: *cwchar_t): *cwchar_t <cimport,nodecl> end
global function wcstok(s: *cwchar_t, delim: *cwchar_t, ptr: **cwchar_t): *cwchar_t <cimport,nodecl> end
global function wcslen(s: *cwchar_t): csize <cimport,nodecl> end
global function wmemchr(s: *cwchar_t, c: cwchar_t, n: csize): *cwchar_t <cimport,nodecl> end
global function wmemcmp(s1: *cwchar_t, s2: *cwchar_t, n: csize): cint <cimport,nodecl> end
global function wmemcpy(s1: *cwchar_t, s2: *cwchar_t, n: csize): *cwchar_t <cimport,nodecl> end
global function wmemmove(s1: *cwchar_t, s2: *cwchar_t, n: csize): *cwchar_t <cimport,nodecl> end
global function wmemset(s: *cwchar_t, c: cwchar_t, n: csize): *cwchar_t <cimport,nodecl> end
global function btowc(c: cint): cuint <cimport,nodecl> end
global function wctob(c: cuint): cint <cimport,nodecl> end
global function mbsinit(ps: *mbstate_t): cint <cimport,nodecl> end
global function mbrtowc(pwc: *cwchar_t, s: cstring, n: csize, p: *mbstate_t): csize <cimport,nodecl> end
global function wcrtomb(s: cstring, wc: cwchar_t, ps: *mbstate_t): csize <cimport,nodecl> end
global function __mbrlen(s: cstring, n: csize, ps: *mbstate_t): csize <cimport,nodecl> end
global function mbrlen(s: cstring, n: csize, ps: *mbstate_t): csize <cimport,nodecl> end
global function mbsrtowcs(dst: *cwchar_t, src: *cstring, len: csize, ps: *mbstate_t): csize <cimport,nodecl> end
global function wcsrtombs(dst: cstring, src: **cwchar_t, len: csize, ps: *mbstate_t): csize <cimport,nodecl> end
global function wcstod(nptr: *cwchar_t, endptr: **cwchar_t): float64 <cimport,nodecl> end
global function wcstof(nptr: *cwchar_t, endptr: **cwchar_t): float32 <cimport,nodecl> end
global function wcstold(nptr: *cwchar_t, endptr: **cwchar_t): clongdouble <cimport,nodecl> end
global function wcstol(nptr: *cwchar_t, endptr: **cwchar_t, base: cint): clong <cimport,nodecl> end
global function wcstoul(nptr: *cwchar_t, endptr: **cwchar_t, base: cint): culong <cimport,nodecl> end
global function wcstoll(nptr: *cwchar_t, endptr: **cwchar_t, base: cint): clonglong <cimport,nodecl> end
global function wcstoull(nptr: *cwchar_t, endptr: **cwchar_t, base: cint): culonglong <cimport,nodecl> end
global function fwide(fp: *__FILE, mode: cint): cint <cimport,nodecl> end
global function fwprintf(stream: *__FILE, format: *cwchar_t, ...: cvarargs): cint <cimport,nodecl> end
global function wprintf(format: *cwchar_t, ...: cvarargs): cint <cimport,nodecl> end
global function swprintf(s: *cwchar_t, n: csize, format: *cwchar_t, ...: cvarargs): cint <cimport,nodecl> end
global function vfwprintf(s: *__FILE, format: *cwchar_t, arg: cvalist): cint <cimport,nodecl> end
global function vwprintf(format: *cwchar_t, arg: cvalist): cint <cimport,nodecl> end
global function vswprintf(s: *cwchar_t, n: csize, format: *cwchar_t, arg: cvalist): cint <cimport,nodecl> end
global function fwscanf(stream: *__FILE, format: *cwchar_t, ...: cvarargs): cint <cimport,nodecl> end
global function wscanf(format: *cwchar_t, ...: cvarargs): cint <cimport,nodecl> end
global function swscanf(s: *cwchar_t, format: *cwchar_t, ...: cvarargs): cint <cimport,nodecl> end
global function vfwscanf(s: *__FILE, format: *cwchar_t, arg: cvalist): cint <cimport,nodecl> end
global function vwscanf(format: *cwchar_t, arg: cvalist): cint <cimport,nodecl> end
global function vswscanf(s: *cwchar_t, format: *cwchar_t, arg: cvalist): cint <cimport,nodecl> end
global function fgetwc(stream: *__FILE): cuint <cimport,nodecl> end
global function getwc(stream: *__FILE): cuint <cimport,nodecl> end
global function getwchar(): cuint <cimport,nodecl> end
global function fputwc(wc: cwchar_t, stream: *__FILE): cuint <cimport,nodecl> end
global function putwc(wc: cwchar_t, stream: *__FILE): cuint <cimport,nodecl> end
global function putwchar(wc: cwchar_t): cuint <cimport,nodecl> end
global function fgetws(ws: *cwchar_t, n: cint, stream: *__FILE): *cwchar_t <cimport,nodecl> end
global function fputws(ws: *cwchar_t, stream: *__FILE): cint <cimport,nodecl> end
global function ungetwc(wc: cuint, stream: *__FILE): cuint <cimport,nodecl> end
global function wcsftime(s: *cwchar_t, maxsize: csize, format: *cwchar_t, tp: *tm): csize <cimport,nodecl> end
global __ISwupper: cint <comptime> = 0
global __ISwlower: cint <comptime> = 1
global __ISwalpha: cint <comptime> = 2
global __ISwdigit: cint <comptime> = 3
global __ISwxdigit: cint <comptime> = 4
global __ISwspace: cint <comptime> = 5
global __ISwprint: cint <comptime> = 6
global __ISwgraph: cint <comptime> = 7
global __ISwblank: cint <comptime> = 8
global __ISwcntrl: cint <comptime> = 9
global __ISwpunct: cint <comptime> = 10
global __ISwalnum: cint <comptime> = 11
global _ISwupper: cint <comptime> = 16777216
global _ISwlower: cint <comptime> = 33554432
global _ISwalpha: cint <comptime> = 67108864
global _ISwdigit: cint <comptime> = 134217728
global _ISwxdigit: cint <comptime> = 268435456
global _ISwspace: cint <comptime> = 536870912
global _ISwprint: cint <comptime> = 1073741824
global _ISwgraph: cint <comptime> = -2147483648
global _ISwblank: cint <comptime> = 65536
global _ISwcntrl: cint <comptime> = 131072
global _ISwpunct: cint <comptime> = 262144
global _ISwalnum: cint <comptime> = 524288
global function iswalnum(wc: cuint): cint <cimport,nodecl> end
global function iswalpha(wc: cuint): cint <cimport,nodecl> end
global function iswcntrl(wc: cuint): cint <cimport,nodecl> end
global function iswdigit(wc: cuint): cint <cimport,nodecl> end
global function iswgraph(wc: cuint): cint <cimport,nodecl> end
global function iswlower(wc: cuint): cint <cimport,nodecl> end
global function iswprint(wc: cuint): cint <cimport,nodecl> end
global function iswpunct(wc: cuint): cint <cimport,nodecl> end
global function iswspace(wc: cuint): cint <cimport,nodecl> end
global function iswupper(wc: cuint): cint <cimport,nodecl> end
global function iswxdigit(wc: cuint): cint <cimport,nodecl> end
global function iswblank(wc: cuint): cint <cimport,nodecl> end
global function wctype(property: cstring): culong <cimport,nodecl> end
global function iswctype(wc: cuint, desc: culong): cint <cimport,nodecl> end
global function towlower(wc: cuint): cuint <cimport,nodecl> end
global function towupper(wc: cuint): cuint <cimport,nodecl> end
global wctrans_t: type = @*int32
global function wctrans(property: cstring): wctrans_t <cimport,nodecl> end
global function towctrans(wc: cuint, desc: wctrans_t): cuint <cimport,nodecl> end
