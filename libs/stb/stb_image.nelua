##[[
if not STB_IMAGE_NO_IMPL then
  cdefine 'STB_IMAGE_STATIC'
  cdefine 'STB_IMAGE_IMPLEMENTATION'
  linklib 'm'
end
if not ccinfo.is_gcc then
  cdefine 'STBI_NO_SIMD'
end
cinclude 'stb_image.h'
]]
global FILE: type <cimport,nodecl,forwarddecl> = @record{}
global STBI_default: cint <comptime> = 0
global STBI_grey: cint <comptime> = 1
global STBI_grey_alpha: cint <comptime> = 2
global STBI_rgb: cint <comptime> = 3
global STBI_rgb_alpha: cint <comptime> = 4
global stbi_io_callbacks: type <cimport,nodecl> = @record{
  read: function(pointer, cstring, cint): cint,
  skip: function(pointer, cint): void,
  eof: function(pointer): cint
}
global function stbi_load_from_memory(buffer: *cuchar, len: cint, x: *cint, y: *cint, channels_in_file: *cint, desired_channels: cint): *cuchar <cimport,nodecl> end
global function stbi_load_from_callbacks(clbk: *stbi_io_callbacks, user: pointer, x: *cint, y: *cint, channels_in_file: *cint, desired_channels: cint): *cuchar <cimport,nodecl> end
global function stbi_load(filename: cstring, x: *cint, y: *cint, channels_in_file: *cint, desired_channels: cint): *cuchar <cimport,nodecl> end
global function stbi_load_from_file(f: *FILE, x: *cint, y: *cint, channels_in_file: *cint, desired_channels: cint): *cuchar <cimport,nodecl> end
global function stbi_load_gif_from_memory(buffer: *cuchar, len: cint, delays: **cint, x: *cint, y: *cint, z: *cint, comp: *cint, req_comp: cint): *cuchar <cimport,nodecl> end
global function stbi_load_16_from_memory(buffer: *cuchar, len: cint, x: *cint, y: *cint, channels_in_file: *cint, desired_channels: cint): *cushort <cimport,nodecl> end
global function stbi_load_16_from_callbacks(clbk: *stbi_io_callbacks, user: pointer, x: *cint, y: *cint, channels_in_file: *cint, desired_channels: cint): *cushort <cimport,nodecl> end
global function stbi_load_16(filename: cstring, x: *cint, y: *cint, channels_in_file: *cint, desired_channels: cint): *cushort <cimport,nodecl> end
global function stbi_load_from_file_16(f: *FILE, x: *cint, y: *cint, channels_in_file: *cint, desired_channels: cint): *cushort <cimport,nodecl> end
global function stbi_loadf_from_memory(buffer: *cuchar, len: cint, x: *cint, y: *cint, channels_in_file: *cint, desired_channels: cint): *float32 <cimport,nodecl> end
global function stbi_loadf_from_callbacks(clbk: *stbi_io_callbacks, user: pointer, x: *cint, y: *cint, channels_in_file: *cint, desired_channels: cint): *float32 <cimport,nodecl> end
global function stbi_loadf(filename: cstring, x: *cint, y: *cint, channels_in_file: *cint, desired_channels: cint): *float32 <cimport,nodecl> end
global function stbi_loadf_from_file(f: *FILE, x: *cint, y: *cint, channels_in_file: *cint, desired_channels: cint): *float32 <cimport,nodecl> end
global function stbi_hdr_to_ldr_gamma(gamma: float32): void <cimport,nodecl> end
global function stbi_hdr_to_ldr_scale(scale: float32): void <cimport,nodecl> end
global function stbi_ldr_to_hdr_gamma(gamma: float32): void <cimport,nodecl> end
global function stbi_ldr_to_hdr_scale(scale: float32): void <cimport,nodecl> end
global function stbi_is_hdr_from_callbacks(clbk: *stbi_io_callbacks, user: pointer): cint <cimport,nodecl> end
global function stbi_is_hdr_from_memory(buffer: *cuchar, len: cint): cint <cimport,nodecl> end
global function stbi_is_hdr(filename: cstring): cint <cimport,nodecl> end
global function stbi_is_hdr_from_file(f: *FILE): cint <cimport,nodecl> end
global function stbi_failure_reason(): cstring <cimport,nodecl> end
global function stbi_image_free(retval_from_stbi_load: pointer): void <cimport,nodecl> end
global function stbi_info_from_memory(buffer: *cuchar, len: cint, x: *cint, y: *cint, comp: *cint): cint <cimport,nodecl> end
global function stbi_info_from_callbacks(clbk: *stbi_io_callbacks, user: pointer, x: *cint, y: *cint, comp: *cint): cint <cimport,nodecl> end
global function stbi_is_16_bit_from_memory(buffer: *cuchar, len: cint): cint <cimport,nodecl> end
global function stbi_is_16_bit_from_callbacks(clbk: *stbi_io_callbacks, user: pointer): cint <cimport,nodecl> end
global function stbi_info(filename: cstring, x: *cint, y: *cint, comp: *cint): cint <cimport,nodecl> end
global function stbi_info_from_file(f: *FILE, x: *cint, y: *cint, comp: *cint): cint <cimport,nodecl> end
global function stbi_is_16_bit(filename: cstring): cint <cimport,nodecl> end
global function stbi_is_16_bit_from_file(f: *FILE): cint <cimport,nodecl> end
global function stbi_set_unpremultiply_on_load(flag_true_if_should_unpremultiply: cint): void <cimport,nodecl> end
global function stbi_convert_iphone_png_to_rgb(flag_true_if_should_convert: cint): void <cimport,nodecl> end
global function stbi_set_flip_vertically_on_load(flag_true_if_should_flip: cint): void <cimport,nodecl> end
global function stbi_set_unpremultiply_on_load_thread(flag_true_if_should_unpremultiply: cint): void <cimport,nodecl> end
global function stbi_convert_iphone_png_to_rgb_thread(flag_true_if_should_convert: cint): void <cimport,nodecl> end
global function stbi_set_flip_vertically_on_load_thread(flag_true_if_should_flip: cint): void <cimport,nodecl> end
global function stbi_zlib_decode_malloc_guesssize(buffer: cstring, len: cint, initial_size: cint, outlen: *cint): cstring <cimport,nodecl> end
global function stbi_zlib_decode_malloc_guesssize_headerflag(buffer: cstring, len: cint, initial_size: cint, outlen: *cint, parse_header: cint): cstring <cimport,nodecl> end
global function stbi_zlib_decode_malloc(buffer: cstring, len: cint, outlen: *cint): cstring <cimport,nodecl> end
global function stbi_zlib_decode_buffer(obuffer: cstring, olen: cint, ibuffer: cstring, ilen: cint): cint <cimport,nodecl> end
global function stbi_zlib_decode_noheader_malloc(buffer: cstring, len: cint, outlen: *cint): cstring <cimport,nodecl> end
global function stbi_zlib_decode_noheader_buffer(obuffer: cstring, olen: cint, ibuffer: cstring, ilen: cint): cint <cimport,nodecl> end
