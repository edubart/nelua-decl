##[[
if not os.getenv('WAMR_SDK_PATH') then
  static_error 'Please define WAMR_SDK_PATH path'
end
cincdir(os.getenv('WAMR_SDK_PATH')..'/runtime-sdk/include')
linkdir(os.getenv('WAMR_SDK_PATH')..'/runtime-sdk/lib')
cinclude 'wasm_c_api.h'
cinclude 'wasm_export.h'
linklib 'vmlib'
if ccinfo.is_linux then
  cflags '-pthread'
end
]]
global wasm_byte_vec_t: type <cimport,nodecl> = @record{
  size: csize,
  data: cstring,
  num_elems: csize,
  size_of_elem: csize,
  lock: pointer
}
global function wasm_byte_vec_new_empty(out: *wasm_byte_vec_t): void <cimport,nodecl> end
global function wasm_byte_vec_new_uninitialized(out: *wasm_byte_vec_t, a2: csize): void <cimport,nodecl> end
global function wasm_byte_vec_new(out: *wasm_byte_vec_t, a2: csize, a3: cstring): void <cimport,nodecl> end
global function wasm_byte_vec_copy(out: *wasm_byte_vec_t, a2: *wasm_byte_vec_t): void <cimport,nodecl> end
global function wasm_byte_vec_delete(a1: *wasm_byte_vec_t): void <cimport,nodecl> end
global wasm_name_t: type = @wasm_byte_vec_t
global function wasm_name_new_from_string(out: *wasm_name_t, s: cstring): void <cimport,nodecl> end
global function wasm_name_new_from_string_nt(out: *wasm_name_t, s: cstring): void <cimport,nodecl> end
global wasm_config_t: type <cimport,nodecl,forwarddecl> = @record{}
global function wasm_config_delete(a1: *wasm_config_t): void <cimport,nodecl> end
global function wasm_config_new(): *wasm_config_t <cimport,nodecl> end
global wasm_engine_t: type <cimport,nodecl,forwarddecl> = @record{}
global function wasm_engine_delete(a1: *wasm_engine_t): void <cimport,nodecl> end
global function wasm_engine_new(): *wasm_engine_t <cimport,nodecl> end
global function wasm_engine_new_with_config(a1: *wasm_config_t): *wasm_engine_t <cimport,nodecl> end
global mem_alloc_type_t: type <cimport,nodecl,using> = @enum(cint){
  Alloc_With_Pool = 0,
  Alloc_With_Allocator = 1,
  Alloc_With_System_Allocator = 2
}
global MemAllocOption: type <cimport,nodecl> = @union{
  pool: record{
    heap_buf: pointer,
    heap_size: uint32
  },
  allocator: record{
    malloc_func: pointer,
    realloc_func: pointer,
    free_func: pointer,
    user_data: pointer
  }
}
global function wasm_engine_new_with_args(type: mem_alloc_type_t, opts: *MemAllocOption): *wasm_engine_t <cimport,nodecl> end
global wasm_store_t: type <cimport,nodecl,forwarddecl> = @record{}
global function wasm_store_delete(a1: *wasm_store_t): void <cimport,nodecl> end
global function wasm_store_new(a1: *wasm_engine_t): *wasm_store_t <cimport,nodecl> end
global wasm_mutability_enum: type <cimport,nodecl,using,ctypedef> = @enum(cint){
  WASM_CONST = 0,
  WASM_VAR = 1
}
global wasm_limits_t: type <cimport,nodecl> = @record{
  min: uint32,
  max: uint32
}
global wasm_limits_max_default: uint32 <cimport,nodecl>
global wasm_valtype_t: type <cimport,nodecl,forwarddecl> = @record{}
global function wasm_valtype_delete(a1: *wasm_valtype_t): void <cimport,nodecl> end
global wasm_valtype_vec_t: type <cimport,nodecl> = @record{
  size: csize,
  data: **wasm_valtype_t,
  num_elems: csize,
  size_of_elem: csize,
  lock: pointer
}
global function wasm_valtype_vec_new_empty(out: *wasm_valtype_vec_t): void <cimport,nodecl> end
global function wasm_valtype_vec_new_uninitialized(out: *wasm_valtype_vec_t, a2: csize): void <cimport,nodecl> end
global function wasm_valtype_vec_new(out: *wasm_valtype_vec_t, a2: csize, a3: **wasm_valtype_t): void <cimport,nodecl> end
global function wasm_valtype_vec_copy(out: *wasm_valtype_vec_t, a2: *wasm_valtype_vec_t): void <cimport,nodecl> end
global function wasm_valtype_vec_delete(a1: *wasm_valtype_vec_t): void <cimport,nodecl> end
global function wasm_valtype_copy(a1: *wasm_valtype_t): *wasm_valtype_t <cimport,nodecl> end
global wasm_valkind_enum: type <cimport,nodecl,using,ctypedef> = @enum(cint){
  WASM_I32 = 0,
  WASM_I64 = 1,
  WASM_F32 = 2,
  WASM_F64 = 3,
  WASM_ANYREF = 128,
  WASM_FUNCREF = 129
}
global function wasm_valtype_new(a1: cuchar): *wasm_valtype_t <cimport,nodecl> end
global function wasm_valtype_kind(a1: *wasm_valtype_t): cuchar <cimport,nodecl> end
global function wasm_valkind_is_num(k: cuchar): boolean <cimport,nodecl> end
global function wasm_valkind_is_ref(k: cuchar): boolean <cimport,nodecl> end
global function wasm_valtype_is_num(t: *wasm_valtype_t): boolean <cimport,nodecl> end
global function wasm_valtype_is_ref(t: *wasm_valtype_t): boolean <cimport,nodecl> end
global wasm_functype_t: type <cimport,nodecl,forwarddecl> = @record{}
global function wasm_functype_delete(a1: *wasm_functype_t): void <cimport,nodecl> end
global wasm_functype_vec_t: type <cimport,nodecl> = @record{
  size: csize,
  data: **wasm_functype_t,
  num_elems: csize,
  size_of_elem: csize,
  lock: pointer
}
global function wasm_functype_vec_new_empty(out: *wasm_functype_vec_t): void <cimport,nodecl> end
global function wasm_functype_vec_new_uninitialized(out: *wasm_functype_vec_t, a2: csize): void <cimport,nodecl> end
global function wasm_functype_vec_new(out: *wasm_functype_vec_t, a2: csize, a3: **wasm_functype_t): void <cimport,nodecl> end
global function wasm_functype_vec_copy(out: *wasm_functype_vec_t, a2: *wasm_functype_vec_t): void <cimport,nodecl> end
global function wasm_functype_vec_delete(a1: *wasm_functype_vec_t): void <cimport,nodecl> end
global function wasm_functype_copy(a1: *wasm_functype_t): *wasm_functype_t <cimport,nodecl> end
global function wasm_functype_new(params: *wasm_valtype_vec_t, results: *wasm_valtype_vec_t): *wasm_functype_t <cimport,nodecl> end
global function wasm_functype_params(a1: *wasm_functype_t): *wasm_valtype_vec_t <cimport,nodecl> end
global function wasm_functype_results(a1: *wasm_functype_t): *wasm_valtype_vec_t <cimport,nodecl> end
global wasm_globaltype_t: type <cimport,nodecl,forwarddecl> = @record{}
global function wasm_globaltype_delete(a1: *wasm_globaltype_t): void <cimport,nodecl> end
global wasm_globaltype_vec_t: type <cimport,nodecl> = @record{
  size: csize,
  data: **wasm_globaltype_t,
  num_elems: csize,
  size_of_elem: csize,
  lock: pointer
}
global function wasm_globaltype_vec_new_empty(out: *wasm_globaltype_vec_t): void <cimport,nodecl> end
global function wasm_globaltype_vec_new_uninitialized(out: *wasm_globaltype_vec_t, a2: csize): void <cimport,nodecl> end
global function wasm_globaltype_vec_new(out: *wasm_globaltype_vec_t, a2: csize, a3: **wasm_globaltype_t): void <cimport,nodecl> end
global function wasm_globaltype_vec_copy(out: *wasm_globaltype_vec_t, a2: *wasm_globaltype_vec_t): void <cimport,nodecl> end
global function wasm_globaltype_vec_delete(a1: *wasm_globaltype_vec_t): void <cimport,nodecl> end
global function wasm_globaltype_copy(a1: *wasm_globaltype_t): *wasm_globaltype_t <cimport,nodecl> end
global function wasm_globaltype_new(a1: *wasm_valtype_t, a2: cuchar): *wasm_globaltype_t <cimport,nodecl> end
global function wasm_globaltype_content(a1: *wasm_globaltype_t): *wasm_valtype_t <cimport,nodecl> end
global function wasm_globaltype_mutability(a1: *wasm_globaltype_t): cuchar <cimport,nodecl> end
global wasm_tabletype_t: type <cimport,nodecl,forwarddecl> = @record{}
global function wasm_tabletype_delete(a1: *wasm_tabletype_t): void <cimport,nodecl> end
global wasm_tabletype_vec_t: type <cimport,nodecl> = @record{
  size: csize,
  data: **wasm_tabletype_t,
  num_elems: csize,
  size_of_elem: csize,
  lock: pointer
}
global function wasm_tabletype_vec_new_empty(out: *wasm_tabletype_vec_t): void <cimport,nodecl> end
global function wasm_tabletype_vec_new_uninitialized(out: *wasm_tabletype_vec_t, a2: csize): void <cimport,nodecl> end
global function wasm_tabletype_vec_new(out: *wasm_tabletype_vec_t, a2: csize, a3: **wasm_tabletype_t): void <cimport,nodecl> end
global function wasm_tabletype_vec_copy(out: *wasm_tabletype_vec_t, a2: *wasm_tabletype_vec_t): void <cimport,nodecl> end
global function wasm_tabletype_vec_delete(a1: *wasm_tabletype_vec_t): void <cimport,nodecl> end
global function wasm_tabletype_copy(a1: *wasm_tabletype_t): *wasm_tabletype_t <cimport,nodecl> end
global function wasm_tabletype_new(a1: *wasm_valtype_t, a2: *wasm_limits_t): *wasm_tabletype_t <cimport,nodecl> end
global function wasm_tabletype_element(a1: *wasm_tabletype_t): *wasm_valtype_t <cimport,nodecl> end
global function wasm_tabletype_limits(a1: *wasm_tabletype_t): *wasm_limits_t <cimport,nodecl> end
global wasm_memorytype_t: type <cimport,nodecl,forwarddecl> = @record{}
global function wasm_memorytype_delete(a1: *wasm_memorytype_t): void <cimport,nodecl> end
global wasm_memorytype_vec_t: type <cimport,nodecl> = @record{
  size: csize,
  data: **wasm_memorytype_t,
  num_elems: csize,
  size_of_elem: csize,
  lock: pointer
}
global function wasm_memorytype_vec_new_empty(out: *wasm_memorytype_vec_t): void <cimport,nodecl> end
global function wasm_memorytype_vec_new_uninitialized(out: *wasm_memorytype_vec_t, a2: csize): void <cimport,nodecl> end
global function wasm_memorytype_vec_new(out: *wasm_memorytype_vec_t, a2: csize, a3: **wasm_memorytype_t): void <cimport,nodecl> end
global function wasm_memorytype_vec_copy(out: *wasm_memorytype_vec_t, a2: *wasm_memorytype_vec_t): void <cimport,nodecl> end
global function wasm_memorytype_vec_delete(a1: *wasm_memorytype_vec_t): void <cimport,nodecl> end
global function wasm_memorytype_copy(a1: *wasm_memorytype_t): *wasm_memorytype_t <cimport,nodecl> end
global function wasm_memorytype_new(a1: *wasm_limits_t): *wasm_memorytype_t <cimport,nodecl> end
global function wasm_memorytype_limits(a1: *wasm_memorytype_t): *wasm_limits_t <cimport,nodecl> end
global wasm_externtype_t: type <cimport,nodecl,forwarddecl> = @record{}
global function wasm_externtype_delete(a1: *wasm_externtype_t): void <cimport,nodecl> end
global wasm_externtype_vec_t: type <cimport,nodecl> = @record{
  size: csize,
  data: **wasm_externtype_t,
  num_elems: csize,
  size_of_elem: csize,
  lock: pointer
}
global function wasm_externtype_vec_new_empty(out: *wasm_externtype_vec_t): void <cimport,nodecl> end
global function wasm_externtype_vec_new_uninitialized(out: *wasm_externtype_vec_t, a2: csize): void <cimport,nodecl> end
global function wasm_externtype_vec_new(out: *wasm_externtype_vec_t, a2: csize, a3: **wasm_externtype_t): void <cimport,nodecl> end
global function wasm_externtype_vec_copy(out: *wasm_externtype_vec_t, a2: *wasm_externtype_vec_t): void <cimport,nodecl> end
global function wasm_externtype_vec_delete(a1: *wasm_externtype_vec_t): void <cimport,nodecl> end
global function wasm_externtype_copy(a1: *wasm_externtype_t): *wasm_externtype_t <cimport,nodecl> end
global wasm_externkind_enum: type <cimport,nodecl,using,ctypedef> = @enum(cint){
  WASM_EXTERN_FUNC = 0,
  WASM_EXTERN_GLOBAL = 1,
  WASM_EXTERN_TABLE = 2,
  WASM_EXTERN_MEMORY = 3
}
global function wasm_externtype_kind(a1: *wasm_externtype_t): cuchar <cimport,nodecl> end
global function wasm_functype_as_externtype(a1: *wasm_functype_t): *wasm_externtype_t <cimport,nodecl> end
global function wasm_globaltype_as_externtype(a1: *wasm_globaltype_t): *wasm_externtype_t <cimport,nodecl> end
global function wasm_tabletype_as_externtype(a1: *wasm_tabletype_t): *wasm_externtype_t <cimport,nodecl> end
global function wasm_memorytype_as_externtype(a1: *wasm_memorytype_t): *wasm_externtype_t <cimport,nodecl> end
global function wasm_externtype_as_functype(a1: *wasm_externtype_t): *wasm_functype_t <cimport,nodecl> end
global function wasm_externtype_as_globaltype(a1: *wasm_externtype_t): *wasm_globaltype_t <cimport,nodecl> end
global function wasm_externtype_as_tabletype(a1: *wasm_externtype_t): *wasm_tabletype_t <cimport,nodecl> end
global function wasm_externtype_as_memorytype(a1: *wasm_externtype_t): *wasm_memorytype_t <cimport,nodecl> end
global function wasm_functype_as_externtype_const(a1: *wasm_functype_t): *wasm_externtype_t <cimport,nodecl> end
global function wasm_globaltype_as_externtype_const(a1: *wasm_globaltype_t): *wasm_externtype_t <cimport,nodecl> end
global function wasm_tabletype_as_externtype_const(a1: *wasm_tabletype_t): *wasm_externtype_t <cimport,nodecl> end
global function wasm_memorytype_as_externtype_const(a1: *wasm_memorytype_t): *wasm_externtype_t <cimport,nodecl> end
global function wasm_externtype_as_functype_const(a1: *wasm_externtype_t): *wasm_functype_t <cimport,nodecl> end
global function wasm_externtype_as_globaltype_const(a1: *wasm_externtype_t): *wasm_globaltype_t <cimport,nodecl> end
global function wasm_externtype_as_tabletype_const(a1: *wasm_externtype_t): *wasm_tabletype_t <cimport,nodecl> end
global function wasm_externtype_as_memorytype_const(a1: *wasm_externtype_t): *wasm_memorytype_t <cimport,nodecl> end
global wasm_importtype_t: type <cimport,nodecl,forwarddecl> = @record{}
global function wasm_importtype_delete(a1: *wasm_importtype_t): void <cimport,nodecl> end
global wasm_importtype_vec_t: type <cimport,nodecl> = @record{
  size: csize,
  data: **wasm_importtype_t,
  num_elems: csize,
  size_of_elem: csize,
  lock: pointer
}
global function wasm_importtype_vec_new_empty(out: *wasm_importtype_vec_t): void <cimport,nodecl> end
global function wasm_importtype_vec_new_uninitialized(out: *wasm_importtype_vec_t, a2: csize): void <cimport,nodecl> end
global function wasm_importtype_vec_new(out: *wasm_importtype_vec_t, a2: csize, a3: **wasm_importtype_t): void <cimport,nodecl> end
global function wasm_importtype_vec_copy(out: *wasm_importtype_vec_t, a2: *wasm_importtype_vec_t): void <cimport,nodecl> end
global function wasm_importtype_vec_delete(a1: *wasm_importtype_vec_t): void <cimport,nodecl> end
global function wasm_importtype_copy(a1: *wasm_importtype_t): *wasm_importtype_t <cimport,nodecl> end
global function wasm_importtype_new(module: *wasm_name_t, name: *wasm_name_t, a3: *wasm_externtype_t): *wasm_importtype_t <cimport,nodecl> end
global function wasm_importtype_module(a1: *wasm_importtype_t): *wasm_name_t <cimport,nodecl> end
global function wasm_importtype_name(a1: *wasm_importtype_t): *wasm_name_t <cimport,nodecl> end
global function wasm_importtype_type(a1: *wasm_importtype_t): *wasm_externtype_t <cimport,nodecl> end
global wasm_exporttype_t: type <cimport,nodecl,forwarddecl> = @record{}
global function wasm_exporttype_delete(a1: *wasm_exporttype_t): void <cimport,nodecl> end
global wasm_exporttype_vec_t: type <cimport,nodecl> = @record{
  size: csize,
  data: **wasm_exporttype_t,
  num_elems: csize,
  size_of_elem: csize,
  lock: pointer
}
global function wasm_exporttype_vec_new_empty(out: *wasm_exporttype_vec_t): void <cimport,nodecl> end
global function wasm_exporttype_vec_new_uninitialized(out: *wasm_exporttype_vec_t, a2: csize): void <cimport,nodecl> end
global function wasm_exporttype_vec_new(out: *wasm_exporttype_vec_t, a2: csize, a3: **wasm_exporttype_t): void <cimport,nodecl> end
global function wasm_exporttype_vec_copy(out: *wasm_exporttype_vec_t, a2: *wasm_exporttype_vec_t): void <cimport,nodecl> end
global function wasm_exporttype_vec_delete(a1: *wasm_exporttype_vec_t): void <cimport,nodecl> end
global function wasm_exporttype_copy(a1: *wasm_exporttype_t): *wasm_exporttype_t <cimport,nodecl> end
global function wasm_exporttype_new(a1: *wasm_name_t, a2: *wasm_externtype_t): *wasm_exporttype_t <cimport,nodecl> end
global function wasm_exporttype_name(a1: *wasm_exporttype_t): *wasm_name_t <cimport,nodecl> end
global function wasm_exporttype_type(a1: *wasm_exporttype_t): *wasm_externtype_t <cimport,nodecl> end
global wasm_ref_t: type <cimport,nodecl,forwarddecl> = @record{}
global wasm_val_t: type <cimport,nodecl> = @record{
  kind: cuchar,
  of: union{
    i32: int32,
    i64: int64,
    f32: float32,
    f64: float64,
    ref: *wasm_ref_t
  }
}
global function wasm_val_delete(v: *wasm_val_t): void <cimport,nodecl> end
global function wasm_val_copy(out: *wasm_val_t, a2: *wasm_val_t): void <cimport,nodecl> end
global wasm_val_vec_t: type <cimport,nodecl> = @record{
  size: csize,
  data: *wasm_val_t,
  num_elems: csize,
  size_of_elem: csize,
  lock: pointer
}
global function wasm_val_vec_new_empty(out: *wasm_val_vec_t): void <cimport,nodecl> end
global function wasm_val_vec_new_uninitialized(out: *wasm_val_vec_t, a2: csize): void <cimport,nodecl> end
global function wasm_val_vec_new(out: *wasm_val_vec_t, a2: csize, a3: *wasm_val_t): void <cimport,nodecl> end
global function wasm_val_vec_copy(out: *wasm_val_vec_t, a2: *wasm_val_vec_t): void <cimport,nodecl> end
global function wasm_val_vec_delete(a1: *wasm_val_vec_t): void <cimport,nodecl> end
global function wasm_ref_delete(a1: *wasm_ref_t): void <cimport,nodecl> end
global function wasm_ref_copy(a1: *wasm_ref_t): *wasm_ref_t <cimport,nodecl> end
global function wasm_ref_same(a1: *wasm_ref_t, a2: *wasm_ref_t): boolean <cimport,nodecl> end
global function wasm_ref_get_host_info(a1: *wasm_ref_t): pointer <cimport,nodecl> end
global function wasm_ref_set_host_info(a1: *wasm_ref_t, a2: pointer): void <cimport,nodecl> end
global function wasm_ref_set_host_info_with_finalizer(a1: *wasm_ref_t, a2: pointer, a3: function(pointer): void): void <cimport,nodecl> end
global wasm_frame_t: type <cimport,nodecl,forwarddecl> = @record{}
global function wasm_frame_delete(a1: *wasm_frame_t): void <cimport,nodecl> end
global wasm_frame_vec_t: type <cimport,nodecl> = @record{
  size: csize,
  data: **wasm_frame_t,
  num_elems: csize,
  size_of_elem: csize,
  lock: pointer
}
global function wasm_frame_vec_new_empty(out: *wasm_frame_vec_t): void <cimport,nodecl> end
global function wasm_frame_vec_new_uninitialized(out: *wasm_frame_vec_t, a2: csize): void <cimport,nodecl> end
global function wasm_frame_vec_new(out: *wasm_frame_vec_t, a2: csize, a3: **wasm_frame_t): void <cimport,nodecl> end
global function wasm_frame_vec_copy(out: *wasm_frame_vec_t, a2: *wasm_frame_vec_t): void <cimport,nodecl> end
global function wasm_frame_vec_delete(a1: *wasm_frame_vec_t): void <cimport,nodecl> end
global function wasm_frame_copy(a1: *wasm_frame_t): *wasm_frame_t <cimport,nodecl> end
global wasm_instance_t: type <cimport,nodecl,forwarddecl> = @record{}
global function wasm_frame_instance(a1: *wasm_frame_t): *wasm_instance_t <cimport,nodecl> end
global function wasm_frame_func_index(a1: *wasm_frame_t): uint32 <cimport,nodecl> end
global function wasm_frame_func_offset(a1: *wasm_frame_t): csize <cimport,nodecl> end
global function wasm_frame_module_offset(a1: *wasm_frame_t): csize <cimport,nodecl> end
global wasm_message_t: type = @wasm_byte_vec_t
global wasm_trap_t: type <cimport,nodecl,forwarddecl> = @record{}
global function wasm_trap_delete(a1: *wasm_trap_t): void <cimport,nodecl> end
global function wasm_trap_copy(a1: *wasm_trap_t): *wasm_trap_t <cimport,nodecl> end
global function wasm_trap_same(a1: *wasm_trap_t, a2: *wasm_trap_t): boolean <cimport,nodecl> end
global function wasm_trap_get_host_info(a1: *wasm_trap_t): pointer <cimport,nodecl> end
global function wasm_trap_set_host_info(a1: *wasm_trap_t, a2: pointer): void <cimport,nodecl> end
global function wasm_trap_set_host_info_with_finalizer(a1: *wasm_trap_t, a2: pointer, a3: function(pointer): void): void <cimport,nodecl> end
global function wasm_trap_as_ref(a1: *wasm_trap_t): *wasm_ref_t <cimport,nodecl> end
global function wasm_ref_as_trap(a1: *wasm_ref_t): *wasm_trap_t <cimport,nodecl> end
global function wasm_trap_as_ref_const(a1: *wasm_trap_t): *wasm_ref_t <cimport,nodecl> end
global function wasm_ref_as_trap_const(a1: *wasm_ref_t): *wasm_trap_t <cimport,nodecl> end
global function wasm_trap_new(store: *wasm_store_t, a2: *wasm_message_t): *wasm_trap_t <cimport,nodecl> end
global function wasm_trap_message(a1: *wasm_trap_t, out: *wasm_message_t): void <cimport,nodecl> end
global function wasm_trap_origin(a1: *wasm_trap_t): *wasm_frame_t <cimport,nodecl> end
global function wasm_trap_trace(a1: *wasm_trap_t, out: *wasm_frame_vec_t): void <cimport,nodecl> end
global wasm_foreign_t: type <cimport,nodecl,forwarddecl> = @record{}
global function wasm_foreign_delete(a1: *wasm_foreign_t): void <cimport,nodecl> end
global function wasm_foreign_copy(a1: *wasm_foreign_t): *wasm_foreign_t <cimport,nodecl> end
global function wasm_foreign_same(a1: *wasm_foreign_t, a2: *wasm_foreign_t): boolean <cimport,nodecl> end
global function wasm_foreign_get_host_info(a1: *wasm_foreign_t): pointer <cimport,nodecl> end
global function wasm_foreign_set_host_info(a1: *wasm_foreign_t, a2: pointer): void <cimport,nodecl> end
global function wasm_foreign_set_host_info_with_finalizer(a1: *wasm_foreign_t, a2: pointer, a3: function(pointer): void): void <cimport,nodecl> end
global function wasm_foreign_as_ref(a1: *wasm_foreign_t): *wasm_ref_t <cimport,nodecl> end
global function wasm_ref_as_foreign(a1: *wasm_ref_t): *wasm_foreign_t <cimport,nodecl> end
global function wasm_foreign_as_ref_const(a1: *wasm_foreign_t): *wasm_ref_t <cimport,nodecl> end
global function wasm_ref_as_foreign_const(a1: *wasm_ref_t): *wasm_foreign_t <cimport,nodecl> end
global function wasm_foreign_new(a1: *wasm_store_t): *wasm_foreign_t <cimport,nodecl> end
global WASMModuleCommon: type <cimport,nodecl,forwarddecl,ctypedef> = @record{}
global wasm_module_t: type = @*WASMModuleCommon
global function wasm_module_new(a1: *wasm_store_t, binary: *wasm_byte_vec_t): *wasm_module_t <cimport,nodecl> end
global function wasm_module_delete(a1: *wasm_module_t): void <cimport,nodecl> end
global function wasm_module_validate(a1: *wasm_store_t, binary: *wasm_byte_vec_t): boolean <cimport,nodecl> end
global function wasm_module_imports(a1: *wasm_module_t, out: *wasm_importtype_vec_t): void <cimport,nodecl> end
global function wasm_module_exports(a1: *wasm_module_t, out: *wasm_exporttype_vec_t): void <cimport,nodecl> end
global function wasm_module_serialize(a1: *wasm_module_t, out: *wasm_byte_vec_t): void <cimport,nodecl> end
global function wasm_module_deserialize(a1: *wasm_store_t, a2: *wasm_byte_vec_t): *wasm_module_t <cimport,nodecl> end
global wasm_shared_module_t: type = @*WASMModuleCommon
global function wasm_module_share(a1: *wasm_module_t): *wasm_shared_module_t <cimport,nodecl> end
global function wasm_module_obtain(a1: *wasm_store_t, a2: *wasm_shared_module_t): *wasm_module_t <cimport,nodecl> end
global function wasm_shared_module_delete(a1: *wasm_shared_module_t): void <cimport,nodecl> end
global wasm_func_t: type <cimport,nodecl,forwarddecl> = @record{}
global function wasm_func_delete(a1: *wasm_func_t): void <cimport,nodecl> end
global function wasm_func_copy(a1: *wasm_func_t): *wasm_func_t <cimport,nodecl> end
global function wasm_func_same(a1: *wasm_func_t, a2: *wasm_func_t): boolean <cimport,nodecl> end
global function wasm_func_get_host_info(a1: *wasm_func_t): pointer <cimport,nodecl> end
global function wasm_func_set_host_info(a1: *wasm_func_t, a2: pointer): void <cimport,nodecl> end
global function wasm_func_set_host_info_with_finalizer(a1: *wasm_func_t, a2: pointer, a3: function(pointer): void): void <cimport,nodecl> end
global function wasm_func_as_ref(a1: *wasm_func_t): *wasm_ref_t <cimport,nodecl> end
global function wasm_ref_as_func(a1: *wasm_ref_t): *wasm_func_t <cimport,nodecl> end
global function wasm_func_as_ref_const(a1: *wasm_func_t): *wasm_ref_t <cimport,nodecl> end
global function wasm_ref_as_func_const(a1: *wasm_ref_t): *wasm_func_t <cimport,nodecl> end
global wasm_func_callback_t: type <cimport,nodecl> = @function(*wasm_val_vec_t, *wasm_val_vec_t): *wasm_trap_t
global wasm_func_callback_with_env_t: type <cimport,nodecl> = @function(pointer, *wasm_val_vec_t, *wasm_val_vec_t): *wasm_trap_t
global function wasm_func_new(a1: *wasm_store_t, a2: *wasm_functype_t, a3: wasm_func_callback_t): *wasm_func_t <cimport,nodecl> end
global function wasm_func_new_with_env(a1: *wasm_store_t, type: *wasm_functype_t, a3: wasm_func_callback_with_env_t, env: pointer, finalizer: function(pointer): void): *wasm_func_t <cimport,nodecl> end
global function wasm_func_type(a1: *wasm_func_t): *wasm_functype_t <cimport,nodecl> end
global function wasm_func_param_arity(a1: *wasm_func_t): csize <cimport,nodecl> end
global function wasm_func_result_arity(a1: *wasm_func_t): csize <cimport,nodecl> end
global function wasm_func_call(a1: *wasm_func_t, args: *wasm_val_vec_t, results: *wasm_val_vec_t): *wasm_trap_t <cimport,nodecl> end
global wasm_global_t: type <cimport,nodecl,forwarddecl> = @record{}
global function wasm_global_delete(a1: *wasm_global_t): void <cimport,nodecl> end
global function wasm_global_copy(a1: *wasm_global_t): *wasm_global_t <cimport,nodecl> end
global function wasm_global_same(a1: *wasm_global_t, a2: *wasm_global_t): boolean <cimport,nodecl> end
global function wasm_global_get_host_info(a1: *wasm_global_t): pointer <cimport,nodecl> end
global function wasm_global_set_host_info(a1: *wasm_global_t, a2: pointer): void <cimport,nodecl> end
global function wasm_global_set_host_info_with_finalizer(a1: *wasm_global_t, a2: pointer, a3: function(pointer): void): void <cimport,nodecl> end
global function wasm_global_as_ref(a1: *wasm_global_t): *wasm_ref_t <cimport,nodecl> end
global function wasm_ref_as_global(a1: *wasm_ref_t): *wasm_global_t <cimport,nodecl> end
global function wasm_global_as_ref_const(a1: *wasm_global_t): *wasm_ref_t <cimport,nodecl> end
global function wasm_ref_as_global_const(a1: *wasm_ref_t): *wasm_global_t <cimport,nodecl> end
global function wasm_global_new(a1: *wasm_store_t, a2: *wasm_globaltype_t, a3: *wasm_val_t): *wasm_global_t <cimport,nodecl> end
global function wasm_global_type(a1: *wasm_global_t): *wasm_globaltype_t <cimport,nodecl> end
global function wasm_global_get(a1: *wasm_global_t, out: *wasm_val_t): void <cimport,nodecl> end
global function wasm_global_set(a1: *wasm_global_t, a2: *wasm_val_t): void <cimport,nodecl> end
global wasm_table_t: type <cimport,nodecl,forwarddecl> = @record{}
global function wasm_table_delete(a1: *wasm_table_t): void <cimport,nodecl> end
global function wasm_table_copy(a1: *wasm_table_t): *wasm_table_t <cimport,nodecl> end
global function wasm_table_same(a1: *wasm_table_t, a2: *wasm_table_t): boolean <cimport,nodecl> end
global function wasm_table_get_host_info(a1: *wasm_table_t): pointer <cimport,nodecl> end
global function wasm_table_set_host_info(a1: *wasm_table_t, a2: pointer): void <cimport,nodecl> end
global function wasm_table_set_host_info_with_finalizer(a1: *wasm_table_t, a2: pointer, a3: function(pointer): void): void <cimport,nodecl> end
global function wasm_table_as_ref(a1: *wasm_table_t): *wasm_ref_t <cimport,nodecl> end
global function wasm_ref_as_table(a1: *wasm_ref_t): *wasm_table_t <cimport,nodecl> end
global function wasm_table_as_ref_const(a1: *wasm_table_t): *wasm_ref_t <cimport,nodecl> end
global function wasm_ref_as_table_const(a1: *wasm_ref_t): *wasm_table_t <cimport,nodecl> end
global function wasm_table_new(a1: *wasm_store_t, a2: *wasm_tabletype_t, init: *wasm_ref_t): *wasm_table_t <cimport,nodecl> end
global function wasm_table_type(a1: *wasm_table_t): *wasm_tabletype_t <cimport,nodecl> end
global function wasm_table_get(a1: *wasm_table_t, index: cuint): *wasm_ref_t <cimport,nodecl> end
global function wasm_table_set(a1: *wasm_table_t, index: cuint, a3: *wasm_ref_t): boolean <cimport,nodecl> end
global function wasm_table_size(a1: *wasm_table_t): cuint <cimport,nodecl> end
global function wasm_table_grow(a1: *wasm_table_t, delta: cuint, init: *wasm_ref_t): boolean <cimport,nodecl> end
global wasm_memory_t: type <cimport,nodecl,forwarddecl> = @record{}
global function wasm_memory_delete(a1: *wasm_memory_t): void <cimport,nodecl> end
global function wasm_memory_copy(a1: *wasm_memory_t): *wasm_memory_t <cimport,nodecl> end
global function wasm_memory_same(a1: *wasm_memory_t, a2: *wasm_memory_t): boolean <cimport,nodecl> end
global function wasm_memory_get_host_info(a1: *wasm_memory_t): pointer <cimport,nodecl> end
global function wasm_memory_set_host_info(a1: *wasm_memory_t, a2: pointer): void <cimport,nodecl> end
global function wasm_memory_set_host_info_with_finalizer(a1: *wasm_memory_t, a2: pointer, a3: function(pointer): void): void <cimport,nodecl> end
global function wasm_memory_as_ref(a1: *wasm_memory_t): *wasm_ref_t <cimport,nodecl> end
global function wasm_ref_as_memory(a1: *wasm_ref_t): *wasm_memory_t <cimport,nodecl> end
global function wasm_memory_as_ref_const(a1: *wasm_memory_t): *wasm_ref_t <cimport,nodecl> end
global function wasm_ref_as_memory_const(a1: *wasm_ref_t): *wasm_memory_t <cimport,nodecl> end
global function wasm_memory_new(a1: *wasm_store_t, a2: *wasm_memorytype_t): *wasm_memory_t <cimport,nodecl> end
global function wasm_memory_type(a1: *wasm_memory_t): *wasm_memorytype_t <cimport,nodecl> end
global function wasm_memory_data(a1: *wasm_memory_t): cstring <cimport,nodecl> end
global function wasm_memory_data_size(a1: *wasm_memory_t): csize <cimport,nodecl> end
global function wasm_memory_size(a1: *wasm_memory_t): cuint <cimport,nodecl> end
global function wasm_memory_grow(a1: *wasm_memory_t, delta: cuint): boolean <cimport,nodecl> end
global wasm_extern_t: type <cimport,nodecl,forwarddecl> = @record{}
global function wasm_extern_delete(a1: *wasm_extern_t): void <cimport,nodecl> end
global function wasm_extern_copy(a1: *wasm_extern_t): *wasm_extern_t <cimport,nodecl> end
global function wasm_extern_same(a1: *wasm_extern_t, a2: *wasm_extern_t): boolean <cimport,nodecl> end
global function wasm_extern_get_host_info(a1: *wasm_extern_t): pointer <cimport,nodecl> end
global function wasm_extern_set_host_info(a1: *wasm_extern_t, a2: pointer): void <cimport,nodecl> end
global function wasm_extern_set_host_info_with_finalizer(a1: *wasm_extern_t, a2: pointer, a3: function(pointer): void): void <cimport,nodecl> end
global function wasm_extern_as_ref(a1: *wasm_extern_t): *wasm_ref_t <cimport,nodecl> end
global function wasm_ref_as_extern(a1: *wasm_ref_t): *wasm_extern_t <cimport,nodecl> end
global function wasm_extern_as_ref_const(a1: *wasm_extern_t): *wasm_ref_t <cimport,nodecl> end
global function wasm_ref_as_extern_const(a1: *wasm_ref_t): *wasm_extern_t <cimport,nodecl> end
global wasm_extern_vec_t: type <cimport,nodecl> = @record{
  size: csize,
  data: **wasm_extern_t,
  num_elems: csize,
  size_of_elem: csize,
  lock: pointer
}
global function wasm_extern_vec_new_empty(out: *wasm_extern_vec_t): void <cimport,nodecl> end
global function wasm_extern_vec_new_uninitialized(out: *wasm_extern_vec_t, a2: csize): void <cimport,nodecl> end
global function wasm_extern_vec_new(out: *wasm_extern_vec_t, a2: csize, a3: **wasm_extern_t): void <cimport,nodecl> end
global function wasm_extern_vec_copy(out: *wasm_extern_vec_t, a2: *wasm_extern_vec_t): void <cimport,nodecl> end
global function wasm_extern_vec_delete(a1: *wasm_extern_vec_t): void <cimport,nodecl> end
global function wasm_extern_kind(a1: *wasm_extern_t): cuchar <cimport,nodecl> end
global function wasm_extern_type(a1: *wasm_extern_t): *wasm_externtype_t <cimport,nodecl> end
global function wasm_func_as_extern(a1: *wasm_func_t): *wasm_extern_t <cimport,nodecl> end
global function wasm_global_as_extern(a1: *wasm_global_t): *wasm_extern_t <cimport,nodecl> end
global function wasm_table_as_extern(a1: *wasm_table_t): *wasm_extern_t <cimport,nodecl> end
global function wasm_memory_as_extern(a1: *wasm_memory_t): *wasm_extern_t <cimport,nodecl> end
global function wasm_extern_as_func(a1: *wasm_extern_t): *wasm_func_t <cimport,nodecl> end
global function wasm_extern_as_global(a1: *wasm_extern_t): *wasm_global_t <cimport,nodecl> end
global function wasm_extern_as_table(a1: *wasm_extern_t): *wasm_table_t <cimport,nodecl> end
global function wasm_extern_as_memory(a1: *wasm_extern_t): *wasm_memory_t <cimport,nodecl> end
global function wasm_func_as_extern_const(a1: *wasm_func_t): *wasm_extern_t <cimport,nodecl> end
global function wasm_global_as_extern_const(a1: *wasm_global_t): *wasm_extern_t <cimport,nodecl> end
global function wasm_table_as_extern_const(a1: *wasm_table_t): *wasm_extern_t <cimport,nodecl> end
global function wasm_memory_as_extern_const(a1: *wasm_memory_t): *wasm_extern_t <cimport,nodecl> end
global function wasm_extern_as_func_const(a1: *wasm_extern_t): *wasm_func_t <cimport,nodecl> end
global function wasm_extern_as_global_const(a1: *wasm_extern_t): *wasm_global_t <cimport,nodecl> end
global function wasm_extern_as_table_const(a1: *wasm_extern_t): *wasm_table_t <cimport,nodecl> end
global function wasm_extern_as_memory_const(a1: *wasm_extern_t): *wasm_memory_t <cimport,nodecl> end
global function wasm_instance_delete(a1: *wasm_instance_t): void <cimport,nodecl> end
global function wasm_instance_copy(a1: *wasm_instance_t): *wasm_instance_t <cimport,nodecl> end
global function wasm_instance_same(a1: *wasm_instance_t, a2: *wasm_instance_t): boolean <cimport,nodecl> end
global function wasm_instance_get_host_info(a1: *wasm_instance_t): pointer <cimport,nodecl> end
global function wasm_instance_set_host_info(a1: *wasm_instance_t, a2: pointer): void <cimport,nodecl> end
global function wasm_instance_set_host_info_with_finalizer(a1: *wasm_instance_t, a2: pointer, a3: function(pointer): void): void <cimport,nodecl> end
global function wasm_instance_as_ref(a1: *wasm_instance_t): *wasm_ref_t <cimport,nodecl> end
global function wasm_ref_as_instance(a1: *wasm_ref_t): *wasm_instance_t <cimport,nodecl> end
global function wasm_instance_as_ref_const(a1: *wasm_instance_t): *wasm_ref_t <cimport,nodecl> end
global function wasm_ref_as_instance_const(a1: *wasm_ref_t): *wasm_instance_t <cimport,nodecl> end
global function wasm_instance_new(a1: *wasm_store_t, a2: *wasm_module_t, imports: *wasm_extern_vec_t, trap: **wasm_trap_t): *wasm_instance_t <cimport,nodecl> end
global function wasm_instance_new_with_args(a1: *wasm_store_t, a2: *wasm_module_t, imports: *wasm_extern_vec_t, trap: **wasm_trap_t, stack_size: uint32, heap_size: uint32): *wasm_instance_t <cimport,nodecl> end
global function wasm_instance_exports(a1: *wasm_instance_t, out: *wasm_extern_vec_t): void <cimport,nodecl> end
global function wasm_valtype_new_i32(): *wasm_valtype_t <cimport,nodecl> end
global function wasm_valtype_new_i64(): *wasm_valtype_t <cimport,nodecl> end
global function wasm_valtype_new_f32(): *wasm_valtype_t <cimport,nodecl> end
global function wasm_valtype_new_f64(): *wasm_valtype_t <cimport,nodecl> end
global function wasm_valtype_new_anyref(): *wasm_valtype_t <cimport,nodecl> end
global function wasm_valtype_new_funcref(): *wasm_valtype_t <cimport,nodecl> end
global function wasm_functype_new_0_0(): *wasm_functype_t <cimport,nodecl> end
global function wasm_functype_new_1_0(p: *wasm_valtype_t): *wasm_functype_t <cimport,nodecl> end
global function wasm_functype_new_2_0(p1: *wasm_valtype_t, p2: *wasm_valtype_t): *wasm_functype_t <cimport,nodecl> end
global function wasm_functype_new_3_0(p1: *wasm_valtype_t, p2: *wasm_valtype_t, p3: *wasm_valtype_t): *wasm_functype_t <cimport,nodecl> end
global function wasm_functype_new_0_1(r: *wasm_valtype_t): *wasm_functype_t <cimport,nodecl> end
global function wasm_functype_new_1_1(p: *wasm_valtype_t, r: *wasm_valtype_t): *wasm_functype_t <cimport,nodecl> end
global function wasm_functype_new_2_1(p1: *wasm_valtype_t, p2: *wasm_valtype_t, r: *wasm_valtype_t): *wasm_functype_t <cimport,nodecl> end
global function wasm_functype_new_3_1(p1: *wasm_valtype_t, p2: *wasm_valtype_t, p3: *wasm_valtype_t, r: *wasm_valtype_t): *wasm_functype_t <cimport,nodecl> end
global function wasm_functype_new_0_2(r1: *wasm_valtype_t, r2: *wasm_valtype_t): *wasm_functype_t <cimport,nodecl> end
global function wasm_functype_new_1_2(p: *wasm_valtype_t, r1: *wasm_valtype_t, r2: *wasm_valtype_t): *wasm_functype_t <cimport,nodecl> end
global function wasm_functype_new_2_2(p1: *wasm_valtype_t, p2: *wasm_valtype_t, r1: *wasm_valtype_t, r2: *wasm_valtype_t): *wasm_functype_t <cimport,nodecl> end
global function wasm_functype_new_3_2(p1: *wasm_valtype_t, p2: *wasm_valtype_t, p3: *wasm_valtype_t, r1: *wasm_valtype_t, r2: *wasm_valtype_t): *wasm_functype_t <cimport,nodecl> end
global function wasm_val_init_ptr(out: *wasm_val_t, p: pointer): void <cimport,nodecl> end
global function wasm_val_ptr(val: *wasm_val_t): pointer <cimport,nodecl> end
global NativeSymbol: type <cimport,nodecl> = @record{
  symbol: cstring,
  func_ptr: pointer,
  signature: cstring,
  attachment: pointer
}
global WASMModuleInstanceCommon: type <cimport,nodecl,forwarddecl,ctypedef> = @record{}
global wasm_module_inst_t: type = @*WASMModuleInstanceCommon
global wasm_function_inst_t: type = @pointer
global wasm_section_t: type <cimport,nodecl,forwarddecl> = @record{}
wasm_section_t = @record{
  next: *wasm_section_t,
  section_type: cint,
  section_body: *uint8,
  section_body_size: uint32
}
global wasm_section_list_t: type = @*wasm_section_t
global WASMExecEnv: type <cimport,nodecl,forwarddecl,ctypedef> = @record{}
global wasm_exec_env_t: type = @*WASMExecEnv
global RuntimeInitArgs: type <cimport,nodecl> = @record{
  mem_alloc_type: mem_alloc_type_t,
  mem_alloc_option: MemAllocOption,
  native_module_name: cstring,
  native_symbols: *NativeSymbol,
  n_native_symbols: uint32,
  max_thread_num: uint32,
  ip_addr: [128]cchar,
  unused: cint,
  instance_port: cint,
  fast_jit_code_cache_size: uint32
}
global function wasm_runtime_init(): boolean <cimport,nodecl> end
global function wasm_runtime_full_init(init_args: *RuntimeInitArgs): boolean <cimport,nodecl> end
global function wasm_runtime_destroy(): void <cimport,nodecl> end
global function wasm_runtime_malloc(size: cuint): pointer <cimport,nodecl> end
global function wasm_runtime_realloc(ptr: pointer, size: cuint): pointer <cimport,nodecl> end
global function wasm_runtime_free(ptr: pointer): void <cimport,nodecl> end
global function wasm_runtime_get_mem_alloc_info(mem_alloc_info: *mem_alloc_info_t): boolean <cimport,nodecl> end
global function wasm_runtime_is_xip_file(buf: *uint8, size: uint32): boolean <cimport,nodecl> end
global function wasm_runtime_set_module_reader(reader: function(cstring, **uint8, *uint32): boolean, destroyer: function(*uint8, uint32): void): void <cimport,nodecl> end
global function wasm_runtime_register_module(module_name: cstring, module: wasm_module_t, error_buf: cstring, error_buf_size: uint32): boolean <cimport,nodecl> end
global function wasm_runtime_find_module_registered(module_name: cstring): wasm_module_t <cimport,nodecl> end
global function wasm_runtime_load(buf: *uint8, size: uint32, error_buf: cstring, error_buf_size: uint32): wasm_module_t <cimport,nodecl> end
global function wasm_runtime_load_from_sections(section_list: wasm_section_list_t, is_aot: boolean, error_buf: cstring, error_buf_size: uint32): wasm_module_t <cimport,nodecl> end
global function wasm_runtime_unload(module: wasm_module_t): void <cimport,nodecl> end
global function wasm_runtime_get_module_hash(module: wasm_module_t): cstring <cimport,nodecl> end
global function wasm_runtime_set_wasi_args_ex(module: wasm_module_t, dir_list: *cstring, dir_count: uint32, map_dir_list: *cstring, map_dir_count: uint32, env: *cstring, env_count: uint32, argv: *cstring, argc: cint, stdinfd: cint, stdoutfd: cint, stderrfd: cint): void <cimport,nodecl> end
global function wasm_runtime_set_wasi_args(module: wasm_module_t, dir_list: *cstring, dir_count: uint32, map_dir_list: *cstring, map_dir_count: uint32, env: *cstring, env_count: uint32, argv: *cstring, argc: cint): void <cimport,nodecl> end
global function wasm_runtime_set_wasi_addr_pool(module: wasm_module_t, addr_pool: *cstring, addr_pool_size: uint32): void <cimport,nodecl> end
global function wasm_runtime_set_wasi_ns_lookup_pool(module: wasm_module_t, ns_lookup_pool: *cstring, ns_lookup_pool_size: uint32): void <cimport,nodecl> end
global function wasm_runtime_instantiate(module: wasm_module_t, stack_size: uint32, heap_size: uint32, error_buf: cstring, error_buf_size: uint32): wasm_module_inst_t <cimport,nodecl> end
global function wasm_runtime_deinstantiate(module_inst: wasm_module_inst_t): void <cimport,nodecl> end
global function wasm_runtime_get_module(module_inst: wasm_module_inst_t): wasm_module_t <cimport,nodecl> end
global function wasm_runtime_is_wasi_mode(module_inst: wasm_module_inst_t): boolean <cimport,nodecl> end
global function wasm_runtime_lookup_wasi_start_function(module_inst: wasm_module_inst_t): wasm_function_inst_t <cimport,nodecl> end
global function wasm_runtime_get_wasi_exit_code(module_inst: wasm_module_inst_t): uint32 <cimport,nodecl> end
global function wasm_runtime_lookup_function(module_inst: wasm_module_inst_t, name: cstring, signature: cstring): wasm_function_inst_t <cimport,nodecl> end
global function wasm_func_get_param_count(func_inst: wasm_function_inst_t, module_inst: wasm_module_inst_t): uint32 <cimport,nodecl> end
global function wasm_func_get_result_count(func_inst: wasm_function_inst_t, module_inst: wasm_module_inst_t): uint32 <cimport,nodecl> end
global function wasm_func_get_param_types(func_inst: wasm_function_inst_t, module_inst: wasm_module_inst_t, param_types: *cuchar): void <cimport,nodecl> end
global function wasm_func_get_result_types(func_inst: wasm_function_inst_t, module_inst: wasm_module_inst_t, result_types: *cuchar): void <cimport,nodecl> end
global function wasm_runtime_create_exec_env(module_inst: wasm_module_inst_t, stack_size: uint32): wasm_exec_env_t <cimport,nodecl> end
global function wasm_runtime_destroy_exec_env(exec_env: wasm_exec_env_t): void <cimport,nodecl> end
global function wasm_runtime_get_exec_env_singleton(module_inst: wasm_module_inst_t): wasm_exec_env_t <cimport,nodecl> end
global function wasm_runtime_start_debug_instance_with_port(exec_env: wasm_exec_env_t, port: int32): uint32 <cimport,nodecl> end
global function wasm_runtime_start_debug_instance(exec_env: wasm_exec_env_t): uint32 <cimport,nodecl> end
global function wasm_runtime_init_thread_env(): boolean <cimport,nodecl> end
global function wasm_runtime_destroy_thread_env(): void <cimport,nodecl> end
global function wasm_runtime_thread_env_inited(): boolean <cimport,nodecl> end
global function wasm_runtime_get_module_inst(exec_env: wasm_exec_env_t): wasm_module_inst_t <cimport,nodecl> end
global function wasm_runtime_set_module_inst(exec_env: wasm_exec_env_t, module_inst: wasm_module_inst_t): void <cimport,nodecl> end
global function wasm_runtime_call_wasm(exec_env: wasm_exec_env_t, Function: wasm_function_inst_t, argc: uint32, argv: *uint32): boolean <cimport,nodecl> end
global function wasm_runtime_call_wasm_a(exec_env: wasm_exec_env_t, Function: wasm_function_inst_t, num_results: uint32, results: *wasm_val_t, num_args: uint32, args: *wasm_val_t): boolean <cimport,nodecl> end
global function wasm_runtime_call_wasm_v(exec_env: wasm_exec_env_t, Function: wasm_function_inst_t, num_results: uint32, results: *wasm_val_t, num_args: uint32, ...: cvarargs): boolean <cimport,nodecl> end
global function wasm_application_execute_main(module_inst: wasm_module_inst_t, argc: int32, argv: *cstring): boolean <cimport,nodecl> end
global function wasm_application_execute_func(module_inst: wasm_module_inst_t, name: cstring, argc: int32, argv: *cstring): boolean <cimport,nodecl> end
global function wasm_runtime_get_exception(module_inst: wasm_module_inst_t): cstring <cimport,nodecl> end
global function wasm_runtime_set_exception(module_inst: wasm_module_inst_t, exception: cstring): void <cimport,nodecl> end
global function wasm_runtime_clear_exception(module_inst: wasm_module_inst_t): void <cimport,nodecl> end
global function wasm_runtime_set_custom_data(module_inst: wasm_module_inst_t, custom_data: pointer): void <cimport,nodecl> end
global function wasm_runtime_get_custom_data(module_inst: wasm_module_inst_t): pointer <cimport,nodecl> end
global function wasm_runtime_module_malloc(module_inst: wasm_module_inst_t, size: uint32, p_native_addr: *pointer): uint32 <cimport,nodecl> end
global function wasm_runtime_module_free(module_inst: wasm_module_inst_t, ptr: uint32): void <cimport,nodecl> end
global function wasm_runtime_module_dup_data(module_inst: wasm_module_inst_t, src: cstring, size: uint32): uint32 <cimport,nodecl> end
global function wasm_runtime_validate_app_addr(module_inst: wasm_module_inst_t, app_offset: uint32, size: uint32): boolean <cimport,nodecl> end
global function wasm_runtime_validate_app_str_addr(module_inst: wasm_module_inst_t, app_str_offset: uint32): boolean <cimport,nodecl> end
global function wasm_runtime_validate_native_addr(module_inst: wasm_module_inst_t, native_ptr: pointer, size: uint32): boolean <cimport,nodecl> end
global function wasm_runtime_addr_app_to_native(module_inst: wasm_module_inst_t, app_offset: uint32): pointer <cimport,nodecl> end
global function wasm_runtime_addr_native_to_app(module_inst: wasm_module_inst_t, native_ptr: pointer): uint32 <cimport,nodecl> end
global function wasm_runtime_get_app_addr_range(module_inst: wasm_module_inst_t, app_offset: uint32, p_app_start_offset: *uint32, p_app_end_offset: *uint32): boolean <cimport,nodecl> end
global function wasm_runtime_get_native_addr_range(module_inst: wasm_module_inst_t, native_ptr: *uint8, p_native_start_addr: **uint8, p_native_end_addr: **uint8): boolean <cimport,nodecl> end
global function wasm_runtime_register_natives(module_name: cstring, native_symbols: *NativeSymbol, n_native_symbols: uint32): boolean <cimport,nodecl> end
global function wasm_runtime_register_natives_raw(module_name: cstring, native_symbols: *NativeSymbol, n_native_symbols: uint32): boolean <cimport,nodecl> end
global function wasm_runtime_unregister_natives(module_name: cstring, native_symbols: *NativeSymbol): boolean <cimport,nodecl> end
global function wasm_runtime_get_function_attachment(exec_env: wasm_exec_env_t): pointer <cimport,nodecl> end
global function wasm_runtime_set_user_data(exec_env: wasm_exec_env_t, user_data: pointer): void <cimport,nodecl> end
global function wasm_runtime_get_user_data(exec_env: wasm_exec_env_t): pointer <cimport,nodecl> end
global function wasm_runtime_dump_mem_consumption(exec_env: wasm_exec_env_t): void <cimport,nodecl> end
global function wasm_runtime_dump_perf_profiling(module_inst: wasm_module_inst_t): void <cimport,nodecl> end
global wasm_thread_callback_t: type <cimport,nodecl> = @function(wasm_exec_env_t, pointer): pointer
global function wasm_runtime_set_max_thread_num(num: uint32): void <cimport,nodecl> end
global function wasm_runtime_spawn_exec_env(exec_env: wasm_exec_env_t): wasm_exec_env_t <cimport,nodecl> end
global function wasm_runtime_destroy_spawned_exec_env(exec_env: wasm_exec_env_t): void <cimport,nodecl> end
global function wasm_runtime_spawn_thread(exec_env: wasm_exec_env_t, tid: *culong, callback: wasm_thread_callback_t, arg: pointer): int32 <cimport,nodecl> end
global function wasm_runtime_join_thread(tid: culong, retval: *pointer): int32 <cimport,nodecl> end
global function wasm_externref_obj2ref(module_inst: wasm_module_inst_t, extern_obj: pointer, p_externref_idx: *uint32): boolean <cimport,nodecl> end
global function wasm_externref_ref2obj(externref_idx: uint32, p_extern_obj: *pointer): boolean <cimport,nodecl> end
global function wasm_externref_retain(externref_idx: uint32): boolean <cimport,nodecl> end
global function wasm_runtime_dump_call_stack(exec_env: wasm_exec_env_t): void <cimport,nodecl> end
global function wasm_runtime_get_call_stack_buf_size(exec_env: wasm_exec_env_t): uint32 <cimport,nodecl> end
global function wasm_runtime_dump_call_stack_to_buf(exec_env: wasm_exec_env_t, buf: cstring, len: uint32): uint32 <cimport,nodecl> end
global function wasm_runtime_get_custom_section(module_comm: wasm_module_t, name: cstring, len: *uint32): *uint8 <cimport,nodecl> end
global function wasm_runtime_get_version(major: *uint32, minor: *uint32, patch: *uint32): void <cimport,nodecl> end
