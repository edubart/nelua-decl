##[[
cinclude '<mbedtls/aes.h>'
cinclude '<mbedtls/aesni.h>'
cinclude '<mbedtls/arc4.h>'
cinclude '<mbedtls/aria.h>'
cinclude '<mbedtls/asn1.h>'
cinclude '<mbedtls/asn1write.h>'
cinclude '<mbedtls/base64.h>'
cinclude '<mbedtls/bignum.h>'
cinclude '<mbedtls/blowfish.h>'
cinclude '<mbedtls/bn_mul.h>'
cinclude '<mbedtls/camellia.h>'
cinclude '<mbedtls/ccm.h>'
cinclude '<mbedtls/ccm.h>'
cinclude '<mbedtls/certs.h>'
cinclude '<mbedtls/chacha20.h>'
cinclude '<mbedtls/chachapoly.h>'
cinclude '<mbedtls/cipher.h>'
cinclude '<mbedtls/cmac.h>'
cinclude '<mbedtls/ctr_drbg.h>'
cinclude '<mbedtls/debug.h>'
cinclude '<mbedtls/des.h>'
cinclude '<mbedtls/dhm.h>'
cinclude '<mbedtls/ecdh.h>'
cinclude '<mbedtls/ecdsa.h>'
cinclude '<mbedtls/ecjpake.h>'
cinclude '<mbedtls/ecp.h>'
cinclude '<mbedtls/entropy.h>'
cinclude '<mbedtls/entropy_poll.h>'
cinclude '<mbedtls/error.h>'
cinclude '<mbedtls/gcm.h>'
cinclude '<mbedtls/havege.h>'
cinclude '<mbedtls/hkdf.h>'
cinclude '<mbedtls/hmac_drbg.h>'
cinclude '<mbedtls/md2.h>'
cinclude '<mbedtls/md4.h>'
cinclude '<mbedtls/md5.h>'
cinclude '<mbedtls/md.h>'
cinclude '<mbedtls/net_sockets.h>'
cinclude '<mbedtls/nist_kw.h>'
cinclude '<mbedtls/oid.h>'
cinclude '<mbedtls/padlock.h>'
cinclude '<mbedtls/pem.h>'
cinclude '<mbedtls/pkcs11.h>'
cinclude '<mbedtls/pkcs12.h>'
cinclude '<mbedtls/pkcs5.h>'
cinclude '<mbedtls/pk.h>'
cinclude '<mbedtls/platform.h>'
cinclude '<mbedtls/platform_time.h>'
cinclude '<mbedtls/platform_util.h>'
cinclude '<mbedtls/poly1305.h>'
cinclude '<mbedtls/psa_util.h>'
cinclude '<mbedtls/ripemd160.h>'
cinclude '<mbedtls/rsa.h>'
cinclude '<mbedtls/sha1.h>'
cinclude '<mbedtls/sha256.h>'
cinclude '<mbedtls/sha512.h>'
cinclude '<mbedtls/ssl_cache.h>'
cinclude '<mbedtls/ssl_ciphersuites.h>'
cinclude '<mbedtls/ssl_cookie.h>'
cinclude '<mbedtls/ssl.h>'
cinclude '<mbedtls/ssl_ticket.h>'
cinclude '<mbedtls/threading.h>'
cinclude '<mbedtls/timing.h>'
cinclude '<mbedtls/version.h>'
cinclude '<mbedtls/x509_crl.h>'
cinclude '<mbedtls/x509_crt.h>'
cinclude '<mbedtls/x509_csr.h>'
cinclude '<mbedtls/x509.h>'
cinclude '<mbedtls/xtea.h>'
linklib 'mbedcrypto'
linklib 'mbedtls'
linklib 'mbedx509'
]]
global tm: type <cimport,nodecl,ctypedef> = @record{
  tm_sec: cint,
  tm_min: cint,
  tm_hour: cint,
  tm_mday: cint,
  tm_mon: cint,
  tm_year: cint,
  tm_wday: cint,
  tm_yday: cint,
  tm_isdst: cint,
  tm_gmtoff: clong,
  tm_zone: cstring
}
global function mbedtls_platform_zeroize(buf: pointer, len: csize): void <cimport,nodecl> end
global function mbedtls_platform_gmtime_r(tt: *clong, tm_buf: *tm): *tm <cimport,nodecl> end
global mbedtls_aes_context: type <cimport,nodecl> = @record{
  nr: cint,
  rk: *uint32,
  buf: [68]uint32
}
global mbedtls_aes_xts_context: type <cimport,nodecl> = @record{
  crypt: mbedtls_aes_context,
  tweak: mbedtls_aes_context
}
global function mbedtls_aes_init(ctx: *mbedtls_aes_context): void <cimport,nodecl> end
global function mbedtls_aes_free(ctx: *mbedtls_aes_context): void <cimport,nodecl> end
global function mbedtls_aes_xts_init(ctx: *mbedtls_aes_xts_context): void <cimport,nodecl> end
global function mbedtls_aes_xts_free(ctx: *mbedtls_aes_xts_context): void <cimport,nodecl> end
global function mbedtls_aes_setkey_enc(ctx: *mbedtls_aes_context, key: *cuchar, keybits: cuint): cint <cimport,nodecl> end
global function mbedtls_aes_setkey_dec(ctx: *mbedtls_aes_context, key: *cuchar, keybits: cuint): cint <cimport,nodecl> end
global function mbedtls_aes_xts_setkey_enc(ctx: *mbedtls_aes_xts_context, key: *cuchar, keybits: cuint): cint <cimport,nodecl> end
global function mbedtls_aes_xts_setkey_dec(ctx: *mbedtls_aes_xts_context, key: *cuchar, keybits: cuint): cint <cimport,nodecl> end
global function mbedtls_aes_crypt_ecb(ctx: *mbedtls_aes_context, mode: cint, input: *cuchar, output: *cuchar): cint <cimport,nodecl> end
global function mbedtls_aes_crypt_cbc(ctx: *mbedtls_aes_context, mode: cint, length: csize, iv: *cuchar, input: *cuchar, output: *cuchar): cint <cimport,nodecl> end
global function mbedtls_aes_crypt_xts(ctx: *mbedtls_aes_xts_context, mode: cint, length: csize, data_unit: *cuchar, input: *cuchar, output: *cuchar): cint <cimport,nodecl> end
global function mbedtls_aes_crypt_cfb128(ctx: *mbedtls_aes_context, mode: cint, length: csize, iv_off: *csize, iv: *cuchar, input: *cuchar, output: *cuchar): cint <cimport,nodecl> end
global function mbedtls_aes_crypt_cfb8(ctx: *mbedtls_aes_context, mode: cint, length: csize, iv: *cuchar, input: *cuchar, output: *cuchar): cint <cimport,nodecl> end
global function mbedtls_aes_crypt_ofb(ctx: *mbedtls_aes_context, length: csize, iv_off: *csize, iv: *cuchar, input: *cuchar, output: *cuchar): cint <cimport,nodecl> end
global function mbedtls_aes_crypt_ctr(ctx: *mbedtls_aes_context, length: csize, nc_off: *csize, nonce_counter: *cuchar, stream_block: *cuchar, input: *cuchar, output: *cuchar): cint <cimport,nodecl> end
global function mbedtls_internal_aes_encrypt(ctx: *mbedtls_aes_context, input: *cuchar, output: *cuchar): cint <cimport,nodecl> end
global function mbedtls_internal_aes_decrypt(ctx: *mbedtls_aes_context, input: *cuchar, output: *cuchar): cint <cimport,nodecl> end
global function mbedtls_aes_self_test(verbose: cint): cint <cimport,nodecl> end
global function mbedtls_aesni_has_support(what: cuint): cint <cimport,nodecl> end
global function mbedtls_aesni_crypt_ecb(ctx: *mbedtls_aes_context, mode: cint, input: *cuchar, output: *cuchar): cint <cimport,nodecl> end
global function mbedtls_aesni_gcm_mult(c: *cuchar, a: *cuchar, b: *cuchar): void <cimport,nodecl> end
global function mbedtls_aesni_inverse_key(invkey: *cuchar, fwdkey: *cuchar, nr: cint): void <cimport,nodecl> end
global function mbedtls_aesni_setkey_enc(rk: *cuchar, key: *cuchar, bits: csize): cint <cimport,nodecl> end
global mbedtls_arc4_context: type <cimport,nodecl> = @record{
  x: cint,
  y: cint,
  m: [256]cuchar
}
global function mbedtls_arc4_init(ctx: *mbedtls_arc4_context): void <cimport,nodecl> end
global function mbedtls_arc4_free(ctx: *mbedtls_arc4_context): void <cimport,nodecl> end
global function mbedtls_arc4_setup(ctx: *mbedtls_arc4_context, key: *cuchar, keylen: cuint): void <cimport,nodecl> end
global function mbedtls_arc4_crypt(ctx: *mbedtls_arc4_context, length: csize, input: *cuchar, output: *cuchar): cint <cimport,nodecl> end
global function mbedtls_arc4_self_test(verbose: cint): cint <cimport,nodecl> end
global mbedtls_aria_context: type <cimport,nodecl> = @record{
  nr: cuchar,
  rk: [17][4]uint32
}
global function mbedtls_aria_init(ctx: *mbedtls_aria_context): void <cimport,nodecl> end
global function mbedtls_aria_free(ctx: *mbedtls_aria_context): void <cimport,nodecl> end
global function mbedtls_aria_setkey_enc(ctx: *mbedtls_aria_context, key: *cuchar, keybits: cuint): cint <cimport,nodecl> end
global function mbedtls_aria_setkey_dec(ctx: *mbedtls_aria_context, key: *cuchar, keybits: cuint): cint <cimport,nodecl> end
global function mbedtls_aria_crypt_ecb(ctx: *mbedtls_aria_context, input: *cuchar, output: *cuchar): cint <cimport,nodecl> end
global function mbedtls_aria_crypt_cbc(ctx: *mbedtls_aria_context, mode: cint, length: csize, iv: *cuchar, input: *cuchar, output: *cuchar): cint <cimport,nodecl> end
global function mbedtls_aria_crypt_cfb128(ctx: *mbedtls_aria_context, mode: cint, length: csize, iv_off: *csize, iv: *cuchar, input: *cuchar, output: *cuchar): cint <cimport,nodecl> end
global function mbedtls_aria_crypt_ctr(ctx: *mbedtls_aria_context, length: csize, nc_off: *csize, nonce_counter: *cuchar, stream_block: *cuchar, input: *cuchar, output: *cuchar): cint <cimport,nodecl> end
global function mbedtls_aria_self_test(verbose: cint): cint <cimport,nodecl> end
global FILE: type <cimport,nodecl,forwarddecl> = @record{}
global mbedtls_mpi: type <cimport,nodecl> = @record{
  s: cint,
  n: csize,
  p: *culong
}
global function mbedtls_mpi_init(X: *mbedtls_mpi): void <cimport,nodecl> end
global function mbedtls_mpi_free(X: *mbedtls_mpi): void <cimport,nodecl> end
global function mbedtls_mpi_grow(X: *mbedtls_mpi, nblimbs: csize): cint <cimport,nodecl> end
global function mbedtls_mpi_shrink(X: *mbedtls_mpi, nblimbs: csize): cint <cimport,nodecl> end
global function mbedtls_mpi_copy(X: *mbedtls_mpi, Y: *mbedtls_mpi): cint <cimport,nodecl> end
global function mbedtls_mpi_swap(X: *mbedtls_mpi, Y: *mbedtls_mpi): void <cimport,nodecl> end
global function mbedtls_mpi_safe_cond_assign(X: *mbedtls_mpi, Y: *mbedtls_mpi, assign: cuchar): cint <cimport,nodecl> end
global function mbedtls_mpi_safe_cond_swap(X: *mbedtls_mpi, Y: *mbedtls_mpi, assign: cuchar): cint <cimport,nodecl> end
global function mbedtls_mpi_lset(X: *mbedtls_mpi, z: clong): cint <cimport,nodecl> end
global function mbedtls_mpi_get_bit(X: *mbedtls_mpi, pos: csize): cint <cimport,nodecl> end
global function mbedtls_mpi_set_bit(X: *mbedtls_mpi, pos: csize, val: cuchar): cint <cimport,nodecl> end
global function mbedtls_mpi_lsb(X: *mbedtls_mpi): csize <cimport,nodecl> end
global function mbedtls_mpi_bitlen(X: *mbedtls_mpi): csize <cimport,nodecl> end
global function mbedtls_mpi_size(X: *mbedtls_mpi): csize <cimport,nodecl> end
global function mbedtls_mpi_read_string(X: *mbedtls_mpi, radix: cint, s: cstring): cint <cimport,nodecl> end
global function mbedtls_mpi_write_string(X: *mbedtls_mpi, radix: cint, buf: cstring, buflen: csize, olen: *csize): cint <cimport,nodecl> end
global function mbedtls_mpi_read_file(X: *mbedtls_mpi, radix: cint, fin: *FILE): cint <cimport,nodecl> end
global function mbedtls_mpi_write_file(p: cstring, X: *mbedtls_mpi, radix: cint, fout: *FILE): cint <cimport,nodecl> end
global function mbedtls_mpi_read_binary(X: *mbedtls_mpi, buf: *cuchar, buflen: csize): cint <cimport,nodecl> end
global function mbedtls_mpi_read_binary_le(X: *mbedtls_mpi, buf: *cuchar, buflen: csize): cint <cimport,nodecl> end
global function mbedtls_mpi_write_binary(X: *mbedtls_mpi, buf: *cuchar, buflen: csize): cint <cimport,nodecl> end
global function mbedtls_mpi_write_binary_le(X: *mbedtls_mpi, buf: *cuchar, buflen: csize): cint <cimport,nodecl> end
global function mbedtls_mpi_shift_l(X: *mbedtls_mpi, count: csize): cint <cimport,nodecl> end
global function mbedtls_mpi_shift_r(X: *mbedtls_mpi, count: csize): cint <cimport,nodecl> end
global function mbedtls_mpi_cmp_abs(X: *mbedtls_mpi, Y: *mbedtls_mpi): cint <cimport,nodecl> end
global function mbedtls_mpi_cmp_mpi(X: *mbedtls_mpi, Y: *mbedtls_mpi): cint <cimport,nodecl> end
global function mbedtls_mpi_lt_mpi_ct(X: *mbedtls_mpi, Y: *mbedtls_mpi, ret: *cuint): cint <cimport,nodecl> end
global function mbedtls_mpi_cmp_int(X: *mbedtls_mpi, z: clong): cint <cimport,nodecl> end
global function mbedtls_mpi_add_abs(X: *mbedtls_mpi, A: *mbedtls_mpi, B: *mbedtls_mpi): cint <cimport,nodecl> end
global function mbedtls_mpi_sub_abs(X: *mbedtls_mpi, A: *mbedtls_mpi, B: *mbedtls_mpi): cint <cimport,nodecl> end
global function mbedtls_mpi_add_mpi(X: *mbedtls_mpi, A: *mbedtls_mpi, B: *mbedtls_mpi): cint <cimport,nodecl> end
global function mbedtls_mpi_sub_mpi(X: *mbedtls_mpi, A: *mbedtls_mpi, B: *mbedtls_mpi): cint <cimport,nodecl> end
global function mbedtls_mpi_add_int(X: *mbedtls_mpi, A: *mbedtls_mpi, b: clong): cint <cimport,nodecl> end
global function mbedtls_mpi_sub_int(X: *mbedtls_mpi, A: *mbedtls_mpi, b: clong): cint <cimport,nodecl> end
global function mbedtls_mpi_mul_mpi(X: *mbedtls_mpi, A: *mbedtls_mpi, B: *mbedtls_mpi): cint <cimport,nodecl> end
global function mbedtls_mpi_mul_int(X: *mbedtls_mpi, A: *mbedtls_mpi, b: culong): cint <cimport,nodecl> end
global function mbedtls_mpi_div_mpi(Q: *mbedtls_mpi, R: *mbedtls_mpi, A: *mbedtls_mpi, B: *mbedtls_mpi): cint <cimport,nodecl> end
global function mbedtls_mpi_div_int(Q: *mbedtls_mpi, R: *mbedtls_mpi, A: *mbedtls_mpi, b: clong): cint <cimport,nodecl> end
global function mbedtls_mpi_mod_mpi(R: *mbedtls_mpi, A: *mbedtls_mpi, B: *mbedtls_mpi): cint <cimport,nodecl> end
global function mbedtls_mpi_mod_int(r: *culong, A: *mbedtls_mpi, b: clong): cint <cimport,nodecl> end
global function mbedtls_mpi_exp_mod(X: *mbedtls_mpi, A: *mbedtls_mpi, E: *mbedtls_mpi, N: *mbedtls_mpi, prec_RR: *mbedtls_mpi): cint <cimport,nodecl> end
global function mbedtls_mpi_fill_random(X: *mbedtls_mpi, size: csize, f_rng: function(pointer, *cuchar, csize): cint, p_rng: pointer): cint <cimport,nodecl> end
global function mbedtls_mpi_random(X: *mbedtls_mpi, min: clong, N: *mbedtls_mpi, f_rng: function(pointer, *cuchar, csize): cint, p_rng: pointer): cint <cimport,nodecl> end
global function mbedtls_mpi_gcd(G: *mbedtls_mpi, A: *mbedtls_mpi, B: *mbedtls_mpi): cint <cimport,nodecl> end
global function mbedtls_mpi_inv_mod(X: *mbedtls_mpi, A: *mbedtls_mpi, N: *mbedtls_mpi): cint <cimport,nodecl> end
global function mbedtls_mpi_is_prime_ext(X: *mbedtls_mpi, rounds: cint, f_rng: function(pointer, *cuchar, csize): cint, p_rng: pointer): cint <cimport,nodecl> end
global mbedtls_mpi_gen_prime_flag_t: type <cimport,nodecl,using> = @enum(cint){
  MBEDTLS_MPI_GEN_PRIME_FLAG_DH = 1,
  MBEDTLS_MPI_GEN_PRIME_FLAG_LOW_ERR = 2
}
global function mbedtls_mpi_gen_prime(X: *mbedtls_mpi, nbits: csize, flags: cint, f_rng: function(pointer, *cuchar, csize): cint, p_rng: pointer): cint <cimport,nodecl> end
global function mbedtls_mpi_self_test(verbose: cint): cint <cimport,nodecl> end
global mbedtls_asn1_buf: type <cimport,nodecl> = @record{
  tag: cint,
  len: csize,
  p: *cuchar
}
global mbedtls_asn1_bitstring: type <cimport,nodecl> = @record{
  len: csize,
  unused_bits: cuchar,
  p: *cuchar
}
global mbedtls_asn1_sequence: type <cimport,nodecl,forwarddecl> = @record{}
mbedtls_asn1_sequence = @record{
  buf: mbedtls_asn1_buf,
  next: *mbedtls_asn1_sequence
}
global mbedtls_asn1_named_data: type <cimport,nodecl,forwarddecl> = @record{}
mbedtls_asn1_named_data = @record{
  oid: mbedtls_asn1_buf,
  val: mbedtls_asn1_buf,
  next: *mbedtls_asn1_named_data,
  next_merged: cuchar
}
global function mbedtls_asn1_get_len(p: **cuchar, End: *cuchar, len: *csize): cint <cimport,nodecl> end
global function mbedtls_asn1_get_tag(p: **cuchar, End: *cuchar, len: *csize, tag: cint): cint <cimport,nodecl> end
global function mbedtls_asn1_get_bool(p: **cuchar, End: *cuchar, val: *cint): cint <cimport,nodecl> end
global function mbedtls_asn1_get_int(p: **cuchar, End: *cuchar, val: *cint): cint <cimport,nodecl> end
global function mbedtls_asn1_get_enum(p: **cuchar, End: *cuchar, val: *cint): cint <cimport,nodecl> end
global function mbedtls_asn1_get_bitstring(p: **cuchar, End: *cuchar, bs: *mbedtls_asn1_bitstring): cint <cimport,nodecl> end
global function mbedtls_asn1_get_bitstring_null(p: **cuchar, End: *cuchar, len: *csize): cint <cimport,nodecl> end
global function mbedtls_asn1_get_sequence_of(p: **cuchar, End: *cuchar, cur: *mbedtls_asn1_sequence, tag: cint): cint <cimport,nodecl> end
global function mbedtls_asn1_sequence_free(seq: *mbedtls_asn1_sequence): void <cimport,nodecl> end
global function mbedtls_asn1_traverse_sequence_of(p: **cuchar, End: *cuchar, tag_must_mask: cuchar, tag_must_val: cuchar, tag_may_mask: cuchar, tag_may_val: cuchar, cb: function(pointer, cint, *cuchar, csize): cint, ctx: pointer): cint <cimport,nodecl> end
global function mbedtls_asn1_get_mpi(p: **cuchar, End: *cuchar, X: *mbedtls_mpi): cint <cimport,nodecl> end
global function mbedtls_asn1_get_alg(p: **cuchar, End: *cuchar, alg: *mbedtls_asn1_buf, params: *mbedtls_asn1_buf): cint <cimport,nodecl> end
global function mbedtls_asn1_get_alg_null(p: **cuchar, End: *cuchar, alg: *mbedtls_asn1_buf): cint <cimport,nodecl> end
global function mbedtls_asn1_find_named_data(list: *mbedtls_asn1_named_data, oid: cstring, len: csize): *mbedtls_asn1_named_data <cimport,nodecl> end
global function mbedtls_asn1_free_named_data(entry: *mbedtls_asn1_named_data): void <cimport,nodecl> end
global function mbedtls_asn1_free_named_data_list(head: **mbedtls_asn1_named_data): void <cimport,nodecl> end
global function mbedtls_asn1_write_len(p: **cuchar, start: *cuchar, len: csize): cint <cimport,nodecl> end
global function mbedtls_asn1_write_tag(p: **cuchar, start: *cuchar, tag: cuchar): cint <cimport,nodecl> end
global function mbedtls_asn1_write_raw_buffer(p: **cuchar, start: *cuchar, buf: *cuchar, size: csize): cint <cimport,nodecl> end
global function mbedtls_asn1_write_mpi(p: **cuchar, start: *cuchar, X: *mbedtls_mpi): cint <cimport,nodecl> end
global function mbedtls_asn1_write_null(p: **cuchar, start: *cuchar): cint <cimport,nodecl> end
global function mbedtls_asn1_write_oid(p: **cuchar, start: *cuchar, oid: cstring, oid_len: csize): cint <cimport,nodecl> end
global function mbedtls_asn1_write_algorithm_identifier(p: **cuchar, start: *cuchar, oid: cstring, oid_len: csize, par_len: csize): cint <cimport,nodecl> end
global function mbedtls_asn1_write_bool(p: **cuchar, start: *cuchar, boolean: cint): cint <cimport,nodecl> end
global function mbedtls_asn1_write_int(p: **cuchar, start: *cuchar, val: cint): cint <cimport,nodecl> end
global function mbedtls_asn1_write_enum(p: **cuchar, start: *cuchar, val: cint): cint <cimport,nodecl> end
global function mbedtls_asn1_write_tagged_string(p: **cuchar, start: *cuchar, tag: cint, text: cstring, text_len: csize): cint <cimport,nodecl> end
global function mbedtls_asn1_write_printable_string(p: **cuchar, start: *cuchar, text: cstring, text_len: csize): cint <cimport,nodecl> end
global function mbedtls_asn1_write_utf8_string(p: **cuchar, start: *cuchar, text: cstring, text_len: csize): cint <cimport,nodecl> end
global function mbedtls_asn1_write_ia5_string(p: **cuchar, start: *cuchar, text: cstring, text_len: csize): cint <cimport,nodecl> end
global function mbedtls_asn1_write_bitstring(p: **cuchar, start: *cuchar, buf: *cuchar, bits: csize): cint <cimport,nodecl> end
global function mbedtls_asn1_write_named_bitstring(p: **cuchar, start: *cuchar, buf: *cuchar, bits: csize): cint <cimport,nodecl> end
global function mbedtls_asn1_write_octet_string(p: **cuchar, start: *cuchar, buf: *cuchar, size: csize): cint <cimport,nodecl> end
global function mbedtls_asn1_store_named_data(list: **mbedtls_asn1_named_data, oid: cstring, oid_len: csize, val: *cuchar, val_len: csize): *mbedtls_asn1_named_data <cimport,nodecl> end
global function mbedtls_base64_encode(dst: *cuchar, dlen: csize, olen: *csize, src: *cuchar, slen: csize): cint <cimport,nodecl> end
global function mbedtls_base64_decode(dst: *cuchar, dlen: csize, olen: *csize, src: *cuchar, slen: csize): cint <cimport,nodecl> end
global function mbedtls_base64_self_test(verbose: cint): cint <cimport,nodecl> end
global mbedtls_blowfish_context: type <cimport,nodecl> = @record{
  P: [18]uint32,
  S: [4][256]uint32
}
global function mbedtls_blowfish_init(ctx: *mbedtls_blowfish_context): void <cimport,nodecl> end
global function mbedtls_blowfish_free(ctx: *mbedtls_blowfish_context): void <cimport,nodecl> end
global function mbedtls_blowfish_setkey(ctx: *mbedtls_blowfish_context, key: *cuchar, keybits: cuint): cint <cimport,nodecl> end
global function mbedtls_blowfish_crypt_ecb(ctx: *mbedtls_blowfish_context, mode: cint, input: *cuchar, output: *cuchar): cint <cimport,nodecl> end
global function mbedtls_blowfish_crypt_cbc(ctx: *mbedtls_blowfish_context, mode: cint, length: csize, iv: *cuchar, input: *cuchar, output: *cuchar): cint <cimport,nodecl> end
global function mbedtls_blowfish_crypt_cfb64(ctx: *mbedtls_blowfish_context, mode: cint, length: csize, iv_off: *csize, iv: *cuchar, input: *cuchar, output: *cuchar): cint <cimport,nodecl> end
global function mbedtls_blowfish_crypt_ctr(ctx: *mbedtls_blowfish_context, length: csize, nc_off: *csize, nonce_counter: *cuchar, stream_block: *cuchar, input: *cuchar, output: *cuchar): cint <cimport,nodecl> end
global mbedtls_camellia_context: type <cimport,nodecl> = @record{
  nr: cint,
  rk: [68]uint32
}
global function mbedtls_camellia_init(ctx: *mbedtls_camellia_context): void <cimport,nodecl> end
global function mbedtls_camellia_free(ctx: *mbedtls_camellia_context): void <cimport,nodecl> end
global function mbedtls_camellia_setkey_enc(ctx: *mbedtls_camellia_context, key: *cuchar, keybits: cuint): cint <cimport,nodecl> end
global function mbedtls_camellia_setkey_dec(ctx: *mbedtls_camellia_context, key: *cuchar, keybits: cuint): cint <cimport,nodecl> end
global function mbedtls_camellia_crypt_ecb(ctx: *mbedtls_camellia_context, mode: cint, input: *cuchar, output: *cuchar): cint <cimport,nodecl> end
global function mbedtls_camellia_crypt_cbc(ctx: *mbedtls_camellia_context, mode: cint, length: csize, iv: *cuchar, input: *cuchar, output: *cuchar): cint <cimport,nodecl> end
global function mbedtls_camellia_crypt_cfb128(ctx: *mbedtls_camellia_context, mode: cint, length: csize, iv_off: *csize, iv: *cuchar, input: *cuchar, output: *cuchar): cint <cimport,nodecl> end
global function mbedtls_camellia_crypt_ctr(ctx: *mbedtls_camellia_context, length: csize, nc_off: *csize, nonce_counter: *cuchar, stream_block: *cuchar, input: *cuchar, output: *cuchar): cint <cimport,nodecl> end
global function mbedtls_camellia_self_test(verbose: cint): cint <cimport,nodecl> end
global mbedtls_cipher_id_t: type <cimport,nodecl,using> = @enum(cint){
  MBEDTLS_CIPHER_ID_NONE = 0,
  MBEDTLS_CIPHER_ID_NULL = 1,
  MBEDTLS_CIPHER_ID_AES = 2,
  MBEDTLS_CIPHER_ID_DES = 3,
  MBEDTLS_CIPHER_ID_3DES = 4,
  MBEDTLS_CIPHER_ID_CAMELLIA = 5,
  MBEDTLS_CIPHER_ID_BLOWFISH = 6,
  MBEDTLS_CIPHER_ID_ARC4 = 7,
  MBEDTLS_CIPHER_ID_ARIA = 8,
  MBEDTLS_CIPHER_ID_CHACHA20 = 9
}
global mbedtls_cipher_type_t: type <cimport,nodecl,using> = @enum(cint){
  MBEDTLS_CIPHER_NONE = 0,
  MBEDTLS_CIPHER_NULL = 1,
  MBEDTLS_CIPHER_AES_128_ECB = 2,
  MBEDTLS_CIPHER_AES_192_ECB = 3,
  MBEDTLS_CIPHER_AES_256_ECB = 4,
  MBEDTLS_CIPHER_AES_128_CBC = 5,
  MBEDTLS_CIPHER_AES_192_CBC = 6,
  MBEDTLS_CIPHER_AES_256_CBC = 7,
  MBEDTLS_CIPHER_AES_128_CFB128 = 8,
  MBEDTLS_CIPHER_AES_192_CFB128 = 9,
  MBEDTLS_CIPHER_AES_256_CFB128 = 10,
  MBEDTLS_CIPHER_AES_128_CTR = 11,
  MBEDTLS_CIPHER_AES_192_CTR = 12,
  MBEDTLS_CIPHER_AES_256_CTR = 13,
  MBEDTLS_CIPHER_AES_128_GCM = 14,
  MBEDTLS_CIPHER_AES_192_GCM = 15,
  MBEDTLS_CIPHER_AES_256_GCM = 16,
  MBEDTLS_CIPHER_CAMELLIA_128_ECB = 17,
  MBEDTLS_CIPHER_CAMELLIA_192_ECB = 18,
  MBEDTLS_CIPHER_CAMELLIA_256_ECB = 19,
  MBEDTLS_CIPHER_CAMELLIA_128_CBC = 20,
  MBEDTLS_CIPHER_CAMELLIA_192_CBC = 21,
  MBEDTLS_CIPHER_CAMELLIA_256_CBC = 22,
  MBEDTLS_CIPHER_CAMELLIA_128_CFB128 = 23,
  MBEDTLS_CIPHER_CAMELLIA_192_CFB128 = 24,
  MBEDTLS_CIPHER_CAMELLIA_256_CFB128 = 25,
  MBEDTLS_CIPHER_CAMELLIA_128_CTR = 26,
  MBEDTLS_CIPHER_CAMELLIA_192_CTR = 27,
  MBEDTLS_CIPHER_CAMELLIA_256_CTR = 28,
  MBEDTLS_CIPHER_CAMELLIA_128_GCM = 29,
  MBEDTLS_CIPHER_CAMELLIA_192_GCM = 30,
  MBEDTLS_CIPHER_CAMELLIA_256_GCM = 31,
  MBEDTLS_CIPHER_DES_ECB = 32,
  MBEDTLS_CIPHER_DES_CBC = 33,
  MBEDTLS_CIPHER_DES_EDE_ECB = 34,
  MBEDTLS_CIPHER_DES_EDE_CBC = 35,
  MBEDTLS_CIPHER_DES_EDE3_ECB = 36,
  MBEDTLS_CIPHER_DES_EDE3_CBC = 37,
  MBEDTLS_CIPHER_BLOWFISH_ECB = 38,
  MBEDTLS_CIPHER_BLOWFISH_CBC = 39,
  MBEDTLS_CIPHER_BLOWFISH_CFB64 = 40,
  MBEDTLS_CIPHER_BLOWFISH_CTR = 41,
  MBEDTLS_CIPHER_ARC4_128 = 42,
  MBEDTLS_CIPHER_AES_128_CCM = 43,
  MBEDTLS_CIPHER_AES_192_CCM = 44,
  MBEDTLS_CIPHER_AES_256_CCM = 45,
  MBEDTLS_CIPHER_CAMELLIA_128_CCM = 46,
  MBEDTLS_CIPHER_CAMELLIA_192_CCM = 47,
  MBEDTLS_CIPHER_CAMELLIA_256_CCM = 48,
  MBEDTLS_CIPHER_ARIA_128_ECB = 49,
  MBEDTLS_CIPHER_ARIA_192_ECB = 50,
  MBEDTLS_CIPHER_ARIA_256_ECB = 51,
  MBEDTLS_CIPHER_ARIA_128_CBC = 52,
  MBEDTLS_CIPHER_ARIA_192_CBC = 53,
  MBEDTLS_CIPHER_ARIA_256_CBC = 54,
  MBEDTLS_CIPHER_ARIA_128_CFB128 = 55,
  MBEDTLS_CIPHER_ARIA_192_CFB128 = 56,
  MBEDTLS_CIPHER_ARIA_256_CFB128 = 57,
  MBEDTLS_CIPHER_ARIA_128_CTR = 58,
  MBEDTLS_CIPHER_ARIA_192_CTR = 59,
  MBEDTLS_CIPHER_ARIA_256_CTR = 60,
  MBEDTLS_CIPHER_ARIA_128_GCM = 61,
  MBEDTLS_CIPHER_ARIA_192_GCM = 62,
  MBEDTLS_CIPHER_ARIA_256_GCM = 63,
  MBEDTLS_CIPHER_ARIA_128_CCM = 64,
  MBEDTLS_CIPHER_ARIA_192_CCM = 65,
  MBEDTLS_CIPHER_ARIA_256_CCM = 66,
  MBEDTLS_CIPHER_AES_128_OFB = 67,
  MBEDTLS_CIPHER_AES_192_OFB = 68,
  MBEDTLS_CIPHER_AES_256_OFB = 69,
  MBEDTLS_CIPHER_AES_128_XTS = 70,
  MBEDTLS_CIPHER_AES_256_XTS = 71,
  MBEDTLS_CIPHER_CHACHA20 = 72,
  MBEDTLS_CIPHER_CHACHA20_POLY1305 = 73,
  MBEDTLS_CIPHER_AES_128_KW = 74,
  MBEDTLS_CIPHER_AES_192_KW = 75,
  MBEDTLS_CIPHER_AES_256_KW = 76,
  MBEDTLS_CIPHER_AES_128_KWP = 77,
  MBEDTLS_CIPHER_AES_192_KWP = 78,
  MBEDTLS_CIPHER_AES_256_KWP = 79
}
global mbedtls_cipher_mode_t: type <cimport,nodecl,using> = @enum(cint){
  MBEDTLS_MODE_NONE = 0,
  MBEDTLS_MODE_ECB = 1,
  MBEDTLS_MODE_CBC = 2,
  MBEDTLS_MODE_CFB = 3,
  MBEDTLS_MODE_OFB = 4,
  MBEDTLS_MODE_CTR = 5,
  MBEDTLS_MODE_GCM = 6,
  MBEDTLS_MODE_STREAM = 7,
  MBEDTLS_MODE_CCM = 8,
  MBEDTLS_MODE_XTS = 9,
  MBEDTLS_MODE_CHACHAPOLY = 10,
  MBEDTLS_MODE_KW = 11,
  MBEDTLS_MODE_KWP = 12
}
global mbedtls_cipher_padding_t: type <cimport,nodecl,using> = @enum(cint){
  MBEDTLS_PADDING_PKCS7 = 0,
  MBEDTLS_PADDING_ONE_AND_ZEROS = 1,
  MBEDTLS_PADDING_ZEROS_AND_LEN = 2,
  MBEDTLS_PADDING_ZEROS = 3,
  MBEDTLS_PADDING_NONE = 4
}
global mbedtls_operation_t: type <cimport,nodecl,using> = @enum(cint){
  MBEDTLS_OPERATION_NONE = -1,
  MBEDTLS_DECRYPT = 0,
  MBEDTLS_ENCRYPT = 1
}
global MBEDTLS_KEY_LENGTH_NONE: cint <comptime> = 0
global MBEDTLS_KEY_LENGTH_DES: cint <comptime> = 64
global MBEDTLS_KEY_LENGTH_DES_EDE: cint <comptime> = 128
global MBEDTLS_KEY_LENGTH_DES_EDE3: cint <comptime> = 192
global mbedtls_cipher_base_t: type <cimport,nodecl,forwarddecl> = @record{}
global mbedtls_cmac_context_t: type <cimport,nodecl,forwarddecl> = @record{}
global mbedtls_cipher_info_t: type <cimport,nodecl> = @record{
  type: mbedtls_cipher_type_t,
  mode: mbedtls_cipher_mode_t,
  key_bitlen: cuint,
  name: cstring,
  iv_size: cuint,
  flags: cint,
  block_size: cuint,
  base: *mbedtls_cipher_base_t
}
global mbedtls_cipher_context_t: type <cimport,nodecl> = @record{
  cipher_info: *mbedtls_cipher_info_t,
  key_bitlen: cint,
  operation: mbedtls_operation_t,
  add_padding: function(*cuchar, csize, csize): void,
  get_padding: function(*cuchar, csize, *csize): cint,
  unprocessed_data: [16]cuchar,
  unprocessed_len: csize,
  iv: [16]cuchar,
  iv_size: csize,
  cipher_ctx: pointer
}
global function mbedtls_cipher_list(): *cint <cimport,nodecl> end
global function mbedtls_cipher_info_from_string(cipher_name: cstring): *mbedtls_cipher_info_t <cimport,nodecl> end
global function mbedtls_cipher_info_from_type(cipher_type: mbedtls_cipher_type_t): *mbedtls_cipher_info_t <cimport,nodecl> end
global function mbedtls_cipher_info_from_values(cipher_id: mbedtls_cipher_id_t, key_bitlen: cint, mode: mbedtls_cipher_mode_t): *mbedtls_cipher_info_t <cimport,nodecl> end
global function mbedtls_cipher_init(ctx: *mbedtls_cipher_context_t): void <cimport,nodecl> end
global function mbedtls_cipher_free(ctx: *mbedtls_cipher_context_t): void <cimport,nodecl> end
global function mbedtls_cipher_setup(ctx: *mbedtls_cipher_context_t, cipher_info: *mbedtls_cipher_info_t): cint <cimport,nodecl> end
global function mbedtls_cipher_get_block_size(ctx: *mbedtls_cipher_context_t): cuint <cimport,nodecl> end
global function mbedtls_cipher_get_cipher_mode(ctx: *mbedtls_cipher_context_t): mbedtls_cipher_mode_t <cimport,nodecl> end
global function mbedtls_cipher_get_iv_size(ctx: *mbedtls_cipher_context_t): cint <cimport,nodecl> end
global function mbedtls_cipher_get_type(ctx: *mbedtls_cipher_context_t): mbedtls_cipher_type_t <cimport,nodecl> end
global function mbedtls_cipher_get_name(ctx: *mbedtls_cipher_context_t): cstring <cimport,nodecl> end
global function mbedtls_cipher_get_key_bitlen(ctx: *mbedtls_cipher_context_t): cint <cimport,nodecl> end
global function mbedtls_cipher_get_operation(ctx: *mbedtls_cipher_context_t): mbedtls_operation_t <cimport,nodecl> end
global function mbedtls_cipher_setkey(ctx: *mbedtls_cipher_context_t, key: *cuchar, key_bitlen: cint, operation: mbedtls_operation_t): cint <cimport,nodecl> end
global function mbedtls_cipher_set_padding_mode(ctx: *mbedtls_cipher_context_t, mode: mbedtls_cipher_padding_t): cint <cimport,nodecl> end
global function mbedtls_cipher_set_iv(ctx: *mbedtls_cipher_context_t, iv: *cuchar, iv_len: csize): cint <cimport,nodecl> end
global function mbedtls_cipher_reset(ctx: *mbedtls_cipher_context_t): cint <cimport,nodecl> end
global function mbedtls_cipher_update_ad(ctx: *mbedtls_cipher_context_t, ad: *cuchar, ad_len: csize): cint <cimport,nodecl> end
global function mbedtls_cipher_update(ctx: *mbedtls_cipher_context_t, input: *cuchar, ilen: csize, output: *cuchar, olen: *csize): cint <cimport,nodecl> end
global function mbedtls_cipher_finish(ctx: *mbedtls_cipher_context_t, output: *cuchar, olen: *csize): cint <cimport,nodecl> end
global function mbedtls_cipher_write_tag(ctx: *mbedtls_cipher_context_t, tag: *cuchar, tag_len: csize): cint <cimport,nodecl> end
global function mbedtls_cipher_check_tag(ctx: *mbedtls_cipher_context_t, tag: *cuchar, tag_len: csize): cint <cimport,nodecl> end
global function mbedtls_cipher_crypt(ctx: *mbedtls_cipher_context_t, iv: *cuchar, iv_len: csize, input: *cuchar, ilen: csize, output: *cuchar, olen: *csize): cint <cimport,nodecl> end
global function mbedtls_cipher_auth_encrypt_ext(ctx: *mbedtls_cipher_context_t, iv: *cuchar, iv_len: csize, ad: *cuchar, ad_len: csize, input: *cuchar, ilen: csize, output: *cuchar, output_len: csize, olen: *csize, tag_len: csize): cint <cimport,nodecl> end
global function mbedtls_cipher_auth_decrypt_ext(ctx: *mbedtls_cipher_context_t, iv: *cuchar, iv_len: csize, ad: *cuchar, ad_len: csize, input: *cuchar, ilen: csize, output: *cuchar, output_len: csize, olen: *csize, tag_len: csize): cint <cimport,nodecl> end
global mbedtls_ccm_context: type <cimport,nodecl> = @record{
  cipher_ctx: mbedtls_cipher_context_t
}
global function mbedtls_ccm_init(ctx: *mbedtls_ccm_context): void <cimport,nodecl> end
global function mbedtls_ccm_setkey(ctx: *mbedtls_ccm_context, cipher: mbedtls_cipher_id_t, key: *cuchar, keybits: cuint): cint <cimport,nodecl> end
global function mbedtls_ccm_free(ctx: *mbedtls_ccm_context): void <cimport,nodecl> end
global function mbedtls_ccm_encrypt_and_tag(ctx: *mbedtls_ccm_context, length: csize, iv: *cuchar, iv_len: csize, add: *cuchar, add_len: csize, input: *cuchar, output: *cuchar, tag: *cuchar, tag_len: csize): cint <cimport,nodecl> end
global function mbedtls_ccm_star_encrypt_and_tag(ctx: *mbedtls_ccm_context, length: csize, iv: *cuchar, iv_len: csize, add: *cuchar, add_len: csize, input: *cuchar, output: *cuchar, tag: *cuchar, tag_len: csize): cint <cimport,nodecl> end
global function mbedtls_ccm_auth_decrypt(ctx: *mbedtls_ccm_context, length: csize, iv: *cuchar, iv_len: csize, add: *cuchar, add_len: csize, input: *cuchar, output: *cuchar, tag: *cuchar, tag_len: csize): cint <cimport,nodecl> end
global function mbedtls_ccm_star_auth_decrypt(ctx: *mbedtls_ccm_context, length: csize, iv: *cuchar, iv_len: csize, add: *cuchar, add_len: csize, input: *cuchar, output: *cuchar, tag: *cuchar, tag_len: csize): cint <cimport,nodecl> end
global function mbedtls_ccm_self_test(verbose: cint): cint <cimport,nodecl> end
global mbedtls_test_cas: [0]cstring <cimport,nodecl>
global mbedtls_test_cas_len: [0]csize <cimport,nodecl>
global mbedtls_test_cas_der: [0]*cuchar <cimport,nodecl>
global mbedtls_test_cas_der_len: [0]csize <cimport,nodecl>
global mbedtls_test_cas_pem: [0]cchar <cimport,nodecl>
global mbedtls_test_cas_pem_len: csize <cimport,nodecl>
global mbedtls_test_ca_crt_ec_pem: [0]cchar <cimport,nodecl>
global mbedtls_test_ca_key_ec_pem: [0]cchar <cimport,nodecl>
global mbedtls_test_ca_pwd_ec_pem: [0]cchar <cimport,nodecl>
global mbedtls_test_ca_key_rsa_pem: [0]cchar <cimport,nodecl>
global mbedtls_test_ca_pwd_rsa_pem: [0]cchar <cimport,nodecl>
global mbedtls_test_ca_crt_rsa_sha1_pem: [0]cchar <cimport,nodecl>
global mbedtls_test_ca_crt_rsa_sha256_pem: [0]cchar <cimport,nodecl>
global mbedtls_test_ca_crt_ec_der: [0]cuchar <cimport,nodecl>
global mbedtls_test_ca_key_ec_der: [0]cuchar <cimport,nodecl>
global mbedtls_test_ca_key_rsa_der: [0]cuchar <cimport,nodecl>
global mbedtls_test_ca_crt_rsa_sha1_der: [0]cuchar <cimport,nodecl>
global mbedtls_test_ca_crt_rsa_sha256_der: [0]cuchar <cimport,nodecl>
global mbedtls_test_ca_crt_ec_pem_len: csize <cimport,nodecl>
global mbedtls_test_ca_key_ec_pem_len: csize <cimport,nodecl>
global mbedtls_test_ca_pwd_ec_pem_len: csize <cimport,nodecl>
global mbedtls_test_ca_key_rsa_pem_len: csize <cimport,nodecl>
global mbedtls_test_ca_pwd_rsa_pem_len: csize <cimport,nodecl>
global mbedtls_test_ca_crt_rsa_sha1_pem_len: csize <cimport,nodecl>
global mbedtls_test_ca_crt_rsa_sha256_pem_len: csize <cimport,nodecl>
global mbedtls_test_ca_crt_ec_der_len: csize <cimport,nodecl>
global mbedtls_test_ca_key_ec_der_len: csize <cimport,nodecl>
global mbedtls_test_ca_pwd_ec_der_len: csize <cimport,nodecl>
global mbedtls_test_ca_key_rsa_der_len: csize <cimport,nodecl>
global mbedtls_test_ca_pwd_rsa_der_len: csize <cimport,nodecl>
global mbedtls_test_ca_crt_rsa_sha1_der_len: csize <cimport,nodecl>
global mbedtls_test_ca_crt_rsa_sha256_der_len: csize <cimport,nodecl>
global mbedtls_test_ca_crt_ec: [0]cchar <cimport,nodecl>
global mbedtls_test_ca_key_ec: [0]cchar <cimport,nodecl>
global mbedtls_test_ca_pwd_ec: [0]cchar <cimport,nodecl>
global mbedtls_test_ca_key_rsa: [0]cchar <cimport,nodecl>
global mbedtls_test_ca_pwd_rsa: [0]cchar <cimport,nodecl>
global mbedtls_test_ca_crt_rsa_sha1: [0]cchar <cimport,nodecl>
global mbedtls_test_ca_crt_rsa_sha256: [0]cchar <cimport,nodecl>
global mbedtls_test_ca_crt_ec_len: csize <cimport,nodecl>
global mbedtls_test_ca_key_ec_len: csize <cimport,nodecl>
global mbedtls_test_ca_pwd_ec_len: csize <cimport,nodecl>
global mbedtls_test_ca_key_rsa_len: csize <cimport,nodecl>
global mbedtls_test_ca_pwd_rsa_len: csize <cimport,nodecl>
global mbedtls_test_ca_crt_rsa_sha1_len: csize <cimport,nodecl>
global mbedtls_test_ca_crt_rsa_sha256_len: csize <cimport,nodecl>
global mbedtls_test_ca_crt_rsa: [0]cchar <cimport,nodecl>
global mbedtls_test_ca_crt_rsa_len: csize <cimport,nodecl>
global mbedtls_test_ca_crt: cstring <cimport,nodecl>
global mbedtls_test_ca_key: cstring <cimport,nodecl>
global mbedtls_test_ca_pwd: cstring <cimport,nodecl>
global mbedtls_test_ca_crt_len: csize <cimport,nodecl>
global mbedtls_test_ca_key_len: csize <cimport,nodecl>
global mbedtls_test_ca_pwd_len: csize <cimport,nodecl>
global mbedtls_test_srv_crt_ec_pem: [0]cchar <cimport,nodecl>
global mbedtls_test_srv_key_ec_pem: [0]cchar <cimport,nodecl>
global mbedtls_test_srv_pwd_ec_pem: [0]cchar <cimport,nodecl>
global mbedtls_test_srv_key_rsa_pem: [0]cchar <cimport,nodecl>
global mbedtls_test_srv_pwd_rsa_pem: [0]cchar <cimport,nodecl>
global mbedtls_test_srv_crt_rsa_sha1_pem: [0]cchar <cimport,nodecl>
global mbedtls_test_srv_crt_rsa_sha256_pem: [0]cchar <cimport,nodecl>
global mbedtls_test_srv_crt_ec_der: [0]cuchar <cimport,nodecl>
global mbedtls_test_srv_key_ec_der: [0]cuchar <cimport,nodecl>
global mbedtls_test_srv_key_rsa_der: [0]cuchar <cimport,nodecl>
global mbedtls_test_srv_crt_rsa_sha1_der: [0]cuchar <cimport,nodecl>
global mbedtls_test_srv_crt_rsa_sha256_der: [0]cuchar <cimport,nodecl>
global mbedtls_test_srv_crt_ec_pem_len: csize <cimport,nodecl>
global mbedtls_test_srv_key_ec_pem_len: csize <cimport,nodecl>
global mbedtls_test_srv_pwd_ec_pem_len: csize <cimport,nodecl>
global mbedtls_test_srv_key_rsa_pem_len: csize <cimport,nodecl>
global mbedtls_test_srv_pwd_rsa_pem_len: csize <cimport,nodecl>
global mbedtls_test_srv_crt_rsa_sha1_pem_len: csize <cimport,nodecl>
global mbedtls_test_srv_crt_rsa_sha256_pem_len: csize <cimport,nodecl>
global mbedtls_test_srv_crt_ec_der_len: csize <cimport,nodecl>
global mbedtls_test_srv_key_ec_der_len: csize <cimport,nodecl>
global mbedtls_test_srv_pwd_ec_der_len: csize <cimport,nodecl>
global mbedtls_test_srv_key_rsa_der_len: csize <cimport,nodecl>
global mbedtls_test_srv_pwd_rsa_der_len: csize <cimport,nodecl>
global mbedtls_test_srv_crt_rsa_sha1_der_len: csize <cimport,nodecl>
global mbedtls_test_srv_crt_rsa_sha256_der_len: csize <cimport,nodecl>
global mbedtls_test_srv_crt_ec: [0]cchar <cimport,nodecl>
global mbedtls_test_srv_key_ec: [0]cchar <cimport,nodecl>
global mbedtls_test_srv_pwd_ec: [0]cchar <cimport,nodecl>
global mbedtls_test_srv_key_rsa: [0]cchar <cimport,nodecl>
global mbedtls_test_srv_pwd_rsa: [0]cchar <cimport,nodecl>
global mbedtls_test_srv_crt_rsa_sha1: [0]cchar <cimport,nodecl>
global mbedtls_test_srv_crt_rsa_sha256: [0]cchar <cimport,nodecl>
global mbedtls_test_srv_crt_ec_len: csize <cimport,nodecl>
global mbedtls_test_srv_key_ec_len: csize <cimport,nodecl>
global mbedtls_test_srv_pwd_ec_len: csize <cimport,nodecl>
global mbedtls_test_srv_key_rsa_len: csize <cimport,nodecl>
global mbedtls_test_srv_pwd_rsa_len: csize <cimport,nodecl>
global mbedtls_test_srv_crt_rsa_sha1_len: csize <cimport,nodecl>
global mbedtls_test_srv_crt_rsa_sha256_len: csize <cimport,nodecl>
global mbedtls_test_srv_crt_rsa: [0]cchar <cimport,nodecl>
global mbedtls_test_srv_crt_rsa_len: csize <cimport,nodecl>
global mbedtls_test_srv_crt: cstring <cimport,nodecl>
global mbedtls_test_srv_key: cstring <cimport,nodecl>
global mbedtls_test_srv_pwd: cstring <cimport,nodecl>
global mbedtls_test_srv_crt_len: csize <cimport,nodecl>
global mbedtls_test_srv_key_len: csize <cimport,nodecl>
global mbedtls_test_srv_pwd_len: csize <cimport,nodecl>
global mbedtls_test_cli_crt_ec_pem: [0]cchar <cimport,nodecl>
global mbedtls_test_cli_key_ec_pem: [0]cchar <cimport,nodecl>
global mbedtls_test_cli_pwd_ec_pem: [0]cchar <cimport,nodecl>
global mbedtls_test_cli_key_rsa_pem: [0]cchar <cimport,nodecl>
global mbedtls_test_cli_pwd_rsa_pem: [0]cchar <cimport,nodecl>
global mbedtls_test_cli_crt_rsa_pem: [0]cchar <cimport,nodecl>
global mbedtls_test_cli_crt_ec_der: [0]cuchar <cimport,nodecl>
global mbedtls_test_cli_key_ec_der: [0]cuchar <cimport,nodecl>
global mbedtls_test_cli_key_rsa_der: [0]cuchar <cimport,nodecl>
global mbedtls_test_cli_crt_rsa_der: [0]cuchar <cimport,nodecl>
global mbedtls_test_cli_crt_ec_pem_len: csize <cimport,nodecl>
global mbedtls_test_cli_key_ec_pem_len: csize <cimport,nodecl>
global mbedtls_test_cli_pwd_ec_pem_len: csize <cimport,nodecl>
global mbedtls_test_cli_key_rsa_pem_len: csize <cimport,nodecl>
global mbedtls_test_cli_pwd_rsa_pem_len: csize <cimport,nodecl>
global mbedtls_test_cli_crt_rsa_pem_len: csize <cimport,nodecl>
global mbedtls_test_cli_crt_ec_der_len: csize <cimport,nodecl>
global mbedtls_test_cli_key_ec_der_len: csize <cimport,nodecl>
global mbedtls_test_cli_key_rsa_der_len: csize <cimport,nodecl>
global mbedtls_test_cli_crt_rsa_der_len: csize <cimport,nodecl>
global mbedtls_test_cli_crt_ec: [0]cchar <cimport,nodecl>
global mbedtls_test_cli_key_ec: [0]cchar <cimport,nodecl>
global mbedtls_test_cli_pwd_ec: [0]cchar <cimport,nodecl>
global mbedtls_test_cli_key_rsa: [0]cchar <cimport,nodecl>
global mbedtls_test_cli_pwd_rsa: [0]cchar <cimport,nodecl>
global mbedtls_test_cli_crt_rsa: [0]cchar <cimport,nodecl>
global mbedtls_test_cli_crt_ec_len: csize <cimport,nodecl>
global mbedtls_test_cli_key_ec_len: csize <cimport,nodecl>
global mbedtls_test_cli_pwd_ec_len: csize <cimport,nodecl>
global mbedtls_test_cli_key_rsa_len: csize <cimport,nodecl>
global mbedtls_test_cli_pwd_rsa_len: csize <cimport,nodecl>
global mbedtls_test_cli_crt_rsa_len: csize <cimport,nodecl>
global mbedtls_test_cli_crt: cstring <cimport,nodecl>
global mbedtls_test_cli_key: cstring <cimport,nodecl>
global mbedtls_test_cli_pwd: cstring <cimport,nodecl>
global mbedtls_test_cli_crt_len: csize <cimport,nodecl>
global mbedtls_test_cli_key_len: csize <cimport,nodecl>
global mbedtls_test_cli_pwd_len: csize <cimport,nodecl>
global mbedtls_chacha20_context: type <cimport,nodecl> = @record{
  state: [16]uint32,
  keystream8: [64]uint8,
  keystream_bytes_used: csize
}
global function mbedtls_chacha20_init(ctx: *mbedtls_chacha20_context): void <cimport,nodecl> end
global function mbedtls_chacha20_free(ctx: *mbedtls_chacha20_context): void <cimport,nodecl> end
global function mbedtls_chacha20_setkey(ctx: *mbedtls_chacha20_context, key: *cuchar): cint <cimport,nodecl> end
global function mbedtls_chacha20_starts(ctx: *mbedtls_chacha20_context, nonce: *cuchar, counter: uint32): cint <cimport,nodecl> end
global function mbedtls_chacha20_update(ctx: *mbedtls_chacha20_context, size: csize, input: *cuchar, output: *cuchar): cint <cimport,nodecl> end
global function mbedtls_chacha20_crypt(key: *cuchar, nonce: *cuchar, counter: uint32, size: csize, input: *cuchar, output: *cuchar): cint <cimport,nodecl> end
global function mbedtls_chacha20_self_test(verbose: cint): cint <cimport,nodecl> end
global mbedtls_poly1305_context: type <cimport,nodecl> = @record{
  r: [4]uint32,
  s: [4]uint32,
  acc: [5]uint32,
  queue: [16]uint8,
  queue_len: csize
}
global function mbedtls_poly1305_init(ctx: *mbedtls_poly1305_context): void <cimport,nodecl> end
global function mbedtls_poly1305_free(ctx: *mbedtls_poly1305_context): void <cimport,nodecl> end
global function mbedtls_poly1305_starts(ctx: *mbedtls_poly1305_context, key: *cuchar): cint <cimport,nodecl> end
global function mbedtls_poly1305_update(ctx: *mbedtls_poly1305_context, input: *cuchar, ilen: csize): cint <cimport,nodecl> end
global function mbedtls_poly1305_finish(ctx: *mbedtls_poly1305_context, mac: *cuchar): cint <cimport,nodecl> end
global function mbedtls_poly1305_mac(key: *cuchar, input: *cuchar, ilen: csize, mac: *cuchar): cint <cimport,nodecl> end
global function mbedtls_poly1305_self_test(verbose: cint): cint <cimport,nodecl> end
global mbedtls_chachapoly_mode_t: type <cimport,nodecl,using> = @enum(cint){
  MBEDTLS_CHACHAPOLY_ENCRYPT = 0,
  MBEDTLS_CHACHAPOLY_DECRYPT = 1
}
global mbedtls_chachapoly_context: type <cimport,nodecl> = @record{
  chacha20_ctx: mbedtls_chacha20_context,
  poly1305_ctx: mbedtls_poly1305_context,
  aad_len: uint64,
  ciphertext_len: uint64,
  state: cint,
  mode: mbedtls_chachapoly_mode_t
}
global function mbedtls_chachapoly_init(ctx: *mbedtls_chachapoly_context): void <cimport,nodecl> end
global function mbedtls_chachapoly_free(ctx: *mbedtls_chachapoly_context): void <cimport,nodecl> end
global function mbedtls_chachapoly_setkey(ctx: *mbedtls_chachapoly_context, key: *cuchar): cint <cimport,nodecl> end
global function mbedtls_chachapoly_starts(ctx: *mbedtls_chachapoly_context, nonce: *cuchar, mode: mbedtls_chachapoly_mode_t): cint <cimport,nodecl> end
global function mbedtls_chachapoly_update_aad(ctx: *mbedtls_chachapoly_context, aad: *cuchar, aad_len: csize): cint <cimport,nodecl> end
global function mbedtls_chachapoly_update(ctx: *mbedtls_chachapoly_context, len: csize, input: *cuchar, output: *cuchar): cint <cimport,nodecl> end
global function mbedtls_chachapoly_finish(ctx: *mbedtls_chachapoly_context, mac: *cuchar): cint <cimport,nodecl> end
global function mbedtls_chachapoly_encrypt_and_tag(ctx: *mbedtls_chachapoly_context, length: csize, nonce: *cuchar, aad: *cuchar, aad_len: csize, input: *cuchar, output: *cuchar, tag: *cuchar): cint <cimport,nodecl> end
global function mbedtls_chachapoly_auth_decrypt(ctx: *mbedtls_chachapoly_context, length: csize, nonce: *cuchar, aad: *cuchar, aad_len: csize, tag: *cuchar, input: *cuchar, output: *cuchar): cint <cimport,nodecl> end
global function mbedtls_chachapoly_self_test(verbose: cint): cint <cimport,nodecl> end
mbedtls_cmac_context_t = @record{
  state: [16]cuchar,
  unprocessed_block: [16]cuchar,
  unprocessed_len: csize
}
global function mbedtls_cipher_cmac_starts(ctx: *mbedtls_cipher_context_t, key: *cuchar, keybits: csize): cint <cimport,nodecl> end
global function mbedtls_cipher_cmac_update(ctx: *mbedtls_cipher_context_t, input: *cuchar, ilen: csize): cint <cimport,nodecl> end
global function mbedtls_cipher_cmac_finish(ctx: *mbedtls_cipher_context_t, output: *cuchar): cint <cimport,nodecl> end
global function mbedtls_cipher_cmac_reset(ctx: *mbedtls_cipher_context_t): cint <cimport,nodecl> end
global function mbedtls_cipher_cmac(cipher_info: *mbedtls_cipher_info_t, key: *cuchar, keylen: csize, input: *cuchar, ilen: csize, output: *cuchar): cint <cimport,nodecl> end
global function mbedtls_aes_cmac_prf_128(key: *cuchar, key_len: csize, input: *cuchar, in_len: csize, output: *cuchar): cint <cimport,nodecl> end
global function mbedtls_cmac_self_test(verbose: cint): cint <cimport,nodecl> end
global mbedtls_threading_mutex_t: type <cimport,nodecl,cincomplete> = @record{
  is_valid: cchar
}
global mbedtls_mutex_init: function(*mbedtls_threading_mutex_t): void <cimport,nodecl>
global mbedtls_mutex_free: function(*mbedtls_threading_mutex_t): void <cimport,nodecl>
global mbedtls_mutex_lock: function(*mbedtls_threading_mutex_t): cint <cimport,nodecl>
global mbedtls_mutex_unlock: function(*mbedtls_threading_mutex_t): cint <cimport,nodecl>
global mbedtls_threading_readdir_mutex: mbedtls_threading_mutex_t <cimport,nodecl>
global mbedtls_threading_gmtime_mutex: mbedtls_threading_mutex_t <cimport,nodecl>
global mbedtls_ctr_drbg_context: type <cimport,nodecl> = @record{
  counter: [16]cuchar,
  reseed_counter: cint,
  prediction_resistance: cint,
  entropy_len: csize,
  reseed_interval: cint,
  aes_ctx: mbedtls_aes_context,
  f_entropy: function(pointer, *cuchar, csize): cint,
  p_entropy: pointer,
  mutex: mbedtls_threading_mutex_t
}
global function mbedtls_ctr_drbg_init(ctx: *mbedtls_ctr_drbg_context): void <cimport,nodecl> end
global function mbedtls_ctr_drbg_seed(ctx: *mbedtls_ctr_drbg_context, f_entropy: function(pointer, *cuchar, csize): cint, p_entropy: pointer, custom: *cuchar, len: csize): cint <cimport,nodecl> end
global function mbedtls_ctr_drbg_free(ctx: *mbedtls_ctr_drbg_context): void <cimport,nodecl> end
global function mbedtls_ctr_drbg_set_prediction_resistance(ctx: *mbedtls_ctr_drbg_context, resistance: cint): void <cimport,nodecl> end
global function mbedtls_ctr_drbg_set_entropy_len(ctx: *mbedtls_ctr_drbg_context, len: csize): void <cimport,nodecl> end
global function mbedtls_ctr_drbg_set_nonce_len(ctx: *mbedtls_ctr_drbg_context, len: csize): cint <cimport,nodecl> end
global function mbedtls_ctr_drbg_set_reseed_interval(ctx: *mbedtls_ctr_drbg_context, interval: cint): void <cimport,nodecl> end
global function mbedtls_ctr_drbg_reseed(ctx: *mbedtls_ctr_drbg_context, additional: *cuchar, len: csize): cint <cimport,nodecl> end
global function mbedtls_ctr_drbg_update_ret(ctx: *mbedtls_ctr_drbg_context, additional: *cuchar, add_len: csize): cint <cimport,nodecl> end
global function mbedtls_ctr_drbg_random_with_add(p_rng: pointer, output: *cuchar, output_len: csize, additional: *cuchar, add_len: csize): cint <cimport,nodecl> end
global function mbedtls_ctr_drbg_random(p_rng: pointer, output: *cuchar, output_len: csize): cint <cimport,nodecl> end
global function mbedtls_ctr_drbg_write_seed_file(ctx: *mbedtls_ctr_drbg_context, path: cstring): cint <cimport,nodecl> end
global function mbedtls_ctr_drbg_update_seed_file(ctx: *mbedtls_ctr_drbg_context, path: cstring): cint <cimport,nodecl> end
global function mbedtls_ctr_drbg_self_test(verbose: cint): cint <cimport,nodecl> end
global mbedtls_ecp_group_id: type <cimport,nodecl,using> = @enum(cint){
  MBEDTLS_ECP_DP_NONE = 0,
  MBEDTLS_ECP_DP_SECP192R1 = 1,
  MBEDTLS_ECP_DP_SECP224R1 = 2,
  MBEDTLS_ECP_DP_SECP256R1 = 3,
  MBEDTLS_ECP_DP_SECP384R1 = 4,
  MBEDTLS_ECP_DP_SECP521R1 = 5,
  MBEDTLS_ECP_DP_BP256R1 = 6,
  MBEDTLS_ECP_DP_BP384R1 = 7,
  MBEDTLS_ECP_DP_BP512R1 = 8,
  MBEDTLS_ECP_DP_CURVE25519 = 9,
  MBEDTLS_ECP_DP_SECP192K1 = 10,
  MBEDTLS_ECP_DP_SECP224K1 = 11,
  MBEDTLS_ECP_DP_SECP256K1 = 12,
  MBEDTLS_ECP_DP_CURVE448 = 13
}
global mbedtls_ecp_curve_type: type <cimport,nodecl,using> = @enum(cint){
  MBEDTLS_ECP_TYPE_NONE = 0,
  MBEDTLS_ECP_TYPE_SHORT_WEIERSTRASS = 1,
  MBEDTLS_ECP_TYPE_MONTGOMERY = 2
}
global mbedtls_ecp_curve_info: type <cimport,nodecl> = @record{
  grp_id: mbedtls_ecp_group_id,
  tls_id: uint16,
  bit_size: uint16,
  name: cstring
}
global mbedtls_ecp_point: type <cimport,nodecl> = @record{
  X: mbedtls_mpi,
  Y: mbedtls_mpi,
  Z: mbedtls_mpi
}
global mbedtls_ecp_group: type <cimport,nodecl> = @record{
  id: mbedtls_ecp_group_id,
  P: mbedtls_mpi,
  A: mbedtls_mpi,
  B: mbedtls_mpi,
  G: mbedtls_ecp_point,
  N: mbedtls_mpi,
  pbits: csize,
  nbits: csize,
  h: cuint,
  modp: function(*mbedtls_mpi): cint,
  t_pre: function(*mbedtls_ecp_point, pointer): cint,
  t_post: function(*mbedtls_ecp_point, pointer): cint,
  t_data: pointer,
  T: *mbedtls_ecp_point,
  T_size: csize
}
global mbedtls_ecp_keypair: type <cimport,nodecl> = @record{
  grp: mbedtls_ecp_group,
  d: mbedtls_mpi,
  Q: mbedtls_ecp_point
}
global function mbedtls_ecp_get_type(grp: *mbedtls_ecp_group): mbedtls_ecp_curve_type <cimport,nodecl> end
global function mbedtls_ecp_curve_list(): *mbedtls_ecp_curve_info <cimport,nodecl> end
global function mbedtls_ecp_grp_id_list(): *mbedtls_ecp_group_id <cimport,nodecl> end
global function mbedtls_ecp_curve_info_from_grp_id(grp_id: mbedtls_ecp_group_id): *mbedtls_ecp_curve_info <cimport,nodecl> end
global function mbedtls_ecp_curve_info_from_tls_id(tls_id: uint16): *mbedtls_ecp_curve_info <cimport,nodecl> end
global function mbedtls_ecp_curve_info_from_name(name: cstring): *mbedtls_ecp_curve_info <cimport,nodecl> end
global function mbedtls_ecp_point_init(pt: *mbedtls_ecp_point): void <cimport,nodecl> end
global function mbedtls_ecp_group_init(grp: *mbedtls_ecp_group): void <cimport,nodecl> end
global function mbedtls_ecp_keypair_init(key: *mbedtls_ecp_keypair): void <cimport,nodecl> end
global function mbedtls_ecp_point_free(pt: *mbedtls_ecp_point): void <cimport,nodecl> end
global function mbedtls_ecp_group_free(grp: *mbedtls_ecp_group): void <cimport,nodecl> end
global function mbedtls_ecp_keypair_free(key: *mbedtls_ecp_keypair): void <cimport,nodecl> end
global function mbedtls_ecp_copy(P: *mbedtls_ecp_point, Q: *mbedtls_ecp_point): cint <cimport,nodecl> end
global function mbedtls_ecp_group_copy(dst: *mbedtls_ecp_group, src: *mbedtls_ecp_group): cint <cimport,nodecl> end
global function mbedtls_ecp_set_zero(pt: *mbedtls_ecp_point): cint <cimport,nodecl> end
global function mbedtls_ecp_is_zero(pt: *mbedtls_ecp_point): cint <cimport,nodecl> end
global function mbedtls_ecp_point_cmp(P: *mbedtls_ecp_point, Q: *mbedtls_ecp_point): cint <cimport,nodecl> end
global function mbedtls_ecp_point_read_string(P: *mbedtls_ecp_point, radix: cint, x: cstring, y: cstring): cint <cimport,nodecl> end
global function mbedtls_ecp_point_write_binary(grp: *mbedtls_ecp_group, P: *mbedtls_ecp_point, format: cint, olen: *csize, buf: *cuchar, buflen: csize): cint <cimport,nodecl> end
global function mbedtls_ecp_point_read_binary(grp: *mbedtls_ecp_group, P: *mbedtls_ecp_point, buf: *cuchar, ilen: csize): cint <cimport,nodecl> end
global function mbedtls_ecp_tls_read_point(grp: *mbedtls_ecp_group, pt: *mbedtls_ecp_point, buf: **cuchar, len: csize): cint <cimport,nodecl> end
global function mbedtls_ecp_tls_write_point(grp: *mbedtls_ecp_group, pt: *mbedtls_ecp_point, format: cint, olen: *csize, buf: *cuchar, blen: csize): cint <cimport,nodecl> end
global function mbedtls_ecp_group_load(grp: *mbedtls_ecp_group, id: mbedtls_ecp_group_id): cint <cimport,nodecl> end
global function mbedtls_ecp_tls_read_group(grp: *mbedtls_ecp_group, buf: **cuchar, len: csize): cint <cimport,nodecl> end
global function mbedtls_ecp_tls_read_group_id(grp: *mbedtls_ecp_group_id, buf: **cuchar, len: csize): cint <cimport,nodecl> end
global function mbedtls_ecp_tls_write_group(grp: *mbedtls_ecp_group, olen: *csize, buf: *cuchar, blen: csize): cint <cimport,nodecl> end
global function mbedtls_ecp_mul(grp: *mbedtls_ecp_group, R: *mbedtls_ecp_point, m: *mbedtls_mpi, P: *mbedtls_ecp_point, f_rng: function(pointer, *cuchar, csize): cint, p_rng: pointer): cint <cimport,nodecl> end
global function mbedtls_ecp_mul_restartable(grp: *mbedtls_ecp_group, R: *mbedtls_ecp_point, m: *mbedtls_mpi, P: *mbedtls_ecp_point, f_rng: function(pointer, *cuchar, csize): cint, p_rng: pointer, rs_ctx: pointer): cint <cimport,nodecl> end
global function mbedtls_ecp_muladd(grp: *mbedtls_ecp_group, R: *mbedtls_ecp_point, m: *mbedtls_mpi, P: *mbedtls_ecp_point, n: *mbedtls_mpi, Q: *mbedtls_ecp_point): cint <cimport,nodecl> end
global function mbedtls_ecp_muladd_restartable(grp: *mbedtls_ecp_group, R: *mbedtls_ecp_point, m: *mbedtls_mpi, P: *mbedtls_ecp_point, n: *mbedtls_mpi, Q: *mbedtls_ecp_point, rs_ctx: pointer): cint <cimport,nodecl> end
global function mbedtls_ecp_check_pubkey(grp: *mbedtls_ecp_group, pt: *mbedtls_ecp_point): cint <cimport,nodecl> end
global function mbedtls_ecp_check_privkey(grp: *mbedtls_ecp_group, d: *mbedtls_mpi): cint <cimport,nodecl> end
global function mbedtls_ecp_gen_privkey(grp: *mbedtls_ecp_group, d: *mbedtls_mpi, f_rng: function(pointer, *cuchar, csize): cint, p_rng: pointer): cint <cimport,nodecl> end
global function mbedtls_ecp_gen_keypair_base(grp: *mbedtls_ecp_group, G: *mbedtls_ecp_point, d: *mbedtls_mpi, Q: *mbedtls_ecp_point, f_rng: function(pointer, *cuchar, csize): cint, p_rng: pointer): cint <cimport,nodecl> end
global function mbedtls_ecp_gen_keypair(grp: *mbedtls_ecp_group, d: *mbedtls_mpi, Q: *mbedtls_ecp_point, f_rng: function(pointer, *cuchar, csize): cint, p_rng: pointer): cint <cimport,nodecl> end
global function mbedtls_ecp_gen_key(grp_id: mbedtls_ecp_group_id, key: *mbedtls_ecp_keypair, f_rng: function(pointer, *cuchar, csize): cint, p_rng: pointer): cint <cimport,nodecl> end
global function mbedtls_ecp_read_key(grp_id: mbedtls_ecp_group_id, key: *mbedtls_ecp_keypair, buf: *cuchar, buflen: csize): cint <cimport,nodecl> end
global function mbedtls_ecp_write_key(key: *mbedtls_ecp_keypair, buf: *cuchar, buflen: csize): cint <cimport,nodecl> end
global function mbedtls_ecp_check_pub_priv(pub: *mbedtls_ecp_keypair, prv: *mbedtls_ecp_keypair): cint <cimport,nodecl> end
global function mbedtls_ecp_self_test(verbose: cint): cint <cimport,nodecl> end
global mbedtls_md_type_t: type <cimport,nodecl,using> = @enum(cint){
  MBEDTLS_MD_NONE = 0,
  MBEDTLS_MD_MD2 = 1,
  MBEDTLS_MD_MD4 = 2,
  MBEDTLS_MD_MD5 = 3,
  MBEDTLS_MD_SHA1 = 4,
  MBEDTLS_MD_SHA224 = 5,
  MBEDTLS_MD_SHA256 = 6,
  MBEDTLS_MD_SHA384 = 7,
  MBEDTLS_MD_SHA512 = 8,
  MBEDTLS_MD_RIPEMD160 = 9
}
global mbedtls_md_info_t: type <cimport,nodecl,forwarddecl> = @record{}
global mbedtls_md_context_t: type <cimport,nodecl> = @record{
  md_info: *mbedtls_md_info_t,
  md_ctx: pointer,
  hmac_ctx: pointer
}
global function mbedtls_md_list(): *cint <cimport,nodecl> end
global function mbedtls_md_info_from_string(md_name: cstring): *mbedtls_md_info_t <cimport,nodecl> end
global function mbedtls_md_info_from_type(md_type: mbedtls_md_type_t): *mbedtls_md_info_t <cimport,nodecl> end
global function mbedtls_md_init(ctx: *mbedtls_md_context_t): void <cimport,nodecl> end
global function mbedtls_md_free(ctx: *mbedtls_md_context_t): void <cimport,nodecl> end
global function mbedtls_md_setup(ctx: *mbedtls_md_context_t, md_info: *mbedtls_md_info_t, hmac: cint): cint <cimport,nodecl> end
global function mbedtls_md_clone(dst: *mbedtls_md_context_t, src: *mbedtls_md_context_t): cint <cimport,nodecl> end
global function mbedtls_md_get_size(md_info: *mbedtls_md_info_t): cuchar <cimport,nodecl> end
global function mbedtls_md_get_type(md_info: *mbedtls_md_info_t): mbedtls_md_type_t <cimport,nodecl> end
global function mbedtls_md_get_name(md_info: *mbedtls_md_info_t): cstring <cimport,nodecl> end
global function mbedtls_md_starts(ctx: *mbedtls_md_context_t): cint <cimport,nodecl> end
global function mbedtls_md_update(ctx: *mbedtls_md_context_t, input: *cuchar, ilen: csize): cint <cimport,nodecl> end
global function mbedtls_md_finish(ctx: *mbedtls_md_context_t, output: *cuchar): cint <cimport,nodecl> end
global function mbedtls_md(md_info: *mbedtls_md_info_t, input: *cuchar, ilen: csize, output: *cuchar): cint <cimport,nodecl> end
global function mbedtls_md_file(md_info: *mbedtls_md_info_t, path: cstring, output: *cuchar): cint <cimport,nodecl> end
global function mbedtls_md_hmac_starts(ctx: *mbedtls_md_context_t, key: *cuchar, keylen: csize): cint <cimport,nodecl> end
global function mbedtls_md_hmac_update(ctx: *mbedtls_md_context_t, input: *cuchar, ilen: csize): cint <cimport,nodecl> end
global function mbedtls_md_hmac_finish(ctx: *mbedtls_md_context_t, output: *cuchar): cint <cimport,nodecl> end
global function mbedtls_md_hmac_reset(ctx: *mbedtls_md_context_t): cint <cimport,nodecl> end
global function mbedtls_md_hmac(md_info: *mbedtls_md_info_t, key: *cuchar, keylen: csize, input: *cuchar, ilen: csize, output: *cuchar): cint <cimport,nodecl> end
global function mbedtls_md_process(ctx: *mbedtls_md_context_t, data: *cuchar): cint <cimport,nodecl> end
global mbedtls_rsa_context: type <cimport,nodecl> = @record{
  ver: cint,
  len: csize,
  N: mbedtls_mpi,
  E: mbedtls_mpi,
  D: mbedtls_mpi,
  P: mbedtls_mpi,
  Q: mbedtls_mpi,
  DP: mbedtls_mpi,
  DQ: mbedtls_mpi,
  QP: mbedtls_mpi,
  RN: mbedtls_mpi,
  RP: mbedtls_mpi,
  RQ: mbedtls_mpi,
  Vi: mbedtls_mpi,
  Vf: mbedtls_mpi,
  padding: cint,
  hash_id: cint,
  mutex: mbedtls_threading_mutex_t
}
global function mbedtls_rsa_init(ctx: *mbedtls_rsa_context, padding: cint, hash_id: cint): void <cimport,nodecl> end
global function mbedtls_rsa_import(ctx: *mbedtls_rsa_context, N: *mbedtls_mpi, P: *mbedtls_mpi, Q: *mbedtls_mpi, D: *mbedtls_mpi, E: *mbedtls_mpi): cint <cimport,nodecl> end
global function mbedtls_rsa_import_raw(ctx: *mbedtls_rsa_context, N: *cuchar, N_len: csize, P: *cuchar, P_len: csize, Q: *cuchar, Q_len: csize, D: *cuchar, D_len: csize, E: *cuchar, E_len: csize): cint <cimport,nodecl> end
global function mbedtls_rsa_complete(ctx: *mbedtls_rsa_context): cint <cimport,nodecl> end
global function mbedtls_rsa_export(ctx: *mbedtls_rsa_context, N: *mbedtls_mpi, P: *mbedtls_mpi, Q: *mbedtls_mpi, D: *mbedtls_mpi, E: *mbedtls_mpi): cint <cimport,nodecl> end
global function mbedtls_rsa_export_raw(ctx: *mbedtls_rsa_context, N: *cuchar, N_len: csize, P: *cuchar, P_len: csize, Q: *cuchar, Q_len: csize, D: *cuchar, D_len: csize, E: *cuchar, E_len: csize): cint <cimport,nodecl> end
global function mbedtls_rsa_export_crt(ctx: *mbedtls_rsa_context, DP: *mbedtls_mpi, DQ: *mbedtls_mpi, QP: *mbedtls_mpi): cint <cimport,nodecl> end
global function mbedtls_rsa_set_padding(ctx: *mbedtls_rsa_context, padding: cint, hash_id: cint): void <cimport,nodecl> end
global function mbedtls_rsa_get_len(ctx: *mbedtls_rsa_context): csize <cimport,nodecl> end
global function mbedtls_rsa_gen_key(ctx: *mbedtls_rsa_context, f_rng: function(pointer, *cuchar, csize): cint, p_rng: pointer, nbits: cuint, exponent: cint): cint <cimport,nodecl> end
global function mbedtls_rsa_check_pubkey(ctx: *mbedtls_rsa_context): cint <cimport,nodecl> end
global function mbedtls_rsa_check_privkey(ctx: *mbedtls_rsa_context): cint <cimport,nodecl> end
global function mbedtls_rsa_check_pub_priv(pub: *mbedtls_rsa_context, prv: *mbedtls_rsa_context): cint <cimport,nodecl> end
global function mbedtls_rsa_public(ctx: *mbedtls_rsa_context, input: *cuchar, output: *cuchar): cint <cimport,nodecl> end
global function mbedtls_rsa_private(ctx: *mbedtls_rsa_context, f_rng: function(pointer, *cuchar, csize): cint, p_rng: pointer, input: *cuchar, output: *cuchar): cint <cimport,nodecl> end
global function mbedtls_rsa_pkcs1_encrypt(ctx: *mbedtls_rsa_context, f_rng: function(pointer, *cuchar, csize): cint, p_rng: pointer, mode: cint, ilen: csize, input: *cuchar, output: *cuchar): cint <cimport,nodecl> end
global function mbedtls_rsa_rsaes_pkcs1_v15_encrypt(ctx: *mbedtls_rsa_context, f_rng: function(pointer, *cuchar, csize): cint, p_rng: pointer, mode: cint, ilen: csize, input: *cuchar, output: *cuchar): cint <cimport,nodecl> end
global function mbedtls_rsa_rsaes_oaep_encrypt(ctx: *mbedtls_rsa_context, f_rng: function(pointer, *cuchar, csize): cint, p_rng: pointer, mode: cint, label: *cuchar, label_len: csize, ilen: csize, input: *cuchar, output: *cuchar): cint <cimport,nodecl> end
global function mbedtls_rsa_pkcs1_decrypt(ctx: *mbedtls_rsa_context, f_rng: function(pointer, *cuchar, csize): cint, p_rng: pointer, mode: cint, olen: *csize, input: *cuchar, output: *cuchar, output_max_len: csize): cint <cimport,nodecl> end
global function mbedtls_rsa_rsaes_pkcs1_v15_decrypt(ctx: *mbedtls_rsa_context, f_rng: function(pointer, *cuchar, csize): cint, p_rng: pointer, mode: cint, olen: *csize, input: *cuchar, output: *cuchar, output_max_len: csize): cint <cimport,nodecl> end
global function mbedtls_rsa_rsaes_oaep_decrypt(ctx: *mbedtls_rsa_context, f_rng: function(pointer, *cuchar, csize): cint, p_rng: pointer, mode: cint, label: *cuchar, label_len: csize, olen: *csize, input: *cuchar, output: *cuchar, output_max_len: csize): cint <cimport,nodecl> end
global function mbedtls_rsa_pkcs1_sign(ctx: *mbedtls_rsa_context, f_rng: function(pointer, *cuchar, csize): cint, p_rng: pointer, mode: cint, md_alg: mbedtls_md_type_t, hashlen: cuint, hash: *cuchar, sig: *cuchar): cint <cimport,nodecl> end
global function mbedtls_rsa_rsassa_pkcs1_v15_sign(ctx: *mbedtls_rsa_context, f_rng: function(pointer, *cuchar, csize): cint, p_rng: pointer, mode: cint, md_alg: mbedtls_md_type_t, hashlen: cuint, hash: *cuchar, sig: *cuchar): cint <cimport,nodecl> end
global function mbedtls_rsa_rsassa_pss_sign_ext(ctx: *mbedtls_rsa_context, f_rng: function(pointer, *cuchar, csize): cint, p_rng: pointer, md_alg: mbedtls_md_type_t, hashlen: cuint, hash: *cuchar, saltlen: cint, sig: *cuchar): cint <cimport,nodecl> end
global function mbedtls_rsa_rsassa_pss_sign(ctx: *mbedtls_rsa_context, f_rng: function(pointer, *cuchar, csize): cint, p_rng: pointer, mode: cint, md_alg: mbedtls_md_type_t, hashlen: cuint, hash: *cuchar, sig: *cuchar): cint <cimport,nodecl> end
global function mbedtls_rsa_pkcs1_verify(ctx: *mbedtls_rsa_context, f_rng: function(pointer, *cuchar, csize): cint, p_rng: pointer, mode: cint, md_alg: mbedtls_md_type_t, hashlen: cuint, hash: *cuchar, sig: *cuchar): cint <cimport,nodecl> end
global function mbedtls_rsa_rsassa_pkcs1_v15_verify(ctx: *mbedtls_rsa_context, f_rng: function(pointer, *cuchar, csize): cint, p_rng: pointer, mode: cint, md_alg: mbedtls_md_type_t, hashlen: cuint, hash: *cuchar, sig: *cuchar): cint <cimport,nodecl> end
global function mbedtls_rsa_rsassa_pss_verify(ctx: *mbedtls_rsa_context, f_rng: function(pointer, *cuchar, csize): cint, p_rng: pointer, mode: cint, md_alg: mbedtls_md_type_t, hashlen: cuint, hash: *cuchar, sig: *cuchar): cint <cimport,nodecl> end
global function mbedtls_rsa_rsassa_pss_verify_ext(ctx: *mbedtls_rsa_context, f_rng: function(pointer, *cuchar, csize): cint, p_rng: pointer, mode: cint, md_alg: mbedtls_md_type_t, hashlen: cuint, hash: *cuchar, mgf1_hash_id: mbedtls_md_type_t, expected_salt_len: cint, sig: *cuchar): cint <cimport,nodecl> end
global function mbedtls_rsa_copy(dst: *mbedtls_rsa_context, src: *mbedtls_rsa_context): cint <cimport,nodecl> end
global function mbedtls_rsa_free(ctx: *mbedtls_rsa_context): void <cimport,nodecl> end
global function mbedtls_rsa_self_test(verbose: cint): cint <cimport,nodecl> end
global mbedtls_ecdsa_context: type = @mbedtls_ecp_keypair
global function mbedtls_ecdsa_can_do(gid: mbedtls_ecp_group_id): cint <cimport,nodecl> end
global function mbedtls_ecdsa_sign(grp: *mbedtls_ecp_group, r: *mbedtls_mpi, s: *mbedtls_mpi, d: *mbedtls_mpi, buf: *cuchar, blen: csize, f_rng: function(pointer, *cuchar, csize): cint, p_rng: pointer): cint <cimport,nodecl> end
global function mbedtls_ecdsa_sign_det_ext(grp: *mbedtls_ecp_group, r: *mbedtls_mpi, s: *mbedtls_mpi, d: *mbedtls_mpi, buf: *cuchar, blen: csize, md_alg: mbedtls_md_type_t, f_rng_blind: function(pointer, *cuchar, csize): cint, p_rng_blind: pointer): cint <cimport,nodecl> end
global function mbedtls_ecdsa_verify(grp: *mbedtls_ecp_group, buf: *cuchar, blen: csize, Q: *mbedtls_ecp_point, r: *mbedtls_mpi, s: *mbedtls_mpi): cint <cimport,nodecl> end
global function mbedtls_ecdsa_write_signature(ctx: *mbedtls_ecdsa_context, md_alg: mbedtls_md_type_t, hash: *cuchar, hlen: csize, sig: *cuchar, slen: *csize, f_rng: function(pointer, *cuchar, csize): cint, p_rng: pointer): cint <cimport,nodecl> end
global function mbedtls_ecdsa_write_signature_restartable(ctx: *mbedtls_ecdsa_context, md_alg: mbedtls_md_type_t, hash: *cuchar, hlen: csize, sig: *cuchar, slen: *csize, f_rng: function(pointer, *cuchar, csize): cint, p_rng: pointer, rs_ctx: pointer): cint <cimport,nodecl> end
global function mbedtls_ecdsa_read_signature(ctx: *mbedtls_ecdsa_context, hash: *cuchar, hlen: csize, sig: *cuchar, slen: csize): cint <cimport,nodecl> end
global function mbedtls_ecdsa_read_signature_restartable(ctx: *mbedtls_ecdsa_context, hash: *cuchar, hlen: csize, sig: *cuchar, slen: csize, rs_ctx: pointer): cint <cimport,nodecl> end
global function mbedtls_ecdsa_genkey(ctx: *mbedtls_ecdsa_context, gid: mbedtls_ecp_group_id, f_rng: function(pointer, *cuchar, csize): cint, p_rng: pointer): cint <cimport,nodecl> end
global function mbedtls_ecdsa_from_keypair(ctx: *mbedtls_ecdsa_context, key: *mbedtls_ecp_keypair): cint <cimport,nodecl> end
global function mbedtls_ecdsa_init(ctx: *mbedtls_ecdsa_context): void <cimport,nodecl> end
global function mbedtls_ecdsa_free(ctx: *mbedtls_ecdsa_context): void <cimport,nodecl> end
global mbedtls_pk_type_t: type <cimport,nodecl,using> = @enum(cint){
  MBEDTLS_PK_NONE = 0,
  MBEDTLS_PK_RSA = 1,
  MBEDTLS_PK_ECKEY = 2,
  MBEDTLS_PK_ECKEY_DH = 3,
  MBEDTLS_PK_ECDSA = 4,
  MBEDTLS_PK_RSA_ALT = 5,
  MBEDTLS_PK_RSASSA_PSS = 6,
  MBEDTLS_PK_OPAQUE = 7
}
global mbedtls_pk_rsassa_pss_options: type <cimport,nodecl> = @record{
  mgf1_hash_id: mbedtls_md_type_t,
  expected_salt_len: cint
}
global mbedtls_pk_debug_type: type <cimport,nodecl,using> = @enum(cint){
  MBEDTLS_PK_DEBUG_NONE = 0,
  MBEDTLS_PK_DEBUG_MPI = 1,
  MBEDTLS_PK_DEBUG_ECP = 2
}
global mbedtls_pk_debug_item: type <cimport,nodecl> = @record{
  type: mbedtls_pk_debug_type,
  name: cstring,
  value: pointer
}
global mbedtls_pk_info_t: type <cimport,nodecl,forwarddecl> = @record{}
global mbedtls_pk_context: type <cimport,nodecl> = @record{
  pk_info: *mbedtls_pk_info_t,
  pk_ctx: pointer
}
global mbedtls_pk_rsa_alt_decrypt_func: type <cimport,nodecl> = @function(pointer, cint, *csize, *cuchar, *cuchar, csize): cint
global mbedtls_pk_rsa_alt_sign_func: type <cimport,nodecl> = @function(pointer, function(pointer, *cuchar, csize): cint, pointer, cint, mbedtls_md_type_t, cuint, *cuchar, *cuchar): cint
global mbedtls_pk_rsa_alt_key_len_func: type <cimport,nodecl> = @function(pointer): csize
global function mbedtls_pk_info_from_type(pk_type: mbedtls_pk_type_t): *mbedtls_pk_info_t <cimport,nodecl> end
global function mbedtls_pk_init(ctx: *mbedtls_pk_context): void <cimport,nodecl> end
global function mbedtls_pk_free(ctx: *mbedtls_pk_context): void <cimport,nodecl> end
global function mbedtls_pk_setup(ctx: *mbedtls_pk_context, info: *mbedtls_pk_info_t): cint <cimport,nodecl> end
global function mbedtls_pk_setup_rsa_alt(ctx: *mbedtls_pk_context, key: pointer, decrypt_func: mbedtls_pk_rsa_alt_decrypt_func, sign_func: mbedtls_pk_rsa_alt_sign_func, key_len_func: mbedtls_pk_rsa_alt_key_len_func): cint <cimport,nodecl> end
global function mbedtls_pk_get_bitlen(ctx: *mbedtls_pk_context): csize <cimport,nodecl> end
global function mbedtls_pk_get_len(ctx: *mbedtls_pk_context): csize <cimport,nodecl> end
global function mbedtls_pk_can_do(ctx: *mbedtls_pk_context, type: mbedtls_pk_type_t): cint <cimport,nodecl> end
global function mbedtls_pk_verify(ctx: *mbedtls_pk_context, md_alg: mbedtls_md_type_t, hash: *cuchar, hash_len: csize, sig: *cuchar, sig_len: csize): cint <cimport,nodecl> end
global function mbedtls_pk_verify_restartable(ctx: *mbedtls_pk_context, md_alg: mbedtls_md_type_t, hash: *cuchar, hash_len: csize, sig: *cuchar, sig_len: csize, rs_ctx: pointer): cint <cimport,nodecl> end
global function mbedtls_pk_verify_ext(type: mbedtls_pk_type_t, options: pointer, ctx: *mbedtls_pk_context, md_alg: mbedtls_md_type_t, hash: *cuchar, hash_len: csize, sig: *cuchar, sig_len: csize): cint <cimport,nodecl> end
global function mbedtls_pk_sign(ctx: *mbedtls_pk_context, md_alg: mbedtls_md_type_t, hash: *cuchar, hash_len: csize, sig: *cuchar, sig_len: *csize, f_rng: function(pointer, *cuchar, csize): cint, p_rng: pointer): cint <cimport,nodecl> end
global function mbedtls_pk_sign_restartable(ctx: *mbedtls_pk_context, md_alg: mbedtls_md_type_t, hash: *cuchar, hash_len: csize, sig: *cuchar, sig_len: *csize, f_rng: function(pointer, *cuchar, csize): cint, p_rng: pointer, rs_ctx: pointer): cint <cimport,nodecl> end
global function mbedtls_pk_decrypt(ctx: *mbedtls_pk_context, input: *cuchar, ilen: csize, output: *cuchar, olen: *csize, osize: csize, f_rng: function(pointer, *cuchar, csize): cint, p_rng: pointer): cint <cimport,nodecl> end
global function mbedtls_pk_encrypt(ctx: *mbedtls_pk_context, input: *cuchar, ilen: csize, output: *cuchar, olen: *csize, osize: csize, f_rng: function(pointer, *cuchar, csize): cint, p_rng: pointer): cint <cimport,nodecl> end
global function mbedtls_pk_check_pair(pub: *mbedtls_pk_context, prv: *mbedtls_pk_context): cint <cimport,nodecl> end
global function mbedtls_pk_debug(ctx: *mbedtls_pk_context, items: *mbedtls_pk_debug_item): cint <cimport,nodecl> end
global function mbedtls_pk_get_name(ctx: *mbedtls_pk_context): cstring <cimport,nodecl> end
global function mbedtls_pk_get_type(ctx: *mbedtls_pk_context): mbedtls_pk_type_t <cimport,nodecl> end
global function mbedtls_pk_rsa(pk: mbedtls_pk_context): *mbedtls_rsa_context <cimport,nodecl> end
global function mbedtls_pk_ec(pk: mbedtls_pk_context): *mbedtls_ecp_keypair <cimport,nodecl> end
global function mbedtls_pk_parse_key(ctx: *mbedtls_pk_context, key: *cuchar, keylen: csize, pwd: *cuchar, pwdlen: csize): cint <cimport,nodecl> end
global function mbedtls_pk_parse_public_key(ctx: *mbedtls_pk_context, key: *cuchar, keylen: csize): cint <cimport,nodecl> end
global function mbedtls_pk_parse_keyfile(ctx: *mbedtls_pk_context, path: cstring, password: cstring): cint <cimport,nodecl> end
global function mbedtls_pk_parse_public_keyfile(ctx: *mbedtls_pk_context, path: cstring): cint <cimport,nodecl> end
global function mbedtls_pk_write_key_der(ctx: *mbedtls_pk_context, buf: *cuchar, size: csize): cint <cimport,nodecl> end
global function mbedtls_pk_write_pubkey_der(ctx: *mbedtls_pk_context, buf: *cuchar, size: csize): cint <cimport,nodecl> end
global function mbedtls_pk_write_pubkey_pem(ctx: *mbedtls_pk_context, buf: *cuchar, size: csize): cint <cimport,nodecl> end
global function mbedtls_pk_write_key_pem(ctx: *mbedtls_pk_context, buf: *cuchar, size: csize): cint <cimport,nodecl> end
global function mbedtls_pk_parse_subpubkey(p: **cuchar, End: *cuchar, pk: *mbedtls_pk_context): cint <cimport,nodecl> end
global function mbedtls_pk_write_pubkey(p: **cuchar, start: *cuchar, key: *mbedtls_pk_context): cint <cimport,nodecl> end
global function mbedtls_pk_load_file(path: cstring, buf: **cuchar, n: *csize): cint <cimport,nodecl> end
global mbedtls_key_exchange_type_t: type <cimport,nodecl,using> = @enum(cint){
  MBEDTLS_KEY_EXCHANGE_NONE = 0,
  MBEDTLS_KEY_EXCHANGE_RSA = 1,
  MBEDTLS_KEY_EXCHANGE_DHE_RSA = 2,
  MBEDTLS_KEY_EXCHANGE_ECDHE_RSA = 3,
  MBEDTLS_KEY_EXCHANGE_ECDHE_ECDSA = 4,
  MBEDTLS_KEY_EXCHANGE_PSK = 5,
  MBEDTLS_KEY_EXCHANGE_DHE_PSK = 6,
  MBEDTLS_KEY_EXCHANGE_RSA_PSK = 7,
  MBEDTLS_KEY_EXCHANGE_ECDHE_PSK = 8,
  MBEDTLS_KEY_EXCHANGE_ECDH_RSA = 9,
  MBEDTLS_KEY_EXCHANGE_ECDH_ECDSA = 10,
  MBEDTLS_KEY_EXCHANGE_ECJPAKE = 11
}
global mbedtls_ssl_ciphersuite_t: type <cimport,nodecl,forwarddecl> = @record{}
mbedtls_ssl_ciphersuite_t = @record{
  id: cint,
  name: cstring,
  cipher: mbedtls_cipher_type_t,
  mac: mbedtls_md_type_t,
  key_exchange: mbedtls_key_exchange_type_t,
  min_major_ver: cint,
  min_minor_ver: cint,
  max_major_ver: cint,
  max_minor_ver: cint,
  flags: cuchar
}
global function mbedtls_ssl_list_ciphersuites(): *cint <cimport,nodecl> end
global function mbedtls_ssl_ciphersuite_from_string(ciphersuite_name: cstring): *mbedtls_ssl_ciphersuite_t <cimport,nodecl> end
global function mbedtls_ssl_ciphersuite_from_id(ciphersuite_id: cint): *mbedtls_ssl_ciphersuite_t <cimport,nodecl> end
global function mbedtls_ssl_get_ciphersuite_sig_pk_alg(info: *mbedtls_ssl_ciphersuite_t): mbedtls_pk_type_t <cimport,nodecl> end
global function mbedtls_ssl_get_ciphersuite_sig_alg(info: *mbedtls_ssl_ciphersuite_t): mbedtls_pk_type_t <cimport,nodecl> end
global function mbedtls_ssl_ciphersuite_uses_ec(info: *mbedtls_ssl_ciphersuite_t): cint <cimport,nodecl> end
global function mbedtls_ssl_ciphersuite_uses_psk(info: *mbedtls_ssl_ciphersuite_t): cint <cimport,nodecl> end
global function mbedtls_ssl_ciphersuite_has_pfs(info: *mbedtls_ssl_ciphersuite_t): cint <cimport,nodecl> end
global function mbedtls_ssl_ciphersuite_no_pfs(info: *mbedtls_ssl_ciphersuite_t): cint <cimport,nodecl> end
global function mbedtls_ssl_ciphersuite_uses_ecdh(info: *mbedtls_ssl_ciphersuite_t): cint <cimport,nodecl> end
global function mbedtls_ssl_ciphersuite_cert_req_allowed(info: *mbedtls_ssl_ciphersuite_t): cint <cimport,nodecl> end
global function mbedtls_ssl_ciphersuite_uses_srv_cert(info: *mbedtls_ssl_ciphersuite_t): cint <cimport,nodecl> end
global function mbedtls_ssl_ciphersuite_uses_dhe(info: *mbedtls_ssl_ciphersuite_t): cint <cimport,nodecl> end
global function mbedtls_ssl_ciphersuite_uses_ecdhe(info: *mbedtls_ssl_ciphersuite_t): cint <cimport,nodecl> end
global function mbedtls_ssl_ciphersuite_uses_server_signature(info: *mbedtls_ssl_ciphersuite_t): cint <cimport,nodecl> end
global mbedtls_x509_buf: type = @mbedtls_asn1_buf
global mbedtls_x509_bitstring: type = @mbedtls_asn1_bitstring
global mbedtls_x509_name: type = @mbedtls_asn1_named_data
global mbedtls_x509_sequence: type = @mbedtls_asn1_sequence
global mbedtls_x509_time: type <cimport,nodecl> = @record{
  year: cint,
  mon: cint,
  day: cint,
  hour: cint,
  min: cint,
  sec: cint
}
global function mbedtls_x509_dn_gets(buf: cstring, size: csize, dn: *mbedtls_x509_name): cint <cimport,nodecl> end
global function mbedtls_x509_serial_gets(buf: cstring, size: csize, serial: *mbedtls_x509_buf): cint <cimport,nodecl> end
global function mbedtls_x509_time_is_past(to: *mbedtls_x509_time): cint <cimport,nodecl> end
global function mbedtls_x509_time_is_future(from: *mbedtls_x509_time): cint <cimport,nodecl> end
global function mbedtls_x509_self_test(verbose: cint): cint <cimport,nodecl> end
global function mbedtls_x509_get_name(p: **cuchar, End: *cuchar, cur: *mbedtls_x509_name): cint <cimport,nodecl> end
global function mbedtls_x509_get_alg_null(p: **cuchar, End: *cuchar, alg: *mbedtls_x509_buf): cint <cimport,nodecl> end
global function mbedtls_x509_get_alg(p: **cuchar, End: *cuchar, alg: *mbedtls_x509_buf, params: *mbedtls_x509_buf): cint <cimport,nodecl> end
global function mbedtls_x509_get_rsassa_pss_params(params: *mbedtls_x509_buf, md_alg: *mbedtls_md_type_t, mgf_md: *mbedtls_md_type_t, salt_len: *cint): cint <cimport,nodecl> end
global function mbedtls_x509_get_sig(p: **cuchar, End: *cuchar, sig: *mbedtls_x509_buf): cint <cimport,nodecl> end
global function mbedtls_x509_get_sig_alg(sig_oid: *mbedtls_x509_buf, sig_params: *mbedtls_x509_buf, md_alg: *mbedtls_md_type_t, pk_alg: *mbedtls_pk_type_t, sig_opts: *pointer): cint <cimport,nodecl> end
global function mbedtls_x509_get_time(p: **cuchar, End: *cuchar, t: *mbedtls_x509_time): cint <cimport,nodecl> end
global function mbedtls_x509_get_serial(p: **cuchar, End: *cuchar, serial: *mbedtls_x509_buf): cint <cimport,nodecl> end
global function mbedtls_x509_get_ext(p: **cuchar, End: *cuchar, ext: *mbedtls_x509_buf, tag: cint): cint <cimport,nodecl> end
global function mbedtls_x509_sig_alg_gets(buf: cstring, size: csize, sig_oid: *mbedtls_x509_buf, pk_alg: mbedtls_pk_type_t, md_alg: mbedtls_md_type_t, sig_opts: pointer): cint <cimport,nodecl> end
global function mbedtls_x509_key_size_helper(buf: cstring, buf_size: csize, name: cstring): cint <cimport,nodecl> end
global function mbedtls_x509_string_to_names(head: **mbedtls_asn1_named_data, name: cstring): cint <cimport,nodecl> end
global function mbedtls_x509_set_extension(head: **mbedtls_asn1_named_data, oid: cstring, oid_len: csize, critical: cint, val: *cuchar, val_len: csize): cint <cimport,nodecl> end
global function mbedtls_x509_write_extensions(p: **cuchar, start: *cuchar, first: *mbedtls_asn1_named_data): cint <cimport,nodecl> end
global function mbedtls_x509_write_names(p: **cuchar, start: *cuchar, first: *mbedtls_asn1_named_data): cint <cimport,nodecl> end
global function mbedtls_x509_write_sig(p: **cuchar, start: *cuchar, oid: cstring, oid_len: csize, sig: *cuchar, size: csize): cint <cimport,nodecl> end
global mbedtls_x509_crl_entry: type <cimport,nodecl,forwarddecl> = @record{}
mbedtls_x509_crl_entry = @record{
  raw: mbedtls_x509_buf,
  serial: mbedtls_x509_buf,
  revocation_date: mbedtls_x509_time,
  entry_ext: mbedtls_x509_buf,
  next: *mbedtls_x509_crl_entry
}
global mbedtls_x509_crl: type <cimport,nodecl,forwarddecl> = @record{}
mbedtls_x509_crl = @record{
  raw: mbedtls_x509_buf,
  tbs: mbedtls_x509_buf,
  version: cint,
  sig_oid: mbedtls_x509_buf,
  issuer_raw: mbedtls_x509_buf,
  issuer: mbedtls_x509_name,
  this_update: mbedtls_x509_time,
  next_update: mbedtls_x509_time,
  entry: mbedtls_x509_crl_entry,
  crl_ext: mbedtls_x509_buf,
  sig_oid2: mbedtls_x509_buf,
  sig: mbedtls_x509_buf,
  sig_md: mbedtls_md_type_t,
  sig_pk: mbedtls_pk_type_t,
  sig_opts: pointer,
  next: *mbedtls_x509_crl
}
global function mbedtls_x509_crl_parse_der(chain: *mbedtls_x509_crl, buf: *cuchar, buflen: csize): cint <cimport,nodecl> end
global function mbedtls_x509_crl_parse(chain: *mbedtls_x509_crl, buf: *cuchar, buflen: csize): cint <cimport,nodecl> end
global function mbedtls_x509_crl_parse_file(chain: *mbedtls_x509_crl, path: cstring): cint <cimport,nodecl> end
global function mbedtls_x509_crl_info(buf: cstring, size: csize, prefix: cstring, crl: *mbedtls_x509_crl): cint <cimport,nodecl> end
global function mbedtls_x509_crl_init(crl: *mbedtls_x509_crl): void <cimport,nodecl> end
global function mbedtls_x509_crl_free(crl: *mbedtls_x509_crl): void <cimport,nodecl> end
global mbedtls_x509_crt: type <cimport,nodecl,forwarddecl> = @record{}
mbedtls_x509_crt = @record{
  own_buffer: cint,
  raw: mbedtls_x509_buf,
  tbs: mbedtls_x509_buf,
  version: cint,
  serial: mbedtls_x509_buf,
  sig_oid: mbedtls_x509_buf,
  issuer_raw: mbedtls_x509_buf,
  subject_raw: mbedtls_x509_buf,
  issuer: mbedtls_x509_name,
  subject: mbedtls_x509_name,
  valid_from: mbedtls_x509_time,
  valid_to: mbedtls_x509_time,
  pk_raw: mbedtls_x509_buf,
  pk: mbedtls_pk_context,
  issuer_id: mbedtls_x509_buf,
  subject_id: mbedtls_x509_buf,
  v3_ext: mbedtls_x509_buf,
  subject_alt_names: mbedtls_x509_sequence,
  certificate_policies: mbedtls_x509_sequence,
  ext_types: cint,
  ca_istrue: cint,
  max_pathlen: cint,
  key_usage: cuint,
  ext_key_usage: mbedtls_x509_sequence,
  ns_cert_type: cuchar,
  sig: mbedtls_x509_buf,
  sig_md: mbedtls_md_type_t,
  sig_pk: mbedtls_pk_type_t,
  sig_opts: pointer,
  next: *mbedtls_x509_crt
}
global mbedtls_x509_san_other_name: type <cimport,nodecl> = @record{
  type_id: mbedtls_x509_buf,
  value: union{
    hardware_module_name: record{
      oid: mbedtls_x509_buf,
      val: mbedtls_x509_buf
    }
  }
}
global mbedtls_x509_subject_alternative_name: type <cimport,nodecl> = @record{
  type: cint,
  san: union{
    other_name: mbedtls_x509_san_other_name,
    unstructured_name: mbedtls_x509_buf
  }
}
global mbedtls_x509_crt_profile: type <cimport,nodecl> = @record{
  allowed_mds: uint32,
  allowed_pks: uint32,
  allowed_curves: uint32,
  rsa_min_bitlen: uint32
}
global mbedtls_x509write_cert: type <cimport,nodecl> = @record{
  version: cint,
  serial: mbedtls_mpi,
  subject_key: *mbedtls_pk_context,
  issuer_key: *mbedtls_pk_context,
  subject: *mbedtls_asn1_named_data,
  issuer: *mbedtls_asn1_named_data,
  md_alg: mbedtls_md_type_t,
  not_before: [16]cchar,
  not_after: [16]cchar,
  extensions: *mbedtls_asn1_named_data
}
global mbedtls_x509_crt_verify_chain_item: type <cimport,nodecl> = @record{
  crt: *mbedtls_x509_crt,
  flags: uint32
}
global mbedtls_x509_crt_verify_chain: type <cimport,nodecl> = @record{
  items: [10]mbedtls_x509_crt_verify_chain_item,
  len: cuint
}
global mbedtls_x509_crt_profile_default: mbedtls_x509_crt_profile <cimport,nodecl>
global mbedtls_x509_crt_profile_next: mbedtls_x509_crt_profile <cimport,nodecl>
global mbedtls_x509_crt_profile_suiteb: mbedtls_x509_crt_profile <cimport,nodecl>
global function mbedtls_x509_crt_parse_der(chain: *mbedtls_x509_crt, buf: *cuchar, buflen: csize): cint <cimport,nodecl> end
global mbedtls_x509_crt_ext_cb_t: type <cimport,nodecl> = @function(pointer, *mbedtls_x509_crt, *mbedtls_x509_buf, cint, *cuchar, *cuchar): cint
global function mbedtls_x509_crt_parse_der_with_ext_cb(chain: *mbedtls_x509_crt, buf: *cuchar, buflen: csize, make_copy: cint, cb: mbedtls_x509_crt_ext_cb_t, p_ctx: pointer): cint <cimport,nodecl> end
global function mbedtls_x509_crt_parse_der_nocopy(chain: *mbedtls_x509_crt, buf: *cuchar, buflen: csize): cint <cimport,nodecl> end
global function mbedtls_x509_crt_parse(chain: *mbedtls_x509_crt, buf: *cuchar, buflen: csize): cint <cimport,nodecl> end
global function mbedtls_x509_crt_parse_file(chain: *mbedtls_x509_crt, path: cstring): cint <cimport,nodecl> end
global function mbedtls_x509_crt_parse_path(chain: *mbedtls_x509_crt, path: cstring): cint <cimport,nodecl> end
global function mbedtls_x509_parse_subject_alt_name(san_buf: *mbedtls_x509_buf, san: *mbedtls_x509_subject_alternative_name): cint <cimport,nodecl> end
global function mbedtls_x509_crt_info(buf: cstring, size: csize, prefix: cstring, crt: *mbedtls_x509_crt): cint <cimport,nodecl> end
global function mbedtls_x509_crt_verify_info(buf: cstring, size: csize, prefix: cstring, flags: uint32): cint <cimport,nodecl> end
global function mbedtls_x509_crt_verify(crt: *mbedtls_x509_crt, trust_ca: *mbedtls_x509_crt, ca_crl: *mbedtls_x509_crl, cn: cstring, flags: *uint32, f_vrfy: function(pointer, *mbedtls_x509_crt, cint, *uint32): cint, p_vrfy: pointer): cint <cimport,nodecl> end
global function mbedtls_x509_crt_verify_with_profile(crt: *mbedtls_x509_crt, trust_ca: *mbedtls_x509_crt, ca_crl: *mbedtls_x509_crl, profile: *mbedtls_x509_crt_profile, cn: cstring, flags: *uint32, f_vrfy: function(pointer, *mbedtls_x509_crt, cint, *uint32): cint, p_vrfy: pointer): cint <cimport,nodecl> end
global function mbedtls_x509_crt_verify_restartable(crt: *mbedtls_x509_crt, trust_ca: *mbedtls_x509_crt, ca_crl: *mbedtls_x509_crl, profile: *mbedtls_x509_crt_profile, cn: cstring, flags: *uint32, f_vrfy: function(pointer, *mbedtls_x509_crt, cint, *uint32): cint, p_vrfy: pointer, rs_ctx: pointer): cint <cimport,nodecl> end
global mbedtls_x509_crt_ca_cb_t: type <cimport,nodecl> = @function(pointer, *mbedtls_x509_crt, **mbedtls_x509_crt): cint
global function mbedtls_x509_crt_check_key_usage(crt: *mbedtls_x509_crt, usage: cuint): cint <cimport,nodecl> end
global function mbedtls_x509_crt_check_extended_key_usage(crt: *mbedtls_x509_crt, usage_oid: cstring, usage_len: csize): cint <cimport,nodecl> end
global function mbedtls_x509_crt_is_revoked(crt: *mbedtls_x509_crt, crl: *mbedtls_x509_crl): cint <cimport,nodecl> end
global function mbedtls_x509_crt_init(crt: *mbedtls_x509_crt): void <cimport,nodecl> end
global function mbedtls_x509_crt_free(crt: *mbedtls_x509_crt): void <cimport,nodecl> end
global function mbedtls_x509write_crt_init(ctx: *mbedtls_x509write_cert): void <cimport,nodecl> end
global function mbedtls_x509write_crt_set_version(ctx: *mbedtls_x509write_cert, version: cint): void <cimport,nodecl> end
global function mbedtls_x509write_crt_set_serial(ctx: *mbedtls_x509write_cert, serial: *mbedtls_mpi): cint <cimport,nodecl> end
global function mbedtls_x509write_crt_set_validity(ctx: *mbedtls_x509write_cert, not_before: cstring, not_after: cstring): cint <cimport,nodecl> end
global function mbedtls_x509write_crt_set_issuer_name(ctx: *mbedtls_x509write_cert, issuer_name: cstring): cint <cimport,nodecl> end
global function mbedtls_x509write_crt_set_subject_name(ctx: *mbedtls_x509write_cert, subject_name: cstring): cint <cimport,nodecl> end
global function mbedtls_x509write_crt_set_subject_key(ctx: *mbedtls_x509write_cert, key: *mbedtls_pk_context): void <cimport,nodecl> end
global function mbedtls_x509write_crt_set_issuer_key(ctx: *mbedtls_x509write_cert, key: *mbedtls_pk_context): void <cimport,nodecl> end
global function mbedtls_x509write_crt_set_md_alg(ctx: *mbedtls_x509write_cert, md_alg: mbedtls_md_type_t): void <cimport,nodecl> end
global function mbedtls_x509write_crt_set_extension(ctx: *mbedtls_x509write_cert, oid: cstring, oid_len: csize, critical: cint, val: *cuchar, val_len: csize): cint <cimport,nodecl> end
global function mbedtls_x509write_crt_set_basic_constraints(ctx: *mbedtls_x509write_cert, is_ca: cint, max_pathlen: cint): cint <cimport,nodecl> end
global function mbedtls_x509write_crt_set_subject_key_identifier(ctx: *mbedtls_x509write_cert): cint <cimport,nodecl> end
global function mbedtls_x509write_crt_set_authority_key_identifier(ctx: *mbedtls_x509write_cert): cint <cimport,nodecl> end
global function mbedtls_x509write_crt_set_key_usage(ctx: *mbedtls_x509write_cert, key_usage: cuint): cint <cimport,nodecl> end
global function mbedtls_x509write_crt_set_ns_cert_type(ctx: *mbedtls_x509write_cert, ns_cert_type: cuchar): cint <cimport,nodecl> end
global function mbedtls_x509write_crt_free(ctx: *mbedtls_x509write_cert): void <cimport,nodecl> end
global function mbedtls_x509write_crt_der(ctx: *mbedtls_x509write_cert, buf: *cuchar, size: csize, f_rng: function(pointer, *cuchar, csize): cint, p_rng: pointer): cint <cimport,nodecl> end
global function mbedtls_x509write_crt_pem(ctx: *mbedtls_x509write_cert, buf: *cuchar, size: csize, f_rng: function(pointer, *cuchar, csize): cint, p_rng: pointer): cint <cimport,nodecl> end
global mbedtls_dhm_context: type <cimport,nodecl> = @record{
  len: csize,
  P: mbedtls_mpi,
  G: mbedtls_mpi,
  X: mbedtls_mpi,
  GX: mbedtls_mpi,
  GY: mbedtls_mpi,
  K: mbedtls_mpi,
  RP: mbedtls_mpi,
  Vi: mbedtls_mpi,
  Vf: mbedtls_mpi,
  pX: mbedtls_mpi
}
global function mbedtls_dhm_init(ctx: *mbedtls_dhm_context): void <cimport,nodecl> end
global function mbedtls_dhm_read_params(ctx: *mbedtls_dhm_context, p: **cuchar, End: *cuchar): cint <cimport,nodecl> end
global function mbedtls_dhm_make_params(ctx: *mbedtls_dhm_context, x_size: cint, output: *cuchar, olen: *csize, f_rng: function(pointer, *cuchar, csize): cint, p_rng: pointer): cint <cimport,nodecl> end
global function mbedtls_dhm_set_group(ctx: *mbedtls_dhm_context, P: *mbedtls_mpi, G: *mbedtls_mpi): cint <cimport,nodecl> end
global function mbedtls_dhm_read_public(ctx: *mbedtls_dhm_context, input: *cuchar, ilen: csize): cint <cimport,nodecl> end
global function mbedtls_dhm_make_public(ctx: *mbedtls_dhm_context, x_size: cint, output: *cuchar, olen: csize, f_rng: function(pointer, *cuchar, csize): cint, p_rng: pointer): cint <cimport,nodecl> end
global function mbedtls_dhm_calc_secret(ctx: *mbedtls_dhm_context, output: *cuchar, output_size: csize, olen: *csize, f_rng: function(pointer, *cuchar, csize): cint, p_rng: pointer): cint <cimport,nodecl> end
global function mbedtls_dhm_free(ctx: *mbedtls_dhm_context): void <cimport,nodecl> end
global function mbedtls_dhm_parse_dhm(dhm: *mbedtls_dhm_context, dhmin: *cuchar, dhminlen: csize): cint <cimport,nodecl> end
global function mbedtls_dhm_parse_dhmfile(dhm: *mbedtls_dhm_context, path: cstring): cint <cimport,nodecl> end
global function mbedtls_dhm_self_test(verbose: cint): cint <cimport,nodecl> end
global mbedtls_ecdh_side: type <cimport,nodecl,using> = @enum(cint){
  MBEDTLS_ECDH_OURS = 0,
  MBEDTLS_ECDH_THEIRS = 1
}
global mbedtls_ecdh_context: type <cimport,nodecl> = @record{
  grp: mbedtls_ecp_group,
  d: mbedtls_mpi,
  Q: mbedtls_ecp_point,
  Qp: mbedtls_ecp_point,
  z: mbedtls_mpi,
  point_format: cint,
  Vi: mbedtls_ecp_point,
  Vf: mbedtls_ecp_point,
  _d: mbedtls_mpi
}
global function mbedtls_ecdh_can_do(gid: mbedtls_ecp_group_id): cint <cimport,nodecl> end
global function mbedtls_ecdh_gen_public(grp: *mbedtls_ecp_group, d: *mbedtls_mpi, Q: *mbedtls_ecp_point, f_rng: function(pointer, *cuchar, csize): cint, p_rng: pointer): cint <cimport,nodecl> end
global function mbedtls_ecdh_compute_shared(grp: *mbedtls_ecp_group, z: *mbedtls_mpi, Q: *mbedtls_ecp_point, d: *mbedtls_mpi, f_rng: function(pointer, *cuchar, csize): cint, p_rng: pointer): cint <cimport,nodecl> end
global function mbedtls_ecdh_init(ctx: *mbedtls_ecdh_context): void <cimport,nodecl> end
global function mbedtls_ecdh_setup(ctx: *mbedtls_ecdh_context, grp_id: mbedtls_ecp_group_id): cint <cimport,nodecl> end
global function mbedtls_ecdh_free(ctx: *mbedtls_ecdh_context): void <cimport,nodecl> end
global function mbedtls_ecdh_make_params(ctx: *mbedtls_ecdh_context, olen: *csize, buf: *cuchar, blen: csize, f_rng: function(pointer, *cuchar, csize): cint, p_rng: pointer): cint <cimport,nodecl> end
global function mbedtls_ecdh_read_params(ctx: *mbedtls_ecdh_context, buf: **cuchar, End: *cuchar): cint <cimport,nodecl> end
global function mbedtls_ecdh_get_params(ctx: *mbedtls_ecdh_context, key: *mbedtls_ecp_keypair, side: mbedtls_ecdh_side): cint <cimport,nodecl> end
global function mbedtls_ecdh_make_public(ctx: *mbedtls_ecdh_context, olen: *csize, buf: *cuchar, blen: csize, f_rng: function(pointer, *cuchar, csize): cint, p_rng: pointer): cint <cimport,nodecl> end
global function mbedtls_ecdh_read_public(ctx: *mbedtls_ecdh_context, buf: *cuchar, blen: csize): cint <cimport,nodecl> end
global function mbedtls_ecdh_calc_secret(ctx: *mbedtls_ecdh_context, olen: *csize, buf: *cuchar, blen: csize, f_rng: function(pointer, *cuchar, csize): cint, p_rng: pointer): cint <cimport,nodecl> end
global mbedtls_ssl_premaster_secret: type <cimport,nodecl,ctypedef> = @union{
  _pms_rsa: [48]cuchar,
  _pms_dhm: [1024]cuchar,
  _pms_ecdh: [66]cuchar,
  _pms_psk: [68]cuchar,
  _pms_dhe_psk: [1060]cuchar,
  _pms_rsa_psk: [84]cuchar,
  _pms_ecdhe_psk: [102]cuchar
}
global mbedtls_ssl_states: type <cimport,nodecl,using> = @enum(cint){
  MBEDTLS_SSL_HELLO_REQUEST = 0,
  MBEDTLS_SSL_CLIENT_HELLO = 1,
  MBEDTLS_SSL_SERVER_HELLO = 2,
  MBEDTLS_SSL_SERVER_CERTIFICATE = 3,
  MBEDTLS_SSL_SERVER_KEY_EXCHANGE = 4,
  MBEDTLS_SSL_CERTIFICATE_REQUEST = 5,
  MBEDTLS_SSL_SERVER_HELLO_DONE = 6,
  MBEDTLS_SSL_CLIENT_CERTIFICATE = 7,
  MBEDTLS_SSL_CLIENT_KEY_EXCHANGE = 8,
  MBEDTLS_SSL_CERTIFICATE_VERIFY = 9,
  MBEDTLS_SSL_CLIENT_CHANGE_CIPHER_SPEC = 10,
  MBEDTLS_SSL_CLIENT_FINISHED = 11,
  MBEDTLS_SSL_SERVER_CHANGE_CIPHER_SPEC = 12,
  MBEDTLS_SSL_SERVER_FINISHED = 13,
  MBEDTLS_SSL_FLUSH_BUFFERS = 14,
  MBEDTLS_SSL_HANDSHAKE_WRAPUP = 15,
  MBEDTLS_SSL_HANDSHAKE_OVER = 16,
  MBEDTLS_SSL_SERVER_NEW_SESSION_TICKET = 17,
  MBEDTLS_SSL_SERVER_HELLO_VERIFY_REQUEST_SENT = 18
}
global mbedtls_tls_prf_types: type <cimport,nodecl,using> = @enum(cint){
  MBEDTLS_SSL_TLS_PRF_NONE = 0,
  MBEDTLS_SSL_TLS_PRF_SSL3 = 1,
  MBEDTLS_SSL_TLS_PRF_TLS1 = 2,
  MBEDTLS_SSL_TLS_PRF_SHA384 = 3,
  MBEDTLS_SSL_TLS_PRF_SHA256 = 4
}
global mbedtls_ssl_send_t: type <cimport,nodecl> = @function(pointer, *cuchar, csize): cint
global mbedtls_ssl_recv_t: type <cimport,nodecl> = @function(pointer, *cuchar, csize): cint
global mbedtls_ssl_recv_timeout_t: type <cimport,nodecl> = @function(pointer, *cuchar, csize, uint32): cint
global mbedtls_ssl_set_timer_t: type <cimport,nodecl> = @function(pointer, uint32, uint32): void
global mbedtls_ssl_get_timer_t: type <cimport,nodecl> = @function(pointer): cint
global mbedtls_ssl_session: type <cimport,nodecl,forwarddecl> = @record{}
global mbedtls_ssl_context: type <cimport,nodecl,forwarddecl> = @record{}
global mbedtls_ssl_config: type <cimport,nodecl,forwarddecl> = @record{}
global mbedtls_ssl_transform: type <cimport,nodecl,forwarddecl> = @record{}
global mbedtls_ssl_handshake_params: type <cimport,nodecl,forwarddecl> = @record{}
global mbedtls_ssl_sig_hash_set_t: type <cimport,nodecl,forwarddecl> = @record{}
global mbedtls_ssl_key_cert: type <cimport,nodecl,forwarddecl> = @record{}
global mbedtls_ssl_flight_item: type <cimport,nodecl,forwarddecl> = @record{}
mbedtls_ssl_session = @record{
  mfl_code: cuchar,
  start: clong,
  ciphersuite: cint,
  compression: cint,
  id_len: csize,
  id: [32]cuchar,
  master: [48]cuchar,
  peer_cert: *mbedtls_x509_crt,
  verify_result: uint32,
  ticket: *cuchar,
  ticket_len: csize,
  ticket_lifetime: uint32,
  trunc_hmac: cint,
  encrypt_then_mac: cint
}
mbedtls_ssl_config = @record{
  max_major_ver: cuchar,
  max_minor_ver: cuchar,
  min_major_ver: cuchar,
  min_minor_ver: cuchar,
  endpoint: uint8,
  transport: uint8,
  authmode: uint8,
  allow_legacy_renegotiation: uint8,
  arc4_disabled: uint8,
  mfl_code: uint8,
  encrypt_then_mac: uint8,
  extended_ms: uint8,
  anti_replay: uint8,
  cbc_record_splitting: uint8,
  disable_renegotiation: uint8,
  trunc_hmac: uint8,
  session_tickets: uint8,
  fallback: uint8,
  cert_req_ca_list: uint8,
  read_timeout: uint32,
  hs_timeout_min: uint32,
  hs_timeout_max: uint32,
  renego_max_records: cint,
  renego_period: [8]cuchar,
  badmac_limit: cuint,
  dhm_min_bitlen: cuint,
  ciphersuite_list: [4]*cint,
  f_dbg: function(pointer, cint, cstring, cint, cstring): void,
  p_dbg: pointer,
  f_rng: function(pointer, *cuchar, csize): cint,
  p_rng: pointer,
  f_get_cache: function(pointer, *mbedtls_ssl_session): cint,
  f_set_cache: function(pointer, *mbedtls_ssl_session): cint,
  p_cache: pointer,
  f_sni: function(pointer, *mbedtls_ssl_context, *cuchar, csize): cint,
  p_sni: pointer,
  f_vrfy: function(pointer, *mbedtls_x509_crt, cint, *uint32): cint,
  p_vrfy: pointer,
  f_psk: function(pointer, *mbedtls_ssl_context, *cuchar, csize): cint,
  p_psk: pointer,
  f_cookie_write: function(pointer, **cuchar, *cuchar, *cuchar, csize): cint,
  f_cookie_check: function(pointer, *cuchar, csize, *cuchar, csize): cint,
  p_cookie: pointer,
  f_ticket_write: function(pointer, *mbedtls_ssl_session, *cuchar, *cuchar, *csize, *uint32): cint,
  f_ticket_parse: function(pointer, *mbedtls_ssl_session, *cuchar, csize): cint,
  p_ticket: pointer,
  f_export_keys: function(pointer, *cuchar, *cuchar, csize, csize, csize): cint,
  f_export_keys_ext: function(pointer, *cuchar, *cuchar, csize, csize, csize, *cuchar, *cuchar, mbedtls_tls_prf_types): cint,
  p_export_keys: pointer,
  cert_profile: *mbedtls_x509_crt_profile,
  key_cert: *mbedtls_ssl_key_cert,
  ca_chain: *mbedtls_x509_crt,
  ca_crl: *mbedtls_x509_crl,
  sig_hashes: *cint,
  curve_list: *mbedtls_ecp_group_id,
  dhm_P: mbedtls_mpi,
  dhm_G: mbedtls_mpi,
  psk: *cuchar,
  psk_len: csize,
  psk_identity: *cuchar,
  psk_identity_len: csize,
  alpn_list: *cstring
}
mbedtls_ssl_context = @record{
  conf: *mbedtls_ssl_config,
  state: cint,
  renego_status: cint,
  renego_records_seen: cint,
  major_ver: cint,
  minor_ver: cint,
  badmac_seen: cuint,
  f_vrfy: function(pointer, *mbedtls_x509_crt, cint, *uint32): cint,
  p_vrfy: pointer,
  f_send: function(pointer, *cuchar, csize): cint,
  f_recv: function(pointer, *cuchar, csize): cint,
  f_recv_timeout: function(pointer, *cuchar, csize, uint32): cint,
  p_bio: pointer,
  session_in: *mbedtls_ssl_session,
  session_out: *mbedtls_ssl_session,
  session: *mbedtls_ssl_session,
  session_negotiate: *mbedtls_ssl_session,
  handshake: *mbedtls_ssl_handshake_params,
  transform_in: *mbedtls_ssl_transform,
  transform_out: *mbedtls_ssl_transform,
  transform: *mbedtls_ssl_transform,
  transform_negotiate: *mbedtls_ssl_transform,
  p_timer: pointer,
  f_set_timer: function(pointer, uint32, uint32): void,
  f_get_timer: function(pointer): cint,
  in_buf: *cuchar,
  in_ctr: *cuchar,
  in_hdr: *cuchar,
  in_len: *cuchar,
  in_iv: *cuchar,
  in_msg: *cuchar,
  in_offt: *cuchar,
  in_msgtype: cint,
  in_msglen: csize,
  in_left: csize,
  in_epoch: uint16,
  next_record_offset: csize,
  in_window_top: uint64,
  in_window: uint64,
  in_hslen: csize,
  nb_zero: cint,
  keep_current_message: cint,
  disable_datagram_packing: uint8,
  out_buf: *cuchar,
  out_ctr: *cuchar,
  out_hdr: *cuchar,
  out_len: *cuchar,
  out_iv: *cuchar,
  out_msg: *cuchar,
  out_msgtype: cint,
  out_msglen: csize,
  out_left: csize,
  cur_out_ctr: [8]cuchar,
  mtu: uint16,
  split_done: cschar,
  client_auth: cint,
  hostname: cstring,
  alpn_chosen: cstring,
  cli_id: *cuchar,
  cli_id_len: csize,
  secure_renegotiation: cint,
  verify_data_len: csize,
  own_verify_data: [12]cchar,
  peer_verify_data: [12]cchar
}
global function mbedtls_ssl_get_ciphersuite_name(ciphersuite_id: cint): cstring <cimport,nodecl> end
global function mbedtls_ssl_get_ciphersuite_id(ciphersuite_name: cstring): cint <cimport,nodecl> end
global function mbedtls_ssl_init(ssl: *mbedtls_ssl_context): void <cimport,nodecl> end
global function mbedtls_ssl_setup(ssl: *mbedtls_ssl_context, conf: *mbedtls_ssl_config): cint <cimport,nodecl> end
global function mbedtls_ssl_session_reset(ssl: *mbedtls_ssl_context): cint <cimport,nodecl> end
global function mbedtls_ssl_conf_endpoint(conf: *mbedtls_ssl_config, endpoint: cint): void <cimport,nodecl> end
global function mbedtls_ssl_conf_transport(conf: *mbedtls_ssl_config, transport: cint): void <cimport,nodecl> end
global function mbedtls_ssl_conf_authmode(conf: *mbedtls_ssl_config, authmode: cint): void <cimport,nodecl> end
global function mbedtls_ssl_conf_verify(conf: *mbedtls_ssl_config, f_vrfy: function(pointer, *mbedtls_x509_crt, cint, *uint32): cint, p_vrfy: pointer): void <cimport,nodecl> end
global function mbedtls_ssl_conf_rng(conf: *mbedtls_ssl_config, f_rng: function(pointer, *cuchar, csize): cint, p_rng: pointer): void <cimport,nodecl> end
global function mbedtls_ssl_conf_dbg(conf: *mbedtls_ssl_config, f_dbg: function(pointer, cint, cstring, cint, cstring): void, p_dbg: pointer): void <cimport,nodecl> end
global function mbedtls_ssl_set_bio(ssl: *mbedtls_ssl_context, p_bio: pointer, f_send: function(pointer, *cuchar, csize): cint, f_recv: function(pointer, *cuchar, csize): cint, f_recv_timeout: function(pointer, *cuchar, csize, uint32): cint): void <cimport,nodecl> end
global function mbedtls_ssl_set_mtu(ssl: *mbedtls_ssl_context, mtu: uint16): void <cimport,nodecl> end
global function mbedtls_ssl_set_verify(ssl: *mbedtls_ssl_context, f_vrfy: function(pointer, *mbedtls_x509_crt, cint, *uint32): cint, p_vrfy: pointer): void <cimport,nodecl> end
global function mbedtls_ssl_conf_read_timeout(conf: *mbedtls_ssl_config, timeout: uint32): void <cimport,nodecl> end
global function mbedtls_ssl_check_record(ssl: *mbedtls_ssl_context, buf: *cuchar, buflen: csize): cint <cimport,nodecl> end
global function mbedtls_ssl_set_timer_cb(ssl: *mbedtls_ssl_context, p_timer: pointer, f_set_timer: function(pointer, uint32, uint32): void, f_get_timer: function(pointer): cint): void <cimport,nodecl> end
global mbedtls_ssl_ticket_write_t: type <cimport,nodecl> = @function(pointer, *mbedtls_ssl_session, *cuchar, *cuchar, *csize, *uint32): cint
global mbedtls_ssl_export_keys_t: type <cimport,nodecl> = @function(pointer, *cuchar, *cuchar, csize, csize, csize): cint
global mbedtls_ssl_export_keys_ext_t: type <cimport,nodecl> = @function(pointer, *cuchar, *cuchar, csize, csize, csize, *cuchar, *cuchar, mbedtls_tls_prf_types): cint
global mbedtls_ssl_ticket_parse_t: type <cimport,nodecl> = @function(pointer, *mbedtls_ssl_session, *cuchar, csize): cint
global function mbedtls_ssl_conf_session_tickets_cb(conf: *mbedtls_ssl_config, f_ticket_write: function(pointer, *mbedtls_ssl_session, *cuchar, *cuchar, *csize, *uint32): cint, f_ticket_parse: function(pointer, *mbedtls_ssl_session, *cuchar, csize): cint, p_ticket: pointer): void <cimport,nodecl> end
global function mbedtls_ssl_conf_export_keys_cb(conf: *mbedtls_ssl_config, f_export_keys: function(pointer, *cuchar, *cuchar, csize, csize, csize): cint, p_export_keys: pointer): void <cimport,nodecl> end
global function mbedtls_ssl_conf_export_keys_ext_cb(conf: *mbedtls_ssl_config, f_export_keys_ext: function(pointer, *cuchar, *cuchar, csize, csize, csize, *cuchar, *cuchar, mbedtls_tls_prf_types): cint, p_export_keys: pointer): void <cimport,nodecl> end
global mbedtls_ssl_cookie_write_t: type <cimport,nodecl> = @function(pointer, **cuchar, *cuchar, *cuchar, csize): cint
global mbedtls_ssl_cookie_check_t: type <cimport,nodecl> = @function(pointer, *cuchar, csize, *cuchar, csize): cint
global function mbedtls_ssl_conf_dtls_cookies(conf: *mbedtls_ssl_config, f_cookie_write: function(pointer, **cuchar, *cuchar, *cuchar, csize): cint, f_cookie_check: function(pointer, *cuchar, csize, *cuchar, csize): cint, p_cookie: pointer): void <cimport,nodecl> end
global function mbedtls_ssl_set_client_transport_id(ssl: *mbedtls_ssl_context, info: *cuchar, ilen: csize): cint <cimport,nodecl> end
global function mbedtls_ssl_conf_dtls_anti_replay(conf: *mbedtls_ssl_config, mode: cchar): void <cimport,nodecl> end
global function mbedtls_ssl_conf_dtls_badmac_limit(conf: *mbedtls_ssl_config, limit: cuint): void <cimport,nodecl> end
global function mbedtls_ssl_set_datagram_packing(ssl: *mbedtls_ssl_context, allow_packing: cuint): void <cimport,nodecl> end
global function mbedtls_ssl_conf_handshake_timeout(conf: *mbedtls_ssl_config, min: uint32, max: uint32): void <cimport,nodecl> end
global function mbedtls_ssl_conf_session_cache(conf: *mbedtls_ssl_config, p_cache: pointer, f_get_cache: function(pointer, *mbedtls_ssl_session): cint, f_set_cache: function(pointer, *mbedtls_ssl_session): cint): void <cimport,nodecl> end
global function mbedtls_ssl_set_session(ssl: *mbedtls_ssl_context, session: *mbedtls_ssl_session): cint <cimport,nodecl> end
global function mbedtls_ssl_session_load(session: *mbedtls_ssl_session, buf: *cuchar, len: csize): cint <cimport,nodecl> end
global function mbedtls_ssl_session_save(session: *mbedtls_ssl_session, buf: *cuchar, buf_len: csize, olen: *csize): cint <cimport,nodecl> end
global function mbedtls_ssl_get_session_pointer(ssl: *mbedtls_ssl_context): *mbedtls_ssl_session <cimport,nodecl> end
global function mbedtls_ssl_conf_ciphersuites(conf: *mbedtls_ssl_config, ciphersuites: *cint): void <cimport,nodecl> end
global function mbedtls_ssl_conf_ciphersuites_for_version(conf: *mbedtls_ssl_config, ciphersuites: *cint, major: cint, minor: cint): void <cimport,nodecl> end
global function mbedtls_ssl_conf_cert_profile(conf: *mbedtls_ssl_config, profile: *mbedtls_x509_crt_profile): void <cimport,nodecl> end
global function mbedtls_ssl_conf_ca_chain(conf: *mbedtls_ssl_config, ca_chain: *mbedtls_x509_crt, ca_crl: *mbedtls_x509_crl): void <cimport,nodecl> end
global function mbedtls_ssl_conf_own_cert(conf: *mbedtls_ssl_config, own_cert: *mbedtls_x509_crt, pk_key: *mbedtls_pk_context): cint <cimport,nodecl> end
global function mbedtls_ssl_conf_psk(conf: *mbedtls_ssl_config, psk: *cuchar, psk_len: csize, psk_identity: *cuchar, psk_identity_len: csize): cint <cimport,nodecl> end
global function mbedtls_ssl_set_hs_psk(ssl: *mbedtls_ssl_context, psk: *cuchar, psk_len: csize): cint <cimport,nodecl> end
global function mbedtls_ssl_conf_psk_cb(conf: *mbedtls_ssl_config, f_psk: function(pointer, *mbedtls_ssl_context, *cuchar, csize): cint, p_psk: pointer): void <cimport,nodecl> end
global function mbedtls_ssl_conf_dh_param_bin(conf: *mbedtls_ssl_config, dhm_P: *cuchar, P_len: csize, dhm_G: *cuchar, G_len: csize): cint <cimport,nodecl> end
global function mbedtls_ssl_conf_dh_param_ctx(conf: *mbedtls_ssl_config, dhm_ctx: *mbedtls_dhm_context): cint <cimport,nodecl> end
global function mbedtls_ssl_conf_dhm_min_bitlen(conf: *mbedtls_ssl_config, bitlen: cuint): void <cimport,nodecl> end
global function mbedtls_ssl_conf_curves(conf: *mbedtls_ssl_config, curves: *mbedtls_ecp_group_id): void <cimport,nodecl> end
global function mbedtls_ssl_conf_sig_hashes(conf: *mbedtls_ssl_config, hashes: *cint): void <cimport,nodecl> end
global function mbedtls_ssl_set_hostname(ssl: *mbedtls_ssl_context, hostname: cstring): cint <cimport,nodecl> end
global function mbedtls_ssl_set_hs_own_cert(ssl: *mbedtls_ssl_context, own_cert: *mbedtls_x509_crt, pk_key: *mbedtls_pk_context): cint <cimport,nodecl> end
global function mbedtls_ssl_set_hs_ca_chain(ssl: *mbedtls_ssl_context, ca_chain: *mbedtls_x509_crt, ca_crl: *mbedtls_x509_crl): void <cimport,nodecl> end
global function mbedtls_ssl_set_hs_authmode(ssl: *mbedtls_ssl_context, authmode: cint): void <cimport,nodecl> end
global function mbedtls_ssl_conf_sni(conf: *mbedtls_ssl_config, f_sni: function(pointer, *mbedtls_ssl_context, *cuchar, csize): cint, p_sni: pointer): void <cimport,nodecl> end
global function mbedtls_ssl_conf_alpn_protocols(conf: *mbedtls_ssl_config, protos: *cstring): cint <cimport,nodecl> end
global function mbedtls_ssl_get_alpn_protocol(ssl: *mbedtls_ssl_context): cstring <cimport,nodecl> end
global function mbedtls_ssl_conf_max_version(conf: *mbedtls_ssl_config, major: cint, minor: cint): void <cimport,nodecl> end
global function mbedtls_ssl_conf_min_version(conf: *mbedtls_ssl_config, major: cint, minor: cint): void <cimport,nodecl> end
global function mbedtls_ssl_conf_fallback(conf: *mbedtls_ssl_config, fallback: cchar): void <cimport,nodecl> end
global function mbedtls_ssl_conf_encrypt_then_mac(conf: *mbedtls_ssl_config, etm: cchar): void <cimport,nodecl> end
global function mbedtls_ssl_conf_extended_master_secret(conf: *mbedtls_ssl_config, ems: cchar): void <cimport,nodecl> end
global function mbedtls_ssl_conf_arc4_support(conf: *mbedtls_ssl_config, arc4: cchar): void <cimport,nodecl> end
global function mbedtls_ssl_conf_cert_req_ca_list(conf: *mbedtls_ssl_config, cert_req_ca_list: cchar): void <cimport,nodecl> end
global function mbedtls_ssl_conf_max_frag_len(conf: *mbedtls_ssl_config, mfl_code: cuchar): cint <cimport,nodecl> end
global function mbedtls_ssl_conf_truncated_hmac(conf: *mbedtls_ssl_config, truncate: cint): void <cimport,nodecl> end
global function mbedtls_ssl_conf_cbc_record_splitting(conf: *mbedtls_ssl_config, split: cchar): void <cimport,nodecl> end
global function mbedtls_ssl_conf_session_tickets(conf: *mbedtls_ssl_config, use_tickets: cint): void <cimport,nodecl> end
global function mbedtls_ssl_conf_renegotiation(conf: *mbedtls_ssl_config, renegotiation: cint): void <cimport,nodecl> end
global function mbedtls_ssl_conf_legacy_renegotiation(conf: *mbedtls_ssl_config, allow_legacy: cint): void <cimport,nodecl> end
global function mbedtls_ssl_conf_renegotiation_enforced(conf: *mbedtls_ssl_config, max_records: cint): void <cimport,nodecl> end
global function mbedtls_ssl_conf_renegotiation_period(conf: *mbedtls_ssl_config, period: *cuchar): void <cimport,nodecl> end
global function mbedtls_ssl_check_pending(ssl: *mbedtls_ssl_context): cint <cimport,nodecl> end
global function mbedtls_ssl_get_bytes_avail(ssl: *mbedtls_ssl_context): csize <cimport,nodecl> end
global function mbedtls_ssl_get_verify_result(ssl: *mbedtls_ssl_context): uint32 <cimport,nodecl> end
global function mbedtls_ssl_get_ciphersuite(ssl: *mbedtls_ssl_context): cstring <cimport,nodecl> end
global function mbedtls_ssl_get_version(ssl: *mbedtls_ssl_context): cstring <cimport,nodecl> end
global function mbedtls_ssl_get_record_expansion(ssl: *mbedtls_ssl_context): cint <cimport,nodecl> end
global function mbedtls_ssl_get_output_max_frag_len(ssl: *mbedtls_ssl_context): csize <cimport,nodecl> end
global function mbedtls_ssl_get_input_max_frag_len(ssl: *mbedtls_ssl_context): csize <cimport,nodecl> end
global function mbedtls_ssl_get_max_out_record_payload(ssl: *mbedtls_ssl_context): cint <cimport,nodecl> end
global function mbedtls_ssl_get_peer_cert(ssl: *mbedtls_ssl_context): *mbedtls_x509_crt <cimport,nodecl> end
global function mbedtls_ssl_get_session(ssl: *mbedtls_ssl_context, session: *mbedtls_ssl_session): cint <cimport,nodecl> end
global function mbedtls_ssl_handshake(ssl: *mbedtls_ssl_context): cint <cimport,nodecl> end
global function mbedtls_ssl_handshake_step(ssl: *mbedtls_ssl_context): cint <cimport,nodecl> end
global function mbedtls_ssl_renegotiate(ssl: *mbedtls_ssl_context): cint <cimport,nodecl> end
global function mbedtls_ssl_read(ssl: *mbedtls_ssl_context, buf: *cuchar, len: csize): cint <cimport,nodecl> end
global function mbedtls_ssl_write(ssl: *mbedtls_ssl_context, buf: *cuchar, len: csize): cint <cimport,nodecl> end
global function mbedtls_ssl_send_alert_message(ssl: *mbedtls_ssl_context, level: cuchar, message: cuchar): cint <cimport,nodecl> end
global function mbedtls_ssl_close_notify(ssl: *mbedtls_ssl_context): cint <cimport,nodecl> end
global function mbedtls_ssl_free(ssl: *mbedtls_ssl_context): void <cimport,nodecl> end
global function mbedtls_ssl_context_save(ssl: *mbedtls_ssl_context, buf: *cuchar, buf_len: csize, olen: *csize): cint <cimport,nodecl> end
global function mbedtls_ssl_context_load(ssl: *mbedtls_ssl_context, buf: *cuchar, len: csize): cint <cimport,nodecl> end
global function mbedtls_ssl_config_init(conf: *mbedtls_ssl_config): void <cimport,nodecl> end
global function mbedtls_ssl_config_defaults(conf: *mbedtls_ssl_config, endpoint: cint, transport: cint, preset: cint): cint <cimport,nodecl> end
global function mbedtls_ssl_config_free(conf: *mbedtls_ssl_config): void <cimport,nodecl> end
global function mbedtls_ssl_session_init(session: *mbedtls_ssl_session): void <cimport,nodecl> end
global function mbedtls_ssl_session_free(session: *mbedtls_ssl_session): void <cimport,nodecl> end
global function mbedtls_ssl_tls_prf(prf: mbedtls_tls_prf_types, secret: *cuchar, slen: csize, label: cstring, random: *cuchar, rlen: csize, dstbuf: *cuchar, dlen: csize): cint <cimport,nodecl> end
global function mbedtls_debug_set_threshold(threshold: cint): void <cimport,nodecl> end
global function mbedtls_debug_print_msg(ssl: *mbedtls_ssl_context, level: cint, file: cstring, line: cint, format: cstring, ...: cvarargs): void <cimport,nodecl> end
global function mbedtls_debug_print_ret(ssl: *mbedtls_ssl_context, level: cint, file: cstring, line: cint, text: cstring, ret: cint): void <cimport,nodecl> end
global function mbedtls_debug_print_buf(ssl: *mbedtls_ssl_context, level: cint, file: cstring, line: cint, text: cstring, buf: *cuchar, len: csize): void <cimport,nodecl> end
global function mbedtls_debug_print_mpi(ssl: *mbedtls_ssl_context, level: cint, file: cstring, line: cint, text: cstring, X: *mbedtls_mpi): void <cimport,nodecl> end
global function mbedtls_debug_print_ecp(ssl: *mbedtls_ssl_context, level: cint, file: cstring, line: cint, text: cstring, X: *mbedtls_ecp_point): void <cimport,nodecl> end
global function mbedtls_debug_print_crt(ssl: *mbedtls_ssl_context, level: cint, file: cstring, line: cint, text: cstring, crt: *mbedtls_x509_crt): void <cimport,nodecl> end
global mbedtls_debug_ecdh_attr: type <cimport,nodecl,using> = @enum(cint){
  MBEDTLS_DEBUG_ECDH_Q = 0,
  MBEDTLS_DEBUG_ECDH_QP = 1,
  MBEDTLS_DEBUG_ECDH_Z = 2
}
global function mbedtls_debug_printf_ecdh(ssl: *mbedtls_ssl_context, level: cint, file: cstring, line: cint, ecdh: *mbedtls_ecdh_context, attr: mbedtls_debug_ecdh_attr): void <cimport,nodecl> end
global mbedtls_des_context: type <cimport,nodecl> = @record{
  sk: [32]uint32
}
global mbedtls_des3_context: type <cimport,nodecl> = @record{
  sk: [96]uint32
}
global function mbedtls_des_init(ctx: *mbedtls_des_context): void <cimport,nodecl> end
global function mbedtls_des_free(ctx: *mbedtls_des_context): void <cimport,nodecl> end
global function mbedtls_des3_init(ctx: *mbedtls_des3_context): void <cimport,nodecl> end
global function mbedtls_des3_free(ctx: *mbedtls_des3_context): void <cimport,nodecl> end
global function mbedtls_des_key_set_parity(key: *cuchar): void <cimport,nodecl> end
global function mbedtls_des_key_check_key_parity(key: *cuchar): cint <cimport,nodecl> end
global function mbedtls_des_key_check_weak(key: *cuchar): cint <cimport,nodecl> end
global function mbedtls_des_setkey_enc(ctx: *mbedtls_des_context, key: *cuchar): cint <cimport,nodecl> end
global function mbedtls_des_setkey_dec(ctx: *mbedtls_des_context, key: *cuchar): cint <cimport,nodecl> end
global function mbedtls_des3_set2key_enc(ctx: *mbedtls_des3_context, key: *cuchar): cint <cimport,nodecl> end
global function mbedtls_des3_set2key_dec(ctx: *mbedtls_des3_context, key: *cuchar): cint <cimport,nodecl> end
global function mbedtls_des3_set3key_enc(ctx: *mbedtls_des3_context, key: *cuchar): cint <cimport,nodecl> end
global function mbedtls_des3_set3key_dec(ctx: *mbedtls_des3_context, key: *cuchar): cint <cimport,nodecl> end
global function mbedtls_des_crypt_ecb(ctx: *mbedtls_des_context, input: *cuchar, output: *cuchar): cint <cimport,nodecl> end
global function mbedtls_des_crypt_cbc(ctx: *mbedtls_des_context, mode: cint, length: csize, iv: *cuchar, input: *cuchar, output: *cuchar): cint <cimport,nodecl> end
global function mbedtls_des3_crypt_ecb(ctx: *mbedtls_des3_context, input: *cuchar, output: *cuchar): cint <cimport,nodecl> end
global function mbedtls_des3_crypt_cbc(ctx: *mbedtls_des3_context, mode: cint, length: csize, iv: *cuchar, input: *cuchar, output: *cuchar): cint <cimport,nodecl> end
global function mbedtls_des_setkey(SK: *uint32, key: *cuchar): void <cimport,nodecl> end
global function mbedtls_des_self_test(verbose: cint): cint <cimport,nodecl> end
global mbedtls_ecjpake_role: type <cimport,nodecl,using> = @enum(cint){
  MBEDTLS_ECJPAKE_CLIENT = 0,
  MBEDTLS_ECJPAKE_SERVER = 1
}
global mbedtls_ecjpake_context: type <cimport,nodecl> = @record{
  md_info: *mbedtls_md_info_t,
  grp: mbedtls_ecp_group,
  role: mbedtls_ecjpake_role,
  point_format: cint,
  Xm1: mbedtls_ecp_point,
  Xm2: mbedtls_ecp_point,
  Xp1: mbedtls_ecp_point,
  Xp2: mbedtls_ecp_point,
  Xp: mbedtls_ecp_point,
  xm1: mbedtls_mpi,
  xm2: mbedtls_mpi,
  s: mbedtls_mpi
}
global function mbedtls_ecjpake_init(ctx: *mbedtls_ecjpake_context): void <cimport,nodecl> end
global function mbedtls_ecjpake_setup(ctx: *mbedtls_ecjpake_context, role: mbedtls_ecjpake_role, hash: mbedtls_md_type_t, curve: mbedtls_ecp_group_id, secret: *cuchar, len: csize): cint <cimport,nodecl> end
global function mbedtls_ecjpake_check(ctx: *mbedtls_ecjpake_context): cint <cimport,nodecl> end
global function mbedtls_ecjpake_write_round_one(ctx: *mbedtls_ecjpake_context, buf: *cuchar, len: csize, olen: *csize, f_rng: function(pointer, *cuchar, csize): cint, p_rng: pointer): cint <cimport,nodecl> end
global function mbedtls_ecjpake_read_round_one(ctx: *mbedtls_ecjpake_context, buf: *cuchar, len: csize): cint <cimport,nodecl> end
global function mbedtls_ecjpake_write_round_two(ctx: *mbedtls_ecjpake_context, buf: *cuchar, len: csize, olen: *csize, f_rng: function(pointer, *cuchar, csize): cint, p_rng: pointer): cint <cimport,nodecl> end
global function mbedtls_ecjpake_read_round_two(ctx: *mbedtls_ecjpake_context, buf: *cuchar, len: csize): cint <cimport,nodecl> end
global function mbedtls_ecjpake_derive_secret(ctx: *mbedtls_ecjpake_context, buf: *cuchar, len: csize, olen: *csize, f_rng: function(pointer, *cuchar, csize): cint, p_rng: pointer): cint <cimport,nodecl> end
global function mbedtls_ecjpake_free(ctx: *mbedtls_ecjpake_context): void <cimport,nodecl> end
global function mbedtls_ecjpake_self_test(verbose: cint): cint <cimport,nodecl> end
global mbedtls_sha512_context: type <cimport,nodecl> = @record{
  total: [2]uint64,
  state: [8]uint64,
  buffer: [128]cuchar,
  is384: cint
}
global function mbedtls_sha512_init(ctx: *mbedtls_sha512_context): void <cimport,nodecl> end
global function mbedtls_sha512_free(ctx: *mbedtls_sha512_context): void <cimport,nodecl> end
global function mbedtls_sha512_clone(dst: *mbedtls_sha512_context, src: *mbedtls_sha512_context): void <cimport,nodecl> end
global function mbedtls_sha512_starts_ret(ctx: *mbedtls_sha512_context, is384: cint): cint <cimport,nodecl> end
global function mbedtls_sha512_update_ret(ctx: *mbedtls_sha512_context, input: *cuchar, ilen: csize): cint <cimport,nodecl> end
global function mbedtls_sha512_finish_ret(ctx: *mbedtls_sha512_context, output: *cuchar): cint <cimport,nodecl> end
global function mbedtls_internal_sha512_process(ctx: *mbedtls_sha512_context, data: *cuchar): cint <cimport,nodecl> end
global function mbedtls_sha512_ret(input: *cuchar, ilen: csize, output: *cuchar, is384: cint): cint <cimport,nodecl> end
global function mbedtls_sha512_self_test(verbose: cint): cint <cimport,nodecl> end
global mbedtls_entropy_f_source_ptr: type <cimport,nodecl> = @function(pointer, *cuchar, csize, *csize): cint
global mbedtls_entropy_source_state: type <cimport,nodecl> = @record{
  f_source: mbedtls_entropy_f_source_ptr,
  p_source: pointer,
  size: csize,
  threshold: csize,
  strong: cint
}
global mbedtls_entropy_context: type <cimport,nodecl> = @record{
  accumulator_started: cint,
  accumulator: mbedtls_sha512_context,
  source_count: cint,
  source: [20]mbedtls_entropy_source_state,
  mutex: mbedtls_threading_mutex_t
}
global function mbedtls_entropy_init(ctx: *mbedtls_entropy_context): void <cimport,nodecl> end
global function mbedtls_entropy_free(ctx: *mbedtls_entropy_context): void <cimport,nodecl> end
global function mbedtls_entropy_add_source(ctx: *mbedtls_entropy_context, f_source: mbedtls_entropy_f_source_ptr, p_source: pointer, threshold: csize, strong: cint): cint <cimport,nodecl> end
global function mbedtls_entropy_gather(ctx: *mbedtls_entropy_context): cint <cimport,nodecl> end
global function mbedtls_entropy_func(data: pointer, output: *cuchar, len: csize): cint <cimport,nodecl> end
global function mbedtls_entropy_update_manual(ctx: *mbedtls_entropy_context, data: *cuchar, len: csize): cint <cimport,nodecl> end
global function mbedtls_entropy_write_seed_file(ctx: *mbedtls_entropy_context, path: cstring): cint <cimport,nodecl> end
global function mbedtls_entropy_update_seed_file(ctx: *mbedtls_entropy_context, path: cstring): cint <cimport,nodecl> end
global function mbedtls_entropy_self_test(verbose: cint): cint <cimport,nodecl> end
global function mbedtls_platform_entropy_poll(data: pointer, output: *cuchar, len: csize, olen: *csize): cint <cimport,nodecl> end
global function mbedtls_hardclock_poll(data: pointer, output: *cuchar, len: csize, olen: *csize): cint <cimport,nodecl> end
global function mbedtls_error_add(high: cint, low: cint, file: cstring, line: cint): cint <cimport,nodecl> end
global function mbedtls_strerror(errnum: cint, buffer: cstring, buflen: csize): void <cimport,nodecl> end
global function mbedtls_high_level_strerr(error_code: cint): cstring <cimport,nodecl> end
global function mbedtls_low_level_strerr(error_code: cint): cstring <cimport,nodecl> end
global mbedtls_gcm_context: type <cimport,nodecl> = @record{
  cipher_ctx: mbedtls_cipher_context_t,
  HL: [16]uint64,
  HH: [16]uint64,
  len: uint64,
  add_len: uint64,
  base_ectr: [16]cuchar,
  y: [16]cuchar,
  buf: [16]cuchar,
  mode: cint
}
global function mbedtls_gcm_init(ctx: *mbedtls_gcm_context): void <cimport,nodecl> end
global function mbedtls_gcm_setkey(ctx: *mbedtls_gcm_context, cipher: mbedtls_cipher_id_t, key: *cuchar, keybits: cuint): cint <cimport,nodecl> end
global function mbedtls_gcm_crypt_and_tag(ctx: *mbedtls_gcm_context, mode: cint, length: csize, iv: *cuchar, iv_len: csize, add: *cuchar, add_len: csize, input: *cuchar, output: *cuchar, tag_len: csize, tag: *cuchar): cint <cimport,nodecl> end
global function mbedtls_gcm_auth_decrypt(ctx: *mbedtls_gcm_context, length: csize, iv: *cuchar, iv_len: csize, add: *cuchar, add_len: csize, tag: *cuchar, tag_len: csize, input: *cuchar, output: *cuchar): cint <cimport,nodecl> end
global function mbedtls_gcm_starts(ctx: *mbedtls_gcm_context, mode: cint, iv: *cuchar, iv_len: csize, add: *cuchar, add_len: csize): cint <cimport,nodecl> end
global function mbedtls_gcm_update(ctx: *mbedtls_gcm_context, length: csize, input: *cuchar, output: *cuchar): cint <cimport,nodecl> end
global function mbedtls_gcm_finish(ctx: *mbedtls_gcm_context, tag: *cuchar, tag_len: csize): cint <cimport,nodecl> end
global function mbedtls_gcm_free(ctx: *mbedtls_gcm_context): void <cimport,nodecl> end
global function mbedtls_gcm_self_test(verbose: cint): cint <cimport,nodecl> end
global mbedtls_havege_state: type <cimport,nodecl> = @record{
  PT1: uint32,
  PT2: uint32,
  offset: [2]uint32,
  pool: [1024]uint32,
  WALK: [8192]uint32
}
global function mbedtls_havege_init(hs: *mbedtls_havege_state): void <cimport,nodecl> end
global function mbedtls_havege_free(hs: *mbedtls_havege_state): void <cimport,nodecl> end
global function mbedtls_havege_random(p_rng: pointer, output: *cuchar, len: csize): cint <cimport,nodecl> end
global function mbedtls_hkdf(md: *mbedtls_md_info_t, salt: *cuchar, salt_len: csize, ikm: *cuchar, ikm_len: csize, info: *cuchar, info_len: csize, okm: *cuchar, okm_len: csize): cint <cimport,nodecl> end
global function mbedtls_hkdf_extract(md: *mbedtls_md_info_t, salt: *cuchar, salt_len: csize, ikm: *cuchar, ikm_len: csize, prk: *cuchar): cint <cimport,nodecl> end
global function mbedtls_hkdf_expand(md: *mbedtls_md_info_t, prk: *cuchar, prk_len: csize, info: *cuchar, info_len: csize, okm: *cuchar, okm_len: csize): cint <cimport,nodecl> end
global mbedtls_hmac_drbg_context: type <cimport,nodecl> = @record{
  md_ctx: mbedtls_md_context_t,
  V: [64]cuchar,
  reseed_counter: cint,
  entropy_len: csize,
  prediction_resistance: cint,
  reseed_interval: cint,
  f_entropy: function(pointer, *cuchar, csize): cint,
  p_entropy: pointer,
  mutex: mbedtls_threading_mutex_t
}
global function mbedtls_hmac_drbg_init(ctx: *mbedtls_hmac_drbg_context): void <cimport,nodecl> end
global function mbedtls_hmac_drbg_seed(ctx: *mbedtls_hmac_drbg_context, md_info: *mbedtls_md_info_t, f_entropy: function(pointer, *cuchar, csize): cint, p_entropy: pointer, custom: *cuchar, len: csize): cint <cimport,nodecl> end
global function mbedtls_hmac_drbg_seed_buf(ctx: *mbedtls_hmac_drbg_context, md_info: *mbedtls_md_info_t, data: *cuchar, data_len: csize): cint <cimport,nodecl> end
global function mbedtls_hmac_drbg_set_prediction_resistance(ctx: *mbedtls_hmac_drbg_context, resistance: cint): void <cimport,nodecl> end
global function mbedtls_hmac_drbg_set_entropy_len(ctx: *mbedtls_hmac_drbg_context, len: csize): void <cimport,nodecl> end
global function mbedtls_hmac_drbg_set_reseed_interval(ctx: *mbedtls_hmac_drbg_context, interval: cint): void <cimport,nodecl> end
global function mbedtls_hmac_drbg_update_ret(ctx: *mbedtls_hmac_drbg_context, additional: *cuchar, add_len: csize): cint <cimport,nodecl> end
global function mbedtls_hmac_drbg_reseed(ctx: *mbedtls_hmac_drbg_context, additional: *cuchar, len: csize): cint <cimport,nodecl> end
global function mbedtls_hmac_drbg_random_with_add(p_rng: pointer, output: *cuchar, output_len: csize, additional: *cuchar, add_len: csize): cint <cimport,nodecl> end
global function mbedtls_hmac_drbg_random(p_rng: pointer, output: *cuchar, out_len: csize): cint <cimport,nodecl> end
global function mbedtls_hmac_drbg_free(ctx: *mbedtls_hmac_drbg_context): void <cimport,nodecl> end
global function mbedtls_hmac_drbg_write_seed_file(ctx: *mbedtls_hmac_drbg_context, path: cstring): cint <cimport,nodecl> end
global function mbedtls_hmac_drbg_update_seed_file(ctx: *mbedtls_hmac_drbg_context, path: cstring): cint <cimport,nodecl> end
global function mbedtls_hmac_drbg_self_test(verbose: cint): cint <cimport,nodecl> end
global mbedtls_md2_context: type <cimport,nodecl> = @record{
  cksum: [16]cuchar,
  state: [48]cuchar,
  buffer: [16]cuchar,
  left: csize
}
global function mbedtls_md2_init(ctx: *mbedtls_md2_context): void <cimport,nodecl> end
global function mbedtls_md2_free(ctx: *mbedtls_md2_context): void <cimport,nodecl> end
global function mbedtls_md2_clone(dst: *mbedtls_md2_context, src: *mbedtls_md2_context): void <cimport,nodecl> end
global function mbedtls_md2_starts_ret(ctx: *mbedtls_md2_context): cint <cimport,nodecl> end
global function mbedtls_md2_update_ret(ctx: *mbedtls_md2_context, input: *cuchar, ilen: csize): cint <cimport,nodecl> end
global function mbedtls_md2_finish_ret(ctx: *mbedtls_md2_context, output: *cuchar): cint <cimport,nodecl> end
global function mbedtls_internal_md2_process(ctx: *mbedtls_md2_context): cint <cimport,nodecl> end
global function mbedtls_md2_ret(input: *cuchar, ilen: csize, output: *cuchar): cint <cimport,nodecl> end
global function mbedtls_md2_self_test(verbose: cint): cint <cimport,nodecl> end
global mbedtls_md4_context: type <cimport,nodecl> = @record{
  total: [2]uint32,
  state: [4]uint32,
  buffer: [64]cuchar
}
global function mbedtls_md4_init(ctx: *mbedtls_md4_context): void <cimport,nodecl> end
global function mbedtls_md4_free(ctx: *mbedtls_md4_context): void <cimport,nodecl> end
global function mbedtls_md4_clone(dst: *mbedtls_md4_context, src: *mbedtls_md4_context): void <cimport,nodecl> end
global function mbedtls_md4_starts_ret(ctx: *mbedtls_md4_context): cint <cimport,nodecl> end
global function mbedtls_md4_update_ret(ctx: *mbedtls_md4_context, input: *cuchar, ilen: csize): cint <cimport,nodecl> end
global function mbedtls_md4_finish_ret(ctx: *mbedtls_md4_context, output: *cuchar): cint <cimport,nodecl> end
global function mbedtls_internal_md4_process(ctx: *mbedtls_md4_context, data: *cuchar): cint <cimport,nodecl> end
global function mbedtls_md4_ret(input: *cuchar, ilen: csize, output: *cuchar): cint <cimport,nodecl> end
global function mbedtls_md4_self_test(verbose: cint): cint <cimport,nodecl> end
global mbedtls_md5_context: type <cimport,nodecl> = @record{
  total: [2]uint32,
  state: [4]uint32,
  buffer: [64]cuchar
}
global function mbedtls_md5_init(ctx: *mbedtls_md5_context): void <cimport,nodecl> end
global function mbedtls_md5_free(ctx: *mbedtls_md5_context): void <cimport,nodecl> end
global function mbedtls_md5_clone(dst: *mbedtls_md5_context, src: *mbedtls_md5_context): void <cimport,nodecl> end
global function mbedtls_md5_starts_ret(ctx: *mbedtls_md5_context): cint <cimport,nodecl> end
global function mbedtls_md5_update_ret(ctx: *mbedtls_md5_context, input: *cuchar, ilen: csize): cint <cimport,nodecl> end
global function mbedtls_md5_finish_ret(ctx: *mbedtls_md5_context, output: *cuchar): cint <cimport,nodecl> end
global function mbedtls_internal_md5_process(ctx: *mbedtls_md5_context, data: *cuchar): cint <cimport,nodecl> end
global function mbedtls_md5_ret(input: *cuchar, ilen: csize, output: *cuchar): cint <cimport,nodecl> end
global function mbedtls_md5_self_test(verbose: cint): cint <cimport,nodecl> end
global mbedtls_net_context: type <cimport,nodecl> = @record{
  fd: cint
}
global function mbedtls_net_init(ctx: *mbedtls_net_context): void <cimport,nodecl> end
global function mbedtls_net_connect(ctx: *mbedtls_net_context, host: cstring, port: cstring, proto: cint): cint <cimport,nodecl> end
global function mbedtls_net_bind(ctx: *mbedtls_net_context, bind_ip: cstring, port: cstring, proto: cint): cint <cimport,nodecl> end
global function mbedtls_net_accept(bind_ctx: *mbedtls_net_context, client_ctx: *mbedtls_net_context, client_ip: pointer, buf_size: csize, ip_len: *csize): cint <cimport,nodecl> end
global function mbedtls_net_poll(ctx: *mbedtls_net_context, rw: uint32, timeout: uint32): cint <cimport,nodecl> end
global function mbedtls_net_set_block(ctx: *mbedtls_net_context): cint <cimport,nodecl> end
global function mbedtls_net_set_nonblock(ctx: *mbedtls_net_context): cint <cimport,nodecl> end
global function mbedtls_net_usleep(usec: culong): void <cimport,nodecl> end
global function mbedtls_net_recv(ctx: pointer, buf: *cuchar, len: csize): cint <cimport,nodecl> end
global function mbedtls_net_send(ctx: pointer, buf: *cuchar, len: csize): cint <cimport,nodecl> end
global function mbedtls_net_recv_timeout(ctx: pointer, buf: *cuchar, len: csize, timeout: uint32): cint <cimport,nodecl> end
global function mbedtls_net_close(ctx: *mbedtls_net_context): void <cimport,nodecl> end
global function mbedtls_net_free(ctx: *mbedtls_net_context): void <cimport,nodecl> end
global mbedtls_nist_kw_mode_t: type <cimport,nodecl,using> = @enum(cint){
  MBEDTLS_KW_MODE_KW = 0,
  MBEDTLS_KW_MODE_KWP = 1
}
global mbedtls_nist_kw_context: type <cimport,nodecl> = @record{
  cipher_ctx: mbedtls_cipher_context_t
}
global function mbedtls_nist_kw_init(ctx: *mbedtls_nist_kw_context): void <cimport,nodecl> end
global function mbedtls_nist_kw_setkey(ctx: *mbedtls_nist_kw_context, cipher: mbedtls_cipher_id_t, key: *cuchar, keybits: cuint, is_wrap: cint): cint <cimport,nodecl> end
global function mbedtls_nist_kw_free(ctx: *mbedtls_nist_kw_context): void <cimport,nodecl> end
global function mbedtls_nist_kw_wrap(ctx: *mbedtls_nist_kw_context, mode: mbedtls_nist_kw_mode_t, input: *cuchar, in_len: csize, output: *cuchar, out_len: *csize, out_size: csize): cint <cimport,nodecl> end
global function mbedtls_nist_kw_unwrap(ctx: *mbedtls_nist_kw_context, mode: mbedtls_nist_kw_mode_t, input: *cuchar, in_len: csize, output: *cuchar, out_len: *csize, out_size: csize): cint <cimport,nodecl> end
global function mbedtls_nist_kw_self_test(verbose: cint): cint <cimport,nodecl> end
global mbedtls_oid_descriptor_t: type <cimport,nodecl> = @record{
  asn1: cstring,
  asn1_len: csize,
  name: cstring,
  description: cstring
}
global function mbedtls_oid_get_numeric_string(buf: cstring, size: csize, oid: *mbedtls_asn1_buf): cint <cimport,nodecl> end
global function mbedtls_oid_get_x509_ext_type(oid: *mbedtls_asn1_buf, ext_type: *cint): cint <cimport,nodecl> end
global function mbedtls_oid_get_attr_short_name(oid: *mbedtls_asn1_buf, short_name: *cstring): cint <cimport,nodecl> end
global function mbedtls_oid_get_pk_alg(oid: *mbedtls_asn1_buf, pk_alg: *mbedtls_pk_type_t): cint <cimport,nodecl> end
global function mbedtls_oid_get_oid_by_pk_alg(pk_alg: mbedtls_pk_type_t, oid: *cstring, olen: *csize): cint <cimport,nodecl> end
global function mbedtls_oid_get_ec_grp(oid: *mbedtls_asn1_buf, grp_id: *mbedtls_ecp_group_id): cint <cimport,nodecl> end
global function mbedtls_oid_get_oid_by_ec_grp(grp_id: mbedtls_ecp_group_id, oid: *cstring, olen: *csize): cint <cimport,nodecl> end
global function mbedtls_oid_get_sig_alg(oid: *mbedtls_asn1_buf, md_alg: *mbedtls_md_type_t, pk_alg: *mbedtls_pk_type_t): cint <cimport,nodecl> end
global function mbedtls_oid_get_sig_alg_desc(oid: *mbedtls_asn1_buf, desc: *cstring): cint <cimport,nodecl> end
global function mbedtls_oid_get_oid_by_sig_alg(pk_alg: mbedtls_pk_type_t, md_alg: mbedtls_md_type_t, oid: *cstring, olen: *csize): cint <cimport,nodecl> end
global function mbedtls_oid_get_md_alg(oid: *mbedtls_asn1_buf, md_alg: *mbedtls_md_type_t): cint <cimport,nodecl> end
global function mbedtls_oid_get_md_hmac(oid: *mbedtls_asn1_buf, md_hmac: *mbedtls_md_type_t): cint <cimport,nodecl> end
global function mbedtls_oid_get_extended_key_usage(oid: *mbedtls_asn1_buf, desc: *cstring): cint <cimport,nodecl> end
global function mbedtls_oid_get_certificate_policies(oid: *mbedtls_asn1_buf, desc: *cstring): cint <cimport,nodecl> end
global function mbedtls_oid_get_oid_by_md(md_alg: mbedtls_md_type_t, oid: *cstring, olen: *csize): cint <cimport,nodecl> end
global function mbedtls_oid_get_cipher_alg(oid: *mbedtls_asn1_buf, cipher_alg: *mbedtls_cipher_type_t): cint <cimport,nodecl> end
global function mbedtls_oid_get_pkcs12_pbe_alg(oid: *mbedtls_asn1_buf, md_alg: *mbedtls_md_type_t, cipher_alg: *mbedtls_cipher_type_t): cint <cimport,nodecl> end
global mbedtls_pem_context: type <cimport,nodecl> = @record{
  buf: *cuchar,
  buflen: csize,
  info: *cuchar
}
global function mbedtls_pem_init(ctx: *mbedtls_pem_context): void <cimport,nodecl> end
global function mbedtls_pem_read_buffer(ctx: *mbedtls_pem_context, header: cstring, footer: cstring, data: *cuchar, pwd: *cuchar, pwdlen: csize, use_len: *csize): cint <cimport,nodecl> end
global function mbedtls_pem_free(ctx: *mbedtls_pem_context): void <cimport,nodecl> end
global function mbedtls_pem_write_buffer(header: cstring, footer: cstring, der_data: *cuchar, der_len: csize, buf: *cuchar, buf_len: csize, olen: *csize): cint <cimport,nodecl> end
global function mbedtls_pkcs12_pbe_sha1_rc4_128(pbe_params: *mbedtls_asn1_buf, mode: cint, pwd: *cuchar, pwdlen: csize, input: *cuchar, len: csize, output: *cuchar): cint <cimport,nodecl> end
global function mbedtls_pkcs12_pbe(pbe_params: *mbedtls_asn1_buf, mode: cint, cipher_type: mbedtls_cipher_type_t, md_type: mbedtls_md_type_t, pwd: *cuchar, pwdlen: csize, input: *cuchar, len: csize, output: *cuchar): cint <cimport,nodecl> end
global function mbedtls_pkcs12_derivation(data: *cuchar, datalen: csize, pwd: *cuchar, pwdlen: csize, salt: *cuchar, saltlen: csize, mbedtls_md: mbedtls_md_type_t, id: cint, iterations: cint): cint <cimport,nodecl> end
global function mbedtls_pkcs5_pbes2(pbe_params: *mbedtls_asn1_buf, mode: cint, pwd: *cuchar, pwdlen: csize, data: *cuchar, datalen: csize, output: *cuchar): cint <cimport,nodecl> end
global function mbedtls_pkcs5_pbkdf2_hmac(ctx: *mbedtls_md_context_t, password: *cuchar, plen: csize, salt: *cuchar, slen: csize, iteration_count: cuint, key_length: uint32, output: *cuchar): cint <cimport,nodecl> end
global function mbedtls_pkcs5_self_test(verbose: cint): cint <cimport,nodecl> end
global mbedtls_platform_context: type <cimport,nodecl> = @record{
  dummy: cchar
}
global function mbedtls_platform_setup(ctx: *mbedtls_platform_context): cint <cimport,nodecl> end
global function mbedtls_platform_teardown(ctx: *mbedtls_platform_context): void <cimport,nodecl> end
global mbedtls_f_rng_t: type <cimport,nodecl> = @function(pointer, *cuchar, csize): cint
global mbedtls_psa_drbg_context_t: type = @mbedtls_ctr_drbg_context
global mbedtls_psa_get_random: function(pointer, *cuchar, csize): cint <cimport,nodecl>
global mbedtls_psa_random_state: *mbedtls_psa_drbg_context_t <cimport,nodecl>
global mbedtls_ripemd160_context: type <cimport,nodecl> = @record{
  total: [2]uint32,
  state: [5]uint32,
  buffer: [64]cuchar
}
global function mbedtls_ripemd160_init(ctx: *mbedtls_ripemd160_context): void <cimport,nodecl> end
global function mbedtls_ripemd160_free(ctx: *mbedtls_ripemd160_context): void <cimport,nodecl> end
global function mbedtls_ripemd160_clone(dst: *mbedtls_ripemd160_context, src: *mbedtls_ripemd160_context): void <cimport,nodecl> end
global function mbedtls_ripemd160_starts_ret(ctx: *mbedtls_ripemd160_context): cint <cimport,nodecl> end
global function mbedtls_ripemd160_update_ret(ctx: *mbedtls_ripemd160_context, input: *cuchar, ilen: csize): cint <cimport,nodecl> end
global function mbedtls_ripemd160_finish_ret(ctx: *mbedtls_ripemd160_context, output: *cuchar): cint <cimport,nodecl> end
global function mbedtls_internal_ripemd160_process(ctx: *mbedtls_ripemd160_context, data: *cuchar): cint <cimport,nodecl> end
global function mbedtls_ripemd160_ret(input: *cuchar, ilen: csize, output: *cuchar): cint <cimport,nodecl> end
global function mbedtls_ripemd160_self_test(verbose: cint): cint <cimport,nodecl> end
global mbedtls_sha1_context: type <cimport,nodecl> = @record{
  total: [2]uint32,
  state: [5]uint32,
  buffer: [64]cuchar
}
global function mbedtls_sha1_init(ctx: *mbedtls_sha1_context): void <cimport,nodecl> end
global function mbedtls_sha1_free(ctx: *mbedtls_sha1_context): void <cimport,nodecl> end
global function mbedtls_sha1_clone(dst: *mbedtls_sha1_context, src: *mbedtls_sha1_context): void <cimport,nodecl> end
global function mbedtls_sha1_starts_ret(ctx: *mbedtls_sha1_context): cint <cimport,nodecl> end
global function mbedtls_sha1_update_ret(ctx: *mbedtls_sha1_context, input: *cuchar, ilen: csize): cint <cimport,nodecl> end
global function mbedtls_sha1_finish_ret(ctx: *mbedtls_sha1_context, output: *cuchar): cint <cimport,nodecl> end
global function mbedtls_internal_sha1_process(ctx: *mbedtls_sha1_context, data: *cuchar): cint <cimport,nodecl> end
global function mbedtls_sha1_ret(input: *cuchar, ilen: csize, output: *cuchar): cint <cimport,nodecl> end
global function mbedtls_sha1_self_test(verbose: cint): cint <cimport,nodecl> end
global mbedtls_sha256_context: type <cimport,nodecl> = @record{
  total: [2]uint32,
  state: [8]uint32,
  buffer: [64]cuchar,
  is224: cint
}
global function mbedtls_sha256_init(ctx: *mbedtls_sha256_context): void <cimport,nodecl> end
global function mbedtls_sha256_free(ctx: *mbedtls_sha256_context): void <cimport,nodecl> end
global function mbedtls_sha256_clone(dst: *mbedtls_sha256_context, src: *mbedtls_sha256_context): void <cimport,nodecl> end
global function mbedtls_sha256_starts_ret(ctx: *mbedtls_sha256_context, is224: cint): cint <cimport,nodecl> end
global function mbedtls_sha256_update_ret(ctx: *mbedtls_sha256_context, input: *cuchar, ilen: csize): cint <cimport,nodecl> end
global function mbedtls_sha256_finish_ret(ctx: *mbedtls_sha256_context, output: *cuchar): cint <cimport,nodecl> end
global function mbedtls_internal_sha256_process(ctx: *mbedtls_sha256_context, data: *cuchar): cint <cimport,nodecl> end
global function mbedtls_sha256_ret(input: *cuchar, ilen: csize, output: *cuchar, is224: cint): cint <cimport,nodecl> end
global function mbedtls_sha256_self_test(verbose: cint): cint <cimport,nodecl> end
global mbedtls_ssl_cache_context: type <cimport,nodecl,forwarddecl> = @record{}
global mbedtls_ssl_cache_entry: type <cimport,nodecl,forwarddecl> = @record{}
mbedtls_ssl_cache_entry = @record{
  timestamp: clong,
  session: mbedtls_ssl_session,
  peer_cert: mbedtls_x509_buf,
  next: *mbedtls_ssl_cache_entry
}
mbedtls_ssl_cache_context = @record{
  chain: *mbedtls_ssl_cache_entry,
  timeout: cint,
  max_entries: cint,
  mutex: mbedtls_threading_mutex_t
}
global function mbedtls_ssl_cache_init(cache: *mbedtls_ssl_cache_context): void <cimport,nodecl> end
global function mbedtls_ssl_cache_get(data: pointer, session: *mbedtls_ssl_session): cint <cimport,nodecl> end
global function mbedtls_ssl_cache_set(data: pointer, session: *mbedtls_ssl_session): cint <cimport,nodecl> end
global function mbedtls_ssl_cache_set_timeout(cache: *mbedtls_ssl_cache_context, timeout: cint): void <cimport,nodecl> end
global function mbedtls_ssl_cache_set_max_entries(cache: *mbedtls_ssl_cache_context, max: cint): void <cimport,nodecl> end
global function mbedtls_ssl_cache_free(cache: *mbedtls_ssl_cache_context): void <cimport,nodecl> end
global mbedtls_ssl_cookie_ctx: type <cimport,nodecl> = @record{
  hmac_ctx: mbedtls_md_context_t,
  timeout: culong,
  mutex: mbedtls_threading_mutex_t
}
global function mbedtls_ssl_cookie_init(ctx: *mbedtls_ssl_cookie_ctx): void <cimport,nodecl> end
global function mbedtls_ssl_cookie_setup(ctx: *mbedtls_ssl_cookie_ctx, f_rng: function(pointer, *cuchar, csize): cint, p_rng: pointer): cint <cimport,nodecl> end
global function mbedtls_ssl_cookie_set_timeout(ctx: *mbedtls_ssl_cookie_ctx, delay: culong): void <cimport,nodecl> end
global function mbedtls_ssl_cookie_free(ctx: *mbedtls_ssl_cookie_ctx): void <cimport,nodecl> end
global function mbedtls_ssl_cookie_write(): cint <cimport,nodecl> end
global function mbedtls_ssl_cookie_check(): cint <cimport,nodecl> end
global mbedtls_ssl_ticket_key: type <cimport,nodecl> = @record{
  name: [4]cuchar,
  generation_time: uint32,
  ctx: mbedtls_cipher_context_t
}
global mbedtls_ssl_ticket_context: type <cimport,nodecl> = @record{
  keys: [2]mbedtls_ssl_ticket_key,
  active: cuchar,
  ticket_lifetime: uint32,
  f_rng: function(pointer, *cuchar, csize): cint,
  p_rng: pointer,
  mutex: mbedtls_threading_mutex_t
}
global function mbedtls_ssl_ticket_init(ctx: *mbedtls_ssl_ticket_context): void <cimport,nodecl> end
global function mbedtls_ssl_ticket_setup(ctx: *mbedtls_ssl_ticket_context, f_rng: function(pointer, *cuchar, csize): cint, p_rng: pointer, cipher: mbedtls_cipher_type_t, lifetime: uint32): cint <cimport,nodecl> end
global function mbedtls_ssl_ticket_write(): cint <cimport,nodecl> end
global function mbedtls_ssl_ticket_parse(): cint <cimport,nodecl> end
global function mbedtls_ssl_ticket_free(ctx: *mbedtls_ssl_ticket_context): void <cimport,nodecl> end
global mbedtls_timing_hr_time: type <cimport,nodecl,ctypedef> = @record{
  opaque: [32]cuchar
}
global mbedtls_timing_delay_context: type <cimport,nodecl> = @record{
  timer: mbedtls_timing_hr_time,
  int_ms: uint32,
  fin_ms: uint32
}
global mbedtls_timing_alarmed: cint <cimport,nodecl>
global function mbedtls_timing_hardclock(): culong <cimport,nodecl> end
global function mbedtls_timing_get_timer(val: *mbedtls_timing_hr_time, reset: cint): culong <cimport,nodecl> end
global function mbedtls_set_alarm(seconds: cint): void <cimport,nodecl> end
global function mbedtls_timing_set_delay(data: pointer, int_ms: uint32, fin_ms: uint32): void <cimport,nodecl> end
global function mbedtls_timing_get_delay(data: pointer): cint <cimport,nodecl> end
global function mbedtls_timing_self_test(verbose: cint): cint <cimport,nodecl> end
global function mbedtls_version_get_number(): cuint <cimport,nodecl> end
global function mbedtls_version_get_string(string: cstring): void <cimport,nodecl> end
global function mbedtls_version_get_string_full(string: cstring): void <cimport,nodecl> end
global function mbedtls_version_check_feature(feature: cstring): cint <cimport,nodecl> end
global mbedtls_x509_csr: type <cimport,nodecl> = @record{
  raw: mbedtls_x509_buf,
  cri: mbedtls_x509_buf,
  version: cint,
  subject_raw: mbedtls_x509_buf,
  subject: mbedtls_x509_name,
  pk: mbedtls_pk_context,
  sig_oid: mbedtls_x509_buf,
  sig: mbedtls_x509_buf,
  sig_md: mbedtls_md_type_t,
  sig_pk: mbedtls_pk_type_t,
  sig_opts: pointer
}
global mbedtls_x509write_csr: type <cimport,nodecl> = @record{
  key: *mbedtls_pk_context,
  subject: *mbedtls_asn1_named_data,
  md_alg: mbedtls_md_type_t,
  extensions: *mbedtls_asn1_named_data
}
global function mbedtls_x509_csr_parse_der(csr: *mbedtls_x509_csr, buf: *cuchar, buflen: csize): cint <cimport,nodecl> end
global function mbedtls_x509_csr_parse(csr: *mbedtls_x509_csr, buf: *cuchar, buflen: csize): cint <cimport,nodecl> end
global function mbedtls_x509_csr_parse_file(csr: *mbedtls_x509_csr, path: cstring): cint <cimport,nodecl> end
global function mbedtls_x509_csr_info(buf: cstring, size: csize, prefix: cstring, csr: *mbedtls_x509_csr): cint <cimport,nodecl> end
global function mbedtls_x509_csr_init(csr: *mbedtls_x509_csr): void <cimport,nodecl> end
global function mbedtls_x509_csr_free(csr: *mbedtls_x509_csr): void <cimport,nodecl> end
global function mbedtls_x509write_csr_init(ctx: *mbedtls_x509write_csr): void <cimport,nodecl> end
global function mbedtls_x509write_csr_set_subject_name(ctx: *mbedtls_x509write_csr, subject_name: cstring): cint <cimport,nodecl> end
global function mbedtls_x509write_csr_set_key(ctx: *mbedtls_x509write_csr, key: *mbedtls_pk_context): void <cimport,nodecl> end
global function mbedtls_x509write_csr_set_md_alg(ctx: *mbedtls_x509write_csr, md_alg: mbedtls_md_type_t): void <cimport,nodecl> end
global function mbedtls_x509write_csr_set_key_usage(ctx: *mbedtls_x509write_csr, key_usage: cuchar): cint <cimport,nodecl> end
global function mbedtls_x509write_csr_set_ns_cert_type(ctx: *mbedtls_x509write_csr, ns_cert_type: cuchar): cint <cimport,nodecl> end
global function mbedtls_x509write_csr_set_extension(ctx: *mbedtls_x509write_csr, oid: cstring, oid_len: csize, val: *cuchar, val_len: csize): cint <cimport,nodecl> end
global function mbedtls_x509write_csr_free(ctx: *mbedtls_x509write_csr): void <cimport,nodecl> end
global function mbedtls_x509write_csr_der(ctx: *mbedtls_x509write_csr, buf: *cuchar, size: csize, f_rng: function(pointer, *cuchar, csize): cint, p_rng: pointer): cint <cimport,nodecl> end
global function mbedtls_x509write_csr_pem(ctx: *mbedtls_x509write_csr, buf: *cuchar, size: csize, f_rng: function(pointer, *cuchar, csize): cint, p_rng: pointer): cint <cimport,nodecl> end
global mbedtls_xtea_context: type <cimport,nodecl> = @record{
  k: [4]uint32
}
global function mbedtls_xtea_init(ctx: *mbedtls_xtea_context): void <cimport,nodecl> end
global function mbedtls_xtea_free(ctx: *mbedtls_xtea_context): void <cimport,nodecl> end
global function mbedtls_xtea_setup(ctx: *mbedtls_xtea_context, key: *cuchar): void <cimport,nodecl> end
global function mbedtls_xtea_crypt_ecb(ctx: *mbedtls_xtea_context, mode: cint, input: *cuchar, output: *cuchar): cint <cimport,nodecl> end
global function mbedtls_xtea_crypt_cbc(ctx: *mbedtls_xtea_context, mode: cint, length: csize, iv: *cuchar, input: *cuchar, output: *cuchar): cint <cimport,nodecl> end
global function mbedtls_xtea_self_test(verbose: cint): cint <cimport,nodecl> end
global MBEDTLS_CHECK_RETURN: cint <cimport,nodecl,const>
global MBEDTLS_CHECK_RETURN_CRITICAL: cint <cimport,nodecl,const>
global MBEDTLS_AES_ENCRYPT: cint <cimport,nodecl,const>
global MBEDTLS_AES_DECRYPT: cint <cimport,nodecl,const>
global MBEDTLS_ERR_AES_INVALID_KEY_LENGTH: cint <cimport,nodecl,const>
global MBEDTLS_ERR_AES_INVALID_INPUT_LENGTH: cint <cimport,nodecl,const>
global MBEDTLS_ERR_AES_BAD_INPUT_DATA: cint <cimport,nodecl,const>
global MBEDTLS_ERR_AES_FEATURE_UNAVAILABLE: cint <cimport,nodecl,const>
global MBEDTLS_ERR_AES_HW_ACCEL_FAILED: cint <cimport,nodecl,const>
global MBEDTLS_AESNI_AES: cint <cimport,nodecl,const>
global MBEDTLS_AESNI_CLMUL: cint <cimport,nodecl,const>
global MBEDTLS_ERR_ARC4_HW_ACCEL_FAILED: cint <cimport,nodecl,const>
global MBEDTLS_ARIA_ENCRYPT: cint <cimport,nodecl,const>
global MBEDTLS_ARIA_DECRYPT: cint <cimport,nodecl,const>
global MBEDTLS_ARIA_BLOCKSIZE: cint <cimport,nodecl,const>
global MBEDTLS_ARIA_MAX_ROUNDS: cint <cimport,nodecl,const>
global MBEDTLS_ARIA_MAX_KEYSIZE: cint <cimport,nodecl,const>
global MBEDTLS_ERR_ARIA_BAD_INPUT_DATA: cint <cimport,nodecl,const>
global MBEDTLS_ERR_ARIA_INVALID_INPUT_LENGTH: cint <cimport,nodecl,const>
global MBEDTLS_ERR_ARIA_FEATURE_UNAVAILABLE: cint <cimport,nodecl,const>
global MBEDTLS_ERR_ARIA_HW_ACCEL_FAILED: cint <cimport,nodecl,const>
global MBEDTLS_ERR_MPI_FILE_IO_ERROR: cint <cimport,nodecl,const>
global MBEDTLS_ERR_MPI_BAD_INPUT_DATA: cint <cimport,nodecl,const>
global MBEDTLS_ERR_MPI_INVALID_CHARACTER: cint <cimport,nodecl,const>
global MBEDTLS_ERR_MPI_BUFFER_TOO_SMALL: cint <cimport,nodecl,const>
global MBEDTLS_ERR_MPI_NEGATIVE_VALUE: cint <cimport,nodecl,const>
global MBEDTLS_ERR_MPI_DIVISION_BY_ZERO: cint <cimport,nodecl,const>
global MBEDTLS_ERR_MPI_NOT_ACCEPTABLE: cint <cimport,nodecl,const>
global MBEDTLS_ERR_MPI_ALLOC_FAILED: cint <cimport,nodecl,const>
global MBEDTLS_MPI_MAX_LIMBS: cint <cimport,nodecl,const>
global MBEDTLS_MPI_WINDOW_SIZE: cint <cimport,nodecl,const>
global MBEDTLS_MPI_MAX_SIZE: cint <cimport,nodecl,const>
global MBEDTLS_MPI_MAX_BITS: cint <cimport,nodecl,const>
global MBEDTLS_MPI_MAX_BITS_SCALE100: cint <cimport,nodecl,const>
global MBEDTLS_LN_2_DIV_LN_10_SCALE100: cint <cimport,nodecl,const>
global MBEDTLS_MPI_RW_BUFFER_SIZE: cint <cimport,nodecl,const>
global MBEDTLS_ERR_ASN1_OUT_OF_DATA: cint <cimport,nodecl,const>
global MBEDTLS_ERR_ASN1_UNEXPECTED_TAG: cint <cimport,nodecl,const>
global MBEDTLS_ERR_ASN1_INVALID_LENGTH: cint <cimport,nodecl,const>
global MBEDTLS_ERR_ASN1_LENGTH_MISMATCH: cint <cimport,nodecl,const>
global MBEDTLS_ERR_ASN1_INVALID_DATA: cint <cimport,nodecl,const>
global MBEDTLS_ERR_ASN1_ALLOC_FAILED: cint <cimport,nodecl,const>
global MBEDTLS_ERR_ASN1_BUF_TOO_SMALL: cint <cimport,nodecl,const>
global MBEDTLS_ASN1_BOOLEAN: cint <cimport,nodecl,const>
global MBEDTLS_ASN1_INTEGER: cint <cimport,nodecl,const>
global MBEDTLS_ASN1_BIT_STRING: cint <cimport,nodecl,const>
global MBEDTLS_ASN1_OCTET_STRING: cint <cimport,nodecl,const>
global MBEDTLS_ASN1_NULL: cint <cimport,nodecl,const>
global MBEDTLS_ASN1_OID: cint <cimport,nodecl,const>
global MBEDTLS_ASN1_ENUMERATED: cint <cimport,nodecl,const>
global MBEDTLS_ASN1_UTF8_STRING: cint <cimport,nodecl,const>
global MBEDTLS_ASN1_SEQUENCE: cint <cimport,nodecl,const>
global MBEDTLS_ASN1_SET: cint <cimport,nodecl,const>
global MBEDTLS_ASN1_PRINTABLE_STRING: cint <cimport,nodecl,const>
global MBEDTLS_ASN1_T61_STRING: cint <cimport,nodecl,const>
global MBEDTLS_ASN1_IA5_STRING: cint <cimport,nodecl,const>
global MBEDTLS_ASN1_UTC_TIME: cint <cimport,nodecl,const>
global MBEDTLS_ASN1_GENERALIZED_TIME: cint <cimport,nodecl,const>
global MBEDTLS_ASN1_UNIVERSAL_STRING: cint <cimport,nodecl,const>
global MBEDTLS_ASN1_BMP_STRING: cint <cimport,nodecl,const>
global MBEDTLS_ASN1_PRIMITIVE: cint <cimport,nodecl,const>
global MBEDTLS_ASN1_CONSTRUCTED: cint <cimport,nodecl,const>
global MBEDTLS_ASN1_CONTEXT_SPECIFIC: cint <cimport,nodecl,const>
global MBEDTLS_ASN1_TAG_CLASS_MASK: cint <cimport,nodecl,const>
global MBEDTLS_ASN1_TAG_PC_MASK: cint <cimport,nodecl,const>
global MBEDTLS_ASN1_TAG_VALUE_MASK: cint <cimport,nodecl,const>
global MBEDTLS_ERR_BASE64_BUFFER_TOO_SMALL: cint <cimport,nodecl,const>
global MBEDTLS_ERR_BASE64_INVALID_CHARACTER: cint <cimport,nodecl,const>
global MBEDTLS_BLOWFISH_ENCRYPT: cint <cimport,nodecl,const>
global MBEDTLS_BLOWFISH_DECRYPT: cint <cimport,nodecl,const>
global MBEDTLS_BLOWFISH_MAX_KEY_BITS: cint <cimport,nodecl,const>
global MBEDTLS_BLOWFISH_MIN_KEY_BITS: cint <cimport,nodecl,const>
global MBEDTLS_BLOWFISH_ROUNDS: cint <cimport,nodecl,const>
global MBEDTLS_BLOWFISH_BLOCKSIZE: cint <cimport,nodecl,const>
global MBEDTLS_ERR_BLOWFISH_BAD_INPUT_DATA: cint <cimport,nodecl,const>
global MBEDTLS_ERR_BLOWFISH_INVALID_INPUT_LENGTH: cint <cimport,nodecl,const>
global MBEDTLS_ERR_BLOWFISH_HW_ACCEL_FAILED: cint <cimport,nodecl,const>
global MBEDTLS_CAMELLIA_ENCRYPT: cint <cimport,nodecl,const>
global MBEDTLS_CAMELLIA_DECRYPT: cint <cimport,nodecl,const>
global MBEDTLS_ERR_CAMELLIA_BAD_INPUT_DATA: cint <cimport,nodecl,const>
global MBEDTLS_ERR_CAMELLIA_INVALID_INPUT_LENGTH: cint <cimport,nodecl,const>
global MBEDTLS_ERR_CAMELLIA_HW_ACCEL_FAILED: cint <cimport,nodecl,const>
global MBEDTLS_ERR_CIPHER_FEATURE_UNAVAILABLE: cint <cimport,nodecl,const>
global MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA: cint <cimport,nodecl,const>
global MBEDTLS_ERR_CIPHER_ALLOC_FAILED: cint <cimport,nodecl,const>
global MBEDTLS_ERR_CIPHER_INVALID_PADDING: cint <cimport,nodecl,const>
global MBEDTLS_ERR_CIPHER_FULL_BLOCK_EXPECTED: cint <cimport,nodecl,const>
global MBEDTLS_ERR_CIPHER_AUTH_FAILED: cint <cimport,nodecl,const>
global MBEDTLS_ERR_CIPHER_INVALID_CONTEXT: cint <cimport,nodecl,const>
global MBEDTLS_ERR_CIPHER_HW_ACCEL_FAILED: cint <cimport,nodecl,const>
global MBEDTLS_CIPHER_VARIABLE_IV_LEN: cint <cimport,nodecl,const>
global MBEDTLS_CIPHER_VARIABLE_KEY_LEN: cint <cimport,nodecl,const>
global MBEDTLS_MAX_IV_LENGTH: cint <cimport,nodecl,const>
global MBEDTLS_MAX_BLOCK_LENGTH: cint <cimport,nodecl,const>
global MBEDTLS_MAX_KEY_LENGTH: cint <cimport,nodecl,const>
global MBEDTLS_ERR_CCM_BAD_INPUT: cint <cimport,nodecl,const>
global MBEDTLS_ERR_CCM_AUTH_FAILED: cint <cimport,nodecl,const>
global MBEDTLS_ERR_CCM_HW_ACCEL_FAILED: cint <cimport,nodecl,const>
global MBEDTLS_ERR_CHACHA20_BAD_INPUT_DATA: cint <cimport,nodecl,const>
global MBEDTLS_ERR_CHACHA20_FEATURE_UNAVAILABLE: cint <cimport,nodecl,const>
global MBEDTLS_ERR_CHACHA20_HW_ACCEL_FAILED: cint <cimport,nodecl,const>
global MBEDTLS_ERR_POLY1305_BAD_INPUT_DATA: cint <cimport,nodecl,const>
global MBEDTLS_ERR_POLY1305_FEATURE_UNAVAILABLE: cint <cimport,nodecl,const>
global MBEDTLS_ERR_POLY1305_HW_ACCEL_FAILED: cint <cimport,nodecl,const>
global MBEDTLS_ERR_CHACHAPOLY_BAD_STATE: cint <cimport,nodecl,const>
global MBEDTLS_ERR_CHACHAPOLY_AUTH_FAILED: cint <cimport,nodecl,const>
global MBEDTLS_ERR_CMAC_HW_ACCEL_FAILED: cint <cimport,nodecl,const>
global MBEDTLS_AES_BLOCK_SIZE: cint <cimport,nodecl,const>
global MBEDTLS_DES3_BLOCK_SIZE: cint <cimport,nodecl,const>
global MBEDTLS_CIPHER_BLKSIZE_MAX: cint <cimport,nodecl,const>
global MBEDTLS_ERR_THREADING_FEATURE_UNAVAILABLE: cint <cimport,nodecl,const>
global MBEDTLS_ERR_THREADING_BAD_INPUT_DATA: cint <cimport,nodecl,const>
global MBEDTLS_ERR_THREADING_MUTEX_ERROR: cint <cimport,nodecl,const>
global MBEDTLS_ERR_CTR_DRBG_ENTROPY_SOURCE_FAILED: cint <cimport,nodecl,const>
global MBEDTLS_ERR_CTR_DRBG_REQUEST_TOO_BIG: cint <cimport,nodecl,const>
global MBEDTLS_ERR_CTR_DRBG_INPUT_TOO_BIG: cint <cimport,nodecl,const>
global MBEDTLS_ERR_CTR_DRBG_FILE_IO_ERROR: cint <cimport,nodecl,const>
global MBEDTLS_CTR_DRBG_BLOCKSIZE: cint <cimport,nodecl,const>
global MBEDTLS_CTR_DRBG_KEYSIZE: cint <cimport,nodecl,const>
global MBEDTLS_CTR_DRBG_KEYBITS: cint <cimport,nodecl,const>
global MBEDTLS_CTR_DRBG_SEEDLEN: cint <cimport,nodecl,const>
global MBEDTLS_CTR_DRBG_ENTROPY_LEN: cint <cimport,nodecl,const>
global MBEDTLS_CTR_DRBG_RESEED_INTERVAL: cint <cimport,nodecl,const>
global MBEDTLS_CTR_DRBG_MAX_INPUT: cint <cimport,nodecl,const>
global MBEDTLS_CTR_DRBG_MAX_REQUEST: cint <cimport,nodecl,const>
global MBEDTLS_CTR_DRBG_MAX_SEED_INPUT: cint <cimport,nodecl,const>
global MBEDTLS_CTR_DRBG_PR_OFF: cint <cimport,nodecl,const>
global MBEDTLS_CTR_DRBG_PR_ON: cint <cimport,nodecl,const>
global MBEDTLS_CTR_DRBG_ENTROPY_NONCE_LEN: cint <cimport,nodecl,const>
global MBEDTLS_ERR_ECP_BAD_INPUT_DATA: cint <cimport,nodecl,const>
global MBEDTLS_ERR_ECP_BUFFER_TOO_SMALL: cint <cimport,nodecl,const>
global MBEDTLS_ERR_ECP_FEATURE_UNAVAILABLE: cint <cimport,nodecl,const>
global MBEDTLS_ERR_ECP_VERIFY_FAILED: cint <cimport,nodecl,const>
global MBEDTLS_ERR_ECP_ALLOC_FAILED: cint <cimport,nodecl,const>
global MBEDTLS_ERR_ECP_RANDOM_FAILED: cint <cimport,nodecl,const>
global MBEDTLS_ERR_ECP_INVALID_KEY: cint <cimport,nodecl,const>
global MBEDTLS_ERR_ECP_SIG_LEN_MISMATCH: cint <cimport,nodecl,const>
global MBEDTLS_ERR_ECP_HW_ACCEL_FAILED: cint <cimport,nodecl,const>
global MBEDTLS_ERR_ECP_IN_PROGRESS: cint <cimport,nodecl,const>
global MBEDTLS_ECP_DP_MAX: cint <cimport,nodecl,const>
global MBEDTLS_ECP_MAX_BITS_MIN: cint <cimport,nodecl,const>
global MBEDTLS_ECP_MAX_BITS: cint <cimport,nodecl,const>
global MBEDTLS_ECP_MAX_BYTES: cint <cimport,nodecl,const>
global MBEDTLS_ECP_MAX_PT_LEN: cint <cimport,nodecl,const>
global MBEDTLS_ECP_WINDOW_SIZE: cint <cimport,nodecl,const>
global MBEDTLS_ECP_FIXED_POINT_OPTIM: cint <cimport,nodecl,const>
global MBEDTLS_ECP_PF_UNCOMPRESSED: cint <cimport,nodecl,const>
global MBEDTLS_ECP_PF_COMPRESSED: cint <cimport,nodecl,const>
global MBEDTLS_ECP_TLS_NAMED_CURVE: cint <cimport,nodecl,const>
global MBEDTLS_ERR_MD_FEATURE_UNAVAILABLE: cint <cimport,nodecl,const>
global MBEDTLS_ERR_MD_BAD_INPUT_DATA: cint <cimport,nodecl,const>
global MBEDTLS_ERR_MD_ALLOC_FAILED: cint <cimport,nodecl,const>
global MBEDTLS_ERR_MD_FILE_IO_ERROR: cint <cimport,nodecl,const>
global MBEDTLS_ERR_MD_HW_ACCEL_FAILED: cint <cimport,nodecl,const>
global MBEDTLS_MD_MAX_SIZE: cint <cimport,nodecl,const>
global MBEDTLS_MD_MAX_BLOCK_SIZE: cint <cimport,nodecl,const>
global MBEDTLS_ERR_RSA_BAD_INPUT_DATA: cint <cimport,nodecl,const>
global MBEDTLS_ERR_RSA_INVALID_PADDING: cint <cimport,nodecl,const>
global MBEDTLS_ERR_RSA_KEY_GEN_FAILED: cint <cimport,nodecl,const>
global MBEDTLS_ERR_RSA_KEY_CHECK_FAILED: cint <cimport,nodecl,const>
global MBEDTLS_ERR_RSA_PUBLIC_FAILED: cint <cimport,nodecl,const>
global MBEDTLS_ERR_RSA_PRIVATE_FAILED: cint <cimport,nodecl,const>
global MBEDTLS_ERR_RSA_VERIFY_FAILED: cint <cimport,nodecl,const>
global MBEDTLS_ERR_RSA_OUTPUT_TOO_LARGE: cint <cimport,nodecl,const>
global MBEDTLS_ERR_RSA_RNG_FAILED: cint <cimport,nodecl,const>
global MBEDTLS_ERR_RSA_UNSUPPORTED_OPERATION: cint <cimport,nodecl,const>
global MBEDTLS_ERR_RSA_HW_ACCEL_FAILED: cint <cimport,nodecl,const>
global MBEDTLS_RSA_PUBLIC: cint <cimport,nodecl,const>
global MBEDTLS_RSA_PRIVATE: cint <cimport,nodecl,const>
global MBEDTLS_RSA_PKCS_V15: cint <cimport,nodecl,const>
global MBEDTLS_RSA_PKCS_V21: cint <cimport,nodecl,const>
global MBEDTLS_RSA_SIGN: cint <cimport,nodecl,const>
global MBEDTLS_RSA_CRYPT: cint <cimport,nodecl,const>
global MBEDTLS_RSA_SALT_LEN_ANY: cint <cimport,nodecl,const>
global MBEDTLS_ECDSA_MAX_LEN: cint <cimport,nodecl,const>
global MBEDTLS_ERR_PK_ALLOC_FAILED: cint <cimport,nodecl,const>
global MBEDTLS_ERR_PK_TYPE_MISMATCH: cint <cimport,nodecl,const>
global MBEDTLS_ERR_PK_BAD_INPUT_DATA: cint <cimport,nodecl,const>
global MBEDTLS_ERR_PK_FILE_IO_ERROR: cint <cimport,nodecl,const>
global MBEDTLS_ERR_PK_KEY_INVALID_VERSION: cint <cimport,nodecl,const>
global MBEDTLS_ERR_PK_KEY_INVALID_FORMAT: cint <cimport,nodecl,const>
global MBEDTLS_ERR_PK_UNKNOWN_PK_ALG: cint <cimport,nodecl,const>
global MBEDTLS_ERR_PK_PASSWORD_REQUIRED: cint <cimport,nodecl,const>
global MBEDTLS_ERR_PK_PASSWORD_MISMATCH: cint <cimport,nodecl,const>
global MBEDTLS_ERR_PK_INVALID_PUBKEY: cint <cimport,nodecl,const>
global MBEDTLS_ERR_PK_INVALID_ALG: cint <cimport,nodecl,const>
global MBEDTLS_ERR_PK_UNKNOWN_NAMED_CURVE: cint <cimport,nodecl,const>
global MBEDTLS_ERR_PK_FEATURE_UNAVAILABLE: cint <cimport,nodecl,const>
global MBEDTLS_ERR_PK_SIG_LEN_MISMATCH: cint <cimport,nodecl,const>
global MBEDTLS_ERR_PK_HW_ACCEL_FAILED: cint <cimport,nodecl,const>
global MBEDTLS_PK_SIGNATURE_MAX_SIZE: cint <cimport,nodecl,const>
global MBEDTLS_PK_SIGNATURE_MAX_SIZE: cint <cimport,nodecl,const>
global MBEDTLS_PK_DEBUG_MAX_ITEMS: cint <cimport,nodecl,const>
global MBEDTLS_TLS_RSA_WITH_NULL_MD5: cint <cimport,nodecl,const>
global MBEDTLS_TLS_RSA_WITH_NULL_SHA: cint <cimport,nodecl,const>
global MBEDTLS_TLS_RSA_WITH_RC4_128_MD5: cint <cimport,nodecl,const>
global MBEDTLS_TLS_RSA_WITH_RC4_128_SHA: cint <cimport,nodecl,const>
global MBEDTLS_TLS_RSA_WITH_DES_CBC_SHA: cint <cimport,nodecl,const>
global MBEDTLS_TLS_RSA_WITH_3DES_EDE_CBC_SHA: cint <cimport,nodecl,const>
global MBEDTLS_TLS_DHE_RSA_WITH_DES_CBC_SHA: cint <cimport,nodecl,const>
global MBEDTLS_TLS_DHE_RSA_WITH_3DES_EDE_CBC_SHA: cint <cimport,nodecl,const>
global MBEDTLS_TLS_PSK_WITH_NULL_SHA: cint <cimport,nodecl,const>
global MBEDTLS_TLS_DHE_PSK_WITH_NULL_SHA: cint <cimport,nodecl,const>
global MBEDTLS_TLS_RSA_PSK_WITH_NULL_SHA: cint <cimport,nodecl,const>
global MBEDTLS_TLS_RSA_WITH_AES_128_CBC_SHA: cint <cimport,nodecl,const>
global MBEDTLS_TLS_DHE_RSA_WITH_AES_128_CBC_SHA: cint <cimport,nodecl,const>
global MBEDTLS_TLS_RSA_WITH_AES_256_CBC_SHA: cint <cimport,nodecl,const>
global MBEDTLS_TLS_DHE_RSA_WITH_AES_256_CBC_SHA: cint <cimport,nodecl,const>
global MBEDTLS_TLS_RSA_WITH_NULL_SHA256: cint <cimport,nodecl,const>
global MBEDTLS_TLS_RSA_WITH_AES_128_CBC_SHA256: cint <cimport,nodecl,const>
global MBEDTLS_TLS_RSA_WITH_AES_256_CBC_SHA256: cint <cimport,nodecl,const>
global MBEDTLS_TLS_RSA_WITH_CAMELLIA_128_CBC_SHA: cint <cimport,nodecl,const>
global MBEDTLS_TLS_DHE_RSA_WITH_CAMELLIA_128_CBC_SHA: cint <cimport,nodecl,const>
global MBEDTLS_TLS_DHE_RSA_WITH_AES_128_CBC_SHA256: cint <cimport,nodecl,const>
global MBEDTLS_TLS_DHE_RSA_WITH_AES_256_CBC_SHA256: cint <cimport,nodecl,const>
global MBEDTLS_TLS_RSA_WITH_CAMELLIA_256_CBC_SHA: cint <cimport,nodecl,const>
global MBEDTLS_TLS_DHE_RSA_WITH_CAMELLIA_256_CBC_SHA: cint <cimport,nodecl,const>
global MBEDTLS_TLS_PSK_WITH_RC4_128_SHA: cint <cimport,nodecl,const>
global MBEDTLS_TLS_PSK_WITH_3DES_EDE_CBC_SHA: cint <cimport,nodecl,const>
global MBEDTLS_TLS_PSK_WITH_AES_128_CBC_SHA: cint <cimport,nodecl,const>
global MBEDTLS_TLS_PSK_WITH_AES_256_CBC_SHA: cint <cimport,nodecl,const>
global MBEDTLS_TLS_DHE_PSK_WITH_RC4_128_SHA: cint <cimport,nodecl,const>
global MBEDTLS_TLS_DHE_PSK_WITH_3DES_EDE_CBC_SHA: cint <cimport,nodecl,const>
global MBEDTLS_TLS_DHE_PSK_WITH_AES_128_CBC_SHA: cint <cimport,nodecl,const>
global MBEDTLS_TLS_DHE_PSK_WITH_AES_256_CBC_SHA: cint <cimport,nodecl,const>
global MBEDTLS_TLS_RSA_PSK_WITH_RC4_128_SHA: cint <cimport,nodecl,const>
global MBEDTLS_TLS_RSA_PSK_WITH_3DES_EDE_CBC_SHA: cint <cimport,nodecl,const>
global MBEDTLS_TLS_RSA_PSK_WITH_AES_128_CBC_SHA: cint <cimport,nodecl,const>
global MBEDTLS_TLS_RSA_PSK_WITH_AES_256_CBC_SHA: cint <cimport,nodecl,const>
global MBEDTLS_TLS_RSA_WITH_AES_128_GCM_SHA256: cint <cimport,nodecl,const>
global MBEDTLS_TLS_RSA_WITH_AES_256_GCM_SHA384: cint <cimport,nodecl,const>
global MBEDTLS_TLS_DHE_RSA_WITH_AES_128_GCM_SHA256: cint <cimport,nodecl,const>
global MBEDTLS_TLS_DHE_RSA_WITH_AES_256_GCM_SHA384: cint <cimport,nodecl,const>
global MBEDTLS_TLS_PSK_WITH_AES_128_GCM_SHA256: cint <cimport,nodecl,const>
global MBEDTLS_TLS_PSK_WITH_AES_256_GCM_SHA384: cint <cimport,nodecl,const>
global MBEDTLS_TLS_DHE_PSK_WITH_AES_128_GCM_SHA256: cint <cimport,nodecl,const>
global MBEDTLS_TLS_DHE_PSK_WITH_AES_256_GCM_SHA384: cint <cimport,nodecl,const>
global MBEDTLS_TLS_RSA_PSK_WITH_AES_128_GCM_SHA256: cint <cimport,nodecl,const>
global MBEDTLS_TLS_RSA_PSK_WITH_AES_256_GCM_SHA384: cint <cimport,nodecl,const>
global MBEDTLS_TLS_PSK_WITH_AES_128_CBC_SHA256: cint <cimport,nodecl,const>
global MBEDTLS_TLS_PSK_WITH_AES_256_CBC_SHA384: cint <cimport,nodecl,const>
global MBEDTLS_TLS_PSK_WITH_NULL_SHA256: cint <cimport,nodecl,const>
global MBEDTLS_TLS_PSK_WITH_NULL_SHA384: cint <cimport,nodecl,const>
global MBEDTLS_TLS_DHE_PSK_WITH_AES_128_CBC_SHA256: cint <cimport,nodecl,const>
global MBEDTLS_TLS_DHE_PSK_WITH_AES_256_CBC_SHA384: cint <cimport,nodecl,const>
global MBEDTLS_TLS_DHE_PSK_WITH_NULL_SHA256: cint <cimport,nodecl,const>
global MBEDTLS_TLS_DHE_PSK_WITH_NULL_SHA384: cint <cimport,nodecl,const>
global MBEDTLS_TLS_RSA_PSK_WITH_AES_128_CBC_SHA256: cint <cimport,nodecl,const>
global MBEDTLS_TLS_RSA_PSK_WITH_AES_256_CBC_SHA384: cint <cimport,nodecl,const>
global MBEDTLS_TLS_RSA_PSK_WITH_NULL_SHA256: cint <cimport,nodecl,const>
global MBEDTLS_TLS_RSA_PSK_WITH_NULL_SHA384: cint <cimport,nodecl,const>
global MBEDTLS_TLS_RSA_WITH_CAMELLIA_128_CBC_SHA256: cint <cimport,nodecl,const>
global MBEDTLS_TLS_DHE_RSA_WITH_CAMELLIA_128_CBC_SHA256: cint <cimport,nodecl,const>
global MBEDTLS_TLS_RSA_WITH_CAMELLIA_256_CBC_SHA256: cint <cimport,nodecl,const>
global MBEDTLS_TLS_DHE_RSA_WITH_CAMELLIA_256_CBC_SHA256: cint <cimport,nodecl,const>
global MBEDTLS_TLS_ECDH_ECDSA_WITH_NULL_SHA: cint <cimport,nodecl,const>
global MBEDTLS_TLS_ECDH_ECDSA_WITH_RC4_128_SHA: cint <cimport,nodecl,const>
global MBEDTLS_TLS_ECDH_ECDSA_WITH_3DES_EDE_CBC_SHA: cint <cimport,nodecl,const>
global MBEDTLS_TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA: cint <cimport,nodecl,const>
global MBEDTLS_TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA: cint <cimport,nodecl,const>
global MBEDTLS_TLS_ECDHE_ECDSA_WITH_NULL_SHA: cint <cimport,nodecl,const>
global MBEDTLS_TLS_ECDHE_ECDSA_WITH_RC4_128_SHA: cint <cimport,nodecl,const>
global MBEDTLS_TLS_ECDHE_ECDSA_WITH_3DES_EDE_CBC_SHA: cint <cimport,nodecl,const>
global MBEDTLS_TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA: cint <cimport,nodecl,const>
global MBEDTLS_TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA: cint <cimport,nodecl,const>
global MBEDTLS_TLS_ECDH_RSA_WITH_NULL_SHA: cint <cimport,nodecl,const>
global MBEDTLS_TLS_ECDH_RSA_WITH_RC4_128_SHA: cint <cimport,nodecl,const>
global MBEDTLS_TLS_ECDH_RSA_WITH_3DES_EDE_CBC_SHA: cint <cimport,nodecl,const>
global MBEDTLS_TLS_ECDH_RSA_WITH_AES_128_CBC_SHA: cint <cimport,nodecl,const>
global MBEDTLS_TLS_ECDH_RSA_WITH_AES_256_CBC_SHA: cint <cimport,nodecl,const>
global MBEDTLS_TLS_ECDHE_RSA_WITH_NULL_SHA: cint <cimport,nodecl,const>
global MBEDTLS_TLS_ECDHE_RSA_WITH_RC4_128_SHA: cint <cimport,nodecl,const>
global MBEDTLS_TLS_ECDHE_RSA_WITH_3DES_EDE_CBC_SHA: cint <cimport,nodecl,const>
global MBEDTLS_TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA: cint <cimport,nodecl,const>
global MBEDTLS_TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA: cint <cimport,nodecl,const>
global MBEDTLS_TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256: cint <cimport,nodecl,const>
global MBEDTLS_TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384: cint <cimport,nodecl,const>
global MBEDTLS_TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA256: cint <cimport,nodecl,const>
global MBEDTLS_TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA384: cint <cimport,nodecl,const>
global MBEDTLS_TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256: cint <cimport,nodecl,const>
global MBEDTLS_TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384: cint <cimport,nodecl,const>
global MBEDTLS_TLS_ECDH_RSA_WITH_AES_128_CBC_SHA256: cint <cimport,nodecl,const>
global MBEDTLS_TLS_ECDH_RSA_WITH_AES_256_CBC_SHA384: cint <cimport,nodecl,const>
global MBEDTLS_TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256: cint <cimport,nodecl,const>
global MBEDTLS_TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384: cint <cimport,nodecl,const>
global MBEDTLS_TLS_ECDH_ECDSA_WITH_AES_128_GCM_SHA256: cint <cimport,nodecl,const>
global MBEDTLS_TLS_ECDH_ECDSA_WITH_AES_256_GCM_SHA384: cint <cimport,nodecl,const>
global MBEDTLS_TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256: cint <cimport,nodecl,const>
global MBEDTLS_TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384: cint <cimport,nodecl,const>
global MBEDTLS_TLS_ECDH_RSA_WITH_AES_128_GCM_SHA256: cint <cimport,nodecl,const>
global MBEDTLS_TLS_ECDH_RSA_WITH_AES_256_GCM_SHA384: cint <cimport,nodecl,const>
global MBEDTLS_TLS_ECDHE_PSK_WITH_RC4_128_SHA: cint <cimport,nodecl,const>
global MBEDTLS_TLS_ECDHE_PSK_WITH_3DES_EDE_CBC_SHA: cint <cimport,nodecl,const>
global MBEDTLS_TLS_ECDHE_PSK_WITH_AES_128_CBC_SHA: cint <cimport,nodecl,const>
global MBEDTLS_TLS_ECDHE_PSK_WITH_AES_256_CBC_SHA: cint <cimport,nodecl,const>
global MBEDTLS_TLS_ECDHE_PSK_WITH_AES_128_CBC_SHA256: cint <cimport,nodecl,const>
global MBEDTLS_TLS_ECDHE_PSK_WITH_AES_256_CBC_SHA384: cint <cimport,nodecl,const>
global MBEDTLS_TLS_ECDHE_PSK_WITH_NULL_SHA: cint <cimport,nodecl,const>
global MBEDTLS_TLS_ECDHE_PSK_WITH_NULL_SHA256: cint <cimport,nodecl,const>
global MBEDTLS_TLS_ECDHE_PSK_WITH_NULL_SHA384: cint <cimport,nodecl,const>
global MBEDTLS_TLS_RSA_WITH_ARIA_128_CBC_SHA256: cint <cimport,nodecl,const>
global MBEDTLS_TLS_RSA_WITH_ARIA_256_CBC_SHA384: cint <cimport,nodecl,const>
global MBEDTLS_TLS_DHE_RSA_WITH_ARIA_128_CBC_SHA256: cint <cimport,nodecl,const>
global MBEDTLS_TLS_DHE_RSA_WITH_ARIA_256_CBC_SHA384: cint <cimport,nodecl,const>
global MBEDTLS_TLS_ECDHE_ECDSA_WITH_ARIA_128_CBC_SHA256: cint <cimport,nodecl,const>
global MBEDTLS_TLS_ECDHE_ECDSA_WITH_ARIA_256_CBC_SHA384: cint <cimport,nodecl,const>
global MBEDTLS_TLS_ECDH_ECDSA_WITH_ARIA_128_CBC_SHA256: cint <cimport,nodecl,const>
global MBEDTLS_TLS_ECDH_ECDSA_WITH_ARIA_256_CBC_SHA384: cint <cimport,nodecl,const>
global MBEDTLS_TLS_ECDHE_RSA_WITH_ARIA_128_CBC_SHA256: cint <cimport,nodecl,const>
global MBEDTLS_TLS_ECDHE_RSA_WITH_ARIA_256_CBC_SHA384: cint <cimport,nodecl,const>
global MBEDTLS_TLS_ECDH_RSA_WITH_ARIA_128_CBC_SHA256: cint <cimport,nodecl,const>
global MBEDTLS_TLS_ECDH_RSA_WITH_ARIA_256_CBC_SHA384: cint <cimport,nodecl,const>
global MBEDTLS_TLS_RSA_WITH_ARIA_128_GCM_SHA256: cint <cimport,nodecl,const>
global MBEDTLS_TLS_RSA_WITH_ARIA_256_GCM_SHA384: cint <cimport,nodecl,const>
global MBEDTLS_TLS_DHE_RSA_WITH_ARIA_128_GCM_SHA256: cint <cimport,nodecl,const>
global MBEDTLS_TLS_DHE_RSA_WITH_ARIA_256_GCM_SHA384: cint <cimport,nodecl,const>
global MBEDTLS_TLS_ECDHE_ECDSA_WITH_ARIA_128_GCM_SHA256: cint <cimport,nodecl,const>
global MBEDTLS_TLS_ECDHE_ECDSA_WITH_ARIA_256_GCM_SHA384: cint <cimport,nodecl,const>
global MBEDTLS_TLS_ECDH_ECDSA_WITH_ARIA_128_GCM_SHA256: cint <cimport,nodecl,const>
global MBEDTLS_TLS_ECDH_ECDSA_WITH_ARIA_256_GCM_SHA384: cint <cimport,nodecl,const>
global MBEDTLS_TLS_ECDHE_RSA_WITH_ARIA_128_GCM_SHA256: cint <cimport,nodecl,const>
global MBEDTLS_TLS_ECDHE_RSA_WITH_ARIA_256_GCM_SHA384: cint <cimport,nodecl,const>
global MBEDTLS_TLS_ECDH_RSA_WITH_ARIA_128_GCM_SHA256: cint <cimport,nodecl,const>
global MBEDTLS_TLS_ECDH_RSA_WITH_ARIA_256_GCM_SHA384: cint <cimport,nodecl,const>
global MBEDTLS_TLS_PSK_WITH_ARIA_128_CBC_SHA256: cint <cimport,nodecl,const>
global MBEDTLS_TLS_PSK_WITH_ARIA_256_CBC_SHA384: cint <cimport,nodecl,const>
global MBEDTLS_TLS_DHE_PSK_WITH_ARIA_128_CBC_SHA256: cint <cimport,nodecl,const>
global MBEDTLS_TLS_DHE_PSK_WITH_ARIA_256_CBC_SHA384: cint <cimport,nodecl,const>
global MBEDTLS_TLS_RSA_PSK_WITH_ARIA_128_CBC_SHA256: cint <cimport,nodecl,const>
global MBEDTLS_TLS_RSA_PSK_WITH_ARIA_256_CBC_SHA384: cint <cimport,nodecl,const>
global MBEDTLS_TLS_PSK_WITH_ARIA_128_GCM_SHA256: cint <cimport,nodecl,const>
global MBEDTLS_TLS_PSK_WITH_ARIA_256_GCM_SHA384: cint <cimport,nodecl,const>
global MBEDTLS_TLS_DHE_PSK_WITH_ARIA_128_GCM_SHA256: cint <cimport,nodecl,const>
global MBEDTLS_TLS_DHE_PSK_WITH_ARIA_256_GCM_SHA384: cint <cimport,nodecl,const>
global MBEDTLS_TLS_RSA_PSK_WITH_ARIA_128_GCM_SHA256: cint <cimport,nodecl,const>
global MBEDTLS_TLS_RSA_PSK_WITH_ARIA_256_GCM_SHA384: cint <cimport,nodecl,const>
global MBEDTLS_TLS_ECDHE_PSK_WITH_ARIA_128_CBC_SHA256: cint <cimport,nodecl,const>
global MBEDTLS_TLS_ECDHE_PSK_WITH_ARIA_256_CBC_SHA384: cint <cimport,nodecl,const>
global MBEDTLS_TLS_ECDHE_ECDSA_WITH_CAMELLIA_128_CBC_SHA256: cint <cimport,nodecl,const>
global MBEDTLS_TLS_ECDHE_ECDSA_WITH_CAMELLIA_256_CBC_SHA384: cint <cimport,nodecl,const>
global MBEDTLS_TLS_ECDH_ECDSA_WITH_CAMELLIA_128_CBC_SHA256: cint <cimport,nodecl,const>
global MBEDTLS_TLS_ECDH_ECDSA_WITH_CAMELLIA_256_CBC_SHA384: cint <cimport,nodecl,const>
global MBEDTLS_TLS_ECDHE_RSA_WITH_CAMELLIA_128_CBC_SHA256: cint <cimport,nodecl,const>
global MBEDTLS_TLS_ECDHE_RSA_WITH_CAMELLIA_256_CBC_SHA384: cint <cimport,nodecl,const>
global MBEDTLS_TLS_ECDH_RSA_WITH_CAMELLIA_128_CBC_SHA256: cint <cimport,nodecl,const>
global MBEDTLS_TLS_ECDH_RSA_WITH_CAMELLIA_256_CBC_SHA384: cint <cimport,nodecl,const>
global MBEDTLS_TLS_RSA_WITH_CAMELLIA_128_GCM_SHA256: cint <cimport,nodecl,const>
global MBEDTLS_TLS_RSA_WITH_CAMELLIA_256_GCM_SHA384: cint <cimport,nodecl,const>
global MBEDTLS_TLS_DHE_RSA_WITH_CAMELLIA_128_GCM_SHA256: cint <cimport,nodecl,const>
global MBEDTLS_TLS_DHE_RSA_WITH_CAMELLIA_256_GCM_SHA384: cint <cimport,nodecl,const>
global MBEDTLS_TLS_ECDHE_ECDSA_WITH_CAMELLIA_128_GCM_SHA256: cint <cimport,nodecl,const>
global MBEDTLS_TLS_ECDHE_ECDSA_WITH_CAMELLIA_256_GCM_SHA384: cint <cimport,nodecl,const>
global MBEDTLS_TLS_ECDH_ECDSA_WITH_CAMELLIA_128_GCM_SHA256: cint <cimport,nodecl,const>
global MBEDTLS_TLS_ECDH_ECDSA_WITH_CAMELLIA_256_GCM_SHA384: cint <cimport,nodecl,const>
global MBEDTLS_TLS_ECDHE_RSA_WITH_CAMELLIA_128_GCM_SHA256: cint <cimport,nodecl,const>
global MBEDTLS_TLS_ECDHE_RSA_WITH_CAMELLIA_256_GCM_SHA384: cint <cimport,nodecl,const>
global MBEDTLS_TLS_ECDH_RSA_WITH_CAMELLIA_128_GCM_SHA256: cint <cimport,nodecl,const>
global MBEDTLS_TLS_ECDH_RSA_WITH_CAMELLIA_256_GCM_SHA384: cint <cimport,nodecl,const>
global MBEDTLS_TLS_PSK_WITH_CAMELLIA_128_GCM_SHA256: cint <cimport,nodecl,const>
global MBEDTLS_TLS_PSK_WITH_CAMELLIA_256_GCM_SHA384: cint <cimport,nodecl,const>
global MBEDTLS_TLS_DHE_PSK_WITH_CAMELLIA_128_GCM_SHA256: cint <cimport,nodecl,const>
global MBEDTLS_TLS_DHE_PSK_WITH_CAMELLIA_256_GCM_SHA384: cint <cimport,nodecl,const>
global MBEDTLS_TLS_RSA_PSK_WITH_CAMELLIA_128_GCM_SHA256: cint <cimport,nodecl,const>
global MBEDTLS_TLS_RSA_PSK_WITH_CAMELLIA_256_GCM_SHA384: cint <cimport,nodecl,const>
global MBEDTLS_TLS_PSK_WITH_CAMELLIA_128_CBC_SHA256: cint <cimport,nodecl,const>
global MBEDTLS_TLS_PSK_WITH_CAMELLIA_256_CBC_SHA384: cint <cimport,nodecl,const>
global MBEDTLS_TLS_DHE_PSK_WITH_CAMELLIA_128_CBC_SHA256: cint <cimport,nodecl,const>
global MBEDTLS_TLS_DHE_PSK_WITH_CAMELLIA_256_CBC_SHA384: cint <cimport,nodecl,const>
global MBEDTLS_TLS_RSA_PSK_WITH_CAMELLIA_128_CBC_SHA256: cint <cimport,nodecl,const>
global MBEDTLS_TLS_RSA_PSK_WITH_CAMELLIA_256_CBC_SHA384: cint <cimport,nodecl,const>
global MBEDTLS_TLS_ECDHE_PSK_WITH_CAMELLIA_128_CBC_SHA256: cint <cimport,nodecl,const>
global MBEDTLS_TLS_ECDHE_PSK_WITH_CAMELLIA_256_CBC_SHA384: cint <cimport,nodecl,const>
global MBEDTLS_TLS_RSA_WITH_AES_128_CCM: cint <cimport,nodecl,const>
global MBEDTLS_TLS_RSA_WITH_AES_256_CCM: cint <cimport,nodecl,const>
global MBEDTLS_TLS_DHE_RSA_WITH_AES_128_CCM: cint <cimport,nodecl,const>
global MBEDTLS_TLS_DHE_RSA_WITH_AES_256_CCM: cint <cimport,nodecl,const>
global MBEDTLS_TLS_RSA_WITH_AES_128_CCM_8: cint <cimport,nodecl,const>
global MBEDTLS_TLS_RSA_WITH_AES_256_CCM_8: cint <cimport,nodecl,const>
global MBEDTLS_TLS_DHE_RSA_WITH_AES_128_CCM_8: cint <cimport,nodecl,const>
global MBEDTLS_TLS_DHE_RSA_WITH_AES_256_CCM_8: cint <cimport,nodecl,const>
global MBEDTLS_TLS_PSK_WITH_AES_128_CCM: cint <cimport,nodecl,const>
global MBEDTLS_TLS_PSK_WITH_AES_256_CCM: cint <cimport,nodecl,const>
global MBEDTLS_TLS_DHE_PSK_WITH_AES_128_CCM: cint <cimport,nodecl,const>
global MBEDTLS_TLS_DHE_PSK_WITH_AES_256_CCM: cint <cimport,nodecl,const>
global MBEDTLS_TLS_PSK_WITH_AES_128_CCM_8: cint <cimport,nodecl,const>
global MBEDTLS_TLS_PSK_WITH_AES_256_CCM_8: cint <cimport,nodecl,const>
global MBEDTLS_TLS_DHE_PSK_WITH_AES_128_CCM_8: cint <cimport,nodecl,const>
global MBEDTLS_TLS_DHE_PSK_WITH_AES_256_CCM_8: cint <cimport,nodecl,const>
global MBEDTLS_TLS_ECDHE_ECDSA_WITH_AES_128_CCM: cint <cimport,nodecl,const>
global MBEDTLS_TLS_ECDHE_ECDSA_WITH_AES_256_CCM: cint <cimport,nodecl,const>
global MBEDTLS_TLS_ECDHE_ECDSA_WITH_AES_128_CCM_8: cint <cimport,nodecl,const>
global MBEDTLS_TLS_ECDHE_ECDSA_WITH_AES_256_CCM_8: cint <cimport,nodecl,const>
global MBEDTLS_TLS_ECJPAKE_WITH_AES_128_CCM_8: cint <cimport,nodecl,const>
global MBEDTLS_TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256: cint <cimport,nodecl,const>
global MBEDTLS_TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305_SHA256: cint <cimport,nodecl,const>
global MBEDTLS_TLS_DHE_RSA_WITH_CHACHA20_POLY1305_SHA256: cint <cimport,nodecl,const>
global MBEDTLS_TLS_PSK_WITH_CHACHA20_POLY1305_SHA256: cint <cimport,nodecl,const>
global MBEDTLS_TLS_ECDHE_PSK_WITH_CHACHA20_POLY1305_SHA256: cint <cimport,nodecl,const>
global MBEDTLS_TLS_DHE_PSK_WITH_CHACHA20_POLY1305_SHA256: cint <cimport,nodecl,const>
global MBEDTLS_TLS_RSA_PSK_WITH_CHACHA20_POLY1305_SHA256: cint <cimport,nodecl,const>
global MBEDTLS_CIPHERSUITE_WEAK: cint <cimport,nodecl,const>
global MBEDTLS_CIPHERSUITE_SHORT_TAG: cint <cimport,nodecl,const>
global MBEDTLS_CIPHERSUITE_NODTLS: cint <cimport,nodecl,const>
global MBEDTLS_X509_MAX_INTERMEDIATE_CA: cint <cimport,nodecl,const>
global MBEDTLS_ERR_X509_FEATURE_UNAVAILABLE: cint <cimport,nodecl,const>
global MBEDTLS_ERR_X509_UNKNOWN_OID: cint <cimport,nodecl,const>
global MBEDTLS_ERR_X509_INVALID_FORMAT: cint <cimport,nodecl,const>
global MBEDTLS_ERR_X509_INVALID_VERSION: cint <cimport,nodecl,const>
global MBEDTLS_ERR_X509_INVALID_SERIAL: cint <cimport,nodecl,const>
global MBEDTLS_ERR_X509_INVALID_ALG: cint <cimport,nodecl,const>
global MBEDTLS_ERR_X509_INVALID_NAME: cint <cimport,nodecl,const>
global MBEDTLS_ERR_X509_INVALID_DATE: cint <cimport,nodecl,const>
global MBEDTLS_ERR_X509_INVALID_SIGNATURE: cint <cimport,nodecl,const>
global MBEDTLS_ERR_X509_INVALID_EXTENSIONS: cint <cimport,nodecl,const>
global MBEDTLS_ERR_X509_UNKNOWN_VERSION: cint <cimport,nodecl,const>
global MBEDTLS_ERR_X509_UNKNOWN_SIG_ALG: cint <cimport,nodecl,const>
global MBEDTLS_ERR_X509_SIG_MISMATCH: cint <cimport,nodecl,const>
global MBEDTLS_ERR_X509_CERT_VERIFY_FAILED: cint <cimport,nodecl,const>
global MBEDTLS_ERR_X509_CERT_UNKNOWN_FORMAT: cint <cimport,nodecl,const>
global MBEDTLS_ERR_X509_BAD_INPUT_DATA: cint <cimport,nodecl,const>
global MBEDTLS_ERR_X509_ALLOC_FAILED: cint <cimport,nodecl,const>
global MBEDTLS_ERR_X509_FILE_IO_ERROR: cint <cimport,nodecl,const>
global MBEDTLS_ERR_X509_BUFFER_TOO_SMALL: cint <cimport,nodecl,const>
global MBEDTLS_ERR_X509_FATAL_ERROR: cint <cimport,nodecl,const>
global MBEDTLS_X509_BADCERT_EXPIRED: cint <cimport,nodecl,const>
global MBEDTLS_X509_BADCERT_REVOKED: cint <cimport,nodecl,const>
global MBEDTLS_X509_BADCERT_CN_MISMATCH: cint <cimport,nodecl,const>
global MBEDTLS_X509_BADCERT_NOT_TRUSTED: cint <cimport,nodecl,const>
global MBEDTLS_X509_BADCRL_NOT_TRUSTED: cint <cimport,nodecl,const>
global MBEDTLS_X509_BADCRL_EXPIRED: cint <cimport,nodecl,const>
global MBEDTLS_X509_BADCERT_MISSING: cint <cimport,nodecl,const>
global MBEDTLS_X509_BADCERT_SKIP_VERIFY: cint <cimport,nodecl,const>
global MBEDTLS_X509_BADCERT_OTHER: cint <cimport,nodecl,const>
global MBEDTLS_X509_BADCERT_FUTURE: cint <cimport,nodecl,const>
global MBEDTLS_X509_BADCRL_FUTURE: cint <cimport,nodecl,const>
global MBEDTLS_X509_BADCERT_KEY_USAGE: cint <cimport,nodecl,const>
global MBEDTLS_X509_BADCERT_EXT_KEY_USAGE: cint <cimport,nodecl,const>
global MBEDTLS_X509_BADCERT_NS_CERT_TYPE: cint <cimport,nodecl,const>
global MBEDTLS_X509_BADCERT_BAD_MD: cint <cimport,nodecl,const>
global MBEDTLS_X509_BADCERT_BAD_PK: cint <cimport,nodecl,const>
global MBEDTLS_X509_BADCERT_BAD_KEY: cint <cimport,nodecl,const>
global MBEDTLS_X509_BADCRL_BAD_MD: cint <cimport,nodecl,const>
global MBEDTLS_X509_BADCRL_BAD_PK: cint <cimport,nodecl,const>
global MBEDTLS_X509_BADCRL_BAD_KEY: cint <cimport,nodecl,const>
global MBEDTLS_X509_SAN_OTHER_NAME: cint <cimport,nodecl,const>
global MBEDTLS_X509_SAN_RFC822_NAME: cint <cimport,nodecl,const>
global MBEDTLS_X509_SAN_DNS_NAME: cint <cimport,nodecl,const>
global MBEDTLS_X509_SAN_X400_ADDRESS_NAME: cint <cimport,nodecl,const>
global MBEDTLS_X509_SAN_DIRECTORY_NAME: cint <cimport,nodecl,const>
global MBEDTLS_X509_SAN_EDI_PARTY_NAME: cint <cimport,nodecl,const>
global MBEDTLS_X509_SAN_UNIFORM_RESOURCE_IDENTIFIER: cint <cimport,nodecl,const>
global MBEDTLS_X509_SAN_IP_ADDRESS: cint <cimport,nodecl,const>
global MBEDTLS_X509_SAN_REGISTERED_ID: cint <cimport,nodecl,const>
global MBEDTLS_X509_KU_DIGITAL_SIGNATURE: cint <cimport,nodecl,const>
global MBEDTLS_X509_KU_NON_REPUDIATION: cint <cimport,nodecl,const>
global MBEDTLS_X509_KU_KEY_ENCIPHERMENT: cint <cimport,nodecl,const>
global MBEDTLS_X509_KU_DATA_ENCIPHERMENT: cint <cimport,nodecl,const>
global MBEDTLS_X509_KU_KEY_AGREEMENT: cint <cimport,nodecl,const>
global MBEDTLS_X509_KU_KEY_CERT_SIGN: cint <cimport,nodecl,const>
global MBEDTLS_X509_KU_CRL_SIGN: cint <cimport,nodecl,const>
global MBEDTLS_X509_KU_ENCIPHER_ONLY: cint <cimport,nodecl,const>
global MBEDTLS_X509_KU_DECIPHER_ONLY: cint <cimport,nodecl,const>
global MBEDTLS_X509_NS_CERT_TYPE_SSL_CLIENT: cint <cimport,nodecl,const>
global MBEDTLS_X509_NS_CERT_TYPE_SSL_SERVER: cint <cimport,nodecl,const>
global MBEDTLS_X509_NS_CERT_TYPE_EMAIL: cint <cimport,nodecl,const>
global MBEDTLS_X509_NS_CERT_TYPE_OBJECT_SIGNING: cint <cimport,nodecl,const>
global MBEDTLS_X509_NS_CERT_TYPE_RESERVED: cint <cimport,nodecl,const>
global MBEDTLS_X509_NS_CERT_TYPE_SSL_CA: cint <cimport,nodecl,const>
global MBEDTLS_X509_NS_CERT_TYPE_EMAIL_CA: cint <cimport,nodecl,const>
global MBEDTLS_X509_NS_CERT_TYPE_OBJECT_SIGNING_CA: cint <cimport,nodecl,const>
global MBEDTLS_X509_EXT_AUTHORITY_KEY_IDENTIFIER: cint <cimport,nodecl,const>
global MBEDTLS_X509_EXT_SUBJECT_KEY_IDENTIFIER: cint <cimport,nodecl,const>
global MBEDTLS_X509_EXT_KEY_USAGE: cint <cimport,nodecl,const>
global MBEDTLS_X509_EXT_CERTIFICATE_POLICIES: cint <cimport,nodecl,const>
global MBEDTLS_X509_EXT_POLICY_MAPPINGS: cint <cimport,nodecl,const>
global MBEDTLS_X509_EXT_SUBJECT_ALT_NAME: cint <cimport,nodecl,const>
global MBEDTLS_X509_EXT_ISSUER_ALT_NAME: cint <cimport,nodecl,const>
global MBEDTLS_X509_EXT_SUBJECT_DIRECTORY_ATTRS: cint <cimport,nodecl,const>
global MBEDTLS_X509_EXT_BASIC_CONSTRAINTS: cint <cimport,nodecl,const>
global MBEDTLS_X509_EXT_NAME_CONSTRAINTS: cint <cimport,nodecl,const>
global MBEDTLS_X509_EXT_POLICY_CONSTRAINTS: cint <cimport,nodecl,const>
global MBEDTLS_X509_EXT_EXTENDED_KEY_USAGE: cint <cimport,nodecl,const>
global MBEDTLS_X509_EXT_CRL_DISTRIBUTION_POINTS: cint <cimport,nodecl,const>
global MBEDTLS_X509_EXT_INIHIBIT_ANYPOLICY: cint <cimport,nodecl,const>
global MBEDTLS_X509_EXT_FRESHEST_CRL: cint <cimport,nodecl,const>
global MBEDTLS_X509_EXT_NS_CERT_TYPE: cint <cimport,nodecl,const>
global MBEDTLS_X509_FORMAT_DER: cint <cimport,nodecl,const>
global MBEDTLS_X509_FORMAT_PEM: cint <cimport,nodecl,const>
global MBEDTLS_X509_MAX_DN_NAME_SIZE: cint <cimport,nodecl,const>
global MBEDTLS_X509_SAFE_SNPRINTF: cint <cimport,nodecl,const>
global MBEDTLS_X509_CRT_VERSION_1: cint <cimport,nodecl,const>
global MBEDTLS_X509_CRT_VERSION_2: cint <cimport,nodecl,const>
global MBEDTLS_X509_CRT_VERSION_3: cint <cimport,nodecl,const>
global MBEDTLS_X509_RFC5280_MAX_SERIAL_LEN: cint <cimport,nodecl,const>
global MBEDTLS_X509_RFC5280_UTC_TIME_LEN: cint <cimport,nodecl,const>
global MBEDTLS_X509_MAX_FILE_PATH_LEN: cint <cimport,nodecl,const>
global MBEDTLS_X509_MAX_VERIFY_CHAIN_SIZE: cint <cimport,nodecl,const>
global MBEDTLS_ERR_DHM_BAD_INPUT_DATA: cint <cimport,nodecl,const>
global MBEDTLS_ERR_DHM_READ_PARAMS_FAILED: cint <cimport,nodecl,const>
global MBEDTLS_ERR_DHM_MAKE_PARAMS_FAILED: cint <cimport,nodecl,const>
global MBEDTLS_ERR_DHM_READ_PUBLIC_FAILED: cint <cimport,nodecl,const>
global MBEDTLS_ERR_DHM_MAKE_PUBLIC_FAILED: cint <cimport,nodecl,const>
global MBEDTLS_ERR_DHM_CALC_SECRET_FAILED: cint <cimport,nodecl,const>
global MBEDTLS_ERR_DHM_INVALID_FORMAT: cint <cimport,nodecl,const>
global MBEDTLS_ERR_DHM_ALLOC_FAILED: cint <cimport,nodecl,const>
global MBEDTLS_ERR_DHM_FILE_IO_ERROR: cint <cimport,nodecl,const>
global MBEDTLS_ERR_DHM_HW_ACCEL_FAILED: cint <cimport,nodecl,const>
global MBEDTLS_ERR_DHM_SET_GROUP_FAILED: cint <cimport,nodecl,const>
global MBEDTLS_DHM_RFC3526_MODP_2048_P_BIN: cint <cimport,nodecl,const>
global MBEDTLS_DHM_RFC3526_MODP_2048_G_BIN: cint <cimport,nodecl,const>
global MBEDTLS_DHM_RFC3526_MODP_3072_P_BIN: cint <cimport,nodecl,const>
global MBEDTLS_DHM_RFC3526_MODP_3072_G_BIN: cint <cimport,nodecl,const>
global MBEDTLS_DHM_RFC3526_MODP_4096_P_BIN: cint <cimport,nodecl,const>
global MBEDTLS_DHM_RFC3526_MODP_4096_G_BIN: cint <cimport,nodecl,const>
global MBEDTLS_DHM_RFC7919_FFDHE2048_P_BIN: cint <cimport,nodecl,const>
global MBEDTLS_DHM_RFC7919_FFDHE2048_G_BIN: cint <cimport,nodecl,const>
global MBEDTLS_DHM_RFC7919_FFDHE3072_P_BIN: cint <cimport,nodecl,const>
global MBEDTLS_DHM_RFC7919_FFDHE3072_G_BIN: cint <cimport,nodecl,const>
global MBEDTLS_DHM_RFC7919_FFDHE4096_P_BIN: cint <cimport,nodecl,const>
global MBEDTLS_DHM_RFC7919_FFDHE4096_G_BIN: cint <cimport,nodecl,const>
global MBEDTLS_DHM_RFC7919_FFDHE6144_P_BIN: cint <cimport,nodecl,const>
global MBEDTLS_DHM_RFC7919_FFDHE6144_G_BIN: cint <cimport,nodecl,const>
global MBEDTLS_DHM_RFC7919_FFDHE8192_P_BIN: cint <cimport,nodecl,const>
global MBEDTLS_DHM_RFC7919_FFDHE8192_G_BIN: cint <cimport,nodecl,const>
global MBEDTLS_ERR_SSL_FEATURE_UNAVAILABLE: cint <cimport,nodecl,const>
global MBEDTLS_ERR_SSL_BAD_INPUT_DATA: cint <cimport,nodecl,const>
global MBEDTLS_ERR_SSL_INVALID_MAC: cint <cimport,nodecl,const>
global MBEDTLS_ERR_SSL_INVALID_RECORD: cint <cimport,nodecl,const>
global MBEDTLS_ERR_SSL_CONN_EOF: cint <cimport,nodecl,const>
global MBEDTLS_ERR_SSL_UNKNOWN_CIPHER: cint <cimport,nodecl,const>
global MBEDTLS_ERR_SSL_NO_CIPHER_CHOSEN: cint <cimport,nodecl,const>
global MBEDTLS_ERR_SSL_NO_RNG: cint <cimport,nodecl,const>
global MBEDTLS_ERR_SSL_NO_CLIENT_CERTIFICATE: cint <cimport,nodecl,const>
global MBEDTLS_ERR_SSL_CERTIFICATE_TOO_LARGE: cint <cimport,nodecl,const>
global MBEDTLS_ERR_SSL_CERTIFICATE_REQUIRED: cint <cimport,nodecl,const>
global MBEDTLS_ERR_SSL_PRIVATE_KEY_REQUIRED: cint <cimport,nodecl,const>
global MBEDTLS_ERR_SSL_CA_CHAIN_REQUIRED: cint <cimport,nodecl,const>
global MBEDTLS_ERR_SSL_UNEXPECTED_MESSAGE: cint <cimport,nodecl,const>
global MBEDTLS_ERR_SSL_FATAL_ALERT_MESSAGE: cint <cimport,nodecl,const>
global MBEDTLS_ERR_SSL_PEER_VERIFY_FAILED: cint <cimport,nodecl,const>
global MBEDTLS_ERR_SSL_PEER_CLOSE_NOTIFY: cint <cimport,nodecl,const>
global MBEDTLS_ERR_SSL_BAD_HS_CLIENT_HELLO: cint <cimport,nodecl,const>
global MBEDTLS_ERR_SSL_BAD_HS_SERVER_HELLO: cint <cimport,nodecl,const>
global MBEDTLS_ERR_SSL_BAD_HS_CERTIFICATE: cint <cimport,nodecl,const>
global MBEDTLS_ERR_SSL_BAD_HS_CERTIFICATE_REQUEST: cint <cimport,nodecl,const>
global MBEDTLS_ERR_SSL_BAD_HS_SERVER_KEY_EXCHANGE: cint <cimport,nodecl,const>
global MBEDTLS_ERR_SSL_BAD_HS_SERVER_HELLO_DONE: cint <cimport,nodecl,const>
global MBEDTLS_ERR_SSL_BAD_HS_CLIENT_KEY_EXCHANGE: cint <cimport,nodecl,const>
global MBEDTLS_ERR_SSL_BAD_HS_CLIENT_KEY_EXCHANGE_RP: cint <cimport,nodecl,const>
global MBEDTLS_ERR_SSL_BAD_HS_CLIENT_KEY_EXCHANGE_CS: cint <cimport,nodecl,const>
global MBEDTLS_ERR_SSL_BAD_HS_CERTIFICATE_VERIFY: cint <cimport,nodecl,const>
global MBEDTLS_ERR_SSL_BAD_HS_CHANGE_CIPHER_SPEC: cint <cimport,nodecl,const>
global MBEDTLS_ERR_SSL_BAD_HS_FINISHED: cint <cimport,nodecl,const>
global MBEDTLS_ERR_SSL_ALLOC_FAILED: cint <cimport,nodecl,const>
global MBEDTLS_ERR_SSL_HW_ACCEL_FAILED: cint <cimport,nodecl,const>
global MBEDTLS_ERR_SSL_HW_ACCEL_FALLTHROUGH: cint <cimport,nodecl,const>
global MBEDTLS_ERR_SSL_COMPRESSION_FAILED: cint <cimport,nodecl,const>
global MBEDTLS_ERR_SSL_BAD_HS_PROTOCOL_VERSION: cint <cimport,nodecl,const>
global MBEDTLS_ERR_SSL_BAD_HS_NEW_SESSION_TICKET: cint <cimport,nodecl,const>
global MBEDTLS_ERR_SSL_SESSION_TICKET_EXPIRED: cint <cimport,nodecl,const>
global MBEDTLS_ERR_SSL_PK_TYPE_MISMATCH: cint <cimport,nodecl,const>
global MBEDTLS_ERR_SSL_UNKNOWN_IDENTITY: cint <cimport,nodecl,const>
global MBEDTLS_ERR_SSL_INTERNAL_ERROR: cint <cimport,nodecl,const>
global MBEDTLS_ERR_SSL_COUNTER_WRAPPING: cint <cimport,nodecl,const>
global MBEDTLS_ERR_SSL_WAITING_SERVER_HELLO_RENEGO: cint <cimport,nodecl,const>
global MBEDTLS_ERR_SSL_HELLO_VERIFY_REQUIRED: cint <cimport,nodecl,const>
global MBEDTLS_ERR_SSL_BUFFER_TOO_SMALL: cint <cimport,nodecl,const>
global MBEDTLS_ERR_SSL_NO_USABLE_CIPHERSUITE: cint <cimport,nodecl,const>
global MBEDTLS_ERR_SSL_WANT_READ: cint <cimport,nodecl,const>
global MBEDTLS_ERR_SSL_WANT_WRITE: cint <cimport,nodecl,const>
global MBEDTLS_ERR_SSL_TIMEOUT: cint <cimport,nodecl,const>
global MBEDTLS_ERR_SSL_CLIENT_RECONNECT: cint <cimport,nodecl,const>
global MBEDTLS_ERR_SSL_UNEXPECTED_RECORD: cint <cimport,nodecl,const>
global MBEDTLS_ERR_SSL_NON_FATAL: cint <cimport,nodecl,const>
global MBEDTLS_ERR_SSL_INVALID_VERIFY_HASH: cint <cimport,nodecl,const>
global MBEDTLS_ERR_SSL_CONTINUE_PROCESSING: cint <cimport,nodecl,const>
global MBEDTLS_ERR_SSL_ASYNC_IN_PROGRESS: cint <cimport,nodecl,const>
global MBEDTLS_ERR_SSL_EARLY_MESSAGE: cint <cimport,nodecl,const>
global MBEDTLS_ERR_SSL_UNEXPECTED_CID: cint <cimport,nodecl,const>
global MBEDTLS_ERR_SSL_VERSION_MISMATCH: cint <cimport,nodecl,const>
global MBEDTLS_ERR_SSL_CRYPTO_IN_PROGRESS: cint <cimport,nodecl,const>
global MBEDTLS_ERR_SSL_BAD_CONFIG: cint <cimport,nodecl,const>
global MBEDTLS_SSL_MAJOR_VERSION_3: cint <cimport,nodecl,const>
global MBEDTLS_SSL_MINOR_VERSION_0: cint <cimport,nodecl,const>
global MBEDTLS_SSL_MINOR_VERSION_1: cint <cimport,nodecl,const>
global MBEDTLS_SSL_MINOR_VERSION_2: cint <cimport,nodecl,const>
global MBEDTLS_SSL_MINOR_VERSION_3: cint <cimport,nodecl,const>
global MBEDTLS_SSL_MINOR_VERSION_4: cint <cimport,nodecl,const>
global MBEDTLS_SSL_TRANSPORT_STREAM: cint <cimport,nodecl,const>
global MBEDTLS_SSL_TRANSPORT_DATAGRAM: cint <cimport,nodecl,const>
global MBEDTLS_SSL_MAX_HOST_NAME_LEN: cint <cimport,nodecl,const>
global MBEDTLS_SSL_MAX_ALPN_NAME_LEN: cint <cimport,nodecl,const>
global MBEDTLS_SSL_MAX_ALPN_LIST_LEN: cint <cimport,nodecl,const>
global MBEDTLS_SSL_MAX_FRAG_LEN_NONE: cint <cimport,nodecl,const>
global MBEDTLS_SSL_MAX_FRAG_LEN_512: cint <cimport,nodecl,const>
global MBEDTLS_SSL_MAX_FRAG_LEN_1024: cint <cimport,nodecl,const>
global MBEDTLS_SSL_MAX_FRAG_LEN_2048: cint <cimport,nodecl,const>
global MBEDTLS_SSL_MAX_FRAG_LEN_4096: cint <cimport,nodecl,const>
global MBEDTLS_SSL_MAX_FRAG_LEN_INVALID: cint <cimport,nodecl,const>
global MBEDTLS_SSL_IS_CLIENT: cint <cimport,nodecl,const>
global MBEDTLS_SSL_IS_SERVER: cint <cimport,nodecl,const>
global MBEDTLS_SSL_IS_NOT_FALLBACK: cint <cimport,nodecl,const>
global MBEDTLS_SSL_IS_FALLBACK: cint <cimport,nodecl,const>
global MBEDTLS_SSL_EXTENDED_MS_DISABLED: cint <cimport,nodecl,const>
global MBEDTLS_SSL_EXTENDED_MS_ENABLED: cint <cimport,nodecl,const>
global MBEDTLS_SSL_CID_DISABLED: cint <cimport,nodecl,const>
global MBEDTLS_SSL_CID_ENABLED: cint <cimport,nodecl,const>
global MBEDTLS_SSL_ETM_DISABLED: cint <cimport,nodecl,const>
global MBEDTLS_SSL_ETM_ENABLED: cint <cimport,nodecl,const>
global MBEDTLS_SSL_COMPRESS_NULL: cint <cimport,nodecl,const>
global MBEDTLS_SSL_COMPRESS_DEFLATE: cint <cimport,nodecl,const>
global MBEDTLS_SSL_VERIFY_NONE: cint <cimport,nodecl,const>
global MBEDTLS_SSL_VERIFY_OPTIONAL: cint <cimport,nodecl,const>
global MBEDTLS_SSL_VERIFY_REQUIRED: cint <cimport,nodecl,const>
global MBEDTLS_SSL_VERIFY_UNSET: cint <cimport,nodecl,const>
global MBEDTLS_SSL_LEGACY_RENEGOTIATION: cint <cimport,nodecl,const>
global MBEDTLS_SSL_SECURE_RENEGOTIATION: cint <cimport,nodecl,const>
global MBEDTLS_SSL_RENEGOTIATION_DISABLED: cint <cimport,nodecl,const>
global MBEDTLS_SSL_RENEGOTIATION_ENABLED: cint <cimport,nodecl,const>
global MBEDTLS_SSL_ANTI_REPLAY_DISABLED: cint <cimport,nodecl,const>
global MBEDTLS_SSL_ANTI_REPLAY_ENABLED: cint <cimport,nodecl,const>
global MBEDTLS_SSL_RENEGOTIATION_NOT_ENFORCED: cint <cimport,nodecl,const>
global MBEDTLS_SSL_RENEGO_MAX_RECORDS_DEFAULT: cint <cimport,nodecl,const>
global MBEDTLS_SSL_LEGACY_NO_RENEGOTIATION: cint <cimport,nodecl,const>
global MBEDTLS_SSL_LEGACY_ALLOW_RENEGOTIATION: cint <cimport,nodecl,const>
global MBEDTLS_SSL_LEGACY_BREAK_HANDSHAKE: cint <cimport,nodecl,const>
global MBEDTLS_SSL_TRUNC_HMAC_DISABLED: cint <cimport,nodecl,const>
global MBEDTLS_SSL_TRUNC_HMAC_ENABLED: cint <cimport,nodecl,const>
global MBEDTLS_SSL_TRUNCATED_HMAC_LEN: cint <cimport,nodecl,const>
global MBEDTLS_SSL_SESSION_TICKETS_DISABLED: cint <cimport,nodecl,const>
global MBEDTLS_SSL_SESSION_TICKETS_ENABLED: cint <cimport,nodecl,const>
global MBEDTLS_SSL_CBC_RECORD_SPLITTING_DISABLED: cint <cimport,nodecl,const>
global MBEDTLS_SSL_CBC_RECORD_SPLITTING_ENABLED: cint <cimport,nodecl,const>
global MBEDTLS_SSL_ARC4_ENABLED: cint <cimport,nodecl,const>
global MBEDTLS_SSL_ARC4_DISABLED: cint <cimport,nodecl,const>
global MBEDTLS_SSL_PRESET_DEFAULT: cint <cimport,nodecl,const>
global MBEDTLS_SSL_PRESET_SUITEB: cint <cimport,nodecl,const>
global MBEDTLS_SSL_CERT_REQ_CA_LIST_ENABLED: cint <cimport,nodecl,const>
global MBEDTLS_SSL_CERT_REQ_CA_LIST_DISABLED: cint <cimport,nodecl,const>
global MBEDTLS_SSL_DTLS_SRTP_MKI_UNSUPPORTED: cint <cimport,nodecl,const>
global MBEDTLS_SSL_DTLS_SRTP_MKI_SUPPORTED: cint <cimport,nodecl,const>
global MBEDTLS_SSL_DTLS_TIMEOUT_DFL_MIN: cint <cimport,nodecl,const>
global MBEDTLS_SSL_DTLS_TIMEOUT_DFL_MAX: cint <cimport,nodecl,const>
global MBEDTLS_SSL_DEFAULT_TICKET_LIFETIME: cint <cimport,nodecl,const>
global MBEDTLS_SSL_MAX_CONTENT_LEN: cint <cimport,nodecl,const>
global MBEDTLS_SSL_IN_CONTENT_LEN: cint <cimport,nodecl,const>
global MBEDTLS_SSL_OUT_CONTENT_LEN: cint <cimport,nodecl,const>
global MBEDTLS_SSL_DTLS_MAX_BUFFERING: cint <cimport,nodecl,const>
global MBEDTLS_SSL_CID_IN_LEN_MAX: cint <cimport,nodecl,const>
global MBEDTLS_SSL_CID_OUT_LEN_MAX: cint <cimport,nodecl,const>
global MBEDTLS_SSL_CID_PADDING_GRANULARITY: cint <cimport,nodecl,const>
global MBEDTLS_SSL_TLS1_3_PADDING_GRANULARITY: cint <cimport,nodecl,const>
global MBEDTLS_SSL_VERIFY_DATA_MAX_LEN: cint <cimport,nodecl,const>
global MBEDTLS_SSL_EMPTY_RENEGOTIATION_INFO: cint <cimport,nodecl,const>
global MBEDTLS_SSL_FALLBACK_SCSV_VALUE: cint <cimport,nodecl,const>
global MBEDTLS_SSL_HASH_NONE: cint <cimport,nodecl,const>
global MBEDTLS_SSL_HASH_MD5: cint <cimport,nodecl,const>
global MBEDTLS_SSL_HASH_SHA1: cint <cimport,nodecl,const>
global MBEDTLS_SSL_HASH_SHA224: cint <cimport,nodecl,const>
global MBEDTLS_SSL_HASH_SHA256: cint <cimport,nodecl,const>
global MBEDTLS_SSL_HASH_SHA384: cint <cimport,nodecl,const>
global MBEDTLS_SSL_HASH_SHA512: cint <cimport,nodecl,const>
global MBEDTLS_SSL_SIG_ANON: cint <cimport,nodecl,const>
global MBEDTLS_SSL_SIG_RSA: cint <cimport,nodecl,const>
global MBEDTLS_SSL_SIG_ECDSA: cint <cimport,nodecl,const>
global MBEDTLS_SSL_CERT_TYPE_RSA_SIGN: cint <cimport,nodecl,const>
global MBEDTLS_SSL_CERT_TYPE_ECDSA_SIGN: cint <cimport,nodecl,const>
global MBEDTLS_SSL_MSG_CHANGE_CIPHER_SPEC: cint <cimport,nodecl,const>
global MBEDTLS_SSL_MSG_ALERT: cint <cimport,nodecl,const>
global MBEDTLS_SSL_MSG_HANDSHAKE: cint <cimport,nodecl,const>
global MBEDTLS_SSL_MSG_APPLICATION_DATA: cint <cimport,nodecl,const>
global MBEDTLS_SSL_MSG_CID: cint <cimport,nodecl,const>
global MBEDTLS_SSL_ALERT_LEVEL_WARNING: cint <cimport,nodecl,const>
global MBEDTLS_SSL_ALERT_LEVEL_FATAL: cint <cimport,nodecl,const>
global MBEDTLS_SSL_ALERT_MSG_CLOSE_NOTIFY: cint <cimport,nodecl,const>
global MBEDTLS_SSL_ALERT_MSG_UNEXPECTED_MESSAGE: cint <cimport,nodecl,const>
global MBEDTLS_SSL_ALERT_MSG_BAD_RECORD_MAC: cint <cimport,nodecl,const>
global MBEDTLS_SSL_ALERT_MSG_DECRYPTION_FAILED: cint <cimport,nodecl,const>
global MBEDTLS_SSL_ALERT_MSG_RECORD_OVERFLOW: cint <cimport,nodecl,const>
global MBEDTLS_SSL_ALERT_MSG_DECOMPRESSION_FAILURE: cint <cimport,nodecl,const>
global MBEDTLS_SSL_ALERT_MSG_HANDSHAKE_FAILURE: cint <cimport,nodecl,const>
global MBEDTLS_SSL_ALERT_MSG_NO_CERT: cint <cimport,nodecl,const>
global MBEDTLS_SSL_ALERT_MSG_BAD_CERT: cint <cimport,nodecl,const>
global MBEDTLS_SSL_ALERT_MSG_UNSUPPORTED_CERT: cint <cimport,nodecl,const>
global MBEDTLS_SSL_ALERT_MSG_CERT_REVOKED: cint <cimport,nodecl,const>
global MBEDTLS_SSL_ALERT_MSG_CERT_EXPIRED: cint <cimport,nodecl,const>
global MBEDTLS_SSL_ALERT_MSG_CERT_UNKNOWN: cint <cimport,nodecl,const>
global MBEDTLS_SSL_ALERT_MSG_ILLEGAL_PARAMETER: cint <cimport,nodecl,const>
global MBEDTLS_SSL_ALERT_MSG_UNKNOWN_CA: cint <cimport,nodecl,const>
global MBEDTLS_SSL_ALERT_MSG_ACCESS_DENIED: cint <cimport,nodecl,const>
global MBEDTLS_SSL_ALERT_MSG_DECODE_ERROR: cint <cimport,nodecl,const>
global MBEDTLS_SSL_ALERT_MSG_DECRYPT_ERROR: cint <cimport,nodecl,const>
global MBEDTLS_SSL_ALERT_MSG_EXPORT_RESTRICTION: cint <cimport,nodecl,const>
global MBEDTLS_SSL_ALERT_MSG_PROTOCOL_VERSION: cint <cimport,nodecl,const>
global MBEDTLS_SSL_ALERT_MSG_INSUFFICIENT_SECURITY: cint <cimport,nodecl,const>
global MBEDTLS_SSL_ALERT_MSG_INTERNAL_ERROR: cint <cimport,nodecl,const>
global MBEDTLS_SSL_ALERT_MSG_INAPROPRIATE_FALLBACK: cint <cimport,nodecl,const>
global MBEDTLS_SSL_ALERT_MSG_USER_CANCELED: cint <cimport,nodecl,const>
global MBEDTLS_SSL_ALERT_MSG_NO_RENEGOTIATION: cint <cimport,nodecl,const>
global MBEDTLS_SSL_ALERT_MSG_UNSUPPORTED_EXT: cint <cimport,nodecl,const>
global MBEDTLS_SSL_ALERT_MSG_UNRECOGNIZED_NAME: cint <cimport,nodecl,const>
global MBEDTLS_SSL_ALERT_MSG_UNKNOWN_PSK_IDENTITY: cint <cimport,nodecl,const>
global MBEDTLS_SSL_ALERT_MSG_NO_APPLICATION_PROTOCOL: cint <cimport,nodecl,const>
global MBEDTLS_SSL_HS_HELLO_REQUEST: cint <cimport,nodecl,const>
global MBEDTLS_SSL_HS_CLIENT_HELLO: cint <cimport,nodecl,const>
global MBEDTLS_SSL_HS_SERVER_HELLO: cint <cimport,nodecl,const>
global MBEDTLS_SSL_HS_HELLO_VERIFY_REQUEST: cint <cimport,nodecl,const>
global MBEDTLS_SSL_HS_NEW_SESSION_TICKET: cint <cimport,nodecl,const>
global MBEDTLS_SSL_HS_CERTIFICATE: cint <cimport,nodecl,const>
global MBEDTLS_SSL_HS_SERVER_KEY_EXCHANGE: cint <cimport,nodecl,const>
global MBEDTLS_SSL_HS_CERTIFICATE_REQUEST: cint <cimport,nodecl,const>
global MBEDTLS_SSL_HS_SERVER_HELLO_DONE: cint <cimport,nodecl,const>
global MBEDTLS_SSL_HS_CERTIFICATE_VERIFY: cint <cimport,nodecl,const>
global MBEDTLS_SSL_HS_CLIENT_KEY_EXCHANGE: cint <cimport,nodecl,const>
global MBEDTLS_SSL_HS_FINISHED: cint <cimport,nodecl,const>
global MBEDTLS_TLS_EXT_SERVERNAME: cint <cimport,nodecl,const>
global MBEDTLS_TLS_EXT_SERVERNAME_HOSTNAME: cint <cimport,nodecl,const>
global MBEDTLS_TLS_EXT_MAX_FRAGMENT_LENGTH: cint <cimport,nodecl,const>
global MBEDTLS_TLS_EXT_TRUNCATED_HMAC: cint <cimport,nodecl,const>
global MBEDTLS_TLS_EXT_SUPPORTED_ELLIPTIC_CURVES: cint <cimport,nodecl,const>
global MBEDTLS_TLS_EXT_SUPPORTED_POINT_FORMATS: cint <cimport,nodecl,const>
global MBEDTLS_TLS_EXT_SIG_ALG: cint <cimport,nodecl,const>
global MBEDTLS_TLS_EXT_USE_SRTP: cint <cimport,nodecl,const>
global MBEDTLS_TLS_EXT_ALPN: cint <cimport,nodecl,const>
global MBEDTLS_TLS_EXT_ENCRYPT_THEN_MAC: cint <cimport,nodecl,const>
global MBEDTLS_TLS_EXT_EXTENDED_MASTER_SECRET: cint <cimport,nodecl,const>
global MBEDTLS_TLS_EXT_SESSION_TICKET: cint <cimport,nodecl,const>
global MBEDTLS_TLS_EXT_CID: cint <cimport,nodecl,const>
global MBEDTLS_TLS_EXT_ECJPAKE_KKPP: cint <cimport,nodecl,const>
global MBEDTLS_TLS_EXT_RENEGOTIATION_INFO: cint <cimport,nodecl,const>
global MBEDTLS_PSK_MAX_LEN: cint <cimport,nodecl,const>
global MBEDTLS_PREMASTER_SIZE: cint <cimport,nodecl,const>
global MBEDTLS_PRINTF_SIZET: string <cimport,nodecl,const>
global MBEDTLS_PRINTF_LONGLONG: string <cimport,nodecl,const>
global MBEDTLS_DES_ENCRYPT: cint <cimport,nodecl,const>
global MBEDTLS_DES_DECRYPT: cint <cimport,nodecl,const>
global MBEDTLS_ERR_DES_INVALID_INPUT_LENGTH: cint <cimport,nodecl,const>
global MBEDTLS_ERR_DES_HW_ACCEL_FAILED: cint <cimport,nodecl,const>
global MBEDTLS_DES_KEY_SIZE: cint <cimport,nodecl,const>
global MBEDTLS_ERR_SHA512_HW_ACCEL_FAILED: cint <cimport,nodecl,const>
global MBEDTLS_ERR_SHA512_BAD_INPUT_DATA: cint <cimport,nodecl,const>
global MBEDTLS_ERR_ENTROPY_SOURCE_FAILED: cint <cimport,nodecl,const>
global MBEDTLS_ERR_ENTROPY_MAX_SOURCES: cint <cimport,nodecl,const>
global MBEDTLS_ERR_ENTROPY_NO_SOURCES_DEFINED: cint <cimport,nodecl,const>
global MBEDTLS_ERR_ENTROPY_NO_STRONG_SOURCE: cint <cimport,nodecl,const>
global MBEDTLS_ERR_ENTROPY_FILE_IO_ERROR: cint <cimport,nodecl,const>
global MBEDTLS_ENTROPY_MAX_SOURCES: cint <cimport,nodecl,const>
global MBEDTLS_ENTROPY_MAX_GATHER: cint <cimport,nodecl,const>
global MBEDTLS_ENTROPY_BLOCK_SIZE: cint <cimport,nodecl,const>
global MBEDTLS_ENTROPY_MAX_SEED_SIZE: cint <cimport,nodecl,const>
global MBEDTLS_ENTROPY_SOURCE_MANUAL: cint <cimport,nodecl,const>
global MBEDTLS_ENTROPY_SOURCE_STRONG: cint <cimport,nodecl,const>
global MBEDTLS_ENTROPY_SOURCE_WEAK: cint <cimport,nodecl,const>
global MBEDTLS_ENTROPY_MIN_PLATFORM: cint <cimport,nodecl,const>
global MBEDTLS_ENTROPY_MIN_HAVEGE: cint <cimport,nodecl,const>
global MBEDTLS_ENTROPY_MIN_HARDCLOCK: cint <cimport,nodecl,const>
global MBEDTLS_ENTROPY_MIN_HARDWARE: cint <cimport,nodecl,const>
global MBEDTLS_ERR_ERROR_GENERIC_ERROR: cint <cimport,nodecl,const>
global MBEDTLS_ERR_ERROR_CORRUPTION_DETECTED: cint <cimport,nodecl,const>
global MBEDTLS_GCM_ENCRYPT: cint <cimport,nodecl,const>
global MBEDTLS_GCM_DECRYPT: cint <cimport,nodecl,const>
global MBEDTLS_ERR_GCM_AUTH_FAILED: cint <cimport,nodecl,const>
global MBEDTLS_ERR_GCM_HW_ACCEL_FAILED: cint <cimport,nodecl,const>
global MBEDTLS_ERR_GCM_BAD_INPUT: cint <cimport,nodecl,const>
global MBEDTLS_HAVEGE_COLLECT_SIZE: cint <cimport,nodecl,const>
global MBEDTLS_ERR_HKDF_BAD_INPUT_DATA: cint <cimport,nodecl,const>
global MBEDTLS_ERR_HMAC_DRBG_REQUEST_TOO_BIG: cint <cimport,nodecl,const>
global MBEDTLS_ERR_HMAC_DRBG_INPUT_TOO_BIG: cint <cimport,nodecl,const>
global MBEDTLS_ERR_HMAC_DRBG_FILE_IO_ERROR: cint <cimport,nodecl,const>
global MBEDTLS_ERR_HMAC_DRBG_ENTROPY_SOURCE_FAILED: cint <cimport,nodecl,const>
global MBEDTLS_HMAC_DRBG_RESEED_INTERVAL: cint <cimport,nodecl,const>
global MBEDTLS_HMAC_DRBG_MAX_INPUT: cint <cimport,nodecl,const>
global MBEDTLS_HMAC_DRBG_MAX_REQUEST: cint <cimport,nodecl,const>
global MBEDTLS_HMAC_DRBG_MAX_SEED_INPUT: cint <cimport,nodecl,const>
global MBEDTLS_HMAC_DRBG_PR_OFF: cint <cimport,nodecl,const>
global MBEDTLS_HMAC_DRBG_PR_ON: cint <cimport,nodecl,const>
global MBEDTLS_ERR_MD2_HW_ACCEL_FAILED: cint <cimport,nodecl,const>
global MBEDTLS_ERR_MD4_HW_ACCEL_FAILED: cint <cimport,nodecl,const>
global MBEDTLS_ERR_MD5_HW_ACCEL_FAILED: cint <cimport,nodecl,const>
global MBEDTLS_ERR_NET_SOCKET_FAILED: cint <cimport,nodecl,const>
global MBEDTLS_ERR_NET_CONNECT_FAILED: cint <cimport,nodecl,const>
global MBEDTLS_ERR_NET_BIND_FAILED: cint <cimport,nodecl,const>
global MBEDTLS_ERR_NET_LISTEN_FAILED: cint <cimport,nodecl,const>
global MBEDTLS_ERR_NET_ACCEPT_FAILED: cint <cimport,nodecl,const>
global MBEDTLS_ERR_NET_RECV_FAILED: cint <cimport,nodecl,const>
global MBEDTLS_ERR_NET_SEND_FAILED: cint <cimport,nodecl,const>
global MBEDTLS_ERR_NET_CONN_RESET: cint <cimport,nodecl,const>
global MBEDTLS_ERR_NET_UNKNOWN_HOST: cint <cimport,nodecl,const>
global MBEDTLS_ERR_NET_BUFFER_TOO_SMALL: cint <cimport,nodecl,const>
global MBEDTLS_ERR_NET_INVALID_CONTEXT: cint <cimport,nodecl,const>
global MBEDTLS_ERR_NET_POLL_FAILED: cint <cimport,nodecl,const>
global MBEDTLS_ERR_NET_BAD_INPUT_DATA: cint <cimport,nodecl,const>
global MBEDTLS_NET_LISTEN_BACKLOG: cint <cimport,nodecl,const>
global MBEDTLS_NET_PROTO_TCP: cint <cimport,nodecl,const>
global MBEDTLS_NET_PROTO_UDP: cint <cimport,nodecl,const>
global MBEDTLS_NET_POLL_READ: cint <cimport,nodecl,const>
global MBEDTLS_NET_POLL_WRITE: cint <cimport,nodecl,const>
global MBEDTLS_ERR_OID_NOT_FOUND: cint <cimport,nodecl,const>
global MBEDTLS_ERR_OID_BUF_TOO_SMALL: cint <cimport,nodecl,const>
global MBEDTLS_OID_X509_EXT_AUTHORITY_KEY_IDENTIFIER: cint <cimport,nodecl,const>
global MBEDTLS_OID_X509_EXT_SUBJECT_KEY_IDENTIFIER: cint <cimport,nodecl,const>
global MBEDTLS_OID_X509_EXT_KEY_USAGE: cint <cimport,nodecl,const>
global MBEDTLS_OID_X509_EXT_CERTIFICATE_POLICIES: cint <cimport,nodecl,const>
global MBEDTLS_OID_X509_EXT_POLICY_MAPPINGS: cint <cimport,nodecl,const>
global MBEDTLS_OID_X509_EXT_SUBJECT_ALT_NAME: cint <cimport,nodecl,const>
global MBEDTLS_OID_X509_EXT_ISSUER_ALT_NAME: cint <cimport,nodecl,const>
global MBEDTLS_OID_X509_EXT_SUBJECT_DIRECTORY_ATTRS: cint <cimport,nodecl,const>
global MBEDTLS_OID_X509_EXT_BASIC_CONSTRAINTS: cint <cimport,nodecl,const>
global MBEDTLS_OID_X509_EXT_NAME_CONSTRAINTS: cint <cimport,nodecl,const>
global MBEDTLS_OID_X509_EXT_POLICY_CONSTRAINTS: cint <cimport,nodecl,const>
global MBEDTLS_OID_X509_EXT_EXTENDED_KEY_USAGE: cint <cimport,nodecl,const>
global MBEDTLS_OID_X509_EXT_CRL_DISTRIBUTION_POINTS: cint <cimport,nodecl,const>
global MBEDTLS_OID_X509_EXT_INIHIBIT_ANYPOLICY: cint <cimport,nodecl,const>
global MBEDTLS_OID_X509_EXT_FRESHEST_CRL: cint <cimport,nodecl,const>
global MBEDTLS_OID_X509_EXT_NS_CERT_TYPE: cint <cimport,nodecl,const>
global MBEDTLS_OID_ISO_MEMBER_BODIES: cint <cimport,nodecl,const>
global MBEDTLS_OID_ISO_IDENTIFIED_ORG: cint <cimport,nodecl,const>
global MBEDTLS_OID_ISO_CCITT_DS: cint <cimport,nodecl,const>
global MBEDTLS_OID_ISO_ITU_COUNTRY: cint <cimport,nodecl,const>
global MBEDTLS_OID_COUNTRY_US: cint <cimport,nodecl,const>
global MBEDTLS_OID_ORG_RSA_DATA_SECURITY: cint <cimport,nodecl,const>
global MBEDTLS_OID_RSA_COMPANY: cint <cimport,nodecl,const>
global MBEDTLS_OID_ORG_ANSI_X9_62: cint <cimport,nodecl,const>
global MBEDTLS_OID_ANSI_X9_62: cint <cimport,nodecl,const>
global MBEDTLS_OID_ORG_DOD: cint <cimport,nodecl,const>
global MBEDTLS_OID_ORG_OIW: cint <cimport,nodecl,const>
global MBEDTLS_OID_OIW_SECSIG: cint <cimport,nodecl,const>
global MBEDTLS_OID_OIW_SECSIG_ALG: cint <cimport,nodecl,const>
global MBEDTLS_OID_OIW_SECSIG_SHA1: cint <cimport,nodecl,const>
global MBEDTLS_OID_ORG_CERTICOM: cint <cimport,nodecl,const>
global MBEDTLS_OID_CERTICOM: cint <cimport,nodecl,const>
global MBEDTLS_OID_ORG_TELETRUST: cint <cimport,nodecl,const>
global MBEDTLS_OID_TELETRUST: cint <cimport,nodecl,const>
global MBEDTLS_OID_ORGANIZATION: cint <cimport,nodecl,const>
global MBEDTLS_OID_ISO_ITU_US_ORG: cint <cimport,nodecl,const>
global MBEDTLS_OID_ORG_GOV: cint <cimport,nodecl,const>
global MBEDTLS_OID_GOV: cint <cimport,nodecl,const>
global MBEDTLS_OID_ORG_NETSCAPE: cint <cimport,nodecl,const>
global MBEDTLS_OID_NETSCAPE: cint <cimport,nodecl,const>
global MBEDTLS_OID_ID_CE: cint <cimport,nodecl,const>
global MBEDTLS_OID_NIST_ALG: cint <cimport,nodecl,const>
global MBEDTLS_OID_INTERNET: cint <cimport,nodecl,const>
global MBEDTLS_OID_PKIX: cint <cimport,nodecl,const>
global MBEDTLS_OID_AT: cint <cimport,nodecl,const>
global MBEDTLS_OID_AT_CN: cint <cimport,nodecl,const>
global MBEDTLS_OID_AT_SUR_NAME: cint <cimport,nodecl,const>
global MBEDTLS_OID_AT_SERIAL_NUMBER: cint <cimport,nodecl,const>
global MBEDTLS_OID_AT_COUNTRY: cint <cimport,nodecl,const>
global MBEDTLS_OID_AT_LOCALITY: cint <cimport,nodecl,const>
global MBEDTLS_OID_AT_STATE: cint <cimport,nodecl,const>
global MBEDTLS_OID_AT_ORGANIZATION: cint <cimport,nodecl,const>
global MBEDTLS_OID_AT_ORG_UNIT: cint <cimport,nodecl,const>
global MBEDTLS_OID_AT_TITLE: cint <cimport,nodecl,const>
global MBEDTLS_OID_AT_POSTAL_ADDRESS: cint <cimport,nodecl,const>
global MBEDTLS_OID_AT_POSTAL_CODE: cint <cimport,nodecl,const>
global MBEDTLS_OID_AT_GIVEN_NAME: cint <cimport,nodecl,const>
global MBEDTLS_OID_AT_INITIALS: cint <cimport,nodecl,const>
global MBEDTLS_OID_AT_GENERATION_QUALIFIER: cint <cimport,nodecl,const>
global MBEDTLS_OID_AT_UNIQUE_IDENTIFIER: cint <cimport,nodecl,const>
global MBEDTLS_OID_AT_DN_QUALIFIER: cint <cimport,nodecl,const>
global MBEDTLS_OID_AT_PSEUDONYM: cint <cimport,nodecl,const>
global MBEDTLS_OID_DOMAIN_COMPONENT: cint <cimport,nodecl,const>
global MBEDTLS_OID_AUTHORITY_KEY_IDENTIFIER: cint <cimport,nodecl,const>
global MBEDTLS_OID_SUBJECT_KEY_IDENTIFIER: cint <cimport,nodecl,const>
global MBEDTLS_OID_KEY_USAGE: cint <cimport,nodecl,const>
global MBEDTLS_OID_CERTIFICATE_POLICIES: cint <cimport,nodecl,const>
global MBEDTLS_OID_POLICY_MAPPINGS: cint <cimport,nodecl,const>
global MBEDTLS_OID_SUBJECT_ALT_NAME: cint <cimport,nodecl,const>
global MBEDTLS_OID_ISSUER_ALT_NAME: cint <cimport,nodecl,const>
global MBEDTLS_OID_SUBJECT_DIRECTORY_ATTRS: cint <cimport,nodecl,const>
global MBEDTLS_OID_BASIC_CONSTRAINTS: cint <cimport,nodecl,const>
global MBEDTLS_OID_NAME_CONSTRAINTS: cint <cimport,nodecl,const>
global MBEDTLS_OID_POLICY_CONSTRAINTS: cint <cimport,nodecl,const>
global MBEDTLS_OID_EXTENDED_KEY_USAGE: cint <cimport,nodecl,const>
global MBEDTLS_OID_CRL_DISTRIBUTION_POINTS: cint <cimport,nodecl,const>
global MBEDTLS_OID_INIHIBIT_ANYPOLICY: cint <cimport,nodecl,const>
global MBEDTLS_OID_FRESHEST_CRL: cint <cimport,nodecl,const>
global MBEDTLS_OID_ANY_POLICY: cint <cimport,nodecl,const>
global MBEDTLS_OID_NS_CERT: cint <cimport,nodecl,const>
global MBEDTLS_OID_NS_CERT_TYPE: cint <cimport,nodecl,const>
global MBEDTLS_OID_NS_BASE_URL: cint <cimport,nodecl,const>
global MBEDTLS_OID_NS_REVOCATION_URL: cint <cimport,nodecl,const>
global MBEDTLS_OID_NS_CA_REVOCATION_URL: cint <cimport,nodecl,const>
global MBEDTLS_OID_NS_RENEWAL_URL: cint <cimport,nodecl,const>
global MBEDTLS_OID_NS_CA_POLICY_URL: cint <cimport,nodecl,const>
global MBEDTLS_OID_NS_SSL_SERVER_NAME: cint <cimport,nodecl,const>
global MBEDTLS_OID_NS_COMMENT: cint <cimport,nodecl,const>
global MBEDTLS_OID_NS_DATA_TYPE: cint <cimport,nodecl,const>
global MBEDTLS_OID_NS_CERT_SEQUENCE: cint <cimport,nodecl,const>
global MBEDTLS_OID_PRIVATE_KEY_USAGE_PERIOD: cint <cimport,nodecl,const>
global MBEDTLS_OID_CRL_NUMBER: cint <cimport,nodecl,const>
global MBEDTLS_OID_ANY_EXTENDED_KEY_USAGE: cint <cimport,nodecl,const>
global MBEDTLS_OID_KP: cint <cimport,nodecl,const>
global MBEDTLS_OID_SERVER_AUTH: cint <cimport,nodecl,const>
global MBEDTLS_OID_CLIENT_AUTH: cint <cimport,nodecl,const>
global MBEDTLS_OID_CODE_SIGNING: cint <cimport,nodecl,const>
global MBEDTLS_OID_EMAIL_PROTECTION: cint <cimport,nodecl,const>
global MBEDTLS_OID_TIME_STAMPING: cint <cimport,nodecl,const>
global MBEDTLS_OID_OCSP_SIGNING: cint <cimport,nodecl,const>
global MBEDTLS_OID_WISUN_FAN: cint <cimport,nodecl,const>
global MBEDTLS_OID_ON: cint <cimport,nodecl,const>
global MBEDTLS_OID_ON_HW_MODULE_NAME: cint <cimport,nodecl,const>
global MBEDTLS_OID_PKCS: cint <cimport,nodecl,const>
global MBEDTLS_OID_PKCS1: cint <cimport,nodecl,const>
global MBEDTLS_OID_PKCS5: cint <cimport,nodecl,const>
global MBEDTLS_OID_PKCS9: cint <cimport,nodecl,const>
global MBEDTLS_OID_PKCS12: cint <cimport,nodecl,const>
global MBEDTLS_OID_PKCS1_RSA: cint <cimport,nodecl,const>
global MBEDTLS_OID_PKCS1_MD2: cint <cimport,nodecl,const>
global MBEDTLS_OID_PKCS1_MD4: cint <cimport,nodecl,const>
global MBEDTLS_OID_PKCS1_MD5: cint <cimport,nodecl,const>
global MBEDTLS_OID_PKCS1_SHA1: cint <cimport,nodecl,const>
global MBEDTLS_OID_PKCS1_SHA224: cint <cimport,nodecl,const>
global MBEDTLS_OID_PKCS1_SHA256: cint <cimport,nodecl,const>
global MBEDTLS_OID_PKCS1_SHA384: cint <cimport,nodecl,const>
global MBEDTLS_OID_PKCS1_SHA512: cint <cimport,nodecl,const>
global MBEDTLS_OID_RSA_SHA_OBS: cint <cimport,nodecl,const>
global MBEDTLS_OID_PKCS9_EMAIL: cint <cimport,nodecl,const>
global MBEDTLS_OID_RSASSA_PSS: cint <cimport,nodecl,const>
global MBEDTLS_OID_MGF1: cint <cimport,nodecl,const>
global MBEDTLS_OID_DIGEST_ALG_MD2: cint <cimport,nodecl,const>
global MBEDTLS_OID_DIGEST_ALG_MD4: cint <cimport,nodecl,const>
global MBEDTLS_OID_DIGEST_ALG_MD5: cint <cimport,nodecl,const>
global MBEDTLS_OID_DIGEST_ALG_SHA1: cint <cimport,nodecl,const>
global MBEDTLS_OID_DIGEST_ALG_SHA224: cint <cimport,nodecl,const>
global MBEDTLS_OID_DIGEST_ALG_SHA256: cint <cimport,nodecl,const>
global MBEDTLS_OID_DIGEST_ALG_SHA384: cint <cimport,nodecl,const>
global MBEDTLS_OID_DIGEST_ALG_SHA512: cint <cimport,nodecl,const>
global MBEDTLS_OID_DIGEST_ALG_RIPEMD160: cint <cimport,nodecl,const>
global MBEDTLS_OID_HMAC_SHA1: cint <cimport,nodecl,const>
global MBEDTLS_OID_HMAC_SHA224: cint <cimport,nodecl,const>
global MBEDTLS_OID_HMAC_SHA256: cint <cimport,nodecl,const>
global MBEDTLS_OID_HMAC_SHA384: cint <cimport,nodecl,const>
global MBEDTLS_OID_HMAC_SHA512: cint <cimport,nodecl,const>
global MBEDTLS_OID_DES_CBC: cint <cimport,nodecl,const>
global MBEDTLS_OID_DES_EDE3_CBC: cint <cimport,nodecl,const>
global MBEDTLS_OID_AES: cint <cimport,nodecl,const>
global MBEDTLS_OID_AES128_KW: cint <cimport,nodecl,const>
global MBEDTLS_OID_AES128_KWP: cint <cimport,nodecl,const>
global MBEDTLS_OID_AES192_KW: cint <cimport,nodecl,const>
global MBEDTLS_OID_AES192_KWP: cint <cimport,nodecl,const>
global MBEDTLS_OID_AES256_KW: cint <cimport,nodecl,const>
global MBEDTLS_OID_AES256_KWP: cint <cimport,nodecl,const>
global MBEDTLS_OID_PKCS5_PBKDF2: cint <cimport,nodecl,const>
global MBEDTLS_OID_PKCS5_PBES2: cint <cimport,nodecl,const>
global MBEDTLS_OID_PKCS5_PBMAC1: cint <cimport,nodecl,const>
global MBEDTLS_OID_PKCS5_PBE_MD2_DES_CBC: cint <cimport,nodecl,const>
global MBEDTLS_OID_PKCS5_PBE_MD2_RC2_CBC: cint <cimport,nodecl,const>
global MBEDTLS_OID_PKCS5_PBE_MD5_DES_CBC: cint <cimport,nodecl,const>
global MBEDTLS_OID_PKCS5_PBE_MD5_RC2_CBC: cint <cimport,nodecl,const>
global MBEDTLS_OID_PKCS5_PBE_SHA1_DES_CBC: cint <cimport,nodecl,const>
global MBEDTLS_OID_PKCS5_PBE_SHA1_RC2_CBC: cint <cimport,nodecl,const>
global MBEDTLS_OID_PKCS9_CSR_EXT_REQ: cint <cimport,nodecl,const>
global MBEDTLS_OID_PKCS12_PBE: cint <cimport,nodecl,const>
global MBEDTLS_OID_PKCS12_PBE_SHA1_RC4_128: cint <cimport,nodecl,const>
global MBEDTLS_OID_PKCS12_PBE_SHA1_RC4_40: cint <cimport,nodecl,const>
global MBEDTLS_OID_PKCS12_PBE_SHA1_DES3_EDE_CBC: cint <cimport,nodecl,const>
global MBEDTLS_OID_PKCS12_PBE_SHA1_DES2_EDE_CBC: cint <cimport,nodecl,const>
global MBEDTLS_OID_PKCS12_PBE_SHA1_RC2_128_CBC: cint <cimport,nodecl,const>
global MBEDTLS_OID_PKCS12_PBE_SHA1_RC2_40_CBC: cint <cimport,nodecl,const>
global MBEDTLS_OID_EC_ALG_UNRESTRICTED: cint <cimport,nodecl,const>
global MBEDTLS_OID_EC_ALG_ECDH: cint <cimport,nodecl,const>
global MBEDTLS_OID_EC_GRP_SECP192R1: cint <cimport,nodecl,const>
global MBEDTLS_OID_EC_GRP_SECP224R1: cint <cimport,nodecl,const>
global MBEDTLS_OID_EC_GRP_SECP256R1: cint <cimport,nodecl,const>
global MBEDTLS_OID_EC_GRP_SECP384R1: cint <cimport,nodecl,const>
global MBEDTLS_OID_EC_GRP_SECP521R1: cint <cimport,nodecl,const>
global MBEDTLS_OID_EC_GRP_SECP192K1: cint <cimport,nodecl,const>
global MBEDTLS_OID_EC_GRP_SECP224K1: cint <cimport,nodecl,const>
global MBEDTLS_OID_EC_GRP_SECP256K1: cint <cimport,nodecl,const>
global MBEDTLS_OID_EC_BRAINPOOL_V1: cint <cimport,nodecl,const>
global MBEDTLS_OID_EC_GRP_BP256R1: cint <cimport,nodecl,const>
global MBEDTLS_OID_EC_GRP_BP384R1: cint <cimport,nodecl,const>
global MBEDTLS_OID_EC_GRP_BP512R1: cint <cimport,nodecl,const>
global MBEDTLS_OID_ANSI_X9_62_FIELD_TYPE: cint <cimport,nodecl,const>
global MBEDTLS_OID_ANSI_X9_62_PRIME_FIELD: cint <cimport,nodecl,const>
global MBEDTLS_OID_ANSI_X9_62_SIG: cint <cimport,nodecl,const>
global MBEDTLS_OID_ANSI_X9_62_SIG_SHA2: cint <cimport,nodecl,const>
global MBEDTLS_OID_ECDSA_SHA1: cint <cimport,nodecl,const>
global MBEDTLS_OID_ECDSA_SHA224: cint <cimport,nodecl,const>
global MBEDTLS_OID_ECDSA_SHA256: cint <cimport,nodecl,const>
global MBEDTLS_OID_ECDSA_SHA384: cint <cimport,nodecl,const>
global MBEDTLS_OID_ECDSA_SHA512: cint <cimport,nodecl,const>
global MBEDTLS_ERR_PADLOCK_DATA_MISALIGNED: cint <cimport,nodecl,const>
global MBEDTLS_ERR_PEM_NO_HEADER_FOOTER_PRESENT: cint <cimport,nodecl,const>
global MBEDTLS_ERR_PEM_INVALID_DATA: cint <cimport,nodecl,const>
global MBEDTLS_ERR_PEM_ALLOC_FAILED: cint <cimport,nodecl,const>
global MBEDTLS_ERR_PEM_INVALID_ENC_IV: cint <cimport,nodecl,const>
global MBEDTLS_ERR_PEM_UNKNOWN_ENC_ALG: cint <cimport,nodecl,const>
global MBEDTLS_ERR_PEM_PASSWORD_REQUIRED: cint <cimport,nodecl,const>
global MBEDTLS_ERR_PEM_PASSWORD_MISMATCH: cint <cimport,nodecl,const>
global MBEDTLS_ERR_PEM_FEATURE_UNAVAILABLE: cint <cimport,nodecl,const>
global MBEDTLS_ERR_PEM_BAD_INPUT_DATA: cint <cimport,nodecl,const>
global MBEDTLS_ERR_PKCS12_BAD_INPUT_DATA: cint <cimport,nodecl,const>
global MBEDTLS_ERR_PKCS12_FEATURE_UNAVAILABLE: cint <cimport,nodecl,const>
global MBEDTLS_ERR_PKCS12_PBE_INVALID_FORMAT: cint <cimport,nodecl,const>
global MBEDTLS_ERR_PKCS12_PASSWORD_MISMATCH: cint <cimport,nodecl,const>
global MBEDTLS_PKCS12_DERIVE_KEY: cint <cimport,nodecl,const>
global MBEDTLS_PKCS12_DERIVE_IV: cint <cimport,nodecl,const>
global MBEDTLS_PKCS12_DERIVE_MAC_KEY: cint <cimport,nodecl,const>
global MBEDTLS_PKCS12_PBE_DECRYPT: cint <cimport,nodecl,const>
global MBEDTLS_PKCS12_PBE_ENCRYPT: cint <cimport,nodecl,const>
global MBEDTLS_ERR_PKCS5_BAD_INPUT_DATA: cint <cimport,nodecl,const>
global MBEDTLS_ERR_PKCS5_INVALID_FORMAT: cint <cimport,nodecl,const>
global MBEDTLS_ERR_PKCS5_FEATURE_UNAVAILABLE: cint <cimport,nodecl,const>
global MBEDTLS_ERR_PKCS5_PASSWORD_MISMATCH: cint <cimport,nodecl,const>
global MBEDTLS_PKCS5_DECRYPT: cint <cimport,nodecl,const>
global MBEDTLS_PKCS5_ENCRYPT: cint <cimport,nodecl,const>
global MBEDTLS_ERR_PLATFORM_HW_ACCEL_FAILED: cint <cimport,nodecl,const>
global MBEDTLS_ERR_PLATFORM_FEATURE_UNSUPPORTED: cint <cimport,nodecl,const>
global MBEDTLS_PLATFORM_STD_SNPRINTF: cint <cimport,nodecl,const>
global MBEDTLS_PLATFORM_STD_VSNPRINTF: cint <cimport,nodecl,const>
global MBEDTLS_PLATFORM_STD_PRINTF: cint <cimport,nodecl,const>
global MBEDTLS_PLATFORM_STD_FPRINTF: cint <cimport,nodecl,const>
global MBEDTLS_PLATFORM_STD_CALLOC: cint <cimport,nodecl,const>
global MBEDTLS_PLATFORM_STD_FREE: cint <cimport,nodecl,const>
global MBEDTLS_PLATFORM_STD_EXIT: cint <cimport,nodecl,const>
global MBEDTLS_PLATFORM_STD_TIME: cint <cimport,nodecl,const>
global MBEDTLS_PLATFORM_STD_EXIT_SUCCESS: cint <cimport,nodecl,const>
global MBEDTLS_PLATFORM_STD_EXIT_FAILURE: cint <cimport,nodecl,const>
global MBEDTLS_PLATFORM_STD_NV_SEED_READ: cint <cimport,nodecl,const>
global MBEDTLS_PLATFORM_STD_NV_SEED_WRITE: cint <cimport,nodecl,const>
global MBEDTLS_PLATFORM_STD_NV_SEED_FILE: string <cimport,nodecl,const>
global MBEDTLS_EXIT_SUCCESS: cint <cimport,nodecl,const>
global MBEDTLS_EXIT_FAILURE: cint <cimport,nodecl,const>
global MBEDTLS_PSA_RANDOM_STATE: cint <cimport,nodecl,const>
global MBEDTLS_ERR_RIPEMD160_HW_ACCEL_FAILED: cint <cimport,nodecl,const>
global MBEDTLS_ERR_SHA1_HW_ACCEL_FAILED: cint <cimport,nodecl,const>
global MBEDTLS_ERR_SHA1_BAD_INPUT_DATA: cint <cimport,nodecl,const>
global MBEDTLS_ERR_SHA256_HW_ACCEL_FAILED: cint <cimport,nodecl,const>
global MBEDTLS_ERR_SHA256_BAD_INPUT_DATA: cint <cimport,nodecl,const>
global MBEDTLS_SSL_CACHE_DEFAULT_TIMEOUT: cint <cimport,nodecl,const>
global MBEDTLS_SSL_CACHE_DEFAULT_MAX_ENTRIES: cint <cimport,nodecl,const>
global MBEDTLS_SSL_COOKIE_TIMEOUT: cint <cimport,nodecl,const>
global MBEDTLS_VERSION_MAJOR: cint <cimport,nodecl,const>
global MBEDTLS_VERSION_MINOR: cint <cimport,nodecl,const>
global MBEDTLS_VERSION_PATCH: cint <cimport,nodecl,const>
global MBEDTLS_VERSION_NUMBER: cint <cimport,nodecl,const>
global MBEDTLS_VERSION_STRING: string <cimport,nodecl,const>
global MBEDTLS_VERSION_STRING_FULL: string <cimport,nodecl,const>
global MBEDTLS_XTEA_ENCRYPT: cint <cimport,nodecl,const>
global MBEDTLS_XTEA_DECRYPT: cint <cimport,nodecl,const>
global MBEDTLS_ERR_XTEA_INVALID_INPUT_LENGTH: cint <cimport,nodecl,const>
global MBEDTLS_ERR_XTEA_HW_ACCEL_FAILED: cint <cimport,nodecl,const>
