##[[
if MONGOOSE_MBEDTLS then
  cdefine 'MG_ENABLE_MBEDTLS 1'
  linklib 'mbedtls'
  linklib 'mbedcrypto'
  linklib 'mbedx509'
elseif MONGOOSE_OPENSSL then
  cdefine 'MG_ENABLE_OPENSSL 1'
  linklib 'ssl'
  linklib 'crypto'
end
cinclude 'mongoose.h'
if not MONGOOSE_NO_IMPL then
  cinclude 'mongoose.c'
end
if ccinfo.is_windows then
  linklib 'ws2_32'
end
]]
global timeval: type <cimport,nodecl,ctypedef> = @record{
  tv_sec: ctime_t,
  tv_usec: clong
}
global FILE: type <cimport,nodecl,forwarddecl> = @record{}
global mg_str: type <cimport,nodecl,ctypedef> = @record{
  ptr: cstring,
  len: csize
}
global function mg_str_s(s: cstring): mg_str <cimport,nodecl> end
global function mg_str_n(s: cstring, n: csize): mg_str <cimport,nodecl> end
global function mg_lower(s: cstring): cint <cimport,nodecl> end
global function mg_ncasecmp(s1: cstring, s2: cstring, len: csize): cint <cimport,nodecl> end
global function mg_casecmp(s1: cstring, s2: cstring): cint <cimport,nodecl> end
global function mg_vcmp(s1: *mg_str, s2: cstring): cint <cimport,nodecl> end
global function mg_vcasecmp(str1: *mg_str, str2: cstring): cint <cimport,nodecl> end
global function mg_strcmp(str1: mg_str, str2: mg_str): cint <cimport,nodecl> end
global function mg_strstrip(s: mg_str): mg_str <cimport,nodecl> end
global function mg_strdup(s: mg_str): mg_str <cimport,nodecl> end
global function mg_strstr(haystack: mg_str, needle: mg_str): cstring <cimport,nodecl> end
global function mg_log_prefix(ll: cint, file: cstring, line: cint, fname: cstring): boolean <cimport,nodecl> end
global function mg_log(fmt: cstring, ...: cvarargs): void <cimport,nodecl> end
global function mg_log_set(spec: cstring): void <cimport,nodecl> end
global function mg_log_set_callback(fn: function(pointer, csize, pointer): void, param: pointer): void <cimport,nodecl> end
global mg_timer: type <cimport,nodecl,forwarddecl,ctypedef> = @record{}
mg_timer = @record{
  period_ms: int64,
  expire: int64,
  flags: cuint,
  fn: function(pointer): void,
  arg: pointer,
  next: *mg_timer
}
global function mg_timer_init(a1: *mg_timer, a2: int64, a3: cuint, a4: function(pointer): void, a5: pointer): void <cimport,nodecl> end
global function mg_timer_free(a1: *mg_timer): void <cimport,nodecl> end
global function mg_timer_poll(current_time_ms: int64): void <cimport,nodecl> end
global MG_FS_READ: cint <comptime> = 1
global MG_FS_WRITE: cint <comptime> = 2
global MG_FS_DIR: cint <comptime> = 4
global mg_fs: type <cimport,nodecl,ctypedef> = @record{
  stat: function(cstring, *csize, *ctime_t): cint,
  list: function(cstring, function(cstring, pointer): void, pointer): void,
  open: function(cstring, cint): pointer,
  close: function(pointer): void,
  read: function(pointer, pointer, csize): csize,
  write: function(pointer, pointer, csize): csize,
  seek: function(pointer, csize): csize,
  rename: function(cstring, cstring): boolean,
  remove: function(cstring): boolean,
  mkd: function(cstring): boolean
}
global mg_fs_posix: mg_fs <cimport,nodecl>
global mg_fs_packed: mg_fs <cimport,nodecl>
global mg_fs_fat: mg_fs <cimport,nodecl>
global mg_fd: type <cimport,nodecl,ctypedef> = @record{
  fd: pointer,
  fs: *mg_fs
}
global function mg_fs_open(fs: *mg_fs, path: cstring, flags: cint): *mg_fd <cimport,nodecl> end
global function mg_fs_close(fd: *mg_fd): void <cimport,nodecl> end
global function mg_file_read(fs: *mg_fs, path: cstring, size: *csize): cstring <cimport,nodecl> end
global function mg_file_write(fs: *mg_fs, path: cstring, a3: pointer, a4: csize): boolean <cimport,nodecl> end
global function mg_file_printf(fs: *mg_fs, path: cstring, fmt: cstring, ...: cvarargs): boolean <cimport,nodecl> end
global function mg_random(buf: pointer, len: csize): void <cimport,nodecl> end
global function mg_globmatch(pattern: cstring, plen: csize, s: cstring, n: csize): boolean <cimport,nodecl> end
global function mg_commalist(s: *mg_str, k: *mg_str, v: *mg_str): boolean <cimport,nodecl> end
global function mg_ntohs(net: uint16): uint16 <cimport,nodecl> end
global function mg_ntohl(net: uint32): uint32 <cimport,nodecl> end
global function mg_crc32(crc: uint32, buf: cstring, len: csize): uint32 <cimport,nodecl> end
global function mg_hexdump(buf: pointer, len: csize): cstring <cimport,nodecl> end
global function mg_hex(buf: pointer, len: csize, dst: cstring): cstring <cimport,nodecl> end
global function mg_unhex(buf: cstring, len: csize, to: *cuchar): void <cimport,nodecl> end
global function mg_unhexn(s: cstring, len: csize): culong <cimport,nodecl> end
global function mg_asprintf(buf: *cstring, size: csize, fmt: cstring, ...: cvarargs): cint <cimport,nodecl> end
global function mg_vasprintf(buf: *cstring, size: csize, fmt: cstring, ap: cvalist): cint <cimport,nodecl> end
global function mg_check_ip_acl(acl: mg_str, remote_ip: uint32): cint <cimport,nodecl> end
global function mg_to64(str: mg_str): int64 <cimport,nodecl> end
global function mg_millis(): int64 <cimport,nodecl> end
global function mg_url_port(url: cstring): cushort <cimport,nodecl> end
global function mg_url_is_ssl(url: cstring): cint <cimport,nodecl> end
global function mg_url_host(url: cstring): mg_str <cimport,nodecl> end
global function mg_url_user(url: cstring): mg_str <cimport,nodecl> end
global function mg_url_pass(url: cstring): mg_str <cimport,nodecl> end
global function mg_url_uri(url: cstring): cstring <cimport,nodecl> end
global mg_iobuf: type <cimport,nodecl,ctypedef> = @record{
  buf: *cuchar,
  size: csize,
  len: csize
}
global function mg_iobuf_init(a1: *mg_iobuf, a2: csize): cint <cimport,nodecl> end
global function mg_iobuf_resize(a1: *mg_iobuf, a2: csize): cint <cimport,nodecl> end
global function mg_iobuf_free(a1: *mg_iobuf): void <cimport,nodecl> end
global function mg_iobuf_add(a1: *mg_iobuf, a2: csize, a3: pointer, a4: csize, a5: csize): csize <cimport,nodecl> end
global function mg_iobuf_del(a1: *mg_iobuf, ofs: csize, len: csize): csize <cimport,nodecl> end
global function mg_base64_update(p: cuchar, to: cstring, len: cint): cint <cimport,nodecl> end
global function mg_base64_final(to: cstring, len: cint): cint <cimport,nodecl> end
global function mg_base64_encode(p: *cuchar, n: cint, to: cstring): cint <cimport,nodecl> end
global function mg_base64_decode(src: cstring, n: cint, dst: cstring): cint <cimport,nodecl> end
global mg_md5_ctx: type <cimport,nodecl> = @record{
  buf: [4]uint32,
  bits: [2]uint32,
  In: [64]cuchar
}
global function mg_md5_init(c: *mg_md5_ctx): void <cimport,nodecl> end
global function mg_md5_update(c: *mg_md5_ctx, data: *cuchar, len: csize): void <cimport,nodecl> end
global function mg_md5_final(c: *mg_md5_ctx, a2: *cuchar): void <cimport,nodecl> end
global mg_sha1_ctx: type <cimport,nodecl> = @record{
  state: [5]uint32,
  count: [2]uint32,
  buffer: [64]cuchar
}
global function mg_sha1_init(a1: *mg_sha1_ctx): void <cimport,nodecl> end
global function mg_sha1_update(a1: *mg_sha1_ctx, data: *cuchar, len: csize): void <cimport,nodecl> end
global function mg_sha1_final(digest: *cuchar, a2: *mg_sha1_ctx): void <cimport,nodecl> end
global function mg_hmac_sha1(key: *cuchar, key_len: csize, text: *cuchar, text_len: csize, out: *cuchar): void <cimport,nodecl> end
global mg_connection: type <cimport,nodecl,forwarddecl,cincomplete,ctypedef> = @record{}
global mg_event_handler_t: type <cimport,nodecl> = @function(*mg_connection, cint, pointer, pointer): void
global function mg_call(c: *mg_connection, ev: cint, ev_data: pointer): void <cimport,nodecl> end
global function mg_error(c: *mg_connection, fmt: cstring, ...: cvarargs): void <cimport,nodecl> end
global MG_EV_ERROR: cint <comptime> = 0
global MG_EV_OPEN: cint <comptime> = 1
global MG_EV_POLL: cint <comptime> = 2
global MG_EV_RESOLVE: cint <comptime> = 3
global MG_EV_CONNECT: cint <comptime> = 4
global MG_EV_ACCEPT: cint <comptime> = 5
global MG_EV_READ: cint <comptime> = 6
global MG_EV_WRITE: cint <comptime> = 7
global MG_EV_CLOSE: cint <comptime> = 8
global MG_EV_HTTP_MSG: cint <comptime> = 9
global MG_EV_HTTP_CHUNK: cint <comptime> = 10
global MG_EV_WS_OPEN: cint <comptime> = 11
global MG_EV_WS_MSG: cint <comptime> = 12
global MG_EV_WS_CTL: cint <comptime> = 13
global MG_EV_MQTT_CMD: cint <comptime> = 14
global MG_EV_MQTT_MSG: cint <comptime> = 15
global MG_EV_MQTT_OPEN: cint <comptime> = 16
global MG_EV_SNTP_TIME: cint <comptime> = 17
global MG_EV_USER: cint <comptime> = 18
global mg_dns: type <cimport,nodecl,ctypedef> = @record{
  url: cstring,
  c: *mg_connection
}
global mg_addr: type <cimport,nodecl,ctypedef> = @record{
  port: uint16,
  ip: uint32,
  ip6: [16]uint8,
  is_ip6: boolean
}
global mg_mgr: type <cimport,nodecl,ctypedef> = @record{
  conns: *mg_connection,
  dns4: mg_dns,
  dns6: mg_dns,
  dnstimeout: cint,
  nextid: culong,
  userdata: pointer
}
mg_connection = @record{
  next: *mg_connection,
  mgr: *mg_mgr,
  peer: mg_addr,
  fd: pointer,
  id: culong,
  recv: mg_iobuf,
  send: mg_iobuf,
  fn: mg_event_handler_t,
  fn_data: pointer,
  pfn: mg_event_handler_t,
  pfn_data: pointer,
  label: [50]cchar,
  tls: pointer,
  is_listening: cuint,
  is_client: cuint,
  is_accepted: cuint,
  is_resolving: cuint,
  is_connecting: cuint,
  is_tls: cuint,
  is_tls_hs: cuint,
  is_udp: cuint,
  is_websocket: cuint,
  is_hexdumping: cuint,
  is_draining: cuint,
  is_closing: cuint,
  is_readable: cuint,
  is_writable: cuint
}
global function mg_mgr_poll(a1: *mg_mgr, ms: cint): void <cimport,nodecl> end
global function mg_mgr_init(a1: *mg_mgr): void <cimport,nodecl> end
global function mg_mgr_free(a1: *mg_mgr): void <cimport,nodecl> end
global function mg_listen(a1: *mg_mgr, url: cstring, fn: mg_event_handler_t, fn_data: pointer): *mg_connection <cimport,nodecl> end
global function mg_connect(a1: *mg_mgr, url: cstring, fn: mg_event_handler_t, fn_data: pointer): *mg_connection <cimport,nodecl> end
global function mg_connect_resolved(a1: *mg_connection): void <cimport,nodecl> end
global function mg_send(a1: *mg_connection, a2: pointer, a3: csize): boolean <cimport,nodecl> end
global function mg_printf(a1: *mg_connection, fmt: cstring, ...: cvarargs): cint <cimport,nodecl> end
global function mg_vprintf(a1: *mg_connection, fmt: cstring, ap: cvalist): cint <cimport,nodecl> end
global function mg_straddr(a1: *mg_addr, a2: cstring, a3: csize): cstring <cimport,nodecl> end
global function mg_aton(str: mg_str, addr: *mg_addr): boolean <cimport,nodecl> end
global function mg_ntoa(addr: *mg_addr, buf: cstring, len: csize): cstring <cimport,nodecl> end
global function mg_mkpipe(a1: *mg_mgr, a2: mg_event_handler_t, a3: pointer): *mg_connection <cimport,nodecl> end
global function mg_mgr_wakeup(pipe: *mg_connection, buf: pointer, len: csize): void <cimport,nodecl> end
global mg_http_header: type <cimport,nodecl,ctypedef> = @record{
  name: mg_str,
  value: mg_str
}
global mg_http_message: type <cimport,nodecl,ctypedef> = @record{
  method: mg_str,
  uri: mg_str,
  query: mg_str,
  proto: mg_str,
  headers: [40]mg_http_header,
  body: mg_str,
  head: mg_str,
  chunk: mg_str,
  message: mg_str
}
global mg_http_serve_opts: type <cimport,nodecl,ctypedef> = @record{
  root_dir: cstring,
  ssi_pattern: cstring,
  extra_headers: cstring,
  mime_types: cstring,
  fs: *mg_fs
}
global mg_http_part: type <cimport,nodecl,ctypedef> = @record{
  name: mg_str,
  filename: mg_str,
  body: mg_str
}
global function mg_http_parse(s: cstring, len: csize, a3: *mg_http_message): cint <cimport,nodecl> end
global function mg_http_get_request_len(buf: *cuchar, buf_len: csize): cint <cimport,nodecl> end
global function mg_http_printf_chunk(cnn: *mg_connection, fmt: cstring, ...: cvarargs): void <cimport,nodecl> end
global function mg_http_write_chunk(c: *mg_connection, buf: cstring, len: csize): void <cimport,nodecl> end
global function mg_http_delete_chunk(c: *mg_connection, hm: *mg_http_message): void <cimport,nodecl> end
global function mg_http_listen(a1: *mg_mgr, url: cstring, fn: mg_event_handler_t, fn_data: pointer): *mg_connection <cimport,nodecl> end
global function mg_http_connect(a1: *mg_mgr, url: cstring, fn: mg_event_handler_t, fn_data: pointer): *mg_connection <cimport,nodecl> end
global function mg_http_serve_dir(a1: *mg_connection, hm: *mg_http_message, opts: *mg_http_serve_opts): void <cimport,nodecl> end
global function mg_http_serve_file(a1: *mg_connection, hm: *mg_http_message, path: cstring, opts: *mg_http_serve_opts): void <cimport,nodecl> end
global function mg_http_reply(a1: *mg_connection, status_code: cint, headers: cstring, body_fmt: cstring, ...: cvarargs): void <cimport,nodecl> end
global function mg_http_get_header(a1: *mg_http_message, name: cstring): *mg_str <cimport,nodecl> end
global function mg_http_get_var(a1: *mg_str, name: cstring, a3: cstring, a4: csize): cint <cimport,nodecl> end
global function mg_url_decode(s: cstring, n: csize, to: cstring, to_len: csize, form: cint): cint <cimport,nodecl> end
global function mg_url_encode(s: cstring, n: csize, buf: cstring, len: csize): csize <cimport,nodecl> end
global function mg_http_creds(a1: *mg_http_message, a2: cstring, a3: csize, a4: cstring, a5: csize): void <cimport,nodecl> end
global function mg_http_match_uri(a1: *mg_http_message, glob: cstring): boolean <cimport,nodecl> end
global function mg_http_upload(a1: *mg_connection, hm: *mg_http_message, fs: *mg_fs, dir: cstring): cint <cimport,nodecl> end
global function mg_http_bauth(a1: *mg_connection, user: cstring, pass: cstring): void <cimport,nodecl> end
global function mg_http_get_header_var(s: mg_str, v: mg_str): mg_str <cimport,nodecl> end
global function mg_http_next_multipart(a1: mg_str, a2: csize, a3: *mg_http_part): csize <cimport,nodecl> end
global function mg_http_serve_ssi(c: *mg_connection, root: cstring, fullpath: cstring): void <cimport,nodecl> end
global mg_tls_opts: type <cimport,nodecl,ctypedef> = @record{
  ca: cstring,
  crl: cstring,
  cert: cstring,
  certkey: cstring,
  ciphers: cstring,
  srvname: mg_str,
  fs: *mg_fs
}
global function mg_tls_init(a1: *mg_connection, a2: *mg_tls_opts): void <cimport,nodecl> end
global function mg_tls_free(a1: *mg_connection): void <cimport,nodecl> end
global function mg_tls_send(a1: *mg_connection, buf: pointer, len: csize): clong <cimport,nodecl> end
global function mg_tls_recv(a1: *mg_connection, buf: pointer, len: csize): clong <cimport,nodecl> end
global function mg_tls_handshake(a1: *mg_connection): void <cimport,nodecl> end
global mg_ws_message: type <cimport,nodecl,ctypedef> = @record{
  data: mg_str,
  flags: uint8
}
global function mg_ws_connect(a1: *mg_mgr, url: cstring, fn: mg_event_handler_t, fn_data: pointer, fmt: cstring, ...: cvarargs): *mg_connection <cimport,nodecl> end
global function mg_ws_upgrade(a1: *mg_connection, a2: *mg_http_message, fmt: cstring, ...: cvarargs): void <cimport,nodecl> end
global function mg_ws_send(a1: *mg_connection, buf: cstring, len: csize, op: cint): csize <cimport,nodecl> end
global function mg_ws_wrap(a1: *mg_connection, len: csize, op: cint): csize <cimport,nodecl> end
global function mg_sntp_connect(mgr: *mg_mgr, url: cstring, fn: mg_event_handler_t, fn_data: pointer): *mg_connection <cimport,nodecl> end
global function mg_sntp_send(c: *mg_connection, utc: culong): void <cimport,nodecl> end
global function mg_sntp_parse(buf: *cuchar, len: csize): int64 <cimport,nodecl> end
global mg_mqtt_opts: type <cimport,nodecl,ctypedef> = @record{
  user: mg_str,
  pass: mg_str,
  client_id: mg_str,
  will_topic: mg_str,
  will_message: mg_str,
  will_qos: uint8,
  will_retain: boolean,
  clean: boolean,
  keepalive: uint16
}
global mg_mqtt_message: type <cimport,nodecl,ctypedef> = @record{
  topic: mg_str,
  data: mg_str,
  dgram: mg_str,
  id: uint16,
  cmd: uint8,
  qos: uint8,
  ack: uint8
}
global function mg_mqtt_connect(a1: *mg_mgr, url: cstring, opts: *mg_mqtt_opts, fn: mg_event_handler_t, fn_data: pointer): *mg_connection <cimport,nodecl> end
global function mg_mqtt_listen(mgr: *mg_mgr, url: cstring, fn: mg_event_handler_t, fn_data: pointer): *mg_connection <cimport,nodecl> end
global function mg_mqtt_login(c: *mg_connection, opts: *mg_mqtt_opts): void <cimport,nodecl> end
global function mg_mqtt_pub(c: *mg_connection, topic: mg_str, data: mg_str, qos: cint, retain: boolean): void <cimport,nodecl> end
global function mg_mqtt_sub(a1: *mg_connection, topic: mg_str, qos: cint): void <cimport,nodecl> end
global function mg_mqtt_parse(buf: *uint8, len: csize, m: *mg_mqtt_message): cint <cimport,nodecl> end
global function mg_mqtt_send_header(a1: *mg_connection, cmd: uint8, flags: uint8, len: uint32): void <cimport,nodecl> end
global function mg_mqtt_next_sub(msg: *mg_mqtt_message, topic: *mg_str, qos: *uint8, pos: csize): csize <cimport,nodecl> end
global function mg_mqtt_next_unsub(msg: *mg_mqtt_message, topic: *mg_str, pos: csize): csize <cimport,nodecl> end
global function mg_mqtt_ping(a1: *mg_connection): void <cimport,nodecl> end
global function mg_mqtt_pong(a1: *mg_connection): void <cimport,nodecl> end
global function mg_mqtt_disconnect(a1: *mg_connection): void <cimport,nodecl> end
global mg_dns_message: type <cimport,nodecl,ctypedef> = @record{
  txnid: uint16,
  resolved: boolean,
  addr: mg_addr,
  name: [256]cchar
}
global mg_dns_header: type <cimport,nodecl,ctypedef> = @record{
  txnid: uint16,
  flags: uint16,
  num_questions: uint16,
  num_answers: uint16,
  num_authority_prs: uint16,
  num_other_prs: uint16
}
global mg_dns_rr: type <cimport,nodecl,ctypedef> = @record{
  nlen: uint16,
  atype: uint16,
  aclass: uint16,
  alen: uint16
}
global function mg_resolve(a1: *mg_connection, url: cstring): void <cimport,nodecl> end
global function mg_resolve_cancel(a1: *mg_connection): void <cimport,nodecl> end
global function mg_dns_parse(buf: *uint8, len: csize, a3: *mg_dns_message): boolean <cimport,nodecl> end
global function mg_dns_parse_rr(buf: *uint8, len: csize, ofs: csize, is_question: boolean, a5: *mg_dns_rr): csize <cimport,nodecl> end
global function mg_dns_decode_name(a1: *uint8, a2: csize, a3: csize, a4: cstring, a5: csize): csize <cimport,nodecl> end
global MG_VERSION: cstring <comptime> = "7.5"
global MG_ARCH_CUSTOM: cint <comptime> = 0
global MG_ARCH_UNIX: cint <comptime> = 1
global MG_ARCH_WIN32: cint <comptime> = 2
global MG_ARCH_ESP32: cint <comptime> = 3
global MG_ARCH_ESP8266: cint <comptime> = 4
global MG_ARCH_FREERTOS_TCP: cint <comptime> = 5
global MG_ARCH_FREERTOS_LWIP: cint <comptime> = 6
global MG_ARCH_AZURERTOS: cint <comptime> = 7
global MG_ARCH: cint <comptime> = MG_ARCH_UNIX
global MG_INT64_FMT: cint <cimport,nodecl,const>
global MG_ENABLE_DIRLIST: cint <comptime> = 1
global MG_ENABLE_FATFS: cint <comptime> = 0
global MG_FATFS_ROOT: cstring <comptime> = "/"
global MG_FATFS_BSIZE: cint <comptime> = 64
global MG_ENABLE_SOCKET: cint <comptime> = 1
global MG_ENABLE_MBEDTLS: cint <comptime> = 0
global MG_ENABLE_OPENSSL: cint <comptime> = 0
global MG_ENABLE_CUSTOM_TLS: cint <comptime> = 0
global MG_ENABLE_SSI: cint <comptime> = 1
global MG_ENABLE_IPV6: cint <comptime> = 0
global MG_ENABLE_LOG: cint <comptime> = 1
global MG_ENABLE_MD5: cint <comptime> = 0
global MG_ENABLE_WINSOCK: cint <comptime> = 1
global MG_ENABLE_CUSTOM_RANDOM: cint <comptime> = 0
global MG_ENABLE_PACKED_FS: cint <comptime> = 0
global MG_IO_SIZE: cint <comptime> = 2048
global MG_MAX_RECV_BUF_SIZE: cint <cimport,nodecl,const>
global MG_MAX_HTTP_HEADERS: cint <comptime> = 40
global MG_HTTP_INDEX: cstring <comptime> = "index.html"
global MG_PATH_MAX: cint <cimport,nodecl,const>
global MG_SOCK_LISTEN_BACKLOG_SIZE: cint <comptime> = 128
global MG_DIRSEP: cint <cimport,nodecl,const>
global MG_ENABLE_FILE: cint <comptime> = 1
global MG_NULL_STR: cint <cimport,nodecl,const>
global MG_TIMER_REPEAT: cint <comptime> = 1
global MG_TIMER_RUN_NOW: cint <comptime> = 2
global WEBSOCKET_OP_CONTINUE: cint <comptime> = 0
global WEBSOCKET_OP_TEXT: cint <comptime> = 1
global WEBSOCKET_OP_BINARY: cint <comptime> = 2
global WEBSOCKET_OP_CLOSE: cint <comptime> = 8
global WEBSOCKET_OP_PING: cint <comptime> = 9
global WEBSOCKET_OP_PONG: cint <comptime> = 10
