global Mask: type = @culong
global Atom: type = @culong
global VisualID: type = @culong
global Time: type = @culong
global Window: type = @culong
global Drawable: type = @culong
global Font: type = @culong
global Pixmap: type = @culong
global Cursor: type = @culong
global Colormap: type = @culong
global GContext: type = @culong
global KeySym: type = @culong
global KeyCode: type = @cuchar
global XPointer: type = @cstring
global XExtData: type <cimport,nodecl> = @record{
  number: cint,
  next: *XExtData,
  free_private: function(*XExtData): cint,
  private_data: XPointer
}
global XExtCodes: type <cimport,nodecl> = @record{
  extension: cint,
  major_opcode: cint,
  first_event: cint,
  first_error: cint
}
global XPixmapFormatValues: type <cimport,nodecl> = @record{
  depth: cint,
  bits_per_pixel: cint,
  scanline_pad: cint
}
global XGCValues: type <cimport,nodecl> = @record{
  Function: cint,
  plane_mask: culong,
  foreground: culong,
  background: culong,
  line_width: cint,
  line_style: cint,
  cap_style: cint,
  join_style: cint,
  fill_style: cint,
  fill_rule: cint,
  arc_mode: cint,
  tile: Pixmap,
  stipple: Pixmap,
  ts_x_origin: cint,
  ts_y_origin: cint,
  font: Font,
  subwindow_mode: cint,
  graphics_exposures: cint,
  clip_x_origin: cint,
  clip_y_origin: cint,
  clip_mask: Pixmap,
  dash_offset: cint,
  dashes: cchar
}
global GC: type = @pointer
global Visual: type <cimport,nodecl> = @record{
  ext_data: *XExtData,
  visualid: VisualID,
  class: cint,
  red_mask: culong,
  green_mask: culong,
  blue_mask: culong,
  bits_per_rgb: cint,
  map_entries: cint
}
global Depth: type <cimport,nodecl> = @record{
  depth: cint,
  nvisuals: cint,
  visuals: *Visual
}
global Screen: type <cimport,nodecl> = @record{
  ext_data: *XExtData,
  display: pointer,
  root: Window,
  width: cint,
  height: cint,
  mwidth: cint,
  mheight: cint,
  ndepths: cint,
  depths: *Depth,
  root_depth: cint,
  root_visual: *Visual,
  default_gc: GC,
  cmap: Colormap,
  white_pixel: culong,
  black_pixel: culong,
  max_maps: cint,
  min_maps: cint,
  backing_store: cint,
  save_unders: cint,
  root_input_mask: clong
}
global ScreenFormat: type <cimport,nodecl> = @record{
  ext_data: *XExtData,
  depth: cint,
  bits_per_pixel: cint,
  scanline_pad: cint
}
global XSetWindowAttributes: type <cimport,nodecl> = @record{
  background_pixmap: Pixmap,
  background_pixel: culong,
  border_pixmap: Pixmap,
  border_pixel: culong,
  bit_gravity: cint,
  win_gravity: cint,
  backing_store: cint,
  backing_planes: culong,
  backing_pixel: culong,
  save_under: cint,
  event_mask: clong,
  do_not_propagate_mask: clong,
  override_redirect: cint,
  colormap: Colormap,
  cursor: Cursor
}
global XWindowAttributes: type <cimport,nodecl> = @record{
  x: cint,
  y: cint,
  width: cint,
  height: cint,
  border_width: cint,
  depth: cint,
  visual: *Visual,
  root: Window,
  class: cint,
  bit_gravity: cint,
  win_gravity: cint,
  backing_store: cint,
  backing_planes: culong,
  backing_pixel: culong,
  save_under: cint,
  colormap: Colormap,
  map_installed: cint,
  map_state: cint,
  all_event_masks: clong,
  your_event_mask: clong,
  do_not_propagate_mask: clong,
  override_redirect: cint,
  screen: *Screen
}
global XHostAddress: type <cimport,nodecl> = @record{
  family: cint,
  length: cint,
  address: cstring
}
global XServerInterpretedAddress: type <cimport,nodecl> = @record{
  typelength: cint,
  valuelength: cint,
  type: cstring,
  value: cstring
}
global XImage: type <cimport,nodecl,cincomplete> = @record{
  width: cint,
  height: cint,
  xoffset: cint,
  format: cint,
  data: cstring,
  byte_order: cint,
  bitmap_unit: cint,
  bitmap_bit_order: cint,
  bitmap_pad: cint,
  depth: cint,
  bytes_per_line: cint,
  bits_per_pixel: cint,
  red_mask: culong,
  green_mask: culong,
  blue_mask: culong,
  obdata: XPointer,
}
global XWindowChanges: type <cimport,nodecl> = @record{
  x: cint,
  y: cint,
  width: cint,
  height: cint,
  border_width: cint,
  sibling: Window,
  stack_mode: cint
}
global XColor: type <cimport,nodecl> = @record{
  pixel: culong,
  red: cushort,
  green: cushort,
  blue: cushort,
  flags: cchar,
  pad: cchar
}
global XSegment: type <cimport,nodecl> = @record{
  x1: cshort,
  y1: cshort,
  x2: cshort,
  y2: cshort
}
global XPoint: type <cimport,nodecl> = @record{
  x: cshort,
  y: cshort
}
global XRectangle: type <cimport,nodecl> = @record{
  x: cshort,
  y: cshort,
  width: cushort,
  height: cushort
}
global XArc: type <cimport,nodecl> = @record{
  x: cshort,
  y: cshort,
  width: cushort,
  height: cushort,
  angle1: cshort,
  angle2: cshort
}
global XKeyboardControl: type <cimport,nodecl> = @record{
  key_click_percent: cint,
  bell_percent: cint,
  bell_pitch: cint,
  bell_duration: cint,
  led: cint,
  led_mode: cint,
  key: cint,
  auto_repeat_mode: cint
}
global XKeyboardState: type <cimport,nodecl> = @record{
  key_click_percent: cint,
  bell_percent: cint,
  bell_pitch: cuint,
  bell_duration: cuint,
  led_mask: culong,
  global_auto_repeat: cint,
  auto_repeats: [32]cchar
}
global XTimeCoord: type <cimport,nodecl> = @record{
  time: Time,
  x: cshort,
  y: cshort
}
global XModifierKeymap: type <cimport,nodecl> = @record{
  max_keypermod: cint,
  modifiermap: *KeyCode
}
global Display: type <cimport,nodecl,forwarddecl> = @record{}
global XKeyEvent: type <cimport,nodecl> = @record{
  type: cint,
  serial: culong,
  send_event: cint,
  display: *Display,
  window: Window,
  root: Window,
  subwindow: Window,
  time: Time,
  x: cint,
  y: cint,
  x_root: cint,
  y_root: cint,
  state: cuint,
  keycode: cuint,
  same_screen: cint
}
global XKeyPressedEvent: type = @XKeyEvent
global XKeyReleasedEvent: type = @XKeyEvent
global XButtonEvent: type <cimport,nodecl> = @record{
  type: cint,
  serial: culong,
  send_event: cint,
  display: *Display,
  window: Window,
  root: Window,
  subwindow: Window,
  time: Time,
  x: cint,
  y: cint,
  x_root: cint,
  y_root: cint,
  state: cuint,
  button: cuint,
  same_screen: cint
}
global XButtonPressedEvent: type = @XButtonEvent
global XButtonReleasedEvent: type = @XButtonEvent
global XMotionEvent: type <cimport,nodecl> = @record{
  type: cint,
  serial: culong,
  send_event: cint,
  display: *Display,
  window: Window,
  root: Window,
  subwindow: Window,
  time: Time,
  x: cint,
  y: cint,
  x_root: cint,
  y_root: cint,
  state: cuint,
  is_hint: cchar,
  same_screen: cint
}
global XPointerMovedEvent: type = @XMotionEvent
global XCrossingEvent: type <cimport,nodecl> = @record{
  type: cint,
  serial: culong,
  send_event: cint,
  display: *Display,
  window: Window,
  root: Window,
  subwindow: Window,
  time: Time,
  x: cint,
  y: cint,
  x_root: cint,
  y_root: cint,
  mode: cint,
  detail: cint,
  same_screen: cint,
  focus: cint,
  state: cuint
}
global XEnterWindowEvent: type = @XCrossingEvent
global XLeaveWindowEvent: type = @XCrossingEvent
global XFocusChangeEvent: type <cimport,nodecl> = @record{
  type: cint,
  serial: culong,
  send_event: cint,
  display: *Display,
  window: Window,
  mode: cint,
  detail: cint
}
global XFocusInEvent: type = @XFocusChangeEvent
global XFocusOutEvent: type = @XFocusChangeEvent
global XKeymapEvent: type <cimport,nodecl> = @record{
  type: cint,
  serial: culong,
  send_event: cint,
  display: *Display,
  window: Window,
  key_vector: [32]cchar
}
global XExposeEvent: type <cimport,nodecl> = @record{
  type: cint,
  serial: culong,
  send_event: cint,
  display: *Display,
  window: Window,
  x: cint,
  y: cint,
  width: cint,
  height: cint,
  count: cint
}
global XGraphicsExposeEvent: type <cimport,nodecl> = @record{
  type: cint,
  serial: culong,
  send_event: cint,
  display: *Display,
  drawable: Drawable,
  x: cint,
  y: cint,
  width: cint,
  height: cint,
  count: cint,
  major_code: cint,
  minor_code: cint
}
global XNoExposeEvent: type <cimport,nodecl> = @record{
  type: cint,
  serial: culong,
  send_event: cint,
  display: *Display,
  drawable: Drawable,
  major_code: cint,
  minor_code: cint
}
global XVisibilityEvent: type <cimport,nodecl> = @record{
  type: cint,
  serial: culong,
  send_event: cint,
  display: *Display,
  window: Window,
  state: cint
}
global XCreateWindowEvent: type <cimport,nodecl> = @record{
  type: cint,
  serial: culong,
  send_event: cint,
  display: *Display,
  parent: Window,
  window: Window,
  x: cint,
  y: cint,
  width: cint,
  height: cint,
  border_width: cint,
  override_redirect: cint
}
global XDestroyWindowEvent: type <cimport,nodecl> = @record{
  type: cint,
  serial: culong,
  send_event: cint,
  display: *Display,
  event: Window,
  window: Window
}
global XUnmapEvent: type <cimport,nodecl> = @record{
  type: cint,
  serial: culong,
  send_event: cint,
  display: *Display,
  event: Window,
  window: Window,
  from_configure: cint
}
global XMapEvent: type <cimport,nodecl> = @record{
  type: cint,
  serial: culong,
  send_event: cint,
  display: *Display,
  event: Window,
  window: Window,
  override_redirect: cint
}
global XMapRequestEvent: type <cimport,nodecl> = @record{
  type: cint,
  serial: culong,
  send_event: cint,
  display: *Display,
  parent: Window,
  window: Window
}
global XReparentEvent: type <cimport,nodecl> = @record{
  type: cint,
  serial: culong,
  send_event: cint,
  display: *Display,
  event: Window,
  window: Window,
  parent: Window,
  x: cint,
  y: cint,
  override_redirect: cint
}
global XConfigureEvent: type <cimport,nodecl> = @record{
  type: cint,
  serial: culong,
  send_event: cint,
  display: *Display,
  event: Window,
  window: Window,
  x: cint,
  y: cint,
  width: cint,
  height: cint,
  border_width: cint,
  above: Window,
  override_redirect: cint
}
global XGravityEvent: type <cimport,nodecl> = @record{
  type: cint,
  serial: culong,
  send_event: cint,
  display: *Display,
  event: Window,
  window: Window,
  x: cint,
  y: cint
}
global XResizeRequestEvent: type <cimport,nodecl> = @record{
  type: cint,
  serial: culong,
  send_event: cint,
  display: *Display,
  window: Window,
  width: cint,
  height: cint
}
global XConfigureRequestEvent: type <cimport,nodecl> = @record{
  type: cint,
  serial: culong,
  send_event: cint,
  display: *Display,
  parent: Window,
  window: Window,
  x: cint,
  y: cint,
  width: cint,
  height: cint,
  border_width: cint,
  above: Window,
  detail: cint,
  value_mask: culong
}
global XCirculateEvent: type <cimport,nodecl> = @record{
  type: cint,
  serial: culong,
  send_event: cint,
  display: *Display,
  event: Window,
  window: Window,
  place: cint
}
global XCirculateRequestEvent: type <cimport,nodecl> = @record{
  type: cint,
  serial: culong,
  send_event: cint,
  display: *Display,
  parent: Window,
  window: Window,
  place: cint
}
global XPropertyEvent: type <cimport,nodecl> = @record{
  type: cint,
  serial: culong,
  send_event: cint,
  display: *Display,
  window: Window,
  atom: Atom,
  time: Time,
  state: cint
}
global XSelectionClearEvent: type <cimport,nodecl> = @record{
  type: cint,
  serial: culong,
  send_event: cint,
  display: *Display,
  window: Window,
  selection: Atom,
  time: Time
}
global XSelectionRequestEvent: type <cimport,nodecl> = @record{
  type: cint,
  serial: culong,
  send_event: cint,
  display: *Display,
  owner: Window,
  requestor: Window,
  selection: Atom,
  target: Atom,
  property: Atom,
  time: Time
}
global XSelectionEvent: type <cimport,nodecl> = @record{
  type: cint,
  serial: culong,
  send_event: cint,
  display: *Display,
  requestor: Window,
  selection: Atom,
  target: Atom,
  property: Atom,
  time: Time
}
global XColormapEvent: type <cimport,nodecl> = @record{
  type: cint,
  serial: culong,
  send_event: cint,
  display: *Display,
  window: Window,
  colormap: Colormap,
  new: cint,
  state: cint
}
global XClientMessageEvent: type <cimport,nodecl> = @record{
  type: cint,
  serial: culong,
  send_event: cint,
  display: *Display,
  window: Window,
  message_type: Atom,
  format: cint,
  data: union{
    b: [20]cchar,
    s: [10]cshort,
    l: [5]clong
  }
}
global XMappingEvent: type <cimport,nodecl> = @record{
  type: cint,
  serial: culong,
  send_event: cint,
  display: *Display,
  window: Window,
  request: cint,
  first_keycode: cint,
  count: cint
}
global XErrorEvent: type <cimport,nodecl> = @record{
  type: cint,
  display: *Display,
  resourceid: culong,
  serial: culong,
  error_code: cuchar,
  request_code: cuchar,
  minor_code: cuchar
}
global XAnyEvent: type <cimport,nodecl> = @record{
  type: cint,
  serial: culong,
  send_event: cint,
  display: *Display,
  window: Window
}
global XGenericEvent: type <cimport,nodecl> = @record{
  type: cint,
  serial: culong,
  send_event: cint,
  display: *Display,
  extension: cint,
  evtype: cint
}
global XGenericEventCookie: type <cimport,nodecl> = @record{
  type: cint,
  serial: culong,
  send_event: cint,
  display: *Display,
  extension: cint,
  evtype: cint,
  cookie: cuint,
  data: pointer
}
global XEvent: type <cimport,nodecl> = @union{
  type: cint,
  xany: XAnyEvent,
  xkey: XKeyEvent,
  xbutton: XButtonEvent,
  xmotion: XMotionEvent,
  xcrossing: XCrossingEvent,
  xfocus: XFocusChangeEvent,
  xexpose: XExposeEvent,
  xgraphicsexpose: XGraphicsExposeEvent,
  xnoexpose: XNoExposeEvent,
  xvisibility: XVisibilityEvent,
  xcreatewindow: XCreateWindowEvent,
  xdestroywindow: XDestroyWindowEvent,
  xunmap: XUnmapEvent,
  xmap: XMapEvent,
  xmaprequest: XMapRequestEvent,
  xreparent: XReparentEvent,
  xconfigure: XConfigureEvent,
  xgravity: XGravityEvent,
  xresizerequest: XResizeRequestEvent,
  xconfigurerequest: XConfigureRequestEvent,
  xcirculate: XCirculateEvent,
  xcirculaterequest: XCirculateRequestEvent,
  xproperty: XPropertyEvent,
  xselectionclear: XSelectionClearEvent,
  xselectionrequest: XSelectionRequestEvent,
  xselection: XSelectionEvent,
  xcolormap: XColormapEvent,
  xclient: XClientMessageEvent,
  xmapping: XMappingEvent,
  xerror: XErrorEvent,
  xkeymap: XKeymapEvent,
  xgeneric: XGenericEvent,
  xcookie: XGenericEventCookie,
  pad: [24]clong
}
global XCharStruct: type <cimport,nodecl> = @record{
  lbearing: cshort,
  rbearing: cshort,
  width: cshort,
  ascent: cshort,
  descent: cshort,
  attributes: cushort
}
global XFontProp: type <cimport,nodecl> = @record{
  name: Atom,
  card32: culong
}
global XFontStruct: type <cimport,nodecl> = @record{
  ext_data: *XExtData,
  fid: Font,
  direction: cuint,
  min_char_or_byte2: cuint,
  max_char_or_byte2: cuint,
  min_byte1: cuint,
  max_byte1: cuint,
  all_chars_exist: cint,
  default_char: cuint,
  n_properties: cint,
  properties: *XFontProp,
  min_bounds: XCharStruct,
  max_bounds: XCharStruct,
  per_char: *XCharStruct,
  ascent: cint,
  descent: cint
}
global XTextItem: type <cimport,nodecl> = @record{
  chars: cstring,
  nchars: cint,
  delta: cint,
  font: Font
}
global XChar2b: type <cimport,nodecl> = @record{
  byte1: cuchar,
  byte2: cuchar
}
global XTextItem16: type <cimport,nodecl> = @record{
  chars: *XChar2b,
  nchars: cint,
  delta: cint,
  font: Font
}
global XEDataObject: type <cimport,nodecl> = @union{
  display: *Display,
  gc: GC,
  visual: *Visual,
  screen: *Screen,
  pixmap_format: *ScreenFormat,
  font: *XFontStruct
}
global XFontSetExtents: type <cimport,nodecl> = @record{
  max_ink_extent: XRectangle,
  max_logical_extent: XRectangle
}
global XOM: type = @pointer
global XOC: type = @pointer
global XFontSet: type = @pointer
global XmbTextItem: type <cimport,nodecl> = @record{
  chars: cstring,
  nchars: cint,
  delta: cint,
  font_set: XFontSet
}
global XwcTextItem: type <cimport,nodecl> = @record{
  chars: *cwchar_t,
  nchars: cint,
  delta: cint,
  font_set: XFontSet
}
global XOMCharSetList: type <cimport,nodecl> = @record{
  charset_count: cint,
  charset_list: *cstring
}
global XOrientation: type <cimport,nodecl,using> = @enum(cint){
  XOMOrientation_LTR_TTB = 0,
  XOMOrientation_RTL_TTB = 1,
  XOMOrientation_TTB_LTR = 2,
  XOMOrientation_TTB_RTL = 3,
  XOMOrientation_Context = 4
}
global XOMOrientation: type <cimport,nodecl> = @record{
  num_orientation: cint,
  orientation: *XOrientation
}
global XOMFontInfo: type <cimport,nodecl> = @record{
  num_font: cint,
  font_struct_list: **XFontStruct,
  font_name_list: *cstring
}
global XIM: type = @pointer
global XIC: type = @pointer
global XIMProc: type <cimport,nodecl> = @function(XIM, XPointer, XPointer): void
global XICProc: type <cimport,nodecl> = @function(XIC, XPointer, XPointer): cint
global XIDProc: type <cimport,nodecl> = @function(*Display, XPointer, XPointer): void
global XIMStyles: type <cimport,nodecl> = @record{
  count_styles: cushort,
  supported_styles: *culong
}
global XVaNestedList: type = @pointer
global XIMCallback: type <cimport,nodecl> = @record{
  client_data: XPointer,
  callback: XIMProc
}
global XICCallback: type <cimport,nodecl> = @record{
  client_data: XPointer,
  callback: XICProc
}
global XIMText: type <cimport,nodecl> = @record{
  length: cushort,
  feedback: *culong,
  encoding_is_wchar: cint,
  string: union{
    multi_byte: cstring,
    wide_char: *cwchar_t
  }
}
global XIMPreeditStateNotifyCallbackStruct: type <cimport,nodecl> = @record{
  state: culong
}
global XIMStringConversionText: type <cimport,nodecl> = @record{
  length: cushort,
  feedback: *culong,
  encoding_is_wchar: cint,
  string: union{
    mbs: cstring,
    wcs: *cwchar_t
  }
}
global XIMCaretDirection: type <cimport,nodecl,using> = @enum(cint){
  XIMForwardChar = 0,
  XIMBackwardChar = 1,
  XIMForwardWord = 2,
  XIMBackwardWord = 3,
  XIMCaretUp = 4,
  XIMCaretDown = 5,
  XIMNextLine = 6,
  XIMPreviousLine = 7,
  XIMLineStart = 8,
  XIMLineEnd = 9,
  XIMAbsolutePosition = 10,
  XIMDontChange = 11
}
global XIMStringConversionCallbackStruct: type <cimport,nodecl> = @record{
  position: cushort,
  direction: XIMCaretDirection,
  operation: cushort,
  factor: cushort,
  text: *XIMStringConversionText
}
global XIMPreeditDrawCallbackStruct: type <cimport,nodecl> = @record{
  caret: cint,
  chg_first: cint,
  chg_length: cint,
  text: *XIMText
}
global XIMCaretStyle: type <cimport,nodecl,using> = @enum(cint){
  XIMIsInvisible = 0,
  XIMIsPrimary = 1,
  XIMIsSecondary = 2
}
global XIMPreeditCaretCallbackStruct: type <cimport,nodecl> = @record{
  position: cint,
  direction: XIMCaretDirection,
  style: XIMCaretStyle
}
global XIMStatusDataType: type <cimport,nodecl,using> = @enum(cint){
  XIMTextType = 0,
  XIMBitmapType = 1
}
global XIMStatusDrawCallbackStruct: type <cimport,nodecl> = @record{
  type: XIMStatusDataType,
  data: union{
    text: *XIMText,
    bitmap: Pixmap
  }
}
global XIMHotKeyTrigger: type <cimport,nodecl> = @record{
  keysym: KeySym,
  modifier: cint,
  modifier_mask: cint
}
global XIMHotKeyTriggers: type <cimport,nodecl> = @record{
  num_hot_key: cint,
  key: *XIMHotKeyTrigger
}
global XIMValuesList: type <cimport,nodecl> = @record{
  count_values: cushort,
  supported_values: *cstring
}
global function XLoadQueryFont(a1: *Display, a2: cstring): *XFontStruct <cimport,nodecl> end
global function XQueryFont(a1: *Display, a2: culong): *XFontStruct <cimport,nodecl> end
global function XGetMotionEvents(a1: *Display, a2: Window, a3: Time, a4: Time, a5: *cint): *XTimeCoord <cimport,nodecl> end
global function XDeleteModifiermapEntry(a1: *XModifierKeymap, a2: KeyCode, a3: cint): *XModifierKeymap <cimport,nodecl> end
global function XGetModifierMapping(a1: *Display): *XModifierKeymap <cimport,nodecl> end
global function XInsertModifiermapEntry(a1: *XModifierKeymap, a2: KeyCode, a3: cint): *XModifierKeymap <cimport,nodecl> end
global function XNewModifiermap(a1: cint): *XModifierKeymap <cimport,nodecl> end
global function XCreateImage(a1: *Display, a2: *Visual, a3: cuint, a4: cint, a5: cint, a6: cstring, a7: cuint, a8: cuint, a9: cint, a10: cint): *XImage <cimport,nodecl> end
global function XInitImage(a1: *XImage): cint <cimport,nodecl> end
global function XGetImage(a1: *Display, a2: Drawable, a3: cint, a4: cint, a5: cuint, a6: cuint, a7: culong, a8: cint): *XImage <cimport,nodecl> end
global function XGetSubImage(a1: *Display, a2: Drawable, a3: cint, a4: cint, a5: cuint, a6: cuint, a7: culong, a8: cint, a9: *XImage, a10: cint, a11: cint): *XImage <cimport,nodecl> end
global function XOpenDisplay(a1: cstring): *Display <cimport,nodecl> end
global function XrmInitialize(): void <cimport,nodecl> end
global function XFetchBytes(a1: *Display, a2: *cint): cstring <cimport,nodecl> end
global function XFetchBuffer(a1: *Display, a2: *cint, a3: cint): cstring <cimport,nodecl> end
global function XGetAtomName(a1: *Display, a2: Atom): cstring <cimport,nodecl> end
global function XGetAtomNames(a1: *Display, a2: *Atom, a3: cint, a4: *cstring): cint <cimport,nodecl> end
global function XGetDefault(a1: *Display, a2: cstring, a3: cstring): cstring <cimport,nodecl> end
global function XDisplayName(a1: cstring): cstring <cimport,nodecl> end
global function XKeysymToString(a1: KeySym): cstring <cimport,nodecl> end
global function XSynchronize(a1: *Display, a2: cint): function(*Display): cint <cimport,nodecl> end
global function XSetAfterFunction(a1: *Display, a2: function(*Display): cint): function(*Display): cint <cimport,nodecl> end
global function XInternAtom(a1: *Display, a2: cstring, a3: cint): Atom <cimport,nodecl> end
global function XInternAtoms(a1: *Display, a2: *cstring, a3: cint, a4: cint, a5: *Atom): cint <cimport,nodecl> end
global function XCopyColormapAndFree(a1: *Display, a2: Colormap): Colormap <cimport,nodecl> end
global function XCreateColormap(a1: *Display, a2: Window, a3: *Visual, a4: cint): Colormap <cimport,nodecl> end
global function XCreatePixmapCursor(a1: *Display, a2: Pixmap, a3: Pixmap, a4: *XColor, a5: *XColor, a6: cuint, a7: cuint): Cursor <cimport,nodecl> end
global function XCreateGlyphCursor(a1: *Display, a2: Font, a3: Font, a4: cuint, a5: cuint, a6: *XColor, a7: *XColor): Cursor <cimport,nodecl> end
global function XCreateFontCursor(a1: *Display, a2: cuint): Cursor <cimport,nodecl> end
global function XLoadFont(a1: *Display, a2: cstring): Font <cimport,nodecl> end
global function XCreateGC(a1: *Display, a2: Drawable, a3: culong, a4: *XGCValues): GC <cimport,nodecl> end
global function XGContextFromGC(a1: GC): GContext <cimport,nodecl> end
global function XFlushGC(a1: *Display, a2: GC): void <cimport,nodecl> end
global function XCreatePixmap(a1: *Display, a2: Drawable, a3: cuint, a4: cuint, a5: cuint): Pixmap <cimport,nodecl> end
global function XCreateBitmapFromData(a1: *Display, a2: Drawable, a3: cstring, a4: cuint, a5: cuint): Pixmap <cimport,nodecl> end
global function XCreatePixmapFromBitmapData(a1: *Display, a2: Drawable, a3: cstring, a4: cuint, a5: cuint, a6: culong, a7: culong, a8: cuint): Pixmap <cimport,nodecl> end
global function XCreateSimpleWindow(a1: *Display, a2: Window, a3: cint, a4: cint, a5: cuint, a6: cuint, a7: cuint, a8: culong, a9: culong): Window <cimport,nodecl> end
global function XGetSelectionOwner(a1: *Display, a2: Atom): Window <cimport,nodecl> end
global function XCreateWindow(a1: *Display, a2: Window, a3: cint, a4: cint, a5: cuint, a6: cuint, a7: cuint, a8: cint, a9: cuint, a10: *Visual, a11: culong, a12: *XSetWindowAttributes): Window <cimport,nodecl> end
global function XListInstalledColormaps(a1: *Display, a2: Window, a3: *cint): *Colormap <cimport,nodecl> end
global function XListFonts(a1: *Display, a2: cstring, a3: cint, a4: *cint): *cstring <cimport,nodecl> end
global function XListFontsWithInfo(a1: *Display, a2: cstring, a3: cint, a4: *cint, a5: **XFontStruct): *cstring <cimport,nodecl> end
global function XGetFontPath(a1: *Display, a2: *cint): *cstring <cimport,nodecl> end
global function XListExtensions(a1: *Display, a2: *cint): *cstring <cimport,nodecl> end
global function XListProperties(a1: *Display, a2: Window, a3: *cint): *Atom <cimport,nodecl> end
global function XListHosts(a1: *Display, a2: *cint, a3: *cint): *XHostAddress <cimport,nodecl> end
global function XKeycodeToKeysym(a1: *Display, a2: KeyCode, a3: cint): KeySym <cimport,nodecl> end
global function XLookupKeysym(a1: *XKeyEvent, a2: cint): KeySym <cimport,nodecl> end
global function XGetKeyboardMapping(a1: *Display, a2: KeyCode, a3: cint, a4: *cint): *KeySym <cimport,nodecl> end
global function XStringToKeysym(a1: cstring): KeySym <cimport,nodecl> end
global function XMaxRequestSize(a1: *Display): clong <cimport,nodecl> end
global function XExtendedMaxRequestSize(a1: *Display): clong <cimport,nodecl> end
global function XResourceManagerString(a1: *Display): cstring <cimport,nodecl> end
global function XScreenResourceString(a1: *Screen): cstring <cimport,nodecl> end
global function XDisplayMotionBufferSize(a1: *Display): culong <cimport,nodecl> end
global function XVisualIDFromVisual(a1: *Visual): VisualID <cimport,nodecl> end
global function XInitThreads(): cint <cimport,nodecl> end
global function XLockDisplay(a1: *Display): void <cimport,nodecl> end
global function XUnlockDisplay(a1: *Display): void <cimport,nodecl> end
global function XInitExtension(a1: *Display, a2: cstring): *XExtCodes <cimport,nodecl> end
global function XAddExtension(a1: *Display): *XExtCodes <cimport,nodecl> end
global function XFindOnExtensionList(a1: **XExtData, a2: cint): *XExtData <cimport,nodecl> end
global function XEHeadOfExtensionList(a1: XEDataObject): **XExtData <cimport,nodecl> end
global function XRootWindow(a1: *Display, a2: cint): Window <cimport,nodecl> end
global function XDefaultRootWindow(a1: *Display): Window <cimport,nodecl> end
global function XRootWindowOfScreen(a1: *Screen): Window <cimport,nodecl> end
global function XDefaultVisual(a1: *Display, a2: cint): *Visual <cimport,nodecl> end
global function XDefaultVisualOfScreen(a1: *Screen): *Visual <cimport,nodecl> end
global function XDefaultGC(a1: *Display, a2: cint): GC <cimport,nodecl> end
global function XDefaultGCOfScreen(a1: *Screen): GC <cimport,nodecl> end
global function XBlackPixel(a1: *Display, a2: cint): culong <cimport,nodecl> end
global function XWhitePixel(a1: *Display, a2: cint): culong <cimport,nodecl> end
global function XAllPlanes(): culong <cimport,nodecl> end
global function XBlackPixelOfScreen(a1: *Screen): culong <cimport,nodecl> end
global function XWhitePixelOfScreen(a1: *Screen): culong <cimport,nodecl> end
global function XNextRequest(a1: *Display): culong <cimport,nodecl> end
global function XLastKnownRequestProcessed(a1: *Display): culong <cimport,nodecl> end
global function XServerVendor(a1: *Display): cstring <cimport,nodecl> end
global function XDisplayString(a1: *Display): cstring <cimport,nodecl> end
global function XDefaultColormap(a1: *Display, a2: cint): Colormap <cimport,nodecl> end
global function XDefaultColormapOfScreen(a1: *Screen): Colormap <cimport,nodecl> end
global function XDisplayOfScreen(a1: *Screen): *Display <cimport,nodecl> end
global function XScreenOfDisplay(a1: *Display, a2: cint): *Screen <cimport,nodecl> end
global function XDefaultScreenOfDisplay(a1: *Display): *Screen <cimport,nodecl> end
global function XEventMaskOfScreen(a1: *Screen): clong <cimport,nodecl> end
global function XScreenNumberOfScreen(a1: *Screen): cint <cimport,nodecl> end
global XErrorHandler: type <cimport,nodecl> = @function(*Display, *XErrorEvent): cint
global function XSetErrorHandler(a1: XErrorHandler): XErrorHandler <cimport,nodecl> end
global XIOErrorHandler: type <cimport,nodecl> = @function(*Display): cint
global function XSetIOErrorHandler(a1: XIOErrorHandler): XIOErrorHandler <cimport,nodecl> end
global XIOErrorExitHandler: type <cimport,nodecl> = @function(*Display, pointer): void
global function XSetIOErrorExitHandler(a1: *Display, a2: XIOErrorExitHandler, a3: pointer): void <cimport,nodecl> end
global function XListPixmapFormats(a1: *Display, a2: *cint): *XPixmapFormatValues <cimport,nodecl> end
global function XListDepths(a1: *Display, a2: cint, a3: *cint): *cint <cimport,nodecl> end
global function XReconfigureWMWindow(a1: *Display, a2: Window, a3: cint, a4: cuint, a5: *XWindowChanges): cint <cimport,nodecl> end
global function XGetWMProtocols(a1: *Display, a2: Window, a3: **Atom, a4: *cint): cint <cimport,nodecl> end
global function XSetWMProtocols(a1: *Display, a2: Window, a3: *Atom, a4: cint): cint <cimport,nodecl> end
global function XIconifyWindow(a1: *Display, a2: Window, a3: cint): cint <cimport,nodecl> end
global function XWithdrawWindow(a1: *Display, a2: Window, a3: cint): cint <cimport,nodecl> end
global function XGetCommand(a1: *Display, a2: Window, a3: **cstring, a4: *cint): cint <cimport,nodecl> end
global function XGetWMColormapWindows(a1: *Display, a2: Window, a3: **Window, a4: *cint): cint <cimport,nodecl> end
global function XSetWMColormapWindows(a1: *Display, a2: Window, a3: *Window, a4: cint): cint <cimport,nodecl> end
global function XFreeStringList(a1: *cstring): void <cimport,nodecl> end
global function XSetTransientForHint(a1: *Display, a2: Window, a3: Window): cint <cimport,nodecl> end
global function XActivateScreenSaver(a1: *Display): cint <cimport,nodecl> end
global function XAddHost(a1: *Display, a2: *XHostAddress): cint <cimport,nodecl> end
global function XAddHosts(a1: *Display, a2: *XHostAddress, a3: cint): cint <cimport,nodecl> end
global function XAddToExtensionList(a1: **XExtData, a2: *XExtData): cint <cimport,nodecl> end
global function XAddToSaveSet(a1: *Display, a2: Window): cint <cimport,nodecl> end
global function XAllocColor(a1: *Display, a2: Colormap, a3: *XColor): cint <cimport,nodecl> end
global function XAllocColorCells(a1: *Display, a2: Colormap, a3: cint, a4: *culong, a5: cuint, a6: *culong, a7: cuint): cint <cimport,nodecl> end
global function XAllocColorPlanes(a1: *Display, a2: Colormap, a3: cint, a4: *culong, a5: cint, a6: cint, a7: cint, a8: cint, a9: *culong, a10: *culong, a11: *culong): cint <cimport,nodecl> end
global function XAllocNamedColor(a1: *Display, a2: Colormap, a3: cstring, a4: *XColor, a5: *XColor): cint <cimport,nodecl> end
global function XAllowEvents(a1: *Display, a2: cint, a3: Time): cint <cimport,nodecl> end
global function XAutoRepeatOff(a1: *Display): cint <cimport,nodecl> end
global function XAutoRepeatOn(a1: *Display): cint <cimport,nodecl> end
global function XBell(a1: *Display, a2: cint): cint <cimport,nodecl> end
global function XBitmapBitOrder(a1: *Display): cint <cimport,nodecl> end
global function XBitmapPad(a1: *Display): cint <cimport,nodecl> end
global function XBitmapUnit(a1: *Display): cint <cimport,nodecl> end
global function XCellsOfScreen(a1: *Screen): cint <cimport,nodecl> end
global function XChangeActivePointerGrab(a1: *Display, a2: cuint, a3: Cursor, a4: Time): cint <cimport,nodecl> end
global function XChangeGC(a1: *Display, a2: GC, a3: culong, a4: *XGCValues): cint <cimport,nodecl> end
global function XChangeKeyboardControl(a1: *Display, a2: culong, a3: *XKeyboardControl): cint <cimport,nodecl> end
global function XChangeKeyboardMapping(a1: *Display, a2: cint, a3: cint, a4: *KeySym, a5: cint): cint <cimport,nodecl> end
global function XChangePointerControl(a1: *Display, a2: cint, a3: cint, a4: cint, a5: cint, a6: cint): cint <cimport,nodecl> end
global function XChangeProperty(a1: *Display, a2: Window, a3: Atom, a4: Atom, a5: cint, a6: cint, a7: *cuchar, a8: cint): cint <cimport,nodecl> end
global function XChangeSaveSet(a1: *Display, a2: Window, a3: cint): cint <cimport,nodecl> end
global function XChangeWindowAttributes(a1: *Display, a2: Window, a3: culong, a4: *XSetWindowAttributes): cint <cimport,nodecl> end
global function XCheckIfEvent(a1: *Display, a2: *XEvent, a3: function(*Display, *XEvent, XPointer): cint, a4: XPointer): cint <cimport,nodecl> end
global function XCheckMaskEvent(a1: *Display, a2: clong, a3: *XEvent): cint <cimport,nodecl> end
global function XCheckTypedEvent(a1: *Display, a2: cint, a3: *XEvent): cint <cimport,nodecl> end
global function XCheckTypedWindowEvent(a1: *Display, a2: Window, a3: cint, a4: *XEvent): cint <cimport,nodecl> end
global function XCheckWindowEvent(a1: *Display, a2: Window, a3: clong, a4: *XEvent): cint <cimport,nodecl> end
global function XCirculateSubwindows(a1: *Display, a2: Window, a3: cint): cint <cimport,nodecl> end
global function XCirculateSubwindowsDown(a1: *Display, a2: Window): cint <cimport,nodecl> end
global function XCirculateSubwindowsUp(a1: *Display, a2: Window): cint <cimport,nodecl> end
global function XClearArea(a1: *Display, a2: Window, a3: cint, a4: cint, a5: cuint, a6: cuint, a7: cint): cint <cimport,nodecl> end
global function XClearWindow(a1: *Display, a2: Window): cint <cimport,nodecl> end
global function XCloseDisplay(a1: *Display): cint <cimport,nodecl> end
global function XConfigureWindow(a1: *Display, a2: Window, a3: cuint, a4: *XWindowChanges): cint <cimport,nodecl> end
global function XConnectionNumber(a1: *Display): cint <cimport,nodecl> end
global function XConvertSelection(a1: *Display, a2: Atom, a3: Atom, a4: Atom, a5: Window, a6: Time): cint <cimport,nodecl> end
global function XCopyArea(a1: *Display, a2: Drawable, a3: Drawable, a4: GC, a5: cint, a6: cint, a7: cuint, a8: cuint, a9: cint, a10: cint): cint <cimport,nodecl> end
global function XCopyGC(a1: *Display, a2: GC, a3: culong, a4: GC): cint <cimport,nodecl> end
global function XCopyPlane(a1: *Display, a2: Drawable, a3: Drawable, a4: GC, a5: cint, a6: cint, a7: cuint, a8: cuint, a9: cint, a10: cint, a11: culong): cint <cimport,nodecl> end
global function XDefaultDepth(a1: *Display, a2: cint): cint <cimport,nodecl> end
global function XDefaultDepthOfScreen(a1: *Screen): cint <cimport,nodecl> end
global function XDefaultScreen(a1: *Display): cint <cimport,nodecl> end
global function XDefineCursor(a1: *Display, a2: Window, a3: Cursor): cint <cimport,nodecl> end
global function XDeleteProperty(a1: *Display, a2: Window, a3: Atom): cint <cimport,nodecl> end
global function XDestroyWindow(a1: *Display, a2: Window): cint <cimport,nodecl> end
global function XDestroySubwindows(a1: *Display, a2: Window): cint <cimport,nodecl> end
global function XDoesBackingStore(a1: *Screen): cint <cimport,nodecl> end
global function XDoesSaveUnders(a1: *Screen): cint <cimport,nodecl> end
global function XDisableAccessControl(a1: *Display): cint <cimport,nodecl> end
global function XDisplayCells(a1: *Display, a2: cint): cint <cimport,nodecl> end
global function XDisplayHeight(a1: *Display, a2: cint): cint <cimport,nodecl> end
global function XDisplayHeightMM(a1: *Display, a2: cint): cint <cimport,nodecl> end
global function XDisplayKeycodes(a1: *Display, a2: *cint, a3: *cint): cint <cimport,nodecl> end
global function XDisplayPlanes(a1: *Display, a2: cint): cint <cimport,nodecl> end
global function XDisplayWidth(a1: *Display, a2: cint): cint <cimport,nodecl> end
global function XDisplayWidthMM(a1: *Display, a2: cint): cint <cimport,nodecl> end
global function XDrawArc(a1: *Display, a2: Drawable, a3: GC, a4: cint, a5: cint, a6: cuint, a7: cuint, a8: cint, a9: cint): cint <cimport,nodecl> end
global function XDrawArcs(a1: *Display, a2: Drawable, a3: GC, a4: *XArc, a5: cint): cint <cimport,nodecl> end
global function XDrawImageString(a1: *Display, a2: Drawable, a3: GC, a4: cint, a5: cint, a6: cstring, a7: cint): cint <cimport,nodecl> end
global function XDrawImageString16(a1: *Display, a2: Drawable, a3: GC, a4: cint, a5: cint, a6: *XChar2b, a7: cint): cint <cimport,nodecl> end
global function XDrawLine(a1: *Display, a2: Drawable, a3: GC, a4: cint, a5: cint, a6: cint, a7: cint): cint <cimport,nodecl> end
global function XDrawLines(a1: *Display, a2: Drawable, a3: GC, a4: *XPoint, a5: cint, a6: cint): cint <cimport,nodecl> end
global function XDrawPoint(a1: *Display, a2: Drawable, a3: GC, a4: cint, a5: cint): cint <cimport,nodecl> end
global function XDrawPoints(a1: *Display, a2: Drawable, a3: GC, a4: *XPoint, a5: cint, a6: cint): cint <cimport,nodecl> end
global function XDrawRectangle(a1: *Display, a2: Drawable, a3: GC, a4: cint, a5: cint, a6: cuint, a7: cuint): cint <cimport,nodecl> end
global function XDrawRectangles(a1: *Display, a2: Drawable, a3: GC, a4: *XRectangle, a5: cint): cint <cimport,nodecl> end
global function XDrawSegments(a1: *Display, a2: Drawable, a3: GC, a4: *XSegment, a5: cint): cint <cimport,nodecl> end
global function XDrawString(a1: *Display, a2: Drawable, a3: GC, a4: cint, a5: cint, a6: cstring, a7: cint): cint <cimport,nodecl> end
global function XDrawString16(a1: *Display, a2: Drawable, a3: GC, a4: cint, a5: cint, a6: *XChar2b, a7: cint): cint <cimport,nodecl> end
global function XDrawText(a1: *Display, a2: Drawable, a3: GC, a4: cint, a5: cint, a6: *XTextItem, a7: cint): cint <cimport,nodecl> end
global function XDrawText16(a1: *Display, a2: Drawable, a3: GC, a4: cint, a5: cint, a6: *XTextItem16, a7: cint): cint <cimport,nodecl> end
global function XEnableAccessControl(a1: *Display): cint <cimport,nodecl> end
global function XEventsQueued(a1: *Display, a2: cint): cint <cimport,nodecl> end
global function XFetchName(a1: *Display, a2: Window, a3: *cstring): cint <cimport,nodecl> end
global function XFillArc(a1: *Display, a2: Drawable, a3: GC, a4: cint, a5: cint, a6: cuint, a7: cuint, a8: cint, a9: cint): cint <cimport,nodecl> end
global function XFillArcs(a1: *Display, a2: Drawable, a3: GC, a4: *XArc, a5: cint): cint <cimport,nodecl> end
global function XFillPolygon(a1: *Display, a2: Drawable, a3: GC, a4: *XPoint, a5: cint, a6: cint, a7: cint): cint <cimport,nodecl> end
global function XFillRectangle(a1: *Display, a2: Drawable, a3: GC, a4: cint, a5: cint, a6: cuint, a7: cuint): cint <cimport,nodecl> end
global function XFillRectangles(a1: *Display, a2: Drawable, a3: GC, a4: *XRectangle, a5: cint): cint <cimport,nodecl> end
global function XFlush(a1: *Display): cint <cimport,nodecl> end
global function XForceScreenSaver(a1: *Display, a2: cint): cint <cimport,nodecl> end
global function XFree(a1: pointer): cint <cimport,nodecl> end
global function XFreeColormap(a1: *Display, a2: Colormap): cint <cimport,nodecl> end
global function XFreeColors(a1: *Display, a2: Colormap, a3: *culong, a4: cint, a5: culong): cint <cimport,nodecl> end
global function XFreeCursor(a1: *Display, a2: Cursor): cint <cimport,nodecl> end
global function XFreeExtensionList(a1: *cstring): cint <cimport,nodecl> end
global function XFreeFont(a1: *Display, a2: *XFontStruct): cint <cimport,nodecl> end
global function XFreeFontInfo(a1: *cstring, a2: *XFontStruct, a3: cint): cint <cimport,nodecl> end
global function XFreeFontNames(a1: *cstring): cint <cimport,nodecl> end
global function XFreeFontPath(a1: *cstring): cint <cimport,nodecl> end
global function XFreeGC(a1: *Display, a2: GC): cint <cimport,nodecl> end
global function XFreeModifiermap(a1: *XModifierKeymap): cint <cimport,nodecl> end
global function XFreePixmap(a1: *Display, a2: Pixmap): cint <cimport,nodecl> end
global function XGeometry(a1: *Display, a2: cint, a3: cstring, a4: cstring, a5: cuint, a6: cuint, a7: cuint, a8: cint, a9: cint, a10: *cint, a11: *cint, a12: *cint, a13: *cint): cint <cimport,nodecl> end
global function XGetErrorDatabaseText(a1: *Display, a2: cstring, a3: cstring, a4: cstring, a5: cstring, a6: cint): cint <cimport,nodecl> end
global function XGetErrorText(a1: *Display, a2: cint, a3: cstring, a4: cint): cint <cimport,nodecl> end
global function XGetFontProperty(a1: *XFontStruct, a2: Atom, a3: *culong): cint <cimport,nodecl> end
global function XGetGCValues(a1: *Display, a2: GC, a3: culong, a4: *XGCValues): cint <cimport,nodecl> end
global function XGetGeometry(a1: *Display, a2: Drawable, a3: *Window, a4: *cint, a5: *cint, a6: *cuint, a7: *cuint, a8: *cuint, a9: *cuint): cint <cimport,nodecl> end
global function XGetIconName(a1: *Display, a2: Window, a3: *cstring): cint <cimport,nodecl> end
global function XGetInputFocus(a1: *Display, a2: *Window, a3: *cint): cint <cimport,nodecl> end
global function XGetKeyboardControl(a1: *Display, a2: *XKeyboardState): cint <cimport,nodecl> end
global function XGetPointerControl(a1: *Display, a2: *cint, a3: *cint, a4: *cint): cint <cimport,nodecl> end
global function XGetPointerMapping(a1: *Display, a2: *cuchar, a3: cint): cint <cimport,nodecl> end
global function XGetScreenSaver(a1: *Display, a2: *cint, a3: *cint, a4: *cint, a5: *cint): cint <cimport,nodecl> end
global function XGetTransientForHint(a1: *Display, a2: Window, a3: *Window): cint <cimport,nodecl> end
global function XGetWindowProperty(a1: *Display, a2: Window, a3: Atom, a4: clong, a5: clong, a6: cint, a7: Atom, a8: *Atom, a9: *cint, a10: *culong, a11: *culong, a12: **cuchar): cint <cimport,nodecl> end
global function XGetWindowAttributes(a1: *Display, a2: Window, a3: *XWindowAttributes): cint <cimport,nodecl> end
global function XGrabButton(a1: *Display, a2: cuint, a3: cuint, a4: Window, a5: cint, a6: cuint, a7: cint, a8: cint, a9: Window, a10: Cursor): cint <cimport,nodecl> end
global function XGrabKey(a1: *Display, a2: cint, a3: cuint, a4: Window, a5: cint, a6: cint, a7: cint): cint <cimport,nodecl> end
global function XGrabKeyboard(a1: *Display, a2: Window, a3: cint, a4: cint, a5: cint, a6: Time): cint <cimport,nodecl> end
global function XGrabPointer(a1: *Display, a2: Window, a3: cint, a4: cuint, a5: cint, a6: cint, a7: Window, a8: Cursor, a9: Time): cint <cimport,nodecl> end
global function XGrabServer(a1: *Display): cint <cimport,nodecl> end
global function XHeightMMOfScreen(a1: *Screen): cint <cimport,nodecl> end
global function XHeightOfScreen(a1: *Screen): cint <cimport,nodecl> end
global function XIfEvent(a1: *Display, a2: *XEvent, a3: function(*Display, *XEvent, XPointer): cint, a4: XPointer): cint <cimport,nodecl> end
global function XImageByteOrder(a1: *Display): cint <cimport,nodecl> end
global function XInstallColormap(a1: *Display, a2: Colormap): cint <cimport,nodecl> end
global function XKeysymToKeycode(a1: *Display, a2: KeySym): KeyCode <cimport,nodecl> end
global function XKillClient(a1: *Display, a2: culong): cint <cimport,nodecl> end
global function XLookupColor(a1: *Display, a2: Colormap, a3: cstring, a4: *XColor, a5: *XColor): cint <cimport,nodecl> end
global function XLowerWindow(a1: *Display, a2: Window): cint <cimport,nodecl> end
global function XMapRaised(a1: *Display, a2: Window): cint <cimport,nodecl> end
global function XMapSubwindows(a1: *Display, a2: Window): cint <cimport,nodecl> end
global function XMapWindow(a1: *Display, a2: Window): cint <cimport,nodecl> end
global function XMaskEvent(a1: *Display, a2: clong, a3: *XEvent): cint <cimport,nodecl> end
global function XMaxCmapsOfScreen(a1: *Screen): cint <cimport,nodecl> end
global function XMinCmapsOfScreen(a1: *Screen): cint <cimport,nodecl> end
global function XMoveResizeWindow(a1: *Display, a2: Window, a3: cint, a4: cint, a5: cuint, a6: cuint): cint <cimport,nodecl> end
global function XMoveWindow(a1: *Display, a2: Window, a3: cint, a4: cint): cint <cimport,nodecl> end
global function XNextEvent(a1: *Display, a2: *XEvent): cint <cimport,nodecl> end
global function XNoOp(a1: *Display): cint <cimport,nodecl> end
global function XParseColor(a1: *Display, a2: Colormap, a3: cstring, a4: *XColor): cint <cimport,nodecl> end
global function XParseGeometry(a1: cstring, a2: *cint, a3: *cint, a4: *cuint, a5: *cuint): cint <cimport,nodecl> end
global function XPeekEvent(a1: *Display, a2: *XEvent): cint <cimport,nodecl> end
global function XPeekIfEvent(a1: *Display, a2: *XEvent, a3: function(*Display, *XEvent, XPointer): cint, a4: XPointer): cint <cimport,nodecl> end
global function XPending(a1: *Display): cint <cimport,nodecl> end
global function XPlanesOfScreen(a1: *Screen): cint <cimport,nodecl> end
global function XProtocolRevision(a1: *Display): cint <cimport,nodecl> end
global function XProtocolVersion(a1: *Display): cint <cimport,nodecl> end
global function XPutBackEvent(a1: *Display, a2: *XEvent): cint <cimport,nodecl> end
global function XPutImage(a1: *Display, a2: Drawable, a3: GC, a4: *XImage, a5: cint, a6: cint, a7: cint, a8: cint, a9: cuint, a10: cuint): cint <cimport,nodecl> end
global function XQLength(a1: *Display): cint <cimport,nodecl> end
global function XQueryBestCursor(a1: *Display, a2: Drawable, a3: cuint, a4: cuint, a5: *cuint, a6: *cuint): cint <cimport,nodecl> end
global function XQueryBestSize(a1: *Display, a2: cint, a3: Drawable, a4: cuint, a5: cuint, a6: *cuint, a7: *cuint): cint <cimport,nodecl> end
global function XQueryBestStipple(a1: *Display, a2: Drawable, a3: cuint, a4: cuint, a5: *cuint, a6: *cuint): cint <cimport,nodecl> end
global function XQueryBestTile(a1: *Display, a2: Drawable, a3: cuint, a4: cuint, a5: *cuint, a6: *cuint): cint <cimport,nodecl> end
global function XQueryColor(a1: *Display, a2: Colormap, a3: *XColor): cint <cimport,nodecl> end
global function XQueryColors(a1: *Display, a2: Colormap, a3: *XColor, a4: cint): cint <cimport,nodecl> end
global function XQueryExtension(a1: *Display, a2: cstring, a3: *cint, a4: *cint, a5: *cint): cint <cimport,nodecl> end
global function XQueryKeymap(a1: *Display, a2: cstring): cint <cimport,nodecl> end
global function XQueryPointer(a1: *Display, a2: Window, a3: *Window, a4: *Window, a5: *cint, a6: *cint, a7: *cint, a8: *cint, a9: *cuint): cint <cimport,nodecl> end
global function XQueryTextExtents(a1: *Display, a2: culong, a3: cstring, a4: cint, a5: *cint, a6: *cint, a7: *cint, a8: *XCharStruct): cint <cimport,nodecl> end
global function XQueryTextExtents16(a1: *Display, a2: culong, a3: *XChar2b, a4: cint, a5: *cint, a6: *cint, a7: *cint, a8: *XCharStruct): cint <cimport,nodecl> end
global function XQueryTree(a1: *Display, a2: Window, a3: *Window, a4: *Window, a5: **Window, a6: *cuint): cint <cimport,nodecl> end
global function XRaiseWindow(a1: *Display, a2: Window): cint <cimport,nodecl> end
global function XReadBitmapFile(a1: *Display, a2: Drawable, a3: cstring, a4: *cuint, a5: *cuint, a6: *Pixmap, a7: *cint, a8: *cint): cint <cimport,nodecl> end
global function XReadBitmapFileData(a1: cstring, a2: *cuint, a3: *cuint, a4: **cuchar, a5: *cint, a6: *cint): cint <cimport,nodecl> end
global function XRebindKeysym(a1: *Display, a2: KeySym, a3: *KeySym, a4: cint, a5: *cuchar, a6: cint): cint <cimport,nodecl> end
global function XRecolorCursor(a1: *Display, a2: Cursor, a3: *XColor, a4: *XColor): cint <cimport,nodecl> end
global function XRefreshKeyboardMapping(a1: *XMappingEvent): cint <cimport,nodecl> end
global function XRemoveFromSaveSet(a1: *Display, a2: Window): cint <cimport,nodecl> end
global function XRemoveHost(a1: *Display, a2: *XHostAddress): cint <cimport,nodecl> end
global function XRemoveHosts(a1: *Display, a2: *XHostAddress, a3: cint): cint <cimport,nodecl> end
global function XReparentWindow(a1: *Display, a2: Window, a3: Window, a4: cint, a5: cint): cint <cimport,nodecl> end
global function XResetScreenSaver(a1: *Display): cint <cimport,nodecl> end
global function XResizeWindow(a1: *Display, a2: Window, a3: cuint, a4: cuint): cint <cimport,nodecl> end
global function XRestackWindows(a1: *Display, a2: *Window, a3: cint): cint <cimport,nodecl> end
global function XRotateBuffers(a1: *Display, a2: cint): cint <cimport,nodecl> end
global function XRotateWindowProperties(a1: *Display, a2: Window, a3: *Atom, a4: cint, a5: cint): cint <cimport,nodecl> end
global function XScreenCount(a1: *Display): cint <cimport,nodecl> end
global function XSelectInput(a1: *Display, a2: Window, a3: clong): cint <cimport,nodecl> end
global function XSendEvent(a1: *Display, a2: Window, a3: cint, a4: clong, a5: *XEvent): cint <cimport,nodecl> end
global function XSetAccessControl(a1: *Display, a2: cint): cint <cimport,nodecl> end
global function XSetArcMode(a1: *Display, a2: GC, a3: cint): cint <cimport,nodecl> end
global function XSetBackground(a1: *Display, a2: GC, a3: culong): cint <cimport,nodecl> end
global function XSetClipMask(a1: *Display, a2: GC, a3: Pixmap): cint <cimport,nodecl> end
global function XSetClipOrigin(a1: *Display, a2: GC, a3: cint, a4: cint): cint <cimport,nodecl> end
global function XSetClipRectangles(a1: *Display, a2: GC, a3: cint, a4: cint, a5: *XRectangle, a6: cint, a7: cint): cint <cimport,nodecl> end
global function XSetCloseDownMode(a1: *Display, a2: cint): cint <cimport,nodecl> end
global function XSetCommand(a1: *Display, a2: Window, a3: *cstring, a4: cint): cint <cimport,nodecl> end
global function XSetDashes(a1: *Display, a2: GC, a3: cint, a4: cstring, a5: cint): cint <cimport,nodecl> end
global function XSetFillRule(a1: *Display, a2: GC, a3: cint): cint <cimport,nodecl> end
global function XSetFillStyle(a1: *Display, a2: GC, a3: cint): cint <cimport,nodecl> end
global function XSetFont(a1: *Display, a2: GC, a3: Font): cint <cimport,nodecl> end
global function XSetFontPath(a1: *Display, a2: *cstring, a3: cint): cint <cimport,nodecl> end
global function XSetForeground(a1: *Display, a2: GC, a3: culong): cint <cimport,nodecl> end
global function XSetFunction(a1: *Display, a2: GC, a3: cint): cint <cimport,nodecl> end
global function XSetGraphicsExposures(a1: *Display, a2: GC, a3: cint): cint <cimport,nodecl> end
global function XSetIconName(a1: *Display, a2: Window, a3: cstring): cint <cimport,nodecl> end
global function XSetInputFocus(a1: *Display, a2: Window, a3: cint, a4: Time): cint <cimport,nodecl> end
global function XSetLineAttributes(a1: *Display, a2: GC, a3: cuint, a4: cint, a5: cint, a6: cint): cint <cimport,nodecl> end
global function XSetModifierMapping(a1: *Display, a2: *XModifierKeymap): cint <cimport,nodecl> end
global function XSetPlaneMask(a1: *Display, a2: GC, a3: culong): cint <cimport,nodecl> end
global function XSetPointerMapping(a1: *Display, a2: *cuchar, a3: cint): cint <cimport,nodecl> end
global function XSetScreenSaver(a1: *Display, a2: cint, a3: cint, a4: cint, a5: cint): cint <cimport,nodecl> end
global function XSetSelectionOwner(a1: *Display, a2: Atom, a3: Window, a4: Time): cint <cimport,nodecl> end
global function XSetState(a1: *Display, a2: GC, a3: culong, a4: culong, a5: cint, a6: culong): cint <cimport,nodecl> end
global function XSetStipple(a1: *Display, a2: GC, a3: Pixmap): cint <cimport,nodecl> end
global function XSetSubwindowMode(a1: *Display, a2: GC, a3: cint): cint <cimport,nodecl> end
global function XSetTSOrigin(a1: *Display, a2: GC, a3: cint, a4: cint): cint <cimport,nodecl> end
global function XSetTile(a1: *Display, a2: GC, a3: Pixmap): cint <cimport,nodecl> end
global function XSetWindowBackground(a1: *Display, a2: Window, a3: culong): cint <cimport,nodecl> end
global function XSetWindowBackgroundPixmap(a1: *Display, a2: Window, a3: Pixmap): cint <cimport,nodecl> end
global function XSetWindowBorder(a1: *Display, a2: Window, a3: culong): cint <cimport,nodecl> end
global function XSetWindowBorderPixmap(a1: *Display, a2: Window, a3: Pixmap): cint <cimport,nodecl> end
global function XSetWindowBorderWidth(a1: *Display, a2: Window, a3: cuint): cint <cimport,nodecl> end
global function XSetWindowColormap(a1: *Display, a2: Window, a3: Colormap): cint <cimport,nodecl> end
global function XStoreBuffer(a1: *Display, a2: cstring, a3: cint, a4: cint): cint <cimport,nodecl> end
global function XStoreBytes(a1: *Display, a2: cstring, a3: cint): cint <cimport,nodecl> end
global function XStoreColor(a1: *Display, a2: Colormap, a3: *XColor): cint <cimport,nodecl> end
global function XStoreColors(a1: *Display, a2: Colormap, a3: *XColor, a4: cint): cint <cimport,nodecl> end
global function XStoreName(a1: *Display, a2: Window, a3: cstring): cint <cimport,nodecl> end
global function XStoreNamedColor(a1: *Display, a2: Colormap, a3: cstring, a4: culong, a5: cint): cint <cimport,nodecl> end
global function XSync(a1: *Display, a2: cint): cint <cimport,nodecl> end
global function XTextExtents(a1: *XFontStruct, a2: cstring, a3: cint, a4: *cint, a5: *cint, a6: *cint, a7: *XCharStruct): cint <cimport,nodecl> end
global function XTextExtents16(a1: *XFontStruct, a2: *XChar2b, a3: cint, a4: *cint, a5: *cint, a6: *cint, a7: *XCharStruct): cint <cimport,nodecl> end
global function XTextWidth(a1: *XFontStruct, a2: cstring, a3: cint): cint <cimport,nodecl> end
global function XTextWidth16(a1: *XFontStruct, a2: *XChar2b, a3: cint): cint <cimport,nodecl> end
global function XTranslateCoordinates(a1: *Display, a2: Window, a3: Window, a4: cint, a5: cint, a6: *cint, a7: *cint, a8: *Window): cint <cimport,nodecl> end
global function XUndefineCursor(a1: *Display, a2: Window): cint <cimport,nodecl> end
global function XUngrabButton(a1: *Display, a2: cuint, a3: cuint, a4: Window): cint <cimport,nodecl> end
global function XUngrabKey(a1: *Display, a2: cint, a3: cuint, a4: Window): cint <cimport,nodecl> end
global function XUngrabKeyboard(a1: *Display, a2: Time): cint <cimport,nodecl> end
global function XUngrabPointer(a1: *Display, a2: Time): cint <cimport,nodecl> end
global function XUngrabServer(a1: *Display): cint <cimport,nodecl> end
global function XUninstallColormap(a1: *Display, a2: Colormap): cint <cimport,nodecl> end
global function XUnloadFont(a1: *Display, a2: Font): cint <cimport,nodecl> end
global function XUnmapSubwindows(a1: *Display, a2: Window): cint <cimport,nodecl> end
global function XUnmapWindow(a1: *Display, a2: Window): cint <cimport,nodecl> end
global function XVendorRelease(a1: *Display): cint <cimport,nodecl> end
global function XWarpPointer(a1: *Display, a2: Window, a3: Window, a4: cint, a5: cint, a6: cuint, a7: cuint, a8: cint, a9: cint): cint <cimport,nodecl> end
global function XWidthMMOfScreen(a1: *Screen): cint <cimport,nodecl> end
global function XWidthOfScreen(a1: *Screen): cint <cimport,nodecl> end
global function XWindowEvent(a1: *Display, a2: Window, a3: clong, a4: *XEvent): cint <cimport,nodecl> end
global function XWriteBitmapFile(a1: *Display, a2: cstring, a3: Pixmap, a4: cuint, a5: cuint, a6: cint, a7: cint): cint <cimport,nodecl> end
global function XSupportsLocale(): cint <cimport,nodecl> end
global function XSetLocaleModifiers(a1: cstring): cstring <cimport,nodecl> end
global function XOpenOM(a1: *Display, a2: pointer, a3: cstring, a4: cstring): XOM <cimport,nodecl> end
global function XCloseOM(a1: XOM): cint <cimport,nodecl> end
global function XSetOMValues(a1: XOM, ...: cvarargs): cstring <cimport,nodecl> end
global function XGetOMValues(a1: XOM, ...: cvarargs): cstring <cimport,nodecl> end
global function XDisplayOfOM(a1: XOM): *Display <cimport,nodecl> end
global function XLocaleOfOM(a1: XOM): cstring <cimport,nodecl> end
global function XCreateOC(a1: XOM, ...: cvarargs): XOC <cimport,nodecl> end
global function XDestroyOC(a1: XOC): void <cimport,nodecl> end
global function XOMOfOC(a1: XOC): XOM <cimport,nodecl> end
global function XSetOCValues(a1: XOC, ...: cvarargs): cstring <cimport,nodecl> end
global function XGetOCValues(a1: XOC, ...: cvarargs): cstring <cimport,nodecl> end
global function XCreateFontSet(a1: *Display, a2: cstring, a3: **cstring, a4: *cint, a5: *cstring): XFontSet <cimport,nodecl> end
global function XFreeFontSet(a1: *Display, a2: XFontSet): void <cimport,nodecl> end
global function XFontsOfFontSet(a1: XFontSet, a2: ***XFontStruct, a3: **cstring): cint <cimport,nodecl> end
global function XBaseFontNameListOfFontSet(a1: XFontSet): cstring <cimport,nodecl> end
global function XLocaleOfFontSet(a1: XFontSet): cstring <cimport,nodecl> end
global function XContextDependentDrawing(a1: XFontSet): cint <cimport,nodecl> end
global function XDirectionalDependentDrawing(a1: XFontSet): cint <cimport,nodecl> end
global function XContextualDrawing(a1: XFontSet): cint <cimport,nodecl> end
global function XExtentsOfFontSet(a1: XFontSet): *XFontSetExtents <cimport,nodecl> end
global function XmbTextEscapement(a1: XFontSet, a2: cstring, a3: cint): cint <cimport,nodecl> end
global function XwcTextEscapement(a1: XFontSet, a2: *cwchar_t, a3: cint): cint <cimport,nodecl> end
global function Xutf8TextEscapement(a1: XFontSet, a2: cstring, a3: cint): cint <cimport,nodecl> end
global function XmbTextExtents(a1: XFontSet, a2: cstring, a3: cint, a4: *XRectangle, a5: *XRectangle): cint <cimport,nodecl> end
global function XwcTextExtents(a1: XFontSet, a2: *cwchar_t, a3: cint, a4: *XRectangle, a5: *XRectangle): cint <cimport,nodecl> end
global function Xutf8TextExtents(a1: XFontSet, a2: cstring, a3: cint, a4: *XRectangle, a5: *XRectangle): cint <cimport,nodecl> end
global function XmbTextPerCharExtents(a1: XFontSet, a2: cstring, a3: cint, a4: *XRectangle, a5: *XRectangle, a6: cint, a7: *cint, a8: *XRectangle, a9: *XRectangle): cint <cimport,nodecl> end
global function XwcTextPerCharExtents(a1: XFontSet, a2: *cwchar_t, a3: cint, a4: *XRectangle, a5: *XRectangle, a6: cint, a7: *cint, a8: *XRectangle, a9: *XRectangle): cint <cimport,nodecl> end
global function Xutf8TextPerCharExtents(a1: XFontSet, a2: cstring, a3: cint, a4: *XRectangle, a5: *XRectangle, a6: cint, a7: *cint, a8: *XRectangle, a9: *XRectangle): cint <cimport,nodecl> end
global function XmbDrawText(a1: *Display, a2: Drawable, a3: GC, a4: cint, a5: cint, a6: *XmbTextItem, a7: cint): void <cimport,nodecl> end
global function XwcDrawText(a1: *Display, a2: Drawable, a3: GC, a4: cint, a5: cint, a6: *XwcTextItem, a7: cint): void <cimport,nodecl> end
global function Xutf8DrawText(a1: *Display, a2: Drawable, a3: GC, a4: cint, a5: cint, a6: *XmbTextItem, a7: cint): void <cimport,nodecl> end
global function XmbDrawString(a1: *Display, a2: Drawable, a3: XFontSet, a4: GC, a5: cint, a6: cint, a7: cstring, a8: cint): void <cimport,nodecl> end
global function XwcDrawString(a1: *Display, a2: Drawable, a3: XFontSet, a4: GC, a5: cint, a6: cint, a7: *cwchar_t, a8: cint): void <cimport,nodecl> end
global function Xutf8DrawString(a1: *Display, a2: Drawable, a3: XFontSet, a4: GC, a5: cint, a6: cint, a7: cstring, a8: cint): void <cimport,nodecl> end
global function XmbDrawImageString(a1: *Display, a2: Drawable, a3: XFontSet, a4: GC, a5: cint, a6: cint, a7: cstring, a8: cint): void <cimport,nodecl> end
global function XwcDrawImageString(a1: *Display, a2: Drawable, a3: XFontSet, a4: GC, a5: cint, a6: cint, a7: *cwchar_t, a8: cint): void <cimport,nodecl> end
global function Xutf8DrawImageString(a1: *Display, a2: Drawable, a3: XFontSet, a4: GC, a5: cint, a6: cint, a7: cstring, a8: cint): void <cimport,nodecl> end
global function XOpenIM(a1: *Display, a2: pointer, a3: cstring, a4: cstring): XIM <cimport,nodecl> end
global function XCloseIM(a1: XIM): cint <cimport,nodecl> end
global function XGetIMValues(a1: XIM, ...: cvarargs): cstring <cimport,nodecl> end
global function XSetIMValues(a1: XIM, ...: cvarargs): cstring <cimport,nodecl> end
global function XDisplayOfIM(a1: XIM): *Display <cimport,nodecl> end
global function XLocaleOfIM(a1: XIM): cstring <cimport,nodecl> end
global function XCreateIC(a1: XIM, ...: cvarargs): XIC <cimport,nodecl> end
global function XDestroyIC(a1: XIC): void <cimport,nodecl> end
global function XSetICFocus(a1: XIC): void <cimport,nodecl> end
global function XUnsetICFocus(a1: XIC): void <cimport,nodecl> end
global function XwcResetIC(a1: XIC): *cwchar_t <cimport,nodecl> end
global function XmbResetIC(a1: XIC): cstring <cimport,nodecl> end
global function Xutf8ResetIC(a1: XIC): cstring <cimport,nodecl> end
global function XSetICValues(a1: XIC, ...: cvarargs): cstring <cimport,nodecl> end
global function XGetICValues(a1: XIC, ...: cvarargs): cstring <cimport,nodecl> end
global function XIMOfIC(a1: XIC): XIM <cimport,nodecl> end
global function XFilterEvent(a1: *XEvent, a2: Window): cint <cimport,nodecl> end
global function XmbLookupString(a1: XIC, a2: *XKeyPressedEvent, a3: cstring, a4: cint, a5: *KeySym, a6: *cint): cint <cimport,nodecl> end
global function XwcLookupString(a1: XIC, a2: *XKeyPressedEvent, a3: *cwchar_t, a4: cint, a5: *KeySym, a6: *cint): cint <cimport,nodecl> end
global function Xutf8LookupString(a1: XIC, a2: *XKeyPressedEvent, a3: cstring, a4: cint, a5: *KeySym, a6: *cint): cint <cimport,nodecl> end
global function XVaCreateNestedList(a1: cint, ...: cvarargs): XVaNestedList <cimport,nodecl> end
global function XRegisterIMInstantiateCallback(a1: *Display, a2: pointer, a3: cstring, a4: cstring, a5: XIDProc, a6: XPointer): cint <cimport,nodecl> end
global function XUnregisterIMInstantiateCallback(a1: *Display, a2: pointer, a3: cstring, a4: cstring, a5: XIDProc, a6: XPointer): cint <cimport,nodecl> end
global XConnectionWatchProc: type <cimport,nodecl> = @function(*Display, XPointer, cint, cint, *XPointer): void
global function XInternalConnectionNumbers(a1: *Display, a2: **cint, a3: *cint): cint <cimport,nodecl> end
global function XProcessInternalConnection(a1: *Display, a2: cint): void <cimport,nodecl> end
global function XAddConnectionWatch(a1: *Display, a2: XConnectionWatchProc, a3: XPointer): cint <cimport,nodecl> end
global function XRemoveConnectionWatch(a1: *Display, a2: XConnectionWatchProc, a3: XPointer): void <cimport,nodecl> end
global function XSetAuthorization(a1: cstring, a2: cint, a3: cstring, a4: cint): void <cimport,nodecl> end
global function XGetEventData(a1: *Display, a2: *XGenericEventCookie): cint <cimport,nodecl> end
global function XFreeEventData(a1: *Display, a2: *XGenericEventCookie): void <cimport,nodecl> end
global XSizeHints: type <cimport,nodecl> = @record{
  flags: clong,
  x: cint,
  y: cint,
  width: cint,
  height: cint,
  min_width: cint,
  min_height: cint,
  max_width: cint,
  max_height: cint,
  width_inc: cint,
  height_inc: cint,
  min_aspect: record{
    x: cint,
    y: cint
  },
  max_aspect: record{
    x: cint,
    y: cint
  },
  base_width: cint,
  base_height: cint,
  win_gravity: cint
}
global XWMHints: type <cimport,nodecl> = @record{
  flags: clong,
  input: cint,
  initial_state: cint,
  icon_pixmap: Pixmap,
  icon_window: Window,
  icon_x: cint,
  icon_y: cint,
  icon_mask: Pixmap,
  window_group: culong
}
global XTextProperty: type <cimport,nodecl> = @record{
  value: *cuchar,
  encoding: Atom,
  format: cint,
  nitems: culong
}
global XICCEncodingStyle: type <cimport,nodecl,using> = @enum(cint){
  XStringStyle = 0,
  XCompoundTextStyle = 1,
  XTextStyle = 2,
  XStdICCTextStyle = 3,
  XUTF8StringStyle = 4
}
global XIconSize: type <cimport,nodecl> = @record{
  min_width: cint,
  min_height: cint,
  max_width: cint,
  max_height: cint,
  width_inc: cint,
  height_inc: cint
}
global XClassHint: type <cimport,nodecl> = @record{
  res_name: cstring,
  res_class: cstring
}
global XComposeStatus: type <cimport,nodecl> = @record{
  compose_ptr: XPointer,
  chars_matched: cint
}
global Region: type = @pointer
global XVisualInfo: type <cimport,nodecl> = @record{
  visual: *Visual,
  visualid: VisualID,
  screen: cint,
  depth: cint,
  class: cint,
  red_mask: culong,
  green_mask: culong,
  blue_mask: culong,
  colormap_size: cint,
  bits_per_rgb: cint
}
global XStandardColormap: type <cimport,nodecl> = @record{
  colormap: Colormap,
  red_max: culong,
  red_mult: culong,
  green_max: culong,
  green_mult: culong,
  blue_max: culong,
  blue_mult: culong,
  base_pixel: culong,
  visualid: VisualID,
  killid: culong
}
global function XAllocClassHint(): *XClassHint <cimport,nodecl> end
global function XAllocIconSize(): *XIconSize <cimport,nodecl> end
global function XAllocSizeHints(): *XSizeHints <cimport,nodecl> end
global function XAllocStandardColormap(): *XStandardColormap <cimport,nodecl> end
global function XAllocWMHints(): *XWMHints <cimport,nodecl> end
global function XClipBox(a1: Region, a2: *XRectangle): cint <cimport,nodecl> end
global function XCreateRegion(): Region <cimport,nodecl> end
global function XDefaultString(): cstring <cimport,nodecl> end
global function XDeleteContext(a1: *Display, a2: culong, a3: cint): cint <cimport,nodecl> end
global function XDestroyRegion(a1: Region): cint <cimport,nodecl> end
global function XEmptyRegion(a1: Region): cint <cimport,nodecl> end
global function XEqualRegion(a1: Region, a2: Region): cint <cimport,nodecl> end
global function XFindContext(a1: *Display, a2: culong, a3: cint, a4: *XPointer): cint <cimport,nodecl> end
global function XGetClassHint(a1: *Display, a2: Window, a3: *XClassHint): cint <cimport,nodecl> end
global function XGetIconSizes(a1: *Display, a2: Window, a3: **XIconSize, a4: *cint): cint <cimport,nodecl> end
global function XGetNormalHints(a1: *Display, a2: Window, a3: *XSizeHints): cint <cimport,nodecl> end
global function XGetRGBColormaps(a1: *Display, a2: Window, a3: **XStandardColormap, a4: *cint, a5: Atom): cint <cimport,nodecl> end
global function XGetSizeHints(a1: *Display, a2: Window, a3: *XSizeHints, a4: Atom): cint <cimport,nodecl> end
global function XGetStandardColormap(a1: *Display, a2: Window, a3: *XStandardColormap, a4: Atom): cint <cimport,nodecl> end
global function XGetTextProperty(a1: *Display, a2: Window, a3: *XTextProperty, a4: Atom): cint <cimport,nodecl> end
global function XGetVisualInfo(a1: *Display, a2: clong, a3: *XVisualInfo, a4: *cint): *XVisualInfo <cimport,nodecl> end
global function XGetWMClientMachine(a1: *Display, a2: Window, a3: *XTextProperty): cint <cimport,nodecl> end
global function XGetWMHints(a1: *Display, a2: Window): *XWMHints <cimport,nodecl> end
global function XGetWMIconName(a1: *Display, a2: Window, a3: *XTextProperty): cint <cimport,nodecl> end
global function XGetWMName(a1: *Display, a2: Window, a3: *XTextProperty): cint <cimport,nodecl> end
global function XGetWMNormalHints(a1: *Display, a2: Window, a3: *XSizeHints, a4: *clong): cint <cimport,nodecl> end
global function XGetWMSizeHints(a1: *Display, a2: Window, a3: *XSizeHints, a4: *clong, a5: Atom): cint <cimport,nodecl> end
global function XGetZoomHints(a1: *Display, a2: Window, a3: *XSizeHints): cint <cimport,nodecl> end
global function XIntersectRegion(a1: Region, a2: Region, a3: Region): cint <cimport,nodecl> end
global function XConvertCase(a1: KeySym, a2: *KeySym, a3: *KeySym): void <cimport,nodecl> end
global function XLookupString(a1: *XKeyEvent, a2: cstring, a3: cint, a4: *KeySym, a5: *XComposeStatus): cint <cimport,nodecl> end
global function XMatchVisualInfo(a1: *Display, a2: cint, a3: cint, a4: cint, a5: *XVisualInfo): cint <cimport,nodecl> end
global function XOffsetRegion(a1: Region, a2: cint, a3: cint): cint <cimport,nodecl> end
global function XPointInRegion(a1: Region, a2: cint, a3: cint): cint <cimport,nodecl> end
global function XPolygonRegion(a1: *XPoint, a2: cint, a3: cint): Region <cimport,nodecl> end
global function XRectInRegion(a1: Region, a2: cint, a3: cint, a4: cuint, a5: cuint): cint <cimport,nodecl> end
global function XSaveContext(a1: *Display, a2: culong, a3: cint, a4: cstring): cint <cimport,nodecl> end
global function XSetClassHint(a1: *Display, a2: Window, a3: *XClassHint): cint <cimport,nodecl> end
global function XSetIconSizes(a1: *Display, a2: Window, a3: *XIconSize, a4: cint): cint <cimport,nodecl> end
global function XSetNormalHints(a1: *Display, a2: Window, a3: *XSizeHints): cint <cimport,nodecl> end
global function XSetRGBColormaps(a1: *Display, a2: Window, a3: *XStandardColormap, a4: cint, a5: Atom): void <cimport,nodecl> end
global function XSetSizeHints(a1: *Display, a2: Window, a3: *XSizeHints, a4: Atom): cint <cimport,nodecl> end
global function XSetStandardProperties(a1: *Display, a2: Window, a3: cstring, a4: cstring, a5: Pixmap, a6: *cstring, a7: cint, a8: *XSizeHints): cint <cimport,nodecl> end
global function XSetTextProperty(a1: *Display, a2: Window, a3: *XTextProperty, a4: Atom): void <cimport,nodecl> end
global function XSetWMClientMachine(a1: *Display, a2: Window, a3: *XTextProperty): void <cimport,nodecl> end
global function XSetWMHints(a1: *Display, a2: Window, a3: *XWMHints): cint <cimport,nodecl> end
global function XSetWMIconName(a1: *Display, a2: Window, a3: *XTextProperty): void <cimport,nodecl> end
global function XSetWMName(a1: *Display, a2: Window, a3: *XTextProperty): void <cimport,nodecl> end
global function XSetWMNormalHints(a1: *Display, a2: Window, a3: *XSizeHints): void <cimport,nodecl> end
global function XSetWMProperties(a1: *Display, a2: Window, a3: *XTextProperty, a4: *XTextProperty, a5: *cstring, a6: cint, a7: *XSizeHints, a8: *XWMHints, a9: *XClassHint): void <cimport,nodecl> end
global function XmbSetWMProperties(a1: *Display, a2: Window, a3: cstring, a4: cstring, a5: *cstring, a6: cint, a7: *XSizeHints, a8: *XWMHints, a9: *XClassHint): void <cimport,nodecl> end
global function Xutf8SetWMProperties(a1: *Display, a2: Window, a3: cstring, a4: cstring, a5: *cstring, a6: cint, a7: *XSizeHints, a8: *XWMHints, a9: *XClassHint): void <cimport,nodecl> end
global function XSetWMSizeHints(a1: *Display, a2: Window, a3: *XSizeHints, a4: Atom): void <cimport,nodecl> end
global function XSetRegion(a1: *Display, a2: GC, a3: Region): cint <cimport,nodecl> end
global function XSetStandardColormap(a1: *Display, a2: Window, a3: *XStandardColormap, a4: Atom): void <cimport,nodecl> end
global function XSetZoomHints(a1: *Display, a2: Window, a3: *XSizeHints): cint <cimport,nodecl> end
global function XShrinkRegion(a1: Region, a2: cint, a3: cint): cint <cimport,nodecl> end
global function XStringListToTextProperty(a1: *cstring, a2: cint, a3: *XTextProperty): cint <cimport,nodecl> end
global function XSubtractRegion(a1: Region, a2: Region, a3: Region): cint <cimport,nodecl> end
global function XmbTextListToTextProperty(display: *Display, list: *cstring, count: cint, style: XICCEncodingStyle, text_prop_return: *XTextProperty): cint <cimport,nodecl> end
global function XwcTextListToTextProperty(display: *Display, list: **cwchar_t, count: cint, style: XICCEncodingStyle, text_prop_return: *XTextProperty): cint <cimport,nodecl> end
global function Xutf8TextListToTextProperty(display: *Display, list: *cstring, count: cint, style: XICCEncodingStyle, text_prop_return: *XTextProperty): cint <cimport,nodecl> end
global function XwcFreeStringList(list: **cwchar_t): void <cimport,nodecl> end
global function XTextPropertyToStringList(a1: *XTextProperty, a2: **cstring, a3: *cint): cint <cimport,nodecl> end
global function XmbTextPropertyToTextList(display: *Display, text_prop: *XTextProperty, list_return: **cstring, count_return: *cint): cint <cimport,nodecl> end
global function XwcTextPropertyToTextList(display: *Display, text_prop: *XTextProperty, list_return: ***cwchar_t, count_return: *cint): cint <cimport,nodecl> end
global function Xutf8TextPropertyToTextList(display: *Display, text_prop: *XTextProperty, list_return: **cstring, count_return: *cint): cint <cimport,nodecl> end
global function XUnionRectWithRegion(a1: *XRectangle, a2: Region, a3: Region): cint <cimport,nodecl> end
global function XUnionRegion(a1: Region, a2: Region, a3: Region): cint <cimport,nodecl> end
global function XWMGeometry(a1: *Display, a2: cint, a3: cstring, a4: cstring, a5: cuint, a6: *XSizeHints, a7: *cint, a8: *cint, a9: *cint, a10: *cint, a11: *cint): cint <cimport,nodecl> end
global function XXorRegion(a1: Region, a2: Region, a3: Region): cint <cimport,nodecl> end
global function Xpermalloc(a1: cuint): cstring <cimport,nodecl> end
global XrmQuarkList: type = @*cint
global XrmString: type = @cstring
global function XrmStringToQuark(a1: cstring): cint <cimport,nodecl> end
global function XrmPermStringToQuark(a1: cstring): cint <cimport,nodecl> end
global function XrmQuarkToString(a1: cint): XrmString <cimport,nodecl> end
global function XrmUniqueQuark(): cint <cimport,nodecl> end
global XrmBinding: type <cimport,nodecl,using> = @enum(cint){
  XrmBindTightly = 0,
  XrmBindLoosely = 1
}
global XrmBindingList: type = @*cint
global function XrmStringToQuarkList(a1: cstring, a2: XrmQuarkList): void <cimport,nodecl> end
global function XrmStringToBindingQuarkList(a1: cstring, a2: XrmBindingList, a3: XrmQuarkList): void <cimport,nodecl> end
global XrmNameList: type = @*cint
global XrmClassList: type = @*cint
global XrmValue: type <cimport,nodecl> = @record{
  size: cuint,
  addr: XPointer
}
global XrmValuePtr: type = @*record{
  size: cuint,
  addr: XPointer
}
global XrmHashBucket: type = @pointer
global XrmHashTable: type = @*XrmHashBucket
global XrmDatabase: type = @pointer
global function XrmDestroyDatabase(a1: XrmDatabase): void <cimport,nodecl> end
global function XrmQPutResource(a1: *XrmDatabase, a2: XrmBindingList, a3: XrmQuarkList, a4: cint, a5: *XrmValue): void <cimport,nodecl> end
global function XrmPutResource(a1: *XrmDatabase, a2: cstring, a3: cstring, a4: *XrmValue): void <cimport,nodecl> end
global function XrmQPutStringResource(a1: *XrmDatabase, a2: XrmBindingList, a3: XrmQuarkList, a4: cstring): void <cimport,nodecl> end
global function XrmPutStringResource(a1: *XrmDatabase, a2: cstring, a3: cstring): void <cimport,nodecl> end
global function XrmPutLineResource(a1: *XrmDatabase, a2: cstring): void <cimport,nodecl> end
global function XrmQGetResource(a1: XrmDatabase, a2: XrmNameList, a3: XrmClassList, a4: *cint, a5: *XrmValue): cint <cimport,nodecl> end
global function XrmGetResource(a1: XrmDatabase, a2: cstring, a3: cstring, a4: *cstring, a5: *XrmValue): cint <cimport,nodecl> end
global function XrmQGetSearchList(a1: XrmDatabase, a2: XrmNameList, a3: XrmClassList, a4: *XrmHashTable, a5: cint): cint <cimport,nodecl> end
global function XrmQGetSearchResource(a1: *XrmHashTable, a2: cint, a3: cint, a4: *cint, a5: *XrmValue): cint <cimport,nodecl> end
global function XrmSetDatabase(a1: *Display, a2: XrmDatabase): void <cimport,nodecl> end
global function XrmGetDatabase(a1: *Display): XrmDatabase <cimport,nodecl> end
global function XrmGetFileDatabase(a1: cstring): XrmDatabase <cimport,nodecl> end
global function XrmCombineFileDatabase(a1: cstring, a2: *XrmDatabase, a3: cint): cint <cimport,nodecl> end
global function XrmGetStringDatabase(a1: cstring): XrmDatabase <cimport,nodecl> end
global function XrmPutFileDatabase(a1: XrmDatabase, a2: cstring): void <cimport,nodecl> end
global function XrmMergeDatabases(a1: XrmDatabase, a2: *XrmDatabase): void <cimport,nodecl> end
global function XrmCombineDatabase(a1: XrmDatabase, a2: *XrmDatabase, a3: cint): void <cimport,nodecl> end
global function XrmEnumerateDatabase(a1: XrmDatabase, a2: XrmNameList, a3: XrmClassList, a4: cint, a5: function(*XrmDatabase, XrmBindingList, XrmQuarkList, *cint, *XrmValue, XPointer): cint, a6: XPointer): cint <cimport,nodecl> end
global function XrmLocaleOfDatabase(a1: XrmDatabase): cstring <cimport,nodecl> end
global XrmOptionKind: type <cimport,nodecl,using> = @enum(cint){
  XrmoptionNoArg = 0,
  XrmoptionIsArg = 1,
  XrmoptionStickyArg = 2,
  XrmoptionSepArg = 3,
  XrmoptionResArg = 4,
  XrmoptionSkipArg = 5,
  XrmoptionSkipLine = 6,
  XrmoptionSkipNArgs = 7
}
global XrmOptionDescRec: type <cimport,nodecl> = @record{
  option: cstring,
  specifier: cstring,
  argKind: XrmOptionKind,
  value: XPointer
}
global XrmOptionDescList: type = @*record{
  option: cstring,
  specifier: cstring,
  argKind: XrmOptionKind,
  value: XPointer
}
global function XrmParseCommand(a1: *XrmDatabase, a2: XrmOptionDescList, a3: cint, a4: cstring, a5: *cint, a6: *cstring): void <cimport,nodecl> end
global XkbStateRec: type <cimport,nodecl> = @record{
  group: cuchar,
  locked_group: cuchar,
  base_group: cushort,
  latched_group: cushort,
  mods: cuchar,
  base_mods: cuchar,
  latched_mods: cuchar,
  locked_mods: cuchar,
  compat_state: cuchar,
  grab_mods: cuchar,
  compat_grab_mods: cuchar,
  lookup_mods: cuchar,
  compat_lookup_mods: cuchar,
  ptr_buttons: cushort
}
global XkbStatePtr: type = @*XkbStateRec
global XkbModsRec: type <cimport,nodecl> = @record{
  mask: cuchar,
  real_mods: cuchar,
  vmods: cushort
}
global XkbModsPtr: type = @*XkbModsRec
global XkbKTMapEntryRec: type <cimport,nodecl> = @record{
  active: cint,
  level: cuchar,
  mods: XkbModsRec
}
global XkbKTMapEntryPtr: type = @*XkbKTMapEntryRec
global XkbKeyTypeRec: type <cimport,nodecl> = @record{
  mods: XkbModsRec,
  num_levels: cuchar,
  map_count: cuchar,
  map: XkbKTMapEntryPtr,
  preserve: XkbModsPtr,
  name: Atom,
  level_names: *Atom
}
global XkbKeyTypePtr: type = @*XkbKeyTypeRec
global XkbBehavior: type <cimport,nodecl> = @record{
  type: cuchar,
  data: cuchar
}
global XkbAnyAction: type <cimport,nodecl> = @record{
  type: cuchar,
  data: [7]cuchar
}
global XkbModAction: type <cimport,nodecl> = @record{
  type: cuchar,
  flags: cuchar,
  mask: cuchar,
  real_mods: cuchar,
  vmods1: cuchar,
  vmods2: cuchar
}
global XkbGroupAction: type <cimport,nodecl> = @record{
  type: cuchar,
  flags: cuchar,
  group_XXX: cchar
}
global XkbISOAction: type <cimport,nodecl> = @record{
  type: cuchar,
  flags: cuchar,
  mask: cuchar,
  real_mods: cuchar,
  group_XXX: cchar,
  affect: cuchar,
  vmods1: cuchar,
  vmods2: cuchar
}
global XkbPtrAction: type <cimport,nodecl> = @record{
  type: cuchar,
  flags: cuchar,
  high_XXX: cuchar,
  low_XXX: cuchar,
  high_YYY: cuchar,
  low_YYY: cuchar
}
global XkbPtrBtnAction: type <cimport,nodecl> = @record{
  type: cuchar,
  flags: cuchar,
  count: cuchar,
  button: cuchar
}
global XkbPtrDfltAction: type <cimport,nodecl> = @record{
  type: cuchar,
  flags: cuchar,
  affect: cuchar,
  valueXXX: cchar
}
global XkbSwitchScreenAction: type <cimport,nodecl> = @record{
  type: cuchar,
  flags: cuchar,
  screenXXX: cchar
}
global XkbCtrlsAction: type <cimport,nodecl> = @record{
  type: cuchar,
  flags: cuchar,
  ctrls3: cuchar,
  ctrls2: cuchar,
  ctrls1: cuchar,
  ctrls0: cuchar
}
global XkbMessageAction: type <cimport,nodecl> = @record{
  type: cuchar,
  flags: cuchar,
  message: [6]cuchar
}
global XkbRedirectKeyAction: type <cimport,nodecl> = @record{
  type: cuchar,
  new_key: cuchar,
  mods_mask: cuchar,
  mods: cuchar,
  vmods_mask0: cuchar,
  vmods_mask1: cuchar,
  vmods0: cuchar,
  vmods1: cuchar
}
global XkbDeviceBtnAction: type <cimport,nodecl> = @record{
  type: cuchar,
  flags: cuchar,
  count: cuchar,
  button: cuchar,
  device: cuchar
}
global XkbDeviceValuatorAction: type <cimport,nodecl> = @record{
  type: cuchar,
  device: cuchar,
  v1_what: cuchar,
  v1_ndx: cuchar,
  v1_value: cuchar,
  v2_what: cuchar,
  v2_ndx: cuchar,
  v2_value: cuchar
}
global XkbAction: type <cimport,nodecl> = @union{
  any: XkbAnyAction,
  mods: XkbModAction,
  group: XkbGroupAction,
  iso: XkbISOAction,
  ptr: XkbPtrAction,
  btn: XkbPtrBtnAction,
  dflt: XkbPtrDfltAction,
  screen: XkbSwitchScreenAction,
  ctrls: XkbCtrlsAction,
  msg: XkbMessageAction,
  redirect: XkbRedirectKeyAction,
  devbtn: XkbDeviceBtnAction,
  devval: XkbDeviceValuatorAction,
  type: cuchar
}
global XkbControlsRec: type <cimport,nodecl> = @record{
  mk_dflt_btn: cuchar,
  num_groups: cuchar,
  groups_wrap: cuchar,
  internal: XkbModsRec,
  ignore_lock: XkbModsRec,
  enabled_ctrls: cuint,
  repeat_delay: cushort,
  repeat_interval: cushort,
  slow_keys_delay: cushort,
  debounce_delay: cushort,
  mk_delay: cushort,
  mk_interval: cushort,
  mk_time_to_max: cushort,
  mk_max_speed: cushort,
  mk_curve: cshort,
  ax_options: cushort,
  ax_timeout: cushort,
  axt_opts_mask: cushort,
  axt_opts_values: cushort,
  axt_ctrls_mask: cuint,
  axt_ctrls_values: cuint,
  per_key_repeat: [32]cuchar
}
global XkbControlsPtr: type = @*XkbControlsRec
global XkbServerMapRec: type <cimport,nodecl> = @record{
  num_acts: cushort,
  size_acts: cushort,
  acts: *XkbAction,
  behaviors: *XkbBehavior,
  key_acts: *cushort,
  explicit: *cuchar,
  vmods: [16]cuchar,
  vmodmap: *cushort
}
global XkbServerMapPtr: type = @*XkbServerMapRec
global XkbSymMapRec: type <cimport,nodecl> = @record{
  kt_index: [4]cuchar,
  group_info: cuchar,
  width: cuchar,
  offset: cushort
}
global XkbSymMapPtr: type = @*XkbSymMapRec
global XkbClientMapRec: type <cimport,nodecl> = @record{
  size_types: cuchar,
  num_types: cuchar,
  types: XkbKeyTypePtr,
  size_syms: cushort,
  num_syms: cushort,
  syms: *KeySym,
  key_sym_map: XkbSymMapPtr,
  modmap: *cuchar
}
global XkbClientMapPtr: type = @*XkbClientMapRec
global XkbSymInterpretRec: type <cimport,nodecl> = @record{
  sym: KeySym,
  flags: cuchar,
  match: cuchar,
  mods: cuchar,
  virtual_mod: cuchar,
  act: XkbAnyAction
}
global XkbSymInterpretPtr: type = @*XkbSymInterpretRec
global XkbCompatMapRec: type <cimport,nodecl> = @record{
  sym_interpret: XkbSymInterpretPtr,
  groups: [4]XkbModsRec,
  num_si: cushort,
  size_si: cushort
}
global XkbCompatMapPtr: type = @*XkbCompatMapRec
global XkbIndicatorMapRec: type <cimport,nodecl> = @record{
  flags: cuchar,
  which_groups: cuchar,
  groups: cuchar,
  which_mods: cuchar,
  mods: XkbModsRec,
  ctrls: cuint
}
global XkbIndicatorMapPtr: type = @*XkbIndicatorMapRec
global XkbIndicatorRec: type <cimport,nodecl> = @record{
  phys_indicators: culong,
  maps: [32]XkbIndicatorMapRec
}
global XkbIndicatorPtr: type = @*XkbIndicatorRec
global XkbKeyNameRec: type <cimport,nodecl> = @record{
  name: [4]cchar
}
global XkbKeyNamePtr: type = @*XkbKeyNameRec
global XkbKeyAliasRec: type <cimport,nodecl> = @record{
  real: [4]cchar,
  alias: [4]cchar
}
global XkbKeyAliasPtr: type = @*XkbKeyAliasRec
global XkbNamesRec: type <cimport,nodecl> = @record{
  keycodes: Atom,
  geometry: Atom,
  symbols: Atom,
  types: Atom,
  compat: Atom,
  vmods: [16]Atom,
  indicators: [32]Atom,
  groups: [4]Atom,
  keys: XkbKeyNamePtr,
  key_aliases: XkbKeyAliasPtr,
  radio_groups: *Atom,
  phys_symbols: Atom,
  num_keys: cuchar,
  num_key_aliases: cuchar,
  num_rg: cushort
}
global XkbNamesPtr: type = @*XkbNamesRec
global XkbGeometryPtr: type = @pointer
global XkbDescRec: type <cimport,nodecl> = @record{
  dpy: *Display,
  flags: cushort,
  device_spec: cushort,
  min_key_code: KeyCode,
  max_key_code: KeyCode,
  ctrls: XkbControlsPtr,
  server: XkbServerMapPtr,
  map: XkbClientMapPtr,
  indicators: XkbIndicatorPtr,
  names: XkbNamesPtr,
  compat: XkbCompatMapPtr,
  geom: XkbGeometryPtr
}
global XkbDescPtr: type = @*XkbDescRec
global XkbMapChangesRec: type <cimport,nodecl> = @record{
  changed: cushort,
  min_key_code: KeyCode,
  max_key_code: KeyCode,
  first_type: cuchar,
  num_types: cuchar,
  first_key_sym: KeyCode,
  num_key_syms: cuchar,
  first_key_act: KeyCode,
  num_key_acts: cuchar,
  first_key_behavior: KeyCode,
  num_key_behaviors: cuchar,
  first_key_explicit: KeyCode,
  num_key_explicit: cuchar,
  first_modmap_key: KeyCode,
  num_modmap_keys: cuchar,
  first_vmodmap_key: KeyCode,
  num_vmodmap_keys: cuchar,
  pad: cuchar,
  vmods: cushort
}
global XkbMapChangesPtr: type = @*XkbMapChangesRec
global XkbControlsChangesRec: type <cimport,nodecl> = @record{
  changed_ctrls: cuint,
  enabled_ctrls_changes: cuint,
  num_groups_changed: cint
}
global XkbControlsChangesPtr: type = @*XkbControlsChangesRec
global XkbIndicatorChangesRec: type <cimport,nodecl> = @record{
  state_changes: cuint,
  map_changes: cuint
}
global XkbIndicatorChangesPtr: type = @*XkbIndicatorChangesRec
global XkbNameChangesRec: type <cimport,nodecl> = @record{
  changed: cuint,
  first_type: cuchar,
  num_types: cuchar,
  first_lvl: cuchar,
  num_lvls: cuchar,
  num_aliases: cuchar,
  num_rg: cuchar,
  first_key: cuchar,
  num_keys: cuchar,
  changed_vmods: cushort,
  changed_indicators: culong,
  changed_groups: cuchar
}
global XkbNameChangesPtr: type = @*XkbNameChangesRec
global XkbCompatChangesRec: type <cimport,nodecl> = @record{
  changed_groups: cuchar,
  first_si: cushort,
  num_si: cushort
}
global XkbCompatChangesPtr: type = @*XkbCompatChangesRec
global XkbChangesRec: type <cimport,nodecl> = @record{
  device_spec: cushort,
  state_changes: cushort,
  map: XkbMapChangesRec,
  ctrls: XkbControlsChangesRec,
  indicators: XkbIndicatorChangesRec,
  names: XkbNameChangesRec,
  compat: XkbCompatChangesRec
}
global XkbChangesPtr: type = @*XkbChangesRec
global XkbComponentNamesRec: type <cimport,nodecl> = @record{
  keymap: cstring,
  keycodes: cstring,
  types: cstring,
  compat: cstring,
  symbols: cstring,
  geometry: cstring
}
global XkbComponentNamesPtr: type = @*XkbComponentNamesRec
global XkbComponentNameRec: type <cimport,nodecl> = @record{
  flags: cushort,
  name: cstring
}
global XkbComponentNamePtr: type = @*XkbComponentNameRec
global XkbComponentListRec: type <cimport,nodecl> = @record{
  num_keymaps: cint,
  num_keycodes: cint,
  num_types: cint,
  num_compat: cint,
  num_symbols: cint,
  num_geometry: cint,
  keymaps: XkbComponentNamePtr,
  keycodes: XkbComponentNamePtr,
  types: XkbComponentNamePtr,
  compat: XkbComponentNamePtr,
  symbols: XkbComponentNamePtr,
  geometry: XkbComponentNamePtr
}
global XkbComponentListPtr: type = @*XkbComponentListRec
global XkbDeviceLedInfoRec: type <cimport,nodecl> = @record{
  led_class: cushort,
  led_id: cushort,
  phys_indicators: cuint,
  maps_present: cuint,
  names_present: cuint,
  state: cuint,
  names: [32]Atom,
  maps: [32]XkbIndicatorMapRec
}
global XkbDeviceLedInfoPtr: type = @*XkbDeviceLedInfoRec
global XkbDeviceInfoRec: type <cimport,nodecl> = @record{
  name: cstring,
  type: Atom,
  device_spec: cushort,
  has_own_state: cint,
  supported: cushort,
  unsupported: cushort,
  num_btns: cushort,
  btn_acts: *XkbAction,
  sz_leds: cushort,
  num_leds: cushort,
  dflt_kbd_fb: cushort,
  dflt_led_fb: cushort,
  leds: XkbDeviceLedInfoPtr
}
global XkbDeviceInfoPtr: type = @*XkbDeviceInfoRec
global XkbDeviceLedChangesRec: type <cimport,nodecl> = @record{
  led_class: cushort,
  led_id: cushort,
  defined: cuint,
  next: *XkbDeviceLedChangesRec
}
global XkbDeviceLedChangesPtr: type = @*XkbDeviceLedChangesRec
global XkbDeviceChangesRec: type <cimport,nodecl> = @record{
  changed: cuint,
  first_btn: cushort,
  num_btns: cushort,
  leds: XkbDeviceLedChangesRec
}
global XkbDeviceChangesPtr: type = @*XkbDeviceChangesRec
global XkbAnyEvent: type <cimport,nodecl> = @record{
  type: cint,
  serial: culong,
  send_event: cint,
  display: *Display,
  time: Time,
  xkb_type: cint,
  device: cuint
}
global XkbNewKeyboardNotifyEvent: type <cimport,nodecl> = @record{
  type: cint,
  serial: culong,
  send_event: cint,
  display: *Display,
  time: Time,
  xkb_type: cint,
  device: cint,
  old_device: cint,
  min_key_code: cint,
  max_key_code: cint,
  old_min_key_code: cint,
  old_max_key_code: cint,
  changed: cuint,
  req_major: cchar,
  req_minor: cchar
}
global XkbMapNotifyEvent: type <cimport,nodecl> = @record{
  type: cint,
  serial: culong,
  send_event: cint,
  display: *Display,
  time: Time,
  xkb_type: cint,
  device: cint,
  changed: cuint,
  flags: cuint,
  first_type: cint,
  num_types: cint,
  min_key_code: KeyCode,
  max_key_code: KeyCode,
  first_key_sym: KeyCode,
  first_key_act: KeyCode,
  first_key_behavior: KeyCode,
  first_key_explicit: KeyCode,
  first_modmap_key: KeyCode,
  first_vmodmap_key: KeyCode,
  num_key_syms: cint,
  num_key_acts: cint,
  num_key_behaviors: cint,
  num_key_explicit: cint,
  num_modmap_keys: cint,
  num_vmodmap_keys: cint,
  vmods: cuint
}
global XkbStateNotifyEvent: type <cimport,nodecl> = @record{
  type: cint,
  serial: culong,
  send_event: cint,
  display: *Display,
  time: Time,
  xkb_type: cint,
  device: cint,
  changed: cuint,
  group: cint,
  base_group: cint,
  latched_group: cint,
  locked_group: cint,
  mods: cuint,
  base_mods: cuint,
  latched_mods: cuint,
  locked_mods: cuint,
  compat_state: cint,
  grab_mods: cuchar,
  compat_grab_mods: cuchar,
  lookup_mods: cuchar,
  compat_lookup_mods: cuchar,
  ptr_buttons: cint,
  keycode: KeyCode,
  event_type: cchar,
  req_major: cchar,
  req_minor: cchar
}
global XkbControlsNotifyEvent: type <cimport,nodecl> = @record{
  type: cint,
  serial: culong,
  send_event: cint,
  display: *Display,
  time: Time,
  xkb_type: cint,
  device: cint,
  changed_ctrls: cuint,
  enabled_ctrls: cuint,
  enabled_ctrl_changes: cuint,
  num_groups: cint,
  keycode: KeyCode,
  event_type: cchar,
  req_major: cchar,
  req_minor: cchar
}
global XkbIndicatorNotifyEvent: type <cimport,nodecl> = @record{
  type: cint,
  serial: culong,
  send_event: cint,
  display: *Display,
  time: Time,
  xkb_type: cint,
  device: cint,
  changed: cuint,
  state: cuint
}
global XkbNamesNotifyEvent: type <cimport,nodecl> = @record{
  type: cint,
  serial: culong,
  send_event: cint,
  display: *Display,
  time: Time,
  xkb_type: cint,
  device: cint,
  changed: cuint,
  first_type: cint,
  num_types: cint,
  first_lvl: cint,
  num_lvls: cint,
  num_aliases: cint,
  num_radio_groups: cint,
  changed_vmods: cuint,
  changed_groups: cuint,
  changed_indicators: cuint,
  first_key: cint,
  num_keys: cint
}
global XkbCompatMapNotifyEvent: type <cimport,nodecl> = @record{
  type: cint,
  serial: culong,
  send_event: cint,
  display: *Display,
  time: Time,
  xkb_type: cint,
  device: cint,
  changed_groups: cuint,
  first_si: cint,
  num_si: cint,
  num_total_si: cint
}
global XkbBellNotifyEvent: type <cimport,nodecl> = @record{
  type: cint,
  serial: culong,
  send_event: cint,
  display: *Display,
  time: Time,
  xkb_type: cint,
  device: cint,
  percent: cint,
  pitch: cint,
  duration: cint,
  bell_class: cint,
  bell_id: cint,
  name: Atom,
  window: Window,
  event_only: cint
}
global XkbActionMessageEvent: type <cimport,nodecl> = @record{
  type: cint,
  serial: culong,
  send_event: cint,
  display: *Display,
  time: Time,
  xkb_type: cint,
  device: cint,
  keycode: KeyCode,
  press: cint,
  key_event_follows: cint,
  group: cint,
  mods: cuint,
  message: [7]cchar
}
global XkbAccessXNotifyEvent: type <cimport,nodecl> = @record{
  type: cint,
  serial: culong,
  send_event: cint,
  display: *Display,
  time: Time,
  xkb_type: cint,
  device: cint,
  detail: cint,
  keycode: cint,
  sk_delay: cint,
  debounce_delay: cint
}
global XkbExtensionDeviceNotifyEvent: type <cimport,nodecl> = @record{
  type: cint,
  serial: culong,
  send_event: cint,
  display: *Display,
  time: Time,
  xkb_type: cint,
  device: cint,
  reason: cuint,
  supported: cuint,
  unsupported: cuint,
  first_btn: cint,
  num_btns: cint,
  leds_defined: cuint,
  led_state: cuint,
  led_class: cint,
  led_id: cint
}
global XkbEvent: type <cimport,nodecl> = @union{
  type: cint,
  any: XkbAnyEvent,
  new_kbd: XkbNewKeyboardNotifyEvent,
  map: XkbMapNotifyEvent,
  state: XkbStateNotifyEvent,
  ctrls: XkbControlsNotifyEvent,
  indicators: XkbIndicatorNotifyEvent,
  names: XkbNamesNotifyEvent,
  compat: XkbCompatMapNotifyEvent,
  bell: XkbBellNotifyEvent,
  message: XkbActionMessageEvent,
  accessx: XkbAccessXNotifyEvent,
  device: XkbExtensionDeviceNotifyEvent,
  core: XEvent
}
global XkbKbdDpyStateRec: type <cimport,nodecl,forwarddecl> = @record{}
global XkbKbdDpyStatePtr: type = @*XkbKbdDpyStateRec
global function XkbIgnoreExtension(a1: cint): cint <cimport,nodecl> end
global function XkbOpenDisplay(a1: cstring, a2: *cint, a3: *cint, a4: *cint, a5: *cint, a6: *cint): *Display <cimport,nodecl> end
global function XkbQueryExtension(a1: *Display, a2: *cint, a3: *cint, a4: *cint, a5: *cint, a6: *cint): cint <cimport,nodecl> end
global function XkbUseExtension(a1: *Display, a2: *cint, a3: *cint): cint <cimport,nodecl> end
global function XkbLibraryVersion(a1: *cint, a2: *cint): cint <cimport,nodecl> end
global function XkbSetXlibControls(a1: *Display, a2: cuint, a3: cuint): cuint <cimport,nodecl> end
global function XkbGetXlibControls(a1: *Display): cuint <cimport,nodecl> end
global function XkbXlibControlsImplemented(): cuint <cimport,nodecl> end
global XkbInternAtomFunc: type <cimport,nodecl> = @function(*Display, cstring, cint): Atom
global XkbGetAtomNameFunc: type <cimport,nodecl> = @function(*Display, Atom): cstring
global function XkbSetAtomFuncs(a1: XkbInternAtomFunc, a2: XkbGetAtomNameFunc): void <cimport,nodecl> end
global function XkbKeycodeToKeysym(a1: *Display, a2: KeyCode, a3: cint, a4: cint): KeySym <cimport,nodecl> end
global function XkbKeysymToModifiers(a1: *Display, a2: KeySym): cuint <cimport,nodecl> end
global function XkbLookupKeySym(a1: *Display, a2: KeyCode, a3: cuint, a4: *cuint, a5: *KeySym): cint <cimport,nodecl> end
global function XkbLookupKeyBinding(a1: *Display, a2: KeySym, a3: cuint, a4: cstring, a5: cint, a6: *cint): cint <cimport,nodecl> end
global function XkbTranslateKeyCode(a1: XkbDescPtr, a2: KeyCode, a3: cuint, a4: *cuint, a5: *KeySym): cint <cimport,nodecl> end
global function XkbTranslateKeySym(a1: *Display, a2: *KeySym, a3: cuint, a4: cstring, a5: cint, a6: *cint): cint <cimport,nodecl> end
global function XkbSetAutoRepeatRate(a1: *Display, a2: cuint, a3: cuint, a4: cuint): cint <cimport,nodecl> end
global function XkbGetAutoRepeatRate(a1: *Display, a2: cuint, a3: *cuint, a4: *cuint): cint <cimport,nodecl> end
global function XkbChangeEnabledControls(a1: *Display, a2: cuint, a3: cuint, a4: cuint): cint <cimport,nodecl> end
global function XkbDeviceBell(a1: *Display, a2: Window, a3: cint, a4: cint, a5: cint, a6: cint, a7: Atom): cint <cimport,nodecl> end
global function XkbForceDeviceBell(a1: *Display, a2: cint, a3: cint, a4: cint, a5: cint): cint <cimport,nodecl> end
global function XkbDeviceBellEvent(a1: *Display, a2: Window, a3: cint, a4: cint, a5: cint, a6: cint, a7: Atom): cint <cimport,nodecl> end
global function XkbBell(a1: *Display, a2: Window, a3: cint, a4: Atom): cint <cimport,nodecl> end
global function XkbForceBell(a1: *Display, a2: cint): cint <cimport,nodecl> end
global function XkbBellEvent(a1: *Display, a2: Window, a3: cint, a4: Atom): cint <cimport,nodecl> end
global function XkbSelectEvents(a1: *Display, a2: cuint, a3: cuint, a4: cuint): cint <cimport,nodecl> end
global function XkbSelectEventDetails(a1: *Display, a2: cuint, a3: cuint, a4: culong, a5: culong): cint <cimport,nodecl> end
global function XkbNoteMapChanges(a1: XkbMapChangesPtr, a2: *XkbMapNotifyEvent, a3: cuint): void <cimport,nodecl> end
global function XkbNoteNameChanges(a1: XkbNameChangesPtr, a2: *XkbNamesNotifyEvent, a3: cuint): void <cimport,nodecl> end
global function XkbGetIndicatorState(a1: *Display, a2: cuint, a3: *cuint): cint <cimport,nodecl> end
global function XkbGetDeviceIndicatorState(a1: *Display, a2: cuint, a3: cuint, a4: cuint, a5: *cuint): cint <cimport,nodecl> end
global function XkbGetIndicatorMap(a1: *Display, a2: culong, a3: XkbDescPtr): cint <cimport,nodecl> end
global function XkbSetIndicatorMap(a1: *Display, a2: culong, a3: XkbDescPtr): cint <cimport,nodecl> end
global function XkbGetNamedIndicator(a1: *Display, a2: Atom, a3: *cint, a4: *cint, a5: XkbIndicatorMapPtr, a6: *cint): cint <cimport,nodecl> end
global function XkbGetNamedDeviceIndicator(a1: *Display, a2: cuint, a3: cuint, a4: cuint, a5: Atom, a6: *cint, a7: *cint, a8: XkbIndicatorMapPtr, a9: *cint): cint <cimport,nodecl> end
global function XkbSetNamedIndicator(a1: *Display, a2: Atom, a3: cint, a4: cint, a5: cint, a6: XkbIndicatorMapPtr): cint <cimport,nodecl> end
global function XkbSetNamedDeviceIndicator(a1: *Display, a2: cuint, a3: cuint, a4: cuint, a5: Atom, a6: cint, a7: cint, a8: cint, a9: XkbIndicatorMapPtr): cint <cimport,nodecl> end
global function XkbLockModifiers(a1: *Display, a2: cuint, a3: cuint, a4: cuint): cint <cimport,nodecl> end
global function XkbLatchModifiers(a1: *Display, a2: cuint, a3: cuint, a4: cuint): cint <cimport,nodecl> end
global function XkbLockGroup(a1: *Display, a2: cuint, a3: cuint): cint <cimport,nodecl> end
global function XkbLatchGroup(a1: *Display, a2: cuint, a3: cuint): cint <cimport,nodecl> end
global function XkbSetServerInternalMods(a1: *Display, a2: cuint, a3: cuint, a4: cuint, a5: cuint, a6: cuint): cint <cimport,nodecl> end
global function XkbSetIgnoreLockMods(a1: *Display, a2: cuint, a3: cuint, a4: cuint, a5: cuint, a6: cuint): cint <cimport,nodecl> end
global function XkbVirtualModsToReal(a1: XkbDescPtr, a2: cuint, a3: *cuint): cint <cimport,nodecl> end
global function XkbComputeEffectiveMap(a1: XkbDescPtr, a2: XkbKeyTypePtr, a3: *cuchar): cint <cimport,nodecl> end
global function XkbInitCanonicalKeyTypes(a1: XkbDescPtr, a2: cuint, a3: cint): cint <cimport,nodecl> end
global function XkbAllocKeyboard(): XkbDescPtr <cimport,nodecl> end
global function XkbFreeKeyboard(a1: XkbDescPtr, a2: cuint, a3: cint): void <cimport,nodecl> end
global function XkbAllocClientMap(a1: XkbDescPtr, a2: cuint, a3: cuint): cint <cimport,nodecl> end
global function XkbAllocServerMap(a1: XkbDescPtr, a2: cuint, a3: cuint): cint <cimport,nodecl> end
global function XkbFreeClientMap(a1: XkbDescPtr, a2: cuint, a3: cint): void <cimport,nodecl> end
global function XkbFreeServerMap(a1: XkbDescPtr, a2: cuint, a3: cint): void <cimport,nodecl> end
global function XkbAddKeyType(a1: XkbDescPtr, a2: Atom, a3: cint, a4: cint, a5: cint): XkbKeyTypePtr <cimport,nodecl> end
global function XkbAllocIndicatorMaps(a1: XkbDescPtr): cint <cimport,nodecl> end
global function XkbFreeIndicatorMaps(a1: XkbDescPtr): void <cimport,nodecl> end
global function XkbGetMap(a1: *Display, a2: cuint, a3: cuint): XkbDescPtr <cimport,nodecl> end
global function XkbGetUpdatedMap(a1: *Display, a2: cuint, a3: XkbDescPtr): cint <cimport,nodecl> end
global function XkbGetMapChanges(a1: *Display, a2: XkbDescPtr, a3: XkbMapChangesPtr): cint <cimport,nodecl> end
global function XkbRefreshKeyboardMapping(a1: *XkbMapNotifyEvent): cint <cimport,nodecl> end
global function XkbGetKeyTypes(a1: *Display, a2: cuint, a3: cuint, a4: XkbDescPtr): cint <cimport,nodecl> end
global function XkbGetKeySyms(a1: *Display, a2: cuint, a3: cuint, a4: XkbDescPtr): cint <cimport,nodecl> end
global function XkbGetKeyActions(a1: *Display, a2: cuint, a3: cuint, a4: XkbDescPtr): cint <cimport,nodecl> end
global function XkbGetKeyBehaviors(a1: *Display, a2: cuint, a3: cuint, a4: XkbDescPtr): cint <cimport,nodecl> end
global function XkbGetVirtualMods(a1: *Display, a2: cuint, a3: XkbDescPtr): cint <cimport,nodecl> end
global function XkbGetKeyExplicitComponents(a1: *Display, a2: cuint, a3: cuint, a4: XkbDescPtr): cint <cimport,nodecl> end
global function XkbGetKeyModifierMap(a1: *Display, a2: cuint, a3: cuint, a4: XkbDescPtr): cint <cimport,nodecl> end
global function XkbGetKeyVirtualModMap(a1: *Display, a2: cuint, a3: cuint, a4: XkbDescPtr): cint <cimport,nodecl> end
global function XkbAllocControls(a1: XkbDescPtr, a2: cuint): cint <cimport,nodecl> end
global function XkbFreeControls(a1: XkbDescPtr, a2: cuint, a3: cint): void <cimport,nodecl> end
global function XkbGetControls(a1: *Display, a2: culong, a3: XkbDescPtr): cint <cimport,nodecl> end
global function XkbSetControls(a1: *Display, a2: culong, a3: XkbDescPtr): cint <cimport,nodecl> end
global function XkbNoteControlsChanges(a1: XkbControlsChangesPtr, a2: *XkbControlsNotifyEvent, a3: cuint): void <cimport,nodecl> end
global function XkbAllocCompatMap(a1: XkbDescPtr, a2: cuint, a3: cuint): cint <cimport,nodecl> end
global function XkbFreeCompatMap(a1: XkbDescPtr, a2: cuint, a3: cint): void <cimport,nodecl> end
global function XkbGetCompatMap(a1: *Display, a2: cuint, a3: XkbDescPtr): cint <cimport,nodecl> end
global function XkbSetCompatMap(a1: *Display, a2: cuint, a3: XkbDescPtr, a4: cint): cint <cimport,nodecl> end
global function XkbAddSymInterpret(a1: XkbDescPtr, a2: XkbSymInterpretPtr, a3: cint, a4: XkbChangesPtr): XkbSymInterpretPtr <cimport,nodecl> end
global function XkbAllocNames(a1: XkbDescPtr, a2: cuint, a3: cint, a4: cint): cint <cimport,nodecl> end
global function XkbGetNames(a1: *Display, a2: cuint, a3: XkbDescPtr): cint <cimport,nodecl> end
global function XkbSetNames(a1: *Display, a2: cuint, a3: cuint, a4: cuint, a5: XkbDescPtr): cint <cimport,nodecl> end
global function XkbChangeNames(a1: *Display, a2: XkbDescPtr, a3: XkbNameChangesPtr): cint <cimport,nodecl> end
global function XkbFreeNames(a1: XkbDescPtr, a2: cuint, a3: cint): void <cimport,nodecl> end
global function XkbGetState(a1: *Display, a2: cuint, a3: XkbStatePtr): cint <cimport,nodecl> end
global function XkbSetMap(a1: *Display, a2: cuint, a3: XkbDescPtr): cint <cimport,nodecl> end
global function XkbChangeMap(a1: *Display, a2: XkbDescPtr, a3: XkbMapChangesPtr): cint <cimport,nodecl> end
global function XkbSetDetectableAutoRepeat(a1: *Display, a2: cint, a3: *cint): cint <cimport,nodecl> end
global function XkbGetDetectableAutoRepeat(a1: *Display, a2: *cint): cint <cimport,nodecl> end
global function XkbSetAutoResetControls(a1: *Display, a2: cuint, a3: *cuint, a4: *cuint): cint <cimport,nodecl> end
global function XkbGetAutoResetControls(a1: *Display, a2: *cuint, a3: *cuint): cint <cimport,nodecl> end
global function XkbSetPerClientControls(a1: *Display, a2: cuint, a3: *cuint): cint <cimport,nodecl> end
global function XkbGetPerClientControls(a1: *Display, a2: *cuint): cint <cimport,nodecl> end
global function XkbCopyKeyType(a1: XkbKeyTypePtr, a2: XkbKeyTypePtr): cint <cimport,nodecl> end
global function XkbCopyKeyTypes(a1: XkbKeyTypePtr, a2: XkbKeyTypePtr, a3: cint): cint <cimport,nodecl> end
global function XkbResizeKeyType(a1: XkbDescPtr, a2: cint, a3: cint, a4: cint, a5: cint): cint <cimport,nodecl> end
global function XkbResizeKeySyms(a1: XkbDescPtr, a2: cint, a3: cint): *KeySym <cimport,nodecl> end
global function XkbResizeKeyActions(a1: XkbDescPtr, a2: cint, a3: cint): *XkbAction <cimport,nodecl> end
global function XkbChangeTypesOfKey(a1: XkbDescPtr, a2: cint, a3: cint, a4: cuint, a5: *cint, a6: XkbMapChangesPtr): cint <cimport,nodecl> end
global function XkbChangeKeycodeRange(a1: XkbDescPtr, a2: cint, a3: cint, a4: XkbChangesPtr): cint <cimport,nodecl> end
global function XkbListComponents(a1: *Display, a2: cuint, a3: XkbComponentNamesPtr, a4: *cint): XkbComponentListPtr <cimport,nodecl> end
global function XkbFreeComponentList(a1: XkbComponentListPtr): void <cimport,nodecl> end
global function XkbGetKeyboard(a1: *Display, a2: cuint, a3: cuint): XkbDescPtr <cimport,nodecl> end
global function XkbGetKeyboardByName(a1: *Display, a2: cuint, a3: XkbComponentNamesPtr, a4: cuint, a5: cuint, a6: cint): XkbDescPtr <cimport,nodecl> end
global function XkbKeyTypesForCoreSymbols(a1: XkbDescPtr, a2: cint, a3: *KeySym, a4: cuint, a5: *cint, a6: *KeySym): cint <cimport,nodecl> end
global function XkbApplyCompatMapToKey(a1: XkbDescPtr, a2: KeyCode, a3: XkbChangesPtr): cint <cimport,nodecl> end
global function XkbUpdateMapFromCore(a1: XkbDescPtr, a2: KeyCode, a3: cint, a4: cint, a5: *KeySym, a6: XkbChangesPtr): cint <cimport,nodecl> end
global function XkbAddDeviceLedInfo(a1: XkbDeviceInfoPtr, a2: cuint, a3: cuint): XkbDeviceLedInfoPtr <cimport,nodecl> end
global function XkbResizeDeviceButtonActions(a1: XkbDeviceInfoPtr, a2: cuint): cint <cimport,nodecl> end
global function XkbAllocDeviceInfo(a1: cuint, a2: cuint, a3: cuint): XkbDeviceInfoPtr <cimport,nodecl> end
global function XkbFreeDeviceInfo(a1: XkbDeviceInfoPtr, a2: cuint, a3: cint): void <cimport,nodecl> end
global function XkbNoteDeviceChanges(a1: XkbDeviceChangesPtr, a2: *XkbExtensionDeviceNotifyEvent, a3: cuint): void <cimport,nodecl> end
global function XkbGetDeviceInfo(a1: *Display, a2: cuint, a3: cuint, a4: cuint, a5: cuint): XkbDeviceInfoPtr <cimport,nodecl> end
global function XkbGetDeviceInfoChanges(a1: *Display, a2: XkbDeviceInfoPtr, a3: XkbDeviceChangesPtr): cint <cimport,nodecl> end
global function XkbGetDeviceButtonActions(a1: *Display, a2: XkbDeviceInfoPtr, a3: cint, a4: cuint, a5: cuint): cint <cimport,nodecl> end
global function XkbGetDeviceLedInfo(a1: *Display, a2: XkbDeviceInfoPtr, a3: cuint, a4: cuint, a5: cuint): cint <cimport,nodecl> end
global function XkbSetDeviceInfo(a1: *Display, a2: cuint, a3: XkbDeviceInfoPtr): cint <cimport,nodecl> end
global function XkbChangeDeviceInfo(a1: *Display, a2: XkbDeviceInfoPtr, a3: XkbDeviceChangesPtr): cint <cimport,nodecl> end
global function XkbSetDeviceLedInfo(a1: *Display, a2: XkbDeviceInfoPtr, a3: cuint, a4: cuint, a5: cuint): cint <cimport,nodecl> end
global function XkbSetDeviceButtonActions(a1: *Display, a2: XkbDeviceInfoPtr, a3: cuint, a4: cuint): cint <cimport,nodecl> end
global function XkbToControl(a1: cchar): cchar <cimport,nodecl> end
global function XkbSetDebuggingFlags(a1: *Display, a2: cuint, a3: cuint, a4: cstring, a5: cuint, a6: cuint, a7: *cuint, a8: *cuint): cint <cimport,nodecl> end
global function XkbApplyVirtualModChanges(a1: XkbDescPtr, a2: cuint, a3: XkbChangesPtr): cint <cimport,nodecl> end
global function XkbUpdateActionVirtualMods(a1: XkbDescPtr, a2: *XkbAction, a3: cuint): cint <cimport,nodecl> end
global function XkbUpdateKeyTypeVirtualMods(a1: XkbDescPtr, a2: XkbKeyTypePtr, a3: cuint, a4: XkbChangesPtr): void <cimport,nodecl> end
global XExtensionVersion: type <cimport,nodecl> = @record{
  present: cint,
  major_version: cshort,
  minor_version: cshort
}
global XAnyClassPtr: type = @pointer
global XDeviceKeyEvent: type <cimport,nodecl> = @record{
  type: cint,
  serial: culong,
  send_event: cint,
  display: *Display,
  window: Window,
  deviceid: culong,
  root: Window,
  subwindow: Window,
  time: Time,
  x: cint,
  y: cint,
  x_root: cint,
  y_root: cint,
  state: cuint,
  keycode: cuint,
  same_screen: cint,
  device_state: cuint,
  axes_count: cuchar,
  first_axis: cuchar,
  axis_data: [6]cint
}
global XDeviceKeyPressedEvent: type = @XDeviceKeyEvent
global XDeviceKeyReleasedEvent: type = @XDeviceKeyEvent
global XDeviceButtonEvent: type <cimport,nodecl> = @record{
  type: cint,
  serial: culong,
  send_event: cint,
  display: *Display,
  window: Window,
  deviceid: culong,
  root: Window,
  subwindow: Window,
  time: Time,
  x: cint,
  y: cint,
  x_root: cint,
  y_root: cint,
  state: cuint,
  button: cuint,
  same_screen: cint,
  device_state: cuint,
  axes_count: cuchar,
  first_axis: cuchar,
  axis_data: [6]cint
}
global XDeviceButtonPressedEvent: type = @XDeviceButtonEvent
global XDeviceButtonReleasedEvent: type = @XDeviceButtonEvent
global XDeviceMotionEvent: type <cimport,nodecl> = @record{
  type: cint,
  serial: culong,
  send_event: cint,
  display: *Display,
  window: Window,
  deviceid: culong,
  root: Window,
  subwindow: Window,
  time: Time,
  x: cint,
  y: cint,
  x_root: cint,
  y_root: cint,
  state: cuint,
  is_hint: cchar,
  same_screen: cint,
  device_state: cuint,
  axes_count: cuchar,
  first_axis: cuchar,
  axis_data: [6]cint
}
global XDeviceFocusChangeEvent: type <cimport,nodecl> = @record{
  type: cint,
  serial: culong,
  send_event: cint,
  display: *Display,
  window: Window,
  deviceid: culong,
  mode: cint,
  detail: cint,
  time: Time
}
global XDeviceFocusInEvent: type = @XDeviceFocusChangeEvent
global XDeviceFocusOutEvent: type = @XDeviceFocusChangeEvent
global XProximityNotifyEvent: type <cimport,nodecl> = @record{
  type: cint,
  serial: culong,
  send_event: cint,
  display: *Display,
  window: Window,
  deviceid: culong,
  root: Window,
  subwindow: Window,
  time: Time,
  x: cint,
  y: cint,
  x_root: cint,
  y_root: cint,
  state: cuint,
  same_screen: cint,
  device_state: cuint,
  axes_count: cuchar,
  first_axis: cuchar,
  axis_data: [6]cint
}
global XProximityInEvent: type = @XProximityNotifyEvent
global XProximityOutEvent: type = @XProximityNotifyEvent
global XInputClass: type <cimport,nodecl> = @record{
  class: cuchar,
  length: cuchar
}
global XDeviceStateNotifyEvent: type <cimport,nodecl> = @record{
  type: cint,
  serial: culong,
  send_event: cint,
  display: *Display,
  window: Window,
  deviceid: culong,
  time: Time,
  num_classes: cint,
  data: [64]cchar
}
global XValuatorStatus: type <cimport,nodecl> = @record{
  class: cuchar,
  length: cuchar,
  num_valuators: cuchar,
  mode: cuchar,
  valuators: [6]cint
}
global XKeyStatus: type <cimport,nodecl> = @record{
  class: cuchar,
  length: cuchar,
  num_keys: cshort,
  keys: [32]cchar
}
global XButtonStatus: type <cimport,nodecl> = @record{
  class: cuchar,
  length: cuchar,
  num_buttons: cshort,
  buttons: [32]cchar
}
global XDeviceMappingEvent: type <cimport,nodecl> = @record{
  type: cint,
  serial: culong,
  send_event: cint,
  display: *Display,
  window: Window,
  deviceid: culong,
  time: Time,
  request: cint,
  first_keycode: cint,
  count: cint
}
global XChangeDeviceNotifyEvent: type <cimport,nodecl> = @record{
  type: cint,
  serial: culong,
  send_event: cint,
  display: *Display,
  window: Window,
  deviceid: culong,
  time: Time,
  request: cint
}
global XDevicePresenceNotifyEvent: type <cimport,nodecl> = @record{
  type: cint,
  serial: culong,
  send_event: cint,
  display: *Display,
  window: Window,
  time: Time,
  devchange: cint,
  deviceid: culong,
  control: culong
}
global XDevicePropertyNotifyEvent: type <cimport,nodecl> = @record{
  type: cint,
  serial: culong,
  send_event: cint,
  display: *Display,
  window: Window,
  time: Time,
  deviceid: culong,
  atom: Atom,
  state: cint
}
global XFeedbackState: type <cimport,nodecl> = @record{
  class: culong,
  length: cint,
  id: culong
}
global XKbdFeedbackState: type <cimport,nodecl> = @record{
  class: culong,
  length: cint,
  id: culong,
  click: cint,
  percent: cint,
  pitch: cint,
  duration: cint,
  led_mask: cint,
  global_auto_repeat: cint,
  auto_repeats: [32]cchar
}
global XPtrFeedbackState: type <cimport,nodecl> = @record{
  class: culong,
  length: cint,
  id: culong,
  accelNum: cint,
  accelDenom: cint,
  threshold: cint
}
global XIntegerFeedbackState: type <cimport,nodecl> = @record{
  class: culong,
  length: cint,
  id: culong,
  resolution: cint,
  minVal: cint,
  maxVal: cint
}
global XStringFeedbackState: type <cimport,nodecl> = @record{
  class: culong,
  length: cint,
  id: culong,
  max_symbols: cint,
  num_syms_supported: cint,
  syms_supported: *KeySym
}
global XBellFeedbackState: type <cimport,nodecl> = @record{
  class: culong,
  length: cint,
  id: culong,
  percent: cint,
  pitch: cint,
  duration: cint
}
global XLedFeedbackState: type <cimport,nodecl> = @record{
  class: culong,
  length: cint,
  id: culong,
  led_values: cint,
  led_mask: cint
}
global XFeedbackControl: type <cimport,nodecl> = @record{
  class: culong,
  length: cint,
  id: culong
}
global XPtrFeedbackControl: type <cimport,nodecl> = @record{
  class: culong,
  length: cint,
  id: culong,
  accelNum: cint,
  accelDenom: cint,
  threshold: cint
}
global XKbdFeedbackControl: type <cimport,nodecl> = @record{
  class: culong,
  length: cint,
  id: culong,
  click: cint,
  percent: cint,
  pitch: cint,
  duration: cint,
  led_mask: cint,
  led_value: cint,
  key: cint,
  auto_repeat_mode: cint
}
global XStringFeedbackControl: type <cimport,nodecl> = @record{
  class: culong,
  length: cint,
  id: culong,
  num_keysyms: cint,
  syms_to_display: *KeySym
}
global XIntegerFeedbackControl: type <cimport,nodecl> = @record{
  class: culong,
  length: cint,
  id: culong,
  int_to_display: cint
}
global XBellFeedbackControl: type <cimport,nodecl> = @record{
  class: culong,
  length: cint,
  id: culong,
  percent: cint,
  pitch: cint,
  duration: cint
}
global XLedFeedbackControl: type <cimport,nodecl> = @record{
  class: culong,
  length: cint,
  id: culong,
  led_mask: cint,
  led_values: cint
}
global XDeviceControl: type <cimport,nodecl> = @record{
  control: culong,
  length: cint
}
global XDeviceResolutionControl: type <cimport,nodecl> = @record{
  control: culong,
  length: cint,
  first_valuator: cint,
  num_valuators: cint,
  resolutions: *cint
}
global XDeviceResolutionState: type <cimport,nodecl> = @record{
  control: culong,
  length: cint,
  num_valuators: cint,
  resolutions: *cint,
  min_resolutions: *cint,
  max_resolutions: *cint
}
global XDeviceAbsCalibControl: type <cimport,nodecl> = @record{
  control: culong,
  length: cint,
  min_x: cint,
  max_x: cint,
  min_y: cint,
  max_y: cint,
  flip_x: cint,
  flip_y: cint,
  rotation: cint,
  button_threshold: cint
}
global XDeviceAbsCalibState: type = @XDeviceAbsCalibControl
global XDeviceAbsAreaControl: type <cimport,nodecl> = @record{
  control: culong,
  length: cint,
  offset_x: cint,
  offset_y: cint,
  width: cint,
  height: cint,
  screen: cint,
  following: culong
}
global XDeviceAbsAreaState: type = @XDeviceAbsAreaControl
global XDeviceCoreControl: type <cimport,nodecl> = @record{
  control: culong,
  length: cint,
  status: cint
}
global XDeviceCoreState: type <cimport,nodecl> = @record{
  control: culong,
  length: cint,
  status: cint,
  iscore: cint
}
global XDeviceEnableControl: type <cimport,nodecl> = @record{
  control: culong,
  length: cint,
  enable: cint
}
global XDeviceEnableState: type = @XDeviceEnableControl
global XAnyClassInfo: type <cimport,nodecl> = @record{
  class: culong,
  length: cint
}
global XDeviceInfoPtr: type = @pointer
global XDeviceInfo: type <cimport,nodecl> = @record{
  id: culong,
  type: Atom,
  name: cstring,
  num_classes: cint,
  use: cint,
  inputclassinfo: XAnyClassPtr
}
global XKeyInfoPtr: type = @pointer
global XKeyInfo: type <cimport,nodecl> = @record{
  class: culong,
  length: cint,
  min_keycode: cushort,
  max_keycode: cushort,
  num_keys: cushort
}
global XButtonInfoPtr: type = @pointer
global XButtonInfo: type <cimport,nodecl> = @record{
  class: culong,
  length: cint,
  num_buttons: cshort
}
global XAxisInfoPtr: type = @pointer
global XAxisInfo: type <cimport,nodecl> = @record{
  resolution: cint,
  min_value: cint,
  max_value: cint
}
global XValuatorInfoPtr: type = @pointer
global XValuatorInfo: type <cimport,nodecl> = @record{
  class: culong,
  length: cint,
  num_axes: cuchar,
  mode: cuchar,
  motion_buffer: culong,
  axes: XAxisInfoPtr
}
global XInputClassInfo: type <cimport,nodecl> = @record{
  input_class: cuchar,
  event_type_base: cuchar
}
global XDevice: type <cimport,nodecl> = @record{
  device_id: culong,
  num_classes: cint,
  classes: *XInputClassInfo
}
global XEventList: type <cimport,nodecl> = @record{
  event_type: culong,
  device: culong
}
global XDeviceTimeCoord: type <cimport,nodecl> = @record{
  time: Time,
  data: *cint
}
global XDeviceState: type <cimport,nodecl> = @record{
  device_id: culong,
  num_classes: cint,
  data: *XInputClass
}
global XValuatorState: type <cimport,nodecl> = @record{
  class: cuchar,
  length: cuchar,
  num_valuators: cuchar,
  mode: cuchar,
  valuators: *cint
}
global XKeyState: type <cimport,nodecl> = @record{
  class: cuchar,
  length: cuchar,
  num_keys: cshort,
  keys: [32]cchar
}
global XButtonState: type <cimport,nodecl> = @record{
  class: cuchar,
  length: cuchar,
  num_buttons: cshort,
  buttons: [32]cchar
}
global function XChangeKeyboardDevice(a1: *Display, a2: *XDevice): cint <cimport,nodecl> end
global function XChangePointerDevice(a1: *Display, a2: *XDevice, a3: cint, a4: cint): cint <cimport,nodecl> end
global function XGrabDevice(a1: *Display, a2: *XDevice, a3: Window, a4: cint, a5: cint, a6: *culong, a7: cint, a8: cint, a9: Time): cint <cimport,nodecl> end
global function XUngrabDevice(a1: *Display, a2: *XDevice, a3: Time): cint <cimport,nodecl> end
global function XGrabDeviceKey(a1: *Display, a2: *XDevice, a3: cuint, a4: cuint, a5: *XDevice, a6: Window, a7: cint, a8: cuint, a9: *culong, a10: cint, a11: cint): cint <cimport,nodecl> end
global function XUngrabDeviceKey(a1: *Display, a2: *XDevice, a3: cuint, a4: cuint, a5: *XDevice, a6: Window): cint <cimport,nodecl> end
global function XGrabDeviceButton(a1: *Display, a2: *XDevice, a3: cuint, a4: cuint, a5: *XDevice, a6: Window, a7: cint, a8: cuint, a9: *culong, a10: cint, a11: cint): cint <cimport,nodecl> end
global function XUngrabDeviceButton(a1: *Display, a2: *XDevice, a3: cuint, a4: cuint, a5: *XDevice, a6: Window): cint <cimport,nodecl> end
global function XAllowDeviceEvents(a1: *Display, a2: *XDevice, a3: cint, a4: Time): cint <cimport,nodecl> end
global function XGetDeviceFocus(a1: *Display, a2: *XDevice, a3: *Window, a4: *cint, a5: *Time): cint <cimport,nodecl> end
global function XSetDeviceFocus(a1: *Display, a2: *XDevice, a3: Window, a4: cint, a5: Time): cint <cimport,nodecl> end
global function XGetFeedbackControl(a1: *Display, a2: *XDevice, a3: *cint): *XFeedbackState <cimport,nodecl> end
global function XFreeFeedbackList(a1: *XFeedbackState): void <cimport,nodecl> end
global function XChangeFeedbackControl(a1: *Display, a2: *XDevice, a3: culong, a4: *XFeedbackControl): cint <cimport,nodecl> end
global function XDeviceBell(a1: *Display, a2: *XDevice, a3: culong, a4: culong, a5: cint): cint <cimport,nodecl> end
global function XGetDeviceKeyMapping(a1: *Display, a2: *XDevice, a3: KeyCode, a4: cint, a5: *cint): *KeySym <cimport,nodecl> end
global function XChangeDeviceKeyMapping(a1: *Display, a2: *XDevice, a3: cint, a4: cint, a5: *KeySym, a6: cint): cint <cimport,nodecl> end
global function XGetDeviceModifierMapping(a1: *Display, a2: *XDevice): *XModifierKeymap <cimport,nodecl> end
global function XSetDeviceModifierMapping(a1: *Display, a2: *XDevice, a3: *XModifierKeymap): cint <cimport,nodecl> end
global function XSetDeviceButtonMapping(a1: *Display, a2: *XDevice, a3: *cuchar, a4: cint): cint <cimport,nodecl> end
global function XGetDeviceButtonMapping(a1: *Display, a2: *XDevice, a3: *cuchar, a4: cuint): cint <cimport,nodecl> end
global function XQueryDeviceState(a1: *Display, a2: *XDevice): *XDeviceState <cimport,nodecl> end
global function XFreeDeviceState(a1: *XDeviceState): void <cimport,nodecl> end
global function XGetExtensionVersion(a1: *Display, a2: cstring): *XExtensionVersion <cimport,nodecl> end
global function XListInputDevices(a1: *Display, a2: *cint): *XDeviceInfo <cimport,nodecl> end
global function XFreeDeviceList(a1: *XDeviceInfo): void <cimport,nodecl> end
global function XOpenDevice(a1: *Display, a2: culong): *XDevice <cimport,nodecl> end
global function XCloseDevice(a1: *Display, a2: *XDevice): cint <cimport,nodecl> end
global function XSetDeviceMode(a1: *Display, a2: *XDevice, a3: cint): cint <cimport,nodecl> end
global function XSetDeviceValuators(a1: *Display, a2: *XDevice, a3: *cint, a4: cint, a5: cint): cint <cimport,nodecl> end
global function XGetDeviceControl(a1: *Display, a2: *XDevice, a3: cint): *XDeviceControl <cimport,nodecl> end
global function XChangeDeviceControl(a1: *Display, a2: *XDevice, a3: cint, a4: *XDeviceControl): cint <cimport,nodecl> end
global function XSelectExtensionEvent(a1: *Display, a2: Window, a3: *culong, a4: cint): cint <cimport,nodecl> end
global function XGetSelectedExtensionEvents(a1: *Display, a2: Window, a3: *cint, a4: **culong, a5: *cint, a6: **culong): cint <cimport,nodecl> end
global function XChangeDeviceDontPropagateList(a1: *Display, a2: Window, a3: cint, a4: *culong, a5: cint): cint <cimport,nodecl> end
global function XGetDeviceDontPropagateList(a1: *Display, a2: Window, a3: *cint): *culong <cimport,nodecl> end
global function XSendExtensionEvent(a1: *Display, a2: *XDevice, a3: Window, a4: cint, a5: cint, a6: *culong, a7: *XEvent): cint <cimport,nodecl> end
global function XGetDeviceMotionEvents(a1: *Display, a2: *XDevice, a3: Time, a4: Time, a5: *cint, a6: *cint, a7: *cint): *XDeviceTimeCoord <cimport,nodecl> end
global function XFreeDeviceMotionEvents(a1: *XDeviceTimeCoord): void <cimport,nodecl> end
global function XFreeDeviceControl(a1: *XDeviceControl): void <cimport,nodecl> end
global function XListDeviceProperties(a1: *Display, a2: *XDevice, a3: *cint): *Atom <cimport,nodecl> end
global function XChangeDeviceProperty(a1: *Display, a2: *XDevice, a3: Atom, a4: Atom, a5: cint, a6: cint, a7: *cuchar, a8: cint): void <cimport,nodecl> end
global function XDeleteDeviceProperty(a1: *Display, a2: *XDevice, a3: Atom): void <cimport,nodecl> end
global function XGetDeviceProperty(a1: *Display, a2: *XDevice, a3: Atom, a4: clong, a5: clong, a6: cint, a7: Atom, a8: *Atom, a9: *cint, a10: *culong, a11: *culong, a12: **cuchar): cint <cimport,nodecl> end
global function XTestQueryExtension(a1: *Display, a2: *cint, a3: *cint, a4: *cint, a5: *cint): cint <cimport,nodecl> end
global function XTestCompareCursorWithWindow(a1: *Display, a2: Window, a3: Cursor): cint <cimport,nodecl> end
global function XTestCompareCurrentCursorWithWindow(a1: *Display, a2: Window): cint <cimport,nodecl> end
global function XTestFakeKeyEvent(a1: *Display, a2: cuint, a3: cint, a4: culong): cint <cimport,nodecl> end
global function XTestFakeButtonEvent(a1: *Display, a2: cuint, a3: cint, a4: culong): cint <cimport,nodecl> end
global function XTestFakeMotionEvent(a1: *Display, a2: cint, a3: cint, a4: cint, a5: culong): cint <cimport,nodecl> end
global function XTestFakeRelativeMotionEvent(a1: *Display, a2: cint, a3: cint, a4: culong): cint <cimport,nodecl> end
global function XTestFakeDeviceKeyEvent(a1: *Display, a2: *XDevice, a3: cuint, a4: cint, a5: *cint, a6: cint, a7: culong): cint <cimport,nodecl> end
global function XTestFakeDeviceButtonEvent(a1: *Display, a2: *XDevice, a3: cuint, a4: cint, a5: *cint, a6: cint, a7: culong): cint <cimport,nodecl> end
global function XTestFakeProximityEvent(a1: *Display, a2: *XDevice, a3: cint, a4: *cint, a5: cint, a6: culong): cint <cimport,nodecl> end
global function XTestFakeDeviceMotionEvent(a1: *Display, a2: *XDevice, a3: cint, a4: cint, a5: *cint, a6: cint, a7: culong): cint <cimport,nodecl> end
global function XTestGrabControl(a1: *Display, a2: cint): cint <cimport,nodecl> end
global function XTestSetGContextOfGC(a1: GC, a2: GContext): void <cimport,nodecl> end
global function XTestSetVisualIDOfVisual(a1: *Visual, a2: VisualID): void <cimport,nodecl> end
global function XTestDiscard(a1: *Display): cint <cimport,nodecl> end
global XShmCompletionEvent: type <cimport,nodecl> = @record{
  type: cint,
  serial: culong,
  send_event: cint,
  display: *Display,
  drawable: Drawable,
  major_code: cint,
  minor_code: cint,
  shmseg: culong,
  offset: culong
}
global XShmSegmentInfo: type <cimport,nodecl> = @record{
  shmseg: culong,
  shmid: cint,
  shmaddr: cstring,
  readOnly: cint
}
global function XShmQueryExtension(a1: *Display): cint <cimport,nodecl> end
global function XShmGetEventBase(a1: *Display): cint <cimport,nodecl> end
global function XShmQueryVersion(a1: *Display, a2: *cint, a3: *cint, a4: *cint): cint <cimport,nodecl> end
global function XShmPixmapFormat(a1: *Display): cint <cimport,nodecl> end
global function XShmAttach(a1: *Display, a2: *XShmSegmentInfo): cint <cimport,nodecl> end
global function XShmDetach(a1: *Display, a2: *XShmSegmentInfo): cint <cimport,nodecl> end
global function XShmPutImage(a1: *Display, a2: Drawable, a3: GC, a4: *XImage, a5: cint, a6: cint, a7: cint, a8: cint, a9: cuint, a10: cuint, a11: cint): cint <cimport,nodecl> end
global function XShmGetImage(a1: *Display, a2: Drawable, a3: *XImage, a4: cint, a5: cint, a6: culong): cint <cimport,nodecl> end
global function XShmCreateImage(a1: *Display, a2: *Visual, a3: cuint, a4: cint, a5: cstring, a6: *XShmSegmentInfo, a7: cuint, a8: cuint): *XImage <cimport,nodecl> end
global function XShmCreatePixmap(a1: *Display, a2: Drawable, a3: cstring, a4: *XShmSegmentInfo, a5: cuint, a6: cuint, a7: cuint): Pixmap <cimport,nodecl> end
global None: clong <cimport,nodecl,const>
global ParentRelative: clong <cimport,nodecl,const>
global CopyFromParent: clong <cimport,nodecl,const>
global PointerWindow: clong <cimport,nodecl,const>
global InputFocus: clong <cimport,nodecl,const>
global PointerRoot: clong <cimport,nodecl,const>
global AnyPropertyType: clong <cimport,nodecl,const>
global AnyKey: clong <cimport,nodecl,const>
global AnyButton: clong <cimport,nodecl,const>
global AllTemporary: clong <cimport,nodecl,const>
global CurrentTime: clong <cimport,nodecl,const>
global NoSymbol: clong <cimport,nodecl,const>
global NoEventMask: clong <cimport,nodecl,const>
global KeyPressMask: clong <cimport,nodecl,const>
global KeyReleaseMask: clong <cimport,nodecl,const>
global ButtonPressMask: clong <cimport,nodecl,const>
global ButtonReleaseMask: clong <cimport,nodecl,const>
global EnterWindowMask: clong <cimport,nodecl,const>
global LeaveWindowMask: clong <cimport,nodecl,const>
global PointerMotionMask: clong <cimport,nodecl,const>
global PointerMotionHintMask: clong <cimport,nodecl,const>
global Button1MotionMask: clong <cimport,nodecl,const>
global Button2MotionMask: clong <cimport,nodecl,const>
global Button3MotionMask: clong <cimport,nodecl,const>
global Button4MotionMask: clong <cimport,nodecl,const>
global Button5MotionMask: clong <cimport,nodecl,const>
global ButtonMotionMask: clong <cimport,nodecl,const>
global KeymapStateMask: clong <cimport,nodecl,const>
global ExposureMask: clong <cimport,nodecl,const>
global VisibilityChangeMask: clong <cimport,nodecl,const>
global StructureNotifyMask: clong <cimport,nodecl,const>
global ResizeRedirectMask: clong <cimport,nodecl,const>
global SubstructureNotifyMask: clong <cimport,nodecl,const>
global SubstructureRedirectMask: clong <cimport,nodecl,const>
global FocusChangeMask: clong <cimport,nodecl,const>
global PropertyChangeMask: clong <cimport,nodecl,const>
global ColormapChangeMask: clong <cimport,nodecl,const>
global OwnerGrabButtonMask: clong <cimport,nodecl,const>
global KeyPress: cint <cimport,nodecl,const>
global KeyRelease: cint <cimport,nodecl,const>
global ButtonPress: cint <cimport,nodecl,const>
global ButtonRelease: cint <cimport,nodecl,const>
global MotionNotify: cint <cimport,nodecl,const>
global EnterNotify: cint <cimport,nodecl,const>
global LeaveNotify: cint <cimport,nodecl,const>
global FocusIn: cint <cimport,nodecl,const>
global FocusOut: cint <cimport,nodecl,const>
global KeymapNotify: cint <cimport,nodecl,const>
global Expose: cint <cimport,nodecl,const>
global GraphicsExpose: cint <cimport,nodecl,const>
global NoExpose: cint <cimport,nodecl,const>
global VisibilityNotify: cint <cimport,nodecl,const>
global CreateNotify: cint <cimport,nodecl,const>
global DestroyNotify: cint <cimport,nodecl,const>
global UnmapNotify: cint <cimport,nodecl,const>
global MapNotify: cint <cimport,nodecl,const>
global MapRequest: cint <cimport,nodecl,const>
global ReparentNotify: cint <cimport,nodecl,const>
global ConfigureNotify: cint <cimport,nodecl,const>
global ConfigureRequest: cint <cimport,nodecl,const>
global GravityNotify: cint <cimport,nodecl,const>
global ResizeRequest: cint <cimport,nodecl,const>
global CirculateNotify: cint <cimport,nodecl,const>
global CirculateRequest: cint <cimport,nodecl,const>
global PropertyNotify: cint <cimport,nodecl,const>
global SelectionClear: cint <cimport,nodecl,const>
global SelectionRequest: cint <cimport,nodecl,const>
global SelectionNotify: cint <cimport,nodecl,const>
global ColormapNotify: cint <cimport,nodecl,const>
global ClientMessage: cint <cimport,nodecl,const>
global MappingNotify: cint <cimport,nodecl,const>
global GenericEvent: cint <cimport,nodecl,const>
global LASTEvent: cint <cimport,nodecl,const>
global ShiftMask: cint <cimport,nodecl,const>
global LockMask: cint <cimport,nodecl,const>
global ControlMask: cint <cimport,nodecl,const>
global Mod1Mask: cint <cimport,nodecl,const>
global Mod2Mask: cint <cimport,nodecl,const>
global Mod3Mask: cint <cimport,nodecl,const>
global Mod4Mask: cint <cimport,nodecl,const>
global Mod5Mask: cint <cimport,nodecl,const>
global ShiftMapIndex: cint <cimport,nodecl,const>
global LockMapIndex: cint <cimport,nodecl,const>
global ControlMapIndex: cint <cimport,nodecl,const>
global Mod1MapIndex: cint <cimport,nodecl,const>
global Mod2MapIndex: cint <cimport,nodecl,const>
global Mod3MapIndex: cint <cimport,nodecl,const>
global Mod4MapIndex: cint <cimport,nodecl,const>
global Mod5MapIndex: cint <cimport,nodecl,const>
global Button1Mask: cint <cimport,nodecl,const>
global Button2Mask: cint <cimport,nodecl,const>
global Button3Mask: cint <cimport,nodecl,const>
global Button4Mask: cint <cimport,nodecl,const>
global Button5Mask: cint <cimport,nodecl,const>
global AnyModifier: cint <cimport,nodecl,const>
global Button1: cint <cimport,nodecl,const>
global Button2: cint <cimport,nodecl,const>
global Button3: cint <cimport,nodecl,const>
global Button4: cint <cimport,nodecl,const>
global Button5: cint <cimport,nodecl,const>
global NotifyNormal: cint <cimport,nodecl,const>
global NotifyGrab: cint <cimport,nodecl,const>
global NotifyUngrab: cint <cimport,nodecl,const>
global NotifyWhileGrabbed: cint <cimport,nodecl,const>
global NotifyHint: cint <cimport,nodecl,const>
global NotifyAncestor: cint <cimport,nodecl,const>
global NotifyVirtual: cint <cimport,nodecl,const>
global NotifyInferior: cint <cimport,nodecl,const>
global NotifyNonlinear: cint <cimport,nodecl,const>
global NotifyNonlinearVirtual: cint <cimport,nodecl,const>
global NotifyPointer: cint <cimport,nodecl,const>
global NotifyPointerRoot: cint <cimport,nodecl,const>
global NotifyDetailNone: cint <cimport,nodecl,const>
global VisibilityUnobscured: cint <cimport,nodecl,const>
global VisibilityPartiallyObscured: cint <cimport,nodecl,const>
global VisibilityFullyObscured: cint <cimport,nodecl,const>
global PlaceOnTop: cint <cimport,nodecl,const>
global PlaceOnBottom: cint <cimport,nodecl,const>
global FamilyInternet: cint <cimport,nodecl,const>
global FamilyDECnet: cint <cimport,nodecl,const>
global FamilyChaos: cint <cimport,nodecl,const>
global FamilyInternet6: cint <cimport,nodecl,const>
global FamilyServerInterpreted: cint <cimport,nodecl,const>
global PropertyNewValue: cint <cimport,nodecl,const>
global PropertyDelete: cint <cimport,nodecl,const>
global ColormapUninstalled: cint <cimport,nodecl,const>
global ColormapInstalled: cint <cimport,nodecl,const>
global GrabModeSync: cint <cimport,nodecl,const>
global GrabModeAsync: cint <cimport,nodecl,const>
global GrabSuccess: cint <cimport,nodecl,const>
global AlreadyGrabbed: cint <cimport,nodecl,const>
global GrabInvalidTime: cint <cimport,nodecl,const>
global GrabNotViewable: cint <cimport,nodecl,const>
global GrabFrozen: cint <cimport,nodecl,const>
global AsyncPointer: cint <cimport,nodecl,const>
global SyncPointer: cint <cimport,nodecl,const>
global ReplayPointer: cint <cimport,nodecl,const>
global AsyncKeyboard: cint <cimport,nodecl,const>
global SyncKeyboard: cint <cimport,nodecl,const>
global ReplayKeyboard: cint <cimport,nodecl,const>
global AsyncBoth: cint <cimport,nodecl,const>
global SyncBoth: cint <cimport,nodecl,const>
global RevertToNone: cint <cimport,nodecl,const>
global RevertToPointerRoot: cint <cimport,nodecl,const>
global RevertToParent: cint <cimport,nodecl,const>
global Success: cint <cimport,nodecl,const>
global BadRequest: cint <cimport,nodecl,const>
global BadValue: cint <cimport,nodecl,const>
global BadWindow: cint <cimport,nodecl,const>
global BadPixmap: cint <cimport,nodecl,const>
global BadAtom: cint <cimport,nodecl,const>
global BadCursor: cint <cimport,nodecl,const>
global BadFont: cint <cimport,nodecl,const>
global BadMatch: cint <cimport,nodecl,const>
global BadDrawable: cint <cimport,nodecl,const>
global BadAccess: cint <cimport,nodecl,const>
global BadAlloc: cint <cimport,nodecl,const>
global BadColor: cint <cimport,nodecl,const>
global BadGC: cint <cimport,nodecl,const>
global BadIDChoice: cint <cimport,nodecl,const>
global BadName: cint <cimport,nodecl,const>
global BadLength: cint <cimport,nodecl,const>
global BadImplementation: cint <cimport,nodecl,const>
global FirstExtensionError: cint <cimport,nodecl,const>
global LastExtensionError: cint <cimport,nodecl,const>
global InputOutput: cint <cimport,nodecl,const>
global InputOnly: cint <cimport,nodecl,const>
global CWBackPixmap: clong <cimport,nodecl,const>
global CWBackPixel: clong <cimport,nodecl,const>
global CWBorderPixmap: clong <cimport,nodecl,const>
global CWBorderPixel: clong <cimport,nodecl,const>
global CWBitGravity: clong <cimport,nodecl,const>
global CWWinGravity: clong <cimport,nodecl,const>
global CWBackingStore: clong <cimport,nodecl,const>
global CWBackingPlanes: clong <cimport,nodecl,const>
global CWBackingPixel: clong <cimport,nodecl,const>
global CWOverrideRedirect: clong <cimport,nodecl,const>
global CWSaveUnder: clong <cimport,nodecl,const>
global CWEventMask: clong <cimport,nodecl,const>
global CWDontPropagate: clong <cimport,nodecl,const>
global CWColormap: clong <cimport,nodecl,const>
global CWCursor: clong <cimport,nodecl,const>
global CWX: cint <cimport,nodecl,const>
global CWY: cint <cimport,nodecl,const>
global CWWidth: cint <cimport,nodecl,const>
global CWHeight: cint <cimport,nodecl,const>
global CWBorderWidth: cint <cimport,nodecl,const>
global CWSibling: cint <cimport,nodecl,const>
global CWStackMode: cint <cimport,nodecl,const>
global ForgetGravity: cint <cimport,nodecl,const>
global NorthWestGravity: cint <cimport,nodecl,const>
global NorthGravity: cint <cimport,nodecl,const>
global NorthEastGravity: cint <cimport,nodecl,const>
global WestGravity: cint <cimport,nodecl,const>
global CenterGravity: cint <cimport,nodecl,const>
global EastGravity: cint <cimport,nodecl,const>
global SouthWestGravity: cint <cimport,nodecl,const>
global SouthGravity: cint <cimport,nodecl,const>
global SouthEastGravity: cint <cimport,nodecl,const>
global StaticGravity: cint <cimport,nodecl,const>
global UnmapGravity: cint <cimport,nodecl,const>
global NotUseful: cint <cimport,nodecl,const>
global WhenMapped: cint <cimport,nodecl,const>
global Always: cint <cimport,nodecl,const>
global IsUnmapped: cint <cimport,nodecl,const>
global IsUnviewable: cint <cimport,nodecl,const>
global IsViewable: cint <cimport,nodecl,const>
global SetModeInsert: cint <cimport,nodecl,const>
global SetModeDelete: cint <cimport,nodecl,const>
global DestroyAll: cint <cimport,nodecl,const>
global RetainPermanent: cint <cimport,nodecl,const>
global RetainTemporary: cint <cimport,nodecl,const>
global Above: cint <cimport,nodecl,const>
global Below: cint <cimport,nodecl,const>
global TopIf: cint <cimport,nodecl,const>
global BottomIf: cint <cimport,nodecl,const>
global Opposite: cint <cimport,nodecl,const>
global RaiseLowest: cint <cimport,nodecl,const>
global LowerHighest: cint <cimport,nodecl,const>
global PropModeReplace: cint <cimport,nodecl,const>
global PropModePrepend: cint <cimport,nodecl,const>
global PropModeAppend: cint <cimport,nodecl,const>
global GXclear: cint <cimport,nodecl,const>
global GXand: cint <cimport,nodecl,const>
global GXandReverse: cint <cimport,nodecl,const>
global GXcopy: cint <cimport,nodecl,const>
global GXandInverted: cint <cimport,nodecl,const>
global GXnoop: cint <cimport,nodecl,const>
global GXxor: cint <cimport,nodecl,const>
global GXor: cint <cimport,nodecl,const>
global GXnor: cint <cimport,nodecl,const>
global GXequiv: cint <cimport,nodecl,const>
global GXinvert: cint <cimport,nodecl,const>
global GXorReverse: cint <cimport,nodecl,const>
global GXcopyInverted: cint <cimport,nodecl,const>
global GXorInverted: cint <cimport,nodecl,const>
global GXnand: cint <cimport,nodecl,const>
global GXset: cint <cimport,nodecl,const>
global LineSolid: cint <cimport,nodecl,const>
global LineOnOffDash: cint <cimport,nodecl,const>
global LineDoubleDash: cint <cimport,nodecl,const>
global CapNotLast: cint <cimport,nodecl,const>
global CapButt: cint <cimport,nodecl,const>
global CapRound: cint <cimport,nodecl,const>
global CapProjecting: cint <cimport,nodecl,const>
global JoinMiter: cint <cimport,nodecl,const>
global JoinRound: cint <cimport,nodecl,const>
global JoinBevel: cint <cimport,nodecl,const>
global FillSolid: cint <cimport,nodecl,const>
global FillTiled: cint <cimport,nodecl,const>
global FillStippled: cint <cimport,nodecl,const>
global FillOpaqueStippled: cint <cimport,nodecl,const>
global EvenOddRule: cint <cimport,nodecl,const>
global WindingRule: cint <cimport,nodecl,const>
global ClipByChildren: cint <cimport,nodecl,const>
global IncludeInferiors: cint <cimport,nodecl,const>
global Unsorted: cint <cimport,nodecl,const>
global YSorted: cint <cimport,nodecl,const>
global YXSorted: cint <cimport,nodecl,const>
global YXBanded: cint <cimport,nodecl,const>
global CoordModeOrigin: cint <cimport,nodecl,const>
global CoordModePrevious: cint <cimport,nodecl,const>
global Complex: cint <cimport,nodecl,const>
global Nonconvex: cint <cimport,nodecl,const>
global Convex: cint <cimport,nodecl,const>
global ArcChord: cint <cimport,nodecl,const>
global ArcPieSlice: cint <cimport,nodecl,const>
global GCFunction: clong <cimport,nodecl,const>
global GCPlaneMask: clong <cimport,nodecl,const>
global GCForeground: clong <cimport,nodecl,const>
global GCBackground: clong <cimport,nodecl,const>
global GCLineWidth: clong <cimport,nodecl,const>
global GCLineStyle: clong <cimport,nodecl,const>
global GCCapStyle: clong <cimport,nodecl,const>
global GCJoinStyle: clong <cimport,nodecl,const>
global GCFillStyle: clong <cimport,nodecl,const>
global GCFillRule: clong <cimport,nodecl,const>
global GCTile: clong <cimport,nodecl,const>
global GCStipple: clong <cimport,nodecl,const>
global GCTileStipXOrigin: clong <cimport,nodecl,const>
global GCTileStipYOrigin: clong <cimport,nodecl,const>
global GCFont: clong <cimport,nodecl,const>
global GCSubwindowMode: clong <cimport,nodecl,const>
global GCGraphicsExposures: clong <cimport,nodecl,const>
global GCClipXOrigin: clong <cimport,nodecl,const>
global GCClipYOrigin: clong <cimport,nodecl,const>
global GCClipMask: clong <cimport,nodecl,const>
global GCDashOffset: clong <cimport,nodecl,const>
global GCDashList: clong <cimport,nodecl,const>
global GCArcMode: clong <cimport,nodecl,const>
global GCLastBit: clong <cimport,nodecl,const>
global FontLeftToRight: cint <cimport,nodecl,const>
global FontRightToLeft: cint <cimport,nodecl,const>
global FontChange: cint <cimport,nodecl,const>
global XYBitmap: cint <cimport,nodecl,const>
global XYPixmap: cint <cimport,nodecl,const>
global ZPixmap: cint <cimport,nodecl,const>
global AllocNone: cint <cimport,nodecl,const>
global AllocAll: cint <cimport,nodecl,const>
global DoRed: cint <cimport,nodecl,const>
global DoGreen: cint <cimport,nodecl,const>
global DoBlue: cint <cimport,nodecl,const>
global CursorShape: cint <cimport,nodecl,const>
global TileShape: cint <cimport,nodecl,const>
global StippleShape: cint <cimport,nodecl,const>
global AutoRepeatModeOff: cint <cimport,nodecl,const>
global AutoRepeatModeOn: cint <cimport,nodecl,const>
global AutoRepeatModeDefault: cint <cimport,nodecl,const>
global LedModeOff: cint <cimport,nodecl,const>
global LedModeOn: cint <cimport,nodecl,const>
global KBKeyClickPercent: clong <cimport,nodecl,const>
global KBBellPercent: clong <cimport,nodecl,const>
global KBBellPitch: clong <cimport,nodecl,const>
global KBBellDuration: clong <cimport,nodecl,const>
global KBLed: clong <cimport,nodecl,const>
global KBLedMode: clong <cimport,nodecl,const>
global KBKey: clong <cimport,nodecl,const>
global KBAutoRepeatMode: clong <cimport,nodecl,const>
global MappingSuccess: cint <cimport,nodecl,const>
global MappingBusy: cint <cimport,nodecl,const>
global MappingFailed: cint <cimport,nodecl,const>
global MappingModifier: cint <cimport,nodecl,const>
global MappingKeyboard: cint <cimport,nodecl,const>
global MappingPointer: cint <cimport,nodecl,const>
global DontPreferBlanking: cint <cimport,nodecl,const>
global PreferBlanking: cint <cimport,nodecl,const>
global DefaultBlanking: cint <cimport,nodecl,const>
global DisableScreenSaver: cint <cimport,nodecl,const>
global DisableScreenInterval: cint <cimport,nodecl,const>
global DontAllowExposures: cint <cimport,nodecl,const>
global AllowExposures: cint <cimport,nodecl,const>
global DefaultExposures: cint <cimport,nodecl,const>
global ScreenSaverReset: cint <cimport,nodecl,const>
global ScreenSaverActive: cint <cimport,nodecl,const>
global HostInsert: cint <cimport,nodecl,const>
global HostDelete: cint <cimport,nodecl,const>
global EnableAccess: cint <cimport,nodecl,const>
global DisableAccess: cint <cimport,nodecl,const>
global StaticGray: cint <cimport,nodecl,const>
global GrayScale: cint <cimport,nodecl,const>
global StaticColor: cint <cimport,nodecl,const>
global PseudoColor: cint <cimport,nodecl,const>
global TrueColor: cint <cimport,nodecl,const>
global DirectColor: cint <cimport,nodecl,const>
global LSBFirst: cint <cimport,nodecl,const>
global MSBFirst: cint <cimport,nodecl,const>
global XK_VoidSymbol: cint <cimport,nodecl,const>
global XK_BackSpace: cint <cimport,nodecl,const>
global XK_Tab: cint <cimport,nodecl,const>
global XK_Linefeed: cint <cimport,nodecl,const>
global XK_Clear: cint <cimport,nodecl,const>
global XK_Return: cint <cimport,nodecl,const>
global XK_Pause: cint <cimport,nodecl,const>
global XK_Scroll_Lock: cint <cimport,nodecl,const>
global XK_Sys_Req: cint <cimport,nodecl,const>
global XK_Escape: cint <cimport,nodecl,const>
global XK_Delete: cint <cimport,nodecl,const>
global XK_Multi_key: cint <cimport,nodecl,const>
global XK_Codeinput: cint <cimport,nodecl,const>
global XK_SingleCandidate: cint <cimport,nodecl,const>
global XK_MultipleCandidate: cint <cimport,nodecl,const>
global XK_PreviousCandidate: cint <cimport,nodecl,const>
global XK_Kanji: cint <cimport,nodecl,const>
global XK_Muhenkan: cint <cimport,nodecl,const>
global XK_Henkan_Mode: cint <cimport,nodecl,const>
global XK_Henkan: cint <cimport,nodecl,const>
global XK_Romaji: cint <cimport,nodecl,const>
global XK_Hiragana: cint <cimport,nodecl,const>
global XK_Katakana: cint <cimport,nodecl,const>
global XK_Hiragana_Katakana: cint <cimport,nodecl,const>
global XK_Zenkaku: cint <cimport,nodecl,const>
global XK_Hankaku: cint <cimport,nodecl,const>
global XK_Zenkaku_Hankaku: cint <cimport,nodecl,const>
global XK_Touroku: cint <cimport,nodecl,const>
global XK_Massyo: cint <cimport,nodecl,const>
global XK_Kana_Lock: cint <cimport,nodecl,const>
global XK_Kana_Shift: cint <cimport,nodecl,const>
global XK_Eisu_Shift: cint <cimport,nodecl,const>
global XK_Eisu_toggle: cint <cimport,nodecl,const>
global XK_Kanji_Bangou: cint <cimport,nodecl,const>
global XK_Zen_Koho: cint <cimport,nodecl,const>
global XK_Mae_Koho: cint <cimport,nodecl,const>
global XK_Home: cint <cimport,nodecl,const>
global XK_Left: cint <cimport,nodecl,const>
global XK_Up: cint <cimport,nodecl,const>
global XK_Right: cint <cimport,nodecl,const>
global XK_Down: cint <cimport,nodecl,const>
global XK_Prior: cint <cimport,nodecl,const>
global XK_Page_Up: cint <cimport,nodecl,const>
global XK_Next: cint <cimport,nodecl,const>
global XK_Page_Down: cint <cimport,nodecl,const>
global XK_End: cint <cimport,nodecl,const>
global XK_Begin: cint <cimport,nodecl,const>
global XK_Select: cint <cimport,nodecl,const>
global XK_Print: cint <cimport,nodecl,const>
global XK_Execute: cint <cimport,nodecl,const>
global XK_Insert: cint <cimport,nodecl,const>
global XK_Undo: cint <cimport,nodecl,const>
global XK_Redo: cint <cimport,nodecl,const>
global XK_Menu: cint <cimport,nodecl,const>
global XK_Find: cint <cimport,nodecl,const>
global XK_Cancel: cint <cimport,nodecl,const>
global XK_Help: cint <cimport,nodecl,const>
global XK_Break: cint <cimport,nodecl,const>
global XK_Mode_switch: cint <cimport,nodecl,const>
global XK_script_switch: cint <cimport,nodecl,const>
global XK_Num_Lock: cint <cimport,nodecl,const>
global XK_KP_Space: cint <cimport,nodecl,const>
global XK_KP_Tab: cint <cimport,nodecl,const>
global XK_KP_Enter: cint <cimport,nodecl,const>
global XK_KP_F1: cint <cimport,nodecl,const>
global XK_KP_F2: cint <cimport,nodecl,const>
global XK_KP_F3: cint <cimport,nodecl,const>
global XK_KP_F4: cint <cimport,nodecl,const>
global XK_KP_Home: cint <cimport,nodecl,const>
global XK_KP_Left: cint <cimport,nodecl,const>
global XK_KP_Up: cint <cimport,nodecl,const>
global XK_KP_Right: cint <cimport,nodecl,const>
global XK_KP_Down: cint <cimport,nodecl,const>
global XK_KP_Prior: cint <cimport,nodecl,const>
global XK_KP_Page_Up: cint <cimport,nodecl,const>
global XK_KP_Next: cint <cimport,nodecl,const>
global XK_KP_Page_Down: cint <cimport,nodecl,const>
global XK_KP_End: cint <cimport,nodecl,const>
global XK_KP_Begin: cint <cimport,nodecl,const>
global XK_KP_Insert: cint <cimport,nodecl,const>
global XK_KP_Delete: cint <cimport,nodecl,const>
global XK_KP_Equal: cint <cimport,nodecl,const>
global XK_KP_Multiply: cint <cimport,nodecl,const>
global XK_KP_Add: cint <cimport,nodecl,const>
global XK_KP_Separator: cint <cimport,nodecl,const>
global XK_KP_Subtract: cint <cimport,nodecl,const>
global XK_KP_Decimal: cint <cimport,nodecl,const>
global XK_KP_Divide: cint <cimport,nodecl,const>
global XK_KP_0: cint <cimport,nodecl,const>
global XK_KP_1: cint <cimport,nodecl,const>
global XK_KP_2: cint <cimport,nodecl,const>
global XK_KP_3: cint <cimport,nodecl,const>
global XK_KP_4: cint <cimport,nodecl,const>
global XK_KP_5: cint <cimport,nodecl,const>
global XK_KP_6: cint <cimport,nodecl,const>
global XK_KP_7: cint <cimport,nodecl,const>
global XK_KP_8: cint <cimport,nodecl,const>
global XK_KP_9: cint <cimport,nodecl,const>
global XK_F1: cint <cimport,nodecl,const>
global XK_F2: cint <cimport,nodecl,const>
global XK_F3: cint <cimport,nodecl,const>
global XK_F4: cint <cimport,nodecl,const>
global XK_F5: cint <cimport,nodecl,const>
global XK_F6: cint <cimport,nodecl,const>
global XK_F7: cint <cimport,nodecl,const>
global XK_F8: cint <cimport,nodecl,const>
global XK_F9: cint <cimport,nodecl,const>
global XK_F10: cint <cimport,nodecl,const>
global XK_F11: cint <cimport,nodecl,const>
global XK_L1: cint <cimport,nodecl,const>
global XK_F12: cint <cimport,nodecl,const>
global XK_L2: cint <cimport,nodecl,const>
global XK_F13: cint <cimport,nodecl,const>
global XK_L3: cint <cimport,nodecl,const>
global XK_F14: cint <cimport,nodecl,const>
global XK_L4: cint <cimport,nodecl,const>
global XK_F15: cint <cimport,nodecl,const>
global XK_L5: cint <cimport,nodecl,const>
global XK_F16: cint <cimport,nodecl,const>
global XK_L6: cint <cimport,nodecl,const>
global XK_F17: cint <cimport,nodecl,const>
global XK_L7: cint <cimport,nodecl,const>
global XK_F18: cint <cimport,nodecl,const>
global XK_L8: cint <cimport,nodecl,const>
global XK_F19: cint <cimport,nodecl,const>
global XK_L9: cint <cimport,nodecl,const>
global XK_F20: cint <cimport,nodecl,const>
global XK_L10: cint <cimport,nodecl,const>
global XK_F21: cint <cimport,nodecl,const>
global XK_R1: cint <cimport,nodecl,const>
global XK_F22: cint <cimport,nodecl,const>
global XK_R2: cint <cimport,nodecl,const>
global XK_F23: cint <cimport,nodecl,const>
global XK_R3: cint <cimport,nodecl,const>
global XK_F24: cint <cimport,nodecl,const>
global XK_R4: cint <cimport,nodecl,const>
global XK_F25: cint <cimport,nodecl,const>
global XK_R5: cint <cimport,nodecl,const>
global XK_F26: cint <cimport,nodecl,const>
global XK_R6: cint <cimport,nodecl,const>
global XK_F27: cint <cimport,nodecl,const>
global XK_R7: cint <cimport,nodecl,const>
global XK_F28: cint <cimport,nodecl,const>
global XK_R8: cint <cimport,nodecl,const>
global XK_F29: cint <cimport,nodecl,const>
global XK_R9: cint <cimport,nodecl,const>
global XK_F30: cint <cimport,nodecl,const>
global XK_R10: cint <cimport,nodecl,const>
global XK_F31: cint <cimport,nodecl,const>
global XK_R11: cint <cimport,nodecl,const>
global XK_F32: cint <cimport,nodecl,const>
global XK_R12: cint <cimport,nodecl,const>
global XK_F33: cint <cimport,nodecl,const>
global XK_R13: cint <cimport,nodecl,const>
global XK_F34: cint <cimport,nodecl,const>
global XK_R14: cint <cimport,nodecl,const>
global XK_F35: cint <cimport,nodecl,const>
global XK_R15: cint <cimport,nodecl,const>
global XK_Shift_L: cint <cimport,nodecl,const>
global XK_Shift_R: cint <cimport,nodecl,const>
global XK_Control_L: cint <cimport,nodecl,const>
global XK_Control_R: cint <cimport,nodecl,const>
global XK_Caps_Lock: cint <cimport,nodecl,const>
global XK_Shift_Lock: cint <cimport,nodecl,const>
global XK_Meta_L: cint <cimport,nodecl,const>
global XK_Meta_R: cint <cimport,nodecl,const>
global XK_Alt_L: cint <cimport,nodecl,const>
global XK_Alt_R: cint <cimport,nodecl,const>
global XK_Super_L: cint <cimport,nodecl,const>
global XK_Super_R: cint <cimport,nodecl,const>
global XK_Hyper_L: cint <cimport,nodecl,const>
global XK_Hyper_R: cint <cimport,nodecl,const>
global XK_ISO_Lock: cint <cimport,nodecl,const>
global XK_ISO_Level2_Latch: cint <cimport,nodecl,const>
global XK_ISO_Level3_Shift: cint <cimport,nodecl,const>
global XK_ISO_Level3_Latch: cint <cimport,nodecl,const>
global XK_ISO_Level3_Lock: cint <cimport,nodecl,const>
global XK_ISO_Level5_Shift: cint <cimport,nodecl,const>
global XK_ISO_Level5_Latch: cint <cimport,nodecl,const>
global XK_ISO_Level5_Lock: cint <cimport,nodecl,const>
global XK_ISO_Group_Shift: cint <cimport,nodecl,const>
global XK_ISO_Group_Latch: cint <cimport,nodecl,const>
global XK_ISO_Group_Lock: cint <cimport,nodecl,const>
global XK_ISO_Next_Group: cint <cimport,nodecl,const>
global XK_ISO_Next_Group_Lock: cint <cimport,nodecl,const>
global XK_ISO_Prev_Group: cint <cimport,nodecl,const>
global XK_ISO_Prev_Group_Lock: cint <cimport,nodecl,const>
global XK_ISO_First_Group: cint <cimport,nodecl,const>
global XK_ISO_First_Group_Lock: cint <cimport,nodecl,const>
global XK_ISO_Last_Group: cint <cimport,nodecl,const>
global XK_ISO_Last_Group_Lock: cint <cimport,nodecl,const>
global XK_ISO_Left_Tab: cint <cimport,nodecl,const>
global XK_ISO_Move_Line_Up: cint <cimport,nodecl,const>
global XK_ISO_Move_Line_Down: cint <cimport,nodecl,const>
global XK_ISO_Partial_Line_Up: cint <cimport,nodecl,const>
global XK_ISO_Partial_Line_Down: cint <cimport,nodecl,const>
global XK_ISO_Partial_Space_Left: cint <cimport,nodecl,const>
global XK_ISO_Partial_Space_Right: cint <cimport,nodecl,const>
global XK_ISO_Set_Margin_Left: cint <cimport,nodecl,const>
global XK_ISO_Set_Margin_Right: cint <cimport,nodecl,const>
global XK_ISO_Release_Margin_Left: cint <cimport,nodecl,const>
global XK_ISO_Release_Margin_Right: cint <cimport,nodecl,const>
global XK_ISO_Release_Both_Margins: cint <cimport,nodecl,const>
global XK_ISO_Fast_Cursor_Left: cint <cimport,nodecl,const>
global XK_ISO_Fast_Cursor_Right: cint <cimport,nodecl,const>
global XK_ISO_Fast_Cursor_Up: cint <cimport,nodecl,const>
global XK_ISO_Fast_Cursor_Down: cint <cimport,nodecl,const>
global XK_ISO_Continuous_Underline: cint <cimport,nodecl,const>
global XK_ISO_Discontinuous_Underline: cint <cimport,nodecl,const>
global XK_ISO_Emphasize: cint <cimport,nodecl,const>
global XK_ISO_Center_Object: cint <cimport,nodecl,const>
global XK_ISO_Enter: cint <cimport,nodecl,const>
global XK_dead_grave: cint <cimport,nodecl,const>
global XK_dead_acute: cint <cimport,nodecl,const>
global XK_dead_circumflex: cint <cimport,nodecl,const>
global XK_dead_tilde: cint <cimport,nodecl,const>
global XK_dead_perispomeni: cint <cimport,nodecl,const>
global XK_dead_macron: cint <cimport,nodecl,const>
global XK_dead_breve: cint <cimport,nodecl,const>
global XK_dead_abovedot: cint <cimport,nodecl,const>
global XK_dead_diaeresis: cint <cimport,nodecl,const>
global XK_dead_abovering: cint <cimport,nodecl,const>
global XK_dead_doubleacute: cint <cimport,nodecl,const>
global XK_dead_caron: cint <cimport,nodecl,const>
global XK_dead_cedilla: cint <cimport,nodecl,const>
global XK_dead_ogonek: cint <cimport,nodecl,const>
global XK_dead_iota: cint <cimport,nodecl,const>
global XK_dead_voiced_sound: cint <cimport,nodecl,const>
global XK_dead_semivoiced_sound: cint <cimport,nodecl,const>
global XK_dead_belowdot: cint <cimport,nodecl,const>
global XK_dead_hook: cint <cimport,nodecl,const>
global XK_dead_horn: cint <cimport,nodecl,const>
global XK_dead_stroke: cint <cimport,nodecl,const>
global XK_dead_abovecomma: cint <cimport,nodecl,const>
global XK_dead_psili: cint <cimport,nodecl,const>
global XK_dead_abovereversedcomma: cint <cimport,nodecl,const>
global XK_dead_dasia: cint <cimport,nodecl,const>
global XK_dead_doublegrave: cint <cimport,nodecl,const>
global XK_dead_belowring: cint <cimport,nodecl,const>
global XK_dead_belowmacron: cint <cimport,nodecl,const>
global XK_dead_belowcircumflex: cint <cimport,nodecl,const>
global XK_dead_belowtilde: cint <cimport,nodecl,const>
global XK_dead_belowbreve: cint <cimport,nodecl,const>
global XK_dead_belowdiaeresis: cint <cimport,nodecl,const>
global XK_dead_invertedbreve: cint <cimport,nodecl,const>
global XK_dead_belowcomma: cint <cimport,nodecl,const>
global XK_dead_currency: cint <cimport,nodecl,const>
global XK_dead_lowline: cint <cimport,nodecl,const>
global XK_dead_aboveverticalline: cint <cimport,nodecl,const>
global XK_dead_belowverticalline: cint <cimport,nodecl,const>
global XK_dead_longsolidusoverlay: cint <cimport,nodecl,const>
global XK_dead_a: cint <cimport,nodecl,const>
global XK_dead_A: cint <cimport,nodecl,const>
global XK_dead_e: cint <cimport,nodecl,const>
global XK_dead_E: cint <cimport,nodecl,const>
global XK_dead_i: cint <cimport,nodecl,const>
global XK_dead_I: cint <cimport,nodecl,const>
global XK_dead_o: cint <cimport,nodecl,const>
global XK_dead_O: cint <cimport,nodecl,const>
global XK_dead_u: cint <cimport,nodecl,const>
global XK_dead_U: cint <cimport,nodecl,const>
global XK_dead_small_schwa: cint <cimport,nodecl,const>
global XK_dead_capital_schwa: cint <cimport,nodecl,const>
global XK_dead_greek: cint <cimport,nodecl,const>
global XK_First_Virtual_Screen: cint <cimport,nodecl,const>
global XK_Prev_Virtual_Screen: cint <cimport,nodecl,const>
global XK_Next_Virtual_Screen: cint <cimport,nodecl,const>
global XK_Last_Virtual_Screen: cint <cimport,nodecl,const>
global XK_Terminate_Server: cint <cimport,nodecl,const>
global XK_AccessX_Enable: cint <cimport,nodecl,const>
global XK_AccessX_Feedback_Enable: cint <cimport,nodecl,const>
global XK_RepeatKeys_Enable: cint <cimport,nodecl,const>
global XK_SlowKeys_Enable: cint <cimport,nodecl,const>
global XK_BounceKeys_Enable: cint <cimport,nodecl,const>
global XK_StickyKeys_Enable: cint <cimport,nodecl,const>
global XK_MouseKeys_Enable: cint <cimport,nodecl,const>
global XK_MouseKeys_Accel_Enable: cint <cimport,nodecl,const>
global XK_Overlay1_Enable: cint <cimport,nodecl,const>
global XK_Overlay2_Enable: cint <cimport,nodecl,const>
global XK_AudibleBell_Enable: cint <cimport,nodecl,const>
global XK_Pointer_Left: cint <cimport,nodecl,const>
global XK_Pointer_Right: cint <cimport,nodecl,const>
global XK_Pointer_Up: cint <cimport,nodecl,const>
global XK_Pointer_Down: cint <cimport,nodecl,const>
global XK_Pointer_UpLeft: cint <cimport,nodecl,const>
global XK_Pointer_UpRight: cint <cimport,nodecl,const>
global XK_Pointer_DownLeft: cint <cimport,nodecl,const>
global XK_Pointer_DownRight: cint <cimport,nodecl,const>
global XK_Pointer_Button_Dflt: cint <cimport,nodecl,const>
global XK_Pointer_Button1: cint <cimport,nodecl,const>
global XK_Pointer_Button2: cint <cimport,nodecl,const>
global XK_Pointer_Button3: cint <cimport,nodecl,const>
global XK_Pointer_Button4: cint <cimport,nodecl,const>
global XK_Pointer_Button5: cint <cimport,nodecl,const>
global XK_Pointer_DblClick_Dflt: cint <cimport,nodecl,const>
global XK_Pointer_DblClick1: cint <cimport,nodecl,const>
global XK_Pointer_DblClick2: cint <cimport,nodecl,const>
global XK_Pointer_DblClick3: cint <cimport,nodecl,const>
global XK_Pointer_DblClick4: cint <cimport,nodecl,const>
global XK_Pointer_DblClick5: cint <cimport,nodecl,const>
global XK_Pointer_Drag_Dflt: cint <cimport,nodecl,const>
global XK_Pointer_Drag1: cint <cimport,nodecl,const>
global XK_Pointer_Drag2: cint <cimport,nodecl,const>
global XK_Pointer_Drag3: cint <cimport,nodecl,const>
global XK_Pointer_Drag4: cint <cimport,nodecl,const>
global XK_Pointer_Drag5: cint <cimport,nodecl,const>
global XK_Pointer_EnableKeys: cint <cimport,nodecl,const>
global XK_Pointer_Accelerate: cint <cimport,nodecl,const>
global XK_Pointer_DfltBtnNext: cint <cimport,nodecl,const>
global XK_Pointer_DfltBtnPrev: cint <cimport,nodecl,const>
global XK_ch: cint <cimport,nodecl,const>
global XK_Ch: cint <cimport,nodecl,const>
global XK_CH: cint <cimport,nodecl,const>
global XK_c_h: cint <cimport,nodecl,const>
global XK_C_h: cint <cimport,nodecl,const>
global XK_C_H: cint <cimport,nodecl,const>
global XK_space: cint <cimport,nodecl,const>
global XK_exclam: cint <cimport,nodecl,const>
global XK_quotedbl: cint <cimport,nodecl,const>
global XK_numbersign: cint <cimport,nodecl,const>
global XK_dollar: cint <cimport,nodecl,const>
global XK_percent: cint <cimport,nodecl,const>
global XK_ampersand: cint <cimport,nodecl,const>
global XK_apostrophe: cint <cimport,nodecl,const>
global XK_quoteright: cint <cimport,nodecl,const>
global XK_parenleft: cint <cimport,nodecl,const>
global XK_parenright: cint <cimport,nodecl,const>
global XK_asterisk: cint <cimport,nodecl,const>
global XK_plus: cint <cimport,nodecl,const>
global XK_comma: cint <cimport,nodecl,const>
global XK_minus: cint <cimport,nodecl,const>
global XK_period: cint <cimport,nodecl,const>
global XK_slash: cint <cimport,nodecl,const>
global XK_0: cint <cimport,nodecl,const>
global XK_1: cint <cimport,nodecl,const>
global XK_2: cint <cimport,nodecl,const>
global XK_3: cint <cimport,nodecl,const>
global XK_4: cint <cimport,nodecl,const>
global XK_5: cint <cimport,nodecl,const>
global XK_6: cint <cimport,nodecl,const>
global XK_7: cint <cimport,nodecl,const>
global XK_8: cint <cimport,nodecl,const>
global XK_9: cint <cimport,nodecl,const>
global XK_colon: cint <cimport,nodecl,const>
global XK_semicolon: cint <cimport,nodecl,const>
global XK_less: cint <cimport,nodecl,const>
global XK_equal: cint <cimport,nodecl,const>
global XK_greater: cint <cimport,nodecl,const>
global XK_question: cint <cimport,nodecl,const>
global XK_at: cint <cimport,nodecl,const>
global XK_A: cint <cimport,nodecl,const>
global XK_B: cint <cimport,nodecl,const>
global XK_C: cint <cimport,nodecl,const>
global XK_D: cint <cimport,nodecl,const>
global XK_E: cint <cimport,nodecl,const>
global XK_F: cint <cimport,nodecl,const>
global XK_G: cint <cimport,nodecl,const>
global XK_H: cint <cimport,nodecl,const>
global XK_I: cint <cimport,nodecl,const>
global XK_J: cint <cimport,nodecl,const>
global XK_K: cint <cimport,nodecl,const>
global XK_L: cint <cimport,nodecl,const>
global XK_M: cint <cimport,nodecl,const>
global XK_N: cint <cimport,nodecl,const>
global XK_O: cint <cimport,nodecl,const>
global XK_P: cint <cimport,nodecl,const>
global XK_Q: cint <cimport,nodecl,const>
global XK_R: cint <cimport,nodecl,const>
global XK_S: cint <cimport,nodecl,const>
global XK_T: cint <cimport,nodecl,const>
global XK_U: cint <cimport,nodecl,const>
global XK_V: cint <cimport,nodecl,const>
global XK_W: cint <cimport,nodecl,const>
global XK_X: cint <cimport,nodecl,const>
global XK_Y: cint <cimport,nodecl,const>
global XK_Z: cint <cimport,nodecl,const>
global XK_bracketleft: cint <cimport,nodecl,const>
global XK_backslash: cint <cimport,nodecl,const>
global XK_bracketright: cint <cimport,nodecl,const>
global XK_asciicircum: cint <cimport,nodecl,const>
global XK_underscore: cint <cimport,nodecl,const>
global XK_grave: cint <cimport,nodecl,const>
global XK_quoteleft: cint <cimport,nodecl,const>
global XK_a: cint <cimport,nodecl,const>
global XK_b: cint <cimport,nodecl,const>
global XK_c: cint <cimport,nodecl,const>
global XK_d: cint <cimport,nodecl,const>
global XK_e: cint <cimport,nodecl,const>
global XK_f: cint <cimport,nodecl,const>
global XK_g: cint <cimport,nodecl,const>
global XK_h: cint <cimport,nodecl,const>
global XK_i: cint <cimport,nodecl,const>
global XK_j: cint <cimport,nodecl,const>
global XK_k: cint <cimport,nodecl,const>
global XK_l: cint <cimport,nodecl,const>
global XK_m: cint <cimport,nodecl,const>
global XK_n: cint <cimport,nodecl,const>
global XK_o: cint <cimport,nodecl,const>
global XK_p: cint <cimport,nodecl,const>
global XK_q: cint <cimport,nodecl,const>
global XK_r: cint <cimport,nodecl,const>
global XK_s: cint <cimport,nodecl,const>
global XK_t: cint <cimport,nodecl,const>
global XK_u: cint <cimport,nodecl,const>
global XK_v: cint <cimport,nodecl,const>
global XK_w: cint <cimport,nodecl,const>
global XK_x: cint <cimport,nodecl,const>
global XK_y: cint <cimport,nodecl,const>
global XK_z: cint <cimport,nodecl,const>
global XK_braceleft: cint <cimport,nodecl,const>
global XK_bar: cint <cimport,nodecl,const>
global XK_braceright: cint <cimport,nodecl,const>
global XK_asciitilde: cint <cimport,nodecl,const>
global XK_nobreakspace: cint <cimport,nodecl,const>
global XK_exclamdown: cint <cimport,nodecl,const>
global XK_cent: cint <cimport,nodecl,const>
global XK_sterling: cint <cimport,nodecl,const>
global XK_currency: cint <cimport,nodecl,const>
global XK_yen: cint <cimport,nodecl,const>
global XK_brokenbar: cint <cimport,nodecl,const>
global XK_section: cint <cimport,nodecl,const>
global XK_diaeresis: cint <cimport,nodecl,const>
global XK_copyright: cint <cimport,nodecl,const>
global XK_ordfeminine: cint <cimport,nodecl,const>
global XK_guillemotleft: cint <cimport,nodecl,const>
global XK_notsign: cint <cimport,nodecl,const>
global XK_hyphen: cint <cimport,nodecl,const>
global XK_registered: cint <cimport,nodecl,const>
global XK_macron: cint <cimport,nodecl,const>
global XK_degree: cint <cimport,nodecl,const>
global XK_plusminus: cint <cimport,nodecl,const>
global XK_twosuperior: cint <cimport,nodecl,const>
global XK_threesuperior: cint <cimport,nodecl,const>
global XK_acute: cint <cimport,nodecl,const>
global XK_mu: cint <cimport,nodecl,const>
global XK_paragraph: cint <cimport,nodecl,const>
global XK_periodcentered: cint <cimport,nodecl,const>
global XK_cedilla: cint <cimport,nodecl,const>
global XK_onesuperior: cint <cimport,nodecl,const>
global XK_masculine: cint <cimport,nodecl,const>
global XK_guillemotright: cint <cimport,nodecl,const>
global XK_onequarter: cint <cimport,nodecl,const>
global XK_onehalf: cint <cimport,nodecl,const>
global XK_threequarters: cint <cimport,nodecl,const>
global XK_questiondown: cint <cimport,nodecl,const>
global XK_Agrave: cint <cimport,nodecl,const>
global XK_Aacute: cint <cimport,nodecl,const>
global XK_Acircumflex: cint <cimport,nodecl,const>
global XK_Atilde: cint <cimport,nodecl,const>
global XK_Adiaeresis: cint <cimport,nodecl,const>
global XK_Aring: cint <cimport,nodecl,const>
global XK_AE: cint <cimport,nodecl,const>
global XK_Ccedilla: cint <cimport,nodecl,const>
global XK_Egrave: cint <cimport,nodecl,const>
global XK_Eacute: cint <cimport,nodecl,const>
global XK_Ecircumflex: cint <cimport,nodecl,const>
global XK_Ediaeresis: cint <cimport,nodecl,const>
global XK_Igrave: cint <cimport,nodecl,const>
global XK_Iacute: cint <cimport,nodecl,const>
global XK_Icircumflex: cint <cimport,nodecl,const>
global XK_Idiaeresis: cint <cimport,nodecl,const>
global XK_ETH: cint <cimport,nodecl,const>
global XK_Eth: cint <cimport,nodecl,const>
global XK_Ntilde: cint <cimport,nodecl,const>
global XK_Ograve: cint <cimport,nodecl,const>
global XK_Oacute: cint <cimport,nodecl,const>
global XK_Ocircumflex: cint <cimport,nodecl,const>
global XK_Otilde: cint <cimport,nodecl,const>
global XK_Odiaeresis: cint <cimport,nodecl,const>
global XK_multiply: cint <cimport,nodecl,const>
global XK_Oslash: cint <cimport,nodecl,const>
global XK_Ooblique: cint <cimport,nodecl,const>
global XK_Ugrave: cint <cimport,nodecl,const>
global XK_Uacute: cint <cimport,nodecl,const>
global XK_Ucircumflex: cint <cimport,nodecl,const>
global XK_Udiaeresis: cint <cimport,nodecl,const>
global XK_Yacute: cint <cimport,nodecl,const>
global XK_THORN: cint <cimport,nodecl,const>
global XK_Thorn: cint <cimport,nodecl,const>
global XK_ssharp: cint <cimport,nodecl,const>
global XK_agrave: cint <cimport,nodecl,const>
global XK_aacute: cint <cimport,nodecl,const>
global XK_acircumflex: cint <cimport,nodecl,const>
global XK_atilde: cint <cimport,nodecl,const>
global XK_adiaeresis: cint <cimport,nodecl,const>
global XK_aring: cint <cimport,nodecl,const>
global XK_ae: cint <cimport,nodecl,const>
global XK_ccedilla: cint <cimport,nodecl,const>
global XK_egrave: cint <cimport,nodecl,const>
global XK_eacute: cint <cimport,nodecl,const>
global XK_ecircumflex: cint <cimport,nodecl,const>
global XK_ediaeresis: cint <cimport,nodecl,const>
global XK_igrave: cint <cimport,nodecl,const>
global XK_iacute: cint <cimport,nodecl,const>
global XK_icircumflex: cint <cimport,nodecl,const>
global XK_idiaeresis: cint <cimport,nodecl,const>
global XK_eth: cint <cimport,nodecl,const>
global XK_ntilde: cint <cimport,nodecl,const>
global XK_ograve: cint <cimport,nodecl,const>
global XK_oacute: cint <cimport,nodecl,const>
global XK_ocircumflex: cint <cimport,nodecl,const>
global XK_otilde: cint <cimport,nodecl,const>
global XK_odiaeresis: cint <cimport,nodecl,const>
global XK_division: cint <cimport,nodecl,const>
global XK_oslash: cint <cimport,nodecl,const>
global XK_ooblique: cint <cimport,nodecl,const>
global XK_ugrave: cint <cimport,nodecl,const>
global XK_uacute: cint <cimport,nodecl,const>
global XK_ucircumflex: cint <cimport,nodecl,const>
global XK_udiaeresis: cint <cimport,nodecl,const>
global XK_yacute: cint <cimport,nodecl,const>
global XK_thorn: cint <cimport,nodecl,const>
global XK_ydiaeresis: cint <cimport,nodecl,const>
global XK_Aogonek: cint <cimport,nodecl,const>
global XK_breve: cint <cimport,nodecl,const>
global XK_Lstroke: cint <cimport,nodecl,const>
global XK_Lcaron: cint <cimport,nodecl,const>
global XK_Sacute: cint <cimport,nodecl,const>
global XK_Scaron: cint <cimport,nodecl,const>
global XK_Scedilla: cint <cimport,nodecl,const>
global XK_Tcaron: cint <cimport,nodecl,const>
global XK_Zacute: cint <cimport,nodecl,const>
global XK_Zcaron: cint <cimport,nodecl,const>
global XK_Zabovedot: cint <cimport,nodecl,const>
global XK_aogonek: cint <cimport,nodecl,const>
global XK_ogonek: cint <cimport,nodecl,const>
global XK_lstroke: cint <cimport,nodecl,const>
global XK_lcaron: cint <cimport,nodecl,const>
global XK_sacute: cint <cimport,nodecl,const>
global XK_caron: cint <cimport,nodecl,const>
global XK_scaron: cint <cimport,nodecl,const>
global XK_scedilla: cint <cimport,nodecl,const>
global XK_tcaron: cint <cimport,nodecl,const>
global XK_zacute: cint <cimport,nodecl,const>
global XK_doubleacute: cint <cimport,nodecl,const>
global XK_zcaron: cint <cimport,nodecl,const>
global XK_zabovedot: cint <cimport,nodecl,const>
global XK_Racute: cint <cimport,nodecl,const>
global XK_Abreve: cint <cimport,nodecl,const>
global XK_Lacute: cint <cimport,nodecl,const>
global XK_Cacute: cint <cimport,nodecl,const>
global XK_Ccaron: cint <cimport,nodecl,const>
global XK_Eogonek: cint <cimport,nodecl,const>
global XK_Ecaron: cint <cimport,nodecl,const>
global XK_Dcaron: cint <cimport,nodecl,const>
global XK_Dstroke: cint <cimport,nodecl,const>
global XK_Nacute: cint <cimport,nodecl,const>
global XK_Ncaron: cint <cimport,nodecl,const>
global XK_Odoubleacute: cint <cimport,nodecl,const>
global XK_Rcaron: cint <cimport,nodecl,const>
global XK_Uring: cint <cimport,nodecl,const>
global XK_Udoubleacute: cint <cimport,nodecl,const>
global XK_Tcedilla: cint <cimport,nodecl,const>
global XK_racute: cint <cimport,nodecl,const>
global XK_abreve: cint <cimport,nodecl,const>
global XK_lacute: cint <cimport,nodecl,const>
global XK_cacute: cint <cimport,nodecl,const>
global XK_ccaron: cint <cimport,nodecl,const>
global XK_eogonek: cint <cimport,nodecl,const>
global XK_ecaron: cint <cimport,nodecl,const>
global XK_dcaron: cint <cimport,nodecl,const>
global XK_dstroke: cint <cimport,nodecl,const>
global XK_nacute: cint <cimport,nodecl,const>
global XK_ncaron: cint <cimport,nodecl,const>
global XK_odoubleacute: cint <cimport,nodecl,const>
global XK_rcaron: cint <cimport,nodecl,const>
global XK_uring: cint <cimport,nodecl,const>
global XK_udoubleacute: cint <cimport,nodecl,const>
global XK_tcedilla: cint <cimport,nodecl,const>
global XK_abovedot: cint <cimport,nodecl,const>
global XK_Hstroke: cint <cimport,nodecl,const>
global XK_Hcircumflex: cint <cimport,nodecl,const>
global XK_Iabovedot: cint <cimport,nodecl,const>
global XK_Gbreve: cint <cimport,nodecl,const>
global XK_Jcircumflex: cint <cimport,nodecl,const>
global XK_hstroke: cint <cimport,nodecl,const>
global XK_hcircumflex: cint <cimport,nodecl,const>
global XK_idotless: cint <cimport,nodecl,const>
global XK_gbreve: cint <cimport,nodecl,const>
global XK_jcircumflex: cint <cimport,nodecl,const>
global XK_Cabovedot: cint <cimport,nodecl,const>
global XK_Ccircumflex: cint <cimport,nodecl,const>
global XK_Gabovedot: cint <cimport,nodecl,const>
global XK_Gcircumflex: cint <cimport,nodecl,const>
global XK_Ubreve: cint <cimport,nodecl,const>
global XK_Scircumflex: cint <cimport,nodecl,const>
global XK_cabovedot: cint <cimport,nodecl,const>
global XK_ccircumflex: cint <cimport,nodecl,const>
global XK_gabovedot: cint <cimport,nodecl,const>
global XK_gcircumflex: cint <cimport,nodecl,const>
global XK_ubreve: cint <cimport,nodecl,const>
global XK_scircumflex: cint <cimport,nodecl,const>
global XK_kra: cint <cimport,nodecl,const>
global XK_kappa: cint <cimport,nodecl,const>
global XK_Rcedilla: cint <cimport,nodecl,const>
global XK_Itilde: cint <cimport,nodecl,const>
global XK_Lcedilla: cint <cimport,nodecl,const>
global XK_Emacron: cint <cimport,nodecl,const>
global XK_Gcedilla: cint <cimport,nodecl,const>
global XK_Tslash: cint <cimport,nodecl,const>
global XK_rcedilla: cint <cimport,nodecl,const>
global XK_itilde: cint <cimport,nodecl,const>
global XK_lcedilla: cint <cimport,nodecl,const>
global XK_emacron: cint <cimport,nodecl,const>
global XK_gcedilla: cint <cimport,nodecl,const>
global XK_tslash: cint <cimport,nodecl,const>
global XK_ENG: cint <cimport,nodecl,const>
global XK_eng: cint <cimport,nodecl,const>
global XK_Amacron: cint <cimport,nodecl,const>
global XK_Iogonek: cint <cimport,nodecl,const>
global XK_Eabovedot: cint <cimport,nodecl,const>
global XK_Imacron: cint <cimport,nodecl,const>
global XK_Ncedilla: cint <cimport,nodecl,const>
global XK_Omacron: cint <cimport,nodecl,const>
global XK_Kcedilla: cint <cimport,nodecl,const>
global XK_Uogonek: cint <cimport,nodecl,const>
global XK_Utilde: cint <cimport,nodecl,const>
global XK_Umacron: cint <cimport,nodecl,const>
global XK_amacron: cint <cimport,nodecl,const>
global XK_iogonek: cint <cimport,nodecl,const>
global XK_eabovedot: cint <cimport,nodecl,const>
global XK_imacron: cint <cimport,nodecl,const>
global XK_ncedilla: cint <cimport,nodecl,const>
global XK_omacron: cint <cimport,nodecl,const>
global XK_kcedilla: cint <cimport,nodecl,const>
global XK_uogonek: cint <cimport,nodecl,const>
global XK_utilde: cint <cimport,nodecl,const>
global XK_umacron: cint <cimport,nodecl,const>
global XK_Wcircumflex: cint <cimport,nodecl,const>
global XK_wcircumflex: cint <cimport,nodecl,const>
global XK_Ycircumflex: cint <cimport,nodecl,const>
global XK_ycircumflex: cint <cimport,nodecl,const>
global XK_Babovedot: cint <cimport,nodecl,const>
global XK_babovedot: cint <cimport,nodecl,const>
global XK_Dabovedot: cint <cimport,nodecl,const>
global XK_dabovedot: cint <cimport,nodecl,const>
global XK_Fabovedot: cint <cimport,nodecl,const>
global XK_fabovedot: cint <cimport,nodecl,const>
global XK_Mabovedot: cint <cimport,nodecl,const>
global XK_mabovedot: cint <cimport,nodecl,const>
global XK_Pabovedot: cint <cimport,nodecl,const>
global XK_pabovedot: cint <cimport,nodecl,const>
global XK_Sabovedot: cint <cimport,nodecl,const>
global XK_sabovedot: cint <cimport,nodecl,const>
global XK_Tabovedot: cint <cimport,nodecl,const>
global XK_tabovedot: cint <cimport,nodecl,const>
global XK_Wgrave: cint <cimport,nodecl,const>
global XK_wgrave: cint <cimport,nodecl,const>
global XK_Wacute: cint <cimport,nodecl,const>
global XK_wacute: cint <cimport,nodecl,const>
global XK_Wdiaeresis: cint <cimport,nodecl,const>
global XK_wdiaeresis: cint <cimport,nodecl,const>
global XK_Ygrave: cint <cimport,nodecl,const>
global XK_ygrave: cint <cimport,nodecl,const>
global XK_OE: cint <cimport,nodecl,const>
global XK_oe: cint <cimport,nodecl,const>
global XK_Ydiaeresis: cint <cimport,nodecl,const>
global XK_overline: cint <cimport,nodecl,const>
global XK_kana_fullstop: cint <cimport,nodecl,const>
global XK_kana_openingbracket: cint <cimport,nodecl,const>
global XK_kana_closingbracket: cint <cimport,nodecl,const>
global XK_kana_comma: cint <cimport,nodecl,const>
global XK_kana_conjunctive: cint <cimport,nodecl,const>
global XK_kana_middledot: cint <cimport,nodecl,const>
global XK_kana_WO: cint <cimport,nodecl,const>
global XK_kana_a: cint <cimport,nodecl,const>
global XK_kana_i: cint <cimport,nodecl,const>
global XK_kana_u: cint <cimport,nodecl,const>
global XK_kana_e: cint <cimport,nodecl,const>
global XK_kana_o: cint <cimport,nodecl,const>
global XK_kana_ya: cint <cimport,nodecl,const>
global XK_kana_yu: cint <cimport,nodecl,const>
global XK_kana_yo: cint <cimport,nodecl,const>
global XK_kana_tsu: cint <cimport,nodecl,const>
global XK_kana_tu: cint <cimport,nodecl,const>
global XK_prolongedsound: cint <cimport,nodecl,const>
global XK_kana_A: cint <cimport,nodecl,const>
global XK_kana_I: cint <cimport,nodecl,const>
global XK_kana_U: cint <cimport,nodecl,const>
global XK_kana_E: cint <cimport,nodecl,const>
global XK_kana_O: cint <cimport,nodecl,const>
global XK_kana_KA: cint <cimport,nodecl,const>
global XK_kana_KI: cint <cimport,nodecl,const>
global XK_kana_KU: cint <cimport,nodecl,const>
global XK_kana_KE: cint <cimport,nodecl,const>
global XK_kana_KO: cint <cimport,nodecl,const>
global XK_kana_SA: cint <cimport,nodecl,const>
global XK_kana_SHI: cint <cimport,nodecl,const>
global XK_kana_SU: cint <cimport,nodecl,const>
global XK_kana_SE: cint <cimport,nodecl,const>
global XK_kana_SO: cint <cimport,nodecl,const>
global XK_kana_TA: cint <cimport,nodecl,const>
global XK_kana_CHI: cint <cimport,nodecl,const>
global XK_kana_TI: cint <cimport,nodecl,const>
global XK_kana_TSU: cint <cimport,nodecl,const>
global XK_kana_TU: cint <cimport,nodecl,const>
global XK_kana_TE: cint <cimport,nodecl,const>
global XK_kana_TO: cint <cimport,nodecl,const>
global XK_kana_NA: cint <cimport,nodecl,const>
global XK_kana_NI: cint <cimport,nodecl,const>
global XK_kana_NU: cint <cimport,nodecl,const>
global XK_kana_NE: cint <cimport,nodecl,const>
global XK_kana_NO: cint <cimport,nodecl,const>
global XK_kana_HA: cint <cimport,nodecl,const>
global XK_kana_HI: cint <cimport,nodecl,const>
global XK_kana_FU: cint <cimport,nodecl,const>
global XK_kana_HU: cint <cimport,nodecl,const>
global XK_kana_HE: cint <cimport,nodecl,const>
global XK_kana_HO: cint <cimport,nodecl,const>
global XK_kana_MA: cint <cimport,nodecl,const>
global XK_kana_MI: cint <cimport,nodecl,const>
global XK_kana_MU: cint <cimport,nodecl,const>
global XK_kana_ME: cint <cimport,nodecl,const>
global XK_kana_MO: cint <cimport,nodecl,const>
global XK_kana_YA: cint <cimport,nodecl,const>
global XK_kana_YU: cint <cimport,nodecl,const>
global XK_kana_YO: cint <cimport,nodecl,const>
global XK_kana_RA: cint <cimport,nodecl,const>
global XK_kana_RI: cint <cimport,nodecl,const>
global XK_kana_RU: cint <cimport,nodecl,const>
global XK_kana_RE: cint <cimport,nodecl,const>
global XK_kana_RO: cint <cimport,nodecl,const>
global XK_kana_WA: cint <cimport,nodecl,const>
global XK_kana_N: cint <cimport,nodecl,const>
global XK_voicedsound: cint <cimport,nodecl,const>
global XK_semivoicedsound: cint <cimport,nodecl,const>
global XK_kana_switch: cint <cimport,nodecl,const>
global XK_Farsi_0: cint <cimport,nodecl,const>
global XK_Farsi_1: cint <cimport,nodecl,const>
global XK_Farsi_2: cint <cimport,nodecl,const>
global XK_Farsi_3: cint <cimport,nodecl,const>
global XK_Farsi_4: cint <cimport,nodecl,const>
global XK_Farsi_5: cint <cimport,nodecl,const>
global XK_Farsi_6: cint <cimport,nodecl,const>
global XK_Farsi_7: cint <cimport,nodecl,const>
global XK_Farsi_8: cint <cimport,nodecl,const>
global XK_Farsi_9: cint <cimport,nodecl,const>
global XK_Arabic_percent: cint <cimport,nodecl,const>
global XK_Arabic_superscript_alef: cint <cimport,nodecl,const>
global XK_Arabic_tteh: cint <cimport,nodecl,const>
global XK_Arabic_peh: cint <cimport,nodecl,const>
global XK_Arabic_tcheh: cint <cimport,nodecl,const>
global XK_Arabic_ddal: cint <cimport,nodecl,const>
global XK_Arabic_rreh: cint <cimport,nodecl,const>
global XK_Arabic_comma: cint <cimport,nodecl,const>
global XK_Arabic_fullstop: cint <cimport,nodecl,const>
global XK_Arabic_0: cint <cimport,nodecl,const>
global XK_Arabic_1: cint <cimport,nodecl,const>
global XK_Arabic_2: cint <cimport,nodecl,const>
global XK_Arabic_3: cint <cimport,nodecl,const>
global XK_Arabic_4: cint <cimport,nodecl,const>
global XK_Arabic_5: cint <cimport,nodecl,const>
global XK_Arabic_6: cint <cimport,nodecl,const>
global XK_Arabic_7: cint <cimport,nodecl,const>
global XK_Arabic_8: cint <cimport,nodecl,const>
global XK_Arabic_9: cint <cimport,nodecl,const>
global XK_Arabic_semicolon: cint <cimport,nodecl,const>
global XK_Arabic_question_mark: cint <cimport,nodecl,const>
global XK_Arabic_hamza: cint <cimport,nodecl,const>
global XK_Arabic_maddaonalef: cint <cimport,nodecl,const>
global XK_Arabic_hamzaonalef: cint <cimport,nodecl,const>
global XK_Arabic_hamzaonwaw: cint <cimport,nodecl,const>
global XK_Arabic_hamzaunderalef: cint <cimport,nodecl,const>
global XK_Arabic_hamzaonyeh: cint <cimport,nodecl,const>
global XK_Arabic_alef: cint <cimport,nodecl,const>
global XK_Arabic_beh: cint <cimport,nodecl,const>
global XK_Arabic_tehmarbuta: cint <cimport,nodecl,const>
global XK_Arabic_teh: cint <cimport,nodecl,const>
global XK_Arabic_theh: cint <cimport,nodecl,const>
global XK_Arabic_jeem: cint <cimport,nodecl,const>
global XK_Arabic_hah: cint <cimport,nodecl,const>
global XK_Arabic_khah: cint <cimport,nodecl,const>
global XK_Arabic_dal: cint <cimport,nodecl,const>
global XK_Arabic_thal: cint <cimport,nodecl,const>
global XK_Arabic_ra: cint <cimport,nodecl,const>
global XK_Arabic_zain: cint <cimport,nodecl,const>
global XK_Arabic_seen: cint <cimport,nodecl,const>
global XK_Arabic_sheen: cint <cimport,nodecl,const>
global XK_Arabic_sad: cint <cimport,nodecl,const>
global XK_Arabic_dad: cint <cimport,nodecl,const>
global XK_Arabic_tah: cint <cimport,nodecl,const>
global XK_Arabic_zah: cint <cimport,nodecl,const>
global XK_Arabic_ain: cint <cimport,nodecl,const>
global XK_Arabic_ghain: cint <cimport,nodecl,const>
global XK_Arabic_tatweel: cint <cimport,nodecl,const>
global XK_Arabic_feh: cint <cimport,nodecl,const>
global XK_Arabic_qaf: cint <cimport,nodecl,const>
global XK_Arabic_kaf: cint <cimport,nodecl,const>
global XK_Arabic_lam: cint <cimport,nodecl,const>
global XK_Arabic_meem: cint <cimport,nodecl,const>
global XK_Arabic_noon: cint <cimport,nodecl,const>
global XK_Arabic_ha: cint <cimport,nodecl,const>
global XK_Arabic_heh: cint <cimport,nodecl,const>
global XK_Arabic_waw: cint <cimport,nodecl,const>
global XK_Arabic_alefmaksura: cint <cimport,nodecl,const>
global XK_Arabic_yeh: cint <cimport,nodecl,const>
global XK_Arabic_fathatan: cint <cimport,nodecl,const>
global XK_Arabic_dammatan: cint <cimport,nodecl,const>
global XK_Arabic_kasratan: cint <cimport,nodecl,const>
global XK_Arabic_fatha: cint <cimport,nodecl,const>
global XK_Arabic_damma: cint <cimport,nodecl,const>
global XK_Arabic_kasra: cint <cimport,nodecl,const>
global XK_Arabic_shadda: cint <cimport,nodecl,const>
global XK_Arabic_sukun: cint <cimport,nodecl,const>
global XK_Arabic_madda_above: cint <cimport,nodecl,const>
global XK_Arabic_hamza_above: cint <cimport,nodecl,const>
global XK_Arabic_hamza_below: cint <cimport,nodecl,const>
global XK_Arabic_jeh: cint <cimport,nodecl,const>
global XK_Arabic_veh: cint <cimport,nodecl,const>
global XK_Arabic_keheh: cint <cimport,nodecl,const>
global XK_Arabic_gaf: cint <cimport,nodecl,const>
global XK_Arabic_noon_ghunna: cint <cimport,nodecl,const>
global XK_Arabic_heh_doachashmee: cint <cimport,nodecl,const>
global XK_Farsi_yeh: cint <cimport,nodecl,const>
global XK_Arabic_farsi_yeh: cint <cimport,nodecl,const>
global XK_Arabic_yeh_baree: cint <cimport,nodecl,const>
global XK_Arabic_heh_goal: cint <cimport,nodecl,const>
global XK_Arabic_switch: cint <cimport,nodecl,const>
global XK_Cyrillic_GHE_bar: cint <cimport,nodecl,const>
global XK_Cyrillic_ghe_bar: cint <cimport,nodecl,const>
global XK_Cyrillic_ZHE_descender: cint <cimport,nodecl,const>
global XK_Cyrillic_zhe_descender: cint <cimport,nodecl,const>
global XK_Cyrillic_KA_descender: cint <cimport,nodecl,const>
global XK_Cyrillic_ka_descender: cint <cimport,nodecl,const>
global XK_Cyrillic_KA_vertstroke: cint <cimport,nodecl,const>
global XK_Cyrillic_ka_vertstroke: cint <cimport,nodecl,const>
global XK_Cyrillic_EN_descender: cint <cimport,nodecl,const>
global XK_Cyrillic_en_descender: cint <cimport,nodecl,const>
global XK_Cyrillic_U_straight: cint <cimport,nodecl,const>
global XK_Cyrillic_u_straight: cint <cimport,nodecl,const>
global XK_Cyrillic_U_straight_bar: cint <cimport,nodecl,const>
global XK_Cyrillic_u_straight_bar: cint <cimport,nodecl,const>
global XK_Cyrillic_HA_descender: cint <cimport,nodecl,const>
global XK_Cyrillic_ha_descender: cint <cimport,nodecl,const>
global XK_Cyrillic_CHE_descender: cint <cimport,nodecl,const>
global XK_Cyrillic_che_descender: cint <cimport,nodecl,const>
global XK_Cyrillic_CHE_vertstroke: cint <cimport,nodecl,const>
global XK_Cyrillic_che_vertstroke: cint <cimport,nodecl,const>
global XK_Cyrillic_SHHA: cint <cimport,nodecl,const>
global XK_Cyrillic_shha: cint <cimport,nodecl,const>
global XK_Cyrillic_SCHWA: cint <cimport,nodecl,const>
global XK_Cyrillic_schwa: cint <cimport,nodecl,const>
global XK_Cyrillic_I_macron: cint <cimport,nodecl,const>
global XK_Cyrillic_i_macron: cint <cimport,nodecl,const>
global XK_Cyrillic_O_bar: cint <cimport,nodecl,const>
global XK_Cyrillic_o_bar: cint <cimport,nodecl,const>
global XK_Cyrillic_U_macron: cint <cimport,nodecl,const>
global XK_Cyrillic_u_macron: cint <cimport,nodecl,const>
global XK_Serbian_dje: cint <cimport,nodecl,const>
global XK_Macedonia_gje: cint <cimport,nodecl,const>
global XK_Cyrillic_io: cint <cimport,nodecl,const>
global XK_Ukrainian_ie: cint <cimport,nodecl,const>
global XK_Ukranian_je: cint <cimport,nodecl,const>
global XK_Macedonia_dse: cint <cimport,nodecl,const>
global XK_Ukrainian_i: cint <cimport,nodecl,const>
global XK_Ukranian_i: cint <cimport,nodecl,const>
global XK_Ukrainian_yi: cint <cimport,nodecl,const>
global XK_Ukranian_yi: cint <cimport,nodecl,const>
global XK_Cyrillic_je: cint <cimport,nodecl,const>
global XK_Serbian_je: cint <cimport,nodecl,const>
global XK_Cyrillic_lje: cint <cimport,nodecl,const>
global XK_Serbian_lje: cint <cimport,nodecl,const>
global XK_Cyrillic_nje: cint <cimport,nodecl,const>
global XK_Serbian_nje: cint <cimport,nodecl,const>
global XK_Serbian_tshe: cint <cimport,nodecl,const>
global XK_Macedonia_kje: cint <cimport,nodecl,const>
global XK_Ukrainian_ghe_with_upturn: cint <cimport,nodecl,const>
global XK_Byelorussian_shortu: cint <cimport,nodecl,const>
global XK_Cyrillic_dzhe: cint <cimport,nodecl,const>
global XK_Serbian_dze: cint <cimport,nodecl,const>
global XK_numerosign: cint <cimport,nodecl,const>
global XK_Serbian_DJE: cint <cimport,nodecl,const>
global XK_Macedonia_GJE: cint <cimport,nodecl,const>
global XK_Cyrillic_IO: cint <cimport,nodecl,const>
global XK_Ukrainian_IE: cint <cimport,nodecl,const>
global XK_Ukranian_JE: cint <cimport,nodecl,const>
global XK_Macedonia_DSE: cint <cimport,nodecl,const>
global XK_Ukrainian_I: cint <cimport,nodecl,const>
global XK_Ukranian_I: cint <cimport,nodecl,const>
global XK_Ukrainian_YI: cint <cimport,nodecl,const>
global XK_Ukranian_YI: cint <cimport,nodecl,const>
global XK_Cyrillic_JE: cint <cimport,nodecl,const>
global XK_Serbian_JE: cint <cimport,nodecl,const>
global XK_Cyrillic_LJE: cint <cimport,nodecl,const>
global XK_Serbian_LJE: cint <cimport,nodecl,const>
global XK_Cyrillic_NJE: cint <cimport,nodecl,const>
global XK_Serbian_NJE: cint <cimport,nodecl,const>
global XK_Serbian_TSHE: cint <cimport,nodecl,const>
global XK_Macedonia_KJE: cint <cimport,nodecl,const>
global XK_Ukrainian_GHE_WITH_UPTURN: cint <cimport,nodecl,const>
global XK_Byelorussian_SHORTU: cint <cimport,nodecl,const>
global XK_Cyrillic_DZHE: cint <cimport,nodecl,const>
global XK_Serbian_DZE: cint <cimport,nodecl,const>
global XK_Cyrillic_yu: cint <cimport,nodecl,const>
global XK_Cyrillic_a: cint <cimport,nodecl,const>
global XK_Cyrillic_be: cint <cimport,nodecl,const>
global XK_Cyrillic_tse: cint <cimport,nodecl,const>
global XK_Cyrillic_de: cint <cimport,nodecl,const>
global XK_Cyrillic_ie: cint <cimport,nodecl,const>
global XK_Cyrillic_ef: cint <cimport,nodecl,const>
global XK_Cyrillic_ghe: cint <cimport,nodecl,const>
global XK_Cyrillic_ha: cint <cimport,nodecl,const>
global XK_Cyrillic_i: cint <cimport,nodecl,const>
global XK_Cyrillic_shorti: cint <cimport,nodecl,const>
global XK_Cyrillic_ka: cint <cimport,nodecl,const>
global XK_Cyrillic_el: cint <cimport,nodecl,const>
global XK_Cyrillic_em: cint <cimport,nodecl,const>
global XK_Cyrillic_en: cint <cimport,nodecl,const>
global XK_Cyrillic_o: cint <cimport,nodecl,const>
global XK_Cyrillic_pe: cint <cimport,nodecl,const>
global XK_Cyrillic_ya: cint <cimport,nodecl,const>
global XK_Cyrillic_er: cint <cimport,nodecl,const>
global XK_Cyrillic_es: cint <cimport,nodecl,const>
global XK_Cyrillic_te: cint <cimport,nodecl,const>
global XK_Cyrillic_u: cint <cimport,nodecl,const>
global XK_Cyrillic_zhe: cint <cimport,nodecl,const>
global XK_Cyrillic_ve: cint <cimport,nodecl,const>
global XK_Cyrillic_softsign: cint <cimport,nodecl,const>
global XK_Cyrillic_yeru: cint <cimport,nodecl,const>
global XK_Cyrillic_ze: cint <cimport,nodecl,const>
global XK_Cyrillic_sha: cint <cimport,nodecl,const>
global XK_Cyrillic_e: cint <cimport,nodecl,const>
global XK_Cyrillic_shcha: cint <cimport,nodecl,const>
global XK_Cyrillic_che: cint <cimport,nodecl,const>
global XK_Cyrillic_hardsign: cint <cimport,nodecl,const>
global XK_Cyrillic_YU: cint <cimport,nodecl,const>
global XK_Cyrillic_A: cint <cimport,nodecl,const>
global XK_Cyrillic_BE: cint <cimport,nodecl,const>
global XK_Cyrillic_TSE: cint <cimport,nodecl,const>
global XK_Cyrillic_DE: cint <cimport,nodecl,const>
global XK_Cyrillic_IE: cint <cimport,nodecl,const>
global XK_Cyrillic_EF: cint <cimport,nodecl,const>
global XK_Cyrillic_GHE: cint <cimport,nodecl,const>
global XK_Cyrillic_HA: cint <cimport,nodecl,const>
global XK_Cyrillic_I: cint <cimport,nodecl,const>
global XK_Cyrillic_SHORTI: cint <cimport,nodecl,const>
global XK_Cyrillic_KA: cint <cimport,nodecl,const>
global XK_Cyrillic_EL: cint <cimport,nodecl,const>
global XK_Cyrillic_EM: cint <cimport,nodecl,const>
global XK_Cyrillic_EN: cint <cimport,nodecl,const>
global XK_Cyrillic_O: cint <cimport,nodecl,const>
global XK_Cyrillic_PE: cint <cimport,nodecl,const>
global XK_Cyrillic_YA: cint <cimport,nodecl,const>
global XK_Cyrillic_ER: cint <cimport,nodecl,const>
global XK_Cyrillic_ES: cint <cimport,nodecl,const>
global XK_Cyrillic_TE: cint <cimport,nodecl,const>
global XK_Cyrillic_U: cint <cimport,nodecl,const>
global XK_Cyrillic_ZHE: cint <cimport,nodecl,const>
global XK_Cyrillic_VE: cint <cimport,nodecl,const>
global XK_Cyrillic_SOFTSIGN: cint <cimport,nodecl,const>
global XK_Cyrillic_YERU: cint <cimport,nodecl,const>
global XK_Cyrillic_ZE: cint <cimport,nodecl,const>
global XK_Cyrillic_SHA: cint <cimport,nodecl,const>
global XK_Cyrillic_E: cint <cimport,nodecl,const>
global XK_Cyrillic_SHCHA: cint <cimport,nodecl,const>
global XK_Cyrillic_CHE: cint <cimport,nodecl,const>
global XK_Cyrillic_HARDSIGN: cint <cimport,nodecl,const>
global XK_Greek_ALPHAaccent: cint <cimport,nodecl,const>
global XK_Greek_EPSILONaccent: cint <cimport,nodecl,const>
global XK_Greek_ETAaccent: cint <cimport,nodecl,const>
global XK_Greek_IOTAaccent: cint <cimport,nodecl,const>
global XK_Greek_IOTAdieresis: cint <cimport,nodecl,const>
global XK_Greek_IOTAdiaeresis: cint <cimport,nodecl,const>
global XK_Greek_OMICRONaccent: cint <cimport,nodecl,const>
global XK_Greek_UPSILONaccent: cint <cimport,nodecl,const>
global XK_Greek_UPSILONdieresis: cint <cimport,nodecl,const>
global XK_Greek_OMEGAaccent: cint <cimport,nodecl,const>
global XK_Greek_accentdieresis: cint <cimport,nodecl,const>
global XK_Greek_horizbar: cint <cimport,nodecl,const>
global XK_Greek_alphaaccent: cint <cimport,nodecl,const>
global XK_Greek_epsilonaccent: cint <cimport,nodecl,const>
global XK_Greek_etaaccent: cint <cimport,nodecl,const>
global XK_Greek_iotaaccent: cint <cimport,nodecl,const>
global XK_Greek_iotadieresis: cint <cimport,nodecl,const>
global XK_Greek_iotaaccentdieresis: cint <cimport,nodecl,const>
global XK_Greek_omicronaccent: cint <cimport,nodecl,const>
global XK_Greek_upsilonaccent: cint <cimport,nodecl,const>
global XK_Greek_upsilondieresis: cint <cimport,nodecl,const>
global XK_Greek_upsilonaccentdieresis: cint <cimport,nodecl,const>
global XK_Greek_omegaaccent: cint <cimport,nodecl,const>
global XK_Greek_ALPHA: cint <cimport,nodecl,const>
global XK_Greek_BETA: cint <cimport,nodecl,const>
global XK_Greek_GAMMA: cint <cimport,nodecl,const>
global XK_Greek_DELTA: cint <cimport,nodecl,const>
global XK_Greek_EPSILON: cint <cimport,nodecl,const>
global XK_Greek_ZETA: cint <cimport,nodecl,const>
global XK_Greek_ETA: cint <cimport,nodecl,const>
global XK_Greek_THETA: cint <cimport,nodecl,const>
global XK_Greek_IOTA: cint <cimport,nodecl,const>
global XK_Greek_KAPPA: cint <cimport,nodecl,const>
global XK_Greek_LAMDA: cint <cimport,nodecl,const>
global XK_Greek_LAMBDA: cint <cimport,nodecl,const>
global XK_Greek_MU: cint <cimport,nodecl,const>
global XK_Greek_NU: cint <cimport,nodecl,const>
global XK_Greek_XI: cint <cimport,nodecl,const>
global XK_Greek_OMICRON: cint <cimport,nodecl,const>
global XK_Greek_PI: cint <cimport,nodecl,const>
global XK_Greek_RHO: cint <cimport,nodecl,const>
global XK_Greek_SIGMA: cint <cimport,nodecl,const>
global XK_Greek_TAU: cint <cimport,nodecl,const>
global XK_Greek_UPSILON: cint <cimport,nodecl,const>
global XK_Greek_PHI: cint <cimport,nodecl,const>
global XK_Greek_CHI: cint <cimport,nodecl,const>
global XK_Greek_PSI: cint <cimport,nodecl,const>
global XK_Greek_OMEGA: cint <cimport,nodecl,const>
global XK_Greek_alpha: cint <cimport,nodecl,const>
global XK_Greek_beta: cint <cimport,nodecl,const>
global XK_Greek_gamma: cint <cimport,nodecl,const>
global XK_Greek_delta: cint <cimport,nodecl,const>
global XK_Greek_epsilon: cint <cimport,nodecl,const>
global XK_Greek_zeta: cint <cimport,nodecl,const>
global XK_Greek_eta: cint <cimport,nodecl,const>
global XK_Greek_theta: cint <cimport,nodecl,const>
global XK_Greek_iota: cint <cimport,nodecl,const>
global XK_Greek_kappa: cint <cimport,nodecl,const>
global XK_Greek_lamda: cint <cimport,nodecl,const>
global XK_Greek_lambda: cint <cimport,nodecl,const>
global XK_Greek_mu: cint <cimport,nodecl,const>
global XK_Greek_nu: cint <cimport,nodecl,const>
global XK_Greek_xi: cint <cimport,nodecl,const>
global XK_Greek_omicron: cint <cimport,nodecl,const>
global XK_Greek_pi: cint <cimport,nodecl,const>
global XK_Greek_rho: cint <cimport,nodecl,const>
global XK_Greek_sigma: cint <cimport,nodecl,const>
global XK_Greek_finalsmallsigma: cint <cimport,nodecl,const>
global XK_Greek_tau: cint <cimport,nodecl,const>
global XK_Greek_upsilon: cint <cimport,nodecl,const>
global XK_Greek_phi: cint <cimport,nodecl,const>
global XK_Greek_chi: cint <cimport,nodecl,const>
global XK_Greek_psi: cint <cimport,nodecl,const>
global XK_Greek_omega: cint <cimport,nodecl,const>
global XK_Greek_switch: cint <cimport,nodecl,const>
global XK_hebrew_doublelowline: cint <cimport,nodecl,const>
global XK_hebrew_aleph: cint <cimport,nodecl,const>
global XK_hebrew_bet: cint <cimport,nodecl,const>
global XK_hebrew_beth: cint <cimport,nodecl,const>
global XK_hebrew_gimel: cint <cimport,nodecl,const>
global XK_hebrew_gimmel: cint <cimport,nodecl,const>
global XK_hebrew_dalet: cint <cimport,nodecl,const>
global XK_hebrew_daleth: cint <cimport,nodecl,const>
global XK_hebrew_he: cint <cimport,nodecl,const>
global XK_hebrew_waw: cint <cimport,nodecl,const>
global XK_hebrew_zain: cint <cimport,nodecl,const>
global XK_hebrew_zayin: cint <cimport,nodecl,const>
global XK_hebrew_chet: cint <cimport,nodecl,const>
global XK_hebrew_het: cint <cimport,nodecl,const>
global XK_hebrew_tet: cint <cimport,nodecl,const>
global XK_hebrew_teth: cint <cimport,nodecl,const>
global XK_hebrew_yod: cint <cimport,nodecl,const>
global XK_hebrew_finalkaph: cint <cimport,nodecl,const>
global XK_hebrew_kaph: cint <cimport,nodecl,const>
global XK_hebrew_lamed: cint <cimport,nodecl,const>
global XK_hebrew_finalmem: cint <cimport,nodecl,const>
global XK_hebrew_mem: cint <cimport,nodecl,const>
global XK_hebrew_finalnun: cint <cimport,nodecl,const>
global XK_hebrew_nun: cint <cimport,nodecl,const>
global XK_hebrew_samech: cint <cimport,nodecl,const>
global XK_hebrew_samekh: cint <cimport,nodecl,const>
global XK_hebrew_ayin: cint <cimport,nodecl,const>
global XK_hebrew_finalpe: cint <cimport,nodecl,const>
global XK_hebrew_pe: cint <cimport,nodecl,const>
global XK_hebrew_finalzade: cint <cimport,nodecl,const>
global XK_hebrew_finalzadi: cint <cimport,nodecl,const>
global XK_hebrew_zade: cint <cimport,nodecl,const>
global XK_hebrew_zadi: cint <cimport,nodecl,const>
global XK_hebrew_qoph: cint <cimport,nodecl,const>
global XK_hebrew_kuf: cint <cimport,nodecl,const>
global XK_hebrew_resh: cint <cimport,nodecl,const>
global XK_hebrew_shin: cint <cimport,nodecl,const>
global XK_hebrew_taw: cint <cimport,nodecl,const>
global XK_hebrew_taf: cint <cimport,nodecl,const>
global XK_Hebrew_switch: cint <cimport,nodecl,const>
global XK_Thai_kokai: cint <cimport,nodecl,const>
global XK_Thai_khokhai: cint <cimport,nodecl,const>
global XK_Thai_khokhuat: cint <cimport,nodecl,const>
global XK_Thai_khokhwai: cint <cimport,nodecl,const>
global XK_Thai_khokhon: cint <cimport,nodecl,const>
global XK_Thai_khorakhang: cint <cimport,nodecl,const>
global XK_Thai_ngongu: cint <cimport,nodecl,const>
global XK_Thai_chochan: cint <cimport,nodecl,const>
global XK_Thai_choching: cint <cimport,nodecl,const>
global XK_Thai_chochang: cint <cimport,nodecl,const>
global XK_Thai_soso: cint <cimport,nodecl,const>
global XK_Thai_chochoe: cint <cimport,nodecl,const>
global XK_Thai_yoying: cint <cimport,nodecl,const>
global XK_Thai_dochada: cint <cimport,nodecl,const>
global XK_Thai_topatak: cint <cimport,nodecl,const>
global XK_Thai_thothan: cint <cimport,nodecl,const>
global XK_Thai_thonangmontho: cint <cimport,nodecl,const>
global XK_Thai_thophuthao: cint <cimport,nodecl,const>
global XK_Thai_nonen: cint <cimport,nodecl,const>
global XK_Thai_dodek: cint <cimport,nodecl,const>
global XK_Thai_totao: cint <cimport,nodecl,const>
global XK_Thai_thothung: cint <cimport,nodecl,const>
global XK_Thai_thothahan: cint <cimport,nodecl,const>
global XK_Thai_thothong: cint <cimport,nodecl,const>
global XK_Thai_nonu: cint <cimport,nodecl,const>
global XK_Thai_bobaimai: cint <cimport,nodecl,const>
global XK_Thai_popla: cint <cimport,nodecl,const>
global XK_Thai_phophung: cint <cimport,nodecl,const>
global XK_Thai_fofa: cint <cimport,nodecl,const>
global XK_Thai_phophan: cint <cimport,nodecl,const>
global XK_Thai_fofan: cint <cimport,nodecl,const>
global XK_Thai_phosamphao: cint <cimport,nodecl,const>
global XK_Thai_moma: cint <cimport,nodecl,const>
global XK_Thai_yoyak: cint <cimport,nodecl,const>
global XK_Thai_rorua: cint <cimport,nodecl,const>
global XK_Thai_ru: cint <cimport,nodecl,const>
global XK_Thai_loling: cint <cimport,nodecl,const>
global XK_Thai_lu: cint <cimport,nodecl,const>
global XK_Thai_wowaen: cint <cimport,nodecl,const>
global XK_Thai_sosala: cint <cimport,nodecl,const>
global XK_Thai_sorusi: cint <cimport,nodecl,const>
global XK_Thai_sosua: cint <cimport,nodecl,const>
global XK_Thai_hohip: cint <cimport,nodecl,const>
global XK_Thai_lochula: cint <cimport,nodecl,const>
global XK_Thai_oang: cint <cimport,nodecl,const>
global XK_Thai_honokhuk: cint <cimport,nodecl,const>
global XK_Thai_paiyannoi: cint <cimport,nodecl,const>
global XK_Thai_saraa: cint <cimport,nodecl,const>
global XK_Thai_maihanakat: cint <cimport,nodecl,const>
global XK_Thai_saraaa: cint <cimport,nodecl,const>
global XK_Thai_saraam: cint <cimport,nodecl,const>
global XK_Thai_sarai: cint <cimport,nodecl,const>
global XK_Thai_saraii: cint <cimport,nodecl,const>
global XK_Thai_saraue: cint <cimport,nodecl,const>
global XK_Thai_sarauee: cint <cimport,nodecl,const>
global XK_Thai_sarau: cint <cimport,nodecl,const>
global XK_Thai_sarauu: cint <cimport,nodecl,const>
global XK_Thai_phinthu: cint <cimport,nodecl,const>
global XK_Thai_maihanakat_maitho: cint <cimport,nodecl,const>
global XK_Thai_baht: cint <cimport,nodecl,const>
global XK_Thai_sarae: cint <cimport,nodecl,const>
global XK_Thai_saraae: cint <cimport,nodecl,const>
global XK_Thai_sarao: cint <cimport,nodecl,const>
global XK_Thai_saraaimaimuan: cint <cimport,nodecl,const>
global XK_Thai_saraaimaimalai: cint <cimport,nodecl,const>
global XK_Thai_lakkhangyao: cint <cimport,nodecl,const>
global XK_Thai_maiyamok: cint <cimport,nodecl,const>
global XK_Thai_maitaikhu: cint <cimport,nodecl,const>
global XK_Thai_maiek: cint <cimport,nodecl,const>
global XK_Thai_maitho: cint <cimport,nodecl,const>
global XK_Thai_maitri: cint <cimport,nodecl,const>
global XK_Thai_maichattawa: cint <cimport,nodecl,const>
global XK_Thai_thanthakhat: cint <cimport,nodecl,const>
global XK_Thai_nikhahit: cint <cimport,nodecl,const>
global XK_Thai_leksun: cint <cimport,nodecl,const>
global XK_Thai_leknung: cint <cimport,nodecl,const>
global XK_Thai_leksong: cint <cimport,nodecl,const>
global XK_Thai_leksam: cint <cimport,nodecl,const>
global XK_Thai_leksi: cint <cimport,nodecl,const>
global XK_Thai_lekha: cint <cimport,nodecl,const>
global XK_Thai_lekhok: cint <cimport,nodecl,const>
global XK_Thai_lekchet: cint <cimport,nodecl,const>
global XK_Thai_lekpaet: cint <cimport,nodecl,const>
global XK_Thai_lekkao: cint <cimport,nodecl,const>
global XK_Hangul: cint <cimport,nodecl,const>
global XK_Hangul_Start: cint <cimport,nodecl,const>
global XK_Hangul_End: cint <cimport,nodecl,const>
global XK_Hangul_Hanja: cint <cimport,nodecl,const>
global XK_Hangul_Jamo: cint <cimport,nodecl,const>
global XK_Hangul_Romaja: cint <cimport,nodecl,const>
global XK_Hangul_Codeinput: cint <cimport,nodecl,const>
global XK_Hangul_Jeonja: cint <cimport,nodecl,const>
global XK_Hangul_Banja: cint <cimport,nodecl,const>
global XK_Hangul_PreHanja: cint <cimport,nodecl,const>
global XK_Hangul_PostHanja: cint <cimport,nodecl,const>
global XK_Hangul_SingleCandidate: cint <cimport,nodecl,const>
global XK_Hangul_MultipleCandidate: cint <cimport,nodecl,const>
global XK_Hangul_PreviousCandidate: cint <cimport,nodecl,const>
global XK_Hangul_Special: cint <cimport,nodecl,const>
global XK_Hangul_switch: cint <cimport,nodecl,const>
global XK_Hangul_Kiyeog: cint <cimport,nodecl,const>
global XK_Hangul_SsangKiyeog: cint <cimport,nodecl,const>
global XK_Hangul_KiyeogSios: cint <cimport,nodecl,const>
global XK_Hangul_Nieun: cint <cimport,nodecl,const>
global XK_Hangul_NieunJieuj: cint <cimport,nodecl,const>
global XK_Hangul_NieunHieuh: cint <cimport,nodecl,const>
global XK_Hangul_Dikeud: cint <cimport,nodecl,const>
global XK_Hangul_SsangDikeud: cint <cimport,nodecl,const>
global XK_Hangul_Rieul: cint <cimport,nodecl,const>
global XK_Hangul_RieulKiyeog: cint <cimport,nodecl,const>
global XK_Hangul_RieulMieum: cint <cimport,nodecl,const>
global XK_Hangul_RieulPieub: cint <cimport,nodecl,const>
global XK_Hangul_RieulSios: cint <cimport,nodecl,const>
global XK_Hangul_RieulTieut: cint <cimport,nodecl,const>
global XK_Hangul_RieulPhieuf: cint <cimport,nodecl,const>
global XK_Hangul_RieulHieuh: cint <cimport,nodecl,const>
global XK_Hangul_Mieum: cint <cimport,nodecl,const>
global XK_Hangul_Pieub: cint <cimport,nodecl,const>
global XK_Hangul_SsangPieub: cint <cimport,nodecl,const>
global XK_Hangul_PieubSios: cint <cimport,nodecl,const>
global XK_Hangul_Sios: cint <cimport,nodecl,const>
global XK_Hangul_SsangSios: cint <cimport,nodecl,const>
global XK_Hangul_Ieung: cint <cimport,nodecl,const>
global XK_Hangul_Jieuj: cint <cimport,nodecl,const>
global XK_Hangul_SsangJieuj: cint <cimport,nodecl,const>
global XK_Hangul_Cieuc: cint <cimport,nodecl,const>
global XK_Hangul_Khieuq: cint <cimport,nodecl,const>
global XK_Hangul_Tieut: cint <cimport,nodecl,const>
global XK_Hangul_Phieuf: cint <cimport,nodecl,const>
global XK_Hangul_Hieuh: cint <cimport,nodecl,const>
global XK_Hangul_A: cint <cimport,nodecl,const>
global XK_Hangul_AE: cint <cimport,nodecl,const>
global XK_Hangul_YA: cint <cimport,nodecl,const>
global XK_Hangul_YAE: cint <cimport,nodecl,const>
global XK_Hangul_EO: cint <cimport,nodecl,const>
global XK_Hangul_E: cint <cimport,nodecl,const>
global XK_Hangul_YEO: cint <cimport,nodecl,const>
global XK_Hangul_YE: cint <cimport,nodecl,const>
global XK_Hangul_O: cint <cimport,nodecl,const>
global XK_Hangul_WA: cint <cimport,nodecl,const>
global XK_Hangul_WAE: cint <cimport,nodecl,const>
global XK_Hangul_OE: cint <cimport,nodecl,const>
global XK_Hangul_YO: cint <cimport,nodecl,const>
global XK_Hangul_U: cint <cimport,nodecl,const>
global XK_Hangul_WEO: cint <cimport,nodecl,const>
global XK_Hangul_WE: cint <cimport,nodecl,const>
global XK_Hangul_WI: cint <cimport,nodecl,const>
global XK_Hangul_YU: cint <cimport,nodecl,const>
global XK_Hangul_EU: cint <cimport,nodecl,const>
global XK_Hangul_YI: cint <cimport,nodecl,const>
global XK_Hangul_I: cint <cimport,nodecl,const>
global XK_Hangul_J_Kiyeog: cint <cimport,nodecl,const>
global XK_Hangul_J_SsangKiyeog: cint <cimport,nodecl,const>
global XK_Hangul_J_KiyeogSios: cint <cimport,nodecl,const>
global XK_Hangul_J_Nieun: cint <cimport,nodecl,const>
global XK_Hangul_J_NieunJieuj: cint <cimport,nodecl,const>
global XK_Hangul_J_NieunHieuh: cint <cimport,nodecl,const>
global XK_Hangul_J_Dikeud: cint <cimport,nodecl,const>
global XK_Hangul_J_Rieul: cint <cimport,nodecl,const>
global XK_Hangul_J_RieulKiyeog: cint <cimport,nodecl,const>
global XK_Hangul_J_RieulMieum: cint <cimport,nodecl,const>
global XK_Hangul_J_RieulPieub: cint <cimport,nodecl,const>
global XK_Hangul_J_RieulSios: cint <cimport,nodecl,const>
global XK_Hangul_J_RieulTieut: cint <cimport,nodecl,const>
global XK_Hangul_J_RieulPhieuf: cint <cimport,nodecl,const>
global XK_Hangul_J_RieulHieuh: cint <cimport,nodecl,const>
global XK_Hangul_J_Mieum: cint <cimport,nodecl,const>
global XK_Hangul_J_Pieub: cint <cimport,nodecl,const>
global XK_Hangul_J_PieubSios: cint <cimport,nodecl,const>
global XK_Hangul_J_Sios: cint <cimport,nodecl,const>
global XK_Hangul_J_SsangSios: cint <cimport,nodecl,const>
global XK_Hangul_J_Ieung: cint <cimport,nodecl,const>
global XK_Hangul_J_Jieuj: cint <cimport,nodecl,const>
global XK_Hangul_J_Cieuc: cint <cimport,nodecl,const>
global XK_Hangul_J_Khieuq: cint <cimport,nodecl,const>
global XK_Hangul_J_Tieut: cint <cimport,nodecl,const>
global XK_Hangul_J_Phieuf: cint <cimport,nodecl,const>
global XK_Hangul_J_Hieuh: cint <cimport,nodecl,const>
global XK_Hangul_RieulYeorinHieuh: cint <cimport,nodecl,const>
global XK_Hangul_SunkyeongeumMieum: cint <cimport,nodecl,const>
global XK_Hangul_SunkyeongeumPieub: cint <cimport,nodecl,const>
global XK_Hangul_PanSios: cint <cimport,nodecl,const>
global XK_Hangul_KkogjiDalrinIeung: cint <cimport,nodecl,const>
global XK_Hangul_SunkyeongeumPhieuf: cint <cimport,nodecl,const>
global XK_Hangul_YeorinHieuh: cint <cimport,nodecl,const>
global XK_Hangul_AraeA: cint <cimport,nodecl,const>
global XK_Hangul_AraeAE: cint <cimport,nodecl,const>
global XK_Hangul_J_PanSios: cint <cimport,nodecl,const>
global XK_Hangul_J_KkogjiDalrinIeung: cint <cimport,nodecl,const>
global XK_Hangul_J_YeorinHieuh: cint <cimport,nodecl,const>
global XK_Korean_Won: cint <cimport,nodecl,const>
global XK_Armenian_ligature_ew: cint <cimport,nodecl,const>
global XK_Armenian_full_stop: cint <cimport,nodecl,const>
global XK_Armenian_verjaket: cint <cimport,nodecl,const>
global XK_Armenian_separation_mark: cint <cimport,nodecl,const>
global XK_Armenian_but: cint <cimport,nodecl,const>
global XK_Armenian_hyphen: cint <cimport,nodecl,const>
global XK_Armenian_yentamna: cint <cimport,nodecl,const>
global XK_Armenian_exclam: cint <cimport,nodecl,const>
global XK_Armenian_amanak: cint <cimport,nodecl,const>
global XK_Armenian_accent: cint <cimport,nodecl,const>
global XK_Armenian_shesht: cint <cimport,nodecl,const>
global XK_Armenian_question: cint <cimport,nodecl,const>
global XK_Armenian_paruyk: cint <cimport,nodecl,const>
global XK_Armenian_AYB: cint <cimport,nodecl,const>
global XK_Armenian_ayb: cint <cimport,nodecl,const>
global XK_Armenian_BEN: cint <cimport,nodecl,const>
global XK_Armenian_ben: cint <cimport,nodecl,const>
global XK_Armenian_GIM: cint <cimport,nodecl,const>
global XK_Armenian_gim: cint <cimport,nodecl,const>
global XK_Armenian_DA: cint <cimport,nodecl,const>
global XK_Armenian_da: cint <cimport,nodecl,const>
global XK_Armenian_YECH: cint <cimport,nodecl,const>
global XK_Armenian_yech: cint <cimport,nodecl,const>
global XK_Armenian_ZA: cint <cimport,nodecl,const>
global XK_Armenian_za: cint <cimport,nodecl,const>
global XK_Armenian_E: cint <cimport,nodecl,const>
global XK_Armenian_e: cint <cimport,nodecl,const>
global XK_Armenian_AT: cint <cimport,nodecl,const>
global XK_Armenian_at: cint <cimport,nodecl,const>
global XK_Armenian_TO: cint <cimport,nodecl,const>
global XK_Armenian_to: cint <cimport,nodecl,const>
global XK_Armenian_ZHE: cint <cimport,nodecl,const>
global XK_Armenian_zhe: cint <cimport,nodecl,const>
global XK_Armenian_INI: cint <cimport,nodecl,const>
global XK_Armenian_ini: cint <cimport,nodecl,const>
global XK_Armenian_LYUN: cint <cimport,nodecl,const>
global XK_Armenian_lyun: cint <cimport,nodecl,const>
global XK_Armenian_KHE: cint <cimport,nodecl,const>
global XK_Armenian_khe: cint <cimport,nodecl,const>
global XK_Armenian_TSA: cint <cimport,nodecl,const>
global XK_Armenian_tsa: cint <cimport,nodecl,const>
global XK_Armenian_KEN: cint <cimport,nodecl,const>
global XK_Armenian_ken: cint <cimport,nodecl,const>
global XK_Armenian_HO: cint <cimport,nodecl,const>
global XK_Armenian_ho: cint <cimport,nodecl,const>
global XK_Armenian_DZA: cint <cimport,nodecl,const>
global XK_Armenian_dza: cint <cimport,nodecl,const>
global XK_Armenian_GHAT: cint <cimport,nodecl,const>
global XK_Armenian_ghat: cint <cimport,nodecl,const>
global XK_Armenian_TCHE: cint <cimport,nodecl,const>
global XK_Armenian_tche: cint <cimport,nodecl,const>
global XK_Armenian_MEN: cint <cimport,nodecl,const>
global XK_Armenian_men: cint <cimport,nodecl,const>
global XK_Armenian_HI: cint <cimport,nodecl,const>
global XK_Armenian_hi: cint <cimport,nodecl,const>
global XK_Armenian_NU: cint <cimport,nodecl,const>
global XK_Armenian_nu: cint <cimport,nodecl,const>
global XK_Armenian_SHA: cint <cimport,nodecl,const>
global XK_Armenian_sha: cint <cimport,nodecl,const>
global XK_Armenian_VO: cint <cimport,nodecl,const>
global XK_Armenian_vo: cint <cimport,nodecl,const>
global XK_Armenian_CHA: cint <cimport,nodecl,const>
global XK_Armenian_cha: cint <cimport,nodecl,const>
global XK_Armenian_PE: cint <cimport,nodecl,const>
global XK_Armenian_pe: cint <cimport,nodecl,const>
global XK_Armenian_JE: cint <cimport,nodecl,const>
global XK_Armenian_je: cint <cimport,nodecl,const>
global XK_Armenian_RA: cint <cimport,nodecl,const>
global XK_Armenian_ra: cint <cimport,nodecl,const>
global XK_Armenian_SE: cint <cimport,nodecl,const>
global XK_Armenian_se: cint <cimport,nodecl,const>
global XK_Armenian_VEV: cint <cimport,nodecl,const>
global XK_Armenian_vev: cint <cimport,nodecl,const>
global XK_Armenian_TYUN: cint <cimport,nodecl,const>
global XK_Armenian_tyun: cint <cimport,nodecl,const>
global XK_Armenian_RE: cint <cimport,nodecl,const>
global XK_Armenian_re: cint <cimport,nodecl,const>
global XK_Armenian_TSO: cint <cimport,nodecl,const>
global XK_Armenian_tso: cint <cimport,nodecl,const>
global XK_Armenian_VYUN: cint <cimport,nodecl,const>
global XK_Armenian_vyun: cint <cimport,nodecl,const>
global XK_Armenian_PYUR: cint <cimport,nodecl,const>
global XK_Armenian_pyur: cint <cimport,nodecl,const>
global XK_Armenian_KE: cint <cimport,nodecl,const>
global XK_Armenian_ke: cint <cimport,nodecl,const>
global XK_Armenian_O: cint <cimport,nodecl,const>
global XK_Armenian_o: cint <cimport,nodecl,const>
global XK_Armenian_FE: cint <cimport,nodecl,const>
global XK_Armenian_fe: cint <cimport,nodecl,const>
global XK_Armenian_apostrophe: cint <cimport,nodecl,const>
global XK_Georgian_an: cint <cimport,nodecl,const>
global XK_Georgian_ban: cint <cimport,nodecl,const>
global XK_Georgian_gan: cint <cimport,nodecl,const>
global XK_Georgian_don: cint <cimport,nodecl,const>
global XK_Georgian_en: cint <cimport,nodecl,const>
global XK_Georgian_vin: cint <cimport,nodecl,const>
global XK_Georgian_zen: cint <cimport,nodecl,const>
global XK_Georgian_tan: cint <cimport,nodecl,const>
global XK_Georgian_in: cint <cimport,nodecl,const>
global XK_Georgian_kan: cint <cimport,nodecl,const>
global XK_Georgian_las: cint <cimport,nodecl,const>
global XK_Georgian_man: cint <cimport,nodecl,const>
global XK_Georgian_nar: cint <cimport,nodecl,const>
global XK_Georgian_on: cint <cimport,nodecl,const>
global XK_Georgian_par: cint <cimport,nodecl,const>
global XK_Georgian_zhar: cint <cimport,nodecl,const>
global XK_Georgian_rae: cint <cimport,nodecl,const>
global XK_Georgian_san: cint <cimport,nodecl,const>
global XK_Georgian_tar: cint <cimport,nodecl,const>
global XK_Georgian_un: cint <cimport,nodecl,const>
global XK_Georgian_phar: cint <cimport,nodecl,const>
global XK_Georgian_khar: cint <cimport,nodecl,const>
global XK_Georgian_ghan: cint <cimport,nodecl,const>
global XK_Georgian_qar: cint <cimport,nodecl,const>
global XK_Georgian_shin: cint <cimport,nodecl,const>
global XK_Georgian_chin: cint <cimport,nodecl,const>
global XK_Georgian_can: cint <cimport,nodecl,const>
global XK_Georgian_jil: cint <cimport,nodecl,const>
global XK_Georgian_cil: cint <cimport,nodecl,const>
global XK_Georgian_char: cint <cimport,nodecl,const>
global XK_Georgian_xan: cint <cimport,nodecl,const>
global XK_Georgian_jhan: cint <cimport,nodecl,const>
global XK_Georgian_hae: cint <cimport,nodecl,const>
global XK_Georgian_he: cint <cimport,nodecl,const>
global XK_Georgian_hie: cint <cimport,nodecl,const>
global XK_Georgian_we: cint <cimport,nodecl,const>
global XK_Georgian_har: cint <cimport,nodecl,const>
global XK_Georgian_hoe: cint <cimport,nodecl,const>
global XK_Georgian_fi: cint <cimport,nodecl,const>
global XK_Xabovedot: cint <cimport,nodecl,const>
global XK_Ibreve: cint <cimport,nodecl,const>
global XK_Zstroke: cint <cimport,nodecl,const>
global XK_Gcaron: cint <cimport,nodecl,const>
global XK_Ocaron: cint <cimport,nodecl,const>
global XK_Obarred: cint <cimport,nodecl,const>
global XK_xabovedot: cint <cimport,nodecl,const>
global XK_ibreve: cint <cimport,nodecl,const>
global XK_zstroke: cint <cimport,nodecl,const>
global XK_gcaron: cint <cimport,nodecl,const>
global XK_ocaron: cint <cimport,nodecl,const>
global XK_obarred: cint <cimport,nodecl,const>
global XK_SCHWA: cint <cimport,nodecl,const>
global XK_schwa: cint <cimport,nodecl,const>
global XK_EZH: cint <cimport,nodecl,const>
global XK_ezh: cint <cimport,nodecl,const>
global XK_Lbelowdot: cint <cimport,nodecl,const>
global XK_lbelowdot: cint <cimport,nodecl,const>
global XK_Abelowdot: cint <cimport,nodecl,const>
global XK_abelowdot: cint <cimport,nodecl,const>
global XK_Ahook: cint <cimport,nodecl,const>
global XK_ahook: cint <cimport,nodecl,const>
global XK_Acircumflexacute: cint <cimport,nodecl,const>
global XK_acircumflexacute: cint <cimport,nodecl,const>
global XK_Acircumflexgrave: cint <cimport,nodecl,const>
global XK_acircumflexgrave: cint <cimport,nodecl,const>
global XK_Acircumflexhook: cint <cimport,nodecl,const>
global XK_acircumflexhook: cint <cimport,nodecl,const>
global XK_Acircumflextilde: cint <cimport,nodecl,const>
global XK_acircumflextilde: cint <cimport,nodecl,const>
global XK_Acircumflexbelowdot: cint <cimport,nodecl,const>
global XK_acircumflexbelowdot: cint <cimport,nodecl,const>
global XK_Abreveacute: cint <cimport,nodecl,const>
global XK_abreveacute: cint <cimport,nodecl,const>
global XK_Abrevegrave: cint <cimport,nodecl,const>
global XK_abrevegrave: cint <cimport,nodecl,const>
global XK_Abrevehook: cint <cimport,nodecl,const>
global XK_abrevehook: cint <cimport,nodecl,const>
global XK_Abrevetilde: cint <cimport,nodecl,const>
global XK_abrevetilde: cint <cimport,nodecl,const>
global XK_Abrevebelowdot: cint <cimport,nodecl,const>
global XK_abrevebelowdot: cint <cimport,nodecl,const>
global XK_Ebelowdot: cint <cimport,nodecl,const>
global XK_ebelowdot: cint <cimport,nodecl,const>
global XK_Ehook: cint <cimport,nodecl,const>
global XK_ehook: cint <cimport,nodecl,const>
global XK_Etilde: cint <cimport,nodecl,const>
global XK_etilde: cint <cimport,nodecl,const>
global XK_Ecircumflexacute: cint <cimport,nodecl,const>
global XK_ecircumflexacute: cint <cimport,nodecl,const>
global XK_Ecircumflexgrave: cint <cimport,nodecl,const>
global XK_ecircumflexgrave: cint <cimport,nodecl,const>
global XK_Ecircumflexhook: cint <cimport,nodecl,const>
global XK_ecircumflexhook: cint <cimport,nodecl,const>
global XK_Ecircumflextilde: cint <cimport,nodecl,const>
global XK_ecircumflextilde: cint <cimport,nodecl,const>
global XK_Ecircumflexbelowdot: cint <cimport,nodecl,const>
global XK_ecircumflexbelowdot: cint <cimport,nodecl,const>
global XK_Ihook: cint <cimport,nodecl,const>
global XK_ihook: cint <cimport,nodecl,const>
global XK_Ibelowdot: cint <cimport,nodecl,const>
global XK_ibelowdot: cint <cimport,nodecl,const>
global XK_Obelowdot: cint <cimport,nodecl,const>
global XK_obelowdot: cint <cimport,nodecl,const>
global XK_Ohook: cint <cimport,nodecl,const>
global XK_ohook: cint <cimport,nodecl,const>
global XK_Ocircumflexacute: cint <cimport,nodecl,const>
global XK_ocircumflexacute: cint <cimport,nodecl,const>
global XK_Ocircumflexgrave: cint <cimport,nodecl,const>
global XK_ocircumflexgrave: cint <cimport,nodecl,const>
global XK_Ocircumflexhook: cint <cimport,nodecl,const>
global XK_ocircumflexhook: cint <cimport,nodecl,const>
global XK_Ocircumflextilde: cint <cimport,nodecl,const>
global XK_ocircumflextilde: cint <cimport,nodecl,const>
global XK_Ocircumflexbelowdot: cint <cimport,nodecl,const>
global XK_ocircumflexbelowdot: cint <cimport,nodecl,const>
global XK_Ohornacute: cint <cimport,nodecl,const>
global XK_ohornacute: cint <cimport,nodecl,const>
global XK_Ohorngrave: cint <cimport,nodecl,const>
global XK_ohorngrave: cint <cimport,nodecl,const>
global XK_Ohornhook: cint <cimport,nodecl,const>
global XK_ohornhook: cint <cimport,nodecl,const>
global XK_Ohorntilde: cint <cimport,nodecl,const>
global XK_ohorntilde: cint <cimport,nodecl,const>
global XK_Ohornbelowdot: cint <cimport,nodecl,const>
global XK_ohornbelowdot: cint <cimport,nodecl,const>
global XK_Ubelowdot: cint <cimport,nodecl,const>
global XK_ubelowdot: cint <cimport,nodecl,const>
global XK_Uhook: cint <cimport,nodecl,const>
global XK_uhook: cint <cimport,nodecl,const>
global XK_Uhornacute: cint <cimport,nodecl,const>
global XK_uhornacute: cint <cimport,nodecl,const>
global XK_Uhorngrave: cint <cimport,nodecl,const>
global XK_uhorngrave: cint <cimport,nodecl,const>
global XK_Uhornhook: cint <cimport,nodecl,const>
global XK_uhornhook: cint <cimport,nodecl,const>
global XK_Uhorntilde: cint <cimport,nodecl,const>
global XK_uhorntilde: cint <cimport,nodecl,const>
global XK_Uhornbelowdot: cint <cimport,nodecl,const>
global XK_uhornbelowdot: cint <cimport,nodecl,const>
global XK_Ybelowdot: cint <cimport,nodecl,const>
global XK_ybelowdot: cint <cimport,nodecl,const>
global XK_Yhook: cint <cimport,nodecl,const>
global XK_yhook: cint <cimport,nodecl,const>
global XK_Ytilde: cint <cimport,nodecl,const>
global XK_ytilde: cint <cimport,nodecl,const>
global XK_Ohorn: cint <cimport,nodecl,const>
global XK_ohorn: cint <cimport,nodecl,const>
global XK_Uhorn: cint <cimport,nodecl,const>
global XK_uhorn: cint <cimport,nodecl,const>
global XK_combining_tilde: cint <cimport,nodecl,const>
global XK_combining_grave: cint <cimport,nodecl,const>
global XK_combining_acute: cint <cimport,nodecl,const>
global XK_combining_hook: cint <cimport,nodecl,const>
global XK_combining_belowdot: cint <cimport,nodecl,const>
global XK_EcuSign: cint <cimport,nodecl,const>
global XK_ColonSign: cint <cimport,nodecl,const>
global XK_CruzeiroSign: cint <cimport,nodecl,const>
global XK_FFrancSign: cint <cimport,nodecl,const>
global XK_LiraSign: cint <cimport,nodecl,const>
global XK_MillSign: cint <cimport,nodecl,const>
global XK_NairaSign: cint <cimport,nodecl,const>
global XK_PesetaSign: cint <cimport,nodecl,const>
global XK_RupeeSign: cint <cimport,nodecl,const>
global XK_WonSign: cint <cimport,nodecl,const>
global XK_NewSheqelSign: cint <cimport,nodecl,const>
global XK_DongSign: cint <cimport,nodecl,const>
global XK_EuroSign: cint <cimport,nodecl,const>
global XK_zerosuperior: cint <cimport,nodecl,const>
global XK_foursuperior: cint <cimport,nodecl,const>
global XK_fivesuperior: cint <cimport,nodecl,const>
global XK_sixsuperior: cint <cimport,nodecl,const>
global XK_sevensuperior: cint <cimport,nodecl,const>
global XK_eightsuperior: cint <cimport,nodecl,const>
global XK_ninesuperior: cint <cimport,nodecl,const>
global XK_zerosubscript: cint <cimport,nodecl,const>
global XK_onesubscript: cint <cimport,nodecl,const>
global XK_twosubscript: cint <cimport,nodecl,const>
global XK_threesubscript: cint <cimport,nodecl,const>
global XK_foursubscript: cint <cimport,nodecl,const>
global XK_fivesubscript: cint <cimport,nodecl,const>
global XK_sixsubscript: cint <cimport,nodecl,const>
global XK_sevensubscript: cint <cimport,nodecl,const>
global XK_eightsubscript: cint <cimport,nodecl,const>
global XK_ninesubscript: cint <cimport,nodecl,const>
global XK_partdifferential: cint <cimport,nodecl,const>
global XK_emptyset: cint <cimport,nodecl,const>
global XK_elementof: cint <cimport,nodecl,const>
global XK_notelementof: cint <cimport,nodecl,const>
global XK_containsas: cint <cimport,nodecl,const>
global XK_squareroot: cint <cimport,nodecl,const>
global XK_cuberoot: cint <cimport,nodecl,const>
global XK_fourthroot: cint <cimport,nodecl,const>
global XK_dintegral: cint <cimport,nodecl,const>
global XK_tintegral: cint <cimport,nodecl,const>
global XK_because: cint <cimport,nodecl,const>
global XK_approxeq: cint <cimport,nodecl,const>
global XK_notapproxeq: cint <cimport,nodecl,const>
global XK_notidentical: cint <cimport,nodecl,const>
global XK_stricteq: cint <cimport,nodecl,const>
global XK_braille_dot_1: cint <cimport,nodecl,const>
global XK_braille_dot_2: cint <cimport,nodecl,const>
global XK_braille_dot_3: cint <cimport,nodecl,const>
global XK_braille_dot_4: cint <cimport,nodecl,const>
global XK_braille_dot_5: cint <cimport,nodecl,const>
global XK_braille_dot_6: cint <cimport,nodecl,const>
global XK_braille_dot_7: cint <cimport,nodecl,const>
global XK_braille_dot_8: cint <cimport,nodecl,const>
global XK_braille_dot_9: cint <cimport,nodecl,const>
global XK_braille_dot_10: cint <cimport,nodecl,const>
global XK_braille_blank: cint <cimport,nodecl,const>
global XK_braille_dots_1: cint <cimport,nodecl,const>
global XK_braille_dots_2: cint <cimport,nodecl,const>
global XK_braille_dots_12: cint <cimport,nodecl,const>
global XK_braille_dots_3: cint <cimport,nodecl,const>
global XK_braille_dots_13: cint <cimport,nodecl,const>
global XK_braille_dots_23: cint <cimport,nodecl,const>
global XK_braille_dots_123: cint <cimport,nodecl,const>
global XK_braille_dots_4: cint <cimport,nodecl,const>
global XK_braille_dots_14: cint <cimport,nodecl,const>
global XK_braille_dots_24: cint <cimport,nodecl,const>
global XK_braille_dots_124: cint <cimport,nodecl,const>
global XK_braille_dots_34: cint <cimport,nodecl,const>
global XK_braille_dots_134: cint <cimport,nodecl,const>
global XK_braille_dots_234: cint <cimport,nodecl,const>
global XK_braille_dots_1234: cint <cimport,nodecl,const>
global XK_braille_dots_5: cint <cimport,nodecl,const>
global XK_braille_dots_15: cint <cimport,nodecl,const>
global XK_braille_dots_25: cint <cimport,nodecl,const>
global XK_braille_dots_125: cint <cimport,nodecl,const>
global XK_braille_dots_35: cint <cimport,nodecl,const>
global XK_braille_dots_135: cint <cimport,nodecl,const>
global XK_braille_dots_235: cint <cimport,nodecl,const>
global XK_braille_dots_1235: cint <cimport,nodecl,const>
global XK_braille_dots_45: cint <cimport,nodecl,const>
global XK_braille_dots_145: cint <cimport,nodecl,const>
global XK_braille_dots_245: cint <cimport,nodecl,const>
global XK_braille_dots_1245: cint <cimport,nodecl,const>
global XK_braille_dots_345: cint <cimport,nodecl,const>
global XK_braille_dots_1345: cint <cimport,nodecl,const>
global XK_braille_dots_2345: cint <cimport,nodecl,const>
global XK_braille_dots_12345: cint <cimport,nodecl,const>
global XK_braille_dots_6: cint <cimport,nodecl,const>
global XK_braille_dots_16: cint <cimport,nodecl,const>
global XK_braille_dots_26: cint <cimport,nodecl,const>
global XK_braille_dots_126: cint <cimport,nodecl,const>
global XK_braille_dots_36: cint <cimport,nodecl,const>
global XK_braille_dots_136: cint <cimport,nodecl,const>
global XK_braille_dots_236: cint <cimport,nodecl,const>
global XK_braille_dots_1236: cint <cimport,nodecl,const>
global XK_braille_dots_46: cint <cimport,nodecl,const>
global XK_braille_dots_146: cint <cimport,nodecl,const>
global XK_braille_dots_246: cint <cimport,nodecl,const>
global XK_braille_dots_1246: cint <cimport,nodecl,const>
global XK_braille_dots_346: cint <cimport,nodecl,const>
global XK_braille_dots_1346: cint <cimport,nodecl,const>
global XK_braille_dots_2346: cint <cimport,nodecl,const>
global XK_braille_dots_12346: cint <cimport,nodecl,const>
global XK_braille_dots_56: cint <cimport,nodecl,const>
global XK_braille_dots_156: cint <cimport,nodecl,const>
global XK_braille_dots_256: cint <cimport,nodecl,const>
global XK_braille_dots_1256: cint <cimport,nodecl,const>
global XK_braille_dots_356: cint <cimport,nodecl,const>
global XK_braille_dots_1356: cint <cimport,nodecl,const>
global XK_braille_dots_2356: cint <cimport,nodecl,const>
global XK_braille_dots_12356: cint <cimport,nodecl,const>
global XK_braille_dots_456: cint <cimport,nodecl,const>
global XK_braille_dots_1456: cint <cimport,nodecl,const>
global XK_braille_dots_2456: cint <cimport,nodecl,const>
global XK_braille_dots_12456: cint <cimport,nodecl,const>
global XK_braille_dots_3456: cint <cimport,nodecl,const>
global XK_braille_dots_13456: cint <cimport,nodecl,const>
global XK_braille_dots_23456: cint <cimport,nodecl,const>
global XK_braille_dots_123456: cint <cimport,nodecl,const>
global XK_braille_dots_7: cint <cimport,nodecl,const>
global XK_braille_dots_17: cint <cimport,nodecl,const>
global XK_braille_dots_27: cint <cimport,nodecl,const>
global XK_braille_dots_127: cint <cimport,nodecl,const>
global XK_braille_dots_37: cint <cimport,nodecl,const>
global XK_braille_dots_137: cint <cimport,nodecl,const>
global XK_braille_dots_237: cint <cimport,nodecl,const>
global XK_braille_dots_1237: cint <cimport,nodecl,const>
global XK_braille_dots_47: cint <cimport,nodecl,const>
global XK_braille_dots_147: cint <cimport,nodecl,const>
global XK_braille_dots_247: cint <cimport,nodecl,const>
global XK_braille_dots_1247: cint <cimport,nodecl,const>
global XK_braille_dots_347: cint <cimport,nodecl,const>
global XK_braille_dots_1347: cint <cimport,nodecl,const>
global XK_braille_dots_2347: cint <cimport,nodecl,const>
global XK_braille_dots_12347: cint <cimport,nodecl,const>
global XK_braille_dots_57: cint <cimport,nodecl,const>
global XK_braille_dots_157: cint <cimport,nodecl,const>
global XK_braille_dots_257: cint <cimport,nodecl,const>
global XK_braille_dots_1257: cint <cimport,nodecl,const>
global XK_braille_dots_357: cint <cimport,nodecl,const>
global XK_braille_dots_1357: cint <cimport,nodecl,const>
global XK_braille_dots_2357: cint <cimport,nodecl,const>
global XK_braille_dots_12357: cint <cimport,nodecl,const>
global XK_braille_dots_457: cint <cimport,nodecl,const>
global XK_braille_dots_1457: cint <cimport,nodecl,const>
global XK_braille_dots_2457: cint <cimport,nodecl,const>
global XK_braille_dots_12457: cint <cimport,nodecl,const>
global XK_braille_dots_3457: cint <cimport,nodecl,const>
global XK_braille_dots_13457: cint <cimport,nodecl,const>
global XK_braille_dots_23457: cint <cimport,nodecl,const>
global XK_braille_dots_123457: cint <cimport,nodecl,const>
global XK_braille_dots_67: cint <cimport,nodecl,const>
global XK_braille_dots_167: cint <cimport,nodecl,const>
global XK_braille_dots_267: cint <cimport,nodecl,const>
global XK_braille_dots_1267: cint <cimport,nodecl,const>
global XK_braille_dots_367: cint <cimport,nodecl,const>
global XK_braille_dots_1367: cint <cimport,nodecl,const>
global XK_braille_dots_2367: cint <cimport,nodecl,const>
global XK_braille_dots_12367: cint <cimport,nodecl,const>
global XK_braille_dots_467: cint <cimport,nodecl,const>
global XK_braille_dots_1467: cint <cimport,nodecl,const>
global XK_braille_dots_2467: cint <cimport,nodecl,const>
global XK_braille_dots_12467: cint <cimport,nodecl,const>
global XK_braille_dots_3467: cint <cimport,nodecl,const>
global XK_braille_dots_13467: cint <cimport,nodecl,const>
global XK_braille_dots_23467: cint <cimport,nodecl,const>
global XK_braille_dots_123467: cint <cimport,nodecl,const>
global XK_braille_dots_567: cint <cimport,nodecl,const>
global XK_braille_dots_1567: cint <cimport,nodecl,const>
global XK_braille_dots_2567: cint <cimport,nodecl,const>
global XK_braille_dots_12567: cint <cimport,nodecl,const>
global XK_braille_dots_3567: cint <cimport,nodecl,const>
global XK_braille_dots_13567: cint <cimport,nodecl,const>
global XK_braille_dots_23567: cint <cimport,nodecl,const>
global XK_braille_dots_123567: cint <cimport,nodecl,const>
global XK_braille_dots_4567: cint <cimport,nodecl,const>
global XK_braille_dots_14567: cint <cimport,nodecl,const>
global XK_braille_dots_24567: cint <cimport,nodecl,const>
global XK_braille_dots_124567: cint <cimport,nodecl,const>
global XK_braille_dots_34567: cint <cimport,nodecl,const>
global XK_braille_dots_134567: cint <cimport,nodecl,const>
global XK_braille_dots_234567: cint <cimport,nodecl,const>
global XK_braille_dots_1234567: cint <cimport,nodecl,const>
global XK_braille_dots_8: cint <cimport,nodecl,const>
global XK_braille_dots_18: cint <cimport,nodecl,const>
global XK_braille_dots_28: cint <cimport,nodecl,const>
global XK_braille_dots_128: cint <cimport,nodecl,const>
global XK_braille_dots_38: cint <cimport,nodecl,const>
global XK_braille_dots_138: cint <cimport,nodecl,const>
global XK_braille_dots_238: cint <cimport,nodecl,const>
global XK_braille_dots_1238: cint <cimport,nodecl,const>
global XK_braille_dots_48: cint <cimport,nodecl,const>
global XK_braille_dots_148: cint <cimport,nodecl,const>
global XK_braille_dots_248: cint <cimport,nodecl,const>
global XK_braille_dots_1248: cint <cimport,nodecl,const>
global XK_braille_dots_348: cint <cimport,nodecl,const>
global XK_braille_dots_1348: cint <cimport,nodecl,const>
global XK_braille_dots_2348: cint <cimport,nodecl,const>
global XK_braille_dots_12348: cint <cimport,nodecl,const>
global XK_braille_dots_58: cint <cimport,nodecl,const>
global XK_braille_dots_158: cint <cimport,nodecl,const>
global XK_braille_dots_258: cint <cimport,nodecl,const>
global XK_braille_dots_1258: cint <cimport,nodecl,const>
global XK_braille_dots_358: cint <cimport,nodecl,const>
global XK_braille_dots_1358: cint <cimport,nodecl,const>
global XK_braille_dots_2358: cint <cimport,nodecl,const>
global XK_braille_dots_12358: cint <cimport,nodecl,const>
global XK_braille_dots_458: cint <cimport,nodecl,const>
global XK_braille_dots_1458: cint <cimport,nodecl,const>
global XK_braille_dots_2458: cint <cimport,nodecl,const>
global XK_braille_dots_12458: cint <cimport,nodecl,const>
global XK_braille_dots_3458: cint <cimport,nodecl,const>
global XK_braille_dots_13458: cint <cimport,nodecl,const>
global XK_braille_dots_23458: cint <cimport,nodecl,const>
global XK_braille_dots_123458: cint <cimport,nodecl,const>
global XK_braille_dots_68: cint <cimport,nodecl,const>
global XK_braille_dots_168: cint <cimport,nodecl,const>
global XK_braille_dots_268: cint <cimport,nodecl,const>
global XK_braille_dots_1268: cint <cimport,nodecl,const>
global XK_braille_dots_368: cint <cimport,nodecl,const>
global XK_braille_dots_1368: cint <cimport,nodecl,const>
global XK_braille_dots_2368: cint <cimport,nodecl,const>
global XK_braille_dots_12368: cint <cimport,nodecl,const>
global XK_braille_dots_468: cint <cimport,nodecl,const>
global XK_braille_dots_1468: cint <cimport,nodecl,const>
global XK_braille_dots_2468: cint <cimport,nodecl,const>
global XK_braille_dots_12468: cint <cimport,nodecl,const>
global XK_braille_dots_3468: cint <cimport,nodecl,const>
global XK_braille_dots_13468: cint <cimport,nodecl,const>
global XK_braille_dots_23468: cint <cimport,nodecl,const>
global XK_braille_dots_123468: cint <cimport,nodecl,const>
global XK_braille_dots_568: cint <cimport,nodecl,const>
global XK_braille_dots_1568: cint <cimport,nodecl,const>
global XK_braille_dots_2568: cint <cimport,nodecl,const>
global XK_braille_dots_12568: cint <cimport,nodecl,const>
global XK_braille_dots_3568: cint <cimport,nodecl,const>
global XK_braille_dots_13568: cint <cimport,nodecl,const>
global XK_braille_dots_23568: cint <cimport,nodecl,const>
global XK_braille_dots_123568: cint <cimport,nodecl,const>
global XK_braille_dots_4568: cint <cimport,nodecl,const>
global XK_braille_dots_14568: cint <cimport,nodecl,const>
global XK_braille_dots_24568: cint <cimport,nodecl,const>
global XK_braille_dots_124568: cint <cimport,nodecl,const>
global XK_braille_dots_34568: cint <cimport,nodecl,const>
global XK_braille_dots_134568: cint <cimport,nodecl,const>
global XK_braille_dots_234568: cint <cimport,nodecl,const>
global XK_braille_dots_1234568: cint <cimport,nodecl,const>
global XK_braille_dots_78: cint <cimport,nodecl,const>
global XK_braille_dots_178: cint <cimport,nodecl,const>
global XK_braille_dots_278: cint <cimport,nodecl,const>
global XK_braille_dots_1278: cint <cimport,nodecl,const>
global XK_braille_dots_378: cint <cimport,nodecl,const>
global XK_braille_dots_1378: cint <cimport,nodecl,const>
global XK_braille_dots_2378: cint <cimport,nodecl,const>
global XK_braille_dots_12378: cint <cimport,nodecl,const>
global XK_braille_dots_478: cint <cimport,nodecl,const>
global XK_braille_dots_1478: cint <cimport,nodecl,const>
global XK_braille_dots_2478: cint <cimport,nodecl,const>
global XK_braille_dots_12478: cint <cimport,nodecl,const>
global XK_braille_dots_3478: cint <cimport,nodecl,const>
global XK_braille_dots_13478: cint <cimport,nodecl,const>
global XK_braille_dots_23478: cint <cimport,nodecl,const>
global XK_braille_dots_123478: cint <cimport,nodecl,const>
global XK_braille_dots_578: cint <cimport,nodecl,const>
global XK_braille_dots_1578: cint <cimport,nodecl,const>
global XK_braille_dots_2578: cint <cimport,nodecl,const>
global XK_braille_dots_12578: cint <cimport,nodecl,const>
global XK_braille_dots_3578: cint <cimport,nodecl,const>
global XK_braille_dots_13578: cint <cimport,nodecl,const>
global XK_braille_dots_23578: cint <cimport,nodecl,const>
global XK_braille_dots_123578: cint <cimport,nodecl,const>
global XK_braille_dots_4578: cint <cimport,nodecl,const>
global XK_braille_dots_14578: cint <cimport,nodecl,const>
global XK_braille_dots_24578: cint <cimport,nodecl,const>
global XK_braille_dots_124578: cint <cimport,nodecl,const>
global XK_braille_dots_34578: cint <cimport,nodecl,const>
global XK_braille_dots_134578: cint <cimport,nodecl,const>
global XK_braille_dots_234578: cint <cimport,nodecl,const>
global XK_braille_dots_1234578: cint <cimport,nodecl,const>
global XK_braille_dots_678: cint <cimport,nodecl,const>
global XK_braille_dots_1678: cint <cimport,nodecl,const>
global XK_braille_dots_2678: cint <cimport,nodecl,const>
global XK_braille_dots_12678: cint <cimport,nodecl,const>
global XK_braille_dots_3678: cint <cimport,nodecl,const>
global XK_braille_dots_13678: cint <cimport,nodecl,const>
global XK_braille_dots_23678: cint <cimport,nodecl,const>
global XK_braille_dots_123678: cint <cimport,nodecl,const>
global XK_braille_dots_4678: cint <cimport,nodecl,const>
global XK_braille_dots_14678: cint <cimport,nodecl,const>
global XK_braille_dots_24678: cint <cimport,nodecl,const>
global XK_braille_dots_124678: cint <cimport,nodecl,const>
global XK_braille_dots_34678: cint <cimport,nodecl,const>
global XK_braille_dots_134678: cint <cimport,nodecl,const>
global XK_braille_dots_234678: cint <cimport,nodecl,const>
global XK_braille_dots_1234678: cint <cimport,nodecl,const>
global XK_braille_dots_5678: cint <cimport,nodecl,const>
global XK_braille_dots_15678: cint <cimport,nodecl,const>
global XK_braille_dots_25678: cint <cimport,nodecl,const>
global XK_braille_dots_125678: cint <cimport,nodecl,const>
global XK_braille_dots_35678: cint <cimport,nodecl,const>
global XK_braille_dots_135678: cint <cimport,nodecl,const>
global XK_braille_dots_235678: cint <cimport,nodecl,const>
global XK_braille_dots_1235678: cint <cimport,nodecl,const>
global XK_braille_dots_45678: cint <cimport,nodecl,const>
global XK_braille_dots_145678: cint <cimport,nodecl,const>
global XK_braille_dots_245678: cint <cimport,nodecl,const>
global XK_braille_dots_1245678: cint <cimport,nodecl,const>
global XK_braille_dots_345678: cint <cimport,nodecl,const>
global XK_braille_dots_1345678: cint <cimport,nodecl,const>
global XK_braille_dots_2345678: cint <cimport,nodecl,const>
global XK_braille_dots_12345678: cint <cimport,nodecl,const>
global XK_Sinh_ng: cint <cimport,nodecl,const>
global XK_Sinh_h2: cint <cimport,nodecl,const>
global XK_Sinh_a: cint <cimport,nodecl,const>
global XK_Sinh_aa: cint <cimport,nodecl,const>
global XK_Sinh_ae: cint <cimport,nodecl,const>
global XK_Sinh_aee: cint <cimport,nodecl,const>
global XK_Sinh_i: cint <cimport,nodecl,const>
global XK_Sinh_ii: cint <cimport,nodecl,const>
global XK_Sinh_u: cint <cimport,nodecl,const>
global XK_Sinh_uu: cint <cimport,nodecl,const>
global XK_Sinh_ri: cint <cimport,nodecl,const>
global XK_Sinh_rii: cint <cimport,nodecl,const>
global XK_Sinh_lu: cint <cimport,nodecl,const>
global XK_Sinh_luu: cint <cimport,nodecl,const>
global XK_Sinh_e: cint <cimport,nodecl,const>
global XK_Sinh_ee: cint <cimport,nodecl,const>
global XK_Sinh_ai: cint <cimport,nodecl,const>
global XK_Sinh_o: cint <cimport,nodecl,const>
global XK_Sinh_oo: cint <cimport,nodecl,const>
global XK_Sinh_au: cint <cimport,nodecl,const>
global XK_Sinh_ka: cint <cimport,nodecl,const>
global XK_Sinh_kha: cint <cimport,nodecl,const>
global XK_Sinh_ga: cint <cimport,nodecl,const>
global XK_Sinh_gha: cint <cimport,nodecl,const>
global XK_Sinh_ng2: cint <cimport,nodecl,const>
global XK_Sinh_nga: cint <cimport,nodecl,const>
global XK_Sinh_ca: cint <cimport,nodecl,const>
global XK_Sinh_cha: cint <cimport,nodecl,const>
global XK_Sinh_ja: cint <cimport,nodecl,const>
global XK_Sinh_jha: cint <cimport,nodecl,const>
global XK_Sinh_nya: cint <cimport,nodecl,const>
global XK_Sinh_jnya: cint <cimport,nodecl,const>
global XK_Sinh_nja: cint <cimport,nodecl,const>
global XK_Sinh_tta: cint <cimport,nodecl,const>
global XK_Sinh_ttha: cint <cimport,nodecl,const>
global XK_Sinh_dda: cint <cimport,nodecl,const>
global XK_Sinh_ddha: cint <cimport,nodecl,const>
global XK_Sinh_nna: cint <cimport,nodecl,const>
global XK_Sinh_ndda: cint <cimport,nodecl,const>
global XK_Sinh_tha: cint <cimport,nodecl,const>
global XK_Sinh_thha: cint <cimport,nodecl,const>
global XK_Sinh_dha: cint <cimport,nodecl,const>
global XK_Sinh_dhha: cint <cimport,nodecl,const>
global XK_Sinh_na: cint <cimport,nodecl,const>
global XK_Sinh_ndha: cint <cimport,nodecl,const>
global XK_Sinh_pa: cint <cimport,nodecl,const>
global XK_Sinh_pha: cint <cimport,nodecl,const>
global XK_Sinh_ba: cint <cimport,nodecl,const>
global XK_Sinh_bha: cint <cimport,nodecl,const>
global XK_Sinh_ma: cint <cimport,nodecl,const>
global XK_Sinh_mba: cint <cimport,nodecl,const>
global XK_Sinh_ya: cint <cimport,nodecl,const>
global XK_Sinh_ra: cint <cimport,nodecl,const>
global XK_Sinh_la: cint <cimport,nodecl,const>
global XK_Sinh_va: cint <cimport,nodecl,const>
global XK_Sinh_sha: cint <cimport,nodecl,const>
global XK_Sinh_ssha: cint <cimport,nodecl,const>
global XK_Sinh_sa: cint <cimport,nodecl,const>
global XK_Sinh_ha: cint <cimport,nodecl,const>
global XK_Sinh_lla: cint <cimport,nodecl,const>
global XK_Sinh_fa: cint <cimport,nodecl,const>
global XK_Sinh_al: cint <cimport,nodecl,const>
global XK_Sinh_aa2: cint <cimport,nodecl,const>
global XK_Sinh_ae2: cint <cimport,nodecl,const>
global XK_Sinh_aee2: cint <cimport,nodecl,const>
global XK_Sinh_i2: cint <cimport,nodecl,const>
global XK_Sinh_ii2: cint <cimport,nodecl,const>
global XK_Sinh_u2: cint <cimport,nodecl,const>
global XK_Sinh_uu2: cint <cimport,nodecl,const>
global XK_Sinh_ru2: cint <cimport,nodecl,const>
global XK_Sinh_e2: cint <cimport,nodecl,const>
global XK_Sinh_ee2: cint <cimport,nodecl,const>
global XK_Sinh_ai2: cint <cimport,nodecl,const>
global XK_Sinh_o2: cint <cimport,nodecl,const>
global XK_Sinh_oo2: cint <cimport,nodecl,const>
global XK_Sinh_au2: cint <cimport,nodecl,const>
global XK_Sinh_lu2: cint <cimport,nodecl,const>
global XK_Sinh_ruu2: cint <cimport,nodecl,const>
global XK_Sinh_luu2: cint <cimport,nodecl,const>
global XK_Sinh_kunddaliya: cint <cimport,nodecl,const>
global XK_VoidSymbol: cint <cimport,nodecl,const>
global XK_BackSpace: cint <cimport,nodecl,const>
global XK_Tab: cint <cimport,nodecl,const>
global XK_Linefeed: cint <cimport,nodecl,const>
global XK_Clear: cint <cimport,nodecl,const>
global XK_Return: cint <cimport,nodecl,const>
global XK_Pause: cint <cimport,nodecl,const>
global XK_Scroll_Lock: cint <cimport,nodecl,const>
global XK_Sys_Req: cint <cimport,nodecl,const>
global XK_Escape: cint <cimport,nodecl,const>
global XK_Delete: cint <cimport,nodecl,const>
global XK_Multi_key: cint <cimport,nodecl,const>
global XK_Codeinput: cint <cimport,nodecl,const>
global XK_SingleCandidate: cint <cimport,nodecl,const>
global XK_MultipleCandidate: cint <cimport,nodecl,const>
global XK_PreviousCandidate: cint <cimport,nodecl,const>
global XK_Kanji: cint <cimport,nodecl,const>
global XK_Muhenkan: cint <cimport,nodecl,const>
global XK_Henkan_Mode: cint <cimport,nodecl,const>
global XK_Henkan: cint <cimport,nodecl,const>
global XK_Romaji: cint <cimport,nodecl,const>
global XK_Hiragana: cint <cimport,nodecl,const>
global XK_Katakana: cint <cimport,nodecl,const>
global XK_Hiragana_Katakana: cint <cimport,nodecl,const>
global XK_Zenkaku: cint <cimport,nodecl,const>
global XK_Hankaku: cint <cimport,nodecl,const>
global XK_Zenkaku_Hankaku: cint <cimport,nodecl,const>
global XK_Touroku: cint <cimport,nodecl,const>
global XK_Massyo: cint <cimport,nodecl,const>
global XK_Kana_Lock: cint <cimport,nodecl,const>
global XK_Kana_Shift: cint <cimport,nodecl,const>
global XK_Eisu_Shift: cint <cimport,nodecl,const>
global XK_Eisu_toggle: cint <cimport,nodecl,const>
global XK_Kanji_Bangou: cint <cimport,nodecl,const>
global XK_Zen_Koho: cint <cimport,nodecl,const>
global XK_Mae_Koho: cint <cimport,nodecl,const>
global XK_Home: cint <cimport,nodecl,const>
global XK_Left: cint <cimport,nodecl,const>
global XK_Up: cint <cimport,nodecl,const>
global XK_Right: cint <cimport,nodecl,const>
global XK_Down: cint <cimport,nodecl,const>
global XK_Prior: cint <cimport,nodecl,const>
global XK_Page_Up: cint <cimport,nodecl,const>
global XK_Next: cint <cimport,nodecl,const>
global XK_Page_Down: cint <cimport,nodecl,const>
global XK_End: cint <cimport,nodecl,const>
global XK_Begin: cint <cimport,nodecl,const>
global XK_Select: cint <cimport,nodecl,const>
global XK_Print: cint <cimport,nodecl,const>
global XK_Execute: cint <cimport,nodecl,const>
global XK_Insert: cint <cimport,nodecl,const>
global XK_Undo: cint <cimport,nodecl,const>
global XK_Redo: cint <cimport,nodecl,const>
global XK_Menu: cint <cimport,nodecl,const>
global XK_Find: cint <cimport,nodecl,const>
global XK_Cancel: cint <cimport,nodecl,const>
global XK_Help: cint <cimport,nodecl,const>
global XK_Break: cint <cimport,nodecl,const>
global XK_Mode_switch: cint <cimport,nodecl,const>
global XK_script_switch: cint <cimport,nodecl,const>
global XK_Num_Lock: cint <cimport,nodecl,const>
global XK_KP_Space: cint <cimport,nodecl,const>
global XK_KP_Tab: cint <cimport,nodecl,const>
global XK_KP_Enter: cint <cimport,nodecl,const>
global XK_KP_F1: cint <cimport,nodecl,const>
global XK_KP_F2: cint <cimport,nodecl,const>
global XK_KP_F3: cint <cimport,nodecl,const>
global XK_KP_F4: cint <cimport,nodecl,const>
global XK_KP_Home: cint <cimport,nodecl,const>
global XK_KP_Left: cint <cimport,nodecl,const>
global XK_KP_Up: cint <cimport,nodecl,const>
global XK_KP_Right: cint <cimport,nodecl,const>
global XK_KP_Down: cint <cimport,nodecl,const>
global XK_KP_Prior: cint <cimport,nodecl,const>
global XK_KP_Page_Up: cint <cimport,nodecl,const>
global XK_KP_Next: cint <cimport,nodecl,const>
global XK_KP_Page_Down: cint <cimport,nodecl,const>
global XK_KP_End: cint <cimport,nodecl,const>
global XK_KP_Begin: cint <cimport,nodecl,const>
global XK_KP_Insert: cint <cimport,nodecl,const>
global XK_KP_Delete: cint <cimport,nodecl,const>
global XK_KP_Equal: cint <cimport,nodecl,const>
global XK_KP_Multiply: cint <cimport,nodecl,const>
global XK_KP_Add: cint <cimport,nodecl,const>
global XK_KP_Separator: cint <cimport,nodecl,const>
global XK_KP_Subtract: cint <cimport,nodecl,const>
global XK_KP_Decimal: cint <cimport,nodecl,const>
global XK_KP_Divide: cint <cimport,nodecl,const>
global XK_KP_0: cint <cimport,nodecl,const>
global XK_KP_1: cint <cimport,nodecl,const>
global XK_KP_2: cint <cimport,nodecl,const>
global XK_KP_3: cint <cimport,nodecl,const>
global XK_KP_4: cint <cimport,nodecl,const>
global XK_KP_5: cint <cimport,nodecl,const>
global XK_KP_6: cint <cimport,nodecl,const>
global XK_KP_7: cint <cimport,nodecl,const>
global XK_KP_8: cint <cimport,nodecl,const>
global XK_KP_9: cint <cimport,nodecl,const>
global XK_F1: cint <cimport,nodecl,const>
global XK_F2: cint <cimport,nodecl,const>
global XK_F3: cint <cimport,nodecl,const>
global XK_F4: cint <cimport,nodecl,const>
global XK_F5: cint <cimport,nodecl,const>
global XK_F6: cint <cimport,nodecl,const>
global XK_F7: cint <cimport,nodecl,const>
global XK_F8: cint <cimport,nodecl,const>
global XK_F9: cint <cimport,nodecl,const>
global XK_F10: cint <cimport,nodecl,const>
global XK_F11: cint <cimport,nodecl,const>
global XK_L1: cint <cimport,nodecl,const>
global XK_F12: cint <cimport,nodecl,const>
global XK_L2: cint <cimport,nodecl,const>
global XK_F13: cint <cimport,nodecl,const>
global XK_L3: cint <cimport,nodecl,const>
global XK_F14: cint <cimport,nodecl,const>
global XK_L4: cint <cimport,nodecl,const>
global XK_F15: cint <cimport,nodecl,const>
global XK_L5: cint <cimport,nodecl,const>
global XK_F16: cint <cimport,nodecl,const>
global XK_L6: cint <cimport,nodecl,const>
global XK_F17: cint <cimport,nodecl,const>
global XK_L7: cint <cimport,nodecl,const>
global XK_F18: cint <cimport,nodecl,const>
global XK_L8: cint <cimport,nodecl,const>
global XK_F19: cint <cimport,nodecl,const>
global XK_L9: cint <cimport,nodecl,const>
global XK_F20: cint <cimport,nodecl,const>
global XK_L10: cint <cimport,nodecl,const>
global XK_F21: cint <cimport,nodecl,const>
global XK_R1: cint <cimport,nodecl,const>
global XK_F22: cint <cimport,nodecl,const>
global XK_R2: cint <cimport,nodecl,const>
global XK_F23: cint <cimport,nodecl,const>
global XK_R3: cint <cimport,nodecl,const>
global XK_F24: cint <cimport,nodecl,const>
global XK_R4: cint <cimport,nodecl,const>
global XK_F25: cint <cimport,nodecl,const>
global XK_R5: cint <cimport,nodecl,const>
global XK_F26: cint <cimport,nodecl,const>
global XK_R6: cint <cimport,nodecl,const>
global XK_F27: cint <cimport,nodecl,const>
global XK_R7: cint <cimport,nodecl,const>
global XK_F28: cint <cimport,nodecl,const>
global XK_R8: cint <cimport,nodecl,const>
global XK_F29: cint <cimport,nodecl,const>
global XK_R9: cint <cimport,nodecl,const>
global XK_F30: cint <cimport,nodecl,const>
global XK_R10: cint <cimport,nodecl,const>
global XK_F31: cint <cimport,nodecl,const>
global XK_R11: cint <cimport,nodecl,const>
global XK_F32: cint <cimport,nodecl,const>
global XK_R12: cint <cimport,nodecl,const>
global XK_F33: cint <cimport,nodecl,const>
global XK_R13: cint <cimport,nodecl,const>
global XK_F34: cint <cimport,nodecl,const>
global XK_R14: cint <cimport,nodecl,const>
global XK_F35: cint <cimport,nodecl,const>
global XK_R15: cint <cimport,nodecl,const>
global XK_Shift_L: cint <cimport,nodecl,const>
global XK_Shift_R: cint <cimport,nodecl,const>
global XK_Control_L: cint <cimport,nodecl,const>
global XK_Control_R: cint <cimport,nodecl,const>
global XK_Caps_Lock: cint <cimport,nodecl,const>
global XK_Shift_Lock: cint <cimport,nodecl,const>
global XK_Meta_L: cint <cimport,nodecl,const>
global XK_Meta_R: cint <cimport,nodecl,const>
global XK_Alt_L: cint <cimport,nodecl,const>
global XK_Alt_R: cint <cimport,nodecl,const>
global XK_Super_L: cint <cimport,nodecl,const>
global XK_Super_R: cint <cimport,nodecl,const>
global XK_Hyper_L: cint <cimport,nodecl,const>
global XK_Hyper_R: cint <cimport,nodecl,const>
global XK_ISO_Lock: cint <cimport,nodecl,const>
global XK_ISO_Level2_Latch: cint <cimport,nodecl,const>
global XK_ISO_Level3_Shift: cint <cimport,nodecl,const>
global XK_ISO_Level3_Latch: cint <cimport,nodecl,const>
global XK_ISO_Level3_Lock: cint <cimport,nodecl,const>
global XK_ISO_Level5_Shift: cint <cimport,nodecl,const>
global XK_ISO_Level5_Latch: cint <cimport,nodecl,const>
global XK_ISO_Level5_Lock: cint <cimport,nodecl,const>
global XK_ISO_Group_Shift: cint <cimport,nodecl,const>
global XK_ISO_Group_Latch: cint <cimport,nodecl,const>
global XK_ISO_Group_Lock: cint <cimport,nodecl,const>
global XK_ISO_Next_Group: cint <cimport,nodecl,const>
global XK_ISO_Next_Group_Lock: cint <cimport,nodecl,const>
global XK_ISO_Prev_Group: cint <cimport,nodecl,const>
global XK_ISO_Prev_Group_Lock: cint <cimport,nodecl,const>
global XK_ISO_First_Group: cint <cimport,nodecl,const>
global XK_ISO_First_Group_Lock: cint <cimport,nodecl,const>
global XK_ISO_Last_Group: cint <cimport,nodecl,const>
global XK_ISO_Last_Group_Lock: cint <cimport,nodecl,const>
global XK_ISO_Left_Tab: cint <cimport,nodecl,const>
global XK_ISO_Move_Line_Up: cint <cimport,nodecl,const>
global XK_ISO_Move_Line_Down: cint <cimport,nodecl,const>
global XK_ISO_Partial_Line_Up: cint <cimport,nodecl,const>
global XK_ISO_Partial_Line_Down: cint <cimport,nodecl,const>
global XK_ISO_Partial_Space_Left: cint <cimport,nodecl,const>
global XK_ISO_Partial_Space_Right: cint <cimport,nodecl,const>
global XK_ISO_Set_Margin_Left: cint <cimport,nodecl,const>
global XK_ISO_Set_Margin_Right: cint <cimport,nodecl,const>
global XK_ISO_Release_Margin_Left: cint <cimport,nodecl,const>
global XK_ISO_Release_Margin_Right: cint <cimport,nodecl,const>
global XK_ISO_Release_Both_Margins: cint <cimport,nodecl,const>
global XK_ISO_Fast_Cursor_Left: cint <cimport,nodecl,const>
global XK_ISO_Fast_Cursor_Right: cint <cimport,nodecl,const>
global XK_ISO_Fast_Cursor_Up: cint <cimport,nodecl,const>
global XK_ISO_Fast_Cursor_Down: cint <cimport,nodecl,const>
global XK_ISO_Continuous_Underline: cint <cimport,nodecl,const>
global XK_ISO_Discontinuous_Underline: cint <cimport,nodecl,const>
global XK_ISO_Emphasize: cint <cimport,nodecl,const>
global XK_ISO_Center_Object: cint <cimport,nodecl,const>
global XK_ISO_Enter: cint <cimport,nodecl,const>
global XK_dead_grave: cint <cimport,nodecl,const>
global XK_dead_acute: cint <cimport,nodecl,const>
global XK_dead_circumflex: cint <cimport,nodecl,const>
global XK_dead_tilde: cint <cimport,nodecl,const>
global XK_dead_perispomeni: cint <cimport,nodecl,const>
global XK_dead_macron: cint <cimport,nodecl,const>
global XK_dead_breve: cint <cimport,nodecl,const>
global XK_dead_abovedot: cint <cimport,nodecl,const>
global XK_dead_diaeresis: cint <cimport,nodecl,const>
global XK_dead_abovering: cint <cimport,nodecl,const>
global XK_dead_doubleacute: cint <cimport,nodecl,const>
global XK_dead_caron: cint <cimport,nodecl,const>
global XK_dead_cedilla: cint <cimport,nodecl,const>
global XK_dead_ogonek: cint <cimport,nodecl,const>
global XK_dead_iota: cint <cimport,nodecl,const>
global XK_dead_voiced_sound: cint <cimport,nodecl,const>
global XK_dead_semivoiced_sound: cint <cimport,nodecl,const>
global XK_dead_belowdot: cint <cimport,nodecl,const>
global XK_dead_hook: cint <cimport,nodecl,const>
global XK_dead_horn: cint <cimport,nodecl,const>
global XK_dead_stroke: cint <cimport,nodecl,const>
global XK_dead_abovecomma: cint <cimport,nodecl,const>
global XK_dead_psili: cint <cimport,nodecl,const>
global XK_dead_abovereversedcomma: cint <cimport,nodecl,const>
global XK_dead_dasia: cint <cimport,nodecl,const>
global XK_dead_doublegrave: cint <cimport,nodecl,const>
global XK_dead_belowring: cint <cimport,nodecl,const>
global XK_dead_belowmacron: cint <cimport,nodecl,const>
global XK_dead_belowcircumflex: cint <cimport,nodecl,const>
global XK_dead_belowtilde: cint <cimport,nodecl,const>
global XK_dead_belowbreve: cint <cimport,nodecl,const>
global XK_dead_belowdiaeresis: cint <cimport,nodecl,const>
global XK_dead_invertedbreve: cint <cimport,nodecl,const>
global XK_dead_belowcomma: cint <cimport,nodecl,const>
global XK_dead_currency: cint <cimport,nodecl,const>
global XK_dead_lowline: cint <cimport,nodecl,const>
global XK_dead_aboveverticalline: cint <cimport,nodecl,const>
global XK_dead_belowverticalline: cint <cimport,nodecl,const>
global XK_dead_longsolidusoverlay: cint <cimport,nodecl,const>
global XK_dead_a: cint <cimport,nodecl,const>
global XK_dead_A: cint <cimport,nodecl,const>
global XK_dead_e: cint <cimport,nodecl,const>
global XK_dead_E: cint <cimport,nodecl,const>
global XK_dead_i: cint <cimport,nodecl,const>
global XK_dead_I: cint <cimport,nodecl,const>
global XK_dead_o: cint <cimport,nodecl,const>
global XK_dead_O: cint <cimport,nodecl,const>
global XK_dead_u: cint <cimport,nodecl,const>
global XK_dead_U: cint <cimport,nodecl,const>
global XK_dead_small_schwa: cint <cimport,nodecl,const>
global XK_dead_capital_schwa: cint <cimport,nodecl,const>
global XK_dead_greek: cint <cimport,nodecl,const>
global XK_First_Virtual_Screen: cint <cimport,nodecl,const>
global XK_Prev_Virtual_Screen: cint <cimport,nodecl,const>
global XK_Next_Virtual_Screen: cint <cimport,nodecl,const>
global XK_Last_Virtual_Screen: cint <cimport,nodecl,const>
global XK_Terminate_Server: cint <cimport,nodecl,const>
global XK_AccessX_Enable: cint <cimport,nodecl,const>
global XK_AccessX_Feedback_Enable: cint <cimport,nodecl,const>
global XK_RepeatKeys_Enable: cint <cimport,nodecl,const>
global XK_SlowKeys_Enable: cint <cimport,nodecl,const>
global XK_BounceKeys_Enable: cint <cimport,nodecl,const>
global XK_StickyKeys_Enable: cint <cimport,nodecl,const>
global XK_MouseKeys_Enable: cint <cimport,nodecl,const>
global XK_MouseKeys_Accel_Enable: cint <cimport,nodecl,const>
global XK_Overlay1_Enable: cint <cimport,nodecl,const>
global XK_Overlay2_Enable: cint <cimport,nodecl,const>
global XK_AudibleBell_Enable: cint <cimport,nodecl,const>
global XK_Pointer_Left: cint <cimport,nodecl,const>
global XK_Pointer_Right: cint <cimport,nodecl,const>
global XK_Pointer_Up: cint <cimport,nodecl,const>
global XK_Pointer_Down: cint <cimport,nodecl,const>
global XK_Pointer_UpLeft: cint <cimport,nodecl,const>
global XK_Pointer_UpRight: cint <cimport,nodecl,const>
global XK_Pointer_DownLeft: cint <cimport,nodecl,const>
global XK_Pointer_DownRight: cint <cimport,nodecl,const>
global XK_Pointer_Button_Dflt: cint <cimport,nodecl,const>
global XK_Pointer_Button1: cint <cimport,nodecl,const>
global XK_Pointer_Button2: cint <cimport,nodecl,const>
global XK_Pointer_Button3: cint <cimport,nodecl,const>
global XK_Pointer_Button4: cint <cimport,nodecl,const>
global XK_Pointer_Button5: cint <cimport,nodecl,const>
global XK_Pointer_DblClick_Dflt: cint <cimport,nodecl,const>
global XK_Pointer_DblClick1: cint <cimport,nodecl,const>
global XK_Pointer_DblClick2: cint <cimport,nodecl,const>
global XK_Pointer_DblClick3: cint <cimport,nodecl,const>
global XK_Pointer_DblClick4: cint <cimport,nodecl,const>
global XK_Pointer_DblClick5: cint <cimport,nodecl,const>
global XK_Pointer_Drag_Dflt: cint <cimport,nodecl,const>
global XK_Pointer_Drag1: cint <cimport,nodecl,const>
global XK_Pointer_Drag2: cint <cimport,nodecl,const>
global XK_Pointer_Drag3: cint <cimport,nodecl,const>
global XK_Pointer_Drag4: cint <cimport,nodecl,const>
global XK_Pointer_Drag5: cint <cimport,nodecl,const>
global XK_Pointer_EnableKeys: cint <cimport,nodecl,const>
global XK_Pointer_Accelerate: cint <cimport,nodecl,const>
global XK_Pointer_DfltBtnNext: cint <cimport,nodecl,const>
global XK_Pointer_DfltBtnPrev: cint <cimport,nodecl,const>
global XK_ch: cint <cimport,nodecl,const>
global XK_Ch: cint <cimport,nodecl,const>
global XK_CH: cint <cimport,nodecl,const>
global XK_c_h: cint <cimport,nodecl,const>
global XK_C_h: cint <cimport,nodecl,const>
global XK_C_H: cint <cimport,nodecl,const>
global XK_space: cint <cimport,nodecl,const>
global XK_exclam: cint <cimport,nodecl,const>
global XK_quotedbl: cint <cimport,nodecl,const>
global XK_numbersign: cint <cimport,nodecl,const>
global XK_dollar: cint <cimport,nodecl,const>
global XK_percent: cint <cimport,nodecl,const>
global XK_ampersand: cint <cimport,nodecl,const>
global XK_apostrophe: cint <cimport,nodecl,const>
global XK_quoteright: cint <cimport,nodecl,const>
global XK_parenleft: cint <cimport,nodecl,const>
global XK_parenright: cint <cimport,nodecl,const>
global XK_asterisk: cint <cimport,nodecl,const>
global XK_plus: cint <cimport,nodecl,const>
global XK_comma: cint <cimport,nodecl,const>
global XK_minus: cint <cimport,nodecl,const>
global XK_period: cint <cimport,nodecl,const>
global XK_slash: cint <cimport,nodecl,const>
global XK_0: cint <cimport,nodecl,const>
global XK_1: cint <cimport,nodecl,const>
global XK_2: cint <cimport,nodecl,const>
global XK_3: cint <cimport,nodecl,const>
global XK_4: cint <cimport,nodecl,const>
global XK_5: cint <cimport,nodecl,const>
global XK_6: cint <cimport,nodecl,const>
global XK_7: cint <cimport,nodecl,const>
global XK_8: cint <cimport,nodecl,const>
global XK_9: cint <cimport,nodecl,const>
global XK_colon: cint <cimport,nodecl,const>
global XK_semicolon: cint <cimport,nodecl,const>
global XK_less: cint <cimport,nodecl,const>
global XK_equal: cint <cimport,nodecl,const>
global XK_greater: cint <cimport,nodecl,const>
global XK_question: cint <cimport,nodecl,const>
global XK_at: cint <cimport,nodecl,const>
global XK_A: cint <cimport,nodecl,const>
global XK_B: cint <cimport,nodecl,const>
global XK_C: cint <cimport,nodecl,const>
global XK_D: cint <cimport,nodecl,const>
global XK_E: cint <cimport,nodecl,const>
global XK_F: cint <cimport,nodecl,const>
global XK_G: cint <cimport,nodecl,const>
global XK_H: cint <cimport,nodecl,const>
global XK_I: cint <cimport,nodecl,const>
global XK_J: cint <cimport,nodecl,const>
global XK_K: cint <cimport,nodecl,const>
global XK_L: cint <cimport,nodecl,const>
global XK_M: cint <cimport,nodecl,const>
global XK_N: cint <cimport,nodecl,const>
global XK_O: cint <cimport,nodecl,const>
global XK_P: cint <cimport,nodecl,const>
global XK_Q: cint <cimport,nodecl,const>
global XK_R: cint <cimport,nodecl,const>
global XK_S: cint <cimport,nodecl,const>
global XK_T: cint <cimport,nodecl,const>
global XK_U: cint <cimport,nodecl,const>
global XK_V: cint <cimport,nodecl,const>
global XK_W: cint <cimport,nodecl,const>
global XK_X: cint <cimport,nodecl,const>
global XK_Y: cint <cimport,nodecl,const>
global XK_Z: cint <cimport,nodecl,const>
global XK_bracketleft: cint <cimport,nodecl,const>
global XK_backslash: cint <cimport,nodecl,const>
global XK_bracketright: cint <cimport,nodecl,const>
global XK_asciicircum: cint <cimport,nodecl,const>
global XK_underscore: cint <cimport,nodecl,const>
global XK_grave: cint <cimport,nodecl,const>
global XK_quoteleft: cint <cimport,nodecl,const>
global XK_a: cint <cimport,nodecl,const>
global XK_b: cint <cimport,nodecl,const>
global XK_c: cint <cimport,nodecl,const>
global XK_d: cint <cimport,nodecl,const>
global XK_e: cint <cimport,nodecl,const>
global XK_f: cint <cimport,nodecl,const>
global XK_g: cint <cimport,nodecl,const>
global XK_h: cint <cimport,nodecl,const>
global XK_i: cint <cimport,nodecl,const>
global XK_j: cint <cimport,nodecl,const>
global XK_k: cint <cimport,nodecl,const>
global XK_l: cint <cimport,nodecl,const>
global XK_m: cint <cimport,nodecl,const>
global XK_n: cint <cimport,nodecl,const>
global XK_o: cint <cimport,nodecl,const>
global XK_p: cint <cimport,nodecl,const>
global XK_q: cint <cimport,nodecl,const>
global XK_r: cint <cimport,nodecl,const>
global XK_s: cint <cimport,nodecl,const>
global XK_t: cint <cimport,nodecl,const>
global XK_u: cint <cimport,nodecl,const>
global XK_v: cint <cimport,nodecl,const>
global XK_w: cint <cimport,nodecl,const>
global XK_x: cint <cimport,nodecl,const>
global XK_y: cint <cimport,nodecl,const>
global XK_z: cint <cimport,nodecl,const>
global XK_braceleft: cint <cimport,nodecl,const>
global XK_bar: cint <cimport,nodecl,const>
global XK_braceright: cint <cimport,nodecl,const>
global XK_asciitilde: cint <cimport,nodecl,const>
global XK_nobreakspace: cint <cimport,nodecl,const>
global XK_exclamdown: cint <cimport,nodecl,const>
global XK_cent: cint <cimport,nodecl,const>
global XK_sterling: cint <cimport,nodecl,const>
global XK_currency: cint <cimport,nodecl,const>
global XK_yen: cint <cimport,nodecl,const>
global XK_brokenbar: cint <cimport,nodecl,const>
global XK_section: cint <cimport,nodecl,const>
global XK_diaeresis: cint <cimport,nodecl,const>
global XK_copyright: cint <cimport,nodecl,const>
global XK_ordfeminine: cint <cimport,nodecl,const>
global XK_guillemotleft: cint <cimport,nodecl,const>
global XK_notsign: cint <cimport,nodecl,const>
global XK_hyphen: cint <cimport,nodecl,const>
global XK_registered: cint <cimport,nodecl,const>
global XK_macron: cint <cimport,nodecl,const>
global XK_degree: cint <cimport,nodecl,const>
global XK_plusminus: cint <cimport,nodecl,const>
global XK_twosuperior: cint <cimport,nodecl,const>
global XK_threesuperior: cint <cimport,nodecl,const>
global XK_acute: cint <cimport,nodecl,const>
global XK_mu: cint <cimport,nodecl,const>
global XK_paragraph: cint <cimport,nodecl,const>
global XK_periodcentered: cint <cimport,nodecl,const>
global XK_cedilla: cint <cimport,nodecl,const>
global XK_onesuperior: cint <cimport,nodecl,const>
global XK_masculine: cint <cimport,nodecl,const>
global XK_guillemotright: cint <cimport,nodecl,const>
global XK_onequarter: cint <cimport,nodecl,const>
global XK_onehalf: cint <cimport,nodecl,const>
global XK_threequarters: cint <cimport,nodecl,const>
global XK_questiondown: cint <cimport,nodecl,const>
global XK_Agrave: cint <cimport,nodecl,const>
global XK_Aacute: cint <cimport,nodecl,const>
global XK_Acircumflex: cint <cimport,nodecl,const>
global XK_Atilde: cint <cimport,nodecl,const>
global XK_Adiaeresis: cint <cimport,nodecl,const>
global XK_Aring: cint <cimport,nodecl,const>
global XK_AE: cint <cimport,nodecl,const>
global XK_Ccedilla: cint <cimport,nodecl,const>
global XK_Egrave: cint <cimport,nodecl,const>
global XK_Eacute: cint <cimport,nodecl,const>
global XK_Ecircumflex: cint <cimport,nodecl,const>
global XK_Ediaeresis: cint <cimport,nodecl,const>
global XK_Igrave: cint <cimport,nodecl,const>
global XK_Iacute: cint <cimport,nodecl,const>
global XK_Icircumflex: cint <cimport,nodecl,const>
global XK_Idiaeresis: cint <cimport,nodecl,const>
global XK_ETH: cint <cimport,nodecl,const>
global XK_Eth: cint <cimport,nodecl,const>
global XK_Ntilde: cint <cimport,nodecl,const>
global XK_Ograve: cint <cimport,nodecl,const>
global XK_Oacute: cint <cimport,nodecl,const>
global XK_Ocircumflex: cint <cimport,nodecl,const>
global XK_Otilde: cint <cimport,nodecl,const>
global XK_Odiaeresis: cint <cimport,nodecl,const>
global XK_multiply: cint <cimport,nodecl,const>
global XK_Oslash: cint <cimport,nodecl,const>
global XK_Ooblique: cint <cimport,nodecl,const>
global XK_Ugrave: cint <cimport,nodecl,const>
global XK_Uacute: cint <cimport,nodecl,const>
global XK_Ucircumflex: cint <cimport,nodecl,const>
global XK_Udiaeresis: cint <cimport,nodecl,const>
global XK_Yacute: cint <cimport,nodecl,const>
global XK_THORN: cint <cimport,nodecl,const>
global XK_Thorn: cint <cimport,nodecl,const>
global XK_ssharp: cint <cimport,nodecl,const>
global XK_agrave: cint <cimport,nodecl,const>
global XK_aacute: cint <cimport,nodecl,const>
global XK_acircumflex: cint <cimport,nodecl,const>
global XK_atilde: cint <cimport,nodecl,const>
global XK_adiaeresis: cint <cimport,nodecl,const>
global XK_aring: cint <cimport,nodecl,const>
global XK_ae: cint <cimport,nodecl,const>
global XK_ccedilla: cint <cimport,nodecl,const>
global XK_egrave: cint <cimport,nodecl,const>
global XK_eacute: cint <cimport,nodecl,const>
global XK_ecircumflex: cint <cimport,nodecl,const>
global XK_ediaeresis: cint <cimport,nodecl,const>
global XK_igrave: cint <cimport,nodecl,const>
global XK_iacute: cint <cimport,nodecl,const>
global XK_icircumflex: cint <cimport,nodecl,const>
global XK_idiaeresis: cint <cimport,nodecl,const>
global XK_eth: cint <cimport,nodecl,const>
global XK_ntilde: cint <cimport,nodecl,const>
global XK_ograve: cint <cimport,nodecl,const>
global XK_oacute: cint <cimport,nodecl,const>
global XK_ocircumflex: cint <cimport,nodecl,const>
global XK_otilde: cint <cimport,nodecl,const>
global XK_odiaeresis: cint <cimport,nodecl,const>
global XK_division: cint <cimport,nodecl,const>
global XK_oslash: cint <cimport,nodecl,const>
global XK_ooblique: cint <cimport,nodecl,const>
global XK_ugrave: cint <cimport,nodecl,const>
global XK_uacute: cint <cimport,nodecl,const>
global XK_ucircumflex: cint <cimport,nodecl,const>
global XK_udiaeresis: cint <cimport,nodecl,const>
global XK_yacute: cint <cimport,nodecl,const>
global XK_thorn: cint <cimport,nodecl,const>
global XK_ydiaeresis: cint <cimport,nodecl,const>
global XK_Aogonek: cint <cimport,nodecl,const>
global XK_breve: cint <cimport,nodecl,const>
global XK_Lstroke: cint <cimport,nodecl,const>
global XK_Lcaron: cint <cimport,nodecl,const>
global XK_Sacute: cint <cimport,nodecl,const>
global XK_Scaron: cint <cimport,nodecl,const>
global XK_Scedilla: cint <cimport,nodecl,const>
global XK_Tcaron: cint <cimport,nodecl,const>
global XK_Zacute: cint <cimport,nodecl,const>
global XK_Zcaron: cint <cimport,nodecl,const>
global XK_Zabovedot: cint <cimport,nodecl,const>
global XK_aogonek: cint <cimport,nodecl,const>
global XK_ogonek: cint <cimport,nodecl,const>
global XK_lstroke: cint <cimport,nodecl,const>
global XK_lcaron: cint <cimport,nodecl,const>
global XK_sacute: cint <cimport,nodecl,const>
global XK_caron: cint <cimport,nodecl,const>
global XK_scaron: cint <cimport,nodecl,const>
global XK_scedilla: cint <cimport,nodecl,const>
global XK_tcaron: cint <cimport,nodecl,const>
global XK_zacute: cint <cimport,nodecl,const>
global XK_doubleacute: cint <cimport,nodecl,const>
global XK_zcaron: cint <cimport,nodecl,const>
global XK_zabovedot: cint <cimport,nodecl,const>
global XK_Racute: cint <cimport,nodecl,const>
global XK_Abreve: cint <cimport,nodecl,const>
global XK_Lacute: cint <cimport,nodecl,const>
global XK_Cacute: cint <cimport,nodecl,const>
global XK_Ccaron: cint <cimport,nodecl,const>
global XK_Eogonek: cint <cimport,nodecl,const>
global XK_Ecaron: cint <cimport,nodecl,const>
global XK_Dcaron: cint <cimport,nodecl,const>
global XK_Dstroke: cint <cimport,nodecl,const>
global XK_Nacute: cint <cimport,nodecl,const>
global XK_Ncaron: cint <cimport,nodecl,const>
global XK_Odoubleacute: cint <cimport,nodecl,const>
global XK_Rcaron: cint <cimport,nodecl,const>
global XK_Uring: cint <cimport,nodecl,const>
global XK_Udoubleacute: cint <cimport,nodecl,const>
global XK_Tcedilla: cint <cimport,nodecl,const>
global XK_racute: cint <cimport,nodecl,const>
global XK_abreve: cint <cimport,nodecl,const>
global XK_lacute: cint <cimport,nodecl,const>
global XK_cacute: cint <cimport,nodecl,const>
global XK_ccaron: cint <cimport,nodecl,const>
global XK_eogonek: cint <cimport,nodecl,const>
global XK_ecaron: cint <cimport,nodecl,const>
global XK_dcaron: cint <cimport,nodecl,const>
global XK_dstroke: cint <cimport,nodecl,const>
global XK_nacute: cint <cimport,nodecl,const>
global XK_ncaron: cint <cimport,nodecl,const>
global XK_odoubleacute: cint <cimport,nodecl,const>
global XK_rcaron: cint <cimport,nodecl,const>
global XK_uring: cint <cimport,nodecl,const>
global XK_udoubleacute: cint <cimport,nodecl,const>
global XK_tcedilla: cint <cimport,nodecl,const>
global XK_abovedot: cint <cimport,nodecl,const>
global XK_Hstroke: cint <cimport,nodecl,const>
global XK_Hcircumflex: cint <cimport,nodecl,const>
global XK_Iabovedot: cint <cimport,nodecl,const>
global XK_Gbreve: cint <cimport,nodecl,const>
global XK_Jcircumflex: cint <cimport,nodecl,const>
global XK_hstroke: cint <cimport,nodecl,const>
global XK_hcircumflex: cint <cimport,nodecl,const>
global XK_idotless: cint <cimport,nodecl,const>
global XK_gbreve: cint <cimport,nodecl,const>
global XK_jcircumflex: cint <cimport,nodecl,const>
global XK_Cabovedot: cint <cimport,nodecl,const>
global XK_Ccircumflex: cint <cimport,nodecl,const>
global XK_Gabovedot: cint <cimport,nodecl,const>
global XK_Gcircumflex: cint <cimport,nodecl,const>
global XK_Ubreve: cint <cimport,nodecl,const>
global XK_Scircumflex: cint <cimport,nodecl,const>
global XK_cabovedot: cint <cimport,nodecl,const>
global XK_ccircumflex: cint <cimport,nodecl,const>
global XK_gabovedot: cint <cimport,nodecl,const>
global XK_gcircumflex: cint <cimport,nodecl,const>
global XK_ubreve: cint <cimport,nodecl,const>
global XK_scircumflex: cint <cimport,nodecl,const>
global XK_kra: cint <cimport,nodecl,const>
global XK_kappa: cint <cimport,nodecl,const>
global XK_Rcedilla: cint <cimport,nodecl,const>
global XK_Itilde: cint <cimport,nodecl,const>
global XK_Lcedilla: cint <cimport,nodecl,const>
global XK_Emacron: cint <cimport,nodecl,const>
global XK_Gcedilla: cint <cimport,nodecl,const>
global XK_Tslash: cint <cimport,nodecl,const>
global XK_rcedilla: cint <cimport,nodecl,const>
global XK_itilde: cint <cimport,nodecl,const>
global XK_lcedilla: cint <cimport,nodecl,const>
global XK_emacron: cint <cimport,nodecl,const>
global XK_gcedilla: cint <cimport,nodecl,const>
global XK_tslash: cint <cimport,nodecl,const>
global XK_ENG: cint <cimport,nodecl,const>
global XK_eng: cint <cimport,nodecl,const>
global XK_Amacron: cint <cimport,nodecl,const>
global XK_Iogonek: cint <cimport,nodecl,const>
global XK_Eabovedot: cint <cimport,nodecl,const>
global XK_Imacron: cint <cimport,nodecl,const>
global XK_Ncedilla: cint <cimport,nodecl,const>
global XK_Omacron: cint <cimport,nodecl,const>
global XK_Kcedilla: cint <cimport,nodecl,const>
global XK_Uogonek: cint <cimport,nodecl,const>
global XK_Utilde: cint <cimport,nodecl,const>
global XK_Umacron: cint <cimport,nodecl,const>
global XK_amacron: cint <cimport,nodecl,const>
global XK_iogonek: cint <cimport,nodecl,const>
global XK_eabovedot: cint <cimport,nodecl,const>
global XK_imacron: cint <cimport,nodecl,const>
global XK_ncedilla: cint <cimport,nodecl,const>
global XK_omacron: cint <cimport,nodecl,const>
global XK_kcedilla: cint <cimport,nodecl,const>
global XK_uogonek: cint <cimport,nodecl,const>
global XK_utilde: cint <cimport,nodecl,const>
global XK_umacron: cint <cimport,nodecl,const>
global XK_Wcircumflex: cint <cimport,nodecl,const>
global XK_wcircumflex: cint <cimport,nodecl,const>
global XK_Ycircumflex: cint <cimport,nodecl,const>
global XK_ycircumflex: cint <cimport,nodecl,const>
global XK_Babovedot: cint <cimport,nodecl,const>
global XK_babovedot: cint <cimport,nodecl,const>
global XK_Dabovedot: cint <cimport,nodecl,const>
global XK_dabovedot: cint <cimport,nodecl,const>
global XK_Fabovedot: cint <cimport,nodecl,const>
global XK_fabovedot: cint <cimport,nodecl,const>
global XK_Mabovedot: cint <cimport,nodecl,const>
global XK_mabovedot: cint <cimport,nodecl,const>
global XK_Pabovedot: cint <cimport,nodecl,const>
global XK_pabovedot: cint <cimport,nodecl,const>
global XK_Sabovedot: cint <cimport,nodecl,const>
global XK_sabovedot: cint <cimport,nodecl,const>
global XK_Tabovedot: cint <cimport,nodecl,const>
global XK_tabovedot: cint <cimport,nodecl,const>
global XK_Wgrave: cint <cimport,nodecl,const>
global XK_wgrave: cint <cimport,nodecl,const>
global XK_Wacute: cint <cimport,nodecl,const>
global XK_wacute: cint <cimport,nodecl,const>
global XK_Wdiaeresis: cint <cimport,nodecl,const>
global XK_wdiaeresis: cint <cimport,nodecl,const>
global XK_Ygrave: cint <cimport,nodecl,const>
global XK_ygrave: cint <cimport,nodecl,const>
global XK_OE: cint <cimport,nodecl,const>
global XK_oe: cint <cimport,nodecl,const>
global XK_Ydiaeresis: cint <cimport,nodecl,const>
global XK_overline: cint <cimport,nodecl,const>
global XK_kana_fullstop: cint <cimport,nodecl,const>
global XK_kana_openingbracket: cint <cimport,nodecl,const>
global XK_kana_closingbracket: cint <cimport,nodecl,const>
global XK_kana_comma: cint <cimport,nodecl,const>
global XK_kana_conjunctive: cint <cimport,nodecl,const>
global XK_kana_middledot: cint <cimport,nodecl,const>
global XK_kana_WO: cint <cimport,nodecl,const>
global XK_kana_a: cint <cimport,nodecl,const>
global XK_kana_i: cint <cimport,nodecl,const>
global XK_kana_u: cint <cimport,nodecl,const>
global XK_kana_e: cint <cimport,nodecl,const>
global XK_kana_o: cint <cimport,nodecl,const>
global XK_kana_ya: cint <cimport,nodecl,const>
global XK_kana_yu: cint <cimport,nodecl,const>
global XK_kana_yo: cint <cimport,nodecl,const>
global XK_kana_tsu: cint <cimport,nodecl,const>
global XK_kana_tu: cint <cimport,nodecl,const>
global XK_prolongedsound: cint <cimport,nodecl,const>
global XK_kana_A: cint <cimport,nodecl,const>
global XK_kana_I: cint <cimport,nodecl,const>
global XK_kana_U: cint <cimport,nodecl,const>
global XK_kana_E: cint <cimport,nodecl,const>
global XK_kana_O: cint <cimport,nodecl,const>
global XK_kana_KA: cint <cimport,nodecl,const>
global XK_kana_KI: cint <cimport,nodecl,const>
global XK_kana_KU: cint <cimport,nodecl,const>
global XK_kana_KE: cint <cimport,nodecl,const>
global XK_kana_KO: cint <cimport,nodecl,const>
global XK_kana_SA: cint <cimport,nodecl,const>
global XK_kana_SHI: cint <cimport,nodecl,const>
global XK_kana_SU: cint <cimport,nodecl,const>
global XK_kana_SE: cint <cimport,nodecl,const>
global XK_kana_SO: cint <cimport,nodecl,const>
global XK_kana_TA: cint <cimport,nodecl,const>
global XK_kana_CHI: cint <cimport,nodecl,const>
global XK_kana_TI: cint <cimport,nodecl,const>
global XK_kana_TSU: cint <cimport,nodecl,const>
global XK_kana_TU: cint <cimport,nodecl,const>
global XK_kana_TE: cint <cimport,nodecl,const>
global XK_kana_TO: cint <cimport,nodecl,const>
global XK_kana_NA: cint <cimport,nodecl,const>
global XK_kana_NI: cint <cimport,nodecl,const>
global XK_kana_NU: cint <cimport,nodecl,const>
global XK_kana_NE: cint <cimport,nodecl,const>
global XK_kana_NO: cint <cimport,nodecl,const>
global XK_kana_HA: cint <cimport,nodecl,const>
global XK_kana_HI: cint <cimport,nodecl,const>
global XK_kana_FU: cint <cimport,nodecl,const>
global XK_kana_HU: cint <cimport,nodecl,const>
global XK_kana_HE: cint <cimport,nodecl,const>
global XK_kana_HO: cint <cimport,nodecl,const>
global XK_kana_MA: cint <cimport,nodecl,const>
global XK_kana_MI: cint <cimport,nodecl,const>
global XK_kana_MU: cint <cimport,nodecl,const>
global XK_kana_ME: cint <cimport,nodecl,const>
global XK_kana_MO: cint <cimport,nodecl,const>
global XK_kana_YA: cint <cimport,nodecl,const>
global XK_kana_YU: cint <cimport,nodecl,const>
global XK_kana_YO: cint <cimport,nodecl,const>
global XK_kana_RA: cint <cimport,nodecl,const>
global XK_kana_RI: cint <cimport,nodecl,const>
global XK_kana_RU: cint <cimport,nodecl,const>
global XK_kana_RE: cint <cimport,nodecl,const>
global XK_kana_RO: cint <cimport,nodecl,const>
global XK_kana_WA: cint <cimport,nodecl,const>
global XK_kana_N: cint <cimport,nodecl,const>
global XK_voicedsound: cint <cimport,nodecl,const>
global XK_semivoicedsound: cint <cimport,nodecl,const>
global XK_kana_switch: cint <cimport,nodecl,const>
global XK_Farsi_0: cint <cimport,nodecl,const>
global XK_Farsi_1: cint <cimport,nodecl,const>
global XK_Farsi_2: cint <cimport,nodecl,const>
global XK_Farsi_3: cint <cimport,nodecl,const>
global XK_Farsi_4: cint <cimport,nodecl,const>
global XK_Farsi_5: cint <cimport,nodecl,const>
global XK_Farsi_6: cint <cimport,nodecl,const>
global XK_Farsi_7: cint <cimport,nodecl,const>
global XK_Farsi_8: cint <cimport,nodecl,const>
global XK_Farsi_9: cint <cimport,nodecl,const>
global XK_Arabic_percent: cint <cimport,nodecl,const>
global XK_Arabic_superscript_alef: cint <cimport,nodecl,const>
global XK_Arabic_tteh: cint <cimport,nodecl,const>
global XK_Arabic_peh: cint <cimport,nodecl,const>
global XK_Arabic_tcheh: cint <cimport,nodecl,const>
global XK_Arabic_ddal: cint <cimport,nodecl,const>
global XK_Arabic_rreh: cint <cimport,nodecl,const>
global XK_Arabic_comma: cint <cimport,nodecl,const>
global XK_Arabic_fullstop: cint <cimport,nodecl,const>
global XK_Arabic_0: cint <cimport,nodecl,const>
global XK_Arabic_1: cint <cimport,nodecl,const>
global XK_Arabic_2: cint <cimport,nodecl,const>
global XK_Arabic_3: cint <cimport,nodecl,const>
global XK_Arabic_4: cint <cimport,nodecl,const>
global XK_Arabic_5: cint <cimport,nodecl,const>
global XK_Arabic_6: cint <cimport,nodecl,const>
global XK_Arabic_7: cint <cimport,nodecl,const>
global XK_Arabic_8: cint <cimport,nodecl,const>
global XK_Arabic_9: cint <cimport,nodecl,const>
global XK_Arabic_semicolon: cint <cimport,nodecl,const>
global XK_Arabic_question_mark: cint <cimport,nodecl,const>
global XK_Arabic_hamza: cint <cimport,nodecl,const>
global XK_Arabic_maddaonalef: cint <cimport,nodecl,const>
global XK_Arabic_hamzaonalef: cint <cimport,nodecl,const>
global XK_Arabic_hamzaonwaw: cint <cimport,nodecl,const>
global XK_Arabic_hamzaunderalef: cint <cimport,nodecl,const>
global XK_Arabic_hamzaonyeh: cint <cimport,nodecl,const>
global XK_Arabic_alef: cint <cimport,nodecl,const>
global XK_Arabic_beh: cint <cimport,nodecl,const>
global XK_Arabic_tehmarbuta: cint <cimport,nodecl,const>
global XK_Arabic_teh: cint <cimport,nodecl,const>
global XK_Arabic_theh: cint <cimport,nodecl,const>
global XK_Arabic_jeem: cint <cimport,nodecl,const>
global XK_Arabic_hah: cint <cimport,nodecl,const>
global XK_Arabic_khah: cint <cimport,nodecl,const>
global XK_Arabic_dal: cint <cimport,nodecl,const>
global XK_Arabic_thal: cint <cimport,nodecl,const>
global XK_Arabic_ra: cint <cimport,nodecl,const>
global XK_Arabic_zain: cint <cimport,nodecl,const>
global XK_Arabic_seen: cint <cimport,nodecl,const>
global XK_Arabic_sheen: cint <cimport,nodecl,const>
global XK_Arabic_sad: cint <cimport,nodecl,const>
global XK_Arabic_dad: cint <cimport,nodecl,const>
global XK_Arabic_tah: cint <cimport,nodecl,const>
global XK_Arabic_zah: cint <cimport,nodecl,const>
global XK_Arabic_ain: cint <cimport,nodecl,const>
global XK_Arabic_ghain: cint <cimport,nodecl,const>
global XK_Arabic_tatweel: cint <cimport,nodecl,const>
global XK_Arabic_feh: cint <cimport,nodecl,const>
global XK_Arabic_qaf: cint <cimport,nodecl,const>
global XK_Arabic_kaf: cint <cimport,nodecl,const>
global XK_Arabic_lam: cint <cimport,nodecl,const>
global XK_Arabic_meem: cint <cimport,nodecl,const>
global XK_Arabic_noon: cint <cimport,nodecl,const>
global XK_Arabic_ha: cint <cimport,nodecl,const>
global XK_Arabic_heh: cint <cimport,nodecl,const>
global XK_Arabic_waw: cint <cimport,nodecl,const>
global XK_Arabic_alefmaksura: cint <cimport,nodecl,const>
global XK_Arabic_yeh: cint <cimport,nodecl,const>
global XK_Arabic_fathatan: cint <cimport,nodecl,const>
global XK_Arabic_dammatan: cint <cimport,nodecl,const>
global XK_Arabic_kasratan: cint <cimport,nodecl,const>
global XK_Arabic_fatha: cint <cimport,nodecl,const>
global XK_Arabic_damma: cint <cimport,nodecl,const>
global XK_Arabic_kasra: cint <cimport,nodecl,const>
global XK_Arabic_shadda: cint <cimport,nodecl,const>
global XK_Arabic_sukun: cint <cimport,nodecl,const>
global XK_Arabic_madda_above: cint <cimport,nodecl,const>
global XK_Arabic_hamza_above: cint <cimport,nodecl,const>
global XK_Arabic_hamza_below: cint <cimport,nodecl,const>
global XK_Arabic_jeh: cint <cimport,nodecl,const>
global XK_Arabic_veh: cint <cimport,nodecl,const>
global XK_Arabic_keheh: cint <cimport,nodecl,const>
global XK_Arabic_gaf: cint <cimport,nodecl,const>
global XK_Arabic_noon_ghunna: cint <cimport,nodecl,const>
global XK_Arabic_heh_doachashmee: cint <cimport,nodecl,const>
global XK_Farsi_yeh: cint <cimport,nodecl,const>
global XK_Arabic_farsi_yeh: cint <cimport,nodecl,const>
global XK_Arabic_yeh_baree: cint <cimport,nodecl,const>
global XK_Arabic_heh_goal: cint <cimport,nodecl,const>
global XK_Arabic_switch: cint <cimport,nodecl,const>
global XK_Cyrillic_GHE_bar: cint <cimport,nodecl,const>
global XK_Cyrillic_ghe_bar: cint <cimport,nodecl,const>
global XK_Cyrillic_ZHE_descender: cint <cimport,nodecl,const>
global XK_Cyrillic_zhe_descender: cint <cimport,nodecl,const>
global XK_Cyrillic_KA_descender: cint <cimport,nodecl,const>
global XK_Cyrillic_ka_descender: cint <cimport,nodecl,const>
global XK_Cyrillic_KA_vertstroke: cint <cimport,nodecl,const>
global XK_Cyrillic_ka_vertstroke: cint <cimport,nodecl,const>
global XK_Cyrillic_EN_descender: cint <cimport,nodecl,const>
global XK_Cyrillic_en_descender: cint <cimport,nodecl,const>
global XK_Cyrillic_U_straight: cint <cimport,nodecl,const>
global XK_Cyrillic_u_straight: cint <cimport,nodecl,const>
global XK_Cyrillic_U_straight_bar: cint <cimport,nodecl,const>
global XK_Cyrillic_u_straight_bar: cint <cimport,nodecl,const>
global XK_Cyrillic_HA_descender: cint <cimport,nodecl,const>
global XK_Cyrillic_ha_descender: cint <cimport,nodecl,const>
global XK_Cyrillic_CHE_descender: cint <cimport,nodecl,const>
global XK_Cyrillic_che_descender: cint <cimport,nodecl,const>
global XK_Cyrillic_CHE_vertstroke: cint <cimport,nodecl,const>
global XK_Cyrillic_che_vertstroke: cint <cimport,nodecl,const>
global XK_Cyrillic_SHHA: cint <cimport,nodecl,const>
global XK_Cyrillic_shha: cint <cimport,nodecl,const>
global XK_Cyrillic_SCHWA: cint <cimport,nodecl,const>
global XK_Cyrillic_schwa: cint <cimport,nodecl,const>
global XK_Cyrillic_I_macron: cint <cimport,nodecl,const>
global XK_Cyrillic_i_macron: cint <cimport,nodecl,const>
global XK_Cyrillic_O_bar: cint <cimport,nodecl,const>
global XK_Cyrillic_o_bar: cint <cimport,nodecl,const>
global XK_Cyrillic_U_macron: cint <cimport,nodecl,const>
global XK_Cyrillic_u_macron: cint <cimport,nodecl,const>
global XK_Serbian_dje: cint <cimport,nodecl,const>
global XK_Macedonia_gje: cint <cimport,nodecl,const>
global XK_Cyrillic_io: cint <cimport,nodecl,const>
global XK_Ukrainian_ie: cint <cimport,nodecl,const>
global XK_Ukranian_je: cint <cimport,nodecl,const>
global XK_Macedonia_dse: cint <cimport,nodecl,const>
global XK_Ukrainian_i: cint <cimport,nodecl,const>
global XK_Ukranian_i: cint <cimport,nodecl,const>
global XK_Ukrainian_yi: cint <cimport,nodecl,const>
global XK_Ukranian_yi: cint <cimport,nodecl,const>
global XK_Cyrillic_je: cint <cimport,nodecl,const>
global XK_Serbian_je: cint <cimport,nodecl,const>
global XK_Cyrillic_lje: cint <cimport,nodecl,const>
global XK_Serbian_lje: cint <cimport,nodecl,const>
global XK_Cyrillic_nje: cint <cimport,nodecl,const>
global XK_Serbian_nje: cint <cimport,nodecl,const>
global XK_Serbian_tshe: cint <cimport,nodecl,const>
global XK_Macedonia_kje: cint <cimport,nodecl,const>
global XK_Ukrainian_ghe_with_upturn: cint <cimport,nodecl,const>
global XK_Byelorussian_shortu: cint <cimport,nodecl,const>
global XK_Cyrillic_dzhe: cint <cimport,nodecl,const>
global XK_Serbian_dze: cint <cimport,nodecl,const>
global XK_numerosign: cint <cimport,nodecl,const>
global XK_Serbian_DJE: cint <cimport,nodecl,const>
global XK_Macedonia_GJE: cint <cimport,nodecl,const>
global XK_Cyrillic_IO: cint <cimport,nodecl,const>
global XK_Ukrainian_IE: cint <cimport,nodecl,const>
global XK_Ukranian_JE: cint <cimport,nodecl,const>
global XK_Macedonia_DSE: cint <cimport,nodecl,const>
global XK_Ukrainian_I: cint <cimport,nodecl,const>
global XK_Ukranian_I: cint <cimport,nodecl,const>
global XK_Ukrainian_YI: cint <cimport,nodecl,const>
global XK_Ukranian_YI: cint <cimport,nodecl,const>
global XK_Cyrillic_JE: cint <cimport,nodecl,const>
global XK_Serbian_JE: cint <cimport,nodecl,const>
global XK_Cyrillic_LJE: cint <cimport,nodecl,const>
global XK_Serbian_LJE: cint <cimport,nodecl,const>
global XK_Cyrillic_NJE: cint <cimport,nodecl,const>
global XK_Serbian_NJE: cint <cimport,nodecl,const>
global XK_Serbian_TSHE: cint <cimport,nodecl,const>
global XK_Macedonia_KJE: cint <cimport,nodecl,const>
global XK_Ukrainian_GHE_WITH_UPTURN: cint <cimport,nodecl,const>
global XK_Byelorussian_SHORTU: cint <cimport,nodecl,const>
global XK_Cyrillic_DZHE: cint <cimport,nodecl,const>
global XK_Serbian_DZE: cint <cimport,nodecl,const>
global XK_Cyrillic_yu: cint <cimport,nodecl,const>
global XK_Cyrillic_a: cint <cimport,nodecl,const>
global XK_Cyrillic_be: cint <cimport,nodecl,const>
global XK_Cyrillic_tse: cint <cimport,nodecl,const>
global XK_Cyrillic_de: cint <cimport,nodecl,const>
global XK_Cyrillic_ie: cint <cimport,nodecl,const>
global XK_Cyrillic_ef: cint <cimport,nodecl,const>
global XK_Cyrillic_ghe: cint <cimport,nodecl,const>
global XK_Cyrillic_ha: cint <cimport,nodecl,const>
global XK_Cyrillic_i: cint <cimport,nodecl,const>
global XK_Cyrillic_shorti: cint <cimport,nodecl,const>
global XK_Cyrillic_ka: cint <cimport,nodecl,const>
global XK_Cyrillic_el: cint <cimport,nodecl,const>
global XK_Cyrillic_em: cint <cimport,nodecl,const>
global XK_Cyrillic_en: cint <cimport,nodecl,const>
global XK_Cyrillic_o: cint <cimport,nodecl,const>
global XK_Cyrillic_pe: cint <cimport,nodecl,const>
global XK_Cyrillic_ya: cint <cimport,nodecl,const>
global XK_Cyrillic_er: cint <cimport,nodecl,const>
global XK_Cyrillic_es: cint <cimport,nodecl,const>
global XK_Cyrillic_te: cint <cimport,nodecl,const>
global XK_Cyrillic_u: cint <cimport,nodecl,const>
global XK_Cyrillic_zhe: cint <cimport,nodecl,const>
global XK_Cyrillic_ve: cint <cimport,nodecl,const>
global XK_Cyrillic_softsign: cint <cimport,nodecl,const>
global XK_Cyrillic_yeru: cint <cimport,nodecl,const>
global XK_Cyrillic_ze: cint <cimport,nodecl,const>
global XK_Cyrillic_sha: cint <cimport,nodecl,const>
global XK_Cyrillic_e: cint <cimport,nodecl,const>
global XK_Cyrillic_shcha: cint <cimport,nodecl,const>
global XK_Cyrillic_che: cint <cimport,nodecl,const>
global XK_Cyrillic_hardsign: cint <cimport,nodecl,const>
global XK_Cyrillic_YU: cint <cimport,nodecl,const>
global XK_Cyrillic_A: cint <cimport,nodecl,const>
global XK_Cyrillic_BE: cint <cimport,nodecl,const>
global XK_Cyrillic_TSE: cint <cimport,nodecl,const>
global XK_Cyrillic_DE: cint <cimport,nodecl,const>
global XK_Cyrillic_IE: cint <cimport,nodecl,const>
global XK_Cyrillic_EF: cint <cimport,nodecl,const>
global XK_Cyrillic_GHE: cint <cimport,nodecl,const>
global XK_Cyrillic_HA: cint <cimport,nodecl,const>
global XK_Cyrillic_I: cint <cimport,nodecl,const>
global XK_Cyrillic_SHORTI: cint <cimport,nodecl,const>
global XK_Cyrillic_KA: cint <cimport,nodecl,const>
global XK_Cyrillic_EL: cint <cimport,nodecl,const>
global XK_Cyrillic_EM: cint <cimport,nodecl,const>
global XK_Cyrillic_EN: cint <cimport,nodecl,const>
global XK_Cyrillic_O: cint <cimport,nodecl,const>
global XK_Cyrillic_PE: cint <cimport,nodecl,const>
global XK_Cyrillic_YA: cint <cimport,nodecl,const>
global XK_Cyrillic_ER: cint <cimport,nodecl,const>
global XK_Cyrillic_ES: cint <cimport,nodecl,const>
global XK_Cyrillic_TE: cint <cimport,nodecl,const>
global XK_Cyrillic_U: cint <cimport,nodecl,const>
global XK_Cyrillic_ZHE: cint <cimport,nodecl,const>
global XK_Cyrillic_VE: cint <cimport,nodecl,const>
global XK_Cyrillic_SOFTSIGN: cint <cimport,nodecl,const>
global XK_Cyrillic_YERU: cint <cimport,nodecl,const>
global XK_Cyrillic_ZE: cint <cimport,nodecl,const>
global XK_Cyrillic_SHA: cint <cimport,nodecl,const>
global XK_Cyrillic_E: cint <cimport,nodecl,const>
global XK_Cyrillic_SHCHA: cint <cimport,nodecl,const>
global XK_Cyrillic_CHE: cint <cimport,nodecl,const>
global XK_Cyrillic_HARDSIGN: cint <cimport,nodecl,const>
global XK_Greek_ALPHAaccent: cint <cimport,nodecl,const>
global XK_Greek_EPSILONaccent: cint <cimport,nodecl,const>
global XK_Greek_ETAaccent: cint <cimport,nodecl,const>
global XK_Greek_IOTAaccent: cint <cimport,nodecl,const>
global XK_Greek_IOTAdieresis: cint <cimport,nodecl,const>
global XK_Greek_IOTAdiaeresis: cint <cimport,nodecl,const>
global XK_Greek_OMICRONaccent: cint <cimport,nodecl,const>
global XK_Greek_UPSILONaccent: cint <cimport,nodecl,const>
global XK_Greek_UPSILONdieresis: cint <cimport,nodecl,const>
global XK_Greek_OMEGAaccent: cint <cimport,nodecl,const>
global XK_Greek_accentdieresis: cint <cimport,nodecl,const>
global XK_Greek_horizbar: cint <cimport,nodecl,const>
global XK_Greek_alphaaccent: cint <cimport,nodecl,const>
global XK_Greek_epsilonaccent: cint <cimport,nodecl,const>
global XK_Greek_etaaccent: cint <cimport,nodecl,const>
global XK_Greek_iotaaccent: cint <cimport,nodecl,const>
global XK_Greek_iotadieresis: cint <cimport,nodecl,const>
global XK_Greek_iotaaccentdieresis: cint <cimport,nodecl,const>
global XK_Greek_omicronaccent: cint <cimport,nodecl,const>
global XK_Greek_upsilonaccent: cint <cimport,nodecl,const>
global XK_Greek_upsilondieresis: cint <cimport,nodecl,const>
global XK_Greek_upsilonaccentdieresis: cint <cimport,nodecl,const>
global XK_Greek_omegaaccent: cint <cimport,nodecl,const>
global XK_Greek_ALPHA: cint <cimport,nodecl,const>
global XK_Greek_BETA: cint <cimport,nodecl,const>
global XK_Greek_GAMMA: cint <cimport,nodecl,const>
global XK_Greek_DELTA: cint <cimport,nodecl,const>
global XK_Greek_EPSILON: cint <cimport,nodecl,const>
global XK_Greek_ZETA: cint <cimport,nodecl,const>
global XK_Greek_ETA: cint <cimport,nodecl,const>
global XK_Greek_THETA: cint <cimport,nodecl,const>
global XK_Greek_IOTA: cint <cimport,nodecl,const>
global XK_Greek_KAPPA: cint <cimport,nodecl,const>
global XK_Greek_LAMDA: cint <cimport,nodecl,const>
global XK_Greek_LAMBDA: cint <cimport,nodecl,const>
global XK_Greek_MU: cint <cimport,nodecl,const>
global XK_Greek_NU: cint <cimport,nodecl,const>
global XK_Greek_XI: cint <cimport,nodecl,const>
global XK_Greek_OMICRON: cint <cimport,nodecl,const>
global XK_Greek_PI: cint <cimport,nodecl,const>
global XK_Greek_RHO: cint <cimport,nodecl,const>
global XK_Greek_SIGMA: cint <cimport,nodecl,const>
global XK_Greek_TAU: cint <cimport,nodecl,const>
global XK_Greek_UPSILON: cint <cimport,nodecl,const>
global XK_Greek_PHI: cint <cimport,nodecl,const>
global XK_Greek_CHI: cint <cimport,nodecl,const>
global XK_Greek_PSI: cint <cimport,nodecl,const>
global XK_Greek_OMEGA: cint <cimport,nodecl,const>
global XK_Greek_alpha: cint <cimport,nodecl,const>
global XK_Greek_beta: cint <cimport,nodecl,const>
global XK_Greek_gamma: cint <cimport,nodecl,const>
global XK_Greek_delta: cint <cimport,nodecl,const>
global XK_Greek_epsilon: cint <cimport,nodecl,const>
global XK_Greek_zeta: cint <cimport,nodecl,const>
global XK_Greek_eta: cint <cimport,nodecl,const>
global XK_Greek_theta: cint <cimport,nodecl,const>
global XK_Greek_iota: cint <cimport,nodecl,const>
global XK_Greek_kappa: cint <cimport,nodecl,const>
global XK_Greek_lamda: cint <cimport,nodecl,const>
global XK_Greek_lambda: cint <cimport,nodecl,const>
global XK_Greek_mu: cint <cimport,nodecl,const>
global XK_Greek_nu: cint <cimport,nodecl,const>
global XK_Greek_xi: cint <cimport,nodecl,const>
global XK_Greek_omicron: cint <cimport,nodecl,const>
global XK_Greek_pi: cint <cimport,nodecl,const>
global XK_Greek_rho: cint <cimport,nodecl,const>
global XK_Greek_sigma: cint <cimport,nodecl,const>
global XK_Greek_finalsmallsigma: cint <cimport,nodecl,const>
global XK_Greek_tau: cint <cimport,nodecl,const>
global XK_Greek_upsilon: cint <cimport,nodecl,const>
global XK_Greek_phi: cint <cimport,nodecl,const>
global XK_Greek_chi: cint <cimport,nodecl,const>
global XK_Greek_psi: cint <cimport,nodecl,const>
global XK_Greek_omega: cint <cimport,nodecl,const>
global XK_Greek_switch: cint <cimport,nodecl,const>
global XK_hebrew_doublelowline: cint <cimport,nodecl,const>
global XK_hebrew_aleph: cint <cimport,nodecl,const>
global XK_hebrew_bet: cint <cimport,nodecl,const>
global XK_hebrew_beth: cint <cimport,nodecl,const>
global XK_hebrew_gimel: cint <cimport,nodecl,const>
global XK_hebrew_gimmel: cint <cimport,nodecl,const>
global XK_hebrew_dalet: cint <cimport,nodecl,const>
global XK_hebrew_daleth: cint <cimport,nodecl,const>
global XK_hebrew_he: cint <cimport,nodecl,const>
global XK_hebrew_waw: cint <cimport,nodecl,const>
global XK_hebrew_zain: cint <cimport,nodecl,const>
global XK_hebrew_zayin: cint <cimport,nodecl,const>
global XK_hebrew_chet: cint <cimport,nodecl,const>
global XK_hebrew_het: cint <cimport,nodecl,const>
global XK_hebrew_tet: cint <cimport,nodecl,const>
global XK_hebrew_teth: cint <cimport,nodecl,const>
global XK_hebrew_yod: cint <cimport,nodecl,const>
global XK_hebrew_finalkaph: cint <cimport,nodecl,const>
global XK_hebrew_kaph: cint <cimport,nodecl,const>
global XK_hebrew_lamed: cint <cimport,nodecl,const>
global XK_hebrew_finalmem: cint <cimport,nodecl,const>
global XK_hebrew_mem: cint <cimport,nodecl,const>
global XK_hebrew_finalnun: cint <cimport,nodecl,const>
global XK_hebrew_nun: cint <cimport,nodecl,const>
global XK_hebrew_samech: cint <cimport,nodecl,const>
global XK_hebrew_samekh: cint <cimport,nodecl,const>
global XK_hebrew_ayin: cint <cimport,nodecl,const>
global XK_hebrew_finalpe: cint <cimport,nodecl,const>
global XK_hebrew_pe: cint <cimport,nodecl,const>
global XK_hebrew_finalzade: cint <cimport,nodecl,const>
global XK_hebrew_finalzadi: cint <cimport,nodecl,const>
global XK_hebrew_zade: cint <cimport,nodecl,const>
global XK_hebrew_zadi: cint <cimport,nodecl,const>
global XK_hebrew_qoph: cint <cimport,nodecl,const>
global XK_hebrew_kuf: cint <cimport,nodecl,const>
global XK_hebrew_resh: cint <cimport,nodecl,const>
global XK_hebrew_shin: cint <cimport,nodecl,const>
global XK_hebrew_taw: cint <cimport,nodecl,const>
global XK_hebrew_taf: cint <cimport,nodecl,const>
global XK_Hebrew_switch: cint <cimport,nodecl,const>
global XK_Thai_kokai: cint <cimport,nodecl,const>
global XK_Thai_khokhai: cint <cimport,nodecl,const>
global XK_Thai_khokhuat: cint <cimport,nodecl,const>
global XK_Thai_khokhwai: cint <cimport,nodecl,const>
global XK_Thai_khokhon: cint <cimport,nodecl,const>
global XK_Thai_khorakhang: cint <cimport,nodecl,const>
global XK_Thai_ngongu: cint <cimport,nodecl,const>
global XK_Thai_chochan: cint <cimport,nodecl,const>
global XK_Thai_choching: cint <cimport,nodecl,const>
global XK_Thai_chochang: cint <cimport,nodecl,const>
global XK_Thai_soso: cint <cimport,nodecl,const>
global XK_Thai_chochoe: cint <cimport,nodecl,const>
global XK_Thai_yoying: cint <cimport,nodecl,const>
global XK_Thai_dochada: cint <cimport,nodecl,const>
global XK_Thai_topatak: cint <cimport,nodecl,const>
global XK_Thai_thothan: cint <cimport,nodecl,const>
global XK_Thai_thonangmontho: cint <cimport,nodecl,const>
global XK_Thai_thophuthao: cint <cimport,nodecl,const>
global XK_Thai_nonen: cint <cimport,nodecl,const>
global XK_Thai_dodek: cint <cimport,nodecl,const>
global XK_Thai_totao: cint <cimport,nodecl,const>
global XK_Thai_thothung: cint <cimport,nodecl,const>
global XK_Thai_thothahan: cint <cimport,nodecl,const>
global XK_Thai_thothong: cint <cimport,nodecl,const>
global XK_Thai_nonu: cint <cimport,nodecl,const>
global XK_Thai_bobaimai: cint <cimport,nodecl,const>
global XK_Thai_popla: cint <cimport,nodecl,const>
global XK_Thai_phophung: cint <cimport,nodecl,const>
global XK_Thai_fofa: cint <cimport,nodecl,const>
global XK_Thai_phophan: cint <cimport,nodecl,const>
global XK_Thai_fofan: cint <cimport,nodecl,const>
global XK_Thai_phosamphao: cint <cimport,nodecl,const>
global XK_Thai_moma: cint <cimport,nodecl,const>
global XK_Thai_yoyak: cint <cimport,nodecl,const>
global XK_Thai_rorua: cint <cimport,nodecl,const>
global XK_Thai_ru: cint <cimport,nodecl,const>
global XK_Thai_loling: cint <cimport,nodecl,const>
global XK_Thai_lu: cint <cimport,nodecl,const>
global XK_Thai_wowaen: cint <cimport,nodecl,const>
global XK_Thai_sosala: cint <cimport,nodecl,const>
global XK_Thai_sorusi: cint <cimport,nodecl,const>
global XK_Thai_sosua: cint <cimport,nodecl,const>
global XK_Thai_hohip: cint <cimport,nodecl,const>
global XK_Thai_lochula: cint <cimport,nodecl,const>
global XK_Thai_oang: cint <cimport,nodecl,const>
global XK_Thai_honokhuk: cint <cimport,nodecl,const>
global XK_Thai_paiyannoi: cint <cimport,nodecl,const>
global XK_Thai_saraa: cint <cimport,nodecl,const>
global XK_Thai_maihanakat: cint <cimport,nodecl,const>
global XK_Thai_saraaa: cint <cimport,nodecl,const>
global XK_Thai_saraam: cint <cimport,nodecl,const>
global XK_Thai_sarai: cint <cimport,nodecl,const>
global XK_Thai_saraii: cint <cimport,nodecl,const>
global XK_Thai_saraue: cint <cimport,nodecl,const>
global XK_Thai_sarauee: cint <cimport,nodecl,const>
global XK_Thai_sarau: cint <cimport,nodecl,const>
global XK_Thai_sarauu: cint <cimport,nodecl,const>
global XK_Thai_phinthu: cint <cimport,nodecl,const>
global XK_Thai_maihanakat_maitho: cint <cimport,nodecl,const>
global XK_Thai_baht: cint <cimport,nodecl,const>
global XK_Thai_sarae: cint <cimport,nodecl,const>
global XK_Thai_saraae: cint <cimport,nodecl,const>
global XK_Thai_sarao: cint <cimport,nodecl,const>
global XK_Thai_saraaimaimuan: cint <cimport,nodecl,const>
global XK_Thai_saraaimaimalai: cint <cimport,nodecl,const>
global XK_Thai_lakkhangyao: cint <cimport,nodecl,const>
global XK_Thai_maiyamok: cint <cimport,nodecl,const>
global XK_Thai_maitaikhu: cint <cimport,nodecl,const>
global XK_Thai_maiek: cint <cimport,nodecl,const>
global XK_Thai_maitho: cint <cimport,nodecl,const>
global XK_Thai_maitri: cint <cimport,nodecl,const>
global XK_Thai_maichattawa: cint <cimport,nodecl,const>
global XK_Thai_thanthakhat: cint <cimport,nodecl,const>
global XK_Thai_nikhahit: cint <cimport,nodecl,const>
global XK_Thai_leksun: cint <cimport,nodecl,const>
global XK_Thai_leknung: cint <cimport,nodecl,const>
global XK_Thai_leksong: cint <cimport,nodecl,const>
global XK_Thai_leksam: cint <cimport,nodecl,const>
global XK_Thai_leksi: cint <cimport,nodecl,const>
global XK_Thai_lekha: cint <cimport,nodecl,const>
global XK_Thai_lekhok: cint <cimport,nodecl,const>
global XK_Thai_lekchet: cint <cimport,nodecl,const>
global XK_Thai_lekpaet: cint <cimport,nodecl,const>
global XK_Thai_lekkao: cint <cimport,nodecl,const>
global XK_Hangul: cint <cimport,nodecl,const>
global XK_Hangul_Start: cint <cimport,nodecl,const>
global XK_Hangul_End: cint <cimport,nodecl,const>
global XK_Hangul_Hanja: cint <cimport,nodecl,const>
global XK_Hangul_Jamo: cint <cimport,nodecl,const>
global XK_Hangul_Romaja: cint <cimport,nodecl,const>
global XK_Hangul_Codeinput: cint <cimport,nodecl,const>
global XK_Hangul_Jeonja: cint <cimport,nodecl,const>
global XK_Hangul_Banja: cint <cimport,nodecl,const>
global XK_Hangul_PreHanja: cint <cimport,nodecl,const>
global XK_Hangul_PostHanja: cint <cimport,nodecl,const>
global XK_Hangul_SingleCandidate: cint <cimport,nodecl,const>
global XK_Hangul_MultipleCandidate: cint <cimport,nodecl,const>
global XK_Hangul_PreviousCandidate: cint <cimport,nodecl,const>
global XK_Hangul_Special: cint <cimport,nodecl,const>
global XK_Hangul_switch: cint <cimport,nodecl,const>
global XK_Hangul_Kiyeog: cint <cimport,nodecl,const>
global XK_Hangul_SsangKiyeog: cint <cimport,nodecl,const>
global XK_Hangul_KiyeogSios: cint <cimport,nodecl,const>
global XK_Hangul_Nieun: cint <cimport,nodecl,const>
global XK_Hangul_NieunJieuj: cint <cimport,nodecl,const>
global XK_Hangul_NieunHieuh: cint <cimport,nodecl,const>
global XK_Hangul_Dikeud: cint <cimport,nodecl,const>
global XK_Hangul_SsangDikeud: cint <cimport,nodecl,const>
global XK_Hangul_Rieul: cint <cimport,nodecl,const>
global XK_Hangul_RieulKiyeog: cint <cimport,nodecl,const>
global XK_Hangul_RieulMieum: cint <cimport,nodecl,const>
global XK_Hangul_RieulPieub: cint <cimport,nodecl,const>
global XK_Hangul_RieulSios: cint <cimport,nodecl,const>
global XK_Hangul_RieulTieut: cint <cimport,nodecl,const>
global XK_Hangul_RieulPhieuf: cint <cimport,nodecl,const>
global XK_Hangul_RieulHieuh: cint <cimport,nodecl,const>
global XK_Hangul_Mieum: cint <cimport,nodecl,const>
global XK_Hangul_Pieub: cint <cimport,nodecl,const>
global XK_Hangul_SsangPieub: cint <cimport,nodecl,const>
global XK_Hangul_PieubSios: cint <cimport,nodecl,const>
global XK_Hangul_Sios: cint <cimport,nodecl,const>
global XK_Hangul_SsangSios: cint <cimport,nodecl,const>
global XK_Hangul_Ieung: cint <cimport,nodecl,const>
global XK_Hangul_Jieuj: cint <cimport,nodecl,const>
global XK_Hangul_SsangJieuj: cint <cimport,nodecl,const>
global XK_Hangul_Cieuc: cint <cimport,nodecl,const>
global XK_Hangul_Khieuq: cint <cimport,nodecl,const>
global XK_Hangul_Tieut: cint <cimport,nodecl,const>
global XK_Hangul_Phieuf: cint <cimport,nodecl,const>
global XK_Hangul_Hieuh: cint <cimport,nodecl,const>
global XK_Hangul_A: cint <cimport,nodecl,const>
global XK_Hangul_AE: cint <cimport,nodecl,const>
global XK_Hangul_YA: cint <cimport,nodecl,const>
global XK_Hangul_YAE: cint <cimport,nodecl,const>
global XK_Hangul_EO: cint <cimport,nodecl,const>
global XK_Hangul_E: cint <cimport,nodecl,const>
global XK_Hangul_YEO: cint <cimport,nodecl,const>
global XK_Hangul_YE: cint <cimport,nodecl,const>
global XK_Hangul_O: cint <cimport,nodecl,const>
global XK_Hangul_WA: cint <cimport,nodecl,const>
global XK_Hangul_WAE: cint <cimport,nodecl,const>
global XK_Hangul_OE: cint <cimport,nodecl,const>
global XK_Hangul_YO: cint <cimport,nodecl,const>
global XK_Hangul_U: cint <cimport,nodecl,const>
global XK_Hangul_WEO: cint <cimport,nodecl,const>
global XK_Hangul_WE: cint <cimport,nodecl,const>
global XK_Hangul_WI: cint <cimport,nodecl,const>
global XK_Hangul_YU: cint <cimport,nodecl,const>
global XK_Hangul_EU: cint <cimport,nodecl,const>
global XK_Hangul_YI: cint <cimport,nodecl,const>
global XK_Hangul_I: cint <cimport,nodecl,const>
global XK_Hangul_J_Kiyeog: cint <cimport,nodecl,const>
global XK_Hangul_J_SsangKiyeog: cint <cimport,nodecl,const>
global XK_Hangul_J_KiyeogSios: cint <cimport,nodecl,const>
global XK_Hangul_J_Nieun: cint <cimport,nodecl,const>
global XK_Hangul_J_NieunJieuj: cint <cimport,nodecl,const>
global XK_Hangul_J_NieunHieuh: cint <cimport,nodecl,const>
global XK_Hangul_J_Dikeud: cint <cimport,nodecl,const>
global XK_Hangul_J_Rieul: cint <cimport,nodecl,const>
global XK_Hangul_J_RieulKiyeog: cint <cimport,nodecl,const>
global XK_Hangul_J_RieulMieum: cint <cimport,nodecl,const>
global XK_Hangul_J_RieulPieub: cint <cimport,nodecl,const>
global XK_Hangul_J_RieulSios: cint <cimport,nodecl,const>
global XK_Hangul_J_RieulTieut: cint <cimport,nodecl,const>
global XK_Hangul_J_RieulPhieuf: cint <cimport,nodecl,const>
global XK_Hangul_J_RieulHieuh: cint <cimport,nodecl,const>
global XK_Hangul_J_Mieum: cint <cimport,nodecl,const>
global XK_Hangul_J_Pieub: cint <cimport,nodecl,const>
global XK_Hangul_J_PieubSios: cint <cimport,nodecl,const>
global XK_Hangul_J_Sios: cint <cimport,nodecl,const>
global XK_Hangul_J_SsangSios: cint <cimport,nodecl,const>
global XK_Hangul_J_Ieung: cint <cimport,nodecl,const>
global XK_Hangul_J_Jieuj: cint <cimport,nodecl,const>
global XK_Hangul_J_Cieuc: cint <cimport,nodecl,const>
global XK_Hangul_J_Khieuq: cint <cimport,nodecl,const>
global XK_Hangul_J_Tieut: cint <cimport,nodecl,const>
global XK_Hangul_J_Phieuf: cint <cimport,nodecl,const>
global XK_Hangul_J_Hieuh: cint <cimport,nodecl,const>
global XK_Hangul_RieulYeorinHieuh: cint <cimport,nodecl,const>
global XK_Hangul_SunkyeongeumMieum: cint <cimport,nodecl,const>
global XK_Hangul_SunkyeongeumPieub: cint <cimport,nodecl,const>
global XK_Hangul_PanSios: cint <cimport,nodecl,const>
global XK_Hangul_KkogjiDalrinIeung: cint <cimport,nodecl,const>
global XK_Hangul_SunkyeongeumPhieuf: cint <cimport,nodecl,const>
global XK_Hangul_YeorinHieuh: cint <cimport,nodecl,const>
global XK_Hangul_AraeA: cint <cimport,nodecl,const>
global XK_Hangul_AraeAE: cint <cimport,nodecl,const>
global XK_Hangul_J_PanSios: cint <cimport,nodecl,const>
global XK_Hangul_J_KkogjiDalrinIeung: cint <cimport,nodecl,const>
global XK_Hangul_J_YeorinHieuh: cint <cimport,nodecl,const>
global XK_Korean_Won: cint <cimport,nodecl,const>
global XK_Armenian_ligature_ew: cint <cimport,nodecl,const>
global XK_Armenian_full_stop: cint <cimport,nodecl,const>
global XK_Armenian_verjaket: cint <cimport,nodecl,const>
global XK_Armenian_separation_mark: cint <cimport,nodecl,const>
global XK_Armenian_but: cint <cimport,nodecl,const>
global XK_Armenian_hyphen: cint <cimport,nodecl,const>
global XK_Armenian_yentamna: cint <cimport,nodecl,const>
global XK_Armenian_exclam: cint <cimport,nodecl,const>
global XK_Armenian_amanak: cint <cimport,nodecl,const>
global XK_Armenian_accent: cint <cimport,nodecl,const>
global XK_Armenian_shesht: cint <cimport,nodecl,const>
global XK_Armenian_question: cint <cimport,nodecl,const>
global XK_Armenian_paruyk: cint <cimport,nodecl,const>
global XK_Armenian_AYB: cint <cimport,nodecl,const>
global XK_Armenian_ayb: cint <cimport,nodecl,const>
global XK_Armenian_BEN: cint <cimport,nodecl,const>
global XK_Armenian_ben: cint <cimport,nodecl,const>
global XK_Armenian_GIM: cint <cimport,nodecl,const>
global XK_Armenian_gim: cint <cimport,nodecl,const>
global XK_Armenian_DA: cint <cimport,nodecl,const>
global XK_Armenian_da: cint <cimport,nodecl,const>
global XK_Armenian_YECH: cint <cimport,nodecl,const>
global XK_Armenian_yech: cint <cimport,nodecl,const>
global XK_Armenian_ZA: cint <cimport,nodecl,const>
global XK_Armenian_za: cint <cimport,nodecl,const>
global XK_Armenian_E: cint <cimport,nodecl,const>
global XK_Armenian_e: cint <cimport,nodecl,const>
global XK_Armenian_AT: cint <cimport,nodecl,const>
global XK_Armenian_at: cint <cimport,nodecl,const>
global XK_Armenian_TO: cint <cimport,nodecl,const>
global XK_Armenian_to: cint <cimport,nodecl,const>
global XK_Armenian_ZHE: cint <cimport,nodecl,const>
global XK_Armenian_zhe: cint <cimport,nodecl,const>
global XK_Armenian_INI: cint <cimport,nodecl,const>
global XK_Armenian_ini: cint <cimport,nodecl,const>
global XK_Armenian_LYUN: cint <cimport,nodecl,const>
global XK_Armenian_lyun: cint <cimport,nodecl,const>
global XK_Armenian_KHE: cint <cimport,nodecl,const>
global XK_Armenian_khe: cint <cimport,nodecl,const>
global XK_Armenian_TSA: cint <cimport,nodecl,const>
global XK_Armenian_tsa: cint <cimport,nodecl,const>
global XK_Armenian_KEN: cint <cimport,nodecl,const>
global XK_Armenian_ken: cint <cimport,nodecl,const>
global XK_Armenian_HO: cint <cimport,nodecl,const>
global XK_Armenian_ho: cint <cimport,nodecl,const>
global XK_Armenian_DZA: cint <cimport,nodecl,const>
global XK_Armenian_dza: cint <cimport,nodecl,const>
global XK_Armenian_GHAT: cint <cimport,nodecl,const>
global XK_Armenian_ghat: cint <cimport,nodecl,const>
global XK_Armenian_TCHE: cint <cimport,nodecl,const>
global XK_Armenian_tche: cint <cimport,nodecl,const>
global XK_Armenian_MEN: cint <cimport,nodecl,const>
global XK_Armenian_men: cint <cimport,nodecl,const>
global XK_Armenian_HI: cint <cimport,nodecl,const>
global XK_Armenian_hi: cint <cimport,nodecl,const>
global XK_Armenian_NU: cint <cimport,nodecl,const>
global XK_Armenian_nu: cint <cimport,nodecl,const>
global XK_Armenian_SHA: cint <cimport,nodecl,const>
global XK_Armenian_sha: cint <cimport,nodecl,const>
global XK_Armenian_VO: cint <cimport,nodecl,const>
global XK_Armenian_vo: cint <cimport,nodecl,const>
global XK_Armenian_CHA: cint <cimport,nodecl,const>
global XK_Armenian_cha: cint <cimport,nodecl,const>
global XK_Armenian_PE: cint <cimport,nodecl,const>
global XK_Armenian_pe: cint <cimport,nodecl,const>
global XK_Armenian_JE: cint <cimport,nodecl,const>
global XK_Armenian_je: cint <cimport,nodecl,const>
global XK_Armenian_RA: cint <cimport,nodecl,const>
global XK_Armenian_ra: cint <cimport,nodecl,const>
global XK_Armenian_SE: cint <cimport,nodecl,const>
global XK_Armenian_se: cint <cimport,nodecl,const>
global XK_Armenian_VEV: cint <cimport,nodecl,const>
global XK_Armenian_vev: cint <cimport,nodecl,const>
global XK_Armenian_TYUN: cint <cimport,nodecl,const>
global XK_Armenian_tyun: cint <cimport,nodecl,const>
global XK_Armenian_RE: cint <cimport,nodecl,const>
global XK_Armenian_re: cint <cimport,nodecl,const>
global XK_Armenian_TSO: cint <cimport,nodecl,const>
global XK_Armenian_tso: cint <cimport,nodecl,const>
global XK_Armenian_VYUN: cint <cimport,nodecl,const>
global XK_Armenian_vyun: cint <cimport,nodecl,const>
global XK_Armenian_PYUR: cint <cimport,nodecl,const>
global XK_Armenian_pyur: cint <cimport,nodecl,const>
global XK_Armenian_KE: cint <cimport,nodecl,const>
global XK_Armenian_ke: cint <cimport,nodecl,const>
global XK_Armenian_O: cint <cimport,nodecl,const>
global XK_Armenian_o: cint <cimport,nodecl,const>
global XK_Armenian_FE: cint <cimport,nodecl,const>
global XK_Armenian_fe: cint <cimport,nodecl,const>
global XK_Armenian_apostrophe: cint <cimport,nodecl,const>
global XK_Georgian_an: cint <cimport,nodecl,const>
global XK_Georgian_ban: cint <cimport,nodecl,const>
global XK_Georgian_gan: cint <cimport,nodecl,const>
global XK_Georgian_don: cint <cimport,nodecl,const>
global XK_Georgian_en: cint <cimport,nodecl,const>
global XK_Georgian_vin: cint <cimport,nodecl,const>
global XK_Georgian_zen: cint <cimport,nodecl,const>
global XK_Georgian_tan: cint <cimport,nodecl,const>
global XK_Georgian_in: cint <cimport,nodecl,const>
global XK_Georgian_kan: cint <cimport,nodecl,const>
global XK_Georgian_las: cint <cimport,nodecl,const>
global XK_Georgian_man: cint <cimport,nodecl,const>
global XK_Georgian_nar: cint <cimport,nodecl,const>
global XK_Georgian_on: cint <cimport,nodecl,const>
global XK_Georgian_par: cint <cimport,nodecl,const>
global XK_Georgian_zhar: cint <cimport,nodecl,const>
global XK_Georgian_rae: cint <cimport,nodecl,const>
global XK_Georgian_san: cint <cimport,nodecl,const>
global XK_Georgian_tar: cint <cimport,nodecl,const>
global XK_Georgian_un: cint <cimport,nodecl,const>
global XK_Georgian_phar: cint <cimport,nodecl,const>
global XK_Georgian_khar: cint <cimport,nodecl,const>
global XK_Georgian_ghan: cint <cimport,nodecl,const>
global XK_Georgian_qar: cint <cimport,nodecl,const>
global XK_Georgian_shin: cint <cimport,nodecl,const>
global XK_Georgian_chin: cint <cimport,nodecl,const>
global XK_Georgian_can: cint <cimport,nodecl,const>
global XK_Georgian_jil: cint <cimport,nodecl,const>
global XK_Georgian_cil: cint <cimport,nodecl,const>
global XK_Georgian_char: cint <cimport,nodecl,const>
global XK_Georgian_xan: cint <cimport,nodecl,const>
global XK_Georgian_jhan: cint <cimport,nodecl,const>
global XK_Georgian_hae: cint <cimport,nodecl,const>
global XK_Georgian_he: cint <cimport,nodecl,const>
global XK_Georgian_hie: cint <cimport,nodecl,const>
global XK_Georgian_we: cint <cimport,nodecl,const>
global XK_Georgian_har: cint <cimport,nodecl,const>
global XK_Georgian_hoe: cint <cimport,nodecl,const>
global XK_Georgian_fi: cint <cimport,nodecl,const>
global XK_Xabovedot: cint <cimport,nodecl,const>
global XK_Ibreve: cint <cimport,nodecl,const>
global XK_Zstroke: cint <cimport,nodecl,const>
global XK_Gcaron: cint <cimport,nodecl,const>
global XK_Ocaron: cint <cimport,nodecl,const>
global XK_Obarred: cint <cimport,nodecl,const>
global XK_xabovedot: cint <cimport,nodecl,const>
global XK_ibreve: cint <cimport,nodecl,const>
global XK_zstroke: cint <cimport,nodecl,const>
global XK_gcaron: cint <cimport,nodecl,const>
global XK_ocaron: cint <cimport,nodecl,const>
global XK_obarred: cint <cimport,nodecl,const>
global XK_SCHWA: cint <cimport,nodecl,const>
global XK_schwa: cint <cimport,nodecl,const>
global XK_EZH: cint <cimport,nodecl,const>
global XK_ezh: cint <cimport,nodecl,const>
global XK_Lbelowdot: cint <cimport,nodecl,const>
global XK_lbelowdot: cint <cimport,nodecl,const>
global XK_Abelowdot: cint <cimport,nodecl,const>
global XK_abelowdot: cint <cimport,nodecl,const>
global XK_Ahook: cint <cimport,nodecl,const>
global XK_ahook: cint <cimport,nodecl,const>
global XK_Acircumflexacute: cint <cimport,nodecl,const>
global XK_acircumflexacute: cint <cimport,nodecl,const>
global XK_Acircumflexgrave: cint <cimport,nodecl,const>
global XK_acircumflexgrave: cint <cimport,nodecl,const>
global XK_Acircumflexhook: cint <cimport,nodecl,const>
global XK_acircumflexhook: cint <cimport,nodecl,const>
global XK_Acircumflextilde: cint <cimport,nodecl,const>
global XK_acircumflextilde: cint <cimport,nodecl,const>
global XK_Acircumflexbelowdot: cint <cimport,nodecl,const>
global XK_acircumflexbelowdot: cint <cimport,nodecl,const>
global XK_Abreveacute: cint <cimport,nodecl,const>
global XK_abreveacute: cint <cimport,nodecl,const>
global XK_Abrevegrave: cint <cimport,nodecl,const>
global XK_abrevegrave: cint <cimport,nodecl,const>
global XK_Abrevehook: cint <cimport,nodecl,const>
global XK_abrevehook: cint <cimport,nodecl,const>
global XK_Abrevetilde: cint <cimport,nodecl,const>
global XK_abrevetilde: cint <cimport,nodecl,const>
global XK_Abrevebelowdot: cint <cimport,nodecl,const>
global XK_abrevebelowdot: cint <cimport,nodecl,const>
global XK_Ebelowdot: cint <cimport,nodecl,const>
global XK_ebelowdot: cint <cimport,nodecl,const>
global XK_Ehook: cint <cimport,nodecl,const>
global XK_ehook: cint <cimport,nodecl,const>
global XK_Etilde: cint <cimport,nodecl,const>
global XK_etilde: cint <cimport,nodecl,const>
global XK_Ecircumflexacute: cint <cimport,nodecl,const>
global XK_ecircumflexacute: cint <cimport,nodecl,const>
global XK_Ecircumflexgrave: cint <cimport,nodecl,const>
global XK_ecircumflexgrave: cint <cimport,nodecl,const>
global XK_Ecircumflexhook: cint <cimport,nodecl,const>
global XK_ecircumflexhook: cint <cimport,nodecl,const>
global XK_Ecircumflextilde: cint <cimport,nodecl,const>
global XK_ecircumflextilde: cint <cimport,nodecl,const>
global XK_Ecircumflexbelowdot: cint <cimport,nodecl,const>
global XK_ecircumflexbelowdot: cint <cimport,nodecl,const>
global XK_Ihook: cint <cimport,nodecl,const>
global XK_ihook: cint <cimport,nodecl,const>
global XK_Ibelowdot: cint <cimport,nodecl,const>
global XK_ibelowdot: cint <cimport,nodecl,const>
global XK_Obelowdot: cint <cimport,nodecl,const>
global XK_obelowdot: cint <cimport,nodecl,const>
global XK_Ohook: cint <cimport,nodecl,const>
global XK_ohook: cint <cimport,nodecl,const>
global XK_Ocircumflexacute: cint <cimport,nodecl,const>
global XK_ocircumflexacute: cint <cimport,nodecl,const>
global XK_Ocircumflexgrave: cint <cimport,nodecl,const>
global XK_ocircumflexgrave: cint <cimport,nodecl,const>
global XK_Ocircumflexhook: cint <cimport,nodecl,const>
global XK_ocircumflexhook: cint <cimport,nodecl,const>
global XK_Ocircumflextilde: cint <cimport,nodecl,const>
global XK_ocircumflextilde: cint <cimport,nodecl,const>
global XK_Ocircumflexbelowdot: cint <cimport,nodecl,const>
global XK_ocircumflexbelowdot: cint <cimport,nodecl,const>
global XK_Ohornacute: cint <cimport,nodecl,const>
global XK_ohornacute: cint <cimport,nodecl,const>
global XK_Ohorngrave: cint <cimport,nodecl,const>
global XK_ohorngrave: cint <cimport,nodecl,const>
global XK_Ohornhook: cint <cimport,nodecl,const>
global XK_ohornhook: cint <cimport,nodecl,const>
global XK_Ohorntilde: cint <cimport,nodecl,const>
global XK_ohorntilde: cint <cimport,nodecl,const>
global XK_Ohornbelowdot: cint <cimport,nodecl,const>
global XK_ohornbelowdot: cint <cimport,nodecl,const>
global XK_Ubelowdot: cint <cimport,nodecl,const>
global XK_ubelowdot: cint <cimport,nodecl,const>
global XK_Uhook: cint <cimport,nodecl,const>
global XK_uhook: cint <cimport,nodecl,const>
global XK_Uhornacute: cint <cimport,nodecl,const>
global XK_uhornacute: cint <cimport,nodecl,const>
global XK_Uhorngrave: cint <cimport,nodecl,const>
global XK_uhorngrave: cint <cimport,nodecl,const>
global XK_Uhornhook: cint <cimport,nodecl,const>
global XK_uhornhook: cint <cimport,nodecl,const>
global XK_Uhorntilde: cint <cimport,nodecl,const>
global XK_uhorntilde: cint <cimport,nodecl,const>
global XK_Uhornbelowdot: cint <cimport,nodecl,const>
global XK_uhornbelowdot: cint <cimport,nodecl,const>
global XK_Ybelowdot: cint <cimport,nodecl,const>
global XK_ybelowdot: cint <cimport,nodecl,const>
global XK_Yhook: cint <cimport,nodecl,const>
global XK_yhook: cint <cimport,nodecl,const>
global XK_Ytilde: cint <cimport,nodecl,const>
global XK_ytilde: cint <cimport,nodecl,const>
global XK_Ohorn: cint <cimport,nodecl,const>
global XK_ohorn: cint <cimport,nodecl,const>
global XK_Uhorn: cint <cimport,nodecl,const>
global XK_uhorn: cint <cimport,nodecl,const>
global XK_combining_tilde: cint <cimport,nodecl,const>
global XK_combining_grave: cint <cimport,nodecl,const>
global XK_combining_acute: cint <cimport,nodecl,const>
global XK_combining_hook: cint <cimport,nodecl,const>
global XK_combining_belowdot: cint <cimport,nodecl,const>
global XK_EcuSign: cint <cimport,nodecl,const>
global XK_ColonSign: cint <cimport,nodecl,const>
global XK_CruzeiroSign: cint <cimport,nodecl,const>
global XK_FFrancSign: cint <cimport,nodecl,const>
global XK_LiraSign: cint <cimport,nodecl,const>
global XK_MillSign: cint <cimport,nodecl,const>
global XK_NairaSign: cint <cimport,nodecl,const>
global XK_PesetaSign: cint <cimport,nodecl,const>
global XK_RupeeSign: cint <cimport,nodecl,const>
global XK_WonSign: cint <cimport,nodecl,const>
global XK_NewSheqelSign: cint <cimport,nodecl,const>
global XK_DongSign: cint <cimport,nodecl,const>
global XK_EuroSign: cint <cimport,nodecl,const>
global XK_zerosuperior: cint <cimport,nodecl,const>
global XK_foursuperior: cint <cimport,nodecl,const>
global XK_fivesuperior: cint <cimport,nodecl,const>
global XK_sixsuperior: cint <cimport,nodecl,const>
global XK_sevensuperior: cint <cimport,nodecl,const>
global XK_eightsuperior: cint <cimport,nodecl,const>
global XK_ninesuperior: cint <cimport,nodecl,const>
global XK_zerosubscript: cint <cimport,nodecl,const>
global XK_onesubscript: cint <cimport,nodecl,const>
global XK_twosubscript: cint <cimport,nodecl,const>
global XK_threesubscript: cint <cimport,nodecl,const>
global XK_foursubscript: cint <cimport,nodecl,const>
global XK_fivesubscript: cint <cimport,nodecl,const>
global XK_sixsubscript: cint <cimport,nodecl,const>
global XK_sevensubscript: cint <cimport,nodecl,const>
global XK_eightsubscript: cint <cimport,nodecl,const>
global XK_ninesubscript: cint <cimport,nodecl,const>
global XK_partdifferential: cint <cimport,nodecl,const>
global XK_emptyset: cint <cimport,nodecl,const>
global XK_elementof: cint <cimport,nodecl,const>
global XK_notelementof: cint <cimport,nodecl,const>
global XK_containsas: cint <cimport,nodecl,const>
global XK_squareroot: cint <cimport,nodecl,const>
global XK_cuberoot: cint <cimport,nodecl,const>
global XK_fourthroot: cint <cimport,nodecl,const>
global XK_dintegral: cint <cimport,nodecl,const>
global XK_tintegral: cint <cimport,nodecl,const>
global XK_because: cint <cimport,nodecl,const>
global XK_approxeq: cint <cimport,nodecl,const>
global XK_notapproxeq: cint <cimport,nodecl,const>
global XK_notidentical: cint <cimport,nodecl,const>
global XK_stricteq: cint <cimport,nodecl,const>
global XK_braille_dot_1: cint <cimport,nodecl,const>
global XK_braille_dot_2: cint <cimport,nodecl,const>
global XK_braille_dot_3: cint <cimport,nodecl,const>
global XK_braille_dot_4: cint <cimport,nodecl,const>
global XK_braille_dot_5: cint <cimport,nodecl,const>
global XK_braille_dot_6: cint <cimport,nodecl,const>
global XK_braille_dot_7: cint <cimport,nodecl,const>
global XK_braille_dot_8: cint <cimport,nodecl,const>
global XK_braille_dot_9: cint <cimport,nodecl,const>
global XK_braille_dot_10: cint <cimport,nodecl,const>
global XK_braille_blank: cint <cimport,nodecl,const>
global XK_braille_dots_1: cint <cimport,nodecl,const>
global XK_braille_dots_2: cint <cimport,nodecl,const>
global XK_braille_dots_12: cint <cimport,nodecl,const>
global XK_braille_dots_3: cint <cimport,nodecl,const>
global XK_braille_dots_13: cint <cimport,nodecl,const>
global XK_braille_dots_23: cint <cimport,nodecl,const>
global XK_braille_dots_123: cint <cimport,nodecl,const>
global XK_braille_dots_4: cint <cimport,nodecl,const>
global XK_braille_dots_14: cint <cimport,nodecl,const>
global XK_braille_dots_24: cint <cimport,nodecl,const>
global XK_braille_dots_124: cint <cimport,nodecl,const>
global XK_braille_dots_34: cint <cimport,nodecl,const>
global XK_braille_dots_134: cint <cimport,nodecl,const>
global XK_braille_dots_234: cint <cimport,nodecl,const>
global XK_braille_dots_1234: cint <cimport,nodecl,const>
global XK_braille_dots_5: cint <cimport,nodecl,const>
global XK_braille_dots_15: cint <cimport,nodecl,const>
global XK_braille_dots_25: cint <cimport,nodecl,const>
global XK_braille_dots_125: cint <cimport,nodecl,const>
global XK_braille_dots_35: cint <cimport,nodecl,const>
global XK_braille_dots_135: cint <cimport,nodecl,const>
global XK_braille_dots_235: cint <cimport,nodecl,const>
global XK_braille_dots_1235: cint <cimport,nodecl,const>
global XK_braille_dots_45: cint <cimport,nodecl,const>
global XK_braille_dots_145: cint <cimport,nodecl,const>
global XK_braille_dots_245: cint <cimport,nodecl,const>
global XK_braille_dots_1245: cint <cimport,nodecl,const>
global XK_braille_dots_345: cint <cimport,nodecl,const>
global XK_braille_dots_1345: cint <cimport,nodecl,const>
global XK_braille_dots_2345: cint <cimport,nodecl,const>
global XK_braille_dots_12345: cint <cimport,nodecl,const>
global XK_braille_dots_6: cint <cimport,nodecl,const>
global XK_braille_dots_16: cint <cimport,nodecl,const>
global XK_braille_dots_26: cint <cimport,nodecl,const>
global XK_braille_dots_126: cint <cimport,nodecl,const>
global XK_braille_dots_36: cint <cimport,nodecl,const>
global XK_braille_dots_136: cint <cimport,nodecl,const>
global XK_braille_dots_236: cint <cimport,nodecl,const>
global XK_braille_dots_1236: cint <cimport,nodecl,const>
global XK_braille_dots_46: cint <cimport,nodecl,const>
global XK_braille_dots_146: cint <cimport,nodecl,const>
global XK_braille_dots_246: cint <cimport,nodecl,const>
global XK_braille_dots_1246: cint <cimport,nodecl,const>
global XK_braille_dots_346: cint <cimport,nodecl,const>
global XK_braille_dots_1346: cint <cimport,nodecl,const>
global XK_braille_dots_2346: cint <cimport,nodecl,const>
global XK_braille_dots_12346: cint <cimport,nodecl,const>
global XK_braille_dots_56: cint <cimport,nodecl,const>
global XK_braille_dots_156: cint <cimport,nodecl,const>
global XK_braille_dots_256: cint <cimport,nodecl,const>
global XK_braille_dots_1256: cint <cimport,nodecl,const>
global XK_braille_dots_356: cint <cimport,nodecl,const>
global XK_braille_dots_1356: cint <cimport,nodecl,const>
global XK_braille_dots_2356: cint <cimport,nodecl,const>
global XK_braille_dots_12356: cint <cimport,nodecl,const>
global XK_braille_dots_456: cint <cimport,nodecl,const>
global XK_braille_dots_1456: cint <cimport,nodecl,const>
global XK_braille_dots_2456: cint <cimport,nodecl,const>
global XK_braille_dots_12456: cint <cimport,nodecl,const>
global XK_braille_dots_3456: cint <cimport,nodecl,const>
global XK_braille_dots_13456: cint <cimport,nodecl,const>
global XK_braille_dots_23456: cint <cimport,nodecl,const>
global XK_braille_dots_123456: cint <cimport,nodecl,const>
global XK_braille_dots_7: cint <cimport,nodecl,const>
global XK_braille_dots_17: cint <cimport,nodecl,const>
global XK_braille_dots_27: cint <cimport,nodecl,const>
global XK_braille_dots_127: cint <cimport,nodecl,const>
global XK_braille_dots_37: cint <cimport,nodecl,const>
global XK_braille_dots_137: cint <cimport,nodecl,const>
global XK_braille_dots_237: cint <cimport,nodecl,const>
global XK_braille_dots_1237: cint <cimport,nodecl,const>
global XK_braille_dots_47: cint <cimport,nodecl,const>
global XK_braille_dots_147: cint <cimport,nodecl,const>
global XK_braille_dots_247: cint <cimport,nodecl,const>
global XK_braille_dots_1247: cint <cimport,nodecl,const>
global XK_braille_dots_347: cint <cimport,nodecl,const>
global XK_braille_dots_1347: cint <cimport,nodecl,const>
global XK_braille_dots_2347: cint <cimport,nodecl,const>
global XK_braille_dots_12347: cint <cimport,nodecl,const>
global XK_braille_dots_57: cint <cimport,nodecl,const>
global XK_braille_dots_157: cint <cimport,nodecl,const>
global XK_braille_dots_257: cint <cimport,nodecl,const>
global XK_braille_dots_1257: cint <cimport,nodecl,const>
global XK_braille_dots_357: cint <cimport,nodecl,const>
global XK_braille_dots_1357: cint <cimport,nodecl,const>
global XK_braille_dots_2357: cint <cimport,nodecl,const>
global XK_braille_dots_12357: cint <cimport,nodecl,const>
global XK_braille_dots_457: cint <cimport,nodecl,const>
global XK_braille_dots_1457: cint <cimport,nodecl,const>
global XK_braille_dots_2457: cint <cimport,nodecl,const>
global XK_braille_dots_12457: cint <cimport,nodecl,const>
global XK_braille_dots_3457: cint <cimport,nodecl,const>
global XK_braille_dots_13457: cint <cimport,nodecl,const>
global XK_braille_dots_23457: cint <cimport,nodecl,const>
global XK_braille_dots_123457: cint <cimport,nodecl,const>
global XK_braille_dots_67: cint <cimport,nodecl,const>
global XK_braille_dots_167: cint <cimport,nodecl,const>
global XK_braille_dots_267: cint <cimport,nodecl,const>
global XK_braille_dots_1267: cint <cimport,nodecl,const>
global XK_braille_dots_367: cint <cimport,nodecl,const>
global XK_braille_dots_1367: cint <cimport,nodecl,const>
global XK_braille_dots_2367: cint <cimport,nodecl,const>
global XK_braille_dots_12367: cint <cimport,nodecl,const>
global XK_braille_dots_467: cint <cimport,nodecl,const>
global XK_braille_dots_1467: cint <cimport,nodecl,const>
global XK_braille_dots_2467: cint <cimport,nodecl,const>
global XK_braille_dots_12467: cint <cimport,nodecl,const>
global XK_braille_dots_3467: cint <cimport,nodecl,const>
global XK_braille_dots_13467: cint <cimport,nodecl,const>
global XK_braille_dots_23467: cint <cimport,nodecl,const>
global XK_braille_dots_123467: cint <cimport,nodecl,const>
global XK_braille_dots_567: cint <cimport,nodecl,const>
global XK_braille_dots_1567: cint <cimport,nodecl,const>
global XK_braille_dots_2567: cint <cimport,nodecl,const>
global XK_braille_dots_12567: cint <cimport,nodecl,const>
global XK_braille_dots_3567: cint <cimport,nodecl,const>
global XK_braille_dots_13567: cint <cimport,nodecl,const>
global XK_braille_dots_23567: cint <cimport,nodecl,const>
global XK_braille_dots_123567: cint <cimport,nodecl,const>
global XK_braille_dots_4567: cint <cimport,nodecl,const>
global XK_braille_dots_14567: cint <cimport,nodecl,const>
global XK_braille_dots_24567: cint <cimport,nodecl,const>
global XK_braille_dots_124567: cint <cimport,nodecl,const>
global XK_braille_dots_34567: cint <cimport,nodecl,const>
global XK_braille_dots_134567: cint <cimport,nodecl,const>
global XK_braille_dots_234567: cint <cimport,nodecl,const>
global XK_braille_dots_1234567: cint <cimport,nodecl,const>
global XK_braille_dots_8: cint <cimport,nodecl,const>
global XK_braille_dots_18: cint <cimport,nodecl,const>
global XK_braille_dots_28: cint <cimport,nodecl,const>
global XK_braille_dots_128: cint <cimport,nodecl,const>
global XK_braille_dots_38: cint <cimport,nodecl,const>
global XK_braille_dots_138: cint <cimport,nodecl,const>
global XK_braille_dots_238: cint <cimport,nodecl,const>
global XK_braille_dots_1238: cint <cimport,nodecl,const>
global XK_braille_dots_48: cint <cimport,nodecl,const>
global XK_braille_dots_148: cint <cimport,nodecl,const>
global XK_braille_dots_248: cint <cimport,nodecl,const>
global XK_braille_dots_1248: cint <cimport,nodecl,const>
global XK_braille_dots_348: cint <cimport,nodecl,const>
global XK_braille_dots_1348: cint <cimport,nodecl,const>
global XK_braille_dots_2348: cint <cimport,nodecl,const>
global XK_braille_dots_12348: cint <cimport,nodecl,const>
global XK_braille_dots_58: cint <cimport,nodecl,const>
global XK_braille_dots_158: cint <cimport,nodecl,const>
global XK_braille_dots_258: cint <cimport,nodecl,const>
global XK_braille_dots_1258: cint <cimport,nodecl,const>
global XK_braille_dots_358: cint <cimport,nodecl,const>
global XK_braille_dots_1358: cint <cimport,nodecl,const>
global XK_braille_dots_2358: cint <cimport,nodecl,const>
global XK_braille_dots_12358: cint <cimport,nodecl,const>
global XK_braille_dots_458: cint <cimport,nodecl,const>
global XK_braille_dots_1458: cint <cimport,nodecl,const>
global XK_braille_dots_2458: cint <cimport,nodecl,const>
global XK_braille_dots_12458: cint <cimport,nodecl,const>
global XK_braille_dots_3458: cint <cimport,nodecl,const>
global XK_braille_dots_13458: cint <cimport,nodecl,const>
global XK_braille_dots_23458: cint <cimport,nodecl,const>
global XK_braille_dots_123458: cint <cimport,nodecl,const>
global XK_braille_dots_68: cint <cimport,nodecl,const>
global XK_braille_dots_168: cint <cimport,nodecl,const>
global XK_braille_dots_268: cint <cimport,nodecl,const>
global XK_braille_dots_1268: cint <cimport,nodecl,const>
global XK_braille_dots_368: cint <cimport,nodecl,const>
global XK_braille_dots_1368: cint <cimport,nodecl,const>
global XK_braille_dots_2368: cint <cimport,nodecl,const>
global XK_braille_dots_12368: cint <cimport,nodecl,const>
global XK_braille_dots_468: cint <cimport,nodecl,const>
global XK_braille_dots_1468: cint <cimport,nodecl,const>
global XK_braille_dots_2468: cint <cimport,nodecl,const>
global XK_braille_dots_12468: cint <cimport,nodecl,const>
global XK_braille_dots_3468: cint <cimport,nodecl,const>
global XK_braille_dots_13468: cint <cimport,nodecl,const>
global XK_braille_dots_23468: cint <cimport,nodecl,const>
global XK_braille_dots_123468: cint <cimport,nodecl,const>
global XK_braille_dots_568: cint <cimport,nodecl,const>
global XK_braille_dots_1568: cint <cimport,nodecl,const>
global XK_braille_dots_2568: cint <cimport,nodecl,const>
global XK_braille_dots_12568: cint <cimport,nodecl,const>
global XK_braille_dots_3568: cint <cimport,nodecl,const>
global XK_braille_dots_13568: cint <cimport,nodecl,const>
global XK_braille_dots_23568: cint <cimport,nodecl,const>
global XK_braille_dots_123568: cint <cimport,nodecl,const>
global XK_braille_dots_4568: cint <cimport,nodecl,const>
global XK_braille_dots_14568: cint <cimport,nodecl,const>
global XK_braille_dots_24568: cint <cimport,nodecl,const>
global XK_braille_dots_124568: cint <cimport,nodecl,const>
global XK_braille_dots_34568: cint <cimport,nodecl,const>
global XK_braille_dots_134568: cint <cimport,nodecl,const>
global XK_braille_dots_234568: cint <cimport,nodecl,const>
global XK_braille_dots_1234568: cint <cimport,nodecl,const>
global XK_braille_dots_78: cint <cimport,nodecl,const>
global XK_braille_dots_178: cint <cimport,nodecl,const>
global XK_braille_dots_278: cint <cimport,nodecl,const>
global XK_braille_dots_1278: cint <cimport,nodecl,const>
global XK_braille_dots_378: cint <cimport,nodecl,const>
global XK_braille_dots_1378: cint <cimport,nodecl,const>
global XK_braille_dots_2378: cint <cimport,nodecl,const>
global XK_braille_dots_12378: cint <cimport,nodecl,const>
global XK_braille_dots_478: cint <cimport,nodecl,const>
global XK_braille_dots_1478: cint <cimport,nodecl,const>
global XK_braille_dots_2478: cint <cimport,nodecl,const>
global XK_braille_dots_12478: cint <cimport,nodecl,const>
global XK_braille_dots_3478: cint <cimport,nodecl,const>
global XK_braille_dots_13478: cint <cimport,nodecl,const>
global XK_braille_dots_23478: cint <cimport,nodecl,const>
global XK_braille_dots_123478: cint <cimport,nodecl,const>
global XK_braille_dots_578: cint <cimport,nodecl,const>
global XK_braille_dots_1578: cint <cimport,nodecl,const>
global XK_braille_dots_2578: cint <cimport,nodecl,const>
global XK_braille_dots_12578: cint <cimport,nodecl,const>
global XK_braille_dots_3578: cint <cimport,nodecl,const>
global XK_braille_dots_13578: cint <cimport,nodecl,const>
global XK_braille_dots_23578: cint <cimport,nodecl,const>
global XK_braille_dots_123578: cint <cimport,nodecl,const>
global XK_braille_dots_4578: cint <cimport,nodecl,const>
global XK_braille_dots_14578: cint <cimport,nodecl,const>
global XK_braille_dots_24578: cint <cimport,nodecl,const>
global XK_braille_dots_124578: cint <cimport,nodecl,const>
global XK_braille_dots_34578: cint <cimport,nodecl,const>
global XK_braille_dots_134578: cint <cimport,nodecl,const>
global XK_braille_dots_234578: cint <cimport,nodecl,const>
global XK_braille_dots_1234578: cint <cimport,nodecl,const>
global XK_braille_dots_678: cint <cimport,nodecl,const>
global XK_braille_dots_1678: cint <cimport,nodecl,const>
global XK_braille_dots_2678: cint <cimport,nodecl,const>
global XK_braille_dots_12678: cint <cimport,nodecl,const>
global XK_braille_dots_3678: cint <cimport,nodecl,const>
global XK_braille_dots_13678: cint <cimport,nodecl,const>
global XK_braille_dots_23678: cint <cimport,nodecl,const>
global XK_braille_dots_123678: cint <cimport,nodecl,const>
global XK_braille_dots_4678: cint <cimport,nodecl,const>
global XK_braille_dots_14678: cint <cimport,nodecl,const>
global XK_braille_dots_24678: cint <cimport,nodecl,const>
global XK_braille_dots_124678: cint <cimport,nodecl,const>
global XK_braille_dots_34678: cint <cimport,nodecl,const>
global XK_braille_dots_134678: cint <cimport,nodecl,const>
global XK_braille_dots_234678: cint <cimport,nodecl,const>
global XK_braille_dots_1234678: cint <cimport,nodecl,const>
global XK_braille_dots_5678: cint <cimport,nodecl,const>
global XK_braille_dots_15678: cint <cimport,nodecl,const>
global XK_braille_dots_25678: cint <cimport,nodecl,const>
global XK_braille_dots_125678: cint <cimport,nodecl,const>
global XK_braille_dots_35678: cint <cimport,nodecl,const>
global XK_braille_dots_135678: cint <cimport,nodecl,const>
global XK_braille_dots_235678: cint <cimport,nodecl,const>
global XK_braille_dots_1235678: cint <cimport,nodecl,const>
global XK_braille_dots_45678: cint <cimport,nodecl,const>
global XK_braille_dots_145678: cint <cimport,nodecl,const>
global XK_braille_dots_245678: cint <cimport,nodecl,const>
global XK_braille_dots_1245678: cint <cimport,nodecl,const>
global XK_braille_dots_345678: cint <cimport,nodecl,const>
global XK_braille_dots_1345678: cint <cimport,nodecl,const>
global XK_braille_dots_2345678: cint <cimport,nodecl,const>
global XK_braille_dots_12345678: cint <cimport,nodecl,const>
global XK_Sinh_ng: cint <cimport,nodecl,const>
global XK_Sinh_h2: cint <cimport,nodecl,const>
global XK_Sinh_a: cint <cimport,nodecl,const>
global XK_Sinh_aa: cint <cimport,nodecl,const>
global XK_Sinh_ae: cint <cimport,nodecl,const>
global XK_Sinh_aee: cint <cimport,nodecl,const>
global XK_Sinh_i: cint <cimport,nodecl,const>
global XK_Sinh_ii: cint <cimport,nodecl,const>
global XK_Sinh_u: cint <cimport,nodecl,const>
global XK_Sinh_uu: cint <cimport,nodecl,const>
global XK_Sinh_ri: cint <cimport,nodecl,const>
global XK_Sinh_rii: cint <cimport,nodecl,const>
global XK_Sinh_lu: cint <cimport,nodecl,const>
global XK_Sinh_luu: cint <cimport,nodecl,const>
global XK_Sinh_e: cint <cimport,nodecl,const>
global XK_Sinh_ee: cint <cimport,nodecl,const>
global XK_Sinh_ai: cint <cimport,nodecl,const>
global XK_Sinh_o: cint <cimport,nodecl,const>
global XK_Sinh_oo: cint <cimport,nodecl,const>
global XK_Sinh_au: cint <cimport,nodecl,const>
global XK_Sinh_ka: cint <cimport,nodecl,const>
global XK_Sinh_kha: cint <cimport,nodecl,const>
global XK_Sinh_ga: cint <cimport,nodecl,const>
global XK_Sinh_gha: cint <cimport,nodecl,const>
global XK_Sinh_ng2: cint <cimport,nodecl,const>
global XK_Sinh_nga: cint <cimport,nodecl,const>
global XK_Sinh_ca: cint <cimport,nodecl,const>
global XK_Sinh_cha: cint <cimport,nodecl,const>
global XK_Sinh_ja: cint <cimport,nodecl,const>
global XK_Sinh_jha: cint <cimport,nodecl,const>
global XK_Sinh_nya: cint <cimport,nodecl,const>
global XK_Sinh_jnya: cint <cimport,nodecl,const>
global XK_Sinh_nja: cint <cimport,nodecl,const>
global XK_Sinh_tta: cint <cimport,nodecl,const>
global XK_Sinh_ttha: cint <cimport,nodecl,const>
global XK_Sinh_dda: cint <cimport,nodecl,const>
global XK_Sinh_ddha: cint <cimport,nodecl,const>
global XK_Sinh_nna: cint <cimport,nodecl,const>
global XK_Sinh_ndda: cint <cimport,nodecl,const>
global XK_Sinh_tha: cint <cimport,nodecl,const>
global XK_Sinh_thha: cint <cimport,nodecl,const>
global XK_Sinh_dha: cint <cimport,nodecl,const>
global XK_Sinh_dhha: cint <cimport,nodecl,const>
global XK_Sinh_na: cint <cimport,nodecl,const>
global XK_Sinh_ndha: cint <cimport,nodecl,const>
global XK_Sinh_pa: cint <cimport,nodecl,const>
global XK_Sinh_pha: cint <cimport,nodecl,const>
global XK_Sinh_ba: cint <cimport,nodecl,const>
global XK_Sinh_bha: cint <cimport,nodecl,const>
global XK_Sinh_ma: cint <cimport,nodecl,const>
global XK_Sinh_mba: cint <cimport,nodecl,const>
global XK_Sinh_ya: cint <cimport,nodecl,const>
global XK_Sinh_ra: cint <cimport,nodecl,const>
global XK_Sinh_la: cint <cimport,nodecl,const>
global XK_Sinh_va: cint <cimport,nodecl,const>
global XK_Sinh_sha: cint <cimport,nodecl,const>
global XK_Sinh_ssha: cint <cimport,nodecl,const>
global XK_Sinh_sa: cint <cimport,nodecl,const>
global XK_Sinh_ha: cint <cimport,nodecl,const>
global XK_Sinh_lla: cint <cimport,nodecl,const>
global XK_Sinh_fa: cint <cimport,nodecl,const>
global XK_Sinh_al: cint <cimport,nodecl,const>
global XK_Sinh_aa2: cint <cimport,nodecl,const>
global XK_Sinh_ae2: cint <cimport,nodecl,const>
global XK_Sinh_aee2: cint <cimport,nodecl,const>
global XK_Sinh_i2: cint <cimport,nodecl,const>
global XK_Sinh_ii2: cint <cimport,nodecl,const>
global XK_Sinh_u2: cint <cimport,nodecl,const>
global XK_Sinh_uu2: cint <cimport,nodecl,const>
global XK_Sinh_ru2: cint <cimport,nodecl,const>
global XK_Sinh_e2: cint <cimport,nodecl,const>
global XK_Sinh_ee2: cint <cimport,nodecl,const>
global XK_Sinh_ai2: cint <cimport,nodecl,const>
global XK_Sinh_o2: cint <cimport,nodecl,const>
global XK_Sinh_oo2: cint <cimport,nodecl,const>
global XK_Sinh_au2: cint <cimport,nodecl,const>
global XK_Sinh_lu2: cint <cimport,nodecl,const>
global XK_Sinh_ruu2: cint <cimport,nodecl,const>
global XK_Sinh_luu2: cint <cimport,nodecl,const>
global XK_Sinh_kunddaliya: cint <cimport,nodecl,const>
global XkbEventCode: cint <cimport,nodecl,const>
global XkbNumberEvents: cint <cimport,nodecl,const>
global XkbNewKeyboardNotify: cint <cimport,nodecl,const>
global XkbMapNotify: cint <cimport,nodecl,const>
global XkbStateNotify: cint <cimport,nodecl,const>
global XkbControlsNotify: cint <cimport,nodecl,const>
global XkbIndicatorStateNotify: cint <cimport,nodecl,const>
global XkbIndicatorMapNotify: cint <cimport,nodecl,const>
global XkbNamesNotify: cint <cimport,nodecl,const>
global XkbCompatMapNotify: cint <cimport,nodecl,const>
global XkbBellNotify: cint <cimport,nodecl,const>
global XkbActionMessage: cint <cimport,nodecl,const>
global XkbAccessXNotify: cint <cimport,nodecl,const>
global XkbExtensionDeviceNotify: cint <cimport,nodecl,const>
global XkbNewKeyboardNotifyMask: clong <cimport,nodecl,const>
global XkbMapNotifyMask: clong <cimport,nodecl,const>
global XkbStateNotifyMask: clong <cimport,nodecl,const>
global XkbControlsNotifyMask: clong <cimport,nodecl,const>
global XkbIndicatorStateNotifyMask: clong <cimport,nodecl,const>
global XkbIndicatorMapNotifyMask: clong <cimport,nodecl,const>
global XkbNamesNotifyMask: clong <cimport,nodecl,const>
global XkbCompatMapNotifyMask: clong <cimport,nodecl,const>
global XkbBellNotifyMask: clong <cimport,nodecl,const>
global XkbActionMessageMask: clong <cimport,nodecl,const>
global XkbAccessXNotifyMask: clong <cimport,nodecl,const>
global XkbExtensionDeviceNotifyMask: clong <cimport,nodecl,const>
global XkbAllEventsMask: clong <cimport,nodecl,const>
global XkbAllNewKeyboardEventsMask: clong <cimport,nodecl,const>
global XkbAllAccessXEventsMask: clong <cimport,nodecl,const>
global XkbAllStateEventsMask: clong <cimport,nodecl,const>
global XkbAllMapEventsMask: clong <cimport,nodecl,const>
global XkbAllControlEventsMask: clong <cimport,nodecl,const>
global XkbAllIndicatorEventsMask: clong <cimport,nodecl,const>
global XkbAllNameEventsMask: clong <cimport,nodecl,const>
global XkbAllCompatMapEventsMask: clong <cimport,nodecl,const>
global XkbAllBellEventsMask: clong <cimport,nodecl,const>
global XkbAllActionMessagesMask: clong <cimport,nodecl,const>
global XkbKeyboard: cint <cimport,nodecl,const>
global XkbNumberErrors: cint <cimport,nodecl,const>
global XkbClientMapMask: clong <cimport,nodecl,const>
global XkbServerMapMask: clong <cimport,nodecl,const>
global XkbCompatMapMask: clong <cimport,nodecl,const>
global XkbIndicatorMapMask: clong <cimport,nodecl,const>
global XkbNamesMask: clong <cimport,nodecl,const>
global XkbGeometryMask: clong <cimport,nodecl,const>
global XkbControlsMask: clong <cimport,nodecl,const>
global XkbAllComponentsMask: clong <cimport,nodecl,const>
global XkbModifierStateMask: clong <cimport,nodecl,const>
global XkbModifierBaseMask: clong <cimport,nodecl,const>
global XkbModifierLatchMask: clong <cimport,nodecl,const>
global XkbModifierLockMask: clong <cimport,nodecl,const>
global XkbGroupStateMask: clong <cimport,nodecl,const>
global XkbGroupBaseMask: clong <cimport,nodecl,const>
global XkbGroupLatchMask: clong <cimport,nodecl,const>
global XkbGroupLockMask: clong <cimport,nodecl,const>
global XkbCompatStateMask: clong <cimport,nodecl,const>
global XkbGrabModsMask: clong <cimport,nodecl,const>
global XkbCompatGrabModsMask: clong <cimport,nodecl,const>
global XkbLookupModsMask: clong <cimport,nodecl,const>
global XkbCompatLookupModsMask: clong <cimport,nodecl,const>
global XkbPointerButtonMask: clong <cimport,nodecl,const>
global XkbAllStateComponentsMask: clong <cimport,nodecl,const>
global XkbRepeatKeysMask: clong <cimport,nodecl,const>
global XkbSlowKeysMask: clong <cimport,nodecl,const>
global XkbBounceKeysMask: clong <cimport,nodecl,const>
global XkbStickyKeysMask: clong <cimport,nodecl,const>
global XkbMouseKeysMask: clong <cimport,nodecl,const>
global XkbMouseKeysAccelMask: clong <cimport,nodecl,const>
global XkbAccessXKeysMask: clong <cimport,nodecl,const>
global XkbAccessXTimeoutMask: clong <cimport,nodecl,const>
global XkbAccessXFeedbackMask: clong <cimport,nodecl,const>
global XkbAudibleBellMask: clong <cimport,nodecl,const>
global XkbOverlay1Mask: clong <cimport,nodecl,const>
global XkbOverlay2Mask: clong <cimport,nodecl,const>
global XkbIgnoreGroupLockMask: clong <cimport,nodecl,const>
global XkbGroupsWrapMask: clong <cimport,nodecl,const>
global XkbInternalModsMask: clong <cimport,nodecl,const>
global XkbIgnoreLockModsMask: clong <cimport,nodecl,const>
global XkbPerKeyRepeatMask: clong <cimport,nodecl,const>
global XkbControlsEnabledMask: clong <cimport,nodecl,const>
global XkbAccessXOptionsMask: clong <cimport,nodecl,const>
global XkbAllBooleanCtrlsMask: clong <cimport,nodecl,const>
global XkbAllControlsMask: clong <cimport,nodecl,const>
global XkbAllControlEventsMask: clong <cimport,nodecl,const>
global XkbUseCoreKbd: cint <cimport,nodecl,const>
global XkbUseCorePtr: cint <cimport,nodecl,const>
global XkbDfltXIClass: cint <cimport,nodecl,const>
global XkbDfltXIId: cint <cimport,nodecl,const>
global XkbAllXIClasses: cint <cimport,nodecl,const>
global XkbAllXIIds: cint <cimport,nodecl,const>
global XkbXINone: cint <cimport,nodecl,const>
global XkbNoModifier: cint <cimport,nodecl,const>
global XkbNoShiftLevel: cint <cimport,nodecl,const>
global XkbNoShape: cint <cimport,nodecl,const>
global XkbNoIndicator: cint <cimport,nodecl,const>
global XkbNoModifierMask: clong <cimport,nodecl,const>
global XkbAllModifiersMask: clong <cimport,nodecl,const>
global XkbAllVirtualModsMask: clong <cimport,nodecl,const>
global XkbNumKbdGroups: cint <cimport,nodecl,const>
global XkbMaxKbdGroup: cint <cimport,nodecl,const>
global XkbMaxMouseKeysBtn: cint <cimport,nodecl,const>
global XkbGroup1Index: cint <cimport,nodecl,const>
global XkbGroup2Index: cint <cimport,nodecl,const>
global XkbGroup3Index: cint <cimport,nodecl,const>
global XkbGroup4Index: cint <cimport,nodecl,const>
global XkbAnyGroup: cint <cimport,nodecl,const>
global XkbAllGroups: cint <cimport,nodecl,const>
global XkbGroup1Mask: clong <cimport,nodecl,const>
global XkbGroup2Mask: clong <cimport,nodecl,const>
global XkbGroup3Mask: clong <cimport,nodecl,const>
global XkbGroup4Mask: clong <cimport,nodecl,const>
global XkbAnyGroupMask: clong <cimport,nodecl,const>
global XkbAllGroupsMask: clong <cimport,nodecl,const>
global XkbWrapIntoRange: cint <cimport,nodecl,const>
global XkbClampIntoRange: cint <cimport,nodecl,const>
global XkbRedirectIntoRange: cint <cimport,nodecl,const>
global XkbMinLegalKeyCode: cint <cimport,nodecl,const>
global XkbMaxLegalKeyCode: cint <cimport,nodecl,const>
global XkbMaxKeyCount: cint <cimport,nodecl,const>
global XkbPerKeyBitArraySize: cint <cimport,nodecl,const>
global XkbNumModifiers: cint <cimport,nodecl,const>
global XkbNumVirtualMods: cint <cimport,nodecl,const>
global XkbNumIndicators: cint <cimport,nodecl,const>
global XkbAllIndicatorsMask: clong <cimport,nodecl,const>
global XkbMaxRadioGroups: cint <cimport,nodecl,const>
global XkbAllRadioGroupsMask: clong <cimport,nodecl,const>
global XkbMaxShiftLevel: cint <cimport,nodecl,const>
global XkbMaxSymsPerKey: cint <cimport,nodecl,const>
global XkbRGMaxMembers: cint <cimport,nodecl,const>
global XkbActionMessageLength: cint <cimport,nodecl,const>
global XkbKeyNameLength: cint <cimport,nodecl,const>
global XkbMaxRedirectCount: cint <cimport,nodecl,const>
global XkbGeomPtsPerMM: cint <cimport,nodecl,const>
global XkbGeomMaxColors: cint <cimport,nodecl,const>
global XkbGeomMaxLabelColors: cint <cimport,nodecl,const>
global XkbGeomMaxPriority: cint <cimport,nodecl,const>
global XkbOneLevelIndex: cint <cimport,nodecl,const>
global XkbTwoLevelIndex: cint <cimport,nodecl,const>
global XkbAlphabeticIndex: cint <cimport,nodecl,const>
global XkbKeypadIndex: cint <cimport,nodecl,const>
global XkbLastRequiredType: cint <cimport,nodecl,const>
global XkbNumRequiredTypes: cint <cimport,nodecl,const>
global XkbMaxKeyTypes: cint <cimport,nodecl,const>
global XkbOneLevelMask: clong <cimport,nodecl,const>
global XkbTwoLevelMask: clong <cimport,nodecl,const>
global XkbAlphabeticMask: clong <cimport,nodecl,const>
global XkbKeypadMask: clong <cimport,nodecl,const>
global XkbAllRequiredTypes: cint <cimport,nodecl,const>
global XkbName: cstring <comptime> = "XKEYBOARD"
global XkbMajorVersion: cint <cimport,nodecl,const>
global XkbMinorVersion: cint <cimport,nodecl,const>
global XkbExplicitKeyTypesMask: clong <cimport,nodecl,const>
global XkbExplicitKeyType1Mask: clong <cimport,nodecl,const>
global XkbExplicitKeyType2Mask: clong <cimport,nodecl,const>
global XkbExplicitKeyType3Mask: clong <cimport,nodecl,const>
global XkbExplicitKeyType4Mask: clong <cimport,nodecl,const>
global XkbExplicitInterpretMask: clong <cimport,nodecl,const>
global XkbExplicitAutoRepeatMask: clong <cimport,nodecl,const>
global XkbExplicitBehaviorMask: clong <cimport,nodecl,const>
global XkbExplicitVModMapMask: clong <cimport,nodecl,const>
global XkbAllExplicitMask: clong <cimport,nodecl,const>
global XkbKeyTypesMask: clong <cimport,nodecl,const>
global XkbKeySymsMask: clong <cimport,nodecl,const>
global XkbModifierMapMask: clong <cimport,nodecl,const>
global XkbExplicitComponentsMask: clong <cimport,nodecl,const>
global XkbKeyActionsMask: clong <cimport,nodecl,const>
global XkbKeyBehaviorsMask: clong <cimport,nodecl,const>
global XkbVirtualModsMask: clong <cimport,nodecl,const>
global XkbVirtualModMapMask: clong <cimport,nodecl,const>
global XkbAllClientInfoMask: clong <cimport,nodecl,const>
global XkbAllServerInfoMask: clong <cimport,nodecl,const>
global XkbAllMapComponentsMask: clong <cimport,nodecl,const>
global XkbSymInterpMask: clong <cimport,nodecl,const>
global XkbGroupCompatMask: clong <cimport,nodecl,const>
global XkbAllCompatMask: clong <cimport,nodecl,const>
global XkbKeycodesNameMask: clong <cimport,nodecl,const>
global XkbGeometryNameMask: clong <cimport,nodecl,const>
global XkbSymbolsNameMask: clong <cimport,nodecl,const>
global XkbPhysSymbolsNameMask: clong <cimport,nodecl,const>
global XkbTypesNameMask: clong <cimport,nodecl,const>
global XkbCompatNameMask: clong <cimport,nodecl,const>
global XkbKeyTypeNamesMask: clong <cimport,nodecl,const>
global XkbKTLevelNamesMask: clong <cimport,nodecl,const>
global XkbIndicatorNamesMask: clong <cimport,nodecl,const>
global XkbKeyNamesMask: clong <cimport,nodecl,const>
global XkbKeyAliasesMask: clong <cimport,nodecl,const>
global XkbVirtualModNamesMask: clong <cimport,nodecl,const>
global XkbGroupNamesMask: clong <cimport,nodecl,const>
global XkbRGNamesMask: clong <cimport,nodecl,const>
global XkbComponentNamesMask: clong <cimport,nodecl,const>
global XkbAllNamesMask: clong <cimport,nodecl,const>
global XkbAllExtensionDeviceEventsMask: clong <cimport,nodecl,const>
global XkbAnyActionDataSize: cint <cimport,nodecl,const>
