require 'sokol_app'
require 'sokol_gfx'
require 'sokol_glue'
require 'sokol_gp'
require 'sokol_time'
require 'string'
require 'math'

local start_time: uint64

local function init()
  -- setup graphics
  local sgdesc: sg_desc = {
    context = sapp_sgcontext()
  }
  sg_setup(&sgdesc)

  -- setup time
  stm_setup()
  start_time = stm_now()

  -- setup Sokol GP
  local sgpdesc: sgp_desc = {}
  sgp_setup(&sgpdesc)
end

local function frame()
  -- Get current window size.
  local width, height = sapp_width(), sapp_height()
  local ratio = width/height

  -- Begin recording draw commands for a frame buffer of size (width, height).
  sgp_begin(width, height)
  -- Set frame buffer drawing region to (0,0,width,height).
  sgp_viewport(0, 0, width, height)
  -- Set drawing coordinate space to (left=-ratio, right=ratio, top=1, bottom=-1).
  sgp_project(-ratio, ratio, 1.0, -1.0)

  -- Clear the frame buffer.
  sgp_set_color(0.1, 0.1, 0.1, 1.0)
  sgp_clear()

  -- Draw an animated rectangle that rotates and changes its colors.
  local time = sapp_frame_count() * sapp_frame_duration()
  local r, g = math.sin(time)*0.5+0.5, math.cos(time)*0.5+0.5
  sgp_set_color(r, g, 0.3, 1.0)
  sgp_rotate_at(time, 0.0, 0.0)
  sgp_draw_filled_rect(-0.5, -0.5, 1.0, 1.0)

  -- Begin a render pass.
  local pass_action: sg_pass_action
  sg_begin_default_pass(&pass_action, width, height)
  -- Dispatch all draw commands to Sokol GFX.
  sgp_flush()
  -- Finish a draw command queue, clearing it.
  sgp_end()
  -- End render pass.
  sg_end_pass()
  -- Commit Sokol render.
  sg_commit()

  -- quit after a while
  if stm_ms(stm_since(start_time)) > 2000 then
    sapp_quit()
  end
end

local function cleanup()
  -- shutdown Sokol GP
  sgp_shutdown()
  -- shutdown SOkol GFX
  sg_shutdown()
end

local app_desc: sapp_desc = {
  init_cb = init,
  frame_cb = frame,
  cleanup_cb = cleanup,
  width = 512,
  height = 512,
  window_title = "Sokol GP",
  enable_clipboard = true,
  html5_canvas_resize = true,
}
sapp_run(&app_desc)
