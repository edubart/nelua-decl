global omp_sched_t: type <cimport,nodecl,using> = @enum(cuint){
  omp_sched_static = 1,
  omp_sched_dynamic = 2,
  omp_sched_guided = 3,
  omp_sched_auto = 4,
  omp_sched_monotonic = 2147483648
}
global omp_lock_t: type <cimport,nodecl> = @record{
  _lk: pointer
}
global omp_nest_lock_t: type <cimport,nodecl> = @record{
  _lk: pointer
}
global omp_sync_hint_t: type <cimport,nodecl,using> = @enum(cint){
  omp_sync_hint_none = 0,
  omp_lock_hint_none = 0,
  omp_sync_hint_uncontended = 1,
  omp_lock_hint_uncontended = 1,
  omp_sync_hint_contended = 2,
  omp_lock_hint_contended = 2,
  omp_sync_hint_nonspeculative = 4,
  omp_lock_hint_nonspeculative = 4,
  omp_sync_hint_speculative = 8,
  omp_lock_hint_speculative = 8,
  kmp_lock_hint_hle = 65536,
  kmp_lock_hint_rtm = 131072,
  kmp_lock_hint_adaptive = 262144
}
global omp_lock_hint_t: type <cimport,nodecl> = @omp_sync_hint_t
global omp_depend_t: type <cimport,nodecl> = @pointer
global omp_intptr_t: type <cimport,nodecl> = @isize
global omp_interop_property_t: type <cimport,nodecl,using> = @enum(cint){
  omp_ipr_fr_id = -1,
  omp_ipr_fr_name = -2,
  omp_ipr_vendor = -3,
  omp_ipr_vendor_name = -4,
  omp_ipr_device_num = -5,
  omp_ipr_platform = -6,
  omp_ipr_device = -7,
  omp_ipr_device_context = -8,
  omp_ipr_targetsync = -9,
  omp_ipr_first = -9
}
global omp_interop_rc_t: type <cimport,nodecl,using> = @enum(cint){
  omp_irc_no_value = 1,
  omp_irc_success = 0,
  omp_irc_empty = -1,
  omp_irc_out_of_range = -2,
  omp_irc_type_int = -3,
  omp_irc_type_ptr = -4,
  omp_irc_type_str = -5,
  omp_irc_other = -6
}
global omp_interop_fr_t: type <cimport,nodecl,using> = @enum(cint){
  omp_ifr_cuda = 1,
  omp_ifr_cuda_driver = 2,
  omp_ifr_opencl = 3,
  omp_ifr_sycl = 4,
  omp_ifr_hip = 5,
  omp_ifr_level_zero = 6,
  omp_ifr_last = 7
}
global omp_interop_t: type <cimport,nodecl> = @pointer
global omp_proc_bind_t: type <cimport,nodecl,using> = @enum(cint){
  omp_proc_bind_false = 0,
  omp_proc_bind_true = 1,
  omp_proc_bind_master = 2,
  omp_proc_bind_close = 3,
  omp_proc_bind_spread = 4
}
global omp_control_tool_result_t: type <cimport,nodecl,using> = @enum(cint){
  omp_control_tool_notool = -2,
  omp_control_tool_nocallback = -1,
  omp_control_tool_success = 0,
  omp_control_tool_ignored = 1
}
global omp_control_tool_t: type <cimport,nodecl,using> = @enum(cint){
  omp_control_tool_start = 1,
  omp_control_tool_pause = 2,
  omp_control_tool_flush = 3,
  omp_control_tool_end = 4
}
global omp_uintptr_t: type <cimport,nodecl> = @usize
global omp_alloctrait_key_t: type <cimport,nodecl,using> = @enum(cint){
  omp_atk_sync_hint = 1,
  omp_atk_alignment = 2,
  omp_atk_access = 3,
  omp_atk_pool_size = 4,
  omp_atk_fallback = 5,
  omp_atk_fb_data = 6,
  omp_atk_pinned = 7,
  omp_atk_partition = 8
}
global omp_alloctrait_value_t: type <cimport,nodecl,using> = @enum(cint){
  omp_atv_false = 0,
  omp_atv_true = 1,
  omp_atv_contended = 3,
  omp_atv_uncontended = 4,
  omp_atv_serialized = 5,
  omp_atv_sequential = 5,
  omp_atv_private = 6,
  omp_atv_all = 7,
  omp_atv_thread = 8,
  omp_atv_pteam = 9,
  omp_atv_cgroup = 10,
  omp_atv_default_mem_fb = 11,
  omp_atv_null_fb = 12,
  omp_atv_abort_fb = 13,
  omp_atv_allocator_fb = 14,
  omp_atv_environment = 15,
  omp_atv_nearest = 16,
  omp_atv_blocked = 17,
  omp_atv_interleaved = 18
}
global omp_alloctrait_t: type <cimport,nodecl> = @record{
  key: omp_alloctrait_key_t,
  value: omp_uintptr_t
}
global omp_allocator_handle_t: type = @cint
global omp_null_allocator: cint <cimport,nodecl,const>
global omp_default_mem_alloc: cint <cimport,nodecl,const>
global omp_large_cap_mem_alloc: cint <cimport,nodecl,const>
global omp_const_mem_alloc: cint <cimport,nodecl,const>
global omp_high_bw_mem_alloc: cint <cimport,nodecl,const>
global omp_low_lat_mem_alloc: cint <cimport,nodecl,const>
global omp_cgroup_mem_alloc: cint <cimport,nodecl,const>
global omp_pteam_mem_alloc: cint <cimport,nodecl,const>
global omp_thread_mem_alloc: cint <cimport,nodecl,const>
global llvm_omp_target_host_mem_alloc: cint <cimport,nodecl,const>
global llvm_omp_target_shared_mem_alloc: cint <cimport,nodecl,const>
global llvm_omp_target_device_mem_alloc: cint <cimport,nodecl,const>
global KMP_ALLOCATOR_MAX_HANDLE: cint <cimport,nodecl,const>
global omp_memspace_handle_t: type = @cint
global omp_default_mem_space: cint <cimport,nodecl,const>
global omp_large_cap_mem_space: cint <cimport,nodecl,const>
global omp_const_mem_space: cint <cimport,nodecl,const>
global omp_high_bw_mem_space: cint <cimport,nodecl,const>
global omp_low_lat_mem_space: cint <cimport,nodecl,const>
global llvm_omp_target_host_mem_space: cint <cimport,nodecl,const>
global llvm_omp_target_shared_mem_space: cint <cimport,nodecl,const>
global llvm_omp_target_device_mem_space: cint <cimport,nodecl,const>
global KMP_MEMSPACE_MAX_HANDLE: cint <cimport,nodecl,const>
global omp_event_handle_t: type = @cint
global KMP_EVENT_MAX_HANDLE: cint <cimport,nodecl,const>
global omp_pause_resource_t: type <cimport,nodecl,using> = @enum(cint){
  omp_pause_resume = 0,
  omp_pause_soft = 1,
  omp_pause_hard = 2
}
global omp_int_t: type <cimport,nodecl> = @cint
global omp_wtime_t: type <cimport,nodecl> = @float64
global function omp_set_num_threads(a1: cint): void <cimport,nodecl> end
global function omp_set_dynamic(a1: cint): void <cimport,nodecl> end
global function omp_set_nested(a1: cint): void <cimport,nodecl> end
global function omp_set_max_active_levels(a1: cint): void <cimport,nodecl> end
global function omp_set_schedule(a1: omp_sched_t, a2: cint): void <cimport,nodecl> end
global function omp_get_num_threads(): cint <cimport,nodecl> end
global function omp_get_dynamic(): cint <cimport,nodecl> end
global function omp_get_nested(): cint <cimport,nodecl> end
global function omp_get_max_threads(): cint <cimport,nodecl> end
global function omp_get_thread_num(): cint <cimport,nodecl> end
global function omp_get_num_procs(): cint <cimport,nodecl> end
global function omp_in_parallel(): cint <cimport,nodecl> end
global function omp_in_final(): cint <cimport,nodecl> end
global function omp_get_active_level(): cint <cimport,nodecl> end
global function omp_get_level(): cint <cimport,nodecl> end
global function omp_get_ancestor_thread_num(a1: cint): cint <cimport,nodecl> end
global function omp_get_team_size(a1: cint): cint <cimport,nodecl> end
global function omp_get_thread_limit(): cint <cimport,nodecl> end
global function omp_get_max_active_levels(): cint <cimport,nodecl> end
global function omp_get_schedule(a1: *omp_sched_t, a2: *cint): void <cimport,nodecl> end
global function omp_get_max_task_priority(): cint <cimport,nodecl> end
global function omp_init_lock(a1: *omp_lock_t): void <cimport,nodecl> end
global function omp_set_lock(a1: *omp_lock_t): void <cimport,nodecl> end
global function omp_unset_lock(a1: *omp_lock_t): void <cimport,nodecl> end
global function omp_destroy_lock(a1: *omp_lock_t): void <cimport,nodecl> end
global function omp_test_lock(a1: *omp_lock_t): cint <cimport,nodecl> end
global function omp_init_nest_lock(a1: *omp_nest_lock_t): void <cimport,nodecl> end
global function omp_set_nest_lock(a1: *omp_nest_lock_t): void <cimport,nodecl> end
global function omp_unset_nest_lock(a1: *omp_nest_lock_t): void <cimport,nodecl> end
global function omp_destroy_nest_lock(a1: *omp_nest_lock_t): void <cimport,nodecl> end
global function omp_test_nest_lock(a1: *omp_nest_lock_t): cint <cimport,nodecl> end
global function omp_init_lock_with_hint(a1: *omp_lock_t, a2: omp_lock_hint_t): void <cimport,nodecl> end
global function omp_init_nest_lock_with_hint(a1: *omp_nest_lock_t, a2: omp_lock_hint_t): void <cimport,nodecl> end
global function omp_get_wtime(): float64 <cimport,nodecl> end
global function omp_get_wtick(): float64 <cimport,nodecl> end
global function omp_get_default_device(): cint <cimport,nodecl> end
global function omp_set_default_device(a1: cint): void <cimport,nodecl> end
global function omp_is_initial_device(): cint <cimport,nodecl> end
global function omp_get_num_devices(): cint <cimport,nodecl> end
global function omp_get_num_teams(): cint <cimport,nodecl> end
global function omp_get_team_num(): cint <cimport,nodecl> end
global function omp_get_cancellation(): cint <cimport,nodecl> end
global function omp_get_initial_device(): cint <cimport,nodecl> end
global function omp_target_alloc(a1: csize, a2: cint): pointer <cimport,nodecl> end
global function omp_target_free(a1: pointer, a2: cint): void <cimport,nodecl> end
global function omp_target_is_present(a1: pointer, a2: cint): cint <cimport,nodecl> end
global function omp_target_memcpy(a1: pointer, a2: pointer, a3: csize, a4: csize, a5: csize, a6: cint, a7: cint): cint <cimport,nodecl> end
global function omp_target_memcpy_rect(a1: pointer, a2: pointer, a3: csize, a4: cint, a5: *csize, a6: *csize, a7: *csize, a8: *csize, a9: *csize, a10: cint, a11: cint): cint <cimport,nodecl> end
global function omp_target_associate_ptr(a1: pointer, a2: pointer, a3: csize, a4: csize, a5: cint): cint <cimport,nodecl> end
global function omp_target_disassociate_ptr(a1: pointer, a2: cint): cint <cimport,nodecl> end
global function omp_get_device_num(): cint <cimport,nodecl> end
global function omp_get_num_interop_properties(a1: omp_interop_t): cint <cimport,nodecl> end
global function omp_get_interop_int(a1: omp_interop_t, a2: omp_interop_property_t, a3: *cint): omp_intptr_t <cimport,nodecl> end
global function omp_get_interop_ptr(a1: omp_interop_t, a2: omp_interop_property_t, a3: *cint): pointer <cimport,nodecl> end
global function omp_get_interop_str(a1: omp_interop_t, a2: omp_interop_property_t, a3: *cint): cstring <cimport,nodecl> end
global function omp_get_interop_name(a1: omp_interop_t, a2: omp_interop_property_t): cstring <cimport,nodecl> end
global function omp_get_interop_type_desc(a1: omp_interop_t, a2: omp_interop_property_t): cstring <cimport,nodecl> end
global function omp_get_interop_rc_desc(a1: omp_interop_t, a2: omp_interop_rc_t): cstring <cimport,nodecl> end
global function omp_target_memcpy_async(a1: pointer, a2: pointer, a3: csize, a4: csize, a5: csize, a6: cint, a7: cint, a8: cint, a9: *omp_depend_t): cint <cimport,nodecl> end
global function omp_target_memcpy_rect_async(a1: pointer, a2: pointer, a3: csize, a4: cint, a5: *csize, a6: *csize, a7: *csize, a8: *csize, a9: *csize, a10: cint, a11: cint, a12: cint, a13: *omp_depend_t): cint <cimport,nodecl> end
global function omp_get_mapped_ptr(a1: pointer, a2: cint): pointer <cimport,nodecl> end
global function omp_target_is_accessible(a1: pointer, a2: csize, a3: cint): cint <cimport,nodecl> end
global function omp_get_proc_bind(): omp_proc_bind_t <cimport,nodecl> end
global function omp_get_num_places(): cint <cimport,nodecl> end
global function omp_get_place_num_procs(a1: cint): cint <cimport,nodecl> end
global function omp_get_place_proc_ids(a1: cint, a2: *cint): void <cimport,nodecl> end
global function omp_get_place_num(): cint <cimport,nodecl> end
global function omp_get_partition_num_places(): cint <cimport,nodecl> end
global function omp_get_partition_place_nums(a1: *cint): void <cimport,nodecl> end
global function omp_control_tool(a1: cint, a2: cint, a3: pointer): cint <cimport,nodecl> end
global function omp_init_allocator(m: omp_memspace_handle_t, ntraits: cint, traits: *[0]omp_alloctrait_t): omp_allocator_handle_t <cimport,nodecl> end
global function omp_destroy_allocator(allocator: omp_allocator_handle_t): void <cimport,nodecl> end
global function omp_set_default_allocator(a: omp_allocator_handle_t): void <cimport,nodecl> end
global function omp_get_default_allocator(): omp_allocator_handle_t <cimport,nodecl> end
global function omp_alloc(size: csize, a: omp_allocator_handle_t): pointer <cimport,nodecl> end
global function omp_aligned_alloc(align: csize, size: csize, a: omp_allocator_handle_t): pointer <cimport,nodecl> end
global function omp_calloc(nmemb: csize, size: csize, a: omp_allocator_handle_t): pointer <cimport,nodecl> end
global function omp_aligned_calloc(align: csize, nmemb: csize, size: csize, a: omp_allocator_handle_t): pointer <cimport,nodecl> end
global function omp_realloc(ptr: pointer, size: csize, allocator: omp_allocator_handle_t, free_allocator: omp_allocator_handle_t): pointer <cimport,nodecl> end
global function omp_free(ptr: pointer, a: omp_allocator_handle_t): void <cimport,nodecl> end
global function ompc_set_affinity_format(a1: cstring): void <cimport,nodecl> end
global function ompc_get_affinity_format(a1: cstring, a2: csize): csize <cimport,nodecl> end
global function ompc_display_affinity(a1: cstring): void <cimport,nodecl> end
global function ompc_capture_affinity(a1: cstring, a2: csize, a3: cstring): csize <cimport,nodecl> end
global function omp_fulfill_event(event: omp_event_handle_t): void <cimport,nodecl> end
global function omp_pause_resource(a1: omp_pause_resource_t, a2: cint): cint <cimport,nodecl> end
global function omp_pause_resource_all(a1: omp_pause_resource_t): cint <cimport,nodecl> end
global function omp_get_supported_active_levels(): cint <cimport,nodecl> end
global function omp_set_num_teams(num_teams: cint): void <cimport,nodecl> end
global function omp_get_max_teams(): cint <cimport,nodecl> end
global function omp_set_teams_thread_limit(limit: cint): void <cimport,nodecl> end
global function omp_get_teams_thread_limit(): cint <cimport,nodecl> end
global function omp_display_env(verbose: cint): void <cimport,nodecl> end
global function omp_in_explicit_task(): cint <cimport,nodecl> end
global function llvm_omp_target_dynamic_shared_alloc(): pointer <cimport,nodecl> end
global function omp_set_affinity_format(a1: cstring): void <cimport,nodecl> end
global function omp_get_affinity_format(a1: cstring, a2: csize): csize <cimport,nodecl> end
global function omp_display_affinity(a1: cstring): void <cimport,nodecl> end
global function omp_capture_affinity(a1: cstring, a2: csize, a3: cstring): csize <cimport,nodecl> end
global omp_interop_none: cint <comptime> = 0
global omp_atv_default: omp_uintptr_t <cimport,nodecl,const>
